
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 24 3a 02 c0       	mov    eax,0xc0023a24
c0000025:	3d 24 3a 02 c0       	cmp    eax,0xc0023a24
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 24 3a 02 c0       	push   0xc0023a24
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 24 3a 02 c0       	mov    eax,0xc0023a24
c0000051:	2d 24 3a 02 c0       	sub    eax,0xc0023a24
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 24 3a 02 c0       	push   0xc0023a24
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc 00 02 c0       	mov    ebx,0xc00200fc
c0000097:	81 eb f8 00 02 c0    	sub    ebx,0xc00200f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 00 02 c0       	mov    esi,0xc00200f8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 24 3a 02 c0       	push   0xc0023a24
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 24 3a 02 c0       	push   0xc0023a24
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 03 53 01 00       	call   c00155b0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e1 52 01 00       	call   c00155b0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ee 57 01 00       	call   c0015adc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 89 5e 01 00       	call   c0016180 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 35 0f 01 00       	jmp    c00112b4 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 01 02 c0 02 	test   BYTE PTR [edx-0x3ffdff00],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdff00],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 01 02 c0 08 	test   BYTE PTR [edx-0x3ffdff00],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 01 02 c0 08 	test   BYTE PTR [edx-0x3ffdff00],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 01 02 c0 04 	test   BYTE PTR [ecx-0x3ffdff00],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdff00],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 02 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfdfc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 72 79 01 00       	jmp    c001974c <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 9c 79 01 00       	jmp    c001978c <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 bd 79 01 00       	jmp    c00197cc <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 03 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfca0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 03 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfca0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 44 2a 02 c0       	mov    edx,0xc0022a44
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c 02 02 c0       	mov    edx,0xc002021c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 02 02 c0       	mov    eax,0xc0020222
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 02 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfd20]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b 02 02 c0       	mov    eax,0xc002022b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 03 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfca0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 02 02 c0       	mov    eax,0xc00202b0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 02 02 c0       	mov    ebx,0xc00202a0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 02 02 c0       	mov    eax,0xc0020280
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 02 02 c0       	mov    eax,0xc0020290
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 02 02 c0       	mov    edx,0xc0020232
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e 02 02 c0       	mov    edx,0xc002023e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 02 02 c0       	mov    edx,0xc0020252
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020680
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020680
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 04 02 c0       	mov    eax,0xc0020480
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 03 02 c0       	mov    eax,0xc00203c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 03 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfc80]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 07 02 c0       	push   0xc0020780
c0006147:	e8 a4 3f 01 00       	call   c001a0f0 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e 07 02 c0       	push   0xc002078e
c000617f:	e8 6c 3f 01 00       	call   c001a0f0 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 d5 3e 01 00       	call   c001a094 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d 07 02 c0       	push   0xc002079d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 07 02 c0       	push   0xc00207a0
c000682f:	e8 bc 38 01 00       	call   c001a0f0 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 ca 38 01 00       	call   c001a10c <iso_kprintfd>
c0006842:	c7 04 24 a5 07 02 c0 	mov    DWORD PTR [esp],0xc00207a5
c0006849:	e8 a2 38 01 00       	call   c001a0f0 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 b2 38 01 00       	call   c001a10c <iso_kprintfd>
c000685a:	c7 04 24 ab 07 02 c0 	mov    DWORD PTR [esp],0xc00207ab
c0006861:	e8 8a 38 01 00       	call   c001a0f0 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 9a 38 01 00       	call   c001a10c <iso_kprintfd>
c0006872:	c7 04 24 b1 07 02 c0 	mov    DWORD PTR [esp],0xc00207b1
c0006879:	e8 72 38 01 00       	call   c001a0f0 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 82 38 01 00       	call   c001a10c <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d 07 02 c0       	push   0xc002079d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba 07 02 c0       	push   0xc00207ba
c0006a52:	e8 99 36 01 00       	call   c001a0f0 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 07 02 c0       	push   0xc00207c5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc 07 02 c0       	push   0xc00207cc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 07 02 c0       	push   0xc00207d3
c0006b69:	e8 82 35 01 00       	call   c001a0f0 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de 07 02 c0       	push   0xc00207de
c0006b84:	e8 67 35 01 00       	call   c001a0f0 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 82 9e 00 00       	call   c0010b16 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 a7 5b 00 00       	call   c000c84a <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 ef 07 02 c0       	push   0xc00207ef
c0006cd4:	e8 1c 9f 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 08 08 02 c0       	push   0xc0020808
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 07 ec 00 00       	call   c0015908 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 16 ee 00 00       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 f0 65 01 c0       	push   0xc00165f0
c0006d25:	52                   	push   edx
c0006d26:	e8 01 ee 00 00       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 04 09 02 c0       	push   0xc0020904
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 b8 9e 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 37 a7 00 00       	call   c0011480 <KeInitRand()>
c0006d49:	e8 c5 fc 00 00       	call   c0016a13 <Vm::initialise8086()>
c0006d4e:	e8 33 48 00 00       	call   c000b586 <Fs::initVFS()>
c0006d53:	c7 04 24 15 08 02 c0 	mov    DWORD PTR [esp],0xc0020815
c0006d5a:	e8 96 9e 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 04 09 02 c0       	push   0xc0020904
c0006d7e:	e8 72 9e 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0006d83:	e8 dc 44 00 00       	call   c000b264 <KeInitialiseSymlinks()>
c0006d88:	e8 9f a3 00 00       	call   c001112c <KeLoadSystemEnv()>
c0006d8d:	e8 fc a5 00 00       	call   c001138e <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 2f 08 02 c0       	push   0xc002082f
c0006d9c:	68 38 08 02 c0       	push   0xc0020838
c0006da1:	e8 64 cd 00 00       	call   c0013b0a <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 f6 53 00 00       	call   c000c1a4 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 28 09 02 c0 	mov    DWORD PTR [esp],0xc0020928
c0006db5:	e8 3b 9e 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 7c 5a 00 00       	call   c000c848 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 40 08 02 c0 	mov    DWORD PTR [esp],0xc0020840
c0006dd3:	e8 1d 9e 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 51 08 02 c0       	push   0xc0020851
c0006de7:	e8 21 e5 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 58 e7 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 76 f1 00 00       	call   c0015f78 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 6d 08 02 c0       	push   0xc002086d
c0006e17:	50                   	push   eax
c0006e18:	e8 a7 5a 00 00       	call   c000c8c4 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 74 09 02 c0       	mov    edx,0xc0020974
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 df 81 01 00       	call   c001f0f6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 d9 90 00 00       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 b2 90 00 00       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 90 90 00 00       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 6e 90 00 00       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 7b 8f 00 00       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 56 8f 00 00       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 3e 80 01 00       	call   c001f0b0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 8c 7c 01 00       	call   c001ed20 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 6c 8f 00 00       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 76 08 02 c0       	push   0xc0020876
c0007104:	e8 c0 a1 00 00       	call   c00112c9 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 7c 08 02 c0       	push   0xc002087c
c0007140:	e8 84 a1 00 00       	call   c00112c9 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 73 89 00 00       	jmp    c000fb00 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 82 08 02 c0       	push   0xc0020882
c00071e3:	0f 94 05 80 32 02 c0 	sete   BYTE PTR ds:0xc0023280
c00071ea:	e8 06 9a 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 6f 84 00 00       	call   c000f674 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 18 55 00 00       	call   c000c72c <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 9a 08 02 c0 	mov    DWORD PTR [esp],0xc002089a
c000722d:	e8 c3 99 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 9e 8e 00 00       	call   c00100e6 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 d5 54 00 00       	call   c000c72c <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 48 09 02 c0       	push   0xc0020948
c0007274:	e8 7c 99 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0007279:	e8 dc 09 01 00       	call   c0017c5a <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 b4 08 02 c0 	mov    DWORD PTR [esp],0xc00208b4
c0007285:	e8 6b 99 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 be e9 00 00       	call   c0015c54 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 cf 08 02 c0       	push   0xc00208cf
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 e0 08 02 c0       	push   0xc00208e0
c000730d:	e8 b7 9f 00 00       	call   c00112c9 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 ed 08 02 c0       	push   0xc00208ed
c0007322:	e8 a2 9f 00 00       	call   c00112c9 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 f7 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208f7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 88 9f 00 00       	jmp    c00112c9 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 f3 03 01 00       	call   c0017926 <HalSystemIdle()>
c0007533:	e8 7a 81 01 00       	call   c001f6b2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 b0 ed 01 c0       	push   0xc001edb0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 c0 ed 01 c0       	push   0xc001edc0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 ca ed 01 c0       	push   0xc001edca
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 d4 ed 01 c0       	push   0xc001edd4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 de ed 01 c0       	push   0xc001edde
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 e8 ed 01 c0       	push   0xc001ede8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 f2 ed 01 c0       	push   0xc001edf2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 fc ed 01 c0       	push   0xc001edfc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 06 ee 01 c0       	push   0xc001ee06
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 0e ee 01 c0       	push   0xc001ee0e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 18 ee 01 c0       	push   0xc001ee18
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 20 ee 01 c0       	push   0xc001ee20
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 28 ee 01 c0       	push   0xc001ee28
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 30 ee 01 c0       	push   0xc001ee30
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 4a ee 01 c0       	push   0xc001ee4a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 52 ee 01 c0       	push   0xc001ee52
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 5c ee 01 c0       	push   0xc001ee5c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 66 ee 01 c0       	push   0xc001ee66
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 70 ee 01 c0       	push   0xc001ee70
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 0a ef 01 c0       	push   0xc001ef0a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 11 ef 01 c0       	push   0xc001ef11
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 fc ee 01 c0       	push   0xc001eefc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 03 ef 01 c0       	push   0xc001ef03
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 7a ee 01 c0       	push   0xc001ee7a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 84 ee 01 c0       	push   0xc001ee84
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 8e ee 01 c0       	push   0xc001ee8e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 98 ee 01 c0       	push   0xc001ee98
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 a2 ee 01 c0       	push   0xc001eea2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 ac ee 01 c0       	push   0xc001eeac
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 b6 ee 01 c0       	push   0xc001eeb6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 c0 ee 01 c0       	push   0xc001eec0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 ca ee 01 c0       	push   0xc001eeca
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 d4 ee 01 c0       	push   0xc001eed4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 de ee 01 c0       	push   0xc001eede
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 e8 ee 01 c0       	push   0xc001eee8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 f2 ee 01 c0       	push   0xc001eef2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 4c f0 01 c0       	push   0xc001f04c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 56 f0 01 c0       	push   0xc001f056
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 60 f0 01 c0       	push   0xc001f060
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 6a f0 01 c0       	push   0xc001f06a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 74 f0 01 c0       	push   0xc001f074
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 7e f0 01 c0       	push   0xc001f07e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 88 f0 01 c0       	push   0xc001f088
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 92 f0 01 c0       	push   0xc001f092
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 06 ee 01 c0       	push   0xc001ee06
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 74 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023274
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 74 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023274
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 74 32 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023274,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 74 32 02 c0       	mov    eax,ds:0xc0023274
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 98 09 02 c0       	push   0xc0020998
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 c8 09 02 c0       	push   0xc00209c8
c0007a44:	e8 80 98 00 00       	call   c00112c9 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 cd 09 02 c0       	push   0xc00209cd
c0007a5a:	e8 6a 98 00 00       	call   c00112c9 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 d4 09 02 c0       	push   0xc00209d4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 f3 8f 00 00       	call   c0010b79 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 1c 8f 00 00       	call   c0010ac3 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 8d 7a 01 00       	call   c001f64a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 ec 09 02 c0       	push   0xc00209ec
c0007c4b:	e8 79 96 00 00       	call   c00112c9 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 ec 09 02 c0       	push   0xc00209ec
c0007cc5:	e8 ff 95 00 00       	call   c00112c9 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 78 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023278
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 78 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023278
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 78 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023278
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 91 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a91
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 f9 94 00 00       	jmp    c00112c9 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 14 0a 02 c0       	push   0xc0020a14
c0007e54:	e8 70 94 00 00       	call   c00112c9 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 a7 0a 02 c0       	push   0xc0020aa7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 44 0a 02 c0       	push   0xc0020a44
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 bf 0a 02 c0       	push   0xc0020abf
c000810a:	e8 ba 91 00 00       	call   c00112c9 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 68 0a 02 c0       	push   0xc0020a68
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 cd 0a 02 c0       	push   0xc0020acd
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 2c 0b 02 c0       	mov    edx,0xc0020b2c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 e9 0a 02 c0       	push   0xc0020ae9
c0008331:	e8 93 8f 00 00       	call   c00112c9 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 f9 d9 00 00       	call   c0015d78 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 23 71 01 00       	call   c001f530 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 06 0b 02 c0       	push   0xc0020b06
c0008422:	e8 a2 8e 00 00       	call   c00112c9 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 2c 0b 02 c0       	mov    edx,0xc0020b2c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 74 0b 02 c0       	mov    edx,0xc0020b74
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 02 51 00 00       	call   c000d60e <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 e6 05 01 00       	call   c0018b18 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d a0 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcd60]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d a0 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcd60]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 58 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcea8]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 30 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdced0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 18 03 01 00       	call   c00189ac <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 75 03 01 00       	jmp    c0018ab4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 40 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b40
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 3d 8b 00 00       	jmp    c00112c9 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 62 38 00 00       	jmp    c000c14b <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 4e 0b 02 c0       	mov    esi,0xc0020b4e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 8c fe 00 00       	call   c0018ab4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 74 0b 02 c0       	mov    edx,0xc0020b74
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 5f 0b 02 c0       	push   0xc0020b5f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 65 0b 02 c0       	push   0xc0020b65
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 3c 0c 02 c0       	mov    edx,0xc0020c3c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 e0 32 02 c0       	mov    eax,ds:0xc00232e0
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 e0 32 02 c0    	mov    DWORD PTR ds:0xc00232e0,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 2f 65 01 00       	call   c001f718 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 58 0c 02 c0       	mov    edx,0xc0020c58
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 3c 0c 02 c0       	mov    edx,0xc0020c3c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 2f 64 01 00       	call   c001f7ec <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 23 64 01 00       	call   c001f7f4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 29 63 01 00       	call   c001f718 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 14 0c 02 c0       	push   0xc0020c14
c0009414:	e8 b0 7e 00 00       	call   c00112c9 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 58 0c 02 c0       	mov    edx,0xc0020c58
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 2e 63 01 00       	call   c001f7ec <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 bb 63 01 00       	call   c001f896 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 79 61 01 00       	call   c001f6d6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 70 32 02 c0       	push   0xc0023270
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 d4 f6 01 c0       	push   0xc001f6d4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 e8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232e8
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d e8 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232e8
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d e4 32 02 c0    	mov    ebp,DWORD PTR ds:0xc00232e4
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 e4 32 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00232e4,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d e4 32 02 c0    	mov    DWORD PTR ds:0xc00232e4,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 6c 0c 02 c0       	push   0xc0020c6c
c0009674:	e8 50 7c 00 00       	call   c00112c9 <KePanic(char const*)>
c0009679:	8b 2d e4 32 02 c0    	mov    ebp,DWORD PTR ds:0xc00232e4
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 e4 32 02 c0    	mov    DWORD PTR ds:0xc00232e4,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 e4 32 02 c0       	mov    eax,ds:0xc00232e4
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 e4 32 02 c0    	mov    DWORD PTR ds:0xc00232e4,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 e4 32 02 c0       	mov    ds:0xc00232e4,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 ec 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232ec
c000973e:	8b 0d f4 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232f4
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d f0 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232f0
c0009759:	8b 0d ec 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232ec
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 00 0f 02 c0       	push   0xc0020f00
c000979e:	e8 26 7b 00 00       	call   c00112c9 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 17 0f 02 c0       	push   0xc0020f17
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d f0 32 02 c0    	mov    DWORD PTR ds:0xc00232f0,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 f8 32 02 c0 43 	mov    BYTE PTR ds:0xc00232f8,0x43
c000984f:	c7 05 ec 32 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00232ec,0x8
c0009859:	a3 f4 32 02 c0       	mov    ds:0xc00232f4,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c0009874:	f7 35 ec 32 02 c0    	div    DWORD PTR ds:0xc00232ec
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 8c 0c 02 c0       	push   0xc0020c8c
c00098af:	e8 15 7a 00 00       	call   c00112c9 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 2e 0f 02 c0       	push   0xc0020f2e
c0009981:	e8 43 79 00 00       	call   c00112c9 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 b0 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020cb0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 e0 78 00 00       	jmp    c00112c9 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 4a 0f 02 c0       	push   0xc0020f4a
c00099f6:	e8 ce 78 00 00       	call   c00112c9 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 66 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f66
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 84 78 00 00       	jmp    c00112c9 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 d4 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020cd4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 f8 0c 02 c0       	push   0xc0020cf8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 60 0d 02 c0       	push   0xc0020d60
c0009d87:	e8 3d 75 00 00       	call   c00112c9 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 84 0d 02 c0       	push   0xc0020d84
c0009e7b:	e8 49 74 00 00       	call   c00112c9 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 b0 0d 02 c0       	push   0xc0020db0
c0009fd9:	e8 eb 72 00 00       	call   c00112c9 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 b2 27 00 00       	call   c000c9c0 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 80 0f 02 c0       	push   0xc0020f80
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 f8 32 02 c0 	movsx  eax,BYTE PTR ds:0xc00232f8
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 8e 38 00 00       	call   c000db82 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d ec 32 02 c0    	cmp    DWORD PTR ds:0xc00232ec,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 d4 0d 02 c0       	push   0xc0020dd4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 8e 0f 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020f8e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 b1 0f 02 c0       	push   0xc0020fb1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 9f 0f 02 c0       	push   0xc0020f9f
c000a413:	e8 b1 6e 00 00       	call   c00112c9 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 04 0e 02 c0       	push   0xc0020e04
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 f8 32 02 c0 	movsx  eax,BYTE PTR ds:0xc00232f8
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 4a 36 00 00       	call   c000db16 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 ec 32 02 c0    	cmp    DWORD PTR ds:0xc00232ec,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 c4 0f 02 c0       	push   0xc0020fc4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 24 0e 02 c0       	push   0xc0020e24
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 84 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e84
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 d9 0f 02 c0       	push   0xc0020fd9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 ed 0f 02 c0       	push   0xc0020fed
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 00 10 02 c0       	push   0xc0021000
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 0d 10 02 c0       	push   0xc002100d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 26 10 02 c0       	push   0xc0021026
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 26 10 02 c0       	push   0xc0021026
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 2e 10 02 c0 	mov    DWORD PTR [esp],0xc002102e
c000a7ec:	e8 d8 6a 00 00       	call   c00112c9 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 46 10 02 c0       	push   0xc0021046
c000a7fe:	e8 c6 6a 00 00       	call   c00112c9 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 5c 10 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdefa4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 ac 11 02 c0       	push   0xc00211ac
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 c0 11 02 c0       	push   0xc00211c0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 ca 11 02 c0       	push   0xc00211ca
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 d4 11 02 c0       	push   0xc00211d4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 18 13 02 c0       	push   0xc0021318
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 de 11 02 c0       	push   0xc00211de
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 38 13 02 c0       	push   0xc0021338
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 f3 11 02 c0       	push   0xc00211f3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 0d 12 02 c0       	push   0xc002120d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 00 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd00]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 60 13 02 c0       	push   0xc0021360
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 18 13 02 c0       	push   0xc0021318
c000ab78:	e8 4c 67 00 00       	call   c00112c9 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 a8 13 02 c0       	push   0xc00213a8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 a8 13 02 c0       	push   0xc00213a8
c000aba7:	e8 1d 67 00 00       	call   c00112c9 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 18 12 02 c0       	push   0xc0021218
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 18 12 02 c0       	push   0xc0021218
c000abd3:	e8 f1 66 00 00       	call   c00112c9 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 35 12 02 c0       	push   0xc0021235
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 35 12 02 c0       	push   0xc0021235
c000abff:	e8 c5 66 00 00       	call   c00112c9 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 c8 13 02 c0       	push   0xc00213c8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 c8 13 02 c0       	push   0xc00213c8
c000ac2b:	e8 99 66 00 00       	call   c00112c9 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 ec 13 02 c0       	push   0xc00213ec
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 ec 13 02 c0       	push   0xc00213ec
c000ac57:	e8 6d 66 00 00       	call   c00112c9 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 51 12 02 c0       	push   0xc0021251
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 51 12 02 c0       	push   0xc0021251
c000ac83:	e8 41 66 00 00       	call   c00112c9 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 6d 12 02 c0       	push   0xc002126d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 6d 12 02 c0       	push   0xc002126d
c000acaf:	e8 15 66 00 00       	call   c00112c9 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 0c 14 02 c0       	push   0xc002140c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 0c 14 02 c0       	push   0xc002140c
c000acdb:	e8 e9 65 00 00       	call   c00112c9 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 30 14 02 c0       	push   0xc0021430
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 30 14 02 c0       	push   0xc0021430
c000ad07:	e8 bd 65 00 00       	call   c00112c9 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 f5 66 00 00       	call   c0011417 <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 4f 14 02 c0       	push   0xc002144f
c000ad57:	e8 6d 65 00 00       	call   c00112c9 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 58 14 02 c0       	push   0xc0021458
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 08 0b 00 00       	call   c000b8ac <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 76 14 02 c0       	push   0xc0021476
c000adb3:	e8 11 65 00 00       	call   c00112c9 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 05 0b 00 00       	call   c000b8ca <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 90 14 02 c0       	push   0xc0021490
c000add4:	e8 f0 64 00 00       	call   c00112c9 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 aa 14 02 c0       	push   0xc00214aa
c000ae1b:	e8 a9 64 00 00       	call   c00112c9 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 ef 0a 00 00       	call   c000b928 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 c4 14 02 c0       	push   0xc00214c4
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	75 07                	jne    c000af3d <KeDereferenceSymlink(char const*, char*)+0x30>
c000af36:	31 c0                	xor    eax,eax
c000af38:	e9 e3 01 00 00       	jmp    c000b120 <KeDereferenceSymlink(char const*, char*)+0x213>
c000af3d:	53                   	push   ebx
c000af3e:	89 d5                	mov    ebp,edx
c000af40:	53                   	push   ebx
c000af41:	57                   	push   edi
c000af42:	68 de 14 02 c0       	push   0xc00214de
c000af47:	e8 be f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af4c:	58                   	pop    eax
c000af4d:	5a                   	pop    edx
c000af4e:	55                   	push   ebp
c000af4f:	68 ec 14 02 c0       	push   0xc00214ec
c000af54:	e8 b1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af59:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af60:	e8 6e cb ff ff       	call   c0007ad3 <malloc>
c000af65:	83 c4 0c             	add    esp,0xc
c000af68:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6e:	56                   	push   esi
c000af6f:	50                   	push   eax
c000af70:	89 c3                	mov    ebx,eax
c000af72:	e8 35 09 00 00       	call   c000b8ac <File::File(char const*, Process*)>
c000af77:	83 c4 10             	add    esp,0x10
c000af7a:	85 db                	test   ebx,ebx
c000af7c:	0f 84 68 01 00 00    	je     c000b0ea <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	68 e0 20 02 c0       	push   0xc00220e0
c000af8a:	e8 7b f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8f:	5a                   	pop    edx
c000af90:	59                   	pop    ecx
c000af91:	6a 01                	push   0x1
c000af93:	53                   	push   ebx
c000af94:	e8 31 09 00 00       	call   c000b8ca <File::open(FileOpenMode)>
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	85 c0                	test   eax,eax
c000af9e:	74 0b                	je     c000afab <KeDereferenceSymlink(char const*, char*)+0x9e>
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa5:	53                   	push   ebx
c000afa6:	e9 39 01 00 00       	jmp    c000b0e4 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000afab:	83 ec 0c             	sub    esp,0xc
c000afae:	68 e6 0a 02 c0       	push   0xc0020ae6
c000afb3:	e8 52 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb8:	58                   	pop    eax
c000afb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afbb:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbf:	56                   	push   esi
c000afc0:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc4:	52                   	push   edx
c000afc5:	6a 00                	push   0x0
c000afc7:	6a 08                	push   0x8
c000afc9:	53                   	push   ebx
c000afca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afcd:	83 c4 20             	add    esp,0x20
c000afd0:	85 c0                	test   eax,eax
c000afd2:	0f 85 fe 00 00 00    	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000afd8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afdd:	0f 85 f3 00 00 00    	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000afe3:	83 ec 0c             	sub    esp,0xc
c000afe6:	68 12 21 02 c0       	push   0xc0022112
c000afeb:	e8 1a f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aff0:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff9:	52                   	push   edx
c000affa:	6a 00                	push   0x0
c000affc:	6a 08                	push   0x8
c000affe:	53                   	push   ebx
c000afff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b002:	83 c4 20             	add    esp,0x20
c000b005:	85 c0                	test   eax,eax
c000b007:	0f 85 c9 00 00 00    	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b00d:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b012:	0f 85 be 00 00 00    	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b018:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b01c:	0f 85 14 ff ff ff    	jne    c000af36 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b022:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b026:	0f 85 0a ff ff ff    	jne    c000af36 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b02c:	83 ec 0c             	sub    esp,0xc
c000b02f:	68 fa 14 02 c0       	push   0xc00214fa
c000b034:	e8 d1 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b039:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b041:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b049:	83 c4 0c             	add    esp,0xc
c000b04c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b050:	50                   	push   eax
c000b051:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b055:	50                   	push   eax
c000b056:	53                   	push   ebx
c000b057:	e8 70 0b 00 00       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c000b05c:	83 c4 10             	add    esp,0x10
c000b05f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b064:	75 70                	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b066:	b8 0f 00 00 00       	mov    eax,0xf
c000b06b:	31 ff                	xor    edi,edi
c000b06d:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b071:	89 f8                	mov    eax,edi
c000b073:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b077:	73 5d                	jae    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b079:	83 ec 0c             	sub    esp,0xc
c000b07c:	68 fa 14 02 c0       	push   0xc00214fa
c000b081:	e8 84 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b086:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b08a:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b093:	83 c0 f0             	add    eax,0xfffffff0
c000b096:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b09a:	83 d2 ff             	adc    edx,0xffffffff
c000b09d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0a1:	83 c4 10             	add    esp,0x10
c000b0a4:	39 c1                	cmp    ecx,eax
c000b0a6:	19 d7                	sbb    edi,edx
c000b0a8:	72 40                	jb     c000b0ea <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0af:	56                   	push   esi
c000b0b0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b4:	52                   	push   edx
c000b0b5:	50                   	push   eax
c000b0b6:	53                   	push   ebx
c000b0b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0ba:	83 c4 20             	add    esp,0x20
c000b0bd:	85 c0                	test   eax,eax
c000b0bf:	75 15                	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c5:	89 c7                	mov    edi,eax
c000b0c7:	c1 ff 1f             	sar    edi,0x1f
c000b0ca:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0ce:	75 06                	jne    c000b0d6 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0d0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d4:	74 19                	je     c000b0ef <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	53                   	push   ebx
c000b0da:	e8 49 08 00 00       	call   c000b928 <File::close()>
c000b0df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e7:	83 c4 10             	add    esp,0x10
c000b0ea:	83 c8 ff             	or     eax,0xffffffff
c000b0ed:	eb 31                	jmp    c000b120 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	68 f2 2b 02 c0       	push   0xc0022bf2
c000b0f7:	e8 0e f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ff:	e8 24 08 00 00       	call   c000b928 <File::close()>
c000b104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b106:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b109:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b10c:	c7 04 24 fd 14 02 c0 	mov    DWORD PTR [esp],0xc00214fd
c000b113:	e8 f2 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b118:	83 c4 10             	add    esp,0x10
c000b11b:	b8 01 00 00 00       	mov    eax,0x1
c000b120:	83 c4 3c             	add    esp,0x3c
c000b123:	5b                   	pop    ebx
c000b124:	5e                   	pop    esi
c000b125:	5f                   	pop    edi
c000b126:	5d                   	pop    ebp
c000b127:	c3                   	ret    

c000b128 <KeCreateSymlink(char const*, char const*)>:
c000b128:	55                   	push   ebp
c000b129:	57                   	push   edi
c000b12a:	56                   	push   esi
c000b12b:	53                   	push   ebx
c000b12c:	83 ec 38             	sub    esp,0x38
c000b12f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b133:	68 14 01 00 00       	push   0x114
c000b138:	e8 96 c9 ff ff       	call   c0007ad3 <malloc>
c000b13d:	6a 00                	push   0x0
c000b13f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b145:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b149:	89 c3                	mov    ebx,eax
c000b14b:	50                   	push   eax
c000b14c:	e8 7d 06 00 00       	call   c000b7ce <File::File(char const*, Process*, bool)>
c000b151:	83 c4 20             	add    esp,0x20
c000b154:	85 db                	test   ebx,ebx
c000b156:	b8 01 00 00 00       	mov    eax,0x1
c000b15b:	0f 84 fb 00 00 00    	je     c000b25c <KeCreateSymlink(char const*, char const*)+0x134>
c000b161:	52                   	push   edx
c000b162:	52                   	push   edx
c000b163:	6a 12                	push   0x12
c000b165:	53                   	push   ebx
c000b166:	e8 5f 07 00 00       	call   c000b8ca <File::open(FileOpenMode)>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	85 c0                	test   eax,eax
c000b170:	74 0b                	je     c000b17d <KeCreateSymlink(char const*, char const*)+0x55>
c000b172:	83 ec 0c             	sub    esp,0xc
c000b175:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b177:	53                   	push   ebx
c000b178:	e9 d4 00 00 00       	jmp    c000b251 <KeCreateSymlink(char const*, char const*)+0x129>
c000b17d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b181:	be 00 15 02 c0       	mov    esi,0xc0021500
c000b186:	b9 09 00 00 00       	mov    ecx,0x9
c000b18b:	fc                   	cld    
c000b18c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b195:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b197:	56                   	push   esi
c000b198:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b19c:	52                   	push   edx
c000b19d:	6a 00                	push   0x0
c000b19f:	6a 08                	push   0x8
c000b1a1:	53                   	push   ebx
c000b1a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a5:	83 c4 20             	add    esp,0x20
c000b1a8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1ad:	0f 85 90 00 00 00    	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1b3:	85 c0                	test   eax,eax
c000b1b5:	0f 85 88 00 00 00    	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1bb:	e8 54 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1cd:	56                   	push   esi
c000b1ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1d2:	52                   	push   edx
c000b1d3:	6a 00                	push   0x0
c000b1d5:	6a 08                	push   0x8
c000b1d7:	53                   	push   ebx
c000b1d8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1db:	83 c4 20             	add    esp,0x20
c000b1de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e3:	75 5e                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1e5:	85 c0                	test   eax,eax
c000b1e7:	75 5a                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1f1:	55                   	push   ebp
c000b1f2:	e8 89 53 ff ff       	call   c0000580 <strlen>
c000b1f7:	31 d2                	xor    edx,edx
c000b1f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1fc:	55                   	push   ebp
c000b1fd:	52                   	push   edx
c000b1fe:	50                   	push   eax
c000b1ff:	53                   	push   ebx
c000b200:	ff d7                	call   edi
c000b202:	83 c4 14             	add    esp,0x14
c000b205:	55                   	push   ebp
c000b206:	89 c6                	mov    esi,eax
c000b208:	e8 73 53 ff ff       	call   c0000580 <strlen>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b214:	75 2d                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b216:	85 f6                	test   esi,esi
c000b218:	75 29                	jne    c000b243 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b21a:	50                   	push   eax
c000b21b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b223:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b227:	e8 2b fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b22c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22f:	e8 f4 06 00 00       	call   c000b928 <File::close()>
c000b234:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b239:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b23c:	83 c4 10             	add    esp,0x10
c000b23f:	31 c0                	xor    eax,eax
c000b241:	eb 19                	jmp    c000b25c <KeCreateSymlink(char const*, char const*)+0x134>
c000b243:	83 ec 0c             	sub    esp,0xc
c000b246:	53                   	push   ebx
c000b247:	e8 dc 06 00 00       	call   c000b928 <File::close()>
c000b24c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b24e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b251:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	b8 01 00 00 00       	mov    eax,0x1
c000b25c:	83 c4 2c             	add    esp,0x2c
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	5f                   	pop    edi
c000b262:	5d                   	pop    ebp
c000b263:	c3                   	ret    

c000b264 <KeInitialiseSymlinks()>:
c000b264:	53                   	push   ebx
c000b265:	83 ec 10             	sub    esp,0x10
c000b268:	6a 00                	push   0x0
c000b26a:	68 52 ae 00 c0       	push   0xc000ae52
c000b26f:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b279:	e8 64 58 00 00       	call   c0010ae2 <KeRegisterAtexit(void (*)(void*), void*)>
c000b27e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b285:	e8 49 c8 ff ff       	call   c0007ad3 <malloc>
c000b28a:	83 c4 0c             	add    esp,0xc
c000b28d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b293:	68 58 14 02 c0       	push   0xc0021458
c000b298:	50                   	push   eax
c000b299:	89 c3                	mov    ebx,eax
c000b29b:	e8 0c 06 00 00       	call   c000b8ac <File::File(char const*, Process*)>
c000b2a0:	83 c4 10             	add    esp,0x10
c000b2a3:	85 db                	test   ebx,ebx
c000b2a5:	75 10                	jne    c000b2b7 <KeInitialiseSymlinks()+0x53>
c000b2a7:	83 ec 0c             	sub    esp,0xc
c000b2aa:	68 09 15 02 c0       	push   0xc0021509
c000b2af:	e8 15 60 00 00       	call   c00112c9 <KePanic(char const*)>
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	83 ec 0c             	sub    esp,0xc
c000b2ba:	53                   	push   ebx
c000b2bb:	e8 ce 08 00 00       	call   c000bb8e <File::exists()>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	84 c0                	test   al,al
c000b2c5:	75 2d                	jne    c000b2f4 <KeInitialiseSymlinks()+0x90>
c000b2c7:	52                   	push   edx
c000b2c8:	52                   	push   edx
c000b2c9:	6a 12                	push   0x12
c000b2cb:	53                   	push   ebx
c000b2cc:	e8 f9 05 00 00       	call   c000b8ca <File::open(FileOpenMode)>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	85 c0                	test   eax,eax
c000b2d6:	74 10                	je     c000b2e8 <KeInitialiseSymlinks()+0x84>
c000b2d8:	83 ec 0c             	sub    esp,0xc
c000b2db:	68 26 15 02 c0       	push   0xc0021526
c000b2e0:	e8 e4 5f 00 00       	call   c00112c9 <KePanic(char const*)>
c000b2e5:	83 c4 10             	add    esp,0x10
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	53                   	push   ebx
c000b2ec:	e8 37 06 00 00       	call   c000b928 <File::close()>
c000b2f1:	83 c4 10             	add    esp,0x10
c000b2f4:	85 db                	test   ebx,ebx
c000b2f6:	74 0c                	je     c000b304 <KeInitialiseSymlinks()+0xa0>
c000b2f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2fa:	83 ec 0c             	sub    esp,0xc
c000b2fd:	53                   	push   ebx
c000b2fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	50                   	push   eax
c000b305:	50                   	push   eax
c000b306:	68 43 15 02 c0       	push   0xc0021543
c000b30b:	68 51 15 02 c0       	push   0xc0021551
c000b310:	e8 13 fe ff ff       	call   c000b128 <KeCreateSymlink(char const*, char const*)>
c000b315:	83 c4 18             	add    esp,0x18
c000b318:	5b                   	pop    ebx
c000b319:	c3                   	ret    

c000b31a <File::read(unsigned long long, void*, int*)>:
c000b31a:	53                   	push   ebx
c000b31b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b31f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b323:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b32a:	83 f8 19             	cmp    eax,0x19
c000b32d:	77 35                	ja     c000b364 <File::read(unsigned long long, void*, int*)+0x4a>
c000b32f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b336:	85 c0                	test   eax,eax
c000b338:	74 2a                	je     c000b364 <File::read(unsigned long long, void*, int*)+0x4a>
c000b33a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b340:	85 c0                	test   eax,eax
c000b342:	74 20                	je     c000b364 <File::read(unsigned long long, void*, int*)+0x4a>
c000b344:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b348:	74 21                	je     c000b36b <File::read(unsigned long long, void*, int*)+0x51>
c000b34a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b34c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b350:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b35a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b35e:	5b                   	pop    ebx
c000b35f:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b362:	ff e0                	jmp    eax
c000b364:	b8 0b 00 00 00       	mov    eax,0xb
c000b369:	eb 05                	jmp    c000b370 <File::read(unsigned long long, void*, int*)+0x56>
c000b36b:	b8 05 00 00 00       	mov    eax,0x5
c000b370:	5b                   	pop    ebx
c000b371:	c3                   	ret    

c000b372 <File::write(unsigned long long, void*, int*)>:
c000b372:	53                   	push   ebx
c000b373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b377:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b37b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b382:	83 f8 19             	cmp    eax,0x19
c000b385:	77 35                	ja     c000b3bc <File::write(unsigned long long, void*, int*)+0x4a>
c000b387:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b38e:	85 c0                	test   eax,eax
c000b390:	74 2a                	je     c000b3bc <File::write(unsigned long long, void*, int*)+0x4a>
c000b392:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b398:	85 c0                	test   eax,eax
c000b39a:	74 20                	je     c000b3bc <File::write(unsigned long long, void*, int*)+0x4a>
c000b39c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3a0:	74 21                	je     c000b3c3 <File::write(unsigned long long, void*, int*)+0x51>
c000b3a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b6:	5b                   	pop    ebx
c000b3b7:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3ba:	ff e0                	jmp    eax
c000b3bc:	b8 0b 00 00 00       	mov    eax,0xb
c000b3c1:	eb 05                	jmp    c000b3c8 <File::write(unsigned long long, void*, int*)+0x56>
c000b3c3:	b8 05 00 00 00       	mov    eax,0x5
c000b3c8:	5b                   	pop    ebx
c000b3c9:	c3                   	ret    

c000b3ca <Directory::read(unsigned long long, void*, int*)>:
c000b3ca:	53                   	push   ebx
c000b3cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3da:	83 f8 19             	cmp    eax,0x19
c000b3dd:	77 35                	ja     c000b414 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3df:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e6:	85 c0                	test   eax,eax
c000b3e8:	74 2a                	je     c000b414 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3ea:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3f0:	85 c0                	test   eax,eax
c000b3f2:	74 20                	je     c000b414 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f8:	74 21                	je     c000b41b <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b400:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b406:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b40a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40e:	5b                   	pop    ebx
c000b40f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b412:	ff e0                	jmp    eax
c000b414:	b8 0b 00 00 00       	mov    eax,0xb
c000b419:	eb 05                	jmp    c000b420 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b41b:	b8 05 00 00 00       	mov    eax,0x5
c000b420:	5b                   	pop    ebx
c000b421:	c3                   	ret    

c000b422 <Directory::write(unsigned long long, void*, int*)>:
c000b422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b426:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b42d:	b8 0b 00 00 00       	mov    eax,0xb
c000b432:	83 fa 19             	cmp    edx,0x19
c000b435:	77 18                	ja     c000b44f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b437:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b43e:	85 d2                	test   edx,edx
c000b440:	74 0d                	je     c000b44f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b442:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b449:	19 c0                	sbb    eax,eax
c000b44b:	83 e0 0a             	and    eax,0xa
c000b44e:	40                   	inc    eax
c000b44f:	c3                   	ret    

c000b450 <File::isAtty()>:
c000b450:	31 c0                	xor    eax,eax
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Directory::isAtty()>:
c000b454:	31 c0                	xor    eax,eax
c000b456:	c3                   	ret    
c000b457:	90                   	nop

c000b458 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b458:	b8 0a 00 00 00       	mov    eax,0xa
c000b45d:	c3                   	ret    

c000b45e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b45e:	b8 0a 00 00 00       	mov    eax,0xa
c000b463:	c3                   	ret    

c000b464 <Filesystem::allocateSwapfile(char const*, int)>:
c000b464:	31 c0                	xor    eax,eax
c000b466:	31 d2                	xor    edx,edx
c000b468:	c3                   	ret    
c000b469:	90                   	nop

c000b46a <File::~File()>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c000b472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b476:	89 10                	mov    DWORD PTR [eax],edx
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	83 ec 0c             	sub    esp,0xc
c000b47f:	50                   	push   eax
c000b480:	e8 07 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	90                   	nop
c000b489:	83 c4 0c             	add    esp,0xc
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <File::~File()>:
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	83 ec 0c             	sub    esp,0xc
c000b494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b498:	e8 cd ff ff ff       	call   c000b46a <File::~File()>
c000b49d:	83 c4 10             	add    esp,0x10
c000b4a0:	83 ec 08             	sub    esp,0x8
c000b4a3:	68 14 01 00 00       	push   0x114
c000b4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ac:	e8 5b f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	c3                   	ret    

c000b4b8 <Directory::~Directory()>:
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	ba 28 16 02 c0       	mov    edx,0xc0021628
c000b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c4:	89 10                	mov    DWORD PTR [eax],edx
c000b4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ca:	83 ec 0c             	sub    esp,0xc
c000b4cd:	50                   	push   eax
c000b4ce:	e8 b9 de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4d3:	83 c4 10             	add    esp,0x10
c000b4d6:	90                   	nop
c000b4d7:	83 c4 0c             	add    esp,0xc
c000b4da:	c3                   	ret    
c000b4db:	90                   	nop

c000b4dc <Directory::~Directory()>:
c000b4dc:	83 ec 0c             	sub    esp,0xc
c000b4df:	83 ec 0c             	sub    esp,0xc
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 cd ff ff ff       	call   c000b4b8 <Directory::~Directory()>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 ec 08             	sub    esp,0x8
c000b4f1:	68 14 01 00 00       	push   0x114
c000b4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fa:	e8 0d f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ff:	83 c4 10             	add    esp,0x10
c000b502:	83 c4 0c             	add    esp,0xc
c000b505:	c3                   	ret    

c000b506 <Filesystem::Filesystem()>:
c000b506:	ba a0 15 02 c0       	mov    edx,0xc00215a0
c000b50b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50f:	89 10                	mov    DWORD PTR [eax],edx
c000b511:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b51e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b522:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b527:	90                   	nop
c000b528:	c3                   	ret    
c000b529:	90                   	nop

c000b52a <Filesystem::~Filesystem()>:
c000b52a:	ba a0 15 02 c0       	mov    edx,0xc00215a0
c000b52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b533:	89 10                	mov    DWORD PTR [eax],edx
c000b535:	90                   	nop
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <Filesystem::~Filesystem()>:
c000b538:	83 ec 0c             	sub    esp,0xc
c000b53b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53f:	e8 e6 ff ff ff       	call   c000b52a <Filesystem::~Filesystem()>
c000b544:	83 c4 04             	add    esp,0x4
c000b547:	83 ec 08             	sub    esp,0x8
c000b54a:	6a 08                	push   0x8
c000b54c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b550:	e8 b7 f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b555:	83 c4 10             	add    esp,0x10
c000b558:	83 c4 0c             	add    esp,0xc
c000b55b:	c3                   	ret    

c000b55c <Fs::getcwd(Process*, char*, int)>:
c000b55c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b560:	31 c0                	xor    eax,eax
c000b562:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b566:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b569:	7d 15                	jge    c000b580 <Fs::getcwd(Process*, char*, int)+0x24>
c000b56b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b56f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b576:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b579:	84 c9                	test   cl,cl
c000b57b:	74 06                	je     c000b583 <Fs::getcwd(Process*, char*, int)+0x27>
c000b57d:	40                   	inc    eax
c000b57e:	eb e2                	jmp    c000b562 <Fs::getcwd(Process*, char*, int)+0x6>
c000b580:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b583:	31 c0                	xor    eax,eax
c000b585:	c3                   	ret    

c000b586 <Fs::initVFS()>:
c000b586:	83 ec 18             	sub    esp,0x18
c000b589:	6a 08                	push   0x8
c000b58b:	e8 43 c5 ff ff       	call   c0007ad3 <malloc>
c000b590:	89 04 24             	mov    DWORD PTR [esp],eax
c000b593:	e8 54 e3 00 00       	call   c00198ec <FAT::FAT()>
c000b598:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b59f:	e8 2f c5 ff ff       	call   c0007ad3 <malloc>
c000b5a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a7:	e8 6e f2 00 00       	call   c001a81a <ISO9660::ISO9660()>
c000b5ac:	83 c4 1c             	add    esp,0x1c
c000b5af:	c3                   	ret    

c000b5b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5b0:	55                   	push   ebp
c000b5b1:	57                   	push   edi
c000b5b2:	56                   	push   esi
c000b5b3:	53                   	push   ebx
c000b5b4:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5ba:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5c1:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c8:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5cf:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5d6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5da:	68 00 04 00 00       	push   0x400
c000b5df:	6a 00                	push   0x0
c000b5e1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5e5:	57                   	push   edi
c000b5e6:	e8 05 4f ff ff       	call   c00004f0 <memset>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5f2:	75 0b                	jne    c000b5ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5f4:	50                   	push   eax
c000b5f5:	50                   	push   eax
c000b5f6:	56                   	push   esi
c000b5f7:	57                   	push   edi
c000b5f8:	e8 53 50 ff ff       	call   c0000650 <strcpy>
c000b5fd:	eb 45                	jmp    c000b644 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5ff:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b602:	83 f8 2f             	cmp    eax,0x2f
c000b605:	74 05                	je     c000b60c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b607:	83 f8 5c             	cmp    eax,0x5c
c000b60a:	75 19                	jne    c000b625 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b60c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b60f:	3c 60                	cmp    al,0x60
c000b611:	7e 03                	jle    c000b616 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b613:	83 e8 20             	sub    eax,0x20
c000b616:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b61a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b621:	50                   	push   eax
c000b622:	50                   	push   eax
c000b623:	eb 18                	jmp    c000b63d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b625:	50                   	push   eax
c000b626:	50                   	push   eax
c000b627:	55                   	push   ebp
c000b628:	57                   	push   edi
c000b629:	e8 22 50 ff ff       	call   c0000650 <strcpy>
c000b62e:	58                   	pop    eax
c000b62f:	5a                   	pop    edx
c000b630:	68 63 25 02 c0       	push   0xc0022563
c000b635:	57                   	push   edi
c000b636:	e8 35 52 ff ff       	call   c0000870 <strcat>
c000b63b:	59                   	pop    ecx
c000b63c:	5d                   	pop    ebp
c000b63d:	56                   	push   esi
c000b63e:	57                   	push   edi
c000b63f:	e8 2c 52 ff ff       	call   c0000870 <strcat>
c000b644:	83 c4 10             	add    esp,0x10
c000b647:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b64b:	3c 60                	cmp    al,0x60
c000b64d:	7e 03                	jle    c000b652 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b64f:	83 e8 20             	sub    eax,0x20
c000b652:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b656:	be 03 00 00 00       	mov    esi,0x3
c000b65b:	88 03                	mov    BYTE PTR [ebx],al
c000b65d:	b8 03 00 00 00       	mov    eax,0x3
c000b662:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b669:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b66f:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b673:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b678:	89 fa                	mov    edx,edi
c000b67a:	0f be ea             	movsx  ebp,dl
c000b67d:	85 ed                	test   ebp,ebp
c000b67f:	0f 84 a1 00 00 00    	je     c000b726 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b685:	8d 56 01             	lea    edx,[esi+0x1]
c000b688:	83 fd 2f             	cmp    ebp,0x2f
c000b68b:	74 05                	je     c000b692 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b68d:	83 fd 5c             	cmp    ebp,0x5c
c000b690:	75 12                	jne    c000b6a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b692:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b697:	89 c5                	mov    ebp,eax
c000b699:	74 09                	je     c000b6a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b69b:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b69f:	40                   	inc    eax
c000b6a0:	89 d6                	mov    esi,edx
c000b6a2:	eb cf                	jmp    c000b673 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6a4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a9:	89 f9                	mov    ecx,edi
c000b6ab:	0f be e9             	movsx  ebp,cl
c000b6ae:	75 61                	jne    c000b711 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6b0:	83 fd 2e             	cmp    ebp,0x2e
c000b6b3:	75 5c                	jne    c000b711 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6b5:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6ba:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6bf:	74 19                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6c1:	83 fd 2e             	cmp    ebp,0x2e
c000b6c4:	74 55                	je     c000b71b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6c6:	89 f2                	mov    edx,esi
c000b6c8:	42                   	inc    edx
c000b6c9:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6ce:	83 f9 2f             	cmp    ecx,0x2f
c000b6d1:	74 f5                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d3:	83 f9 5c             	cmp    ecx,0x5c
c000b6d6:	74 f0                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d8:	eb c6                	jmp    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6da:	83 fd 2e             	cmp    ebp,0x2e
c000b6dd:	74 3c                	je     c000b71b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6df:	83 f8 03             	cmp    eax,0x3
c000b6e2:	74 bc                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6e4:	42                   	inc    edx
c000b6e5:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6ea:	83 f9 2f             	cmp    ecx,0x2f
c000b6ed:	74 f5                	je     c000b6e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6ef:	83 f9 5c             	cmp    ecx,0x5c
c000b6f2:	74 f0                	je     c000b6e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6f4:	48                   	dec    eax
c000b6f5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f9:	75 06                	jne    c000b701 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6fb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6ff:	eb f3                	jmp    c000b6f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b701:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b705:	74 07                	je     c000b70e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b707:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b70b:	48                   	dec    eax
c000b70c:	eb f3                	jmp    c000b701 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b70e:	40                   	inc    eax
c000b70f:	eb 8f                	jmp    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b711:	83 fd 2f             	cmp    ebp,0x2f
c000b714:	74 8a                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b716:	83 fd 5c             	cmp    ebp,0x5c
c000b719:	74 85                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b71b:	89 f9                	mov    ecx,edi
c000b71d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b720:	40                   	inc    eax
c000b721:	e9 7a ff ff ff       	jmp    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b726:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b72a:	83 ec 0c             	sub    esp,0xc
c000b72d:	53                   	push   ebx
c000b72e:	e8 4d 4e ff ff       	call   c0000580 <strlen>
c000b733:	83 c4 10             	add    esp,0x10
c000b736:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b73b:	74 1c                	je     c000b759 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b73d:	83 ec 0c             	sub    esp,0xc
c000b740:	53                   	push   ebx
c000b741:	e8 3a 4e ff ff       	call   c0000580 <strlen>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b74e:	74 09                	je     c000b759 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b750:	31 ff                	xor    edi,edi
c000b752:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b757:	eb 4c                	jmp    c000b7a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b759:	83 ec 0c             	sub    esp,0xc
c000b75c:	53                   	push   ebx
c000b75d:	e8 1e 4e ff ff       	call   c0000580 <strlen>
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b76a:	74 e4                	je     c000b750 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b76c:	83 ec 0c             	sub    esp,0xc
c000b76f:	53                   	push   ebx
c000b770:	e8 0b 4e ff ff       	call   c0000580 <strlen>
c000b775:	83 c4 10             	add    esp,0x10
c000b778:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b77d:	eb ab                	jmp    c000b72a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b77f:	50                   	push   eax
c000b780:	50                   	push   eax
c000b781:	53                   	push   ebx
c000b782:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b786:	55                   	push   ebp
c000b787:	e8 c4 4e ff ff       	call   c0000650 <strcpy>
c000b78c:	5a                   	pop    edx
c000b78d:	59                   	pop    ecx
c000b78e:	53                   	push   ebx
c000b78f:	55                   	push   ebp
c000b790:	e8 78 f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	48                   	dec    eax
c000b799:	75 27                	jne    c000b7c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b79b:	8d 47 01             	lea    eax,[edi+0x1]
c000b79e:	83 ff 14             	cmp    edi,0x14
c000b7a1:	74 08                	je     c000b7ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000b7a3:	89 c7                	mov    edi,eax
c000b7a5:	85 f6                	test   esi,esi
c000b7a7:	75 d6                	jne    c000b77f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b7a9:	eb 17                	jmp    c000b7c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b7ab:	83 ec 0c             	sub    esp,0xc
c000b7ae:	bf 15 00 00 00       	mov    edi,0x15
c000b7b3:	68 6f 15 02 c0       	push   0xc002156f
c000b7b8:	e8 0c 5b 00 00       	call   c00112c9 <KePanic(char const*)>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	eb e3                	jmp    c000b7a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b7c2:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b7c8:	5b                   	pop    ebx
c000b7c9:	5e                   	pop    esi
c000b7ca:	5f                   	pop    edi
c000b7cb:	5d                   	pop    ebp
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <File::File(char const*, Process*, bool)>:
c000b7ce:	83 ec 1c             	sub    esp,0x1c
c000b7d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b7d5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7dd:	83 ec 08             	sub    esp,0x8
c000b7e0:	6a 00                	push   0x0
c000b7e2:	50                   	push   eax
c000b7e3:	e8 be d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b7e8:	83 c4 10             	add    esp,0x10
c000b7eb:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c000b7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7f4:	89 10                	mov    DWORD PTR [eax],edx
c000b7f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b7fb:	85 c0                	test   eax,eax
c000b7fd:	74 0f                	je     c000b80e <File::File(char const*, Process*, bool)+0x40>
c000b7ff:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b804:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b808:	74 04                	je     c000b80e <File::File(char const*, Process*, bool)+0x40>
c000b80a:	b0 01                	mov    al,0x1
c000b80c:	eb 02                	jmp    c000b810 <File::File(char const*, Process*, bool)+0x42>
c000b80e:	b0 00                	mov    al,0x0
c000b810:	0f b6 c0             	movzx  eax,al
c000b813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b817:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b81d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b821:	83 c2 0d             	add    edx,0xd
c000b824:	50                   	push   eax
c000b825:	51                   	push   ecx
c000b826:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b82a:	52                   	push   edx
c000b82b:	e8 80 fd ff ff       	call   c000b5b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b837:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b83a:	83 e8 41             	sub    eax,0x41
c000b83d:	88 c2                	mov    dl,al
c000b83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b843:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b84d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b855:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b85b:	0f b6 c0             	movzx  eax,al
c000b85e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b865:	85 c0                	test   eax,eax
c000b867:	74 3e                	je     c000b8a7 <File::File(char const*, Process*, bool)+0xd9>
c000b869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b873:	0f b6 c0             	movzx  eax,al
c000b876:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b87d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b883:	85 c0                	test   eax,eax
c000b885:	75 20                	jne    c000b8a7 <File::File(char const*, Process*, bool)+0xd9>
c000b887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b88b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b891:	0f b6 c0             	movzx  eax,al
c000b894:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b89b:	83 ec 0c             	sub    esp,0xc
c000b89e:	50                   	push   eax
c000b89f:	e8 b0 21 00 00       	call   c000da54 <LogicalDisk::mount()>
c000b8a4:	83 c4 10             	add    esp,0x10
c000b8a7:	90                   	nop
c000b8a8:	83 c4 1c             	add    esp,0x1c
c000b8ab:	c3                   	ret    

c000b8ac <File::File(char const*, Process*)>:
c000b8ac:	83 ec 0c             	sub    esp,0xc
c000b8af:	6a 01                	push   0x1
c000b8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bd:	e8 0c ff ff ff       	call   c000b7ce <File::File(char const*, Process*, bool)>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	90                   	nop
c000b8c6:	83 c4 0c             	add    esp,0xc
c000b8c9:	c3                   	ret    

c000b8ca <File::open(FileOpenMode)>:
c000b8ca:	53                   	push   ebx
c000b8cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b8d0:	83 ec 08             	sub    esp,0x8
c000b8d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8d7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8de:	83 fa 19             	cmp    edx,0x19
c000b8e1:	77 40                	ja     c000b923 <File::open(FileOpenMode)+0x59>
c000b8e3:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8ea:	85 d2                	test   edx,edx
c000b8ec:	74 35                	je     c000b923 <File::open(FileOpenMode)+0x59>
c000b8ee:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8f4:	85 d2                	test   edx,edx
c000b8f6:	74 2b                	je     c000b923 <File::open(FileOpenMode)+0x59>
c000b8f8:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b8fc:	b8 06 00 00 00       	mov    eax,0x6
c000b901:	75 20                	jne    c000b923 <File::open(FileOpenMode)+0x59>
c000b903:	8b 02                	mov    eax,DWORD PTR [edx]
c000b905:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b90f:	51                   	push   ecx
c000b910:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b913:	51                   	push   ecx
c000b914:	52                   	push   edx
c000b915:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b918:	83 c4 10             	add    esp,0x10
c000b91b:	85 c0                	test   eax,eax
c000b91d:	75 04                	jne    c000b923 <File::open(FileOpenMode)+0x59>
c000b91f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b923:	83 c4 08             	add    esp,0x8
c000b926:	5b                   	pop    ebx
c000b927:	c3                   	ret    

c000b928 <File::close()>:
c000b928:	53                   	push   ebx
c000b929:	b8 0b 00 00 00       	mov    eax,0xb
c000b92e:	83 ec 08             	sub    esp,0x8
c000b931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b935:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b93c:	83 f9 19             	cmp    ecx,0x19
c000b93f:	77 41                	ja     c000b982 <File::close()+0x5a>
c000b941:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b948:	85 db                	test   ebx,ebx
c000b94a:	74 36                	je     c000b982 <File::close()+0x5a>
c000b94c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b953:	74 2d                	je     c000b982 <File::close()+0x5a>
c000b955:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b959:	b8 05 00 00 00       	mov    eax,0x5
c000b95e:	74 22                	je     c000b982 <File::close()+0x5a>
c000b960:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b964:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b96b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b971:	53                   	push   ebx
c000b972:	53                   	push   ebx
c000b973:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b975:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b97b:	50                   	push   eax
c000b97c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	83 c4 08             	add    esp,0x8
c000b985:	5b                   	pop    ebx
c000b986:	c3                   	ret    
c000b987:	90                   	nop

c000b988 <File::seek(unsigned long long)>:
c000b988:	56                   	push   esi
c000b989:	b8 0b 00 00 00       	mov    eax,0xb
c000b98e:	53                   	push   ebx
c000b98f:	51                   	push   ecx
c000b990:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b994:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b998:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b99c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9a3:	83 fa 19             	cmp    edx,0x19
c000b9a6:	77 31                	ja     c000b9d9 <File::seek(unsigned long long)+0x51>
c000b9a8:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9af:	85 d2                	test   edx,edx
c000b9b1:	74 26                	je     c000b9d9 <File::seek(unsigned long long)+0x51>
c000b9b3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9b9:	85 d2                	test   edx,edx
c000b9bb:	74 1c                	je     c000b9d9 <File::seek(unsigned long long)+0x51>
c000b9bd:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9c1:	b8 05 00 00 00       	mov    eax,0x5
c000b9c6:	74 11                	je     c000b9d9 <File::seek(unsigned long long)+0x51>
c000b9c8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9ca:	53                   	push   ebx
c000b9cb:	51                   	push   ecx
c000b9cc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9d2:	52                   	push   edx
c000b9d3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	5a                   	pop    edx
c000b9da:	5b                   	pop    ebx
c000b9db:	5e                   	pop    esi
c000b9dc:	c3                   	ret    
c000b9dd:	90                   	nop

c000b9de <File::truncate(unsigned long long)>:
c000b9de:	56                   	push   esi
c000b9df:	b8 0b 00 00 00       	mov    eax,0xb
c000b9e4:	53                   	push   ebx
c000b9e5:	51                   	push   ecx
c000b9e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9f9:	83 fa 19             	cmp    edx,0x19
c000b9fc:	77 31                	ja     c000ba2f <File::truncate(unsigned long long)+0x51>
c000b9fe:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba05:	85 d2                	test   edx,edx
c000ba07:	74 26                	je     c000ba2f <File::truncate(unsigned long long)+0x51>
c000ba09:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba0f:	85 d2                	test   edx,edx
c000ba11:	74 1c                	je     c000ba2f <File::truncate(unsigned long long)+0x51>
c000ba13:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba17:	b8 05 00 00 00       	mov    eax,0x5
c000ba1c:	74 11                	je     c000ba2f <File::truncate(unsigned long long)+0x51>
c000ba1e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba20:	53                   	push   ebx
c000ba21:	51                   	push   ecx
c000ba22:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba28:	52                   	push   edx
c000ba29:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba2c:	83 c4 10             	add    esp,0x10
c000ba2f:	5a                   	pop    edx
c000ba30:	5b                   	pop    ebx
c000ba31:	5e                   	pop    esi
c000ba32:	c3                   	ret    
c000ba33:	90                   	nop

c000ba34 <File::tell(unsigned long long*)>:
c000ba34:	83 ec 0c             	sub    esp,0xc
c000ba37:	b8 0b 00 00 00       	mov    eax,0xb
c000ba3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba47:	83 fa 19             	cmp    edx,0x19
c000ba4a:	77 34                	ja     c000ba80 <File::tell(unsigned long long*)+0x4c>
c000ba4c:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba53:	85 d2                	test   edx,edx
c000ba55:	74 29                	je     c000ba80 <File::tell(unsigned long long*)+0x4c>
c000ba57:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba5d:	85 d2                	test   edx,edx
c000ba5f:	74 1f                	je     c000ba80 <File::tell(unsigned long long*)+0x4c>
c000ba61:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba65:	b8 05 00 00 00       	mov    eax,0x5
c000ba6a:	74 14                	je     c000ba80 <File::tell(unsigned long long*)+0x4c>
c000ba6c:	50                   	push   eax
c000ba6d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba73:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba79:	52                   	push   edx
c000ba7a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba7d:	83 c4 10             	add    esp,0x10
c000ba80:	83 c4 0c             	add    esp,0xc
c000ba83:	c3                   	ret    

c000ba84 <File::rewind()>:
c000ba84:	83 ec 10             	sub    esp,0x10
c000ba87:	6a 00                	push   0x0
c000ba89:	6a 00                	push   0x0
c000ba8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8f:	e8 f4 fe ff ff       	call   c000b988 <File::seek(unsigned long long)>
c000ba94:	83 c4 1c             	add    esp,0x1c
c000ba97:	c3                   	ret    

c000ba98 <File::unlink()>:
c000ba98:	83 ec 0c             	sub    esp,0xc
c000ba9b:	b8 0b 00 00 00       	mov    eax,0xb
c000baa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baab:	83 f9 19             	cmp    ecx,0x19
c000baae:	77 2f                	ja     c000badf <File::unlink()+0x47>
c000bab0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bab7:	85 c9                	test   ecx,ecx
c000bab9:	74 24                	je     c000badf <File::unlink()+0x47>
c000babb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bac1:	85 c9                	test   ecx,ecx
c000bac3:	74 1a                	je     c000badf <File::unlink()+0x47>
c000bac5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bac9:	b8 06 00 00 00       	mov    eax,0x6
c000bace:	75 0f                	jne    c000badf <File::unlink()+0x47>
c000bad0:	50                   	push   eax
c000bad1:	83 c2 0d             	add    edx,0xd
c000bad4:	50                   	push   eax
c000bad5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bad7:	52                   	push   edx
c000bad8:	51                   	push   ecx
c000bad9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000badc:	83 c4 10             	add    esp,0x10
c000badf:	83 c4 0c             	add    esp,0xc
c000bae2:	c3                   	ret    
c000bae3:	90                   	nop

c000bae4 <File::rename(char const*)>:
c000bae4:	83 ec 0c             	sub    esp,0xc
c000bae7:	b8 0b 00 00 00       	mov    eax,0xb
c000baec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baf7:	83 f9 19             	cmp    ecx,0x19
c000bafa:	77 32                	ja     c000bb2e <File::rename(char const*)+0x4a>
c000bafc:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb03:	85 c9                	test   ecx,ecx
c000bb05:	74 27                	je     c000bb2e <File::rename(char const*)+0x4a>
c000bb07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb0d:	85 c9                	test   ecx,ecx
c000bb0f:	74 1d                	je     c000bb2e <File::rename(char const*)+0x4a>
c000bb11:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb15:	b8 06 00 00 00       	mov    eax,0x6
c000bb1a:	75 12                	jne    c000bb2e <File::rename(char const*)+0x4a>
c000bb1c:	50                   	push   eax
c000bb1d:	83 c2 0d             	add    edx,0xd
c000bb20:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb26:	52                   	push   edx
c000bb27:	51                   	push   ecx
c000bb28:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb2b:	83 c4 10             	add    esp,0x10
c000bb2e:	83 c4 0c             	add    esp,0xc
c000bb31:	c3                   	ret    

c000bb32 <File::chfatattr(unsigned char, unsigned char)>:
c000bb32:	57                   	push   edi
c000bb33:	b8 0b 00 00 00       	mov    eax,0xb
c000bb38:	56                   	push   esi
c000bb39:	53                   	push   ebx
c000bb3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb42:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb4d:	83 f9 19             	cmp    ecx,0x19
c000bb50:	77 37                	ja     c000bb89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb52:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb59:	85 c9                	test   ecx,ecx
c000bb5b:	74 2c                	je     c000bb89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb5d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb63:	85 c9                	test   ecx,ecx
c000bb65:	74 22                	je     c000bb89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb67:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb6b:	b8 06 00 00 00       	mov    eax,0x6
c000bb70:	75 17                	jne    c000bb89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb72:	89 f0                	mov    eax,esi
c000bb74:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb76:	0f b6 db             	movzx  ebx,bl
c000bb79:	0f b6 f0             	movzx  esi,al
c000bb7c:	83 c2 0d             	add    edx,0xd
c000bb7f:	56                   	push   esi
c000bb80:	53                   	push   ebx
c000bb81:	52                   	push   edx
c000bb82:	51                   	push   ecx
c000bb83:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb86:	83 c4 10             	add    esp,0x10
c000bb89:	5b                   	pop    ebx
c000bb8a:	5e                   	pop    esi
c000bb8b:	5f                   	pop    edi
c000bb8c:	c3                   	ret    
c000bb8d:	90                   	nop

c000bb8e <File::exists()>:
c000bb8e:	83 ec 0c             	sub    esp,0xc
c000bb91:	31 c0                	xor    eax,eax
c000bb93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb9e:	83 f9 19             	cmp    ecx,0x19
c000bba1:	77 24                	ja     c000bbc7 <File::exists()+0x39>
c000bba3:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbaa:	85 c9                	test   ecx,ecx
c000bbac:	74 19                	je     c000bbc7 <File::exists()+0x39>
c000bbae:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbb4:	85 c9                	test   ecx,ecx
c000bbb6:	74 0f                	je     c000bbc7 <File::exists()+0x39>
c000bbb8:	50                   	push   eax
c000bbb9:	83 c2 0d             	add    edx,0xd
c000bbbc:	50                   	push   eax
c000bbbd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbbf:	52                   	push   edx
c000bbc0:	51                   	push   ecx
c000bbc1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	83 c4 0c             	add    esp,0xc
c000bbca:	c3                   	ret    
c000bbcb:	90                   	nop

c000bbcc <File::stat(unsigned long long*, bool*)>:
c000bbcc:	56                   	push   esi
c000bbcd:	53                   	push   ebx
c000bbce:	50                   	push   eax
c000bbcf:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbdc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbe0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe7:	83 f9 19             	cmp    ecx,0x19
c000bbea:	77 3d                	ja     c000bc29 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbec:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbf3:	85 c9                	test   ecx,ecx
c000bbf5:	74 32                	je     c000bc29 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbf7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbfd:	85 c9                	test   ecx,ecx
c000bbff:	74 28                	je     c000bc29 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc01:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc05:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc07:	74 13                	je     c000bc1c <File::stat(unsigned long long*, bool*)+0x50>
c000bc09:	83 ec 04             	sub    esp,0x4
c000bc0c:	56                   	push   esi
c000bc0d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc13:	51                   	push   ecx
c000bc14:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc17:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc1a:	eb 0a                	jmp    c000bc26 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc1c:	53                   	push   ebx
c000bc1d:	83 c2 0d             	add    edx,0xd
c000bc20:	56                   	push   esi
c000bc21:	52                   	push   edx
c000bc22:	51                   	push   ecx
c000bc23:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc26:	83 c4 10             	add    esp,0x10
c000bc29:	5a                   	pop    edx
c000bc2a:	5b                   	pop    ebx
c000bc2b:	5e                   	pop    esi
c000bc2c:	c3                   	ret    

c000bc2d <Fs::setcwd(Process*, char*)>:
c000bc2d:	55                   	push   ebp
c000bc2e:	57                   	push   edi
c000bc2f:	56                   	push   esi
c000bc30:	53                   	push   ebx
c000bc31:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc37:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc3e:	6a 00                	push   0x0
c000bc40:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc46:	57                   	push   edi
c000bc47:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc4e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc52:	56                   	push   esi
c000bc53:	e8 58 f9 ff ff       	call   c000b5b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc58:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc5b:	e8 20 49 ff ff       	call   c0000580 <strlen>
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	83 f8 02             	cmp    eax,0x2
c000bc66:	77 15                	ja     c000bc7d <Fs::setcwd(Process*, char*)+0x50>
c000bc68:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc6d:	83 eb 41             	sub    ebx,0x41
c000bc70:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc77:	85 c0                	test   eax,eax
c000bc79:	75 1c                	jne    c000bc97 <Fs::setcwd(Process*, char*)+0x6a>
c000bc7b:	eb 2f                	jmp    c000bcac <Fs::setcwd(Process*, char*)+0x7f>
c000bc7d:	83 ec 0c             	sub    esp,0xc
c000bc80:	56                   	push   esi
c000bc81:	e8 fa 48 ff ff       	call   c0000580 <strlen>
c000bc86:	83 c4 10             	add    esp,0x10
c000bc89:	83 f8 03             	cmp    eax,0x3
c000bc8c:	75 57                	jne    c000bce5 <Fs::setcwd(Process*, char*)+0xb8>
c000bc8e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc93:	75 50                	jne    c000bce5 <Fs::setcwd(Process*, char*)+0xb8>
c000bc95:	eb d1                	jmp    c000bc68 <Fs::setcwd(Process*, char*)+0x3b>
c000bc97:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc9e:	75 0c                	jne    c000bcac <Fs::setcwd(Process*, char*)+0x7f>
c000bca0:	83 ec 0c             	sub    esp,0xc
c000bca3:	50                   	push   eax
c000bca4:	e8 ab 1d 00 00       	call   c000da54 <LogicalDisk::mount()>
c000bca9:	83 c4 10             	add    esp,0x10
c000bcac:	83 fb 19             	cmp    ebx,0x19
c000bcaf:	b8 03 00 00 00       	mov    eax,0x3
c000bcb4:	0f 87 c6 00 00 00    	ja     c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bcba:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bcc1:	b8 05 00 00 00       	mov    eax,0x5
c000bcc6:	85 d2                	test   edx,edx
c000bcc8:	0f 84 b2 00 00 00    	je     c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bcce:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bcd5:	b8 06 00 00 00       	mov    eax,0x6
c000bcda:	0f 85 92 00 00 00    	jne    c000bd72 <Fs::setcwd(Process*, char*)+0x145>
c000bce0:	e9 9b 00 00 00       	jmp    c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bce5:	83 ec 0c             	sub    esp,0xc
c000bce8:	68 14 01 00 00       	push   0x114
c000bced:	e8 e1 bd ff ff       	call   c0007ad3 <malloc>
c000bcf2:	83 c4 0c             	add    esp,0xc
c000bcf5:	55                   	push   ebp
c000bcf6:	56                   	push   esi
c000bcf7:	50                   	push   eax
c000bcf8:	89 c3                	mov    ebx,eax
c000bcfa:	e8 ad fb ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c000bcff:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd04:	83 c4 0c             	add    esp,0xc
c000bd07:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd0b:	50                   	push   eax
c000bd0c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd10:	50                   	push   eax
c000bd11:	53                   	push   ebx
c000bd12:	e8 b5 fe ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	83 f8 02             	cmp    eax,0x2
c000bd1d:	74 27                	je     c000bd46 <Fs::setcwd(Process*, char*)+0x119>
c000bd1f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd24:	75 1c                	jne    c000bd42 <Fs::setcwd(Process*, char*)+0x115>
c000bd26:	85 db                	test   ebx,ebx
c000bd28:	b8 02 00 00 00       	mov    eax,0x2
c000bd2d:	74 51                	je     c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bd2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd31:	83 ec 0c             	sub    esp,0xc
c000bd34:	53                   	push   ebx
c000bd35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	b8 02 00 00 00       	mov    eax,0x2
c000bd40:	eb 3e                	jmp    c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bd42:	85 c0                	test   eax,eax
c000bd44:	74 1c                	je     c000bd62 <Fs::setcwd(Process*, char*)+0x135>
c000bd46:	85 db                	test   ebx,ebx
c000bd48:	b8 01 00 00 00       	mov    eax,0x1
c000bd4d:	74 31                	je     c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bd4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd51:	83 ec 0c             	sub    esp,0xc
c000bd54:	53                   	push   ebx
c000bd55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	b8 01 00 00 00       	mov    eax,0x1
c000bd60:	eb 1e                	jmp    c000bd80 <Fs::setcwd(Process*, char*)+0x153>
c000bd62:	85 db                	test   ebx,ebx
c000bd64:	74 0c                	je     c000bd72 <Fs::setcwd(Process*, char*)+0x145>
c000bd66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd68:	83 ec 0c             	sub    esp,0xc
c000bd6b:	53                   	push   ebx
c000bd6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd6f:	83 c4 10             	add    esp,0x10
c000bd72:	50                   	push   eax
c000bd73:	50                   	push   eax
c000bd74:	56                   	push   esi
c000bd75:	57                   	push   edi
c000bd76:	e8 d5 48 ff ff       	call   c0000650 <strcpy>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	31 c0                	xor    eax,eax
c000bd80:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd86:	5b                   	pop    ebx
c000bd87:	5e                   	pop    esi
c000bd88:	5f                   	pop    edi
c000bd89:	5d                   	pop    ebp
c000bd8a:	c3                   	ret    
c000bd8b:	90                   	nop

c000bd8c <Directory::Directory(char const*, Process*)>:
c000bd8c:	83 ec 0c             	sub    esp,0xc
c000bd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd93:	83 ec 08             	sub    esp,0x8
c000bd96:	6a 00                	push   0x0
c000bd98:	50                   	push   eax
c000bd99:	e8 08 d4 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	ba 28 16 02 c0       	mov    edx,0xc0021628
c000bda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdaa:	89 10                	mov    DWORD PTR [eax],edx
c000bdac:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdb1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdb5:	0f 95 c0             	setne  al
c000bdb8:	0f b6 c0             	movzx  eax,al
c000bdbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdbf:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bdc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc9:	83 c2 0d             	add    edx,0xd
c000bdcc:	50                   	push   eax
c000bdcd:	51                   	push   ecx
c000bdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd2:	52                   	push   edx
c000bdd3:	e8 d8 f7 ff ff       	call   c000b5b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdd8:	83 c4 10             	add    esp,0x10
c000bddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddf:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bde2:	83 e8 41             	sub    eax,0x41
c000bde5:	88 c2                	mov    dl,al
c000bde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdeb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bdf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdfd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be03:	0f b6 c0             	movzx  eax,al
c000be06:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be0d:	85 c0                	test   eax,eax
c000be0f:	74 3e                	je     c000be4f <Directory::Directory(char const*, Process*)+0xc3>
c000be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be15:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be1b:	0f b6 c0             	movzx  eax,al
c000be1e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be25:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be2b:	85 c0                	test   eax,eax
c000be2d:	75 20                	jne    c000be4f <Directory::Directory(char const*, Process*)+0xc3>
c000be2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be33:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be39:	0f b6 c0             	movzx  eax,al
c000be3c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be43:	83 ec 0c             	sub    esp,0xc
c000be46:	50                   	push   eax
c000be47:	e8 08 1c 00 00       	call   c000da54 <LogicalDisk::mount()>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	90                   	nop
c000be50:	83 c4 0c             	add    esp,0xc
c000be53:	c3                   	ret    

c000be54 <Directory::open()>:
c000be54:	53                   	push   ebx
c000be55:	b8 0b 00 00 00       	mov    eax,0xb
c000be5a:	83 ec 08             	sub    esp,0x8
c000be5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be61:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be68:	83 fa 19             	cmp    edx,0x19
c000be6b:	77 3d                	ja     c000beaa <Directory::open()+0x56>
c000be6d:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be74:	85 d2                	test   edx,edx
c000be76:	74 32                	je     c000beaa <Directory::open()+0x56>
c000be78:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be7e:	85 d2                	test   edx,edx
c000be80:	74 28                	je     c000beaa <Directory::open()+0x56>
c000be82:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be86:	b8 06 00 00 00       	mov    eax,0x6
c000be8b:	75 1d                	jne    c000beaa <Directory::open()+0x56>
c000be8d:	50                   	push   eax
c000be8e:	8b 02                	mov    eax,DWORD PTR [edx]
c000be90:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be96:	51                   	push   ecx
c000be97:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be9a:	51                   	push   ecx
c000be9b:	52                   	push   edx
c000be9c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be9f:	83 c4 10             	add    esp,0x10
c000bea2:	85 c0                	test   eax,eax
c000bea4:	75 04                	jne    c000beaa <Directory::open()+0x56>
c000bea6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000beaa:	83 c4 08             	add    esp,0x8
c000bead:	5b                   	pop    ebx
c000beae:	c3                   	ret    
c000beaf:	90                   	nop

c000beb0 <Directory::close()>:
c000beb0:	53                   	push   ebx
c000beb1:	b8 0b 00 00 00       	mov    eax,0xb
c000beb6:	83 ec 08             	sub    esp,0x8
c000beb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bebd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bec4:	83 f9 19             	cmp    ecx,0x19
c000bec7:	77 41                	ja     c000bf0a <Directory::close()+0x5a>
c000bec9:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bed0:	85 db                	test   ebx,ebx
c000bed2:	74 36                	je     c000bf0a <Directory::close()+0x5a>
c000bed4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bedb:	74 2d                	je     c000bf0a <Directory::close()+0x5a>
c000bedd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bee1:	b8 05 00 00 00       	mov    eax,0x5
c000bee6:	74 22                	je     c000bf0a <Directory::close()+0x5a>
c000bee8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000beec:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bef3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bef9:	53                   	push   ebx
c000befa:	53                   	push   ebx
c000befb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000befd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf03:	50                   	push   eax
c000bf04:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf07:	83 c4 10             	add    esp,0x10
c000bf0a:	83 c4 08             	add    esp,0x8
c000bf0d:	5b                   	pop    ebx
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <Directory::unlink()>:
c000bf10:	83 ec 0c             	sub    esp,0xc
c000bf13:	b8 0b 00 00 00       	mov    eax,0xb
c000bf18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf1c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf23:	83 f9 19             	cmp    ecx,0x19
c000bf26:	77 2f                	ja     c000bf57 <Directory::unlink()+0x47>
c000bf28:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf2f:	85 c9                	test   ecx,ecx
c000bf31:	74 24                	je     c000bf57 <Directory::unlink()+0x47>
c000bf33:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf39:	85 c9                	test   ecx,ecx
c000bf3b:	74 1a                	je     c000bf57 <Directory::unlink()+0x47>
c000bf3d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf41:	b8 06 00 00 00       	mov    eax,0x6
c000bf46:	75 0f                	jne    c000bf57 <Directory::unlink()+0x47>
c000bf48:	50                   	push   eax
c000bf49:	83 c2 0d             	add    edx,0xd
c000bf4c:	50                   	push   eax
c000bf4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf4f:	52                   	push   edx
c000bf50:	51                   	push   ecx
c000bf51:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf54:	83 c4 10             	add    esp,0x10
c000bf57:	83 c4 0c             	add    esp,0xc
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <Directory::rename(char const*)>:
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	b8 0b 00 00 00       	mov    eax,0xb
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf6f:	83 f9 19             	cmp    ecx,0x19
c000bf72:	77 32                	ja     c000bfa6 <Directory::rename(char const*)+0x4a>
c000bf74:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf7b:	85 c9                	test   ecx,ecx
c000bf7d:	74 27                	je     c000bfa6 <Directory::rename(char const*)+0x4a>
c000bf7f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf85:	85 c9                	test   ecx,ecx
c000bf87:	74 1d                	je     c000bfa6 <Directory::rename(char const*)+0x4a>
c000bf89:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf8d:	b8 06 00 00 00       	mov    eax,0x6
c000bf92:	75 12                	jne    c000bfa6 <Directory::rename(char const*)+0x4a>
c000bf94:	50                   	push   eax
c000bf95:	83 c2 0d             	add    edx,0xd
c000bf98:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf9e:	52                   	push   edx
c000bf9f:	51                   	push   ecx
c000bfa0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	83 c4 0c             	add    esp,0xc
c000bfa9:	c3                   	ret    

c000bfaa <Directory::exists()>:
c000bfaa:	83 ec 0c             	sub    esp,0xc
c000bfad:	31 c0                	xor    eax,eax
c000bfaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfb3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfba:	83 f9 19             	cmp    ecx,0x19
c000bfbd:	77 24                	ja     c000bfe3 <Directory::exists()+0x39>
c000bfbf:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfc6:	85 c9                	test   ecx,ecx
c000bfc8:	74 19                	je     c000bfe3 <Directory::exists()+0x39>
c000bfca:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfd0:	85 c9                	test   ecx,ecx
c000bfd2:	74 0f                	je     c000bfe3 <Directory::exists()+0x39>
c000bfd4:	50                   	push   eax
c000bfd5:	83 c2 0d             	add    edx,0xd
c000bfd8:	50                   	push   eax
c000bfd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfdb:	52                   	push   edx
c000bfdc:	51                   	push   ecx
c000bfdd:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bfe0:	83 c4 10             	add    esp,0x10
c000bfe3:	83 c4 0c             	add    esp,0xc
c000bfe6:	c3                   	ret    
c000bfe7:	90                   	nop

c000bfe8 <Directory::read(dirent*)>:
c000bfe8:	83 ec 1c             	sub    esp,0x1c
c000bfeb:	b8 0b 00 00 00       	mov    eax,0xb
c000bff0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bff4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bffb:	83 f9 19             	cmp    ecx,0x19
c000bffe:	77 30                	ja     c000c030 <Directory::read(dirent*)+0x48>
c000c000:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c007:	85 c9                	test   ecx,ecx
c000c009:	74 25                	je     c000c030 <Directory::read(dirent*)+0x48>
c000c00b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c012:	74 1c                	je     c000c030 <Directory::read(dirent*)+0x48>
c000c014:	83 ec 0c             	sub    esp,0xc
c000c017:	8b 02                	mov    eax,DWORD PTR [edx]
c000c019:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c01d:	51                   	push   ecx
c000c01e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c022:	6a 00                	push   0x0
c000c024:	68 10 01 00 00       	push   0x110
c000c029:	52                   	push   edx
c000c02a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c02d:	83 c4 20             	add    esp,0x20
c000c030:	83 c4 1c             	add    esp,0x1c
c000c033:	c3                   	ret    

c000c034 <Directory::create()>:
c000c034:	83 ec 0c             	sub    esp,0xc
c000c037:	b8 0b 00 00 00       	mov    eax,0xb
c000c03c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c040:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c047:	83 f9 19             	cmp    ecx,0x19
c000c04a:	77 2f                	ja     c000c07b <Directory::create()+0x47>
c000c04c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c053:	85 c9                	test   ecx,ecx
c000c055:	74 24                	je     c000c07b <Directory::create()+0x47>
c000c057:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c05d:	85 c9                	test   ecx,ecx
c000c05f:	74 1a                	je     c000c07b <Directory::create()+0x47>
c000c061:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c065:	b8 06 00 00 00       	mov    eax,0x6
c000c06a:	75 0f                	jne    c000c07b <Directory::create()+0x47>
c000c06c:	50                   	push   eax
c000c06d:	83 c2 0d             	add    edx,0xd
c000c070:	50                   	push   eax
c000c071:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c073:	52                   	push   edx
c000c074:	51                   	push   ecx
c000c075:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c078:	83 c4 10             	add    esp,0x10
c000c07b:	83 c4 0c             	add    esp,0xc
c000c07e:	c3                   	ret    
c000c07f:	90                   	nop

c000c080 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c080:	b8 0a 00 00 00       	mov    eax,0xa
c000c085:	c3                   	ret    
c000c086:	66 90                	xchg   ax,ax

c000c088 <Bus::Bus(char const*)>:
c000c088:	83 ec 0c             	sub    esp,0xc
c000c08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08f:	83 ec 08             	sub    esp,0x8
c000c092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c096:	50                   	push   eax
c000c097:	e8 28 08 00 00       	call   c000c8c4 <Device::Device(char const*)>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	ba 44 16 02 c0       	mov    edx,0xc0021644
c000c0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a8:	89 10                	mov    DWORD PTR [eax],edx
c000c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0b8:	90                   	nop
c000c0b9:	83 c4 0c             	add    esp,0xc
c000c0bc:	c3                   	ret    
c000c0bd:	90                   	nop
c000c0be:	66 90                	xchg   ax,ax

c000c0c0 <Bus::~Bus()>:
c000c0c0:	83 ec 0c             	sub    esp,0xc
c000c0c3:	ba 44 16 02 c0       	mov    edx,0xc0021644
c000c0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cc:	89 10                	mov    DWORD PTR [eax],edx
c000c0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	50                   	push   eax
c000c0d6:	e8 53 05 00 00       	call   c000c62e <Device::~Device()>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	90                   	nop
c000c0df:	83 c4 0c             	add    esp,0xc
c000c0e2:	c3                   	ret    
c000c0e3:	90                   	nop

c000c0e4 <Bus::~Bus()>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ee:	e8 cd ff ff ff       	call   c000c0c0 <Bus::~Bus()>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	83 ec 08             	sub    esp,0x8
c000c0f9:	68 58 01 00 00       	push   0x158
c000c0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c102:	e8 05 e7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c107:	83 c4 10             	add    esp,0x10
c000c10a:	83 c4 0c             	add    esp,0xc
c000c10d:	c3                   	ret    

c000c10e <beepThread(void*)>:
c000c10e:	83 ec 0c             	sub    esp,0xc
c000c111:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c116:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c11a:	48                   	dec    eax
c000c11b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c120:	75 01                	jne    c000c123 <beepThread(void*)+0x15>
c000c122:	fb                   	sti    
c000c123:	6b c2 0a             	imul   eax,edx,0xa
c000c126:	83 ec 0c             	sub    esp,0xc
c000c129:	50                   	push   eax
c000c12a:	e8 65 9f 00 00       	call   c0016094 <milliTenthSleep(unsigned int)>
c000c12f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c136:	e8 b2 be 00 00       	call   c0017fed <HalMakeBeep(int)>
c000c13b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c143:	83 c4 1c             	add    esp,0x1c
c000c146:	e9 2d 9e 00 00       	jmp    c0015f78 <blockTask(TaskState)>

c000c14b <Krnl::beep(int, int, bool)>:
c000c14b:	56                   	push   esi
c000c14c:	53                   	push   ebx
c000c14d:	83 ec 10             	sub    esp,0x10
c000c150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c154:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15c:	e8 8c be 00 00       	call   c0017fed <HalMakeBeep(int)>
c000c161:	89 f0                	mov    eax,esi
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	84 c0                	test   al,al
c000c168:	74 1e                	je     c000c188 <Krnl::beep(int, int, bool)+0x3d>
c000c16a:	6b db 0a             	imul   ebx,ebx,0xa
c000c16d:	83 ec 0c             	sub    esp,0xc
c000c170:	53                   	push   ebx
c000c171:	e8 1e 9f 00 00       	call   c0016094 <milliTenthSleep(unsigned int)>
c000c176:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c17e:	83 c4 14             	add    esp,0x14
c000c181:	5b                   	pop    ebx
c000c182:	5e                   	pop    esi
c000c183:	e9 65 be 00 00       	jmp    c0017fed <HalMakeBeep(int)>
c000c188:	68 e6 00 00 00       	push   0xe6
c000c18d:	53                   	push   ebx
c000c18e:	68 0e c1 00 c0       	push   0xc000c10e
c000c193:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c199:	e8 8e 99 00 00       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c000c19e:	83 c4 14             	add    esp,0x14
c000c1a1:	5b                   	pop    ebx
c000c1a2:	5e                   	pop    esi
c000c1a3:	c3                   	ret    

c000c1a4 <User::loadClockSettings(int)>:
c000c1a4:	53                   	push   ebx
c000c1a5:	83 ec 14             	sub    esp,0x14
c000c1a8:	68 14 01 00 00       	push   0x114
c000c1ad:	e8 21 b9 ff ff       	call   c0007ad3 <malloc>
c000c1b2:	83 c4 0c             	add    esp,0xc
c000c1b5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1bb:	68 68 16 02 c0       	push   0xc0021668
c000c1c0:	50                   	push   eax
c000c1c1:	89 c3                	mov    ebx,eax
c000c1c3:	e8 e4 f6 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c000c1c8:	58                   	pop    eax
c000c1c9:	5a                   	pop    edx
c000c1ca:	6a 01                	push   0x1
c000c1cc:	53                   	push   ebx
c000c1cd:	e8 f8 f6 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c000c1d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1d5:	e8 4e f7 ff ff       	call   c000b928 <File::close()>
c000c1da:	83 c4 10             	add    esp,0x10
c000c1dd:	85 db                	test   ebx,ebx
c000c1df:	74 0f                	je     c000c1f0 <User::loadClockSettings(int)+0x4c>
c000c1e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1ea:	83 c4 08             	add    esp,0x8
c000c1ed:	5b                   	pop    ebx
c000c1ee:	ff e0                	jmp    eax
c000c1f0:	83 c4 08             	add    esp,0x8
c000c1f3:	5b                   	pop    ebx
c000c1f4:	c3                   	ret    
c000c1f5:	90                   	nop

c000c1f6 <Clock::Clock(char const*)>:
c000c1f6:	83 ec 0c             	sub    esp,0xc
c000c1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1fd:	83 ec 08             	sub    esp,0x8
c000c200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c204:	50                   	push   eax
c000c205:	e8 ba 06 00 00       	call   c000c8c4 <Device::Device(char const*)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000c212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c216:	89 10                	mov    DWORD PTR [eax],edx
c000c218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c226:	90                   	nop
c000c227:	83 c4 0c             	add    esp,0xc
c000c22a:	c3                   	ret    
c000c22b:	90                   	nop

c000c22c <Clock::~Clock()>:
c000c22c:	83 ec 0c             	sub    esp,0xc
c000c22f:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000c234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c238:	89 10                	mov    DWORD PTR [eax],edx
c000c23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23e:	83 ec 0c             	sub    esp,0xc
c000c241:	50                   	push   eax
c000c242:	e8 e7 03 00 00       	call   c000c62e <Device::~Device()>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	90                   	nop
c000c24b:	83 c4 0c             	add    esp,0xc
c000c24e:	c3                   	ret    
c000c24f:	90                   	nop

c000c250 <Clock::~Clock()>:
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	83 ec 0c             	sub    esp,0xc
c000c256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c25a:	e8 cd ff ff ff       	call   c000c22c <Clock::~Clock()>
c000c25f:	83 c4 10             	add    esp,0x10
c000c262:	83 ec 08             	sub    esp,0x8
c000c265:	68 58 01 00 00       	push   0x158
c000c26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26e:	e8 99 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	83 c4 0c             	add    esp,0xc
c000c279:	c3                   	ret    

c000c27a <Clock::timeInSecondsLocal()>:
c000c27a:	53                   	push   ebx
c000c27b:	83 ec 14             	sub    esp,0x14
c000c27e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c282:	8b 10                	mov    edx,DWORD PTR [eax]
c000c284:	50                   	push   eax
c000c285:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c288:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c28f:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c295:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c29b:	89 cb                	mov    ebx,ecx
c000c29d:	c1 fb 1f             	sar    ebx,0x1f
c000c2a0:	01 c8                	add    eax,ecx
c000c2a2:	11 da                	adc    edx,ebx
c000c2a4:	83 c4 10             	add    esp,0x10
c000c2a7:	31 c9                	xor    ecx,ecx
c000c2a9:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2b0:	74 05                	je     c000c2b7 <Clock::timeInSecondsLocal()+0x3d>
c000c2b2:	b9 08 07 00 00       	mov    ecx,0x708
c000c2b7:	31 db                	xor    ebx,ebx
c000c2b9:	01 c8                	add    eax,ecx
c000c2bb:	11 da                	adc    edx,ebx
c000c2bd:	83 c4 08             	add    esp,0x8
c000c2c0:	5b                   	pop    ebx
c000c2c1:	c3                   	ret    

c000c2c2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2c2:	57                   	push   edi
c000c2c3:	56                   	push   esi
c000c2c4:	53                   	push   ebx
c000c2c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2d3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2d6:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2dd:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2e3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c2e9:	99                   	cdq    
c000c2ea:	29 c6                	sub    esi,eax
c000c2ec:	19 d7                	sbb    edi,edx
c000c2ee:	89 f0                	mov    eax,esi
c000c2f0:	31 f6                	xor    esi,esi
c000c2f2:	89 fa                	mov    edx,edi
c000c2f4:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2fb:	74 05                	je     c000c302 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c2fd:	be 08 07 00 00       	mov    esi,0x708
c000c302:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c306:	31 ff                	xor    edi,edi
c000c308:	29 f0                	sub    eax,esi
c000c30a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c30e:	19 fa                	sbb    edx,edi
c000c310:	89 d8                	mov    eax,ebx
c000c312:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c316:	5b                   	pop    ebx
c000c317:	5e                   	pop    esi
c000c318:	5f                   	pop    edi
c000c319:	ff e0                	jmp    eax

c000c31b <datetimeToSeconds(datetime_t)>:
c000c31b:	55                   	push   ebp
c000c31c:	57                   	push   edi
c000c31d:	56                   	push   esi
c000c31e:	53                   	push   ebx
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c326:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c32a:	89 f7                	mov    edi,esi
c000c32c:	89 f0                	mov    eax,esi
c000c32e:	0f b6 cf             	movzx  ecx,bh
c000c331:	0f b6 c4             	movzx  eax,ah
c000c334:	c1 ef 10             	shr    edi,0x10
c000c337:	89 da                	mov    edx,ebx
c000c339:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c33c:	89 f9                	mov    ecx,edi
c000c33e:	0f b6 f9             	movzx  edi,cl
c000c341:	89 f1                	mov    ecx,esi
c000c343:	6b c0 3c             	imul   eax,eax,0x3c
c000c346:	0f b6 f1             	movzx  esi,cl
c000c349:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c34f:	0f b6 db             	movzx  ebx,bl
c000c352:	c1 ea 10             	shr    edx,0x10
c000c355:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c35b:	01 f8                	add    eax,edi
c000c35d:	01 f0                	add    eax,esi
c000c35f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c362:	c1 f8 1f             	sar    eax,0x1f
c000c365:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c369:	89 e8                	mov    eax,ebp
c000c36b:	0f b6 c0             	movzx  eax,al
c000c36e:	8b 0c 85 e0 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde920]
c000c375:	83 f8 01             	cmp    eax,0x1
c000c378:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c37c:	0f b7 da             	movzx  ebx,dx
c000c37f:	76 27                	jbe    c000c3a8 <datetimeToSeconds(datetime_t)+0x8d>
c000c381:	80 e2 03             	and    dl,0x3
c000c384:	75 22                	jne    c000c3a8 <datetimeToSeconds(datetime_t)+0x8d>
c000c386:	31 d2                	xor    edx,edx
c000c388:	be 64 00 00 00       	mov    esi,0x64
c000c38d:	89 d8                	mov    eax,ebx
c000c38f:	f7 f6                	div    esi
c000c391:	85 d2                	test   edx,edx
c000c393:	75 12                	jne    c000c3a7 <datetimeToSeconds(datetime_t)+0x8c>
c000c395:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c39b:	be 90 01 00 00       	mov    esi,0x190
c000c3a0:	99                   	cdq    
c000c3a1:	f7 fe                	idiv   esi
c000c3a3:	85 d2                	test   edx,edx
c000c3a5:	75 01                	jne    c000c3a8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3a7:	41                   	inc    ecx
c000c3a8:	83 fb 46             	cmp    ebx,0x46
c000c3ab:	76 48                	jbe    c000c3f5 <datetimeToSeconds(datetime_t)+0xda>
c000c3ad:	be 46 00 00 00       	mov    esi,0x46
c000c3b2:	bf 64 00 00 00       	mov    edi,0x64
c000c3b7:	bd 90 01 00 00       	mov    ebp,0x190
c000c3bc:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3c2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3c7:	75 23                	jne    c000c3ec <datetimeToSeconds(datetime_t)+0xd1>
c000c3c9:	89 f0                	mov    eax,esi
c000c3cb:	99                   	cdq    
c000c3cc:	f7 ff                	idiv   edi
c000c3ce:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3d3:	85 d2                	test   edx,edx
c000c3d5:	75 15                	jne    c000c3ec <datetimeToSeconds(datetime_t)+0xd1>
c000c3d7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3dd:	99                   	cdq    
c000c3de:	f7 fd                	idiv   ebp
c000c3e0:	83 fa 01             	cmp    edx,0x1
c000c3e3:	19 c0                	sbb    eax,eax
c000c3e5:	f7 d0                	not    eax
c000c3e7:	05 6e 01 00 00       	add    eax,0x16e
c000c3ec:	46                   	inc    esi
c000c3ed:	01 c1                	add    ecx,eax
c000c3ef:	39 de                	cmp    esi,ebx
c000c3f1:	7c c9                	jl     c000c3bc <datetimeToSeconds(datetime_t)+0xa1>
c000c3f3:	eb 34                	jmp    c000c429 <datetimeToSeconds(datetime_t)+0x10e>
c000c3f5:	74 32                	je     c000c429 <datetimeToSeconds(datetime_t)+0x10e>
c000c3f7:	b8 45 00 00 00       	mov    eax,0x45
c000c3fc:	89 c2                	mov    edx,eax
c000c3fe:	83 e2 03             	and    edx,0x3
c000c401:	39 d8                	cmp    eax,ebx
c000c403:	7e 0f                	jle    c000c414 <datetimeToSeconds(datetime_t)+0xf9>
c000c405:	83 fa 01             	cmp    edx,0x1
c000c408:	19 d2                	sbb    edx,edx
c000c40a:	48                   	dec    eax
c000c40b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c412:	eb e8                	jmp    c000c3fc <datetimeToSeconds(datetime_t)+0xe1>
c000c414:	85 d2                	test   edx,edx
c000c416:	b8 6d 01 00 00       	mov    eax,0x16d
c000c41b:	75 0a                	jne    c000c427 <datetimeToSeconds(datetime_t)+0x10c>
c000c41d:	83 fb 01             	cmp    ebx,0x1
c000c420:	19 c0                	sbb    eax,eax
c000c422:	05 6e 01 00 00       	add    eax,0x16e
c000c427:	29 c1                	sub    ecx,eax
c000c429:	b8 80 51 01 00       	mov    eax,0x15180
c000c42e:	f7 e9                	imul   ecx
c000c430:	03 04 24             	add    eax,DWORD PTR [esp]
c000c433:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c437:	83 c4 0c             	add    esp,0xc
c000c43a:	5b                   	pop    ebx
c000c43b:	5e                   	pop    esi
c000c43c:	5f                   	pop    edi
c000c43d:	5d                   	pop    ebp
c000c43e:	c3                   	ret    
c000c43f:	90                   	nop

c000c440 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c440:	57                   	push   edi
c000c441:	56                   	push   esi
c000c442:	53                   	push   ebx
c000c443:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c447:	8b 06                	mov    eax,DWORD PTR [esi]
c000c449:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c44c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c454:	e8 c2 fe ff ff       	call   c000c31b <datetimeToSeconds(datetime_t)>
c000c459:	59                   	pop    ecx
c000c45a:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c461:	5b                   	pop    ebx
c000c462:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c468:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c46e:	89 cb                	mov    ebx,ecx
c000c470:	c1 fb 1f             	sar    ebx,0x1f
c000c473:	29 c8                	sub    eax,ecx
c000c475:	19 da                	sbb    edx,ebx
c000c477:	31 c9                	xor    ecx,ecx
c000c479:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c480:	74 05                	je     c000c487 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c482:	b9 08 07 00 00       	mov    ecx,0x708
c000c487:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c48b:	31 db                	xor    ebx,ebx
c000c48d:	29 c8                	sub    eax,ecx
c000c48f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c493:	19 da                	sbb    edx,ebx
c000c495:	89 f8                	mov    eax,edi
c000c497:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c49b:	5b                   	pop    ebx
c000c49c:	5e                   	pop    esi
c000c49d:	5f                   	pop    edi
c000c49e:	ff e0                	jmp    eax

c000c4a0 <secondsToDatetime(unsigned long long)>:
c000c4a0:	55                   	push   ebp
c000c4a1:	57                   	push   edi
c000c4a2:	56                   	push   esi
c000c4a3:	53                   	push   ebx
c000c4a4:	83 ec 1c             	sub    esp,0x1c
c000c4a7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4b3:	6a 00                	push   0x0
c000c4b5:	68 80 51 01 00       	push   0x15180
c000c4ba:	55                   	push   ebp
c000c4bb:	57                   	push   edi
c000c4bc:	e8 6f 2f 01 00       	call   c001f430 <__udivdi3>
c000c4c1:	83 c4 10             	add    esp,0x10
c000c4c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4c8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4ce:	6a 00                	push   0x0
c000c4d0:	68 80 51 01 00       	push   0x15180
c000c4d5:	55                   	push   ebp
c000c4d6:	57                   	push   edi
c000c4d7:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4dc:	e8 4f 30 01 00       	call   c001f530 <__umoddi3>
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	99                   	cdq    
c000c4e5:	f7 ff                	idiv   edi
c000c4e7:	bf 3c 00 00 00       	mov    edi,0x3c
c000c4ec:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c4ef:	89 d0                	mov    eax,edx
c000c4f1:	99                   	cdq    
c000c4f2:	f7 ff                	idiv   edi
c000c4f4:	85 db                	test   ebx,ebx
c000c4f6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c4f9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c4fc:	79 11                	jns    c000c50f <secondsToDatetime(unsigned long long)+0x6f>
c000c4fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c502:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c508:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c50d:	eb 07                	jmp    c000c516 <secondsToDatetime(unsigned long long)+0x76>
c000c50f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c514:	89 d8                	mov    eax,ebx
c000c516:	99                   	cdq    
c000c517:	bf b4 05 00 00       	mov    edi,0x5b4
c000c51c:	f7 f9                	idiv   ecx
c000c51e:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c523:	31 d2                	xor    edx,edx
c000c525:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c52a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c52e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c536:	01 c3                	add    ebx,eax
c000c538:	89 d8                	mov    eax,ebx
c000c53a:	f7 f1                	div    ecx
c000c53c:	31 d2                	xor    edx,edx
c000c53e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c541:	89 d8                	mov    eax,ebx
c000c543:	f7 f7                	div    edi
c000c545:	31 d2                	xor    edx,edx
c000c547:	29 c1                	sub    ecx,eax
c000c549:	89 d8                	mov    eax,ebx
c000c54b:	f7 f5                	div    ebp
c000c54d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c552:	31 d2                	xor    edx,edx
c000c554:	29 c1                	sub    ecx,eax
c000c556:	89 c8                	mov    eax,ecx
c000c558:	f7 f5                	div    ebp
c000c55a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c55f:	31 d2                	xor    edx,edx
c000c561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c565:	89 c8                	mov    eax,ecx
c000c567:	f7 f5                	div    ebp
c000c569:	31 d2                	xor    edx,edx
c000c56b:	01 c3                	add    ebx,eax
c000c56d:	89 c8                	mov    eax,ecx
c000c56f:	f7 f7                	div    edi
c000c571:	bf 99 00 00 00       	mov    edi,0x99
c000c576:	31 d2                	xor    edx,edx
c000c578:	29 c3                	sub    ebx,eax
c000c57a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c582:	29 c3                	sub    ebx,eax
c000c584:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c587:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c58a:	83 c1 02             	add    ecx,0x2
c000c58d:	89 c8                	mov    eax,ecx
c000c58f:	bb 05 00 00 00       	mov    ebx,0x5
c000c594:	f7 f7                	div    edi
c000c596:	31 d2                	xor    edx,edx
c000c598:	89 c7                	mov    edi,eax
c000c59a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5a0:	83 c0 02             	add    eax,0x2
c000c5a3:	f7 f3                	div    ebx
c000c5a5:	89 eb                	mov    ebx,ebp
c000c5a7:	29 c3                	sub    ebx,eax
c000c5a9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5af:	88 1e                	mov    BYTE PTR [esi],bl
c000c5b1:	19 c0                	sbb    eax,eax
c000c5b3:	31 d2                	xor    edx,edx
c000c5b5:	83 e0 0c             	and    eax,0xc
c000c5b8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5bc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5c4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5c8:	83 f9 01             	cmp    ecx,0x1
c000c5cb:	0f 96 c2             	setbe  dl
c000c5ce:	41                   	inc    ecx
c000c5cf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5d2:	01 d0                	add    eax,edx
c000c5d4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5d8:	83 c4 1c             	add    esp,0x1c
c000c5db:	89 f0                	mov    eax,esi
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c2 04 00             	ret    0x4

c000c5e4 <Clock::timeInDatetimeLocal()>:
c000c5e4:	53                   	push   ebx
c000c5e5:	83 ec 14             	sub    esp,0x14
c000c5e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5f0:	e8 85 fc ff ff       	call   c000c27a <Clock::timeInSecondsLocal()>
c000c5f5:	83 c4 0c             	add    esp,0xc
c000c5f8:	52                   	push   edx
c000c5f9:	50                   	push   eax
c000c5fa:	53                   	push   ebx
c000c5fb:	e8 a0 fe ff ff       	call   c000c4a0 <secondsToDatetime(unsigned long long)>
c000c600:	89 d8                	mov    eax,ebx
c000c602:	83 c4 14             	add    esp,0x14
c000c605:	5b                   	pop    ebx
c000c606:	c2 04 00             	ret    0x4
c000c609:	90                   	nop

c000c60a <Device::hibernate()>:
c000c60a:	c3                   	ret    
c000c60b:	90                   	nop

c000c60c <Device::wake()>:
c000c60c:	c3                   	ret    
c000c60d:	90                   	nop

c000c60e <Device::detect()>:
c000c60e:	c3                   	ret    
c000c60f:	90                   	nop

c000c610 <Device::disableLegacy()>:
c000c610:	c3                   	ret    
c000c611:	90                   	nop

c000c612 <Device::powerSaving(PowerSavingLevel)>:
c000c612:	c3                   	ret    
c000c613:	90                   	nop

c000c614 <DriverlessDevice::close(int, int, void*)>:
c000c614:	31 c0                	xor    eax,eax
c000c616:	c3                   	ret    
c000c617:	90                   	nop

c000c618 <DriverlessDevice::detect()>:
c000c618:	c3                   	ret    
c000c619:	90                   	nop

c000c61a <DriverlessDevice::open(int, int, void*)>:
c000c61a:	83 ec 18             	sub    esp,0x18
c000c61d:	68 10 17 02 c0       	push   0xc0021710
c000c622:	e8 a2 4c 00 00       	call   c00112c9 <KePanic(char const*)>
c000c627:	83 c8 ff             	or     eax,0xffffffff
c000c62a:	83 c4 1c             	add    esp,0x1c
c000c62d:	c3                   	ret    

c000c62e <Device::~Device()>:
c000c62e:	ba 70 17 02 c0       	mov    edx,0xc0021770
c000c633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c637:	89 10                	mov    DWORD PTR [eax],edx
c000c639:	90                   	nop
c000c63a:	c3                   	ret    
c000c63b:	90                   	nop

c000c63c <Device::~Device()>:
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c643:	e8 e6 ff ff ff       	call   c000c62e <Device::~Device()>
c000c648:	83 c4 04             	add    esp,0x4
c000c64b:	83 ec 08             	sub    esp,0x8
c000c64e:	68 58 01 00 00       	push   0x158
c000c653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c657:	e8 b0 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c65c:	83 c4 10             	add    esp,0x10
c000c65f:	83 c4 0c             	add    esp,0xc
c000c662:	c3                   	ret    
c000c663:	90                   	nop

c000c664 <Device::findAndLoadDriver()>:
c000c664:	c7 44 24 04 2e 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002172e
c000c66c:	e9 99 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c671:	90                   	nop

c000c672 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c672:	57                   	push   edi
c000c673:	b9 09 00 00 00       	mov    ecx,0x9
c000c678:	56                   	push   esi
c000c679:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c67d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c681:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c68b:	81 c7 18 01 00 00    	add    edi,0x118
c000c691:	fc                   	cld    
c000c692:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c694:	5e                   	pop    esi
c000c695:	5f                   	pop    edi
c000c696:	c3                   	ret    
c000c697:	90                   	nop

c000c698 <Device::preOpenACPI(void*, char*, char*)>:
c000c698:	57                   	push   edi
c000c699:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c69e:	56                   	push   esi
c000c69f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6ab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6b5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6bb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6c3:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6cd:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6d4:	5e                   	pop    esi
c000c6d5:	5f                   	pop    edi
c000c6d6:	c3                   	ret    
c000c6d7:	90                   	nop

c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6d8:	53                   	push   ebx
c000c6d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c6e9:	0f b6 c0             	movzx  eax,al
c000c6ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6f4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c6f8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6fc:	5b                   	pop    ebx
c000c6fd:	e9 aa 05 00 00       	jmp    c000ccac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c702 <Device::getParent()>:
c000c702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c706:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c70e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c712:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c716:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c71b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c71f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c723:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c727:	e9 f7 06 00 00       	jmp    c000ce23 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c72c <Device::addChild(Device*)>:
c000c72c:	53                   	push   ebx
c000c72d:	83 ec 08             	sub    esp,0x8
c000c730:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c734:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c738:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c73e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c744:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c746:	85 d2                	test   edx,edx
c000c748:	74 04                	je     c000c74e <Device::addChild(Device*)+0x22>
c000c74a:	89 d3                	mov    ebx,edx
c000c74c:	eb f6                	jmp    c000c744 <Device::addChild(Device*)+0x18>
c000c74e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c751:	83 ec 0c             	sub    esp,0xc
c000c754:	6a 08                	push   0x8
c000c756:	e8 78 b3 ff ff       	call   c0007ad3 <malloc>
c000c75b:	89 03                	mov    DWORD PTR [ebx],eax
c000c75d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c763:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c76a:	83 c4 18             	add    esp,0x18
c000c76d:	5b                   	pop    ebx
c000c76e:	c3                   	ret    
c000c76f:	90                   	nop

c000c770 <Device::removeAllChildren()>:
c000c770:	56                   	push   esi
c000c771:	53                   	push   ebx
c000c772:	52                   	push   edx
c000c773:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c777:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c77d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c780:	74 17                	je     c000c799 <Device::removeAllChildren()+0x29>
c000c782:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c785:	85 c0                	test   eax,eax
c000c787:	74 0c                	je     c000c795 <Device::removeAllChildren()+0x25>
c000c789:	8b 10                	mov    edx,DWORD PTR [eax]
c000c78b:	83 ec 0c             	sub    esp,0xc
c000c78e:	50                   	push   eax
c000c78f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c792:	83 c4 10             	add    esp,0x10
c000c795:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c797:	eb e4                	jmp    c000c77d <Device::removeAllChildren()+0xd>
c000c799:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c79f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7a5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7b2:	58                   	pop    eax
c000c7b3:	5b                   	pop    ebx
c000c7b4:	5e                   	pop    esi
c000c7b5:	c3                   	ret    

c000c7b6 <Device::hibernateAll()>:
c000c7b6:	53                   	push   ebx
c000c7b7:	83 ec 14             	sub    esp,0x14
c000c7ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7c0:	53                   	push   ebx
c000c7c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7ca:	83 c4 10             	add    esp,0x10
c000c7cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7d0:	74 0f                	je     c000c7e1 <Device::hibernateAll()+0x2b>
c000c7d2:	83 ec 0c             	sub    esp,0xc
c000c7d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7d8:	e8 d9 ff ff ff       	call   c000c7b6 <Device::hibernateAll()>
c000c7dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7df:	eb e9                	jmp    c000c7ca <Device::hibernateAll()+0x14>
c000c7e1:	83 c4 08             	add    esp,0x8
c000c7e4:	5b                   	pop    ebx
c000c7e5:	c3                   	ret    

c000c7e6 <Device::wakeAll()>:
c000c7e6:	53                   	push   ebx
c000c7e7:	83 ec 14             	sub    esp,0x14
c000c7ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7f0:	53                   	push   ebx
c000c7f1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c7f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c800:	74 0f                	je     c000c811 <Device::wakeAll()+0x2b>
c000c802:	83 ec 0c             	sub    esp,0xc
c000c805:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c808:	e8 d9 ff ff ff       	call   c000c7e6 <Device::wakeAll()>
c000c80d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c80f:	eb e9                	jmp    c000c7fa <Device::wakeAll()+0x14>
c000c811:	83 c4 08             	add    esp,0x8
c000c814:	5b                   	pop    ebx
c000c815:	c3                   	ret    

c000c816 <Device::detectAll()>:
c000c816:	53                   	push   ebx
c000c817:	83 ec 14             	sub    esp,0x14
c000c81a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c81e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c820:	53                   	push   ebx
c000c821:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c824:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c82a:	83 c4 10             	add    esp,0x10
c000c82d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c830:	74 0f                	je     c000c841 <Device::detectAll()+0x2b>
c000c832:	83 ec 0c             	sub    esp,0xc
c000c835:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c838:	e8 d9 ff ff ff       	call   c000c816 <Device::detectAll()>
c000c83d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c83f:	eb e9                	jmp    c000c82a <Device::detectAll()+0x14>
c000c841:	83 c4 08             	add    esp,0x8
c000c844:	5b                   	pop    ebx
c000c845:	c3                   	ret    

c000c846 <Device::disableLegacyAll()>:
c000c846:	c3                   	ret    
c000c847:	90                   	nop

c000c848 <Device::loadDriversForAll()>:
c000c848:	c3                   	ret    
c000c849:	90                   	nop

c000c84a <Device::closeAll()>:
c000c84a:	53                   	push   ebx
c000c84b:	83 ec 08             	sub    esp,0x8
c000c84e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c852:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c854:	6a 00                	push   0x0
c000c856:	6a 00                	push   0x0
c000c858:	6a 00                	push   0x0
c000c85a:	53                   	push   ebx
c000c85b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c85e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c864:	83 c4 10             	add    esp,0x10
c000c867:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c86a:	74 0f                	je     c000c87b <Device::closeAll()+0x31>
c000c86c:	83 ec 0c             	sub    esp,0xc
c000c86f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c872:	e8 d3 ff ff ff       	call   c000c84a <Device::closeAll()>
c000c877:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c879:	eb e9                	jmp    c000c864 <Device::closeAll()+0x1a>
c000c87b:	83 c4 08             	add    esp,0x8
c000c87e:	5b                   	pop    ebx
c000c87f:	c3                   	ret    

c000c880 <Device::powerSavingAll(PowerSavingLevel)>:
c000c880:	56                   	push   esi
c000c881:	53                   	push   ebx
c000c882:	83 ec 0c             	sub    esp,0xc
c000c885:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c889:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c88d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c88f:	56                   	push   esi
c000c890:	53                   	push   ebx
c000c891:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c894:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c89a:	83 c4 10             	add    esp,0x10
c000c89d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8a0:	74 0f                	je     c000c8b1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8a2:	52                   	push   edx
c000c8a3:	52                   	push   edx
c000c8a4:	56                   	push   esi
c000c8a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8a8:	e8 d3 ff ff ff       	call   c000c880 <Device::powerSavingAll(PowerSavingLevel)>
c000c8ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8af:	eb e9                	jmp    c000c89a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8b1:	58                   	pop    eax
c000c8b2:	5b                   	pop    ebx
c000c8b3:	5e                   	pop    esi
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <Device::setName(char const*)>:
c000c8b6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8be:	e9 8d 3d ff ff       	jmp    c0000650 <strcpy>
c000c8c3:	90                   	nop

c000c8c4 <Device::Device(char const*)>:
c000c8c4:	83 ec 1c             	sub    esp,0x1c
c000c8c7:	ba 70 17 02 c0       	mov    edx,0xc0021770
c000c8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d0:	89 10                	mov    DWORD PTR [eax],edx
c000c8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c900:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c90a:	83 ec 08             	sub    esp,0x8
c000c90d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c915:	e8 9c ff ff ff       	call   c000c8b6 <Device::setName(char const*)>
c000c91a:	83 c4 10             	add    esp,0x10
c000c91d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c925:	83 ec 0c             	sub    esp,0xc
c000c928:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c92c:	e8 a2 b1 ff ff       	call   c0007ad3 <malloc>
c000c931:	83 c4 10             	add    esp,0x10
c000c934:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c93a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c941:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c945:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c955:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c965:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c970:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c986:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c994:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9ba:	90                   	nop
c000c9bb:	83 c4 1c             	add    esp,0x1c
c000c9be:	c3                   	ret    
c000c9bf:	90                   	nop

c000c9c0 <Device::getName()>:
c000c9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9c4:	05 d0 00 00 00       	add    eax,0xd0
c000c9c9:	c3                   	ret    

c000c9ca <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9ca:	83 ec 0c             	sub    esp,0xc
c000c9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d1:	83 ec 08             	sub    esp,0x8
c000c9d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d8:	50                   	push   eax
c000c9d9:	e8 e6 fe ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000c9de:	83 c4 10             	add    esp,0x10
c000c9e1:	ba 9c 17 02 c0       	mov    edx,0xc002179c
c000c9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ea:	89 10                	mov    DWORD PTR [eax],edx
c000c9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c9fa:	90                   	nop
c000c9fb:	83 c4 0c             	add    esp,0xc
c000c9fe:	c3                   	ret    
c000c9ff:	90                   	nop

c000ca00 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca00:	57                   	push   edi
c000ca01:	56                   	push   esi
c000ca02:	53                   	push   ebx
c000ca03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca0f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca15:	75 0c                	jne    c000ca23 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca17:	52                   	push   edx
c000ca18:	52                   	push   edx
c000ca19:	53                   	push   ebx
c000ca1a:	56                   	push   esi
c000ca1b:	e8 c2 2e 01 00       	call   c001f8e2 <LinkedList<Device>::addElement(Device*)>
c000ca20:	83 c4 10             	add    esp,0x10
c000ca23:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca2c:	74 12                	je     c000ca40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca2e:	50                   	push   eax
c000ca2f:	57                   	push   edi
c000ca30:	56                   	push   esi
c000ca31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca34:	e8 c7 ff ff ff       	call   c000ca00 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca3b:	83 c4 10             	add    esp,0x10
c000ca3e:	eb e9                	jmp    c000ca29 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca40:	5b                   	pop    ebx
c000ca41:	5e                   	pop    esi
c000ca42:	5f                   	pop    edi
c000ca43:	c3                   	ret    

c000ca44 <getDevicesOfType(DeviceType)>:
c000ca44:	53                   	push   ebx
c000ca45:	83 ec 14             	sub    esp,0x14
c000ca48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca4c:	53                   	push   ebx
c000ca4d:	e8 6c 2f 01 00       	call   c001f9be <LinkedList<Device>::LinkedList()>
c000ca52:	83 c4 0c             	add    esp,0xc
c000ca55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca59:	53                   	push   ebx
c000ca5a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca60:	e8 9b ff ff ff       	call   c000ca00 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca65:	83 c4 18             	add    esp,0x18
c000ca68:	89 d8                	mov    eax,ebx
c000ca6a:	5b                   	pop    ebx
c000ca6b:	c2 04 00             	ret    0x4
c000ca6e:	66 90                	xchg   ax,ax

c000ca70 <HardDiskController::HardDiskController(char const*)>:
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca77:	83 ec 08             	sub    esp,0x8
c000ca7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7e:	50                   	push   eax
c000ca7f:	e8 40 fe ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	ba c8 17 02 c0       	mov    edx,0xc00217c8
c000ca8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca90:	89 10                	mov    DWORD PTR [eax],edx
c000ca92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca96:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000caa0:	90                   	nop
c000caa1:	83 c4 0c             	add    esp,0xc
c000caa4:	c3                   	ret    
c000caa5:	90                   	nop
c000caa6:	66 90                	xchg   ax,ax

c000caa8 <HardDiskController::~HardDiskController()>:
c000caa8:	83 ec 0c             	sub    esp,0xc
c000caab:	ba c8 17 02 c0       	mov    edx,0xc00217c8
c000cab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab4:	89 10                	mov    DWORD PTR [eax],edx
c000cab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caba:	83 ec 0c             	sub    esp,0xc
c000cabd:	50                   	push   eax
c000cabe:	e8 6b fb ff ff       	call   c000c62e <Device::~Device()>
c000cac3:	83 c4 10             	add    esp,0x10
c000cac6:	90                   	nop
c000cac7:	83 c4 0c             	add    esp,0xc
c000caca:	c3                   	ret    
c000cacb:	90                   	nop

c000cacc <HardDiskController::~HardDiskController()>:
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	83 ec 0c             	sub    esp,0xc
c000cad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad6:	e8 cd ff ff ff       	call   c000caa8 <HardDiskController::~HardDiskController()>
c000cadb:	83 c4 10             	add    esp,0x10
c000cade:	83 ec 08             	sub    esp,0x8
c000cae1:	68 58 01 00 00       	push   0x158
c000cae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caea:	e8 1d dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	83 c4 0c             	add    esp,0xc
c000caf5:	c3                   	ret    

c000caf6 <PhysicalDisk::eject()>:
c000caf6:	83 c8 ff             	or     eax,0xffffffff
c000caf9:	c3                   	ret    

c000cafa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cafa:	83 ec 0c             	sub    esp,0xc
c000cafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb01:	83 ec 08             	sub    esp,0x8
c000cb04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb08:	50                   	push   eax
c000cb09:	e8 b6 fd ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000cb0e:	83 c4 10             	add    esp,0x10
c000cb11:	ba f4 17 02 c0       	mov    edx,0xc00217f4
c000cb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1a:	89 10                	mov    DWORD PTR [eax],edx
c000cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb20:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb48:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb52:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb5c:	90                   	nop
c000cb5d:	83 c4 0c             	add    esp,0xc
c000cb60:	c3                   	ret    
c000cb61:	90                   	nop

c000cb62 <PhysicalDisk::startCache()>:
c000cb62:	56                   	push   esi
c000cb63:	53                   	push   ebx
c000cb64:	83 ec 10             	sub    esp,0x10
c000cb67:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb6b:	6a 44                	push   0x44
c000cb6d:	e8 61 af ff ff       	call   c0007ad3 <malloc>
c000cb72:	89 c6                	mov    esi,eax
c000cb74:	58                   	pop    eax
c000cb75:	5a                   	pop    edx
c000cb76:	53                   	push   ebx
c000cb77:	56                   	push   esi
c000cb78:	e8 83 17 00 00       	call   c000e300 <VCache::VCache(PhysicalDisk*)>
c000cb7d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb83:	83 c4 14             	add    esp,0x14
c000cb86:	5b                   	pop    ebx
c000cb87:	5e                   	pop    esi
c000cb88:	c3                   	ret    
c000cb89:	90                   	nop

c000cb8a <PhysicalDisk::~PhysicalDisk()>:
c000cb8a:	83 ec 0c             	sub    esp,0xc
c000cb8d:	ba f4 17 02 c0       	mov    edx,0xc00217f4
c000cb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb96:	89 10                	mov    DWORD PTR [eax],edx
c000cb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb9c:	83 ec 0c             	sub    esp,0xc
c000cb9f:	50                   	push   eax
c000cba0:	e8 89 fa ff ff       	call   c000c62e <Device::~Device()>
c000cba5:	83 c4 10             	add    esp,0x10
c000cba8:	90                   	nop
c000cba9:	83 c4 0c             	add    esp,0xc
c000cbac:	c3                   	ret    
c000cbad:	90                   	nop

c000cbae <PhysicalDisk::~PhysicalDisk()>:
c000cbae:	83 ec 0c             	sub    esp,0xc
c000cbb1:	83 ec 0c             	sub    esp,0xc
c000cbb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb8:	e8 cd ff ff ff       	call   c000cb8a <PhysicalDisk::~PhysicalDisk()>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	83 ec 08             	sub    esp,0x8
c000cbc3:	68 6c 01 00 00       	push   0x16c
c000cbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbcc:	e8 3b dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cbd1:	83 c4 10             	add    esp,0x10
c000cbd4:	83 c4 0c             	add    esp,0xc
c000cbd7:	c3                   	ret    

c000cbd8 <int_handler>:
c000cbd8:	55                   	push   ebp
c000cbd9:	57                   	push   edi
c000cbda:	56                   	push   esi
c000cbdb:	53                   	push   ebx
c000cbdc:	83 ec 0c             	sub    esp,0xc
c000cbdf:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbe6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbea:	74 0b                	je     c000cbf7 <int_handler+0x1f>
c000cbec:	fa                   	cli    
c000cbed:	f4                   	hlt    
c000cbee:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbf5:	75 f5                	jne    c000cbec <int_handler+0x14>
c000cbf7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cbfa:	8d 46 e0             	lea    eax,[esi-0x20]
c000cbfd:	83 f8 17             	cmp    eax,0x17
c000cc00:	76 40                	jbe    c000cc42 <int_handler+0x6a>
c000cc02:	c1 e6 04             	shl    esi,0x4
c000cc05:	31 db                	xor    ebx,ebx
c000cc07:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc0d:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc13:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc17:	85 c0                	test   eax,eax
c000cc19:	74 13                	je     c000cc2e <int_handler+0x56>
c000cc1b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc1f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc22:	74 2c                	je     c000cc50 <int_handler+0x78>
c000cc24:	83 ec 08             	sub    esp,0x8
c000cc27:	52                   	push   edx
c000cc28:	57                   	push   edi
c000cc29:	ff d0                	call   eax
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	83 c3 01             	add    ebx,0x1
c000cc31:	83 fb 04             	cmp    ebx,0x4
c000cc34:	75 dd                	jne    c000cc13 <int_handler+0x3b>
c000cc36:	83 c4 0c             	add    esp,0xc
c000cc39:	31 c0                	xor    eax,eax
c000cc3b:	5b                   	pop    ebx
c000cc3c:	31 d2                	xor    edx,edx
c000cc3e:	5e                   	pop    esi
c000cc3f:	5f                   	pop    edi
c000cc40:	5d                   	pop    ebp
c000cc41:	c3                   	ret    
c000cc42:	83 ec 0c             	sub    esp,0xc
c000cc45:	50                   	push   eax
c000cc46:	e8 df b3 00 00       	call   c001802a <HalEndOfInterrupt(int)>
c000cc4b:	83 c4 10             	add    esp,0x10
c000cc4e:	eb b2                	jmp    c000cc02 <int_handler+0x2a>
c000cc50:	83 ec 08             	sub    esp,0x8
c000cc53:	52                   	push   edx
c000cc54:	57                   	push   edi
c000cc55:	ff d0                	call   eax
c000cc57:	83 c4 10             	add    esp,0x10
c000cc5a:	83 c4 0c             	add    esp,0xc
c000cc5d:	5b                   	pop    ebx
c000cc5e:	5e                   	pop    esi
c000cc5f:	5f                   	pop    edi
c000cc60:	5d                   	pop    ebp
c000cc61:	c3                   	ret    

c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc62:	56                   	push   esi
c000cc63:	31 c0                	xor    eax,eax
c000cc65:	53                   	push   ebx
c000cc66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc6e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc72:	89 ca                	mov    edx,ecx
c000cc74:	c1 e2 04             	shl    edx,0x4
c000cc77:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc7f:	74 17                	je     c000cc98 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc81:	83 c0 01             	add    eax,0x1
c000cc84:	83 f8 04             	cmp    eax,0x4
c000cc87:	75 ee                	jne    c000cc77 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc89:	c7 44 24 0c 24 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021824
c000cc91:	5b                   	pop    ebx
c000cc92:	5e                   	pop    esi
c000cc93:	e9 31 46 00 00       	jmp    c00112c9 <KePanic(char const*)>
c000cc98:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc9b:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cca2:	5b                   	pop    ebx
c000cca3:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000ccaa:	5e                   	pop    esi
c000ccab:	c3                   	ret    

c000ccac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ccac:	55                   	push   ebp
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 0c             	sub    esp,0xc
c000ccb3:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccb9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccc1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ccc8:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cccb:	74 57                	je     c000cd24 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cccd:	84 c0                	test   al,al
c000cccf:	89 c7                	mov    edi,eax
c000ccd1:	74 1d                	je     c000ccf0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ccd3:	83 fe 0f             	cmp    esi,0xf
c000ccd6:	0f 8f d9 00 00 00    	jg     c000cdb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000ccdc:	0f b6 b6 28 33 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdccd8]
c000cce3:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cceb:	d1 ef                	shr    edi,1
c000cced:	83 e7 01             	and    edi,0x1
c000ccf0:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000ccf5:	83 ec 08             	sub    esp,0x8
c000ccf8:	31 db                	xor    ebx,ebx
c000ccfa:	50                   	push   eax
c000ccfb:	68 31 18 02 c0       	push   0xc0021831
c000cd00:	e8 05 dc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cd05:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd0a:	83 c4 10             	add    esp,0x10
c000cd0d:	85 c0                	test   eax,eax
c000cd0f:	7f 59                	jg     c000cd6a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cd11:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	68 48 18 02 c0       	push   0xc0021848
c000cd1c:	e8 a8 45 00 00       	call   c00112c9 <KePanic(char const*)>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	89 e8                	mov    eax,ebp
c000cd26:	31 d2                	xor    edx,edx
c000cd28:	c1 e0 04             	shl    eax,0x4
c000cd2b:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd32:	85 c9                	test   ecx,ecx
c000cd34:	0f 84 92 00 00 00    	je     c000cdcc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd3a:	83 c2 01             	add    edx,0x1
c000cd3d:	83 fa 04             	cmp    edx,0x4
c000cd40:	75 e9                	jne    c000cd2b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd42:	83 ec 0c             	sub    esp,0xc
c000cd45:	68 9c 18 02 c0       	push   0xc002189c
c000cd4a:	e8 7a 45 00 00       	call   c00112c9 <KePanic(char const*)>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd57:	83 c4 0c             	add    esp,0xc
c000cd5a:	5b                   	pop    ebx
c000cd5b:	5e                   	pop    esi
c000cd5c:	5f                   	pop    edi
c000cd5d:	5d                   	pop    ebp
c000cd5e:	c3                   	ret    
c000cd5f:	83 c3 01             	add    ebx,0x1
c000cd62:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd68:	7e a7                	jle    c000cd11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cd6a:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd71:	83 ec 08             	sub    esp,0x8
c000cd74:	56                   	push   esi
c000cd75:	55                   	push   ebp
c000cd76:	e8 99 1a 01 00       	call   c001e814 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	84 c0                	test   al,al
c000cd80:	74 dd                	je     c000cd5f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd82:	89 f8                	mov    eax,edi
c000cd84:	83 ec 04             	sub    esp,0x4
c000cd87:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd8e:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd91:	0f b6 f8             	movzx  edi,al
c000cd94:	57                   	push   edi
c000cd95:	89 e8                	mov    eax,ebp
c000cd97:	6a 00                	push   0x0
c000cd99:	0f b6 c0             	movzx  eax,al
c000cd9c:	50                   	push   eax
c000cd9d:	89 f0                	mov    eax,esi
c000cd9f:	6a 00                	push   0x0
c000cda1:	0f b6 c0             	movzx  eax,al
c000cda4:	6a 00                	push   0x0
c000cda6:	50                   	push   eax
c000cda7:	53                   	push   ebx
c000cda8:	e8 d3 1b 01 00       	call   c001e980 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cdad:	83 c4 20             	add    esp,0x20
c000cdb0:	e9 6f ff ff ff       	jmp    c000cd24 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cdb5:	83 ec 0c             	sub    esp,0xc
c000cdb8:	31 ff                	xor    edi,edi
c000cdba:	68 64 18 02 c0       	push   0xc0021864
c000cdbf:	e8 05 45 00 00       	call   c00112c9 <KePanic(char const*)>
c000cdc4:	83 c4 10             	add    esp,0x10
c000cdc7:	e9 24 ff ff ff       	jmp    c000ccf0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cdcc:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cdcf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cdd3:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdda:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cdde:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cde5:	83 c4 0c             	add    esp,0xc
c000cde8:	89 f0                	mov    eax,esi
c000cdea:	5b                   	pop    ebx
c000cdeb:	5e                   	pop    esi
c000cdec:	5f                   	pop    edi
c000cded:	5d                   	pop    ebp
c000cdee:	c3                   	ret    

c000cdef <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cdef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdf3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdf7:	c1 e0 04             	shl    eax,0x4
c000cdfa:	8d 50 10             	lea    edx,[eax+0x10]
c000cdfd:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce03:	74 08                	je     c000ce0d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce05:	83 c0 04             	add    eax,0x4
c000ce08:	39 d0                	cmp    eax,edx
c000ce0a:	75 f1                	jne    c000cdfd <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce0c:	c3                   	ret    
c000ce0d:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce17:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce21:	eb e2                	jmp    c000ce05 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce23 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce23:	56                   	push   esi
c000ce24:	53                   	push   ebx
c000ce25:	83 ec 04             	sub    esp,0x4
c000ce28:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce35:	74 0e                	je     c000ce45 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce37:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce3c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce43:	75 34                	jne    c000ce79 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce45:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce48:	c1 e0 04             	shl    eax,0x4
c000ce4b:	8d 50 10             	lea    edx,[eax+0x10]
c000ce4e:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce54:	74 0d                	je     c000ce63 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce56:	83 c0 04             	add    eax,0x4
c000ce59:	39 d0                	cmp    eax,edx
c000ce5b:	75 f1                	jne    c000ce4e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce5d:	83 c4 04             	add    esp,0x4
c000ce60:	5b                   	pop    ebx
c000ce61:	5e                   	pop    esi
c000ce62:	c3                   	ret    
c000ce63:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce6d:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce77:	eb dd                	jmp    c000ce56 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ce79:	83 fb 0f             	cmp    ebx,0xf
c000ce7c:	7f 09                	jg     c000ce87 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce7e:	0f b6 9b 28 33 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdccd8]
c000ce85:	eb be                	jmp    c000ce45 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce87:	83 ec 0c             	sub    esp,0xc
c000ce8a:	68 55 18 02 c0       	push   0xc0021855
c000ce8f:	e8 35 44 00 00       	call   c00112c9 <KePanic(char const*)>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	eb ac                	jmp    c000ce45 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ce99 <setupINTS()>:
c000ce99:	31 c0                	xor    eax,eax
c000ce9b:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cea5:	83 c0 10             	add    eax,0x10
c000cea8:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ceb2:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000cebc:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cec6:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000ced0:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000ceda:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cee4:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000ceee:	3d 00 10 00 00       	cmp    eax,0x1000
c000cef3:	75 a6                	jne    c000ce9b <setupINTS()+0x2>
c000cef5:	c3                   	ret    

c000cef6 <convertLegacyIRQNumber(int)>:
c000cef6:	83 ec 0c             	sub    esp,0xc
c000cef9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ceff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf03:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf0a:	74 0c                	je     c000cf18 <convertLegacyIRQNumber(int)+0x22>
c000cf0c:	83 f8 0f             	cmp    eax,0xf
c000cf0f:	7f 0b                	jg     c000cf1c <convertLegacyIRQNumber(int)+0x26>
c000cf11:	0f b6 80 28 33 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdccd8]
c000cf18:	83 c4 0c             	add    esp,0xc
c000cf1b:	c3                   	ret    
c000cf1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf20:	83 ec 0c             	sub    esp,0xc
c000cf23:	68 64 18 02 c0       	push   0xc0021864
c000cf28:	e8 9c 43 00 00       	call   c00112c9 <KePanic(char const*)>
c000cf2d:	83 c4 10             	add    esp,0x10
c000cf30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf34:	83 c4 0c             	add    esp,0xc
c000cf37:	c3                   	ret    

c000cf38 <startGUI(void*)>:
c000cf38:	55                   	push   ebp
c000cf39:	89 e5                	mov    ebp,esp
c000cf3b:	53                   	push   ebx
c000cf3c:	83 ec 04             	sub    esp,0x4
c000cf3f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf44:	83 e8 01             	sub    eax,0x1
c000cf47:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf4c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf51:	85 c0                	test   eax,eax
c000cf53:	75 01                	jne    c000cf56 <startGUI(void*)+0x1e>
c000cf55:	fb                   	sti    
c000cf56:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf5c:	83 ec 08             	sub    esp,0x8
c000cf5f:	6a 01                	push   0x1
c000cf61:	68 c1 18 02 c0       	push   0xc00218c1
c000cf66:	e8 a2 83 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000cf6b:	83 c4 10             	add    esp,0x10
c000cf6e:	83 ec 08             	sub    esp,0x8
c000cf71:	53                   	push   ebx
c000cf72:	50                   	push   eax
c000cf73:	e8 d5 85 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000cf78:	83 c4 10             	add    esp,0x10
c000cf7b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf81:	83 ec 08             	sub    esp,0x8
c000cf84:	6a 01                	push   0x1
c000cf86:	68 db 18 02 c0       	push   0xc00218db
c000cf8b:	e8 7d 83 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	83 ec 08             	sub    esp,0x8
c000cf96:	53                   	push   ebx
c000cf97:	50                   	push   eax
c000cf98:	e8 b0 85 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000cf9d:	83 c4 10             	add    esp,0x10
c000cfa0:	90                   	nop
c000cfa1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfa4:	c9                   	leave  
c000cfa5:	c3                   	ret    

c000cfa6 <startGUIVESA(void*)>:
c000cfa6:	55                   	push   ebp
c000cfa7:	89 e5                	mov    ebp,esp
c000cfa9:	53                   	push   ebx
c000cfaa:	83 ec 04             	sub    esp,0x4
c000cfad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfb2:	83 e8 01             	sub    eax,0x1
c000cfb5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfba:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfbf:	85 c0                	test   eax,eax
c000cfc1:	75 01                	jne    c000cfc4 <startGUIVESA(void*)+0x1e>
c000cfc3:	fb                   	sti    
c000cfc4:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfca:	83 ec 08             	sub    esp,0x8
c000cfcd:	6a 01                	push   0x1
c000cfcf:	68 f9 18 02 c0       	push   0xc00218f9
c000cfd4:	e8 34 83 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	83 ec 08             	sub    esp,0x8
c000cfdf:	53                   	push   ebx
c000cfe0:	50                   	push   eax
c000cfe1:	e8 67 85 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000cfe6:	83 c4 10             	add    esp,0x10
c000cfe9:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfef:	83 ec 08             	sub    esp,0x8
c000cff2:	6a 01                	push   0x1
c000cff4:	68 db 18 02 c0       	push   0xc00218db
c000cff9:	e8 0f 83 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000cffe:	83 c4 10             	add    esp,0x10
c000d001:	83 ec 08             	sub    esp,0x8
c000d004:	53                   	push   ebx
c000d005:	50                   	push   eax
c000d006:	e8 42 85 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000d00b:	83 c4 10             	add    esp,0x10
c000d00e:	90                   	nop
c000d00f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d012:	c9                   	leave  
c000d013:	c3                   	ret    

c000d014 <sendKeyToTerminal(unsigned char)>:
c000d014:	55                   	push   ebp
c000d015:	89 e5                	mov    ebp,esp
c000d017:	83 ec 28             	sub    esp,0x28
c000d01a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d01d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d020:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d025:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d029:	83 ec 08             	sub    esp,0x8
c000d02c:	52                   	push   edx
c000d02d:	50                   	push   eax
c000d02e:	e8 89 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d033:	83 c4 10             	add    esp,0x10
c000d036:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d03a:	83 f8 0a             	cmp    eax,0xa
c000d03d:	74 16                	je     c000d055 <sendKeyToTerminal(unsigned char)+0x41>
c000d03f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d043:	83 f8 03             	cmp    eax,0x3
c000d046:	74 0d                	je     c000d055 <sendKeyToTerminal(unsigned char)+0x41>
c000d048:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d04c:	83 f8 1c             	cmp    eax,0x1c
c000d04f:	0f 85 97 00 00 00    	jne    c000d0ec <sendKeyToTerminal(unsigned char)+0xd8>
c000d055:	fa                   	cli    
c000d056:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d05b:	83 c0 01             	add    eax,0x1
c000d05e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d063:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d068:	83 c0 01             	add    eax,0x1
c000d06b:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d070:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d075:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d078:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d082:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d086:	74 1f                	je     c000d0a7 <sendKeyToTerminal(unsigned char)+0x93>
c000d088:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d08b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d08e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d091:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d094:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d097:	83 ec 0c             	sub    esp,0xc
c000d09a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d09d:	e8 ce 91 00 00       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	eb db                	jmp    c000d082 <sendKeyToTerminal(unsigned char)+0x6e>
c000d0a7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0ac:	83 e8 01             	sub    eax,0x1
c000d0af:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0b4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0b9:	85 c0                	test   eax,eax
c000d0bb:	75 18                	jne    c000d0d5 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0bd:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0c2:	85 c0                	test   eax,eax
c000d0c4:	74 0f                	je     c000d0d5 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0c6:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0d0:	e8 a3 8c 00 00       	call   c0015d78 <schedule()>
c000d0d5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0da:	83 e8 01             	sub    eax,0x1
c000d0dd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0e2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0e7:	85 c0                	test   eax,eax
c000d0e9:	75 01                	jne    c000d0ec <sendKeyToTerminal(unsigned char)+0xd8>
c000d0eb:	fb                   	sti    
c000d0ec:	90                   	nop
c000d0ed:	c9                   	leave  
c000d0ee:	c3                   	ret    

c000d0ef <sendKeyboardToken(KeyboardToken)>:
c000d0ef:	55                   	push   ebp
c000d0f0:	89 e5                	mov    ebp,esp
c000d0f2:	83 ec 18             	sub    esp,0x18
c000d0f5:	e8 1f 42 00 00       	call   c0011319 <KeUserIOReceived()>
c000d0fa:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d100:	0f b7 c0             	movzx  eax,ax
c000d103:	83 f2 01             	xor    edx,0x1
c000d106:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d10c:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d111:	85 c0                	test   eax,eax
c000d113:	74 24                	je     c000d139 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d115:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d11b:	83 ec 04             	sub    esp,0x4
c000d11e:	68 40 84 02 c0       	push   0xc0028440
c000d123:	83 ec 08             	sub    esp,0x8
c000d126:	89 e0                	mov    eax,esp
c000d128:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d12b:	89 08                	mov    DWORD PTR [eax],ecx
c000d12d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d130:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d134:	ff d2                	call   edx
c000d136:	83 c4 10             	add    esp,0x10
c000d139:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d13d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d140:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d145:	0f b6 d2             	movzx  edx,dl
c000d148:	0f b6 c0             	movzx  eax,al
c000d14b:	39 c2                	cmp    edx,eax
c000d14d:	74 1c                	je     c000d16b <sendKeyboardToken(KeyboardToken)+0x7c>
c000d14f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d152:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d157:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d15c:	0f b6 c0             	movzx  eax,al
c000d15f:	83 ec 0c             	sub    esp,0xc
c000d162:	50                   	push   eax
c000d163:	e8 b0 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d168:	83 c4 10             	add    esp,0x10
c000d16b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d16e:	0f b6 c0             	movzx  eax,al
c000d171:	85 c0                	test   eax,eax
c000d173:	0f 84 da 00 00 00    	je     c000d253 <sendKeyboardToken(KeyboardToken)+0x164>
c000d179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17c:	0f b7 c0             	movzx  eax,ax
c000d17f:	3d 18 03 00 00       	cmp    eax,0x318
c000d184:	75 06                	jne    c000d18c <sendKeyboardToken(KeyboardToken)+0x9d>
c000d186:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d18c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d18f:	0f b7 c0             	movzx  eax,ax
c000d192:	3d 19 03 00 00       	cmp    eax,0x319
c000d197:	75 06                	jne    c000d19f <sendKeyboardToken(KeyboardToken)+0xb0>
c000d199:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a2:	0f b7 c0             	movzx  eax,ax
c000d1a5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1aa:	75 06                	jne    c000d1b2 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1ac:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b5:	0f b7 c0             	movzx  eax,ax
c000d1b8:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1bd:	75 06                	jne    c000d1c5 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1bf:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c8:	0f b7 c0             	movzx  eax,ax
c000d1cb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1d0:	75 06                	jne    c000d1d8 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1d2:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1db:	0f b7 c0             	movzx  eax,ax
c000d1de:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1e3:	75 06                	jne    c000d1eb <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1e5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ee:	0f b7 c0             	movzx  eax,ax
c000d1f1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1f6:	75 06                	jne    c000d1fe <sendKeyboardToken(KeyboardToken)+0x10f>
c000d1f8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d1fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d201:	0f b7 c0             	movzx  eax,ax
c000d204:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d209:	75 06                	jne    c000d211 <sendKeyboardToken(KeyboardToken)+0x122>
c000d20b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d214:	0f b7 c0             	movzx  eax,ax
c000d217:	3d 20 03 00 00       	cmp    eax,0x320
c000d21c:	75 06                	jne    c000d224 <sendKeyboardToken(KeyboardToken)+0x135>
c000d21e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d227:	0f b7 c0             	movzx  eax,ax
c000d22a:	3d 21 03 00 00       	cmp    eax,0x321
c000d22f:	75 06                	jne    c000d237 <sendKeyboardToken(KeyboardToken)+0x148>
c000d231:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23a:	0f b7 c0             	movzx  eax,ax
c000d23d:	3d 22 03 00 00       	cmp    eax,0x322
c000d242:	0f 85 f1 00 00 00    	jne    c000d339 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d248:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d24e:	e9 e6 00 00 00       	jmp    c000d339 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d256:	0f b7 c0             	movzx  eax,ax
c000d259:	3d 18 03 00 00       	cmp    eax,0x318
c000d25e:	75 0a                	jne    c000d26a <sendKeyboardToken(KeyboardToken)+0x17b>
c000d260:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d266:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d26a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26d:	0f b7 c0             	movzx  eax,ax
c000d270:	3d 19 03 00 00       	cmp    eax,0x319
c000d275:	75 0a                	jne    c000d281 <sendKeyboardToken(KeyboardToken)+0x192>
c000d277:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d27d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d284:	0f b7 c0             	movzx  eax,ax
c000d287:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d28c:	75 0a                	jne    c000d298 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d28e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d294:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d29b:	0f b7 c0             	movzx  eax,ax
c000d29e:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2a3:	75 0a                	jne    c000d2af <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2a5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b2:	0f b7 c0             	movzx  eax,ax
c000d2b5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2ba:	75 0a                	jne    c000d2c6 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2bc:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c9:	0f b7 c0             	movzx  eax,ax
c000d2cc:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2d1:	75 0a                	jne    c000d2dd <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2d3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e0:	0f b7 c0             	movzx  eax,ax
c000d2e3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2e8:	75 0a                	jne    c000d2f4 <sendKeyboardToken(KeyboardToken)+0x205>
c000d2ea:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d2f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f7:	0f b7 c0             	movzx  eax,ax
c000d2fa:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2ff:	75 0a                	jne    c000d30b <sendKeyboardToken(KeyboardToken)+0x21c>
c000d301:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d307:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d30b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30e:	0f b7 c0             	movzx  eax,ax
c000d311:	3d 20 03 00 00       	cmp    eax,0x320
c000d316:	75 0a                	jne    c000d322 <sendKeyboardToken(KeyboardToken)+0x233>
c000d318:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d31e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d325:	0f b7 c0             	movzx  eax,ax
c000d328:	3d 21 03 00 00       	cmp    eax,0x321
c000d32d:	75 0a                	jne    c000d339 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d32f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d335:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d33c:	0f b7 c0             	movzx  eax,ax
c000d33f:	3d 00 02 00 00       	cmp    eax,0x200
c000d344:	75 2f                	jne    c000d375 <sendKeyboardToken(KeyboardToken)+0x286>
c000d346:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d34b:	83 f0 01             	xor    eax,0x1
c000d34e:	0f b6 c0             	movzx  eax,al
c000d351:	85 c0                	test   eax,eax
c000d353:	74 20                	je     c000d375 <sendKeyboardToken(KeyboardToken)+0x286>
c000d355:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d35a:	6a 01                	push   0x1
c000d35c:	6a 00                	push   0x0
c000d35e:	68 38 cf 00 c0       	push   0xc000cf38
c000d363:	50                   	push   eax
c000d364:	e8 c3 87 00 00       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d373:	eb 3a                	jmp    c000d3af <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d378:	0f b7 c0             	movzx  eax,ax
c000d37b:	3d 01 02 00 00       	cmp    eax,0x201
c000d380:	75 2d                	jne    c000d3af <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d382:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d387:	83 f0 01             	xor    eax,0x1
c000d38a:	0f b6 c0             	movzx  eax,al
c000d38d:	85 c0                	test   eax,eax
c000d38f:	74 1e                	je     c000d3af <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d391:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d396:	6a 01                	push   0x1
c000d398:	6a 00                	push   0x0
c000d39a:	68 a6 cf 00 c0       	push   0xc000cfa6
c000d39f:	50                   	push   eax
c000d3a0:	e8 87 87 00 00       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c000d3a5:	83 c4 10             	add    esp,0x10
c000d3a8:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b2:	0f b7 c0             	movzx  eax,ax
c000d3b5:	3d 25 03 00 00       	cmp    eax,0x325
c000d3ba:	75 06                	jne    c000d3c2 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3bc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c5:	0f b7 c0             	movzx  eax,ax
c000d3c8:	3d 24 03 00 00       	cmp    eax,0x324
c000d3cd:	75 06                	jne    c000d3d5 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3cf:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d8:	0f b7 c0             	movzx  eax,ax
c000d3db:	3d 23 03 00 00       	cmp    eax,0x323
c000d3e0:	75 06                	jne    c000d3e8 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3e2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3eb:	0f b7 c0             	movzx  eax,ax
c000d3ee:	3d 26 03 00 00       	cmp    eax,0x326
c000d3f3:	75 06                	jne    c000d3fb <sendKeyboardToken(KeyboardToken)+0x30c>
c000d3f5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fe:	0f b7 c0             	movzx  eax,ax
c000d401:	3d 27 03 00 00       	cmp    eax,0x327
c000d406:	75 06                	jne    c000d40e <sendKeyboardToken(KeyboardToken)+0x31f>
c000d408:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d40e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d411:	0f b7 c0             	movzx  eax,ax
c000d414:	3d 22 03 00 00       	cmp    eax,0x322
c000d419:	75 06                	jne    c000d421 <sendKeyboardToken(KeyboardToken)+0x332>
c000d41b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d421:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d425:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d428:	83 f0 01             	xor    eax,0x1
c000d42b:	0f b6 c0             	movzx  eax,al
c000d42e:	85 c0                	test   eax,eax
c000d430:	74 7c                	je     c000d4ae <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d432:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d437:	0f b6 c0             	movzx  eax,al
c000d43a:	85 c0                	test   eax,eax
c000d43c:	74 43                	je     c000d481 <sendKeyboardToken(KeyboardToken)+0x392>
c000d43e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d442:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d446:	85 c0                	test   eax,eax
c000d448:	74 2b                	je     c000d475 <sendKeyboardToken(KeyboardToken)+0x386>
c000d44a:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d450:	89 d0                	mov    eax,edx
c000d452:	c1 e0 02             	shl    eax,0x2
c000d455:	01 d0                	add    eax,edx
c000d457:	d1 e0                	shl    eax,1
c000d459:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d461:	0f b7 c0             	movzx  eax,ax
c000d464:	8d 50 d0             	lea    edx,[eax-0x30]
c000d467:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d46c:	01 d0                	add    eax,edx
c000d46e:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d473:	eb 71                	jmp    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d475:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d47f:	eb 65                	jmp    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d481:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d486:	85 c0                	test   eax,eax
c000d488:	74 18                	je     c000d4a2 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d48a:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d48f:	0f b6 c0             	movzx  eax,al
c000d492:	83 ec 0c             	sub    esp,0xc
c000d495:	50                   	push   eax
c000d496:	e8 79 fb ff ff       	call   c000d014 <sendKeyToTerminal(unsigned char)>
c000d49b:	83 c4 10             	add    esp,0x10
c000d49e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4a2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4ac:	eb 38                	jmp    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b1:	0f b7 c0             	movzx  eax,ax
c000d4b4:	3d 01 01 00 00       	cmp    eax,0x101
c000d4b9:	75 2b                	jne    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4bb:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4c0:	85 c0                	test   eax,eax
c000d4c2:	74 18                	je     c000d4dc <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4c4:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4c9:	0f b6 c0             	movzx  eax,al
c000d4cc:	83 ec 0c             	sub    esp,0xc
c000d4cf:	50                   	push   eax
c000d4d0:	e8 3f fb ff ff       	call   c000d014 <sendKeyToTerminal(unsigned char)>
c000d4d5:	83 c4 10             	add    esp,0x10
c000d4d8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4dc:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4e6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4e9:	83 f0 01             	xor    eax,0x1
c000d4ec:	0f b6 c0             	movzx  eax,al
c000d4ef:	85 c0                	test   eax,eax
c000d4f1:	74 5a                	je     c000d54d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4f3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4f6:	83 f0 01             	xor    eax,0x1
c000d4f9:	0f b6 c0             	movzx  eax,al
c000d4fc:	85 c0                	test   eax,eax
c000d4fe:	74 4d                	je     c000d54d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d500:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d505:	83 f0 01             	xor    eax,0x1
c000d508:	0f b6 c0             	movzx  eax,al
c000d50b:	85 c0                	test   eax,eax
c000d50d:	74 3e                	je     c000d54d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d512:	0f b7 c0             	movzx  eax,ax
c000d515:	83 f8 1f             	cmp    eax,0x1f
c000d518:	76 0b                	jbe    c000d525 <sendKeyboardToken(KeyboardToken)+0x436>
c000d51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51d:	0f b7 c0             	movzx  eax,ax
c000d520:	83 f8 7e             	cmp    eax,0x7e
c000d523:	76 16                	jbe    c000d53b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d528:	0f b7 c0             	movzx  eax,ax
c000d52b:	83 f8 0a             	cmp    eax,0xa
c000d52e:	74 0b                	je     c000d53b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d533:	0f b7 c0             	movzx  eax,ax
c000d536:	83 f8 08             	cmp    eax,0x8
c000d539:	75 12                	jne    c000d54d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b6 c0             	movzx  eax,al
c000d541:	83 ec 0c             	sub    esp,0xc
c000d544:	50                   	push   eax
c000d545:	e8 ca fa ff ff       	call   c000d014 <sendKeyToTerminal(unsigned char)>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d550:	83 f0 01             	xor    eax,0x1
c000d553:	0f b6 c0             	movzx  eax,al
c000d556:	85 c0                	test   eax,eax
c000d558:	74 5d                	je     c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d55a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d55d:	83 f0 01             	xor    eax,0x1
c000d560:	0f b6 c0             	movzx  eax,al
c000d563:	85 c0                	test   eax,eax
c000d565:	74 50                	je     c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d567:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d56c:	0f b6 c0             	movzx  eax,al
c000d56f:	85 c0                	test   eax,eax
c000d571:	74 44                	je     c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d576:	0f b7 c0             	movzx  eax,ax
c000d579:	83 f8 3f             	cmp    eax,0x3f
c000d57c:	76 39                	jbe    c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d57e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d581:	0f b7 c0             	movzx  eax,ax
c000d584:	83 f8 7f             	cmp    eax,0x7f
c000d587:	77 2e                	ja     c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58c:	88 c2                	mov    dl,al
c000d58e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d591:	0f b7 c0             	movzx  eax,ax
c000d594:	83 f8 5f             	cmp    eax,0x5f
c000d597:	76 04                	jbe    c000d59d <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d599:	b0 20                	mov    al,0x20
c000d59b:	eb 02                	jmp    c000d59f <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d59d:	b0 00                	mov    al,0x0
c000d59f:	89 d1                	mov    ecx,edx
c000d5a1:	29 c1                	sub    ecx,eax
c000d5a3:	89 c8                	mov    eax,ecx
c000d5a5:	83 e8 40             	sub    eax,0x40
c000d5a8:	0f b6 c0             	movzx  eax,al
c000d5ab:	83 ec 0c             	sub    esp,0xc
c000d5ae:	50                   	push   eax
c000d5af:	e8 60 fa ff ff       	call   c000d014 <sendKeyToTerminal(unsigned char)>
c000d5b4:	83 c4 10             	add    esp,0x10
c000d5b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ba:	0f b7 c0             	movzx  eax,ax
c000d5bd:	3d 00 03 00 00       	cmp    eax,0x300
c000d5c2:	75 12                	jne    c000d5d6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5c4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5c7:	83 f0 01             	xor    eax,0x1
c000d5ca:	0f b6 c0             	movzx  eax,al
c000d5cd:	85 c0                	test   eax,eax
c000d5cf:	74 05                	je     c000d5d6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5d1:	e8 43 af ff ff       	call   c0008519 <doTerminalCycle()>
c000d5d6:	90                   	nop
c000d5d7:	c9                   	leave  
c000d5d8:	c3                   	ret    

c000d5d9 <clearInternalKeybuffer(VgaText*)>:
c000d5d9:	55                   	push   ebp
c000d5da:	89 e5                	mov    ebp,esp
c000d5dc:	83 ec 08             	sub    esp,0x8
c000d5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e2:	05 02 01 00 00       	add    eax,0x102
c000d5e7:	83 ec 0c             	sub    esp,0xc
c000d5ea:	50                   	push   eax
c000d5eb:	e8 90 2f ff ff       	call   c0000580 <strlen>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5f6:	81 c2 02 01 00 00    	add    edx,0x102
c000d5fc:	83 ec 04             	sub    esp,0x4
c000d5ff:	50                   	push   eax
c000d600:	6a 00                	push   0x0
c000d602:	52                   	push   edx
c000d603:	e8 e8 2e ff ff       	call   c00004f0 <memset>
c000d608:	83 c4 10             	add    esp,0x10
c000d60b:	90                   	nop
c000d60c:	c9                   	leave  
c000d60d:	c3                   	ret    

c000d60e <readKeyboard(VgaText*, char*, unsigned long)>:
c000d60e:	55                   	push   ebp
c000d60f:	89 e5                	mov    ebp,esp
c000d611:	83 ec 18             	sub    esp,0x18
c000d614:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d619:	85 c0                	test   eax,eax
c000d61b:	74 2a                	je     c000d647 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d61d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d623:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d629:	83 ec 04             	sub    esp,0x4
c000d62c:	68 40 84 02 c0       	push   0xc0028440
c000d631:	83 ec 08             	sub    esp,0x8
c000d634:	89 e0                	mov    eax,esp
c000d636:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d639:	89 08                	mov    DWORD PTR [eax],ecx
c000d63b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d63e:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d642:	ff d2                	call   edx
c000d644:	83 c4 10             	add    esp,0x10
c000d647:	fb                   	sti    
c000d648:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d64f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d653:	0f 84 0d 01 00 00    	je     c000d766 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d662:	0f be c0             	movsx  eax,al
c000d665:	85 c0                	test   eax,eax
c000d667:	75 2c                	jne    c000d695 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d669:	fa                   	cli    
c000d66a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d66f:	83 c0 01             	add    eax,0x1
c000d672:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d677:	e8 fc 86 00 00       	call   c0015d78 <schedule()>
c000d67c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d681:	83 e8 01             	sub    eax,0x1
c000d684:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d689:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d68e:	85 c0                	test   eax,eax
c000d690:	75 c7                	jne    c000d659 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d692:	fb                   	sti    
c000d693:	eb c4                	jmp    c000d659 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d695:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d698:	8d 50 01             	lea    edx,[eax+0x1]
c000d69b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d69e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6a1:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6a7:	88 10                	mov    BYTE PTR [eax],dl
c000d6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ac:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6b2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6b5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6b9:	83 f8 03             	cmp    eax,0x3
c000d6bc:	75 1e                	jne    c000d6dc <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6c8:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6ce:	83 ec 08             	sub    esp,0x8
c000d6d1:	6a 02                	push   0x2
c000d6d3:	50                   	push   eax
c000d6d4:	e8 8e 40 00 00       	call   c0011767 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6d9:	83 c4 10             	add    esp,0x10
c000d6dc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6e0:	83 f8 1c             	cmp    eax,0x1c
c000d6e3:	75 1e                	jne    c000d703 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6ef:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6f5:	83 ec 08             	sub    esp,0x8
c000d6f8:	6a 09                	push   0x9
c000d6fa:	50                   	push   eax
c000d6fb:	e8 67 40 00 00       	call   c0011767 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d700:	83 c4 10             	add    esp,0x10
c000d703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d706:	05 02 01 00 00       	add    eax,0x102
c000d70b:	83 ec 0c             	sub    esp,0xc
c000d70e:	50                   	push   eax
c000d70f:	e8 6c 2e ff ff       	call   c0000580 <strlen>
c000d714:	83 c4 10             	add    esp,0x10
c000d717:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d71a:	81 c2 02 01 00 00    	add    edx,0x102
c000d720:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d723:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d726:	81 c2 02 01 00 00    	add    edx,0x102
c000d72c:	83 ec 04             	sub    esp,0x4
c000d72f:	50                   	push   eax
c000d730:	51                   	push   ecx
c000d731:	52                   	push   edx
c000d732:	e8 99 2c ff ff       	call   c00003d0 <memmove>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d73e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d742:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d746:	83 f8 0a             	cmp    eax,0xa
c000d749:	74 16                	je     c000d761 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d74b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d74f:	83 f8 03             	cmp    eax,0x3
c000d752:	74 0d                	je     c000d761 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d754:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d758:	83 f8 1c             	cmp    eax,0x1c
c000d75b:	0f 85 ee fe ff ff    	jne    c000d64f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d764:	eb 03                	jmp    c000d769 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d766:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d769:	c9                   	leave  
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <Keyboard::Keyboard(char const*)>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d773:	83 ec 08             	sub    esp,0x8
c000d776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77a:	50                   	push   eax
c000d77b:	e8 44 f1 ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c000d788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78c:	89 10                	mov    DWORD PTR [eax],edx
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d79c:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7a3:	90                   	nop
c000d7a4:	83 c4 0c             	add    esp,0xc
c000d7a7:	c3                   	ret    

c000d7a8 <Keyboard::~Keyboard()>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c000d7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b4:	89 10                	mov    DWORD PTR [eax],edx
c000d7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ba:	83 ec 0c             	sub    esp,0xc
c000d7bd:	50                   	push   eax
c000d7be:	e8 6b ee ff ff       	call   c000c62e <Device::~Device()>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	90                   	nop
c000d7c7:	83 c4 0c             	add    esp,0xc
c000d7ca:	c3                   	ret    
c000d7cb:	90                   	nop

c000d7cc <Keyboard::~Keyboard()>:
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d6:	e8 cd ff ff ff       	call   c000d7a8 <Keyboard::~Keyboard()>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	83 ec 08             	sub    esp,0x8
c000d7e1:	68 5c 01 00 00       	push   0x15c
c000d7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ea:	e8 1d d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	83 c4 0c             	add    esp,0xc
c000d7f5:	c3                   	ret    

c000d7f6 <LogicalDisk::close(int, int, void*)>:
c000d7f6:	83 c8 ff             	or     eax,0xffffffff
c000d7f9:	c3                   	ret    

c000d7fa <LogicalDisk::~LogicalDisk()>:
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000d802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d806:	89 10                	mov    DWORD PTR [eax],edx
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	83 ec 0c             	sub    esp,0xc
c000d80f:	50                   	push   eax
c000d810:	e8 19 ee ff ff       	call   c000c62e <Device::~Device()>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	90                   	nop
c000d819:	83 c4 0c             	add    esp,0xc
c000d81c:	c3                   	ret    
c000d81d:	90                   	nop

c000d81e <LogicalDisk::~LogicalDisk()>:
c000d81e:	83 ec 0c             	sub    esp,0xc
c000d821:	83 ec 0c             	sub    esp,0xc
c000d824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d828:	e8 cd ff ff ff       	call   c000d7fa <LogicalDisk::~LogicalDisk()>
c000d82d:	83 c4 10             	add    esp,0x10
c000d830:	83 ec 08             	sub    esp,0x8
c000d833:	68 78 01 00 00       	push   0x178
c000d838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d83c:	e8 cb cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d841:	83 c4 10             	add    esp,0x10
c000d844:	83 c4 0c             	add    esp,0xc
c000d847:	c3                   	ret    

c000d848 <LogicalDisk::open(int, int, void*)>:
c000d848:	83 ec 18             	sub    esp,0x18
c000d84b:	68 48 19 02 c0       	push   0xc0021948
c000d850:	e8 74 3a 00 00       	call   c00112c9 <KePanic(char const*)>
c000d855:	83 c8 ff             	or     eax,0xffffffff
c000d858:	83 c4 1c             	add    esp,0x1c
c000d85b:	c3                   	ret    

c000d85c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d85c:	53                   	push   ebx
c000d85d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d865:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d869:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d86f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d875:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d87b:	77 10                	ja     c000d88d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d87d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d883:	89 d3                	mov    ebx,edx
c000d885:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d88b:	72 05                	jb     c000d892 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d88d:	83 c8 ff             	or     eax,0xffffffff
c000d890:	89 c2                	mov    edx,eax
c000d892:	5b                   	pop    ebx
c000d893:	c3                   	ret    

c000d894 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d894:	56                   	push   esi
c000d895:	83 c8 ff             	or     eax,0xffffffff
c000d898:	53                   	push   ebx
c000d899:	89 c2                	mov    edx,eax
c000d89b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d89f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8a7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8ad:	77 27                	ja     c000d8d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8af:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8b5:	89 d8                	mov    eax,ebx
c000d8b7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8c2:	89 c2                	mov    edx,eax
c000d8c4:	73 10                	jae    c000d8d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8c6:	89 c8                	mov    eax,ecx
c000d8c8:	89 da                	mov    edx,ebx
c000d8ca:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8d0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8d6:	5b                   	pop    ebx
c000d8d7:	5e                   	pop    esi
c000d8d8:	c3                   	ret    
c000d8d9:	90                   	nop

c000d8da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8da:	83 ec 1c             	sub    esp,0x1c
c000d8dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d8f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d900:	83 ec 08             	sub    esp,0x8
c000d903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d907:	50                   	push   eax
c000d908:	e8 b7 ef ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000d90d:	83 c4 10             	add    esp,0x10
c000d910:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000d915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d919:	89 10                	mov    DWORD PTR [eax],edx
c000d91b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d935:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d940:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d94a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d94e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d952:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d956:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d95c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d962:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d966:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d969:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d96d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d973:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d981:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d995:	90                   	nop
c000d996:	83 c4 1c             	add    esp,0x1c
c000d999:	c3                   	ret    

c000d99a <LogicalDisk::assignDriveLetter()>:
c000d99a:	55                   	push   ebp
c000d99b:	57                   	push   edi
c000d99c:	56                   	push   esi
c000d99d:	53                   	push   ebx
c000d99e:	83 ec 14             	sub    esp,0x14
c000d9a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9a5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9ab:	b0 41                	mov    al,0x41
c000d9ad:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9b3:	84 d2                	test   dl,dl
c000d9b5:	75 02                	jne    c000d9b9 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9b7:	b0 43                	mov    al,0x43
c000d9b9:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9bf:	0f b6 ca             	movzx  ecx,dl
c000d9c2:	0f be e8             	movsx  ebp,al
c000d9c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9c9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9cd:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9d3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9d7:	3c 43                	cmp    al,0x43
c000d9d9:	75 10                	jne    c000d9eb <LogicalDisk::assignDriveLetter()+0x51>
c000d9db:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9e2:	75 5a                	jne    c000da3e <LogicalDisk::assignDriveLetter()+0xa4>
c000d9e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9e9:	75 53                	jne    c000da3e <LogicalDisk::assignDriveLetter()+0xa4>
c000d9eb:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d9ee:	ba 01 00 00 00       	mov    edx,0x1
c000d9f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9f6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d9f9:	d3 e2                	shl    edx,cl
c000d9fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d9ff:	89 d7                	mov    edi,edx
c000da01:	89 d6                	mov    esi,edx
c000da03:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da07:	c1 ff 1f             	sar    edi,0x1f
c000da0a:	21 f9                	and    ecx,edi
c000da0c:	09 d1                	or     ecx,edx
c000da0e:	75 2e                	jne    c000da3e <LogicalDisk::assignDriveLetter()+0xa4>
c000da10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da14:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da18:	09 f2                	or     edx,esi
c000da1a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da1d:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da27:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da2d:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da34:	09 fa                	or     edx,edi
c000da36:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da3c:	eb 0d                	jmp    c000da4b <LogicalDisk::assignDriveLetter()+0xb1>
c000da3e:	8d 50 01             	lea    edx,[eax+0x1]
c000da41:	45                   	inc    ebp
c000da42:	80 fa 5b             	cmp    dl,0x5b
c000da45:	88 d0                	mov    al,dl
c000da47:	75 8e                	jne    c000d9d7 <LogicalDisk::assignDriveLetter()+0x3d>
c000da49:	31 c0                	xor    eax,eax
c000da4b:	83 c4 14             	add    esp,0x14
c000da4e:	5b                   	pop    ebx
c000da4f:	5e                   	pop    esi
c000da50:	5f                   	pop    edi
c000da51:	5d                   	pop    ebp
c000da52:	c3                   	ret    
c000da53:	90                   	nop

c000da54 <LogicalDisk::mount()>:
c000da54:	56                   	push   esi
c000da55:	53                   	push   ebx
c000da56:	53                   	push   ebx
c000da57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da5b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da61:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da6b:	85 db                	test   ebx,ebx
c000da6d:	74 27                	je     c000da96 <LogicalDisk::mount()+0x42>
c000da6f:	51                   	push   ecx
c000da70:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da77:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da79:	83 e8 41             	sub    eax,0x41
c000da7c:	50                   	push   eax
c000da7d:	56                   	push   esi
c000da7e:	53                   	push   ebx
c000da7f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da82:	83 c4 10             	add    esp,0x10
c000da85:	84 c0                	test   al,al
c000da87:	74 08                	je     c000da91 <LogicalDisk::mount()+0x3d>
c000da89:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da8f:	eb 07                	jmp    c000da98 <LogicalDisk::mount()+0x44>
c000da91:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da94:	eb d5                	jmp    c000da6b <LogicalDisk::mount()+0x17>
c000da96:	31 c0                	xor    eax,eax
c000da98:	5a                   	pop    edx
c000da99:	5b                   	pop    ebx
c000da9a:	5e                   	pop    esi
c000da9b:	c3                   	ret    

c000da9c <LogicalDisk::unmount()>:
c000da9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000daaa:	c3                   	ret    
c000daab:	90                   	nop

c000daac <LogicalDisk::eject()>:
c000daac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dab6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dab8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dabc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dabf:	90                   	nop

c000dac0 <LogicalDisk::unassignDriveLetter()>:
c000dac0:	57                   	push   edi
c000dac1:	56                   	push   esi
c000dac2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dac6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dacd:	85 c9                	test   ecx,ecx
c000dacf:	75 0f                	jne    c000dae0 <LogicalDisk::unassignDriveLetter()+0x20>
c000dad1:	c7 44 24 0c 6c 19 02 c0 	mov    DWORD PTR [esp+0xc],0xc002196c
c000dad9:	5e                   	pop    esi
c000dada:	5f                   	pop    edi
c000dadb:	e9 e9 37 00 00       	jmp    c00112c9 <KePanic(char const*)>
c000dae0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dae7:	83 e9 41             	sub    ecx,0x41
c000daea:	b8 01 00 00 00       	mov    eax,0x1
c000daef:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000dafa:	d3 e0                	shl    eax,cl
c000dafc:	89 c7                	mov    edi,eax
c000dafe:	f7 d0                	not    eax
c000db00:	c1 ff 1f             	sar    edi,0x1f
c000db03:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db09:	89 fe                	mov    esi,edi
c000db0b:	f7 d6                	not    esi
c000db0d:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db13:	5e                   	pop    esi
c000db14:	5f                   	pop    edi
c000db15:	c3                   	ret    

c000db16 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db16:	57                   	push   edi
c000db17:	56                   	push   esi
c000db18:	53                   	push   ebx
c000db19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db21:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db2f:	77 41                	ja     c000db72 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db31:	99                   	cdq    
c000db32:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db38:	01 c8                	add    eax,ecx
c000db3a:	11 da                	adc    edx,ebx
c000db3c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db42:	19 d7                	sbb    edi,edx
c000db44:	72 33                	jb     c000db79 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db46:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db4c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db52:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db56:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db5a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db6a:	5b                   	pop    ebx
c000db6b:	5e                   	pop    esi
c000db6c:	5f                   	pop    edi
c000db6d:	e9 d4 0a 00 00       	jmp    c000e646 <VCache::read(unsigned long long, int, void*)>
c000db72:	b8 05 00 00 00       	mov    eax,0x5
c000db77:	eb 05                	jmp    c000db7e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db79:	b8 07 00 00 00       	mov    eax,0x7
c000db7e:	5b                   	pop    ebx
c000db7f:	5e                   	pop    esi
c000db80:	5f                   	pop    edi
c000db81:	c3                   	ret    

c000db82 <LogicalDisk::write(unsigned long long, int, void*)>:
c000db82:	57                   	push   edi
c000db83:	56                   	push   esi
c000db84:	53                   	push   ebx
c000db85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db9b:	77 41                	ja     c000dbde <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db9d:	99                   	cdq    
c000db9e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dba4:	01 c8                	add    eax,ecx
c000dba6:	11 da                	adc    edx,ebx
c000dba8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbae:	19 d7                	sbb    edi,edx
c000dbb0:	72 33                	jb     c000dbe5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbb2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbb8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbbe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbc2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbc6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbcc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd6:	5b                   	pop    ebx
c000dbd7:	5e                   	pop    esi
c000dbd8:	5f                   	pop    edi
c000dbd9:	e9 6e 09 00 00       	jmp    c000e54c <VCache::write(unsigned long long, int, void*)>
c000dbde:	b8 05 00 00 00       	mov    eax,0x5
c000dbe3:	eb 05                	jmp    c000dbea <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbe5:	b8 07 00 00 00       	mov    eax,0x7
c000dbea:	5b                   	pop    ebx
c000dbeb:	5e                   	pop    esi
c000dbec:	5f                   	pop    edi
c000dbed:	c3                   	ret    
c000dbee:	66 90                	xchg   ax,ax

c000dbf0 <Mouse::Mouse(char const*)>:
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf7:	83 ec 08             	sub    esp,0x8
c000dbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbfe:	50                   	push   eax
c000dbff:	e8 c0 ec ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000dc04:	83 c4 10             	add    esp,0x10
c000dc07:	ba c0 19 02 c0       	mov    edx,0xc00219c0
c000dc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc10:	89 10                	mov    DWORD PTR [eax],edx
c000dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc16:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc20:	90                   	nop
c000dc21:	83 c4 0c             	add    esp,0xc
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop
c000dc26:	66 90                	xchg   ax,ax

c000dc28 <Mouse::~Mouse()>:
c000dc28:	83 ec 0c             	sub    esp,0xc
c000dc2b:	ba c0 19 02 c0       	mov    edx,0xc00219c0
c000dc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc34:	89 10                	mov    DWORD PTR [eax],edx
c000dc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3a:	83 ec 0c             	sub    esp,0xc
c000dc3d:	50                   	push   eax
c000dc3e:	e8 eb e9 ff ff       	call   c000c62e <Device::~Device()>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	90                   	nop
c000dc47:	83 c4 0c             	add    esp,0xc
c000dc4a:	c3                   	ret    
c000dc4b:	90                   	nop

c000dc4c <Mouse::~Mouse()>:
c000dc4c:	83 ec 0c             	sub    esp,0xc
c000dc4f:	83 ec 0c             	sub    esp,0xc
c000dc52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc56:	e8 cd ff ff ff       	call   c000dc28 <Mouse::~Mouse()>
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	83 ec 08             	sub    esp,0x8
c000dc61:	68 58 01 00 00       	push   0x158
c000dc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6a:	e8 9d cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	83 c4 0c             	add    esp,0xc
c000dc75:	c3                   	ret    

c000dc76 <NIC::getMAC()>:
c000dc76:	31 c0                	xor    eax,eax
c000dc78:	31 d2                	xor    edx,edx
c000dc7a:	c3                   	ret    
c000dc7b:	90                   	nop

c000dc7c <NIC::write(int, unsigned char*, int*)>:
c000dc7c:	b8 01 00 00 00       	mov    eax,0x1
c000dc81:	c3                   	ret    

c000dc82 <NIC::NIC(char const*)>:
c000dc82:	83 ec 0c             	sub    esp,0xc
c000dc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc89:	83 ec 08             	sub    esp,0x8
c000dc8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc90:	50                   	push   eax
c000dc91:	e8 2e ec ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	ba ec 19 02 c0       	mov    edx,0xc00219ec
c000dc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca2:	89 10                	mov    DWORD PTR [eax],edx
c000dca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcb2:	90                   	nop
c000dcb3:	83 c4 0c             	add    esp,0xc
c000dcb6:	c3                   	ret    
c000dcb7:	90                   	nop

c000dcb8 <NIC::~NIC()>:
c000dcb8:	83 ec 0c             	sub    esp,0xc
c000dcbb:	ba ec 19 02 c0       	mov    edx,0xc00219ec
c000dcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc4:	89 10                	mov    DWORD PTR [eax],edx
c000dcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcca:	83 ec 0c             	sub    esp,0xc
c000dccd:	50                   	push   eax
c000dcce:	e8 5b e9 ff ff       	call   c000c62e <Device::~Device()>
c000dcd3:	83 c4 10             	add    esp,0x10
c000dcd6:	90                   	nop
c000dcd7:	83 c4 0c             	add    esp,0xc
c000dcda:	c3                   	ret    
c000dcdb:	90                   	nop

c000dcdc <NIC::~NIC()>:
c000dcdc:	83 ec 0c             	sub    esp,0xc
c000dcdf:	83 ec 0c             	sub    esp,0xc
c000dce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce6:	e8 cd ff ff ff       	call   c000dcb8 <NIC::~NIC()>
c000dceb:	83 c4 10             	add    esp,0x10
c000dcee:	83 ec 08             	sub    esp,0x8
c000dcf1:	68 58 01 00 00       	push   0x158
c000dcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcfa:	e8 0d cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dcff:	83 c4 10             	add    esp,0x10
c000dd02:	83 c4 0c             	add    esp,0xc
c000dd05:	c3                   	ret    

c000dd06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd06:	55                   	push   ebp
c000dd07:	57                   	push   edi
c000dd08:	56                   	push   esi
c000dd09:	53                   	push   ebx
c000dd0a:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd10:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dd17:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dd1e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dd25:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dd2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd34:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd3b:	e8 80 ec ff ff       	call   c000c9c0 <Device::getName()>
c000dd40:	5a                   	pop    edx
c000dd41:	59                   	pop    ecx
c000dd42:	50                   	push   eax
c000dd43:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd47:	55                   	push   ebp
c000dd48:	e8 03 29 ff ff       	call   c0000650 <strcpy>
c000dd4d:	5b                   	pop    ebx
c000dd4e:	58                   	pop    eax
c000dd4f:	68 18 1a 02 c0       	push   0xc0021a18
c000dd54:	55                   	push   ebp
c000dd55:	e8 16 2b ff ff       	call   c0000870 <strcat>
c000dd5a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd61:	e8 6d 9d ff ff       	call   c0007ad3 <malloc>
c000dd66:	83 c4 0c             	add    esp,0xc
c000dd69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd71:	89 c3                	mov    ebx,eax
c000dd73:	57                   	push   edi
c000dd74:	56                   	push   esi
c000dd75:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd7c:	55                   	push   ebp
c000dd7d:	50                   	push   eax
c000dd7e:	e8 57 fb ff ff       	call   c000d8da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd83:	83 c4 14             	add    esp,0x14
c000dd86:	53                   	push   ebx
c000dd87:	e8 0e fc ff ff       	call   c000d99a <LogicalDisk::assignDriveLetter()>
c000dd8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd8f:	e8 c0 fc ff ff       	call   c000da54 <LogicalDisk::mount()>
c000dd94:	58                   	pop    eax
c000dd95:	5a                   	pop    edx
c000dd96:	53                   	push   ebx
c000dd97:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd9e:	e8 89 e9 ff ff       	call   c000c72c <Device::addChild(Device*)>
c000dda3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dda9:	5b                   	pop    ebx
c000ddaa:	5e                   	pop    esi
c000ddab:	5f                   	pop    edi
c000ddac:	5d                   	pop    ebp
c000ddad:	c3                   	ret    

c000ddae <createPartitionsForDisk(PhysicalDisk*)>:
c000ddae:	55                   	push   ebp
c000ddaf:	57                   	push   edi
c000ddb0:	56                   	push   esi
c000ddb1:	53                   	push   ebx
c000ddb2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddb8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddbf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ddc5:	3d 00 02 00 00       	cmp    eax,0x200
c000ddca:	74 27                	je     c000ddf3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ddcc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddd2:	83 ec 10             	sub    esp,0x10
c000ddd5:	99                   	cdq    
c000ddd6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dddc:	52                   	push   edx
c000dddd:	50                   	push   eax
c000ddde:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dde2:	c1 e6 0a             	shl    esi,0xa
c000dde5:	89 fd                	mov    ebp,edi
c000dde7:	55                   	push   ebp
c000dde8:	56                   	push   esi
c000dde9:	e8 42 16 01 00       	call   c001f430 <__udivdi3>
c000ddee:	e9 b9 00 00 00       	jmp    c000deac <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddf3:	83 ec 0c             	sub    esp,0xc
c000ddf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddf8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ddfc:	56                   	push   esi
c000ddfd:	6a 01                	push   0x1
c000ddff:	6a 00                	push   0x0
c000de01:	6a 00                	push   0x0
c000de03:	53                   	push   ebx
c000de04:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de12:	75 0a                	jne    c000de1e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de14:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de1c:	74 2c                	je     c000de4a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de24:	83 ec 10             	sub    esp,0x10
c000de27:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de2d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de33:	89 f7                	mov    edi,esi
c000de35:	c1 ff 1f             	sar    edi,0x1f
c000de38:	57                   	push   edi
c000de39:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de3d:	56                   	push   esi
c000de3e:	c1 e0 0a             	shl    eax,0xa
c000de41:	52                   	push   edx
c000de42:	50                   	push   eax
c000de43:	e8 e8 15 01 00       	call   c001f430 <__udivdi3>
c000de48:	eb 62                	jmp    c000deac <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de4a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de51:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de5f:	89 cf                	mov    edi,ecx
c000de61:	83 e2 7f             	and    edx,0x7f
c000de64:	83 e7 7f             	and    edi,0x7f
c000de67:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de6a:	83 e0 7f             	and    eax,0x7f
c000de6d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de70:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de77:	83 e0 7f             	and    eax,0x7f
c000de7a:	01 d0                	add    eax,edx
c000de7c:	84 c0                	test   al,al
c000de7e:	89 c5                	mov    ebp,eax
c000de80:	74 41                	je     c000dec3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de88:	83 ec 10             	sub    esp,0x10
c000de8b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de91:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de97:	89 f7                	mov    edi,esi
c000de99:	c1 ff 1f             	sar    edi,0x1f
c000de9c:	57                   	push   edi
c000de9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dea1:	56                   	push   esi
c000dea2:	c1 e0 0a             	shl    eax,0xa
c000dea5:	52                   	push   edx
c000dea6:	50                   	push   eax
c000dea7:	e8 84 15 01 00       	call   c001f430 <__udivdi3>
c000deac:	83 c4 14             	add    esp,0x14
c000deaf:	52                   	push   edx
c000deb0:	50                   	push   eax
c000deb1:	6a 00                	push   0x0
c000deb3:	6a 00                	push   0x0
c000deb5:	53                   	push   ebx
c000deb6:	e8 4b fe ff ff       	call   c000dd06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000debb:	83 c4 20             	add    esp,0x20
c000debe:	e9 73 01 00 00       	jmp    c000e036 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dec3:	89 f0                	mov    eax,esi
c000dec5:	31 c9                	xor    ecx,ecx
c000dec7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dece:	75 02                	jne    c000ded2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ded0:	89 cd                	mov    ebp,ecx
c000ded2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000deda:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dee1:	83 c0 10             	add    eax,0x10
c000dee4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000deec:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000def3:	c1 e2 08             	shl    edx,0x8
c000def6:	c1 e6 10             	shl    esi,0x10
c000def9:	09 f2                	or     edx,esi
c000defb:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000df02:	09 f2                	or     edx,esi
c000df04:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df0b:	c1 e6 18             	shl    esi,0x18
c000df0e:	09 f2                	or     edx,esi
c000df10:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df17:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df1b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df22:	c1 e6 10             	shl    esi,0x10
c000df25:	c1 e2 08             	shl    edx,0x8
c000df28:	09 f2                	or     edx,esi
c000df2a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df31:	09 f2                	or     edx,esi
c000df33:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df3a:	c1 e6 18             	shl    esi,0x18
c000df3d:	09 f2                	or     edx,esi
c000df3f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df43:	41                   	inc    ecx
c000df44:	83 f9 04             	cmp    ecx,0x4
c000df47:	0f 85 7a ff ff ff    	jne    c000dec7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df51:	83 f0 01             	xor    eax,0x1
c000df54:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df58:	75 4f                	jne    c000dfa9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df5e:	83 f0 01             	xor    eax,0x1
c000df61:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df65:	75 42                	jne    c000dfa9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df67:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df75:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df83:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df89:	89 f7                	mov    edi,esi
c000df8b:	c1 ff 1f             	sar    edi,0x1f
c000df8e:	57                   	push   edi
c000df8f:	56                   	push   esi
c000df90:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df94:	52                   	push   edx
c000df95:	c1 e0 0a             	shl    eax,0xa
c000df98:	50                   	push   eax
c000df99:	e8 92 14 01 00       	call   c001f430 <__udivdi3>
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfa5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfa9:	89 e8                	mov    eax,ebp
c000dfab:	0f b6 e8             	movzx  ebp,al
c000dfae:	85 ed                	test   ebp,ebp
c000dfb0:	74 50                	je     c000e002 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfbe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfc6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfe2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dfe6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfea:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dfee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dff2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dff6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dffa:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dffe:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e002:	31 ed                	xor    ebp,ebp
c000e004:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e008:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e00c:	89 f8                	mov    eax,edi
c000e00e:	09 f0                	or     eax,esi
c000e010:	74 1e                	je     c000e030 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e012:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e016:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e01a:	89 d1                	mov    ecx,edx
c000e01c:	09 c1                	or     ecx,eax
c000e01e:	74 10                	je     c000e030 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e020:	83 ec 0c             	sub    esp,0xc
c000e023:	57                   	push   edi
c000e024:	56                   	push   esi
c000e025:	52                   	push   edx
c000e026:	50                   	push   eax
c000e027:	53                   	push   ebx
c000e028:	e8 d9 fc ff ff       	call   c000dd06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e02d:	83 c4 20             	add    esp,0x20
c000e030:	45                   	inc    ebp
c000e031:	83 fd 04             	cmp    ebp,0x4
c000e034:	75 ce                	jne    c000e004 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e036:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e03c:	5b                   	pop    ebx
c000e03d:	5e                   	pop    esi
c000e03e:	5f                   	pop    edi
c000e03f:	5d                   	pop    ebp
c000e040:	c3                   	ret    
c000e041:	66 90                	xchg   ax,ax
c000e043:	90                   	nop

c000e044 <Serial::Serial(char const*)>:
c000e044:	83 ec 0c             	sub    esp,0xc
c000e047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04b:	83 ec 08             	sub    esp,0x8
c000e04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e052:	50                   	push   eax
c000e053:	e8 6c e8 ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000e058:	83 c4 10             	add    esp,0x10
c000e05b:	ba 2c 1a 02 c0       	mov    edx,0xc0021a2c
c000e060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e064:	89 10                	mov    DWORD PTR [eax],edx
c000e066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e074:	90                   	nop
c000e075:	83 c4 0c             	add    esp,0xc
c000e078:	c3                   	ret    
c000e079:	90                   	nop
c000e07a:	66 90                	xchg   ax,ax

c000e07c <Serial::~Serial()>:
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	ba 2c 1a 02 c0       	mov    edx,0xc0021a2c
c000e084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e088:	89 10                	mov    DWORD PTR [eax],edx
c000e08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08e:	83 ec 0c             	sub    esp,0xc
c000e091:	50                   	push   eax
c000e092:	e8 97 e5 ff ff       	call   c000c62e <Device::~Device()>
c000e097:	83 c4 10             	add    esp,0x10
c000e09a:	90                   	nop
c000e09b:	83 c4 0c             	add    esp,0xc
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <Serial::~Serial()>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0aa:	e8 cd ff ff ff       	call   c000e07c <Serial::~Serial()>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	83 ec 08             	sub    esp,0x8
c000e0b5:	68 58 01 00 00       	push   0x158
c000e0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0be:	e8 49 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 c4 0c             	add    esp,0xc
c000e0c9:	c3                   	ret    
c000e0ca:	66 90                	xchg   ax,ax

c000e0cc <Timer::Timer(char const*)>:
c000e0cc:	83 ec 0c             	sub    esp,0xc
c000e0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d3:	83 ec 08             	sub    esp,0x8
c000e0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0da:	50                   	push   eax
c000e0db:	e8 e4 e7 ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	ba 70 1a 02 c0       	mov    edx,0xc0021a70
c000e0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ec:	89 10                	mov    DWORD PTR [eax],edx
c000e0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e0fc:	90                   	nop
c000e0fd:	83 c4 0c             	add    esp,0xc
c000e100:	c3                   	ret    
c000e101:	90                   	nop
c000e102:	66 90                	xchg   ax,ax

c000e104 <Timer::~Timer()>:
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	ba 70 1a 02 c0       	mov    edx,0xc0021a70
c000e10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e110:	89 10                	mov    DWORD PTR [eax],edx
c000e112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e116:	83 ec 0c             	sub    esp,0xc
c000e119:	50                   	push   eax
c000e11a:	e8 0f e5 ff ff       	call   c000c62e <Device::~Device()>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	90                   	nop
c000e123:	83 c4 0c             	add    esp,0xc
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <Timer::~Timer()>:
c000e128:	83 ec 0c             	sub    esp,0xc
c000e12b:	83 ec 0c             	sub    esp,0xc
c000e12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e132:	e8 cd ff ff ff       	call   c000e104 <Timer::~Timer()>
c000e137:	83 c4 10             	add    esp,0x10
c000e13a:	83 ec 08             	sub    esp,0x8
c000e13d:	68 5c 01 00 00       	push   0x15c
c000e142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e146:	e8 c1 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	83 c4 0c             	add    esp,0xc
c000e151:	c3                   	ret    

c000e152 <Timer::read()>:
c000e152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e156:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e15c:	c3                   	ret    

c000e15d <setupTimer(int)>:
c000e15d:	53                   	push   ebx
c000e15e:	83 ec 14             	sub    esp,0x14
c000e161:	68 5c 01 00 00       	push   0x15c
c000e166:	e8 68 99 ff ff       	call   c0007ad3 <malloc>
c000e16b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e16e:	89 c3                	mov    ebx,eax
c000e170:	e8 27 0b 01 00       	call   c001ec9c <PIT::PIT()>
c000e175:	58                   	pop    eax
c000e176:	5a                   	pop    edx
c000e177:	53                   	push   ebx
c000e178:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e17e:	e8 a9 e5 ff ff       	call   c000c72c <Device::addChild(Device*)>
c000e183:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e185:	6a 00                	push   0x0
c000e187:	6a 00                	push   0x0
c000e189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e18d:	53                   	push   ebx
c000e18e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e191:	83 c4 28             	add    esp,0x28
c000e194:	89 d8                	mov    eax,ebx
c000e196:	5b                   	pop    ebx
c000e197:	c3                   	ret    

c000e198 <timerHandler(unsigned int)>:
c000e198:	56                   	push   esi
c000e199:	53                   	push   ebx
c000e19a:	51                   	push   ecx
c000e19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e19f:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1a5:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1ac:	0f 84 4a 01 00 00    	je     c000e2fc <timerHandler(unsigned int)+0x164>
c000e1b2:	fa                   	cli    
c000e1b3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1b9:	83 ec 0c             	sub    esp,0xc
c000e1bc:	68 d8 96 02 c0       	push   0xc00296d8
c000e1c1:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1c7:	e8 34 18 01 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	84 c0                	test   al,al
c000e1d1:	0f 85 a1 00 00 00    	jne    c000e278 <timerHandler(unsigned int)+0xe0>
c000e1d7:	83 ec 0c             	sub    esp,0xc
c000e1da:	68 d8 96 02 c0       	push   0xc00296d8
c000e1df:	e8 38 18 01 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1e4:	83 c4 10             	add    esp,0x10
c000e1e7:	89 c6                	mov    esi,eax
c000e1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1ec:	83 ec 0c             	sub    esp,0xc
c000e1ef:	68 d8 96 02 c0       	push   0xc00296d8
c000e1f4:	e8 23 18 01 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1f9:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e200:	89 c3                	mov    ebx,eax
c000e202:	e8 1d 18 01 00       	call   c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e207:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e213:	77 23                	ja     c000e238 <timerHandler(unsigned int)+0xa0>
c000e215:	83 ec 0c             	sub    esp,0xc
c000e218:	53                   	push   ebx
c000e219:	e8 52 80 00 00       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c000e21e:	83 c4 10             	add    esp,0x10
c000e221:	39 de                	cmp    esi,ebx
c000e223:	75 27                	jne    c000e24c <timerHandler(unsigned int)+0xb4>
c000e225:	83 ec 0c             	sub    esp,0xc
c000e228:	68 d8 96 02 c0       	push   0xc00296d8
c000e22d:	e8 ea 17 01 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e232:	89 c6                	mov    esi,eax
c000e234:	eb 12                	jmp    c000e248 <timerHandler(unsigned int)+0xb0>
c000e236:	66 90                	xchg   ax,ax
c000e238:	52                   	push   edx
c000e239:	52                   	push   edx
c000e23a:	53                   	push   ebx
c000e23b:	68 d8 96 02 c0       	push   0xc00296d8
c000e240:	e8 9b 18 01 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e245:	8d 76 00             	lea    esi,[esi+0x0]
c000e248:	83 c4 10             	add    esp,0x10
c000e24b:	90                   	nop
c000e24c:	83 ec 0c             	sub    esp,0xc
c000e24f:	68 d8 96 02 c0       	push   0xc00296d8
c000e254:	e8 a7 17 01 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e259:	83 c4 10             	add    esp,0x10
c000e25c:	84 c0                	test   al,al
c000e25e:	75 18                	jne    c000e278 <timerHandler(unsigned int)+0xe0>
c000e260:	83 ec 0c             	sub    esp,0xc
c000e263:	68 d8 96 02 c0       	push   0xc00296d8
c000e268:	e8 af 17 01 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e26d:	83 c4 10             	add    esp,0x10
c000e270:	39 f0                	cmp    eax,esi
c000e272:	0f 85 74 ff ff ff    	jne    c000e1ec <timerHandler(unsigned int)+0x54>
c000e278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e27d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e281:	74 41                	je     c000e2c4 <timerHandler(unsigned int)+0x12c>
c000e283:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e28a:	74 38                	je     c000e2c4 <timerHandler(unsigned int)+0x12c>
c000e28c:	fa                   	cli    
c000e28d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e293:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e298:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e29e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2a7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2aa:	72 08                	jb     c000e2b4 <timerHandler(unsigned int)+0x11c>
c000e2ac:	e8 c7 7a 00 00       	call   c0015d78 <schedule()>
c000e2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2b9:	48                   	dec    eax
c000e2ba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2bf:	75 03                	jne    c000e2c4 <timerHandler(unsigned int)+0x12c>
c000e2c1:	fb                   	sti    
c000e2c2:	66 90                	xchg   ax,ax
c000e2c4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2c9:	48                   	dec    eax
c000e2ca:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2cf:	75 1b                	jne    c000e2ec <timerHandler(unsigned int)+0x154>
c000e2d1:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2d8:	74 12                	je     c000e2ec <timerHandler(unsigned int)+0x154>
c000e2da:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2e4:	e8 8f 7a 00 00       	call   c0015d78 <schedule()>
c000e2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2ec:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2f1:	48                   	dec    eax
c000e2f2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2f7:	75 03                	jne    c000e2fc <timerHandler(unsigned int)+0x164>
c000e2f9:	fb                   	sti    
c000e2fa:	66 90                	xchg   ax,ax
c000e2fc:	58                   	pop    eax
c000e2fd:	5b                   	pop    ebx
c000e2fe:	5e                   	pop    esi
c000e2ff:	c3                   	ret    

c000e300 <VCache::VCache(PhysicalDisk*)>:
c000e300:	53                   	push   ebx
c000e301:	83 ec 18             	sub    esp,0x18
c000e304:	ba a0 1a 02 c0       	mov    edx,0xc0021aa0
c000e309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30d:	89 10                	mov    DWORD PTR [eax],edx
c000e30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e313:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e31a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e31e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e329:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e330:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e342:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e358:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e35c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e360:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e367:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e372:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e382:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e391:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3a0:	e8 2e 97 ff ff       	call   c0007ad3 <malloc>
c000e3a5:	83 c4 10             	add    esp,0x10
c000e3a8:	89 c3                	mov    ebx,eax
c000e3aa:	83 ec 0c             	sub    esp,0xc
c000e3ad:	53                   	push   ebx
c000e3ae:	e8 65 77 00 00       	call   c0015b18 <Mutex::Mutex()>
c000e3b3:	83 c4 10             	add    esp,0x10
c000e3b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3cc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3d7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3e8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e3ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e3f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e3f8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e3fb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e3fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e402:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e406:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e40a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e410:	05 00 02 00 00       	add    eax,0x200
c000e415:	c1 e0 03             	shl    eax,0x3
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	50                   	push   eax
c000e41c:	e8 b2 96 ff ff       	call   c0007ad3 <malloc>
c000e421:	83 c4 10             	add    esp,0x10
c000e424:	89 c2                	mov    edx,eax
c000e426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e42a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e431:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e440:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e444:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e44a:	89 d0                	mov    eax,edx
c000e44c:	c1 e0 02             	shl    eax,0x2
c000e44f:	01 d0                	add    eax,edx
c000e451:	c1 e0 04             	shl    eax,0x4
c000e454:	83 ec 0c             	sub    esp,0xc
c000e457:	50                   	push   eax
c000e458:	e8 76 96 ff ff       	call   c0007ad3 <malloc>
c000e45d:	83 c4 10             	add    esp,0x10
c000e460:	89 c2                	mov    edx,eax
c000e462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e466:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e469:	90                   	nop
c000e46a:	83 c4 18             	add    esp,0x18
c000e46d:	5b                   	pop    ebx
c000e46e:	c3                   	ret    
c000e46f:	90                   	nop

c000e470 <VCache::invalidateReadBuffer()>:
c000e470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e474:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e47a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e47e:	c3                   	ret    
c000e47f:	90                   	nop

c000e480 <VCache::writeWriteBuffer()>:
c000e480:	53                   	push   ebx
c000e481:	83 ec 08             	sub    esp,0x8
c000e484:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e488:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e48c:	74 1e                	je     c000e4ac <VCache::writeWriteBuffer()+0x2c>
c000e48e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e491:	83 ec 0c             	sub    esp,0xc
c000e494:	8b 10                	mov    edx,DWORD PTR [eax]
c000e496:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e499:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e49c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e49f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4a2:	50                   	push   eax
c000e4a3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4a6:	83 c4 20             	add    esp,0x20
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4b3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4ba:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4be:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4c5:	83 c4 08             	add    esp,0x8
c000e4c8:	5b                   	pop    ebx
c000e4c9:	c3                   	ret    
c000e4ca:	66 90                	xchg   ax,ax

c000e4cc <VCache::~VCache()>:
c000e4cc:	83 ec 0c             	sub    esp,0xc
c000e4cf:	ba a0 1a 02 c0       	mov    edx,0xc0021aa0
c000e4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d8:	89 10                	mov    DWORD PTR [eax],edx
c000e4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4de:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4e1:	0f b6 c0             	movzx  eax,al
c000e4e4:	85 c0                	test   eax,eax
c000e4e6:	74 10                	je     c000e4f8 <VCache::~VCache()+0x2c>
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ef:	e8 8c ff ff ff       	call   c000e480 <VCache::writeWriteBuffer()>
c000e4f4:	83 c4 10             	add    esp,0x10
c000e4f7:	90                   	nop
c000e4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4fc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e4ff:	83 ec 0c             	sub    esp,0xc
c000e502:	50                   	push   eax
c000e503:	e8 db 95 ff ff       	call   c0007ae3 <free>
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e512:	83 ec 0c             	sub    esp,0xc
c000e515:	50                   	push   eax
c000e516:	e8 c8 95 ff ff       	call   c0007ae3 <free>
c000e51b:	83 c4 10             	add    esp,0x10
c000e51e:	90                   	nop
c000e51f:	83 c4 0c             	add    esp,0xc
c000e522:	c3                   	ret    
c000e523:	90                   	nop

c000e524 <VCache::~VCache()>:
c000e524:	83 ec 0c             	sub    esp,0xc
c000e527:	83 ec 0c             	sub    esp,0xc
c000e52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52e:	e8 99 ff ff ff       	call   c000e4cc <VCache::~VCache()>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	83 ec 08             	sub    esp,0x8
c000e539:	6a 44                	push   0x44
c000e53b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e53f:	e8 c8 c2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	83 c4 0c             	add    esp,0xc
c000e54a:	c3                   	ret    
c000e54b:	90                   	nop

c000e54c <VCache::write(unsigned long long, int, void*)>:
c000e54c:	55                   	push   ebp
c000e54d:	57                   	push   edi
c000e54e:	56                   	push   esi
c000e54f:	53                   	push   ebx
c000e550:	83 ec 1c             	sub    esp,0x1c
c000e553:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e557:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e55b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e55f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e563:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e56b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e56f:	74 0f                	je     c000e580 <VCache::write(unsigned long long, int, void*)+0x34>
c000e571:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e575:	53                   	push   ebx
c000e576:	e8 f5 fe ff ff       	call   c000e470 <VCache::invalidateReadBuffer()>
c000e57b:	58                   	pop    eax
c000e57c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e580:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e584:	74 66                	je     c000e5ec <VCache::write(unsigned long long, int, void*)+0xa0>
c000e586:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e589:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e58d:	99                   	cdq    
c000e58e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e591:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e594:	89 c6                	mov    esi,eax
c000e596:	31 ce                	xor    esi,ecx
c000e598:	89 d0                	mov    eax,edx
c000e59a:	31 e8                	xor    eax,ebp
c000e59c:	09 c6                	or     esi,eax
c000e59e:	75 38                	jne    c000e5d8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5a0:	83 ff 01             	cmp    edi,0x1
c000e5a3:	75 33                	jne    c000e5d8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5a8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5b0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5b6:	0f af f9             	imul   edi,ecx
c000e5b9:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e5bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5c1:	40                   	inc    eax
c000e5c2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5c5:	83 f8 50             	cmp    eax,0x50
c000e5c8:	75 72                	jne    c000e63c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5ca:	83 ec 0c             	sub    esp,0xc
c000e5cd:	53                   	push   ebx
c000e5ce:	e8 ad fe ff ff       	call   c000e480 <VCache::writeWriteBuffer()>
c000e5d3:	83 c4 10             	add    esp,0x10
c000e5d6:	eb 64                	jmp    c000e63c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5dc:	83 ec 0c             	sub    esp,0xc
c000e5df:	53                   	push   ebx
c000e5e0:	e8 9b fe ff ff       	call   c000e480 <VCache::writeWriteBuffer()>
c000e5e5:	83 c4 10             	add    esp,0x10
c000e5e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5ec:	83 ff 4f             	cmp    edi,0x4f
c000e5ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5f2:	7f 20                	jg     c000e614 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e5f4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5f7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5fb:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e5fe:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e601:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e604:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e608:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e610:	eb 2a                	jmp    c000e63c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e612:	66 90                	xchg   ax,ax
c000e614:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e618:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e61e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e622:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e626:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e62a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e62e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e631:	83 c4 1c             	add    esp,0x1c
c000e634:	5b                   	pop    ebx
c000e635:	5e                   	pop    esi
c000e636:	5f                   	pop    edi
c000e637:	5d                   	pop    ebp
c000e638:	ff e0                	jmp    eax
c000e63a:	66 90                	xchg   ax,ax
c000e63c:	83 c4 1c             	add    esp,0x1c
c000e63f:	31 c0                	xor    eax,eax
c000e641:	5b                   	pop    ebx
c000e642:	5e                   	pop    esi
c000e643:	5f                   	pop    edi
c000e644:	5d                   	pop    ebp
c000e645:	c3                   	ret    

c000e646 <VCache::read(unsigned long long, int, void*)>:
c000e646:	55                   	push   ebp
c000e647:	57                   	push   edi
c000e648:	56                   	push   esi
c000e649:	53                   	push   ebx
c000e64a:	83 ec 1c             	sub    esp,0x1c
c000e64d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e651:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e655:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e659:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e65d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e661:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e665:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e669:	74 0d                	je     c000e678 <VCache::read(unsigned long long, int, void*)+0x32>
c000e66b:	83 ec 0c             	sub    esp,0xc
c000e66e:	57                   	push   edi
c000e66f:	e8 0c fe ff ff       	call   c000e480 <VCache::writeWriteBuffer()>
c000e674:	83 c4 10             	add    esp,0x10
c000e677:	90                   	nop
c000e678:	83 fd 01             	cmp    ebp,0x1
c000e67b:	0f 85 93 00 00 00    	jne    c000e714 <VCache::read(unsigned long long, int, void*)+0xce>
c000e681:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e684:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e68b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e68e:	0f 85 80 00 00 00    	jne    c000e714 <VCache::read(unsigned long long, int, void*)+0xce>
c000e694:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e697:	89 cd                	mov    ebp,ecx
c000e699:	f7 dd                	neg    ebp
c000e69b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e69f:	89 e8                	mov    eax,ebp
c000e6a1:	21 dd                	and    ebp,ebx
c000e6a3:	c1 f8 1f             	sar    eax,0x1f
c000e6a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6aa:	89 e8                	mov    eax,ebp
c000e6ac:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e6b0:	21 f5                	and    ebp,esi
c000e6b2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6b6:	89 ea                	mov    edx,ebp
c000e6b8:	74 2e                	je     c000e6e8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6ba:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e6bd:	75 29                	jne    c000e6e8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6bf:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6c2:	75 24                	jne    c000e6e8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6c4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6c7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6cd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6d0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6d3:	21 f3                	and    ebx,esi
c000e6d5:	0f af d9             	imul   ebx,ecx
c000e6d8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6db:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6df:	89 de                	mov    esi,ebx
c000e6e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6e3:	31 c0                	xor    eax,eax
c000e6e5:	eb 61                	jmp    c000e748 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6e7:	90                   	nop
c000e6e8:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6f6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e6f9:	8b 36                	mov    esi,DWORD PTR [esi]
c000e6fb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e6fe:	51                   	push   ecx
c000e6ff:	52                   	push   edx
c000e700:	50                   	push   eax
c000e701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e705:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e708:	83 c4 20             	add    esp,0x20
c000e70b:	85 c0                	test   eax,eax
c000e70d:	75 39                	jne    c000e748 <VCache::read(unsigned long long, int, void*)+0x102>
c000e70f:	eb b3                	jmp    c000e6c4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e711:	8d 76 00             	lea    esi,[esi+0x0]
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	57                   	push   edi
c000e718:	e8 53 fd ff ff       	call   c000e470 <VCache::invalidateReadBuffer()>
c000e71d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e720:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e724:	8b 10                	mov    edx,DWORD PTR [eax]
c000e726:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e72a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e72e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e732:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e736:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e73a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e73d:	83 c4 2c             	add    esp,0x2c
c000e740:	5b                   	pop    ebx
c000e741:	5e                   	pop    esi
c000e742:	5f                   	pop    edi
c000e743:	5d                   	pop    ebp
c000e744:	ff e0                	jmp    eax
c000e746:	66 90                	xchg   ax,ax
c000e748:	83 c4 1c             	add    esp,0x1c
c000e74b:	5b                   	pop    ebx
c000e74c:	5e                   	pop    esi
c000e74d:	5f                   	pop    edi
c000e74e:	5d                   	pop    ebp
c000e74f:	c3                   	ret    

c000e750 <Video::putrect(int, int, int, int, unsigned int)>:
c000e750:	55                   	push   ebp
c000e751:	57                   	push   edi
c000e752:	56                   	push   esi
c000e753:	53                   	push   ebx
c000e754:	83 ec 1c             	sub    esp,0x1c
c000e757:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e75b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e75f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e763:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e76b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e76f:	01 df                	add    edi,ebx
c000e771:	39 fb                	cmp    ebx,edi
c000e773:	7d 1f                	jge    c000e794 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e775:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e779:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e77d:	7d 12                	jge    c000e791 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e77f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e781:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e785:	53                   	push   ebx
c000e786:	55                   	push   ebp
c000e787:	45                   	inc    ebp
c000e788:	56                   	push   esi
c000e789:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e78c:	83 c4 10             	add    esp,0x10
c000e78f:	eb e8                	jmp    c000e779 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e791:	43                   	inc    ebx
c000e792:	eb dd                	jmp    c000e771 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e794:	83 c4 1c             	add    esp,0x1c
c000e797:	5b                   	pop    ebx
c000e798:	5e                   	pop    esi
c000e799:	5f                   	pop    edi
c000e79a:	5d                   	pop    ebp
c000e79b:	c3                   	ret    

c000e79c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e79c:	55                   	push   ebp
c000e79d:	57                   	push   edi
c000e79e:	31 ff                	xor    edi,edi
c000e7a0:	56                   	push   esi
c000e7a1:	53                   	push   ebx
c000e7a2:	83 ec 1c             	sub    esp,0x1c
c000e7a5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7ad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7b4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7c1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7c5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7cc:	01 f9                	add    ecx,edi
c000e7ce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7d2:	7d 2f                	jge    c000e803 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7d4:	31 f6                	xor    esi,esi
c000e7d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7da:	01 f2                	add    edx,esi
c000e7dc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7e0:	7d 1a                	jge    c000e7fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7e5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7e8:	46                   	inc    esi
c000e7e9:	51                   	push   ecx
c000e7ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7ee:	52                   	push   edx
c000e7ef:	55                   	push   ebp
c000e7f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7f3:	83 c4 10             	add    esp,0x10
c000e7f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7fa:	eb da                	jmp    c000e7d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e7fc:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e800:	47                   	inc    edi
c000e801:	eb c5                	jmp    c000e7c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e803:	83 c4 1c             	add    esp,0x1c
c000e806:	5b                   	pop    ebx
c000e807:	5e                   	pop    esi
c000e808:	5f                   	pop    edi
c000e809:	5d                   	pop    ebp
c000e80a:	c3                   	ret    
c000e80b:	90                   	nop

c000e80c <Video::blit(unsigned int*, int, int, int, int)>:
c000e80c:	55                   	push   ebp
c000e80d:	ba 00 00 00 00       	mov    edx,0x0
c000e812:	57                   	push   edi
c000e813:	56                   	push   esi
c000e814:	53                   	push   ebx
c000e815:	83 ec 1c             	sub    esp,0x1c
c000e818:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e81c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e820:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e824:	85 c0                	test   eax,eax
c000e826:	0f 49 d0             	cmovns edx,eax
c000e829:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e830:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e834:	89 eb                	mov    ebx,ebp
c000e836:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e83a:	01 ea                	add    edx,ebp
c000e83c:	39 da                	cmp    edx,ebx
c000e83e:	7e 54                	jle    c000e894 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e840:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e846:	7c 4c                	jl     c000e894 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e848:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e84c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e850:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e854:	01 c1                	add    ecx,eax
c000e856:	39 f9                	cmp    ecx,edi
c000e858:	7e 2f                	jle    c000e889 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e85a:	83 c2 04             	add    edx,0x4
c000e85d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e863:	7c 21                	jl     c000e886 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e865:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e869:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e86b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e86e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e872:	55                   	push   ebp
c000e873:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e877:	56                   	push   esi
c000e878:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e87b:	83 c4 10             	add    esp,0x10
c000e87e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e882:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e886:	47                   	inc    edi
c000e887:	eb c7                	jmp    c000e850 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e889:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e88d:	43                   	inc    ebx
c000e88e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e892:	eb a2                	jmp    c000e836 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e894:	83 c4 1c             	add    esp,0x1c
c000e897:	5b                   	pop    ebx
c000e898:	5e                   	pop    esi
c000e899:	5f                   	pop    edi
c000e89a:	5d                   	pop    ebp
c000e89b:	c3                   	ret    

c000e89c <Video::clearScreen(unsigned int)>:
c000e89c:	57                   	push   edi
c000e89d:	56                   	push   esi
c000e89e:	53                   	push   ebx
c000e89f:	31 db                	xor    ebx,ebx
c000e8a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8a5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8ab:	7e 1f                	jle    c000e8cc <Video::clearScreen(unsigned int)+0x30>
c000e8ad:	31 ff                	xor    edi,edi
c000e8af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8b5:	7e 12                	jle    c000e8c9 <Video::clearScreen(unsigned int)+0x2d>
c000e8b7:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8bd:	53                   	push   ebx
c000e8be:	57                   	push   edi
c000e8bf:	47                   	inc    edi
c000e8c0:	56                   	push   esi
c000e8c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8c4:	83 c4 10             	add    esp,0x10
c000e8c7:	eb e6                	jmp    c000e8af <Video::clearScreen(unsigned int)+0x13>
c000e8c9:	43                   	inc    ebx
c000e8ca:	eb d9                	jmp    c000e8a5 <Video::clearScreen(unsigned int)+0x9>
c000e8cc:	5b                   	pop    ebx
c000e8cd:	5e                   	pop    esi
c000e8ce:	5f                   	pop    edi
c000e8cf:	c3                   	ret    

c000e8d0 <Video::putpixel(int, int, unsigned int)>:
c000e8d0:	c7 44 24 04 a8 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021aa8
c000e8d8:	e9 ec 29 00 00       	jmp    c00112c9 <KePanic(char const*)>
c000e8dd:	90                   	nop

c000e8de <Video::readPixelApprox(int, int)>:
c000e8de:	83 ec 18             	sub    esp,0x18
c000e8e1:	68 c9 1a 02 c0       	push   0xc0021ac9
c000e8e6:	e8 de 29 00 00       	call   c00112c9 <KePanic(char const*)>
c000e8eb:	31 c0                	xor    eax,eax
c000e8ed:	83 c4 1c             	add    esp,0x1c
c000e8f0:	c3                   	ret    
c000e8f1:	90                   	nop

c000e8f2 <Video::Video(char const*)>:
c000e8f2:	83 ec 0c             	sub    esp,0xc
c000e8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f9:	83 ec 08             	sub    esp,0x8
c000e8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e900:	50                   	push   eax
c000e901:	e8 be df ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000e906:	83 c4 10             	add    esp,0x10
c000e909:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000e90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e912:	89 10                	mov    DWORD PTR [eax],edx
c000e914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e918:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e922:	90                   	nop
c000e923:	83 c4 0c             	add    esp,0xc
c000e926:	c3                   	ret    
c000e927:	90                   	nop

c000e928 <Video::~Video()>:
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e934:	89 10                	mov    DWORD PTR [eax],edx
c000e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93a:	83 ec 0c             	sub    esp,0xc
c000e93d:	50                   	push   eax
c000e93e:	e8 eb dc ff ff       	call   c000c62e <Device::~Device()>
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	90                   	nop
c000e947:	83 c4 0c             	add    esp,0xc
c000e94a:	c3                   	ret    
c000e94b:	90                   	nop

c000e94c <Video::~Video()>:
c000e94c:	83 ec 0c             	sub    esp,0xc
c000e94f:	83 ec 0c             	sub    esp,0xc
c000e952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e956:	e8 cd ff ff ff       	call   c000e928 <Video::~Video()>
c000e95b:	83 c4 10             	add    esp,0x10
c000e95e:	83 ec 08             	sub    esp,0x8
c000e961:	68 64 01 00 00       	push   0x164
c000e966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96a:	e8 9d be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e96f:	83 c4 10             	add    esp,0x10
c000e972:	83 c4 0c             	add    esp,0xc
c000e975:	c3                   	ret    

c000e976 <Video::isMonochrome()>:
c000e976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e980:	c3                   	ret    
c000e981:	90                   	nop

c000e982 <Video::getWidth()>:
c000e982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e986:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e98c:	c3                   	ret    
c000e98d:	90                   	nop

c000e98e <Video::getHeight()>:
c000e98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e992:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e998:	c3                   	ret    
c000e999:	90                   	nop

c000e99a <Video::drawCursor(int, int, unsigned int*, int)>:
c000e99a:	55                   	push   ebp
c000e99b:	57                   	push   edi
c000e99c:	56                   	push   esi
c000e99d:	53                   	push   ebx
c000e99e:	83 ec 2c             	sub    esp,0x2c
c000e9a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9a5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9a9:	83 f8 01             	cmp    eax,0x1
c000e9ac:	19 c9                	sbb    ecx,ecx
c000e9ae:	31 db                	xor    ebx,ebx
c000e9b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9b4:	89 ce                	mov    esi,ecx
c000e9b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9be:	f7 d6                	not    esi
c000e9c0:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e9c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9ca:	01 d8                	add    eax,ebx
c000e9cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9d0:	57                   	push   edi
c000e9d1:	e8 b8 ff ff ff       	call   c000e98e <Video::getHeight()>
c000e9d6:	59                   	pop    ecx
c000e9d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9db:	7e 70                	jle    c000ea4d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9e1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e9e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9fb:	89 e8                	mov    eax,ebp
c000e9fd:	83 c0 20             	add    eax,0x20
c000ea00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea04:	57                   	push   edi
c000ea05:	e8 78 ff ff ff       	call   c000e982 <Video::getWidth()>
c000ea0a:	5a                   	pop    edx
c000ea0b:	39 c5                	cmp    ebp,eax
c000ea0d:	7d 34                	jge    c000ea43 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea0f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea14:	74 05                	je     c000ea1b <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea16:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea18:	56                   	push   esi
c000ea19:	eb 0d                	jmp    c000ea28 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea1b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea20:	74 12                	je     c000ea34 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea22:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea2c:	55                   	push   ebp
c000ea2d:	57                   	push   edi
c000ea2e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea31:	83 c4 10             	add    esp,0x10
c000ea34:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea38:	45                   	inc    ebp
c000ea39:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea3d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea41:	75 c1                	jne    c000ea04 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea43:	43                   	inc    ebx
c000ea44:	83 fb 20             	cmp    ebx,0x20
c000ea47:	0f 85 79 ff ff ff    	jne    c000e9c6 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea4d:	83 c4 2c             	add    esp,0x2c
c000ea50:	5b                   	pop    ebx
c000ea51:	5e                   	pop    esi
c000ea52:	5f                   	pop    edi
c000ea53:	5d                   	pop    ebp
c000ea54:	c3                   	ret    
c000ea55:	90                   	nop

c000ea56 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea56:	55                   	push   ebp
c000ea57:	57                   	push   edi
c000ea58:	56                   	push   esi
c000ea59:	53                   	push   ebx
c000ea5a:	83 ec 28             	sub    esp,0x28
c000ea5d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea61:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ea65:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea69:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ea6d:	c1 e7 08             	shl    edi,0x8
c000ea70:	01 c7                	add    edi,eax
c000ea72:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ea76:	c1 e6 08             	shl    esi,0x8
c000ea79:	01 f0                	add    eax,esi
c000ea7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea83:	0f af c7             	imul   eax,edi
c000ea86:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea8d:	50                   	push   eax
c000ea8e:	e8 40 90 ff ff       	call   c0007ad3 <malloc>
c000ea93:	83 c4 10             	add    esp,0x10
c000ea96:	85 c0                	test   eax,eax
c000ea98:	89 c5                	mov    ebp,eax
c000ea9a:	75 10                	jne    c000eaac <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea9c:	83 ec 0c             	sub    esp,0xc
c000ea9f:	68 f4 1a 02 c0       	push   0xc0021af4
c000eaa4:	e8 20 28 00 00       	call   c00112c9 <KePanic(char const*)>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eab0:	ba 12 00 00 00       	mov    edx,0x12
c000eab5:	85 c0                	test   eax,eax
c000eab7:	74 11                	je     c000eaca <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eab9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eabd:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eac1:	c1 fa 03             	sar    edx,0x3
c000eac4:	0f af d1             	imul   edx,ecx
c000eac7:	83 c2 12             	add    edx,0x12
c000eaca:	85 ff                	test   edi,edi
c000eacc:	74 06                	je     c000ead4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eace:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ead2:	75 12                	jne    c000eae6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ead4:	83 ec 0c             	sub    esp,0xc
c000ead7:	68 04 1b 02 c0       	push   0xc0021b04
c000eadc:	e8 29 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eae1:	e9 b8 00 00 00       	jmp    c000eb9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eae6:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eaea:	83 f9 02             	cmp    ecx,0x2
c000eaed:	0f 85 96 00 00 00    	jne    c000eb89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eaf3:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eaf8:	75 0e                	jne    c000eb08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eafa:	85 c0                	test   eax,eax
c000eafc:	75 0a                	jne    c000eb08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eafe:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb01:	83 e8 18             	sub    eax,0x18
c000eb04:	a8 f7                	test   al,0xf7
c000eb06:	74 0a                	je     c000eb12 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	68 19 1b 02 c0       	push   0xc0021b19
c000eb10:	eb 7f                	jmp    c000eb91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb22:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eb26:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb2a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb32:	75 0c                	jne    c000eb40 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb34:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb39:	c1 e1 18             	shl    ecx,0x18
c000eb3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb40:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb45:	46                   	inc    esi
c000eb46:	89 c8                	mov    eax,ecx
c000eb48:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb4d:	c1 e0 10             	shl    eax,0x10
c000eb50:	c1 e1 08             	shl    ecx,0x8
c000eb53:	09 c1                	or     ecx,eax
c000eb55:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb59:	09 c1                	or     ecx,eax
c000eb5b:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb5f:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eb63:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb67:	c1 f8 03             	sar    eax,0x3
c000eb6a:	01 c2                	add    edx,eax
c000eb6c:	89 f0                	mov    eax,esi
c000eb6e:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb72:	39 c7                	cmp    edi,eax
c000eb74:	7f b0                	jg     c000eb26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb7e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb81:	7e 22                	jle    c000eba5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb83:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eb87:	eb 99                	jmp    c000eb22 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb89:	50                   	push   eax
c000eb8a:	50                   	push   eax
c000eb8b:	51                   	push   ecx
c000eb8c:	68 27 1b 02 c0       	push   0xc0021b27
c000eb91:	e8 74 bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb96:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eb99:	e8 45 8f ff ff       	call   c0007ae3 <free>
c000eb9e:	83 c4 10             	add    esp,0x10
c000eba1:	31 ed                	xor    ebp,ebp
c000eba3:	eb 0f                	jmp    c000ebb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eba9:	89 38                	mov    DWORD PTR [eax],edi
c000ebab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebaf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ebb2:	89 38                	mov    DWORD PTR [eax],edi
c000ebb4:	83 c4 1c             	add    esp,0x1c
c000ebb7:	89 e8                	mov    eax,ebp
c000ebb9:	5b                   	pop    ebx
c000ebba:	5e                   	pop    esi
c000ebbb:	5f                   	pop    edi
c000ebbc:	5d                   	pop    ebp
c000ebbd:	c3                   	ret    

c000ebbe <Video::putTGA(int, int, unsigned char*, int)>:
c000ebbe:	55                   	push   ebp
c000ebbf:	57                   	push   edi
c000ebc0:	56                   	push   esi
c000ebc1:	53                   	push   ebx
c000ebc2:	83 ec 28             	sub    esp,0x28
c000ebc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ebcd:	50                   	push   eax
c000ebce:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebd2:	50                   	push   eax
c000ebd3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebd7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebdb:	57                   	push   edi
c000ebdc:	e8 75 fe ff ff       	call   c000ea56 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebe1:	83 c4 20             	add    esp,0x20
c000ebe4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebe8:	85 c0                	test   eax,eax
c000ebea:	74 35                	je     c000ec21 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebec:	89 c6                	mov    esi,eax
c000ebee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebf2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebf6:	39 d8                	cmp    eax,ebx
c000ebf8:	7e 27                	jle    c000ec21 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebfa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebfe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ec02:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ec06:	39 e9                	cmp    ecx,ebp
c000ec08:	7e 14                	jle    c000ec1e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec0a:	83 c6 04             	add    esi,0x4
c000ec0d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ec0f:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ec12:	53                   	push   ebx
c000ec13:	55                   	push   ebp
c000ec14:	45                   	inc    ebp
c000ec15:	57                   	push   edi
c000ec16:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	eb e0                	jmp    c000ebfe <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec1e:	43                   	inc    ebx
c000ec1f:	eb cd                	jmp    c000ebee <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec21:	83 c4 1c             	add    esp,0x1c
c000ec24:	5b                   	pop    ebx
c000ec25:	5e                   	pop    esi
c000ec26:	5f                   	pop    edi
c000ec27:	5d                   	pop    ebp
c000ec28:	c3                   	ret    
c000ec29:	66 90                	xchg   ax,ax
c000ec2b:	90                   	nop

c000ec2c <ACPI::close(int, int, void*)>:
c000ec2c:	83 ec 1c             	sub    esp,0x1c
c000ec2f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec37:	74 0b                	je     c000ec44 <ACPI::close(int, int, void*)+0x18>
c000ec39:	b8 00 00 00 00       	mov    eax,0x0
c000ec3e:	e9 99 00 00 00       	jmp    c000ecdc <ACPI::close(int, int, void*)+0xb0>
c000ec43:	90                   	nop
c000ec44:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec49:	75 29                	jne    c000ec74 <ACPI::close(int, int, void*)+0x48>
c000ec4b:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec50:	85 c0                	test   eax,eax
c000ec52:	74 08                	je     c000ec5c <ACPI::close(int, int, void*)+0x30>
c000ec54:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec59:	ff d0                	call   eax
c000ec5b:	90                   	nop
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	68 88 1b 02 c0       	push   0xc0021b88
c000ec64:	e8 60 26 00 00       	call   c00112c9 <KePanic(char const*)>
c000ec69:	83 c4 10             	add    esp,0x10
c000ec6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec71:	eb 69                	jmp    c000ecdc <ACPI::close(int, int, void*)+0xb0>
c000ec73:	90                   	nop
c000ec74:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec79:	75 59                	jne    c000ecd4 <ACPI::close(int, int, void*)+0xa8>
c000ec7b:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec80:	85 c0                	test   eax,eax
c000ec82:	74 08                	je     c000ec8c <ACPI::close(int, int, void*)+0x60>
c000ec84:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec89:	ff d0                	call   eax
c000ec8b:	90                   	nop
c000ec8c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec91:	8d 76 00             	lea    esi,[esi+0x0]
c000ec94:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec99:	83 e0 02             	and    eax,0x2
c000ec9c:	74 1e                	je     c000ecbc <ACPI::close(int, int, void*)+0x90>
c000ec9e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca9:	89 c2                	mov    edx,eax
c000ecab:	ec                   	in     al,dx
c000ecac:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ecb0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecb4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecb8:	eb da                	jmp    c000ec94 <ACPI::close(int, int, void*)+0x68>
c000ecba:	66 90                	xchg   ax,ax
c000ecbc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecc3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ecc8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecd0:	ee                   	out    dx,al
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecdc:	83 c4 1c             	add    esp,0x1c
c000ecdf:	c3                   	ret    

c000ece0 <findRSDP()>:
c000ece0:	83 ec 1c             	sub    esp,0x1c
c000ece3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ece8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ecee:	83 e0 04             	and    eax,0x4
c000ecf1:	0f b6 c0             	movzx  eax,al
c000ecf4:	85 c0                	test   eax,eax
c000ecf6:	75 08                	jne    c000ed00 <findRSDP()+0x20>
c000ecf8:	b8 00 00 00 00       	mov    eax,0x0
c000ecfd:	eb 75                	jmp    c000ed74 <findRSDP()+0x94>
c000ecff:	90                   	nop
c000ed00:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed05:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed0a:	7f 1c                	jg     c000ed28 <findRSDP()+0x48>
c000ed0c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed11:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed17:	83 e2 fb             	and    edx,0xfffffffb
c000ed1a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed20:	b8 00 00 00 00       	mov    eax,0x0
c000ed25:	eb 4d                	jmp    c000ed74 <findRSDP()+0x94>
c000ed27:	90                   	nop
c000ed28:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed30:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed38:	77 32                	ja     c000ed6c <findRSDP()+0x8c>
c000ed3a:	83 ec 04             	sub    esp,0x4
c000ed3d:	6a 08                	push   0x8
c000ed3f:	68 23 1c 02 c0       	push   0xc0021c23
c000ed44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed48:	e8 33 16 ff ff       	call   c0000380 <memcmp>
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	85 c0                	test   eax,eax
c000ed52:	0f 94 c0             	sete   al
c000ed55:	0f b6 c0             	movzx  eax,al
c000ed58:	85 c0                	test   eax,eax
c000ed5a:	74 08                	je     c000ed64 <findRSDP()+0x84>
c000ed5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed60:	eb 12                	jmp    c000ed74 <findRSDP()+0x94>
c000ed62:	66 90                	xchg   ax,ax
c000ed64:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed69:	eb c5                	jmp    c000ed30 <findRSDP()+0x50>
c000ed6b:	90                   	nop
c000ed6c:	b8 00 00 00 00       	mov    eax,0x0
c000ed71:	8d 76 00             	lea    esi,[esi+0x0]
c000ed74:	83 c4 1c             	add    esp,0x1c
c000ed77:	c3                   	ret    

c000ed78 <loadACPITables(unsigned char*)>:
c000ed78:	57                   	push   edi
c000ed79:	56                   	push   esi
c000ed7a:	53                   	push   ebx
c000ed7b:	83 ec 60             	sub    esp,0x60
c000ed7e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed83:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed89:	83 e0 04             	and    eax,0x4
c000ed8c:	0f b6 c0             	movzx  eax,al
c000ed8f:	85 c0                	test   eax,eax
c000ed91:	0f 84 41 02 00 00    	je     c000efd8 <loadACPITables(unsigned char*)+0x260>
c000ed97:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed9c:	0f b6 c0             	movzx  eax,al
c000ed9f:	85 c0                	test   eax,eax
c000eda1:	74 79                	je     c000ee1c <loadACPITables(unsigned char*)+0xa4>
c000eda3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eda7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000edab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edb2:	83 e8 24             	sub    eax,0x24
c000edb5:	c1 e8 03             	shr    eax,0x3
c000edb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edbc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000edc4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edc8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000edcc:	0f 8d ba 00 00 00    	jge    c000ee8c <loadACPITables(unsigned char*)+0x114>
c000edd2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edd6:	83 c0 24             	add    eax,0x24
c000edd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000eddd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ede1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ede5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ede9:	c1 e0 03             	shl    eax,0x3
c000edec:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000edf0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edf4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000edf9:	89 c1                	mov    ecx,eax
c000edfb:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee00:	8d 50 01             	lea    edx,[eax+0x1]
c000ee03:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee09:	89 ca                	mov    edx,ecx
c000ee0b:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee12:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee17:	eb ab                	jmp    c000edc4 <loadACPITables(unsigned char*)+0x4c>
c000ee19:	8d 76 00             	lea    esi,[esi+0x0]
c000ee1c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee20:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee2b:	83 e8 24             	sub    eax,0x24
c000ee2e:	c1 e8 02             	shr    eax,0x2
c000ee31:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee35:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee40:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee44:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee48:	7d 42                	jge    c000ee8c <loadACPITables(unsigned char*)+0x114>
c000ee4a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee4e:	83 c0 24             	add    eax,0x24
c000ee51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee59:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee5d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee61:	c1 e0 02             	shl    eax,0x2
c000ee64:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee6e:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee73:	8d 50 01             	lea    edx,[eax+0x1]
c000ee76:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee7c:	89 ca                	mov    edx,ecx
c000ee7e:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee85:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee8a:	eb b4                	jmp    c000ee40 <loadACPITables(unsigned char*)+0xc8>
c000ee8c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee94:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee99:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee9d:	0f 8d 39 01 00 00    	jge    c000efdc <loadACPITables(unsigned char*)+0x264>
c000eea3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eea7:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eeae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eeba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eebe:	25 ff 0f 00 00       	and    eax,0xfff
c000eec3:	89 c6                	mov    esi,eax
c000eec5:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eecb:	83 ec 0c             	sub    esp,0xc
c000eece:	6a 01                	push   0x1
c000eed0:	e8 20 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000eed5:	83 c4 10             	add    esp,0x10
c000eed8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eedc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eee2:	83 ec 0c             	sub    esp,0xc
c000eee5:	6a 01                	push   0x1
c000eee7:	6a 01                	push   0x1
c000eee9:	50                   	push   eax
c000eeea:	52                   	push   edx
c000eeeb:	53                   	push   ebx
c000eeec:	e8 17 b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eef1:	83 c4 20             	add    esp,0x20
c000eef4:	09 f0                	or     eax,esi
c000eef6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eefa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eefe:	c1 e0 03             	shl    eax,0x3
c000ef01:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef12:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef2e:	89 c6                	mov    esi,eax
c000ef30:	89 d7                	mov    edi,edx
c000ef32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef34:	89 c8                	mov    eax,ecx
c000ef36:	89 fa                	mov    edx,edi
c000ef38:	89 f3                	mov    ebx,esi
c000ef3a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef3e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef55:	05 00 10 00 00       	add    eax,0x1000
c000ef5a:	c1 e8 0c             	shr    eax,0xc
c000ef5d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef6d:	25 ff 0f 00 00       	and    eax,0xfff
c000ef72:	89 c6                	mov    esi,eax
c000ef74:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef7a:	83 ec 0c             	sub    esp,0xc
c000ef7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef81:	e8 6f a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef86:	83 c4 10             	add    esp,0x10
c000ef89:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef8d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef93:	83 ec 0c             	sub    esp,0xc
c000ef96:	6a 01                	push   0x1
c000ef98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef9c:	50                   	push   eax
c000ef9d:	52                   	push   edx
c000ef9e:	53                   	push   ebx
c000ef9f:	e8 64 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efa4:	83 c4 20             	add    esp,0x20
c000efa7:	09 f0                	or     eax,esi
c000efa9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb1:	83 ec 0c             	sub    esp,0xc
c000efb4:	50                   	push   eax
c000efb5:	e8 4f a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000efba:	83 c4 10             	add    esp,0x10
c000efbd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efc1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efc5:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efcc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efd1:	e9 be fe ff ff       	jmp    c000ee94 <loadACPITables(unsigned char*)+0x11c>
c000efd6:	66 90                	xchg   ax,ax
c000efd8:	90                   	nop
c000efd9:	8d 76 00             	lea    esi,[esi+0x0]
c000efdc:	83 c4 60             	add    esp,0x60
c000efdf:	5b                   	pop    ebx
c000efe0:	5e                   	pop    esi
c000efe1:	5f                   	pop    edi
c000efe2:	c3                   	ret    
c000efe3:	90                   	nop

c000efe4 <findRSDT(unsigned char*)>:
c000efe4:	57                   	push   edi
c000efe5:	56                   	push   esi
c000efe6:	53                   	push   ebx
c000efe7:	83 ec 50             	sub    esp,0x50
c000efea:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eff5:	83 e0 04             	and    eax,0x4
c000eff8:	0f b6 c0             	movzx  eax,al
c000effb:	85 c0                	test   eax,eax
c000effd:	75 0d                	jne    c000f00c <findRSDT(unsigned char*)+0x28>
c000efff:	b8 00 00 00 00       	mov    eax,0x0
c000f004:	e9 2b 01 00 00       	jmp    c000f134 <findRSDT(unsigned char*)+0x150>
c000f009:	8d 76 00             	lea    esi,[esi+0x0]
c000f00c:	89 e0                	mov    eax,esp
c000f00e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f012:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f01a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f022:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f026:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f02a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f02e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f032:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f036:	89 c6                	mov    esi,eax
c000f038:	89 d7                	mov    edi,edx
c000f03a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f03c:	89 c8                	mov    eax,ecx
c000f03e:	89 fa                	mov    edx,edi
c000f040:	89 f3                	mov    ebx,esi
c000f042:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f046:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f04a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f04e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f052:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f056:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f05e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f062:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f066:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f06e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f072:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f076:	25 ff 0f 00 00       	and    eax,0xfff
c000f07b:	89 c6                	mov    esi,eax
c000f07d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f083:	83 ec 0c             	sub    esp,0xc
c000f086:	6a 02                	push   0x2
c000f088:	e8 68 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f08d:	83 c4 10             	add    esp,0x10
c000f090:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f094:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f09a:	83 ec 0c             	sub    esp,0xc
c000f09d:	6a 01                	push   0x1
c000f09f:	6a 02                	push   0x2
c000f0a1:	50                   	push   eax
c000f0a2:	52                   	push   edx
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 5f ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0a9:	83 c4 20             	add    esp,0x20
c000f0ac:	09 f0                	or     eax,esi
c000f0ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0b6:	25 ff 0f 00 00       	and    eax,0xfff
c000f0bb:	89 c6                	mov    esi,eax
c000f0bd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0c3:	83 ec 0c             	sub    esp,0xc
c000f0c6:	6a 02                	push   0x2
c000f0c8:	e8 28 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0da:	83 ec 0c             	sub    esp,0xc
c000f0dd:	6a 01                	push   0x1
c000f0df:	6a 02                	push   0x2
c000f0e1:	50                   	push   eax
c000f0e2:	52                   	push   edx
c000f0e3:	53                   	push   ebx
c000f0e4:	e8 1f ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0e9:	83 c4 20             	add    esp,0x20
c000f0ec:	09 f0                	or     eax,esi
c000f0ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0f2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0f7:	85 c0                	test   eax,eax
c000f0f9:	75 11                	jne    c000f10c <findRSDT(unsigned char*)+0x128>
c000f0fb:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f102:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f106:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f10a:	eb 24                	jmp    c000f130 <findRSDT(unsigned char*)+0x14c>
c000f10c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f111:	83 f8 02             	cmp    eax,0x2
c000f114:	75 12                	jne    c000f128 <findRSDT(unsigned char*)+0x144>
c000f116:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f11d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f121:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f125:	eb 09                	jmp    c000f130 <findRSDT(unsigned char*)+0x14c>
c000f127:	90                   	nop
c000f128:	b8 00 00 00 00       	mov    eax,0x0
c000f12d:	eb 05                	jmp    c000f134 <findRSDT(unsigned char*)+0x150>
c000f12f:	90                   	nop
c000f130:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f134:	83 c4 50             	add    esp,0x50
c000f137:	5b                   	pop    ebx
c000f138:	5e                   	pop    esi
c000f139:	5f                   	pop    edi
c000f13a:	c3                   	ret    
c000f13b:	90                   	nop

c000f13c <findDataTable(unsigned char*, char*)>:
c000f13c:	83 ec 1c             	sub    esp,0x1c
c000f13f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f144:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f14a:	83 e0 04             	and    eax,0x4
c000f14d:	0f b6 c0             	movzx  eax,al
c000f150:	85 c0                	test   eax,eax
c000f152:	75 08                	jne    c000f15c <findDataTable(unsigned char*, char*)+0x20>
c000f154:	b8 00 00 00 00       	mov    eax,0x0
c000f159:	eb 5d                	jmp    c000f1b8 <findDataTable(unsigned char*, char*)+0x7c>
c000f15b:	90                   	nop
c000f15c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f164:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f169:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f16d:	7d 41                	jge    c000f1b0 <findDataTable(unsigned char*, char*)+0x74>
c000f16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f173:	c1 e0 03             	shl    eax,0x3
c000f176:	05 20 89 02 c0       	add    eax,0xc0028920
c000f17b:	83 ec 04             	sub    esp,0x4
c000f17e:	6a 04                	push   0x4
c000f180:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f184:	50                   	push   eax
c000f185:	e8 f6 11 ff ff       	call   c0000380 <memcmp>
c000f18a:	83 c4 10             	add    esp,0x10
c000f18d:	85 c0                	test   eax,eax
c000f18f:	0f 94 c0             	sete   al
c000f192:	0f b6 c0             	movzx  eax,al
c000f195:	85 c0                	test   eax,eax
c000f197:	74 0f                	je     c000f1a8 <findDataTable(unsigned char*, char*)+0x6c>
c000f199:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f19d:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1a4:	eb 12                	jmp    c000f1b8 <findDataTable(unsigned char*, char*)+0x7c>
c000f1a6:	66 90                	xchg   ax,ax
c000f1a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1ad:	eb b5                	jmp    c000f164 <findDataTable(unsigned char*, char*)+0x28>
c000f1af:	90                   	nop
c000f1b0:	b8 00 00 00 00       	mov    eax,0x0
c000f1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1b8:	83 c4 1c             	add    esp,0x1c
c000f1bb:	c3                   	ret    

c000f1bc <scanMADT()>:
c000f1bc:	53                   	push   ebx
c000f1bd:	83 ec 38             	sub    esp,0x38
c000f1c0:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1c5:	25 00 04 00 00       	and    eax,0x400
c000f1ca:	74 14                	je     c000f1e0 <scanMADT()+0x24>
c000f1cc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1d1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1d7:	83 e2 fb             	and    edx,0xfffffffb
c000f1da:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1e0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1eb:	83 e0 04             	and    eax,0x4
c000f1ee:	0f b6 c0             	movzx  eax,al
c000f1f1:	85 c0                	test   eax,eax
c000f1f3:	0f 84 6b 04 00 00    	je     c000f664 <scanMADT()+0x4a8>
c000f1f9:	e8 e2 fa ff ff       	call   c000ece0 <findRSDP()>
c000f1fe:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f203:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f208:	85 c0                	test   eax,eax
c000f20a:	75 1c                	jne    c000f228 <scanMADT()+0x6c>
c000f20c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f211:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f217:	83 e2 fb             	and    edx,0xfffffffb
c000f21a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f220:	e9 47 04 00 00       	jmp    c000f66c <scanMADT()+0x4b0>
c000f225:	8d 76 00             	lea    esi,[esi+0x0]
c000f228:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f22d:	83 ec 0c             	sub    esp,0xc
c000f230:	50                   	push   eax
c000f231:	e8 ae fd ff ff       	call   c000efe4 <findRSDT(unsigned char*)>
c000f236:	83 c4 10             	add    esp,0x10
c000f239:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f23e:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f243:	85 c0                	test   eax,eax
c000f245:	75 19                	jne    c000f260 <scanMADT()+0xa4>
c000f247:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f24c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f252:	83 e2 fb             	and    edx,0xfffffffb
c000f255:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f25b:	e9 0c 04 00 00       	jmp    c000f66c <scanMADT()+0x4b0>
c000f260:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f265:	83 ec 0c             	sub    esp,0xc
c000f268:	50                   	push   eax
c000f269:	e8 0a fb ff ff       	call   c000ed78 <loadACPITables(unsigned char*)>
c000f26e:	83 c4 10             	add    esp,0x10
c000f271:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f276:	83 ec 08             	sub    esp,0x8
c000f279:	68 2c 1c 02 c0       	push   0xc0021c2c
c000f27e:	50                   	push   eax
c000f27f:	e8 b8 fe ff ff       	call   c000f13c <findDataTable(unsigned char*, char*)>
c000f284:	83 c4 10             	add    esp,0x10
c000f287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f28b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f290:	75 1a                	jne    c000f2ac <scanMADT()+0xf0>
c000f292:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f297:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f29d:	83 e2 fe             	and    edx,0xfffffffe
c000f2a0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2a6:	e9 c1 03 00 00       	jmp    c000f66c <scanMADT()+0x4b0>
c000f2ab:	90                   	nop
c000f2ac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2bb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2bf:	0f 87 a7 03 00 00    	ja     c000f66c <scanMADT()+0x4b0>
c000f2c5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2cd:	0f 87 99 03 00 00    	ja     c000f66c <scanMADT()+0x4b0>
c000f2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2df:	8d 50 01             	lea    edx,[eax+0x1]
c000f2e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2ee:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f301:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f305:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f309:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f30e:	83 f8 02             	cmp    eax,0x2
c000f311:	0f 86 51 03 00 00    	jbe    c000f668 <scanMADT()+0x4ac>
c000f317:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f31c:	85 c0                	test   eax,eax
c000f31e:	75 58                	jne    c000f378 <scanMADT()+0x1bc>
c000f320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f324:	8d 50 01             	lea    edx,[eax+0x1]
c000f327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f32b:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f331:	0f b6 d2             	movzx  edx,dl
c000f334:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f338:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f33c:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f346:	8d 50 01             	lea    edx,[eax+0x1]
c000f349:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f34d:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f353:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f356:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f35c:	0f b6 d2             	movzx  edx,dl
c000f35f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f363:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f367:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f36d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f372:	e9 d9 02 00 00       	jmp    c000f650 <scanMADT()+0x494>
c000f377:	90                   	nop
c000f378:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f37d:	83 f8 01             	cmp    eax,0x1
c000f380:	0f 85 1a 01 00 00    	jne    c000f4a0 <scanMADT()+0x2e4>
c000f386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f38a:	8d 50 01             	lea    edx,[eax+0x1]
c000f38d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f391:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f397:	0f b6 d2             	movzx  edx,dl
c000f39a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f39e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3a2:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3a8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b5:	01 d0                	add    eax,edx
c000f3b7:	83 c0 2c             	add    eax,0x2c
c000f3ba:	8a 00                	mov    al,BYTE PTR [eax]
c000f3bc:	0f b6 d0             	movzx  edx,al
c000f3bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3ce:	0f b6 c0             	movzx  eax,al
c000f3d1:	c1 e0 08             	shl    eax,0x8
c000f3d4:	89 d1                	mov    ecx,edx
c000f3d6:	09 c1                	or     ecx,eax
c000f3d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3dc:	8d 50 02             	lea    edx,[eax+0x2]
c000f3df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3e3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3e7:	0f b6 c0             	movzx  eax,al
c000f3ea:	c1 e0 10             	shl    eax,0x10
c000f3ed:	09 c1                	or     ecx,eax
c000f3ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f3:	8d 50 03             	lea    edx,[eax+0x3]
c000f3f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3fe:	0f b6 c0             	movzx  eax,al
c000f401:	c1 e0 18             	shl    eax,0x18
c000f404:	09 c1                	or     ecx,eax
c000f406:	89 ca                	mov    edx,ecx
c000f408:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f40d:	0f b6 c0             	movzx  eax,al
c000f410:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f417:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f41c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f420:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f424:	01 d0                	add    eax,edx
c000f426:	83 c0 2c             	add    eax,0x2c
c000f429:	8a 00                	mov    al,BYTE PTR [eax]
c000f42b:	0f b6 d0             	movzx  edx,al
c000f42e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f432:	8d 48 01             	lea    ecx,[eax+0x1]
c000f435:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f439:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f43d:	0f b6 c0             	movzx  eax,al
c000f440:	c1 e0 08             	shl    eax,0x8
c000f443:	89 d1                	mov    ecx,edx
c000f445:	09 c1                	or     ecx,eax
c000f447:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f44b:	8d 50 02             	lea    edx,[eax+0x2]
c000f44e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f452:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f456:	0f b6 c0             	movzx  eax,al
c000f459:	c1 e0 10             	shl    eax,0x10
c000f45c:	09 c1                	or     ecx,eax
c000f45e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f462:	8d 50 03             	lea    edx,[eax+0x3]
c000f465:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f469:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f46d:	0f b6 c0             	movzx  eax,al
c000f470:	c1 e0 18             	shl    eax,0x18
c000f473:	09 c1                	or     ecx,eax
c000f475:	89 ca                	mov    edx,ecx
c000f477:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f47c:	0f b6 c0             	movzx  eax,al
c000f47f:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f486:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f48b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f490:	83 c0 01             	add    eax,0x1
c000f493:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f498:	e9 b3 01 00 00       	jmp    c000f650 <scanMADT()+0x494>
c000f49d:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4a5:	83 f8 02             	cmp    eax,0x2
c000f4a8:	0f 85 ea 00 00 00    	jne    c000f598 <scanMADT()+0x3dc>
c000f4ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4c1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c9:	8d 50 01             	lea    edx,[eax+0x1]
c000f4cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e4:	01 d0                	add    eax,edx
c000f4e6:	83 c0 2c             	add    eax,0x2c
c000f4e9:	8a 00                	mov    al,BYTE PTR [eax]
c000f4eb:	0f b6 d0             	movzx  edx,al
c000f4ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4f2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4fd:	0f b6 c0             	movzx  eax,al
c000f500:	c1 e0 08             	shl    eax,0x8
c000f503:	89 d1                	mov    ecx,edx
c000f505:	09 c1                	or     ecx,eax
c000f507:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50b:	8d 50 02             	lea    edx,[eax+0x2]
c000f50e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f512:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f516:	0f b6 c0             	movzx  eax,al
c000f519:	c1 e0 10             	shl    eax,0x10
c000f51c:	09 c1                	or     ecx,eax
c000f51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f522:	8d 50 03             	lea    edx,[eax+0x3]
c000f525:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f529:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f52d:	0f b6 c0             	movzx  eax,al
c000f530:	c1 e0 18             	shl    eax,0x18
c000f533:	09 c8                	or     eax,ecx
c000f535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f539:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f53e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f542:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f546:	01 d0                	add    eax,edx
c000f548:	83 c0 2c             	add    eax,0x2c
c000f54b:	8a 00                	mov    al,BYTE PTR [eax]
c000f54d:	0f b6 d0             	movzx  edx,al
c000f550:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f554:	8d 48 01             	lea    ecx,[eax+0x1]
c000f557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f55b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f55f:	0f b6 c0             	movzx  eax,al
c000f562:	c1 e0 08             	shl    eax,0x8
c000f565:	09 d0                	or     eax,edx
c000f567:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f56c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f571:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f576:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f57a:	88 90 28 33 02 c0    	mov    BYTE PTR [eax-0x3ffdccd8],dl
c000f580:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f585:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f58a:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f592:	e9 b9 00 00 00       	jmp    c000f650 <scanMADT()+0x494>
c000f597:	90                   	nop
c000f598:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f59d:	83 f8 04             	cmp    eax,0x4
c000f5a0:	0f 85 9a 00 00 00    	jne    c000f640 <scanMADT()+0x484>
c000f5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5b9:	0f b6 c0             	movzx  eax,al
c000f5bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c8:	01 d0                	add    eax,edx
c000f5ca:	83 c0 2c             	add    eax,0x2c
c000f5cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f5cf:	0f b6 d0             	movzx  edx,al
c000f5d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5e1:	0f b6 c0             	movzx  eax,al
c000f5e4:	c1 e0 08             	shl    eax,0x8
c000f5e7:	09 d0                	or     eax,edx
c000f5e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5ed:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f601:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f605:	0f b6 c0             	movzx  eax,al
c000f608:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f610:	c1 e0 08             	shl    eax,0x8
c000f613:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f617:	89 c1                	mov    ecx,eax
c000f619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61d:	c1 e0 18             	shl    eax,0x18
c000f620:	89 c3                	mov    ebx,eax
c000f622:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f627:	8d 50 01             	lea    edx,[eax+0x1]
c000f62a:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f630:	09 d9                	or     ecx,ebx
c000f632:	89 ca                	mov    edx,ecx
c000f634:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f63b:	eb 13                	jmp    c000f650 <scanMADT()+0x494>
c000f63d:	8d 76 00             	lea    esi,[esi+0x0]
c000f640:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f645:	83 f8 05             	cmp    eax,0x5
c000f648:	75 06                	jne    c000f650 <scanMADT()+0x494>
c000f64a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f64f:	90                   	nop
c000f650:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f659:	01 d0                	add    eax,edx
c000f65b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f65f:	e9 50 fc ff ff       	jmp    c000f2b4 <scanMADT()+0xf8>
c000f664:	90                   	nop
c000f665:	eb 05                	jmp    c000f66c <scanMADT()+0x4b0>
c000f667:	90                   	nop
c000f668:	90                   	nop
c000f669:	8d 76 00             	lea    esi,[esi+0x0]
c000f66c:	83 c4 38             	add    esp,0x38
c000f66f:	5b                   	pop    ebx
c000f670:	c3                   	ret    
c000f671:	90                   	nop
c000f672:	66 90                	xchg   ax,ax

c000f674 <ACPI::ACPI()>:
c000f674:	83 ec 0c             	sub    esp,0xc
c000f677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67b:	83 ec 08             	sub    esp,0x8
c000f67e:	68 31 1c 02 c0       	push   0xc0021c31
c000f683:	50                   	push   eax
c000f684:	e8 3b d2 ff ff       	call   c000c8c4 <Device::Device(char const*)>
c000f689:	83 c4 10             	add    esp,0x10
c000f68c:	ba 84 1d 02 c0       	mov    edx,0xc0021d84
c000f691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f695:	89 10                	mov    DWORD PTR [eax],edx
c000f697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6be:	e8 f9 fa ff ff       	call   c000f1bc <scanMADT()>
c000f6c3:	90                   	nop
c000f6c4:	83 c4 0c             	add    esp,0xc
c000f6c7:	c3                   	ret    

c000f6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6c8:	83 ec 2c             	sub    esp,0x2c
c000f6cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f6cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6d3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f6d7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f6db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6e0:	88 c8                	mov    al,cl
c000f6e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6f3:	90                   	nop
c000f6f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6f8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6fe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f702:	0f 8d b0 00 00 00    	jge    c000f7b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f708:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f70c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f710:	83 c2 2a             	add    edx,0x2a
c000f713:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f717:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f71c:	0f b7 c0             	movzx  eax,ax
c000f71f:	39 c2                	cmp    edx,eax
c000f721:	0f 85 85 00 00 00    	jne    c000f7ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f727:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f72b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f72f:	83 c2 2a             	add    edx,0x2a
c000f732:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f736:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f73b:	0f b6 c0             	movzx  eax,al
c000f73e:	39 c2                	cmp    edx,eax
c000f740:	75 6a                	jne    c000f7ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f742:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f747:	85 c0                	test   eax,eax
c000f749:	74 3d                	je     c000f788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f74b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f74f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f753:	83 c2 2a             	add    edx,0x2a
c000f756:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f761:	39 c2                	cmp    edx,eax
c000f763:	74 13                	je     c000f778 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f765:	83 ec 0c             	sub    esp,0xc
c000f768:	68 ac 1b 02 c0       	push   0xc0021bac
c000f76d:	e8 57 1b 00 00       	call   c00112c9 <KePanic(char const*)>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	8d 76 00             	lea    esi,[esi+0x0]
c000f778:	83 ec 0c             	sub    esp,0xc
c000f77b:	68 36 1c 02 c0       	push   0xc0021c36
c000f780:	e8 44 1b 00 00       	call   c00112c9 <KePanic(char const*)>
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f78c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f790:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f794:	83 c2 2a             	add    edx,0x2a
c000f797:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f79b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f79d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7a0:	89 01                	mov    DWORD PTR [ecx],eax
c000f7a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7a5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7aa:	66 90                	xchg   ax,ax
c000f7ac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7b1:	e9 3e ff ff ff       	jmp    c000f6f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7b6:	66 90                	xchg   ax,ax
c000f7b8:	90                   	nop
c000f7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7bd:	83 c4 2c             	add    esp,0x2c
c000f7c0:	c2 04 00             	ret    0x4
c000f7c3:	90                   	nop

c000f7c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7c4:	83 ec 1c             	sub    esp,0x1c
c000f7c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7d8:	88 c8                	mov    al,cl
c000f7da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7de:	88 d0                	mov    al,dl
c000f7e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f2:	83 c2 2a             	add    edx,0x2a
c000f7f5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f7f9:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f801:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f80e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f812:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f81b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f821:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f825:	83 c0 01             	add    eax,0x1
c000f828:	88 c1                	mov    cl,al
c000f82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82e:	83 c2 2a             	add    edx,0x2a
c000f831:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f839:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f843:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f846:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f84a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f84e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f852:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f858:	8d 50 01             	lea    edx,[eax+0x1]
c000f85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f85f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f869:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f86f:	3d 00 02 00 00       	cmp    eax,0x200
c000f874:	75 12                	jne    c000f888 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f876:	83 ec 0c             	sub    esp,0xc
c000f879:	68 45 1c 02 c0       	push   0xc0021c45
c000f87e:	e8 46 1a 00 00       	call   c00112c9 <KePanic(char const*)>
c000f883:	83 c4 10             	add    esp,0x10
c000f886:	66 90                	xchg   ax,ax
c000f888:	90                   	nop
c000f889:	83 c4 1c             	add    esp,0x1c
c000f88c:	c3                   	ret    
c000f88d:	90                   	nop
c000f88e:	66 90                	xchg   ax,ax

c000f890 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f890:	b8 00 00 00 00       	mov    eax,0x0
c000f895:	c3                   	ret    
c000f896:	66 90                	xchg   ax,ax

c000f898 <ACPI::detectPCI()>:
c000f898:	53                   	push   ebx
c000f899:	83 ec 28             	sub    esp,0x28
c000f89c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8a1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8a6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8b1:	83 e0 04             	and    eax,0x4
c000f8b4:	0f b6 c0             	movzx  eax,al
c000f8b7:	85 c0                	test   eax,eax
c000f8b9:	74 2d                	je     c000f8e8 <ACPI::detectPCI()+0x50>
c000f8bb:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8c0:	83 ec 08             	sub    esp,0x8
c000f8c3:	68 62 1c 02 c0       	push   0xc0021c62
c000f8c8:	50                   	push   eax
c000f8c9:	e8 6e f8 ff ff       	call   c000f13c <findDataTable(unsigned char*, char*)>
c000f8ce:	83 c4 10             	add    esp,0x10
c000f8d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8d5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8da:	74 0c                	je     c000f8e8 <ACPI::detectPCI()+0x50>
c000f8dc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8e1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8e6:	66 90                	xchg   ax,ax
c000f8e8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8f6:	0f b6 c0             	movzx  eax,al
c000f8f9:	83 f8 01             	cmp    eax,0x1
c000f8fc:	75 0e                	jne    c000f90c <ACPI::detectPCI()+0x74>
c000f8fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f903:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f908:	eb 2e                	jmp    c000f938 <ACPI::detectPCI()+0xa0>
c000f90a:	66 90                	xchg   ax,ax
c000f90c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f910:	8a 00                	mov    al,BYTE PTR [eax]
c000f912:	0f b6 c0             	movzx  eax,al
c000f915:	83 f8 02             	cmp    eax,0x2
c000f918:	75 1e                	jne    c000f938 <ACPI::detectPCI()+0xa0>
c000f91a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f91f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f924:	85 c0                	test   eax,eax
c000f926:	74 10                	je     c000f938 <ACPI::detectPCI()+0xa0>
c000f928:	83 ec 0c             	sub    esp,0xc
c000f92b:	68 dc 1b 02 c0       	push   0xc0021bdc
c000f930:	e8 94 19 00 00       	call   c00112c9 <KePanic(char const*)>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f93c:	83 f0 01             	xor    eax,0x1
c000f93f:	0f b6 c0             	movzx  eax,al
c000f942:	85 c0                	test   eax,eax
c000f944:	74 46                	je     c000f98c <ACPI::detectPCI()+0xf4>
c000f946:	e8 e5 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f94b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f94f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f954:	75 0e                	jne    c000f964 <ACPI::detectPCI()+0xcc>
c000f956:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f95b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f960:	eb 2a                	jmp    c000f98c <ACPI::detectPCI()+0xf4>
c000f962:	66 90                	xchg   ax,ax
c000f964:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f969:	75 21                	jne    c000f98c <ACPI::detectPCI()+0xf4>
c000f96b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f970:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f975:	85 c0                	test   eax,eax
c000f977:	74 13                	je     c000f98c <ACPI::detectPCI()+0xf4>
c000f979:	83 ec 0c             	sub    esp,0xc
c000f97c:	68 dc 1b 02 c0       	push   0xc0021bdc
c000f981:	e8 43 19 00 00       	call   c00112c9 <KePanic(char const*)>
c000f986:	83 c4 10             	add    esp,0x10
c000f989:	8d 76 00             	lea    esi,[esi+0x0]
c000f98c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f991:	85 c0                	test   eax,eax
c000f993:	0f 84 87 00 00 00    	je     c000fa20 <ACPI::detectPCI()+0x188>
c000f999:	83 ec 0c             	sub    esp,0xc
c000f99c:	68 67 1c 02 c0       	push   0xc0021c67
c000f9a1:	e8 4f 12 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9b1:	83 ec 0c             	sub    esp,0xc
c000f9b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9b8:	e8 16 81 ff ff       	call   c0007ad3 <malloc>
c000f9bd:	83 c4 10             	add    esp,0x10
c000f9c0:	89 c3                	mov    ebx,eax
c000f9c2:	83 ec 0c             	sub    esp,0xc
c000f9c5:	53                   	push   ebx
c000f9c6:	e8 9b b4 00 00       	call   c001ae66 <PCI::PCI()>
c000f9cb:	83 c4 10             	add    esp,0x10
c000f9ce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9d6:	83 ec 08             	sub    esp,0x8
c000f9d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9dd:	50                   	push   eax
c000f9de:	e8 49 cd ff ff       	call   c000c72c <Device::addChild(Device*)>
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ec:	83 c0 08             	add    eax,0x8
c000f9ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9f6:	85 d2                	test   edx,edx
c000f9f8:	74 0a                	je     c000fa04 <ACPI::detectPCI()+0x16c>
c000f9fa:	ba 01 00 00 00       	mov    edx,0x1
c000f9ff:	eb 0b                	jmp    c000fa0c <ACPI::detectPCI()+0x174>
c000fa01:	8d 76 00             	lea    esi,[esi+0x0]
c000fa04:	ba 02 00 00 00       	mov    edx,0x2
c000fa09:	8d 76 00             	lea    esi,[esi+0x0]
c000fa0c:	6a 00                	push   0x0
c000fa0e:	6a 00                	push   0x0
c000fa10:	52                   	push   edx
c000fa11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa15:	ff d0                	call   eax
c000fa17:	83 c4 10             	add    esp,0x10
c000fa1a:	e9 91 00 00 00       	jmp    c000fab0 <ACPI::detectPCI()+0x218>
c000fa1f:	90                   	nop
c000fa20:	83 ec 0c             	sub    esp,0xc
c000fa23:	68 7f 1c 02 c0       	push   0xc0021c7f
c000fa28:	e8 c8 11 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000fa2d:	83 c4 10             	add    esp,0x10
c000fa30:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa37:	83 ec 0c             	sub    esp,0xc
c000fa3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa3e:	e8 90 80 ff ff       	call   c0007ad3 <malloc>
c000fa43:	83 c4 10             	add    esp,0x10
c000fa46:	89 c3                	mov    ebx,eax
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	53                   	push   ebx
c000fa4c:	e8 bd bf 00 00       	call   c001ba0e <IDE::IDE()>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa5c:	83 ec 08             	sub    esp,0x8
c000fa5f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa63:	50                   	push   eax
c000fa64:	e8 c3 cc ff ff       	call   c000c72c <Device::addChild(Device*)>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa70:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa7e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa8b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa9a:	83 c0 08             	add    eax,0x8
c000fa9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa9f:	6a 00                	push   0x0
c000faa1:	6a 00                	push   0x0
c000faa3:	6a 00                	push   0x0
c000faa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faa9:	ff d0                	call   eax
c000faab:	83 c4 10             	add    esp,0x10
c000faae:	66 90                	xchg   ax,ax
c000fab0:	90                   	nop
c000fab1:	83 c4 28             	add    esp,0x28
c000fab4:	5b                   	pop    ebx
c000fab5:	c3                   	ret    
c000fab6:	66 90                	xchg   ax,ax

c000fab8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fab8:	83 ec 1c             	sub    esp,0x1c
c000fabb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fabf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fac2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fac6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000facb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fad0:	83 ec 08             	sub    esp,0x8
c000fad3:	52                   	push   edx
c000fad4:	50                   	push   eax
c000fad5:	e8 c0 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fada:	83 c4 10             	add    esp,0x10
c000fadd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fae1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fae6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faeb:	83 ec 04             	sub    esp,0x4
c000faee:	6a 01                	push   0x1
c000faf0:	52                   	push   edx
c000faf1:	50                   	push   eax
c000faf2:	e8 bb 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000faf7:	83 c4 10             	add    esp,0x10
c000fafa:	90                   	nop
c000fafb:	83 c4 1c             	add    esp,0x1c
c000fafe:	c3                   	ret    
c000faff:	90                   	nop

c000fb00 <ACPI::sleep()>:
c000fb00:	83 ec 0c             	sub    esp,0xc
c000fb03:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb08:	85 c0                	test   eax,eax
c000fb0a:	74 08                	je     c000fb14 <ACPI::sleep()+0x14>
c000fb0c:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb11:	ff d0                	call   eax
c000fb13:	90                   	nop
c000fb14:	90                   	nop
c000fb15:	83 c4 0c             	add    esp,0xc
c000fb18:	c3                   	ret    
c000fb19:	90                   	nop
c000fb1a:	66 90                	xchg   ax,ax

c000fb1c <ACPI::open(int, int, void*)>:
c000fb1c:	55                   	push   ebp
c000fb1d:	89 e5                	mov    ebp,esp
c000fb1f:	53                   	push   ebx
c000fb20:	81 ec 74 01 00 00    	sub    esp,0x174
c000fb26:	83 ec 0c             	sub    esp,0xc
c000fb29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb2c:	e8 67 fd ff ff       	call   c000f898 <ACPI::detectPCI()>
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	83 ec 0c             	sub    esp,0xc
c000fb37:	68 04 1c 02 c0       	push   0xc0021c04
c000fb3c:	e8 b4 10 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb49:	8a 00                	mov    al,BYTE PTR [eax]
c000fb4b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb4e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb52:	83 f8 01             	cmp    eax,0x1
c000fb55:	75 15                	jne    c000fb6c <ACPI::open(int, int, void*)+0x50>
c000fb57:	83 ec 0c             	sub    esp,0xc
c000fb5a:	68 51 15 02 c0       	push   0xc0021551
c000fb5f:	e8 27 4d 00 00       	call   c001488b <Thr::loadKernelSymbolTable(char const*)>
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	eb 33                	jmp    c000fb9c <ACPI::open(int, int, void*)+0x80>
c000fb69:	8d 76 00             	lea    esi,[esi+0x0]
c000fb6c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb70:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb75:	75 15                	jne    c000fb8c <ACPI::open(int, int, void*)+0x70>
c000fb77:	83 ec 0c             	sub    esp,0xc
c000fb7a:	68 94 1c 02 c0       	push   0xc0021c94
c000fb7f:	e8 07 4d 00 00       	call   c001488b <Thr::loadKernelSymbolTable(char const*)>
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	eb 13                	jmp    c000fb9c <ACPI::open(int, int, void*)+0x80>
c000fb89:	8d 76 00             	lea    esi,[esi+0x0]
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	68 b2 1c 02 c0       	push   0xc0021cb2
c000fb94:	e8 30 17 00 00       	call   c00112c9 <KePanic(char const*)>
c000fb99:	83 c4 10             	add    esp,0x10
c000fb9c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fba0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fba7:	83 ec 0c             	sub    esp,0xc
c000fbaa:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fbad:	e8 21 7f ff ff       	call   c0007ad3 <malloc>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	89 c3                	mov    ebx,eax
c000fbb7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbbc:	83 ec 04             	sub    esp,0x4
c000fbbf:	50                   	push   eax
c000fbc0:	68 cc 1c 02 c0       	push   0xc0021ccc
c000fbc5:	53                   	push   ebx
c000fbc6:	e8 e1 bc ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbd1:	83 ec 08             	sub    esp,0x8
c000fbd4:	6a 01                	push   0x1
c000fbd6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbd9:	e8 ec bc ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fbe4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fbe8:	75 12                	jne    c000fbfc <ACPI::open(int, int, void*)+0xe0>
c000fbea:	83 ec 0c             	sub    esp,0xc
c000fbed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbf0:	e8 33 bd ff ff       	call   c000b928 <File::close()>
c000fbf5:	83 c4 10             	add    esp,0x10
c000fbf8:	eb 06                	jmp    c000fc00 <ACPI::open(int, int, void*)+0xe4>
c000fbfa:	66 90                	xchg   ax,ax
c000fbfc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc00:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fc04:	74 16                	je     c000fc1c <ACPI::open(int, int, void*)+0x100>
c000fc06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc0b:	83 c0 08             	add    eax,0x8
c000fc0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc16:	ff d0                	call   eax
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	90                   	nop
c000fc1c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fc1f:	83 f0 01             	xor    eax,0x1
c000fc22:	0f b6 c0             	movzx  eax,al
c000fc25:	85 c0                	test   eax,eax
c000fc27:	74 3b                	je     c000fc64 <ACPI::open(int, int, void*)+0x148>
c000fc29:	83 ec 0c             	sub    esp,0xc
c000fc2c:	68 ea 1c 02 c0       	push   0xc0021cea
c000fc31:	e8 bf 0f 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000fc36:	83 c4 10             	add    esp,0x10
c000fc39:	83 ec 04             	sub    esp,0x4
c000fc3c:	6a 0c                	push   0xc
c000fc3e:	68 05 1d 02 c0       	push   0xc0021d05
c000fc43:	68 16 1d 02 c0       	push   0xc0021d16
c000fc48:	e8 bd 3e 00 00       	call   c0013b0a <Reg::readIntWithDefault(char*, char*, int)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc53:	83 ec 0c             	sub    esp,0xc
c000fc56:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc59:	e8 bc 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc5e:	83 c4 10             	add    esp,0x10
c000fc61:	8d 76 00             	lea    esi,[esi+0x0]
c000fc64:	83 ec 0c             	sub    esp,0xc
c000fc67:	68 15 08 02 c0       	push   0xc0020815
c000fc6c:	e8 84 0f 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc77:	83 ec 08             	sub    esp,0x8
c000fc7a:	6a 13                	push   0x13
c000fc7c:	50                   	push   eax
c000fc7d:	e8 c2 cd ff ff       	call   c000ca44 <getDevicesOfType(DeviceType)>
c000fc82:	83 c4 0c             	add    esp,0xc
c000fc85:	8d 76 00             	lea    esi,[esi+0x0]
c000fc88:	83 ec 0c             	sub    esp,0xc
c000fc8b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc8e:	50                   	push   eax
c000fc8f:	e8 7c ff 00 00       	call   c001fc10 <LinkedList<Device>::isEmpty()>
c000fc94:	83 c4 10             	add    esp,0x10
c000fc97:	83 f0 01             	xor    eax,0x1
c000fc9a:	0f b6 c0             	movzx  eax,al
c000fc9d:	85 c0                	test   eax,eax
c000fc9f:	0f 84 1f 01 00 00    	je     c000fdc4 <ACPI::open(int, int, void*)+0x2a8>
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcab:	50                   	push   eax
c000fcac:	e8 7b ff 00 00       	call   c001fc2c <LinkedList<Device>::getFirstElement()>
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fcb7:	83 ec 0c             	sub    esp,0xc
c000fcba:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcbd:	50                   	push   eax
c000fcbe:	e8 71 ff 00 00       	call   c001fc34 <LinkedList<Device>::removeFirst()>
c000fcc3:	83 c4 10             	add    esp,0x10
c000fcc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fcc9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fccc:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fccf:	b8 24 00 00 00       	mov    eax,0x24
c000fcd4:	83 e0 fc             	and    eax,0xfffffffc
c000fcd7:	89 c3                	mov    ebx,eax
c000fcd9:	b8 00 00 00 00       	mov    eax,0x0
c000fcde:	66 90                	xchg   ax,ax
c000fce0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fce7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fcee:	83 c0 04             	add    eax,0x4
c000fcf1:	39 d8                	cmp    eax,ebx
c000fcf3:	72 eb                	jb     c000fce0 <ACPI::open(int, int, void*)+0x1c4>
c000fcf5:	83 ec 08             	sub    esp,0x8
c000fcf8:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fcfe:	50                   	push   eax
c000fcff:	83 ec 24             	sub    esp,0x24
c000fd02:	89 e1                	mov    ecx,esp
c000fd04:	b8 24 00 00 00       	mov    eax,0x24
c000fd09:	83 e0 fc             	and    eax,0xfffffffc
c000fd0c:	89 c3                	mov    ebx,eax
c000fd0e:	b8 00 00 00 00       	mov    eax,0x0
c000fd13:	90                   	nop
c000fd14:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fd1b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fd1e:	83 c0 04             	add    eax,0x4
c000fd21:	39 d8                	cmp    eax,ebx
c000fd23:	72 ef                	jb     c000fd14 <ACPI::open(int, int, void*)+0x1f8>
c000fd25:	e8 24 b6 00 00       	call   c001b34e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd2a:	83 c4 30             	add    esp,0x30
c000fd2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fd30:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fd34:	0f 84 4e ff ff ff    	je     c000fc88 <ACPI::open(int, int, void*)+0x16c>
c000fd3a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd41:	83 ec 0c             	sub    esp,0xc
c000fd44:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd47:	e8 87 7d ff ff       	call   c0007ad3 <malloc>
c000fd4c:	83 c4 10             	add    esp,0x10
c000fd4f:	89 c3                	mov    ebx,eax
c000fd51:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd56:	83 ec 04             	sub    esp,0x4
c000fd59:	50                   	push   eax
c000fd5a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd5d:	53                   	push   ebx
c000fd5e:	e8 49 bb ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c000fd63:	83 c4 10             	add    esp,0x10
c000fd66:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fd69:	83 ec 0c             	sub    esp,0xc
c000fd6c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd6f:	e8 1a be ff ff       	call   c000bb8e <File::exists()>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	0f b6 c0             	movzx  eax,al
c000fd7a:	85 c0                	test   eax,eax
c000fd7c:	74 22                	je     c000fda0 <ACPI::open(int, int, void*)+0x284>
c000fd7e:	83 ec 08             	sub    esp,0x8
c000fd81:	6a 01                	push   0x1
c000fd83:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd86:	e8 82 55 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000fd8b:	83 c4 10             	add    esp,0x10
c000fd8e:	83 ec 08             	sub    esp,0x8
c000fd91:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fd94:	50                   	push   eax
c000fd95:	e8 b3 57 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000fd9a:	83 c4 10             	add    esp,0x10
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fda0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fda4:	0f 84 de fe ff ff    	je     c000fc88 <ACPI::open(int, int, void*)+0x16c>
c000fdaa:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fdad:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdaf:	83 c0 08             	add    eax,0x8
c000fdb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb4:	83 ec 0c             	sub    esp,0xc
c000fdb7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fdba:	ff d0                	call   eax
c000fdbc:	83 c4 10             	add    esp,0x10
c000fdbf:	e9 c4 fe ff ff       	jmp    c000fc88 <ACPI::open(int, int, void*)+0x16c>
c000fdc4:	83 ec 0c             	sub    esp,0xc
c000fdc7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fdca:	50                   	push   eax
c000fdcb:	e8 3c fe 00 00       	call   c001fc0c <LinkedList<Device>::~LinkedList()>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fdd9:	83 ec 08             	sub    esp,0x8
c000fddc:	6a 01                	push   0x1
c000fdde:	68 1d 1d 02 c0       	push   0xc0021d1d
c000fde3:	e8 25 55 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000fde8:	83 c4 10             	add    esp,0x10
c000fdeb:	83 ec 08             	sub    esp,0x8
c000fdee:	53                   	push   ebx
c000fdef:	50                   	push   eax
c000fdf0:	e8 58 57 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000fdf5:	83 c4 10             	add    esp,0x10
c000fdf8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fdfd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe03:	83 e0 04             	and    eax,0x4
c000fe06:	0f b6 c0             	movzx  eax,al
c000fe09:	85 c0                	test   eax,eax
c000fe0b:	0f 84 e3 00 00 00    	je     c000fef4 <ACPI::open(int, int, void*)+0x3d8>
c000fe11:	83 ec 0c             	sub    esp,0xc
c000fe14:	68 3a 1d 02 c0       	push   0xc0021d3a
c000fe19:	e8 d7 0d 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c000fe1e:	83 c4 10             	add    esp,0x10
c000fe21:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fe2e:	e8 a0 7c ff ff       	call   c0007ad3 <malloc>
c000fe33:	83 c4 10             	add    esp,0x10
c000fe36:	89 c3                	mov    ebx,eax
c000fe38:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe3d:	83 ec 04             	sub    esp,0x4
c000fe40:	50                   	push   eax
c000fe41:	68 57 1d 02 c0       	push   0xc0021d57
c000fe46:	53                   	push   ebx
c000fe47:	e8 60 ba ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c000fe4c:	83 c4 10             	add    esp,0x10
c000fe4f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe52:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe56:	74 1c                	je     c000fe74 <ACPI::open(int, int, void*)+0x358>
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe5e:	e8 2b bd ff ff       	call   c000bb8e <File::exists()>
c000fe63:	83 c4 10             	add    esp,0x10
c000fe66:	0f b6 c0             	movzx  eax,al
c000fe69:	85 c0                	test   eax,eax
c000fe6b:	74 07                	je     c000fe74 <ACPI::open(int, int, void*)+0x358>
c000fe6d:	b0 01                	mov    al,0x1
c000fe6f:	eb 07                	jmp    c000fe78 <ACPI::open(int, int, void*)+0x35c>
c000fe71:	8d 76 00             	lea    esi,[esi+0x0]
c000fe74:	b0 00                	mov    al,0x0
c000fe76:	66 90                	xchg   ax,ax
c000fe78:	0f b6 c0             	movzx  eax,al
c000fe7b:	85 c0                	test   eax,eax
c000fe7d:	74 21                	je     c000fea0 <ACPI::open(int, int, void*)+0x384>
c000fe7f:	83 ec 08             	sub    esp,0x8
c000fe82:	6a 01                	push   0x1
c000fe84:	68 57 1d 02 c0       	push   0xc0021d57
c000fe89:	e8 7f 54 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	83 ec 08             	sub    esp,0x8
c000fe94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe97:	50                   	push   eax
c000fe98:	e8 b0 56 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fea4:	74 1e                	je     c000fec4 <ACPI::open(int, int, void*)+0x3a8>
c000fea6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000feaa:	74 18                	je     c000fec4 <ACPI::open(int, int, void*)+0x3a8>
c000feac:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000feaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb1:	83 c0 08             	add    eax,0x8
c000feb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb6:	83 ec 0c             	sub    esp,0xc
c000feb9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000febc:	ff d0                	call   eax
c000febe:	83 c4 10             	add    esp,0x10
c000fec1:	8d 76 00             	lea    esi,[esi+0x0]
c000fec4:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fec9:	83 ec 08             	sub    esp,0x8
c000fecc:	68 74 1d 02 c0       	push   0xc0021d74
c000fed1:	50                   	push   eax
c000fed2:	e8 65 f2 ff ff       	call   c000f13c <findDataTable(unsigned char*, char*)>
c000fed7:	83 c4 10             	add    esp,0x10
c000feda:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fedd:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fee1:	74 11                	je     c000fef4 <ACPI::open(int, int, void*)+0x3d8>
c000fee3:	83 ec 08             	sub    esp,0x8
c000fee6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fee9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000feec:	e8 c7 fb ff ff       	call   c000fab8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	b8 00 00 00 00       	mov    eax,0x0
c000fef9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fefc:	c9                   	leave  
c000fefd:	c3                   	ret    

c000fefe <CPU::close(int, int, void*)>:
c000fefe:	31 c0                	xor    eax,eax
c000ff00:	c3                   	ret    
c000ff01:	90                   	nop

c000ff02 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff02:	60                   	pusha  
c000ff03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff0f:	9c                   	pushf  
c000ff10:	fa                   	cli    
c000ff11:	0f 09                	wbinvd 
c000ff13:	0f 30                	wrmsr  
c000ff15:	9d                   	popf   
c000ff16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff1a:	89 02                	mov    DWORD PTR [edx],eax
c000ff1c:	61                   	popa   
c000ff1d:	c3                   	ret    

c000ff1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff1e:	60                   	pusha  
c000ff1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff23:	9c                   	pushf  
c000ff24:	fa                   	cli    
c000ff25:	0f 09                	wbinvd 
c000ff27:	31 c0                	xor    eax,eax
c000ff29:	31 d2                	xor    edx,edx
c000ff2b:	0f 32                	rdmsr  
c000ff2d:	9d                   	popf   
c000ff2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff32:	89 02                	mov    DWORD PTR [edx],eax
c000ff34:	61                   	popa   
c000ff35:	c3                   	ret    

c000ff36 <CPU::AMD_K6_writeback(int, int, int)>:
c000ff36:	56                   	push   esi
c000ff37:	53                   	push   ebx
c000ff38:	83 ec 10             	sub    esp,0x10
c000ff3b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff44:	75 5d                	jne    c000ffa3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff46:	83 f8 08             	cmp    eax,0x8
c000ff49:	75 09                	jne    c000ff54 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff4b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff50:	7e 13                	jle    c000ff65 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff52:	eb 30                	jmp    c000ff84 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff54:	83 f8 06             	cmp    eax,0x6
c000ff57:	7c 4a                	jl     c000ffa3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff59:	83 f8 07             	cmp    eax,0x7
c000ff5c:	7e 07                	jle    c000ff65 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff5e:	83 f8 09             	cmp    eax,0x9
c000ff61:	74 21                	je     c000ff84 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff63:	eb 3e                	jmp    c000ffa3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff65:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff6b:	89 e6                	mov    esi,esp
c000ff6d:	56                   	push   esi
c000ff6e:	68 82 00 00 c0       	push   0xc0000082
c000ff73:	e8 a6 ff ff ff       	call   c000ff1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff78:	c1 eb 15             	shr    ebx,0x15
c000ff7b:	56                   	push   esi
c000ff7c:	83 e3 7e             	and    ebx,0x7e
c000ff7f:	6a 00                	push   0x0
c000ff81:	53                   	push   ebx
c000ff82:	eb 12                	jmp    c000ff96 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff84:	89 e3                	mov    ebx,esp
c000ff86:	53                   	push   ebx
c000ff87:	68 82 00 00 c0       	push   0xc0000082
c000ff8c:	e8 8d ff ff ff       	call   c000ff1e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff91:	53                   	push   ebx
c000ff92:	6a 00                	push   0x0
c000ff94:	6a 00                	push   0x0
c000ff96:	68 82 00 00 c0       	push   0xc0000082
c000ff9b:	e8 62 ff ff ff       	call   c000ff02 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ffa0:	83 c4 18             	add    esp,0x18
c000ffa3:	83 c4 10             	add    esp,0x10
c000ffa6:	5b                   	pop    ebx
c000ffa7:	5e                   	pop    esi
c000ffa8:	c3                   	ret    
c000ffa9:	90                   	nop

c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ffaa:	55                   	push   ebp
c000ffab:	57                   	push   edi
c000ffac:	56                   	push   esi
c000ffad:	53                   	push   ebx
c000ffae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffb2:	39 05 38 33 02 c0    	cmp    DWORD PTR ds:0xc0023338,eax
c000ffb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ffbc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ffc0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ffc4:	75 23                	jne    c000ffe9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ffc6:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ffcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffcf:	89 06                	mov    DWORD PTR [esi],eax
c000ffd1:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ffd6:	89 07                	mov    DWORD PTR [edi],eax
c000ffd8:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ffdd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ffe0:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ffe5:	89 02                	mov    DWORD PTR [edx],eax
c000ffe7:	eb 3f                	jmp    c0010028 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ffe9:	31 c9                	xor    ecx,ecx
c000ffeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffef:	0f a2                	cpuid  
c000fff1:	89 06                	mov    DWORD PTR [esi],eax
c000fff3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff7:	89 1f                	mov    DWORD PTR [edi],ebx
c000fff9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000fffc:	89 10                	mov    DWORD PTR [eax],edx
c000fffe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010002:	a3 38 33 02 c0       	mov    ds:0xc0023338,eax
c0010007:	8b 06                	mov    eax,DWORD PTR [esi]
c0010009:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c001000e:	8b 07                	mov    eax,DWORD PTR [edi]
c0010010:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c0010015:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010018:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c001001d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010021:	8b 00                	mov    eax,DWORD PTR [eax]
c0010023:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c0010028:	5b                   	pop    ebx
c0010029:	5e                   	pop    esi
c001002a:	5f                   	pop    edi
c001002b:	5d                   	pop    ebp
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <CPU::cpuidCheckEDX(unsigned int)>:
c001002e:	83 ec 10             	sub    esp,0x10
c0010031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010035:	50                   	push   eax
c0010036:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003a:	50                   	push   eax
c001003b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003f:	50                   	push   eax
c0010040:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010044:	50                   	push   eax
c0010045:	6a 01                	push   0x1
c0010047:	e8 5e ff ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001004c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010050:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010054:	0f 95 c0             	setne  al
c0010057:	83 c4 24             	add    esp,0x24
c001005a:	c3                   	ret    
c001005b:	90                   	nop

c001005c <CPU::cpuidCheckECX(unsigned int)>:
c001005c:	83 ec 10             	sub    esp,0x10
c001005f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010063:	50                   	push   eax
c0010064:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010068:	50                   	push   eax
c0010069:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001006d:	50                   	push   eax
c001006e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010072:	50                   	push   eax
c0010073:	6a 01                	push   0x1
c0010075:	e8 30 ff ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001007a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001007e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010082:	0f 95 c0             	setne  al
c0010085:	83 c4 24             	add    esp,0x24
c0010088:	c3                   	ret    
c0010089:	90                   	nop

c001008a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001008a:	83 ec 10             	sub    esp,0x10
c001008d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010091:	50                   	push   eax
c0010092:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010096:	50                   	push   eax
c0010097:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001009b:	50                   	push   eax
c001009c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100a0:	50                   	push   eax
c00100a1:	6a 07                	push   0x7
c00100a3:	e8 02 ff ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100ac:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00100b0:	0f 95 c0             	setne  al
c00100b3:	83 c4 24             	add    esp,0x24
c00100b6:	c3                   	ret    
c00100b7:	90                   	nop

c00100b8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00100b8:	83 ec 10             	sub    esp,0x10
c00100bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100bf:	50                   	push   eax
c00100c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c4:	50                   	push   eax
c00100c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c9:	50                   	push   eax
c00100ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ce:	50                   	push   eax
c00100cf:	6a 07                	push   0x7
c00100d1:	e8 d4 fe ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100da:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100de:	0f 95 c0             	setne  al
c00100e1:	83 c4 24             	add    esp,0x24
c00100e4:	c3                   	ret    
c00100e5:	90                   	nop

c00100e6 <CPU::CPU()>:
c00100e6:	83 ec 0c             	sub    esp,0xc
c00100e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ed:	83 ec 08             	sub    esp,0x8
c00100f0:	68 99 1e 02 c0       	push   0xc0021e99
c00100f5:	50                   	push   eax
c00100f6:	e8 c9 c7 ff ff       	call   c000c8c4 <Device::Device(char const*)>
c00100fb:	83 c4 10             	add    esp,0x10
c00100fe:	ba 2c 1f 02 c0       	mov    edx,0xc0021f2c
c0010103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010107:	89 10                	mov    DWORD PTR [eax],edx
c0010109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001011b:	05 78 01 00 00       	add    eax,0x178
c0010120:	83 ec 0c             	sub    esp,0xc
c0010123:	50                   	push   eax
c0010124:	e8 53 72 ff ff       	call   c000737c <GDT::GDT()>
c0010129:	83 c4 10             	add    esp,0x10
c001012c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010130:	05 7c 09 00 00       	add    eax,0x97c
c0010135:	83 ec 0c             	sub    esp,0xc
c0010138:	50                   	push   eax
c0010139:	e8 8e 74 ff ff       	call   c00075cc <IDT::IDT()>
c001013e:	83 c4 10             	add    esp,0x10
c0010141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010145:	05 7c 11 00 00       	add    eax,0x117c
c001014a:	83 ec 0c             	sub    esp,0xc
c001014d:	50                   	push   eax
c001014e:	e8 d9 8d ff ff       	call   c0008f2c <TSS::TSS()>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010165:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001016f:	90                   	nop
c0010170:	83 c4 0c             	add    esp,0xc
c0010173:	c3                   	ret    

c0010174 <CPU::displayFeatures()>:
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <CPU::detectFeatures()>:
c0010176:	55                   	push   ebp
c0010177:	57                   	push   edi
c0010178:	56                   	push   esi
c0010179:	53                   	push   ebx
c001017a:	83 ec 30             	sub    esp,0x30
c001017d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010181:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001018b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010191:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010198:	6a 0d                	push   0xd
c001019a:	6a 00                	push   0x0
c001019c:	55                   	push   ebp
c001019d:	e8 4e 03 ff ff       	call   c00004f0 <memset>
c00101a2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00101a7:	83 c4 10             	add    esp,0x10
c00101aa:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00101b1:	0f 84 db 05 00 00    	je     c0010792 <CPU::detectFeatures()+0x61c>
c00101b7:	83 ec 0c             	sub    esp,0xc
c00101ba:	89 ef                	mov    edi,ebp
c00101bc:	6a 10                	push   0x10
c00101be:	e8 6b fe ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c00101c3:	83 e0 01             	and    eax,0x1
c00101c6:	8d 14 00             	lea    edx,[eax+eax*1]
c00101c9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101cf:	83 e0 fd             	and    eax,0xfffffffd
c00101d2:	09 d0                	or     eax,edx
c00101d4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101da:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00101e1:	e8 48 fe ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c00101e6:	83 e0 01             	and    eax,0x1
c00101e9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101f0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101f6:	83 e0 fb             	and    eax,0xfffffffb
c00101f9:	09 d0                	or     eax,edx
c00101fb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010201:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010208:	e8 21 fe ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c001020d:	83 e0 01             	and    eax,0x1
c0010210:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010217:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001021d:	83 e0 f7             	and    eax,0xfffffff7
c0010220:	09 d0                	or     eax,edx
c0010222:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010228:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001022f:	e8 fa fd ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c0010234:	83 e0 01             	and    eax,0x1
c0010237:	c1 e0 04             	shl    eax,0x4
c001023a:	89 c2                	mov    edx,eax
c001023c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010242:	83 e0 ef             	and    eax,0xffffffef
c0010245:	09 d0                	or     eax,edx
c0010247:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001024d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010254:	e8 d5 fd ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c0010259:	83 e0 01             	and    eax,0x1
c001025c:	c1 e0 05             	shl    eax,0x5
c001025f:	89 c2                	mov    edx,eax
c0010261:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010267:	83 e0 df             	and    eax,0xffffffdf
c001026a:	09 d0                	or     eax,edx
c001026c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010272:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010279:	e8 b0 fd ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c001027e:	83 e0 01             	and    eax,0x1
c0010281:	8d 14 00             	lea    edx,[eax+eax*1]
c0010284:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001028a:	83 e0 fd             	and    eax,0xfffffffd
c001028d:	09 d0                	or     eax,edx
c001028f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010295:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001029c:	e8 8d fd ff ff       	call   c001002e <CPU::cpuidCheckEDX(unsigned int)>
c00102a1:	83 e0 01             	and    eax,0x1
c00102a4:	c1 e0 06             	shl    eax,0x6
c00102a7:	89 c2                	mov    edx,eax
c00102a9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00102af:	83 e0 bf             	and    eax,0xffffffbf
c00102b2:	09 d0                	or     eax,edx
c00102b4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00102ba:	58                   	pop    eax
c00102bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102bf:	50                   	push   eax
c00102c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102c4:	50                   	push   eax
c00102c5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00102c9:	56                   	push   esi
c00102ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102ce:	50                   	push   eax
c00102cf:	6a 00                	push   0x0
c00102d1:	e8 d4 fc ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102d6:	b8 04 00 00 00       	mov    eax,0x4
c00102db:	89 c1                	mov    ecx,eax
c00102dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102df:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00102e5:	89 c1                	mov    ecx,eax
c00102e7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00102eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102ed:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00102f3:	89 c1                	mov    ecx,eax
c00102f5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00102f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fb:	83 c4 18             	add    esp,0x18
c00102fe:	68 a8 1d 02 c0       	push   0xc0021da8
c0010303:	55                   	push   ebp
c0010304:	e8 77 04 ff ff       	call   c0000780 <strcmp>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	85 c0                	test   eax,eax
c001030e:	75 0f                	jne    c001031f <CPU::detectFeatures()+0x1a9>
c0010310:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001031a:	e9 22 02 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c001031f:	50                   	push   eax
c0010320:	50                   	push   eax
c0010321:	68 b5 1d 02 c0       	push   0xc0021db5
c0010326:	55                   	push   ebp
c0010327:	e8 54 04 ff ff       	call   c0000780 <strcmp>
c001032c:	83 c4 10             	add    esp,0x10
c001032f:	85 c0                	test   eax,eax
c0010331:	74 dd                	je     c0010310 <CPU::detectFeatures()+0x19a>
c0010333:	50                   	push   eax
c0010334:	50                   	push   eax
c0010335:	68 c2 1d 02 c0       	push   0xc0021dc2
c001033a:	55                   	push   ebp
c001033b:	e8 40 04 ff ff       	call   c0000780 <strcmp>
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	85 c0                	test   eax,eax
c0010345:	74 2a                	je     c0010371 <CPU::detectFeatures()+0x1fb>
c0010347:	50                   	push   eax
c0010348:	50                   	push   eax
c0010349:	68 cf 1d 02 c0       	push   0xc0021dcf
c001034e:	55                   	push   ebp
c001034f:	e8 2c 04 ff ff       	call   c0000780 <strcmp>
c0010354:	83 c4 10             	add    esp,0x10
c0010357:	85 c0                	test   eax,eax
c0010359:	74 16                	je     c0010371 <CPU::detectFeatures()+0x1fb>
c001035b:	50                   	push   eax
c001035c:	50                   	push   eax
c001035d:	68 dc 1d 02 c0       	push   0xc0021ddc
c0010362:	55                   	push   ebp
c0010363:	e8 18 04 ff ff       	call   c0000780 <strcmp>
c0010368:	83 c4 10             	add    esp,0x10
c001036b:	85 c0                	test   eax,eax
c001036d:	74 48                	je     c00103b7 <CPU::detectFeatures()+0x241>
c001036f:	eb 0f                	jmp    c0010380 <CPU::detectFeatures()+0x20a>
c0010371:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001037b:	e9 c1 01 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c0010380:	50                   	push   eax
c0010381:	50                   	push   eax
c0010382:	68 e9 1d 02 c0       	push   0xc0021de9
c0010387:	55                   	push   ebp
c0010388:	e8 f3 03 ff ff       	call   c0000780 <strcmp>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	85 c0                	test   eax,eax
c0010392:	74 23                	je     c00103b7 <CPU::detectFeatures()+0x241>
c0010394:	57                   	push   edi
c0010395:	57                   	push   edi
c0010396:	68 f6 1d 02 c0       	push   0xc0021df6
c001039b:	55                   	push   ebp
c001039c:	e8 df 03 ff ff       	call   c0000780 <strcmp>
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	85 c0                	test   eax,eax
c00103a6:	75 1e                	jne    c00103c6 <CPU::detectFeatures()+0x250>
c00103a8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00103b2:	e9 8a 01 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c00103b7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00103c1:	e9 7b 01 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c00103c6:	56                   	push   esi
c00103c7:	56                   	push   esi
c00103c8:	68 03 1e 02 c0       	push   0xc0021e03
c00103cd:	55                   	push   ebp
c00103ce:	e8 ad 03 ff ff       	call   c0000780 <strcmp>
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	85 c0                	test   eax,eax
c00103d8:	75 0f                	jne    c00103e9 <CPU::detectFeatures()+0x273>
c00103da:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00103e4:	e9 58 01 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c00103e9:	51                   	push   ecx
c00103ea:	51                   	push   ecx
c00103eb:	68 c2 1d 02 c0       	push   0xc0021dc2
c00103f0:	55                   	push   ebp
c00103f1:	e8 8a 03 ff ff       	call   c0000780 <strcmp>
c00103f6:	83 c4 10             	add    esp,0x10
c00103f9:	85 c0                	test   eax,eax
c00103fb:	75 0f                	jne    c001040c <CPU::detectFeatures()+0x296>
c00103fd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010407:	e9 35 01 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c001040c:	52                   	push   edx
c001040d:	52                   	push   edx
c001040e:	68 10 1e 02 c0       	push   0xc0021e10
c0010413:	55                   	push   ebp
c0010414:	e8 67 03 ff ff       	call   c0000780 <strcmp>
c0010419:	83 c4 10             	add    esp,0x10
c001041c:	85 c0                	test   eax,eax
c001041e:	75 0f                	jne    c001042f <CPU::detectFeatures()+0x2b9>
c0010420:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001042a:	e9 12 01 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c001042f:	50                   	push   eax
c0010430:	50                   	push   eax
c0010431:	68 1d 1e 02 c0       	push   0xc0021e1d
c0010436:	55                   	push   ebp
c0010437:	e8 44 03 ff ff       	call   c0000780 <strcmp>
c001043c:	83 c4 10             	add    esp,0x10
c001043f:	85 c0                	test   eax,eax
c0010441:	75 0f                	jne    c0010452 <CPU::detectFeatures()+0x2dc>
c0010443:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001044d:	e9 ef 00 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c0010452:	50                   	push   eax
c0010453:	50                   	push   eax
c0010454:	68 2a 1e 02 c0       	push   0xc0021e2a
c0010459:	55                   	push   ebp
c001045a:	e8 21 03 ff ff       	call   c0000780 <strcmp>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	85 c0                	test   eax,eax
c0010464:	75 0f                	jne    c0010475 <CPU::detectFeatures()+0x2ff>
c0010466:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010470:	e9 cc 00 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c0010475:	50                   	push   eax
c0010476:	50                   	push   eax
c0010477:	68 37 1e 02 c0       	push   0xc0021e37
c001047c:	55                   	push   ebp
c001047d:	e8 fe 02 ff ff       	call   c0000780 <strcmp>
c0010482:	83 c4 10             	add    esp,0x10
c0010485:	85 c0                	test   eax,eax
c0010487:	75 0f                	jne    c0010498 <CPU::detectFeatures()+0x322>
c0010489:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010493:	e9 a9 00 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c0010498:	50                   	push   eax
c0010499:	50                   	push   eax
c001049a:	68 44 1e 02 c0       	push   0xc0021e44
c001049f:	55                   	push   ebp
c00104a0:	e8 db 02 ff ff       	call   c0000780 <strcmp>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	85 c0                	test   eax,eax
c00104aa:	75 0f                	jne    c00104bb <CPU::detectFeatures()+0x345>
c00104ac:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00104b6:	e9 86 00 00 00       	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c00104bb:	50                   	push   eax
c00104bc:	50                   	push   eax
c00104bd:	68 51 1e 02 c0       	push   0xc0021e51
c00104c2:	55                   	push   ebp
c00104c3:	e8 b8 02 ff ff       	call   c0000780 <strcmp>
c00104c8:	83 c4 10             	add    esp,0x10
c00104cb:	85 c0                	test   eax,eax
c00104cd:	75 0c                	jne    c00104db <CPU::detectFeatures()+0x365>
c00104cf:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104d9:	eb 66                	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c00104db:	50                   	push   eax
c00104dc:	50                   	push   eax
c00104dd:	68 5e 1e 02 c0       	push   0xc0021e5e
c00104e2:	55                   	push   ebp
c00104e3:	e8 98 02 ff ff       	call   c0000780 <strcmp>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	85 c0                	test   eax,eax
c00104ed:	75 0c                	jne    c00104fb <CPU::detectFeatures()+0x385>
c00104ef:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00104f9:	eb 46                	jmp    c0010541 <CPU::detectFeatures()+0x3cb>
c00104fb:	57                   	push   edi
c00104fc:	57                   	push   edi
c00104fd:	68 6b 1e 02 c0       	push   0xc0021e6b
c0010502:	55                   	push   ebp
c0010503:	e8 78 02 ff ff       	call   c0000780 <strcmp>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	85 c0                	test   eax,eax
c001050d:	74 e0                	je     c00104ef <CPU::detectFeatures()+0x379>
c001050f:	56                   	push   esi
c0010510:	56                   	push   esi
c0010511:	68 78 1e 02 c0       	push   0xc0021e78
c0010516:	55                   	push   ebp
c0010517:	e8 64 02 ff ff       	call   c0000780 <strcmp>
c001051c:	83 c4 10             	add    esp,0x10
c001051f:	85 c0                	test   eax,eax
c0010521:	74 cc                	je     c00104ef <CPU::detectFeatures()+0x379>
c0010523:	51                   	push   ecx
c0010524:	51                   	push   ecx
c0010525:	68 85 1e 02 c0       	push   0xc0021e85
c001052a:	55                   	push   ebp
c001052b:	e8 50 02 ff ff       	call   c0000780 <strcmp>
c0010530:	83 c4 10             	add    esp,0x10
c0010533:	85 c0                	test   eax,eax
c0010535:	74 b8                	je     c00104ef <CPU::detectFeatures()+0x379>
c0010537:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010541:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010546:	0f 86 be 00 00 00    	jbe    c001060a <CPU::detectFeatures()+0x494>
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	68 80 00 00 00       	push   0x80
c0010554:	e8 31 fb ff ff       	call   c001008a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010559:	83 e0 01             	and    eax,0x1
c001055c:	c1 e0 06             	shl    eax,0x6
c001055f:	89 c2                	mov    edx,eax
c0010561:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010567:	83 e0 bf             	and    eax,0xffffffbf
c001056a:	09 d0                	or     eax,edx
c001056c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010572:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010579:	e8 0c fb ff ff       	call   c001008a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001057e:	83 e0 01             	and    eax,0x1
c0010581:	c1 e0 04             	shl    eax,0x4
c0010584:	89 c2                	mov    edx,eax
c0010586:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001058c:	83 e0 ef             	and    eax,0xffffffef
c001058f:	09 d0                	or     eax,edx
c0010591:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010597:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001059e:	e8 e7 fa ff ff       	call   c001008a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105a3:	89 c2                	mov    edx,eax
c00105a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105ab:	c1 e2 07             	shl    edx,0x7
c00105ae:	83 e0 7f             	and    eax,0x7f
c00105b1:	09 d0                	or     eax,edx
c00105b3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105b9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00105c0:	e8 f3 fa ff ff       	call   c00100b8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105c5:	83 e0 01             	and    eax,0x1
c00105c8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105d5:	83 e0 f7             	and    eax,0xfffffff7
c00105d8:	09 d0                	or     eax,edx
c00105da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105e0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00105e7:	e8 cc fa ff ff       	call   c00100b8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105ec:	83 c4 10             	add    esp,0x10
c00105ef:	83 e0 01             	and    eax,0x1
c00105f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105f9:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105ff:	83 e0 fb             	and    eax,0xfffffffb
c0010602:	09 d0                	or     eax,edx
c0010604:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010611:	50                   	push   eax
c0010612:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010616:	50                   	push   eax
c0010617:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001061b:	57                   	push   edi
c001061c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010620:	56                   	push   esi
c0010621:	6a 01                	push   0x1
c0010623:	e8 82 f9 ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010628:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001062c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010632:	89 c1                	mov    ecx,eax
c0010634:	83 e1 0f             	and    ecx,0xf
c0010637:	83 e2 f0             	and    edx,0xfffffff0
c001063a:	09 ca                	or     edx,ecx
c001063c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010642:	89 c2                	mov    edx,eax
c0010644:	c1 ea 04             	shr    edx,0x4
c0010647:	83 e2 0f             	and    edx,0xf
c001064a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001064e:	89 d1                	mov    ecx,edx
c0010650:	83 c4 20             	add    esp,0x20
c0010653:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010659:	c1 e1 06             	shl    ecx,0x6
c001065c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010662:	09 ca                	or     edx,ecx
c0010664:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001066b:	89 c2                	mov    edx,eax
c001066d:	c1 ea 08             	shr    edx,0x8
c0010670:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010676:	83 e2 0f             	and    edx,0xf
c0010679:	89 d5                	mov    ebp,edx
c001067b:	83 e5 03             	and    ebp,0x3
c001067e:	c1 e5 06             	shl    ebp,0x6
c0010681:	83 e1 3f             	and    ecx,0x3f
c0010684:	09 e9                	or     ecx,ebp
c0010686:	89 d5                	mov    ebp,edx
c0010688:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001068e:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010694:	c1 ed 02             	shr    ebp,0x2
c0010697:	83 e1 c0             	and    ecx,0xffffffc0
c001069a:	09 e9                	or     ecx,ebp
c001069c:	89 c5                	mov    ebp,eax
c001069e:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00106a4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00106aa:	c1 ed 08             	shr    ebp,0x8
c00106ad:	83 e5 30             	and    ebp,0x30
c00106b0:	83 e1 cf             	and    ecx,0xffffffcf
c00106b3:	09 e9                	or     ecx,ebp
c00106b5:	83 fa 06             	cmp    edx,0x6
c00106b8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00106be:	74 05                	je     c00106c5 <CPU::detectFeatures()+0x54f>
c00106c0:	83 fa 0f             	cmp    edx,0xf
c00106c3:	75 64                	jne    c0010729 <CPU::detectFeatures()+0x5b3>
c00106c5:	89 c1                	mov    ecx,eax
c00106c7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00106cd:	c1 e9 10             	shr    ecx,0x10
c00106d0:	c1 e1 04             	shl    ecx,0x4
c00106d3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00106d7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106dd:	0f b6 c9             	movzx  ecx,cl
c00106e0:	c1 e1 06             	shl    ecx,0x6
c00106e3:	09 e9                	or     ecx,ebp
c00106e5:	83 fa 0f             	cmp    edx,0xf
c00106e8:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00106ef:	75 38                	jne    c0010729 <CPU::detectFeatures()+0x5b3>
c00106f1:	c1 e8 14             	shr    eax,0x14
c00106f4:	83 c0 0f             	add    eax,0xf
c00106f7:	0f b6 c0             	movzx  eax,al
c00106fa:	89 c2                	mov    edx,eax
c00106fc:	c1 e8 02             	shr    eax,0x2
c00106ff:	83 e2 03             	and    edx,0x3
c0010702:	89 d1                	mov    ecx,edx
c0010704:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001070a:	c1 e1 06             	shl    ecx,0x6
c001070d:	83 e2 3f             	and    edx,0x3f
c0010710:	09 ca                	or     edx,ecx
c0010712:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010718:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001071e:	83 e2 c0             	and    edx,0xffffffc0
c0010721:	09 d0                	or     eax,edx
c0010723:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010729:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001072f:	83 ec 0c             	sub    esp,0xc
c0010732:	83 c8 07             	or     eax,0x7
c0010735:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001073b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001073f:	50                   	push   eax
c0010740:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010744:	55                   	push   ebp
c0010745:	57                   	push   edi
c0010746:	56                   	push   esi
c0010747:	68 00 00 00 80       	push   0x80000000
c001074c:	e8 59 f8 ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010751:	83 c4 20             	add    esp,0x20
c0010754:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001075c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010760:	76 1e                	jbe    c0010780 <CPU::detectFeatures()+0x60a>
c0010762:	83 ec 0c             	sub    esp,0xc
c0010765:	50                   	push   eax
c0010766:	55                   	push   ebp
c0010767:	57                   	push   edi
c0010768:	56                   	push   esi
c0010769:	68 01 00 00 80       	push   0x80000001
c001076e:	e8 37 f8 ff ff       	call   c000ffaa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010773:	83 c4 20             	add    esp,0x20
c0010776:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010780:	52                   	push   edx
c0010781:	52                   	push   edx
c0010782:	68 91 1e 02 c0       	push   0xc0021e91
c0010787:	53                   	push   ebx
c0010788:	e8 29 c1 ff ff       	call   c000c8b6 <Device::setName(char const*)>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	eb 69                	jmp    c00107fb <CPU::detectFeatures()+0x685>
c0010792:	50                   	push   eax
c0010793:	50                   	push   eax
c0010794:	68 f6 1d 02 c0       	push   0xc0021df6
c0010799:	55                   	push   ebp
c001079a:	e8 b1 fe fe ff       	call   c0000650 <strcpy>
c001079f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107a9:	e8 15 fa fe ff       	call   c00001c3 <is486>
c00107ae:	83 c4 10             	add    esp,0x10
c00107b1:	85 c0                	test   eax,eax
c00107b3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107b9:	74 1f                	je     c00107da <CPU::detectFeatures()+0x664>
c00107bb:	83 c8 07             	or     eax,0x7
c00107be:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107c4:	0f 20 c0             	mov    eax,cr0
c00107c7:	83 e0 14             	and    eax,0x14
c00107ca:	83 f8 04             	cmp    eax,0x4
c00107cd:	75 10                	jne    c00107df <CPU::detectFeatures()+0x669>
c00107cf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107d5:	83 e0 fd             	and    eax,0xfffffffd
c00107d8:	eb 1b                	jmp    c00107f5 <CPU::detectFeatures()+0x67f>
c00107da:	83 e0 f8             	and    eax,0xfffffff8
c00107dd:	eb df                	jmp    c00107be <CPU::detectFeatures()+0x648>
c00107df:	e8 ba f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107e4:	83 e0 01             	and    eax,0x1
c00107e7:	8d 14 00             	lea    edx,[eax+eax*1]
c00107ea:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107f0:	83 e0 fd             	and    eax,0xfffffffd
c00107f3:	09 d0                	or     eax,edx
c00107f5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107fb:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010802:	74 17                	je     c001081b <CPU::detectFeatures()+0x6a5>
c0010804:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001080a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010810:	83 c8 10             	or     eax,0x10
c0010813:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010819:	eb 20                	jmp    c001083b <CPU::detectFeatures()+0x6c5>
c001081b:	e8 7e f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010820:	83 e0 01             	and    eax,0x1
c0010823:	8d 14 00             	lea    edx,[eax+eax*1]
c0010826:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001082c:	83 e0 fd             	and    eax,0xfffffffd
c001082f:	09 d0                	or     eax,edx
c0010831:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010837:	a8 02                	test   al,0x2
c0010839:	75 c9                	jne    c0010804 <CPU::detectFeatures()+0x68e>
c001083b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010842:	83 c4 2c             	add    esp,0x2c
c0010845:	5b                   	pop    ebx
c0010846:	5e                   	pop    esi
c0010847:	5f                   	pop    edi
c0010848:	5d                   	pop    ebp
c0010849:	c3                   	ret    

c001084a <CPU::setupSMEP()>:
c001084a:	0f 20 e0             	mov    eax,cr4
c001084d:	0d 00 00 10 00       	or     eax,0x100000
c0010852:	0f 22 e0             	mov    cr4,eax
c0010855:	c3                   	ret    

c0010856 <CPU::setupUMIP()>:
c0010856:	0f 20 e0             	mov    eax,cr4
c0010859:	80 cc 08             	or     ah,0x8
c001085c:	0f 22 e0             	mov    cr4,eax
c001085f:	c3                   	ret    

c0010860 <CPU::setupTSC()>:
c0010860:	0f 20 e0             	mov    eax,cr4
c0010863:	83 c8 04             	or     eax,0x4
c0010866:	0f 22 e0             	mov    cr4,eax
c0010869:	c3                   	ret    

c001086a <CPU::setupLargePages()>:
c001086a:	0f 20 e0             	mov    eax,cr4
c001086d:	83 c8 10             	or     eax,0x10
c0010870:	0f 22 e0             	mov    cr4,eax
c0010873:	c3                   	ret    

c0010874 <CPU::setupPAT()>:
c0010874:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010879:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010880:	74 2c                	je     c00108ae <CPU::setupPAT()+0x3a>
c0010882:	53                   	push   ebx
c0010883:	83 ec 10             	sub    esp,0x10
c0010886:	68 77 02 00 00       	push   0x277
c001088b:	50                   	push   eax
c001088c:	e8 51 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010891:	83 e2 f8             	and    edx,0xfffffff8
c0010894:	83 ca 01             	or     edx,0x1
c0010897:	52                   	push   edx
c0010898:	50                   	push   eax
c0010899:	68 77 02 00 00       	push   0x277
c001089e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00108a4:	e8 65 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00108a9:	83 c4 28             	add    esp,0x28
c00108ac:	5b                   	pop    ebx
c00108ad:	c3                   	ret    
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <CPU::setupMTRR()>:
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <CPU::setupGlobalPages()>:
c00108b2:	0f 20 e0             	mov    eax,cr4
c00108b5:	0c 80                	or     al,0x80
c00108b7:	0f 22 e0             	mov    cr4,eax
c00108ba:	c3                   	ret    
c00108bb:	90                   	nop

c00108bc <CPU::allowUsermodeDataAccess()>:
c00108bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108c7:	74 03                	je     c00108cc <CPU::allowUsermodeDataAccess()+0x10>
c00108c9:	0f 01 cb             	stac   
c00108cc:	c3                   	ret    
c00108cd:	90                   	nop

c00108ce <CPU::prohibitUsermodeDataAccess()>:
c00108ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108d9:	74 03                	je     c00108de <CPU::prohibitUsermodeDataAccess()+0x10>
c00108db:	0f 01 ca             	clac   
c00108de:	c3                   	ret    
c00108df:	90                   	nop

c00108e0 <CPU::setupSMAP()>:
c00108e0:	0f 20 e0             	mov    eax,cr4
c00108e3:	0d 00 00 20 00       	or     eax,0x200000
c00108e8:	0f 22 e0             	mov    cr4,eax
c00108eb:	eb e1                	jmp    c00108ce <CPU::prohibitUsermodeDataAccess()>
c00108ed:	90                   	nop

c00108ee <CPU::setupFeatures()>:
c00108ee:	53                   	push   ebx
c00108ef:	83 ec 08             	sub    esp,0x8
c00108f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108f6:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00108fd:	74 18                	je     c0010917 <CPU::setupFeatures()+0x29>
c00108ff:	83 ec 0c             	sub    esp,0xc
c0010902:	68 9d 1e 02 c0       	push   0xc0021e9d
c0010907:	e8 fe 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001090c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001090f:	e8 42 ff ff ff       	call   c0010856 <CPU::setupUMIP()>
c0010914:	83 c4 10             	add    esp,0x10
c0010917:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001091e:	74 18                	je     c0010938 <CPU::setupFeatures()+0x4a>
c0010920:	83 ec 0c             	sub    esp,0xc
c0010923:	68 a7 1e 02 c0       	push   0xc0021ea7
c0010928:	e8 dd 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001092d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010930:	e8 2b ff ff ff       	call   c0010860 <CPU::setupTSC()>
c0010935:	83 c4 10             	add    esp,0x10
c0010938:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001093f:	74 18                	je     c0010959 <CPU::setupFeatures()+0x6b>
c0010941:	83 ec 0c             	sub    esp,0xc
c0010944:	68 b0 1e 02 c0       	push   0xc0021eb0
c0010949:	e8 bc 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001094e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010951:	e8 14 ff ff ff       	call   c001086a <CPU::setupLargePages()>
c0010956:	83 c4 10             	add    esp,0x10
c0010959:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010960:	74 18                	je     c001097a <CPU::setupFeatures()+0x8c>
c0010962:	83 ec 0c             	sub    esp,0xc
c0010965:	68 b9 1e 02 c0       	push   0xc0021eb9
c001096a:	e8 9b 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001096f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010972:	e8 3b ff ff ff       	call   c00108b2 <CPU::setupGlobalPages()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010981:	74 18                	je     c001099b <CPU::setupFeatures()+0xad>
c0010983:	83 ec 0c             	sub    esp,0xc
c0010986:	68 cb 1e 02 c0       	push   0xc0021ecb
c001098b:	e8 7a 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010993:	e8 dc fe ff ff       	call   c0010874 <CPU::setupPAT()>
c0010998:	83 c4 10             	add    esp,0x10
c001099b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00109a2:	74 11                	je     c00109b5 <CPU::setupFeatures()+0xc7>
c00109a4:	c7 44 24 10 d4 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021ed4
c00109ac:	83 c4 08             	add    esp,0x8
c00109af:	5b                   	pop    ebx
c00109b0:	e9 55 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00109b5:	83 c4 08             	add    esp,0x8
c00109b8:	5b                   	pop    ebx
c00109b9:	c3                   	ret    

c00109ba <CPU::open(int, int, void*)>:
c00109ba:	55                   	push   ebp
c00109bb:	57                   	push   edi
c00109bc:	56                   	push   esi
c00109bd:	53                   	push   ebx
c00109be:	83 ec 18             	sub    esp,0x18
c00109c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00109c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00109cd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00109d3:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109d9:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00109df:	50                   	push   eax
c00109e0:	e8 f9 69 ff ff       	call   c00073de <GDT::setup()>
c00109e5:	83 c4 0c             	add    esp,0xc
c00109e8:	6a 00                	push   0x0
c00109ea:	68 ef be ad de       	push   0xdeadbeef
c00109ef:	55                   	push   ebp
c00109f0:	e8 7b 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c00109f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00109f8:	e8 53 85 ff ff       	call   c0008f50 <TSS::flush()>
c00109fd:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a03:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a06:	e8 37 6c ff ff       	call   c0007642 <IDT::setup()>
c0010a0b:	b8 00 04 00 00       	mov    eax,0x400
c0010a10:	0f 23 f8             	mov    db7,eax
c0010a13:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a1d:	e8 c0 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	85 f6                	test   esi,esi
c0010a27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010a2d:	89 38                	mov    DWORD PTR [eax],edi
c0010a2f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a35:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a38:	74 10                	je     c0010a4a <CPU::open(int, int, void*)+0x90>
c0010a3a:	50                   	push   eax
c0010a3b:	50                   	push   eax
c0010a3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a42:	56                   	push   esi
c0010a43:	e8 44 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a48:	eb 0d                	jmp    c0010a57 <CPU::open(int, int, void*)+0x9d>
c0010a4a:	83 ec 0c             	sub    esp,0xc
c0010a4d:	68 de 1e 02 c0       	push   0xc0021ede
c0010a52:	e8 72 08 00 00       	call   c00112c9 <KePanic(char const*)>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	83 ec 0c             	sub    esp,0xc
c0010a5d:	68 ec 1e 02 c0       	push   0xc0021eec
c0010a62:	e8 8e 01 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0010a67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a6a:	e8 07 f7 ff ff       	call   c0010176 <CPU::detectFeatures()>
c0010a6f:	c7 04 24 0f 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f0f
c0010a76:	e8 7a 01 00 00       	call   c0010bf5 <KeSetBootMessage(char const*)>
c0010a7b:	e8 b7 73 00 00       	call   c0017e37 <HalInitialise()>
c0010a80:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a85:	83 e0 10             	and    eax,0x10
c0010a88:	83 f8 01             	cmp    eax,0x1
c0010a8b:	19 c0                	sbb    eax,eax
c0010a8d:	83 e0 46             	and    eax,0x46
c0010a90:	83 c0 1e             	add    eax,0x1e
c0010a93:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a96:	e8 c2 d6 ff ff       	call   c000e15d <setupTimer(int)>
c0010a9b:	83 c4 10             	add    esp,0x10
c0010a9e:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010aa5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010aab:	74 0c                	je     c0010ab9 <CPU::open(int, int, void*)+0xff>
c0010aad:	83 ec 0c             	sub    esp,0xc
c0010ab0:	53                   	push   ebx
c0010ab1:	e8 38 fe ff ff       	call   c00108ee <CPU::setupFeatures()>
c0010ab6:	83 c4 10             	add    esp,0x10
c0010ab9:	83 c4 0c             	add    esp,0xc
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	5b                   	pop    ebx
c0010abf:	5e                   	pop    esi
c0010ac0:	5f                   	pop    edi
c0010ac1:	5d                   	pop    ebp
c0010ac2:	c3                   	ret    

c0010ac3 <KeInitialiseAtexit()>:
c0010ac3:	83 ec 10             	sub    esp,0x10
c0010ac6:	6a 60                	push   0x60
c0010ac8:	6a 00                	push   0x0
c0010aca:	68 20 8e 02 c0       	push   0xc0028e20
c0010acf:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010ad9:	e8 12 fa fe ff       	call   c00004f0 <memset>
c0010ade:	83 c4 1c             	add    esp,0x1c
c0010ae1:	c3                   	ret    

c0010ae2 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010ae2:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010ae7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010aeb:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010af2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010af6:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010afd:	40                   	inc    eax
c0010afe:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b03:	83 f8 17             	cmp    eax,0x17
c0010b06:	7e 0d                	jle    c0010b15 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b08:	c7 44 24 04 50 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f50
c0010b10:	e9 b4 07 00 00       	jmp    c00112c9 <KePanic(char const*)>
c0010b15:	c3                   	ret    

c0010b16 <KeExecuteAtexit()>:
c0010b16:	53                   	push   ebx
c0010b17:	31 db                	xor    ebx,ebx
c0010b19:	83 ec 08             	sub    esp,0x8
c0010b1c:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b22:	7e 50                	jle    c0010b74 <KeExecuteAtexit()+0x5e>
c0010b24:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010b2b:	85 c0                	test   eax,eax
c0010b2d:	74 42                	je     c0010b71 <KeExecuteAtexit()+0x5b>
c0010b2f:	51                   	push   ecx
c0010b30:	50                   	push   eax
c0010b31:	53                   	push   ebx
c0010b32:	68 69 1f 02 c0       	push   0xc0021f69
c0010b37:	e8 ce 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b3c:	58                   	pop    eax
c0010b3d:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b44:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b4b:	c7 04 24 8b 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f8b
c0010b52:	e8 b3 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b57:	c7 04 24 eb 30 02 c0 	mov    DWORD PTR [esp],0xc00230eb
c0010b5e:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b69:	e8 9c 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	43                   	inc    ebx
c0010b72:	eb a8                	jmp    c0010b1c <KeExecuteAtexit()+0x6>
c0010b74:	83 c4 08             	add    esp,0x8
c0010b77:	5b                   	pop    ebx
c0010b78:	c3                   	ret    

c0010b79 <KeDisplaySplashScreen()>:
c0010b79:	55                   	push   ebp
c0010b7a:	bd 05 00 00 00       	mov    ebp,0x5
c0010b7f:	57                   	push   edi
c0010b80:	bf 0a 00 00 00       	mov    edi,0xa
c0010b85:	56                   	push   esi
c0010b86:	31 f6                	xor    esi,esi
c0010b88:	53                   	push   ebx
c0010b89:	31 db                	xor    ebx,ebx
c0010b8b:	83 ec 0c             	sub    esp,0xc
c0010b8e:	0f b6 96 40 33 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdccc0]
c0010b95:	85 d2                	test   edx,edx
c0010b97:	89 d0                	mov    eax,edx
c0010b99:	74 52                	je     c0010bed <KeDisplaySplashScreen()+0x74>
c0010b9b:	80 bb 76 33 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcc8a],0xdb
c0010ba2:	75 13                	jne    c0010bb7 <KeDisplaySplashScreen()+0x3e>
c0010ba4:	0f b6 8b 75 33 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcc8b]
c0010bab:	83 e1 fe             	and    ecx,0xfffffffe
c0010bae:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010bb4:	75 01                	jne    c0010bb7 <KeDisplaySplashScreen()+0x3e>
c0010bb6:	47                   	inc    edi
c0010bb7:	83 fa 0d             	cmp    edx,0xd
c0010bba:	74 28                	je     c0010be4 <KeDisplaySplashScreen()+0x6b>
c0010bbc:	83 fa 0a             	cmp    edx,0xa
c0010bbf:	75 0a                	jne    c0010bcb <KeDisplaySplashScreen()+0x52>
c0010bc1:	45                   	inc    ebp
c0010bc2:	bf 0a 00 00 00       	mov    edi,0xa
c0010bc7:	31 db                	xor    ebx,ebx
c0010bc9:	eb 19                	jmp    c0010be4 <KeDisplaySplashScreen()+0x6b>
c0010bcb:	83 ec 0c             	sub    esp,0xc
c0010bce:	0f be c0             	movsx  eax,al
c0010bd1:	55                   	push   ebp
c0010bd2:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010bd5:	43                   	inc    ebx
c0010bd6:	52                   	push   edx
c0010bd7:	6a 00                	push   0x0
c0010bd9:	6a 0e                	push   0xe
c0010bdb:	50                   	push   eax
c0010bdc:	e8 d3 7e 00 00       	call   c0018ab4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010be1:	83 c4 20             	add    esp,0x20
c0010be4:	46                   	inc    esi
c0010be5:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010beb:	75 a1                	jne    c0010b8e <KeDisplaySplashScreen()+0x15>
c0010bed:	83 c4 0c             	add    esp,0xc
c0010bf0:	5b                   	pop    ebx
c0010bf1:	5e                   	pop    esi
c0010bf2:	5f                   	pop    edi
c0010bf3:	5d                   	pop    ebp
c0010bf4:	c3                   	ret    

c0010bf5 <KeSetBootMessage(char const*)>:
c0010bf5:	57                   	push   edi
c0010bf6:	56                   	push   esi
c0010bf7:	53                   	push   ebx
c0010bf8:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010bfe:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c05:	68 9e 00 00 00       	push   0x9e
c0010c0a:	6a 00                	push   0x0
c0010c0c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c10:	56                   	push   esi
c0010c11:	e8 da f8 fe ff       	call   c00004f0 <memset>
c0010c16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c19:	e8 62 f9 fe ff       	call   c0000580 <strlen>
c0010c1e:	ba 50 00 00 00       	mov    edx,0x50
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	31 c9                	xor    ecx,ecx
c0010c28:	29 c2                	sub    edx,eax
c0010c2a:	83 e2 fe             	and    edx,0xfffffffe
c0010c2d:	01 f2                	add    edx,esi
c0010c2f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c34:	84 c0                	test   al,al
c0010c36:	74 0a                	je     c0010c42 <KeSetBootMessage(char const*)+0x4d>
c0010c38:	80 cc 0f             	or     ah,0xf
c0010c3b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c3f:	41                   	inc    ecx
c0010c40:	eb ed                	jmp    c0010c2f <KeSetBootMessage(char const*)+0x3a>
c0010c42:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c47:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c4e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c54:	5b                   	pop    ebx
c0010c55:	5e                   	pop    esi
c0010c56:	5f                   	pop    edi
c0010c57:	c3                   	ret    

c0010c58 <Krnl::handlePowerButton()>:
c0010c58:	83 ec 0c             	sub    esp,0xc
c0010c5b:	e8 c4 06 00 00       	call   c0011324 <KeHandlePowerButton()>
c0010c60:	90                   	nop
c0010c61:	83 c4 0c             	add    esp,0xc
c0010c64:	c3                   	ret    
c0010c65:	8d 76 00             	lea    esi,[esi+0x0]

c0010c68 <Krnl::handleSleepButton()>:
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	e8 e9 06 00 00       	call   c0011359 <KeHandleSleepButton()>
c0010c70:	90                   	nop
c0010c71:	83 c4 0c             	add    esp,0xc
c0010c74:	c3                   	ret    
c0010c75:	90                   	nop

c0010c76 <EnvVarContainer::getEnv(char const*)>:
c0010c76:	57                   	push   edi
c0010c77:	56                   	push   esi
c0010c78:	53                   	push   ebx
c0010c79:	31 db                	xor    ebx,ebx
c0010c7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c7f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c81:	7e 2b                	jle    c0010cae <EnvVarContainer::getEnv(char const*)+0x38>
c0010c83:	50                   	push   eax
c0010c84:	50                   	push   eax
c0010c85:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c88:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c8f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c96:	e8 e5 fa fe ff       	call   c0000780 <strcmp>
c0010c9b:	83 c4 10             	add    esp,0x10
c0010c9e:	85 c0                	test   eax,eax
c0010ca0:	75 09                	jne    c0010cab <EnvVarContainer::getEnv(char const*)+0x35>
c0010ca2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ca5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ca9:	eb 05                	jmp    c0010cb0 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010cab:	43                   	inc    ebx
c0010cac:	eb d1                	jmp    c0010c7f <EnvVarContainer::getEnv(char const*)+0x9>
c0010cae:	31 c0                	xor    eax,eax
c0010cb0:	5b                   	pop    ebx
c0010cb1:	5e                   	pop    esi
c0010cb2:	5f                   	pop    edi
c0010cb3:	c3                   	ret    

c0010cb4 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010cb4:	55                   	push   ebp
c0010cb5:	57                   	push   edi
c0010cb6:	56                   	push   esi
c0010cb7:	53                   	push   ebx
c0010cb8:	83 ec 28             	sub    esp,0x28
c0010cbb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010cbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010cc3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010cc7:	56                   	push   esi
c0010cc8:	e8 b3 f8 fe ff       	call   c0000580 <strlen>
c0010ccd:	40                   	inc    eax
c0010cce:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cd1:	e8 fd 6d ff ff       	call   c0007ad3 <malloc>
c0010cd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010cdd:	e8 9e f8 fe ff       	call   c0000580 <strlen>
c0010ce2:	40                   	inc    eax
c0010ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ce6:	e8 e8 6d ff ff       	call   c0007ad3 <malloc>
c0010ceb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010cf2:	e8 89 f8 fe ff       	call   c0000580 <strlen>
c0010cf7:	83 c4 0c             	add    esp,0xc
c0010cfa:	40                   	inc    eax
c0010cfb:	50                   	push   eax
c0010cfc:	6a 00                	push   0x0
c0010cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d02:	e8 e9 f7 fe ff       	call   c00004f0 <memset>
c0010d07:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d0a:	e8 71 f8 fe ff       	call   c0000580 <strlen>
c0010d0f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d13:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d1b:	89 de                	mov    esi,ebx
c0010d1d:	e8 5e f8 fe ff       	call   c0000580 <strlen>
c0010d22:	83 c4 0c             	add    esp,0xc
c0010d25:	40                   	inc    eax
c0010d26:	50                   	push   eax
c0010d27:	6a 00                	push   0x0
c0010d29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d2d:	e8 be f7 fe ff       	call   c00004f0 <memset>
c0010d32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d35:	e8 46 f8 fe ff       	call   c0000580 <strlen>
c0010d3a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d3e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d46:	40                   	inc    eax
c0010d47:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d4a:	c1 e0 03             	shl    eax,0x3
c0010d4d:	5a                   	pop    edx
c0010d4e:	59                   	pop    ecx
c0010d4f:	50                   	push   eax
c0010d50:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d53:	e8 67 6d ff ff       	call   c0007abf <realloc>
c0010d58:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d5b:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d5f:	b9 08 00 00 00       	mov    ecx,0x8
c0010d64:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d67:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d6d:	83 c4 2c             	add    esp,0x2c
c0010d70:	5b                   	pop    ebx
c0010d71:	5e                   	pop    esi
c0010d72:	5f                   	pop    edi
c0010d73:	5d                   	pop    ebp
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <EnvVarContainer::deleteEnv(char const*)>:
c0010d76:	c3                   	ret    
c0010d77:	90                   	nop

c0010d78 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d78:	55                   	push   ebp
c0010d79:	57                   	push   edi
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d82:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d89:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d90:	68 14 01 00 00       	push   0x114
c0010d95:	e8 39 6d ff ff       	call   c0007ad3 <malloc>
c0010d9a:	83 c4 0c             	add    esp,0xc
c0010d9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010da0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010da7:	89 c3                	mov    ebx,eax
c0010da9:	50                   	push   eax
c0010daa:	e8 fd aa ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0010daf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db2:	e8 d7 ad ff ff       	call   c000bb8e <File::exists()>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	84 c0                	test   al,al
c0010dbc:	75 31                	jne    c0010def <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010dbe:	50                   	push   eax
c0010dbf:	50                   	push   eax
c0010dc0:	6a 12                	push   0x12
c0010dc2:	53                   	push   ebx
c0010dc3:	e8 02 ab ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0010dc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dca:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010dcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dd0:	e8 ab f7 fe ff       	call   c0000580 <strlen>
c0010dd5:	5a                   	pop    edx
c0010dd6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010dda:	52                   	push   edx
c0010ddb:	31 d2                	xor    edx,edx
c0010ddd:	56                   	push   esi
c0010dde:	52                   	push   edx
c0010ddf:	50                   	push   eax
c0010de0:	53                   	push   ebx
c0010de1:	ff d7                	call   edi
c0010de3:	83 c4 14             	add    esp,0x14
c0010de6:	53                   	push   ebx
c0010de7:	e8 3c ab ff ff       	call   c000b928 <File::close()>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	56                   	push   esi
c0010df0:	31 f6                	xor    esi,esi
c0010df2:	68 00 01 00 00       	push   0x100
c0010df7:	6a 00                	push   0x0
c0010df9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010dfd:	50                   	push   eax
c0010dfe:	e8 ed f6 fe ff       	call   c00004f0 <memset>
c0010e03:	5f                   	pop    edi
c0010e04:	58                   	pop    eax
c0010e05:	6a 01                	push   0x1
c0010e07:	53                   	push   ebx
c0010e08:	e8 bd aa ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e18:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e20:	83 ec 0c             	sub    esp,0xc
c0010e23:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010e27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e29:	52                   	push   edx
c0010e2a:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010e2e:	51                   	push   ecx
c0010e2f:	6a 00                	push   0x0
c0010e31:	6a 01                	push   0x1
c0010e33:	53                   	push   ebx
c0010e34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e37:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e3c:	83 c4 20             	add    esp,0x20
c0010e3f:	85 c0                	test   eax,eax
c0010e41:	89 c1                	mov    ecx,eax
c0010e43:	0f 84 36 01 00 00    	je     c0010f7f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e49:	83 f8 0d             	cmp    eax,0xd
c0010e4c:	0f 84 22 01 00 00    	je     c0010f74 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e52:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e57:	0f 84 f0 00 00 00    	je     c0010f4d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e5d:	83 f8 0a             	cmp    eax,0xa
c0010e60:	74 13                	je     c0010e75 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e62:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e67:	74 0c                	je     c0010e75 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e69:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e6f:	0f 8e f6 00 00 00    	jle    c0010f6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e79:	83 ec 0c             	sub    esp,0xc
c0010e7c:	8d 78 01             	lea    edi,[eax+0x1]
c0010e7f:	57                   	push   edi
c0010e80:	e8 4e 6c ff ff       	call   c0007ad3 <malloc>
c0010e85:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e89:	8d 56 04             	lea    edx,[esi+0x4]
c0010e8c:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e97:	e8 37 6c ff ff       	call   c0007ad3 <malloc>
c0010e9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010ea0:	83 c4 0c             	add    esp,0xc
c0010ea3:	57                   	push   edi
c0010ea4:	6a 00                	push   0x0
c0010ea6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eaa:	e8 41 f6 fe ff       	call   c00004f0 <memset>
c0010eaf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010eb3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010eb7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010ebb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ebd:	83 c4 0c             	add    esp,0xc
c0010ec0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ec4:	52                   	push   edx
c0010ec5:	6a 00                	push   0x0
c0010ec7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ecb:	e8 20 f6 fe ff       	call   c00004f0 <memset>
c0010ed0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ed4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010ed8:	89 34 24             	mov    DWORD PTR [esp],esi
c0010edb:	e8 a0 f6 fe ff       	call   c0000580 <strlen>
c0010ee0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010ee4:	89 c1                	mov    ecx,eax
c0010ee6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ee8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010ef1:	40                   	inc    eax
c0010ef2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010ef5:	85 d2                	test   edx,edx
c0010ef7:	75 0c                	jne    c0010f05 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ef9:	83 ec 0c             	sub    esp,0xc
c0010efc:	6a 08                	push   0x8
c0010efe:	e8 d0 6b ff ff       	call   c0007ad3 <malloc>
c0010f03:	eb 0c                	jmp    c0010f11 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f05:	51                   	push   ecx
c0010f06:	51                   	push   ecx
c0010f07:	c1 e0 03             	shl    eax,0x3
c0010f0a:	50                   	push   eax
c0010f0b:	52                   	push   edx
c0010f0c:	e8 ae 6b ff ff       	call   c0007abf <realloc>
c0010f11:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f14:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f1d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f21:	b9 08 00 00 00       	mov    ecx,0x8
c0010f26:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f2c:	50                   	push   eax
c0010f2d:	31 f6                	xor    esi,esi
c0010f2f:	68 00 01 00 00       	push   0x100
c0010f34:	6a 00                	push   0x0
c0010f36:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f3a:	50                   	push   eax
c0010f3b:	e8 b0 f5 fe ff       	call   c00004f0 <memset>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f4b:	eb 27                	jmp    c0010f74 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f4d:	83 f8 3d             	cmp    eax,0x3d
c0010f50:	74 1e                	je     c0010f70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f52:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f58:	7f 07                	jg     c0010f61 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f5a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f5e:	46                   	inc    esi
c0010f5f:	eb 13                	jmp    c0010f74 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f61:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f69:	eb 09                	jmp    c0010f74 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f6b:	83 f8 3d             	cmp    eax,0x3d
c0010f6e:	75 ea                	jne    c0010f5a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f70:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f74:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f79:	0f 85 99 fe ff ff    	jne    c0010e18 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f7f:	83 ec 0c             	sub    esp,0xc
c0010f82:	53                   	push   ebx
c0010f83:	e8 a0 a9 ff ff       	call   c000b928 <File::close()>
c0010f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f90:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f96:	5b                   	pop    ebx
c0010f97:	5e                   	pop    esi
c0010f98:	5f                   	pop    edi
c0010f99:	5d                   	pop    ebp
c0010f9a:	c3                   	ret    
c0010f9b:	90                   	nop

c0010f9c <EnvVarContainer::__loadSystem()>:
c0010f9c:	83 ec 10             	sub    esp,0x10
c0010f9f:	68 a0 34 02 c0       	push   0xc00234a0
c0010fa4:	68 90 1f 02 c0       	push   0xc0021f90
c0010fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fad:	e8 c6 fd ff ff       	call   c0010d78 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010fb2:	83 c4 1c             	add    esp,0x1c
c0010fb5:	c3                   	ret    

c0010fb6 <EnvVarContainer::__loadUser()>:
c0010fb6:	c3                   	ret    
c0010fb7:	90                   	nop

c0010fb8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd8:	90                   	nop
c0010fd9:	c3                   	ret    

c0010fda <EnvVarContainer::~EnvVarContainer()>:
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe4:	85 c0                	test   eax,eax
c0010fe6:	74 1d                	je     c0011005 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fee:	85 c0                	test   eax,eax
c0010ff0:	74 13                	je     c0011005 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff9:	83 ec 0c             	sub    esp,0xc
c0010ffc:	50                   	push   eax
c0010ffd:	e8 e1 6a ff ff       	call   c0007ae3 <free>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	90                   	nop
c0011006:	83 c4 0c             	add    esp,0xc
c0011009:	c3                   	ret    

c001100a <KeGetEnv(Process*, char const*)>:
c001100a:	53                   	push   ebx
c001100b:	83 ec 08             	sub    esp,0x8
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011018:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001101c:	74 04                	je     c0011022 <KeGetEnv(Process*, char const*)+0x18>
c001101e:	85 c0                	test   eax,eax
c0011020:	75 0b                	jne    c001102d <KeGetEnv(Process*, char const*)+0x23>
c0011022:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011027:	85 c0                	test   eax,eax
c0011029:	75 19                	jne    c0011044 <KeGetEnv(Process*, char const*)+0x3a>
c001102b:	eb 27                	jmp    c0011054 <KeGetEnv(Process*, char const*)+0x4a>
c001102d:	52                   	push   edx
c001102e:	52                   	push   edx
c001102f:	53                   	push   ebx
c0011030:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011036:	e8 3b fc ff ff       	call   c0010c76 <EnvVarContainer::getEnv(char const*)>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	85 c0                	test   eax,eax
c0011040:	75 28                	jne    c001106a <KeGetEnv(Process*, char const*)+0x60>
c0011042:	eb de                	jmp    c0011022 <KeGetEnv(Process*, char const*)+0x18>
c0011044:	52                   	push   edx
c0011045:	52                   	push   edx
c0011046:	53                   	push   ebx
c0011047:	50                   	push   eax
c0011048:	e8 29 fc ff ff       	call   c0010c76 <EnvVarContainer::getEnv(char const*)>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	85 c0                	test   eax,eax
c0011052:	75 16                	jne    c001106a <KeGetEnv(Process*, char const*)+0x60>
c0011054:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011058:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001105d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011061:	83 c4 08             	add    esp,0x8
c0011064:	5b                   	pop    ebx
c0011065:	e9 0c fc ff ff       	jmp    c0010c76 <EnvVarContainer::getEnv(char const*)>
c001106a:	83 c4 08             	add    esp,0x8
c001106d:	5b                   	pop    ebx
c001106e:	c3                   	ret    

c001106f <KeSetEnvSystem(char const*, char const*)>:
c001106f:	83 ec 10             	sub    esp,0x10
c0011072:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011076:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001107a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011080:	e8 2f fc ff ff       	call   c0010cb4 <EnvVarContainer::setEnv(char const*, char const*)>
c0011085:	83 c4 1c             	add    esp,0x1c
c0011088:	c3                   	ret    

c0011089 <KeSetEnvUser(char const*, char const*)>:
c0011089:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001108e:	85 c0                	test   eax,eax
c0011090:	74 15                	je     c00110a7 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011092:	83 ec 10             	sub    esp,0x10
c0011095:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001109d:	50                   	push   eax
c001109e:	e8 11 fc ff ff       	call   c0010cb4 <EnvVarContainer::setEnv(char const*, char const*)>
c00110a3:	83 c4 1c             	add    esp,0x1c
c00110a6:	c3                   	ret    
c00110a7:	c3                   	ret    

c00110a8 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00110a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110ac:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00110b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110b6:	e9 f9 fb ff ff       	jmp    c0010cb4 <EnvVarContainer::setEnv(char const*, char const*)>

c00110bb <KeDeleteEnvSystem(char const*)>:
c00110bb:	c3                   	ret    

c00110bc <KeDeleteEnvUser(char const*)>:
c00110bc:	c3                   	ret    

c00110bd <KeDeleteEnvProcess(Process*, char const*)>:
c00110bd:	c3                   	ret    

c00110be <KeNewProcessEnv(Process*)>:
c00110be:	83 ec 28             	sub    esp,0x28
c00110c1:	6a 0c                	push   0xc
c00110c3:	e8 0b 6a ff ff       	call   c0007ad3 <malloc>
c00110c8:	5a                   	pop    edx
c00110c9:	59                   	pop    ecx
c00110ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110ce:	50                   	push   eax
c00110cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110d3:	e8 e0 fe ff ff       	call   c0010fb8 <EnvVarContainer::EnvVarContainer(Process*)>
c00110d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110dc:	83 c4 2c             	add    esp,0x2c
c00110df:	c3                   	ret    

c00110e0 <KeCopyProcessEnv(Process*, Process*)>:
c00110e0:	57                   	push   edi
c00110e1:	56                   	push   esi
c00110e2:	53                   	push   ebx
c00110e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e7:	83 ec 0c             	sub    esp,0xc
c00110ea:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00110f0:	6a 0c                	push   0xc
c00110f2:	e8 dc 69 ff ff       	call   c0007ad3 <malloc>
c00110f7:	89 c3                	mov    ebx,eax
c00110f9:	58                   	pop    eax
c00110fa:	5a                   	pop    edx
c00110fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ff:	53                   	push   ebx
c0011100:	e8 b3 fe ff ff       	call   c0010fb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011105:	8b 07                	mov    eax,DWORD PTR [edi]
c0011107:	89 03                	mov    DWORD PTR [ebx],eax
c0011109:	c1 e0 03             	shl    eax,0x3
c001110c:	89 04 24             	mov    DWORD PTR [esp],eax
c001110f:	e8 bf 69 ff ff       	call   c0007ad3 <malloc>
c0011114:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011117:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011119:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001111c:	89 c7                	mov    edi,eax
c001111e:	c1 e1 03             	shl    ecx,0x3
c0011121:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	89 d8                	mov    eax,ebx
c0011128:	5b                   	pop    ebx
c0011129:	5e                   	pop    esi
c001112a:	5f                   	pop    edi
c001112b:	c3                   	ret    

c001112c <KeLoadSystemEnv()>:
c001112c:	53                   	push   ebx
c001112d:	83 ec 14             	sub    esp,0x14
c0011130:	6a 0c                	push   0xc
c0011132:	e8 9c 69 ff ff       	call   c0007ad3 <malloc>
c0011137:	89 c3                	mov    ebx,eax
c0011139:	58                   	pop    eax
c001113a:	5a                   	pop    edx
c001113b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011141:	53                   	push   ebx
c0011142:	e8 71 fe ff ff       	call   c0010fb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011147:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001114a:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011150:	e8 47 fe ff ff       	call   c0010f9c <EnvVarContainer::__loadSystem()>
c0011155:	83 c4 18             	add    esp,0x18
c0011158:	5b                   	pop    ebx
c0011159:	c3                   	ret    

c001115a <KeLoadUserEnv()>:
c001115a:	53                   	push   ebx
c001115b:	83 ec 14             	sub    esp,0x14
c001115e:	6a 0c                	push   0xc
c0011160:	e8 6e 69 ff ff       	call   c0007ad3 <malloc>
c0011165:	89 c3                	mov    ebx,eax
c0011167:	58                   	pop    eax
c0011168:	5a                   	pop    edx
c0011169:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001116f:	53                   	push   ebx
c0011170:	e8 43 fe ff ff       	call   c0010fb8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011175:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001117b:	83 c4 18             	add    esp,0x18
c001117e:	5b                   	pop    ebx
c001117f:	c3                   	ret    

c0011180 <KeFlushEnv()>:
c0011180:	c3                   	ret    

c0011181 <KeGetProcessTotalEnvCount(Process*)>:
c0011181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011185:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001118b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011191:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011196:	8b 00                	mov    eax,DWORD PTR [eax]
c0011198:	03 01                	add    eax,DWORD PTR [ecx]
c001119a:	85 d2                	test   edx,edx
c001119c:	74 02                	je     c00111a0 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001119e:	03 02                	add    eax,DWORD PTR [edx]
c00111a0:	c3                   	ret    

c00111a1 <KeGetProcessEnvPair(Process*, int)>:
c00111a1:	57                   	push   edi
c00111a2:	56                   	push   esi
c00111a3:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00111a9:	53                   	push   ebx
c00111aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111b2:	85 f6                	test   esi,esi
c00111b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111b8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111c0:	75 16                	jne    c00111d8 <KeGetProcessEnvPair(Process*, int)+0x37>
c00111c2:	39 c2                	cmp    edx,eax
c00111c4:	7c 16                	jl     c00111dc <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111c6:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00111cc:	8b 31                	mov    esi,DWORD PTR [ecx]
c00111ce:	01 c6                	add    esi,eax
c00111d0:	39 d6                	cmp    esi,edx
c00111d2:	7e 3c                	jle    c0011210 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111d4:	29 c2                	sub    edx,eax
c00111d6:	eb 04                	jmp    c00111dc <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111d8:	39 c2                	cmp    edx,eax
c00111da:	7d 05                	jge    c00111e1 <KeGetProcessEnvPair(Process*, int)+0x40>
c00111dc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00111df:	eb 20                	jmp    c0011201 <KeGetProcessEnvPair(Process*, int)+0x60>
c00111e1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00111e3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00111e6:	39 d1                	cmp    ecx,edx
c00111e8:	7e 04                	jle    c00111ee <KeGetProcessEnvPair(Process*, int)+0x4d>
c00111ea:	29 c2                	sub    edx,eax
c00111ec:	eb 10                	jmp    c00111fe <KeGetProcessEnvPair(Process*, int)+0x5d>
c00111ee:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00111f4:	03 0e                	add    ecx,DWORD PTR [esi]
c00111f6:	39 d1                	cmp    ecx,edx
c00111f8:	7e 16                	jle    c0011210 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111fa:	29 c2                	sub    edx,eax
c00111fc:	29 fa                	sub    edx,edi
c00111fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011201:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011204:	8b 02                	mov    eax,DWORD PTR [edx]
c0011206:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011209:	89 03                	mov    DWORD PTR [ebx],eax
c001120b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001120e:	eb 1d                	jmp    c001122d <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	68 b2 1f 02 c0       	push   0xc0021fb2
c0011218:	e8 ac 00 00 00       	call   c00112c9 <KePanic(char const*)>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011226:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001122d:	89 d8                	mov    eax,ebx
c001122f:	5b                   	pop    ebx
c0011230:	5e                   	pop    esi
c0011231:	5f                   	pop    edi
c0011232:	c2 04 00             	ret    0x4

c0011235 <CPU::current()>:
c0011235:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001123a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011240:	c3                   	ret    

c0011241 <operator new(unsigned long)>:
c0011241:	e9 8d 68 ff ff       	jmp    c0007ad3 <malloc>

c0011246 <operator delete(void*)>:
c0011246:	e9 a8 68 ff ff       	jmp    c0007af3 <rfree>

c001124b <disableIRQs()>:
c001124b:	fa                   	cli    
c001124c:	c3                   	ret    

c001124d <enableIRQs()>:
c001124d:	fb                   	sti    
c001124e:	c3                   	ret    

c001124f <lockScheduler()>:
c001124f:	fa                   	cli    
c0011250:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011256:	c3                   	ret    

c0011257 <unlockScheduler()>:
c0011257:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001125c:	48                   	dec    eax
c001125d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011262:	75 01                	jne    c0011265 <unlockScheduler()+0xe>
c0011264:	fb                   	sti    
c0011265:	c3                   	ret    

c0011266 <lockStuff()>:
c0011266:	fa                   	cli    
c0011267:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001126d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011273:	c3                   	ret    

c0011274 <unlockStuff()>:
c0011274:	83 ec 0c             	sub    esp,0xc
c0011277:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001127c:	48                   	dec    eax
c001127d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011282:	75 18                	jne    c001129c <unlockStuff()+0x28>
c0011284:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001128b:	74 0f                	je     c001129c <unlockStuff()+0x28>
c001128d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011297:	e8 dc 4a 00 00       	call   c0015d78 <schedule()>
c001129c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112a1:	48                   	dec    eax
c00112a2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112a7:	75 01                	jne    c00112aa <unlockStuff()+0x36>
c00112a9:	fb                   	sti    
c00112aa:	83 c4 0c             	add    esp,0xc
c00112ad:	c3                   	ret    

c00112ae <Virt::getAKernelVAS()>:
c00112ae:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00112b3:	c3                   	ret    

c00112b4 <__not_memcpy>:
c00112b4:	57                   	push   edi
c00112b5:	56                   	push   esi
c00112b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112c2:	89 c7                	mov    edi,eax
c00112c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112c6:	5e                   	pop    esi
c00112c7:	5f                   	pop    edi
c00112c8:	c3                   	ret    

c00112c9 <KePanic(char const*)>:
c00112c9:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00112d0:	e9 33 6a 00 00       	jmp    c0017d08 <HalPanic(char const*)>

c00112d5 <KePowerThread(void*)>:
c00112d5:	83 ec 0c             	sub    esp,0xc
c00112d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112dd:	48                   	dec    eax
c00112de:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112e3:	75 01                	jne    c00112e6 <KePowerThread(void*)+0x11>
c00112e5:	fb                   	sti    
c00112e6:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112ed:	83 ec 0c             	sub    esp,0xc
c00112f0:	6a 0a                	push   0xa
c00112f2:	e8 b1 4d 00 00       	call   c00160a8 <sleep(unsigned int)>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011301:	eb e3                	jmp    c00112e6 <KePowerThread(void*)+0x11>

c0011303 <KeChangePowerSettings(PowerSettings)>:
c0011303:	57                   	push   edi
c0011304:	b9 09 00 00 00       	mov    ecx,0x9
c0011309:	56                   	push   esi
c001130a:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c001130f:	fc                   	cld    
c0011310:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011314:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011316:	5e                   	pop    esi
c0011317:	5f                   	pop    edi
c0011318:	c3                   	ret    

c0011319 <KeUserIOReceived()>:
c0011319:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011323:	c3                   	ret    

c0011324 <KeHandlePowerButton()>:
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c001132c:	83 f8 02             	cmp    eax,0x2
c001132f:	75 10                	jne    c0011341 <KeHandlePowerButton()+0x1d>
c0011331:	83 ec 0c             	sub    esp,0xc
c0011334:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001133a:	e8 0b 5e ff ff       	call   c000714a <Computer::shutdown()>
c001133f:	eb 11                	jmp    c0011352 <KeHandlePowerButton()+0x2e>
c0011341:	48                   	dec    eax
c0011342:	75 11                	jne    c0011355 <KeHandlePowerButton()+0x31>
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001134d:	e8 28 5e ff ff       	call   c000717a <Computer::sleep()>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	83 c4 0c             	add    esp,0xc
c0011358:	c3                   	ret    

c0011359 <KeHandleSleepButton()>:
c0011359:	83 ec 0c             	sub    esp,0xc
c001135c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011361:	83 f8 02             	cmp    eax,0x2
c0011364:	75 10                	jne    c0011376 <KeHandleSleepButton()+0x1d>
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001136f:	e8 d6 5d ff ff       	call   c000714a <Computer::shutdown()>
c0011374:	eb 11                	jmp    c0011387 <KeHandleSleepButton()+0x2e>
c0011376:	48                   	dec    eax
c0011377:	75 11                	jne    c001138a <KeHandleSleepButton()+0x31>
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011382:	e8 f3 5d ff ff       	call   c000717a <Computer::sleep()>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	83 c4 0c             	add    esp,0xc
c001138d:	c3                   	ret    

c001138e <KeSetupPowerManager()>:
c001138e:	83 ec 0c             	sub    esp,0xc
c0011391:	68 f0 00 00 00       	push   0xf0
c0011396:	6a 00                	push   0x0
c0011398:	68 d5 12 01 c0       	push   0xc00112d5
c001139d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00113a3:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113ad:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113b4:	e8 73 47 00 00       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c00113b9:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00113c3:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00113cd:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00113d7:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00113e1:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00113eb:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00113f5:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00113ff:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011409:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c0011413:	83 c4 1c             	add    esp,0x1c
c0011416:	c3                   	ret    

c0011417 <KeRand()>:
c0011417:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011421:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c001142b:	53                   	push   ebx
c001142c:	01 c1                	add    ecx,eax
c001142e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011433:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011439:	01 ca                	add    edx,ecx
c001143b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011440:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011445:	83 d2 00             	adc    edx,0x0
c0011448:	0f b7 da             	movzx  ebx,dx
c001144b:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011451:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011455:	5b                   	pop    ebx
c0011456:	c3                   	ret    

c0011457 <KeSeedRand(unsigned int)>:
c0011457:	53                   	push   ebx
c0011458:	83 ec 08             	sub    esp,0x8
c001145b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001145f:	e8 c3 6b 00 00       	call   c0018027 <HalGetRand()>
c0011464:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c001146e:	31 d8                	xor    eax,ebx
c0011470:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011475:	e8 9d ff ff ff       	call   c0011417 <KeRand()>
c001147a:	83 c4 08             	add    esp,0x8
c001147d:	5b                   	pop    ebx
c001147e:	eb 97                	jmp    c0011417 <KeRand()>

c0011480 <KeInitRand()>:
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	e8 94 69 00 00       	call   c0017e1c <HalQueryPerformanceCounter()>
c0011488:	0f 20 da             	mov    edx,cr3
c001148b:	0f 22 da             	mov    cr3,edx
c001148e:	0f 20 da             	mov    edx,cr3
c0011491:	0f 22 da             	mov    cr3,edx
c0011494:	0f 20 da             	mov    edx,cr3
c0011497:	0f 22 da             	mov    cr3,edx
c001149a:	0f 20 da             	mov    edx,cr3
c001149d:	0f 22 da             	mov    cr3,edx
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114a8:	50                   	push   eax
c00114a9:	e8 a9 ff ff ff       	call   c0011457 <KeSeedRand(unsigned int)>
c00114ae:	83 c4 1c             	add    esp,0x1c
c00114b1:	c3                   	ret    
c00114b2:	66 90                	xchg   ax,ax

c00114b4 <KeResolveCompatibilitySymbol(char*)>:
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	83 ec 08             	sub    esp,0x8
c00114ba:	68 cc 1f 02 c0       	push   0xc0021fcc
c00114bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c3:	e8 b8 f2 fe ff       	call   c0000780 <strcmp>
c00114c8:	83 c4 10             	add    esp,0x10
c00114cb:	85 c0                	test   eax,eax
c00114cd:	0f 94 c0             	sete   al
c00114d0:	0f b6 c0             	movzx  eax,al
c00114d3:	85 c0                	test   eax,eax
c00114d5:	74 0d                	je     c00114e4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00114d7:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00114dc:	e9 8b 01 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114e1:	8d 76 00             	lea    esi,[esi+0x0]
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	68 d5 1f 02 c0       	push   0xc0021fd5
c00114ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f0:	e8 8b f2 fe ff       	call   c0000780 <strcmp>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	85 c0                	test   eax,eax
c00114fa:	0f 94 c0             	sete   al
c00114fd:	0f b6 c0             	movzx  eax,al
c0011500:	85 c0                	test   eax,eax
c0011502:	74 0c                	je     c0011510 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011504:	b8 30 f4 01 c0       	mov    eax,0xc001f430
c0011509:	e9 5e 01 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001150e:	66 90                	xchg   ax,ax
c0011510:	83 ec 08             	sub    esp,0x8
c0011513:	68 df 1f 02 c0       	push   0xc0021fdf
c0011518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001151c:	e8 5f f2 fe ff       	call   c0000780 <strcmp>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	85 c0                	test   eax,eax
c0011526:	0f 94 c0             	sete   al
c0011529:	0f b6 c0             	movzx  eax,al
c001152c:	85 c0                	test   eax,eax
c001152e:	74 0c                	je     c001153c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011530:	b8 64 f1 01 c0       	mov    eax,0xc001f164
c0011535:	e9 32 01 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001153a:	66 90                	xchg   ax,ax
c001153c:	83 ec 08             	sub    esp,0x8
c001153f:	68 e8 1f 02 c0       	push   0xc0021fe8
c0011544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011548:	e8 33 f2 fe ff       	call   c0000780 <strcmp>
c001154d:	83 c4 10             	add    esp,0x10
c0011550:	85 c0                	test   eax,eax
c0011552:	0f 94 c0             	sete   al
c0011555:	0f b6 c0             	movzx  eax,al
c0011558:	85 c0                	test   eax,eax
c001155a:	74 0c                	je     c0011568 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001155c:	b8 c9 12 01 c0       	mov    eax,0xc00112c9
c0011561:	e9 06 01 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011566:	66 90                	xchg   ax,ax
c0011568:	83 ec 08             	sub    esp,0x8
c001156b:	68 fb 1f 02 c0       	push   0xc0021ffb
c0011570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011574:	e8 07 f2 fe ff       	call   c0000780 <strcmp>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	85 c0                	test   eax,eax
c001157e:	0f 94 c0             	sete   al
c0011581:	0f b6 c0             	movzx  eax,al
c0011584:	85 c0                	test   eax,eax
c0011586:	74 0c                	je     c0011594 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011588:	b8 f5 0b 01 c0       	mov    eax,0xc0010bf5
c001158d:	e9 da 00 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011592:	66 90                	xchg   ax,ax
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	68 18 20 02 c0       	push   0xc0022018
c001159c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a0:	e8 db f1 fe ff       	call   c0000780 <strcmp>
c00115a5:	83 c4 10             	add    esp,0x10
c00115a8:	85 c0                	test   eax,eax
c00115aa:	0f 94 c0             	sete   al
c00115ad:	0f b6 c0             	movzx  eax,al
c00115b0:	85 c0                	test   eax,eax
c00115b2:	74 0c                	je     c00115c0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115b4:	b8 30 f5 01 c0       	mov    eax,0xc001f530
c00115b9:	e9 ae 00 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115be:	66 90                	xchg   ax,ax
c00115c0:	83 ec 08             	sub    esp,0x8
c00115c3:	68 22 20 02 c0       	push   0xc0022022
c00115c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115cc:	e8 af f1 fe ff       	call   c0000780 <strcmp>
c00115d1:	83 c4 10             	add    esp,0x10
c00115d4:	85 c0                	test   eax,eax
c00115d6:	0f 94 c0             	sete   al
c00115d9:	0f b6 c0             	movzx  eax,al
c00115dc:	85 c0                	test   eax,eax
c00115de:	74 0c                	je     c00115ec <KeResolveCompatibilitySymbol(char*)+0x138>
c00115e0:	b8 b0 f2 01 c0       	mov    eax,0xc001f2b0
c00115e5:	e9 82 00 00 00       	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115ea:	66 90                	xchg   ax,ax
c00115ec:	83 ec 08             	sub    esp,0x8
c00115ef:	68 2b 20 02 c0       	push   0xc002202b
c00115f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f8:	e8 83 f1 fe ff       	call   c0000780 <strcmp>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	85 c0                	test   eax,eax
c0011602:	0f 94 c0             	sete   al
c0011605:	0f b6 c0             	movzx  eax,al
c0011608:	85 c0                	test   eax,eax
c001160a:	74 08                	je     c0011614 <KeResolveCompatibilitySymbol(char*)+0x160>
c001160c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011611:	eb 59                	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011613:	90                   	nop
c0011614:	83 ec 08             	sub    esp,0x8
c0011617:	68 43 20 02 c0       	push   0xc0022043
c001161c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011620:	e8 5b f1 fe ff       	call   c0000780 <strcmp>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	85 c0                	test   eax,eax
c001162a:	0f 94 c0             	sete   al
c001162d:	0f b6 c0             	movzx  eax,al
c0011630:	85 c0                	test   eax,eax
c0011632:	74 08                	je     c001163c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011634:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011639:	eb 31                	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001163b:	90                   	nop
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	68 50 20 02 c0       	push   0xc0022050
c0011644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011648:	e8 33 f1 fe ff       	call   c0000780 <strcmp>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	85 c0                	test   eax,eax
c0011652:	0f 94 c0             	sete   al
c0011655:	0f b6 c0             	movzx  eax,al
c0011658:	85 c0                	test   eax,eax
c001165a:	74 08                	je     c0011664 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001165c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011661:	eb 09                	jmp    c001166c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011663:	90                   	nop
c0011664:	b8 00 00 00 00       	mov    eax,0x0
c0011669:	8d 76 00             	lea    esi,[esi+0x0]
c001166c:	83 c4 0c             	add    esp,0xc
c001166f:	c3                   	ret    

c0011670 <KiSigKill(int)>:
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	6a 00                	push   0x0
c0011675:	6a 00                	push   0x0
c0011677:	6a ff                	push   0xffffffff
c0011679:	6a 01                	push   0x1
c001167b:	e8 d2 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011680:	83 c4 1c             	add    esp,0x1c
c0011683:	c3                   	ret    

c0011684 <KiDefaultSignalHandlerIgnore(int)>:
c0011684:	c3                   	ret    

c0011685 <KiDefaultSignalHandlerPause(int)>:
c0011685:	57                   	push   edi
c0011686:	b9 07 00 00 00       	mov    ecx,0x7
c001168b:	56                   	push   esi
c001168c:	be 99 20 02 c0       	mov    esi,0xc0022099
c0011691:	83 ec 24             	sub    esp,0x24
c0011694:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011698:	fc                   	cld    
c0011699:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001169b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001169f:	50                   	push   eax
c00116a0:	6a 00                	push   0x0
c00116a2:	6a 00                	push   0x0
c00116a4:	6a 27                	push   0x27
c00116a6:	e8 a7 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116ab:	83 c4 34             	add    esp,0x34
c00116ae:	5e                   	pop    esi
c00116af:	5f                   	pop    edi
c00116b0:	c3                   	ret    

c00116b1 <KiDefaultSignalHandlerResume(int)>:
c00116b1:	57                   	push   edi
c00116b2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00116b7:	56                   	push   esi
c00116b8:	be b5 20 02 c0       	mov    esi,0xc00220b5
c00116bd:	83 ec 24             	sub    esp,0x24
c00116c0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00116c4:	fc                   	cld    
c00116c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116c7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00116cb:	50                   	push   eax
c00116cc:	6a 00                	push   0x0
c00116ce:	6a 00                	push   0x0
c00116d0:	6a 27                	push   0x27
c00116d2:	e8 7b 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116d7:	83 c4 34             	add    esp,0x34
c00116da:	5e                   	pop    esi
c00116db:	5f                   	pop    edi
c00116dc:	c3                   	ret    

c00116dd <KeDeinitSignals(SigHandlerBlock*)>:
c00116dd:	e9 01 64 ff ff       	jmp    c0007ae3 <free>

c00116e2 <KeInitSignals()>:
c00116e2:	53                   	push   ebx
c00116e3:	83 ec 14             	sub    esp,0x14
c00116e6:	68 c8 00 00 00       	push   0xc8
c00116eb:	e8 e3 63 ff ff       	call   c0007ad3 <malloc>
c00116f0:	83 c4 0c             	add    esp,0xc
c00116f3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00116fd:	89 c3                	mov    ebx,eax
c00116ff:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011709:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001170f:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011713:	6a 20                	push   0x20
c0011715:	6a 00                	push   0x0
c0011717:	50                   	push   eax
c0011718:	e8 d3 ed fe ff       	call   c00004f0 <memset>
c001171d:	83 c4 0c             	add    esp,0xc
c0011720:	6a 44                	push   0x44
c0011722:	6a 00                	push   0x0
c0011724:	53                   	push   ebx
c0011725:	e8 c6 ed fe ff       	call   c00004f0 <memset>
c001172a:	83 c4 18             	add    esp,0x18
c001172d:	89 d8                	mov    eax,ebx
c001172f:	5b                   	pop    ebx
c0011730:	c3                   	ret    

c0011731 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011731:	53                   	push   ebx
c0011732:	b8 01 00 00 00       	mov    eax,0x1
c0011737:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001173b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001173f:	83 f9 10             	cmp    ecx,0x10
c0011742:	7f 21                	jg     c0011765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011748:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001174b:	89 03                	mov    DWORD PTR [ebx],eax
c001174d:	b8 01 00 00 00       	mov    eax,0x1
c0011752:	d3 e0                	shl    eax,cl
c0011754:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011758:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001175b:	31 c0                	xor    eax,eax
c001175d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011765:	5b                   	pop    ebx
c0011766:	c3                   	ret    

c0011767 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011767:	55                   	push   ebp
c0011768:	57                   	push   edi
c0011769:	bf 08 00 00 00       	mov    edi,0x8
c001176e:	56                   	push   esi
c001176f:	53                   	push   ebx
c0011770:	83 ec 18             	sub    esp,0x18
c0011773:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011777:	68 d2 20 02 c0       	push   0xc00220d2
c001177c:	e8 89 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	31 c9                	xor    ecx,ecx
c0011786:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001178d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011793:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011797:	99                   	cdq    
c0011798:	f7 ff                	idiv   edi
c001179a:	8d 42 24             	lea    eax,[edx+0x24]
c001179d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00117a1:	85 f6                	test   esi,esi
c00117a3:	75 1a                	jne    c00117bf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00117a5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00117a9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00117ad:	50                   	push   eax
c00117ae:	50                   	push   eax
c00117af:	52                   	push   edx
c00117b0:	68 e3 20 02 c0       	push   0xc00220e3
c00117b5:	e8 50 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117ba:	83 c4 10             	add    esp,0x10
c00117bd:	eb 1b                	jmp    c00117da <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00117bf:	41                   	inc    ecx
c00117c0:	83 f9 08             	cmp    ecx,0x8
c00117c3:	75 ce                	jne    c0011793 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	be 01 00 00 00       	mov    esi,0x1
c00117cd:	68 04 21 02 c0       	push   0xc0022104
c00117d2:	e8 33 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	83 c4 0c             	add    esp,0xc
c00117dd:	89 f0                	mov    eax,esi
c00117df:	5b                   	pop    ebx
c00117e0:	5e                   	pop    esi
c00117e1:	5f                   	pop    edi
c00117e2:	5d                   	pop    ebp
c00117e3:	c3                   	ret    

c00117e4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00117e4:	55                   	push   ebp
c00117e5:	57                   	push   edi
c00117e6:	56                   	push   esi
c00117e7:	53                   	push   ebx
c00117e8:	51                   	push   ecx
c00117e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117ed:	85 db                	test   ebx,ebx
c00117ef:	0f 84 bc 00 00 00    	je     c00118b1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117f5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00117fc:	0f 84 af 00 00 00    	je     c00118b1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011802:	31 c9                	xor    ecx,ecx
c0011804:	bf 08 00 00 00       	mov    edi,0x8
c0011809:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001180f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011812:	99                   	cdq    
c0011813:	f7 ff                	idiv   edi
c0011815:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001181c:	85 ed                	test   ebp,ebp
c001181e:	0f 84 9e 00 00 00    	je     c00118c2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011824:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001182a:	89 e9                	mov    ecx,ebp
c001182c:	bf 01 00 00 00       	mov    edi,0x1
c0011831:	d3 e7                	shl    edi,cl
c0011833:	31 c9                	xor    ecx,ecx
c0011835:	89 04 24             	mov    DWORD PTR [esp],eax
c0011838:	b8 01 00 00 00       	mov    eax,0x1
c001183d:	d3 e0                	shl    eax,cl
c001183f:	85 04 24             	test   DWORD PTR [esp],eax
c0011842:	74 06                	je     c001184a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011844:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011848:	75 67                	jne    c00118b1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001184a:	41                   	inc    ecx
c001184b:	83 f9 11             	cmp    ecx,0x11
c001184e:	75 e8                	jne    c0011838 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011850:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011853:	46                   	inc    esi
c0011854:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001185a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011865:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001186c:	09 f8                	or     eax,edi
c001186e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011874:	31 c0                	xor    eax,eax
c0011876:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001187e:	74 09                	je     c0011889 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011880:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011887:	eb 06                	jmp    c001188f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011889:	40                   	inc    eax
c001188a:	83 f8 08             	cmp    eax,0x8
c001188d:	75 e7                	jne    c0011876 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001188f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011893:	83 fd 09             	cmp    ebp,0x9
c0011896:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011899:	89 2a                	mov    DWORD PTR [edx],ebp
c001189b:	75 07                	jne    c00118a4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c001189d:	b8 70 16 01 c0       	mov    eax,0xc0011670
c00118a2:	eb 31                	jmp    c00118d5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118a4:	83 f8 01             	cmp    eax,0x1
c00118a7:	75 0c                	jne    c00118b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00118a9:	f7 d7                	not    edi
c00118ab:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118b1:	31 c0                	xor    eax,eax
c00118b3:	eb 20                	jmp    c00118d5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118b5:	85 c0                	test   eax,eax
c00118b7:	75 1c                	jne    c00118d5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118b9:	8b 04 ad 00 35 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcb00]
c00118c0:	eb 13                	jmp    c00118d5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118c2:	41                   	inc    ecx
c00118c3:	46                   	inc    esi
c00118c4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118ca:	83 f9 08             	cmp    ecx,0x8
c00118cd:	0f 85 36 ff ff ff    	jne    c0011809 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00118d3:	eb dc                	jmp    c00118b1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118d5:	5a                   	pop    edx
c00118d6:	5b                   	pop    ebx
c00118d7:	5e                   	pop    esi
c00118d8:	5f                   	pop    edi
c00118d9:	5d                   	pop    ebp
c00118da:	c3                   	ret    

c00118db <KiCheckSignalZ>:
c00118db:	83 ec 10             	sub    esp,0x10
c00118de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00118e2:	50                   	push   eax
c00118e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118eb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118f1:	e8 ee fe ff ff       	call   c00117e4 <KeCheckSignal(SigHandlerBlock*, int*)>
c00118f6:	5a                   	pop    edx
c00118f7:	31 d2                	xor    edx,edx
c00118f9:	59                   	pop    ecx
c00118fa:	85 c0                	test   eax,eax
c00118fc:	74 19                	je     c0011917 <KiCheckSignalZ+0x3c>
c00118fe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011904:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011907:	89 02                	mov    DWORD PTR [edx],eax
c0011909:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011914:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011917:	89 d0                	mov    eax,edx
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	c3                   	ret    

c001191d <KeCompleteSignal(SigHandlerBlock*, int)>:
c001191d:	56                   	push   esi
c001191e:	53                   	push   ebx
c001191f:	bb 01 00 00 00       	mov    ebx,0x1
c0011924:	52                   	push   edx
c0011925:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011929:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001192d:	d3 e3                	shl    ebx,cl
c001192f:	83 f9 10             	cmp    ecx,0x10
c0011932:	7f 08                	jg     c001193c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011934:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001193a:	75 10                	jne    c001194c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001193c:	83 ec 0c             	sub    esp,0xc
c001193f:	68 15 21 02 c0       	push   0xc0022115
c0011944:	e8 80 f9 ff ff       	call   c00112c9 <KePanic(char const*)>
c0011949:	83 c4 10             	add    esp,0x10
c001194c:	f7 d3                	not    ebx
c001194e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011954:	58                   	pop    eax
c0011955:	5b                   	pop    ebx
c0011956:	5e                   	pop    esi
c0011957:	c3                   	ret    

c0011958 <KiFinishSignalZ>:
c0011958:	53                   	push   ebx
c0011959:	83 ec 10             	sub    esp,0x10
c001195c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011960:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011968:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001196b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011971:	e8 a7 ff ff ff       	call   c001191d <KeCompleteSignal(SigHandlerBlock*, int)>
c0011976:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001197c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011983:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001198a:	83 c4 18             	add    esp,0x18
c001198d:	5b                   	pop    ebx
c001198e:	c3                   	ret    

c001198f <SysSeekDir(regs*)>:
c001198f:	31 c0                	xor    eax,eax
c0011991:	31 d2                	xor    edx,edx
c0011993:	c3                   	ret    

c0011994 <SysTellDir(regs*)>:
c0011994:	31 c0                	xor    eax,eax
c0011996:	31 d2                	xor    edx,edx
c0011998:	c3                   	ret    

c0011999 <SysVerify(regs*)>:
c0011999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001199d:	31 d2                	xor    edx,edx
c001199f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119a2:	c3                   	ret    

c00119a3 <SysGetArgc(regs*)>:
c00119a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ab:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00119b1:	89 c2                	mov    edx,eax
c00119b3:	c1 fa 1f             	sar    edx,0x1f
c00119b6:	c3                   	ret    

c00119b7 <SysTTYName(regs*)>:
c00119b7:	b8 01 00 00 00       	mov    eax,0x1
c00119bc:	31 d2                	xor    edx,edx
c00119be:	c3                   	ret    

c00119bf <SysFormatDisk(regs*)>:
c00119bf:	56                   	push   esi
c00119c0:	53                   	push   ebx
c00119c1:	83 ec 04             	sub    esp,0x4
c00119c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119c8:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00119ce:	eb 2a                	jmp    c00119fa <SysFormatDisk(regs*)+0x3b>
c00119d0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119db:	51                   	push   ecx
c00119dc:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00119df:	51                   	push   ecx
c00119e0:	50                   	push   eax
c00119e1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00119e8:	50                   	push   eax
c00119e9:	53                   	push   ebx
c00119ea:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00119ed:	83 c4 20             	add    esp,0x20
c00119f0:	83 f8 08             	cmp    eax,0x8
c00119f3:	89 c1                	mov    ecx,eax
c00119f5:	75 14                	jne    c0011a0b <SysFormatDisk(regs*)+0x4c>
c00119f7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00119fa:	85 db                	test   ebx,ebx
c00119fc:	75 d2                	jne    c00119d0 <SysFormatDisk(regs*)+0x11>
c00119fe:	b8 03 00 00 00       	mov    eax,0x3
c0011a03:	31 d2                	xor    edx,edx
c0011a05:	83 c4 04             	add    esp,0x4
c0011a08:	5b                   	pop    ebx
c0011a09:	5e                   	pop    esi
c0011a0a:	c3                   	ret    
c0011a0b:	85 c0                	test   eax,eax
c0011a0d:	74 13                	je     c0011a22 <SysFormatDisk(regs*)+0x63>
c0011a0f:	31 d2                	xor    edx,edx
c0011a11:	83 f9 09             	cmp    ecx,0x9
c0011a14:	b8 01 00 00 00       	mov    eax,0x1
c0011a19:	74 ea                	je     c0011a05 <SysFormatDisk(regs*)+0x46>
c0011a1b:	b8 02 00 00 00       	mov    eax,0x2
c0011a20:	eb e1                	jmp    c0011a03 <SysFormatDisk(regs*)+0x44>
c0011a22:	31 c0                	xor    eax,eax
c0011a24:	eb dd                	jmp    c0011a03 <SysFormatDisk(regs*)+0x44>

c0011a26 <SysSetDiskVolumeLabel(regs*)>:
c0011a26:	56                   	push   esi
c0011a27:	53                   	push   ebx
c0011a28:	83 ec 04             	sub    esp,0x4
c0011a2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a2f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a32:	83 f8 19             	cmp    eax,0x19
c0011a35:	77 33                	ja     c0011a6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a37:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a3e:	85 c9                	test   ecx,ecx
c0011a40:	74 28                	je     c0011a6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a42:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a45:	85 db                	test   ebx,ebx
c0011a47:	74 21                	je     c0011a6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a49:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a4f:	85 d2                	test   edx,edx
c0011a51:	74 17                	je     c0011a6a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a53:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a55:	53                   	push   ebx
c0011a56:	50                   	push   eax
c0011a57:	51                   	push   ecx
c0011a58:	52                   	push   edx
c0011a59:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a5c:	83 c4 10             	add    esp,0x10
c0011a5f:	83 c4 04             	add    esp,0x4
c0011a62:	5b                   	pop    ebx
c0011a63:	5e                   	pop    esi
c0011a64:	89 c2                	mov    edx,eax
c0011a66:	c1 fa 1f             	sar    edx,0x1f
c0011a69:	c3                   	ret    
c0011a6a:	83 c4 04             	add    esp,0x4
c0011a6d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a72:	5b                   	pop    ebx
c0011a73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a78:	5e                   	pop    esi
c0011a79:	c3                   	ret    

c0011a7a <SysGetDiskVolumeLabel(regs*)>:
c0011a7a:	57                   	push   edi
c0011a7b:	56                   	push   esi
c0011a7c:	53                   	push   ebx
c0011a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a81:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a84:	83 fa 19             	cmp    edx,0x19
c0011a87:	77 3c                	ja     c0011ac5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a89:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a90:	85 c9                	test   ecx,ecx
c0011a92:	74 31                	je     c0011ac5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a94:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a97:	85 db                	test   ebx,ebx
c0011a99:	74 2a                	je     c0011ac5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a9b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a9e:	85 f6                	test   esi,esi
c0011aa0:	74 23                	je     c0011ac5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aa2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011aa8:	85 c0                	test   eax,eax
c0011aaa:	74 19                	je     c0011ac5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aac:	83 ec 0c             	sub    esp,0xc
c0011aaf:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ab1:	56                   	push   esi
c0011ab2:	53                   	push   ebx
c0011ab3:	52                   	push   edx
c0011ab4:	51                   	push   ecx
c0011ab5:	50                   	push   eax
c0011ab6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ab9:	83 c4 20             	add    esp,0x20
c0011abc:	5b                   	pop    ebx
c0011abd:	5e                   	pop    esi
c0011abe:	89 c2                	mov    edx,eax
c0011ac0:	c1 fa 1f             	sar    edx,0x1f
c0011ac3:	5f                   	pop    edi
c0011ac4:	c3                   	ret    
c0011ac5:	5b                   	pop    ebx
c0011ac6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011acb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ad0:	5e                   	pop    esi
c0011ad1:	5f                   	pop    edi
c0011ad2:	c3                   	ret    

c0011ad3 <SysShutdown(regs*)>:
c0011ad3:	57                   	push   edi
c0011ad4:	56                   	push   esi
c0011ad5:	83 ec 04             	sub    esp,0x4
c0011ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011adc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011adf:	85 c0                	test   eax,eax
c0011ae1:	74 1e                	je     c0011b01 <SysShutdown(regs*)+0x2e>
c0011ae3:	83 f8 01             	cmp    eax,0x1
c0011ae6:	74 5f                	je     c0011b47 <SysShutdown(regs*)+0x74>
c0011ae8:	83 f8 02             	cmp    eax,0x2
c0011aeb:	be ff ff ff ff       	mov    esi,0xffffffff
c0011af0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011af5:	74 32                	je     c0011b29 <SysShutdown(regs*)+0x56>
c0011af7:	83 c4 04             	add    esp,0x4
c0011afa:	89 f0                	mov    eax,esi
c0011afc:	5e                   	pop    esi
c0011afd:	89 fa                	mov    edx,edi
c0011aff:	5f                   	pop    edi
c0011b00:	c3                   	ret    
c0011b01:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b0b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b10:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b12:	6a 00                	push   0x0
c0011b14:	6a 00                	push   0x0
c0011b16:	6a 00                	push   0x0
c0011b18:	50                   	push   eax
c0011b19:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b1c:	83 c4 10             	add    esp,0x10
c0011b1f:	89 f0                	mov    eax,esi
c0011b21:	83 c4 04             	add    esp,0x4
c0011b24:	89 fa                	mov    edx,edi
c0011b26:	5e                   	pop    esi
c0011b27:	5f                   	pop    edi
c0011b28:	c3                   	ret    
c0011b29:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b30:	6a 00                	push   0x0
c0011b32:	6a 00                	push   0x0
c0011b34:	6a 01                	push   0x1
c0011b36:	50                   	push   eax
c0011b37:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b3a:	83 c4 10             	add    esp,0x10
c0011b3d:	89 f0                	mov    eax,esi
c0011b3f:	83 c4 04             	add    esp,0x4
c0011b42:	89 fa                	mov    edx,edi
c0011b44:	5e                   	pop    esi
c0011b45:	5f                   	pop    edi
c0011b46:	c3                   	ret    
c0011b47:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b4c:	85 c0                	test   eax,eax
c0011b4e:	74 02                	je     c0011b52 <SysShutdown(regs*)+0x7f>
c0011b50:	ff d0                	call   eax
c0011b52:	31 f6                	xor    esi,esi
c0011b54:	83 c4 04             	add    esp,0x4
c0011b57:	89 f0                	mov    eax,esi
c0011b59:	31 ff                	xor    edi,edi
c0011b5b:	5e                   	pop    esi
c0011b5c:	89 fa                	mov    edx,edi
c0011b5e:	5f                   	pop    edi
c0011b5f:	c3                   	ret    

c0011b60 <SysRealpath(regs*)>:
c0011b60:	53                   	push   ebx
c0011b61:	83 ec 08             	sub    esp,0x8
c0011b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b68:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b6b:	85 c9                	test   ecx,ecx
c0011b6d:	74 36                	je     c0011ba5 <SysRealpath(regs*)+0x45>
c0011b6f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b72:	31 d2                	xor    edx,edx
c0011b74:	b8 01 00 00 00       	mov    eax,0x1
c0011b79:	85 db                	test   ebx,ebx
c0011b7b:	75 05                	jne    c0011b82 <SysRealpath(regs*)+0x22>
c0011b7d:	83 c4 08             	add    esp,0x8
c0011b80:	5b                   	pop    ebx
c0011b81:	c3                   	ret    
c0011b82:	6a 00                	push   0x0
c0011b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b8c:	05 0c 01 00 00       	add    eax,0x10c
c0011b91:	50                   	push   eax
c0011b92:	51                   	push   ecx
c0011b93:	53                   	push   ebx
c0011b94:	e8 17 9a ff ff       	call   c000b5b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011b99:	83 c4 10             	add    esp,0x10
c0011b9c:	31 c0                	xor    eax,eax
c0011b9e:	31 d2                	xor    edx,edx
c0011ba0:	83 c4 08             	add    esp,0x8
c0011ba3:	5b                   	pop    ebx
c0011ba4:	c3                   	ret    
c0011ba5:	b8 01 00 00 00       	mov    eax,0x1
c0011baa:	31 d2                	xor    edx,edx
c0011bac:	eb f2                	jmp    c0011ba0 <SysRealpath(regs*)+0x40>

c0011bae <SysReadDir(regs*)>:
c0011bae:	53                   	push   ebx
c0011baf:	83 ec 18             	sub    esp,0x18
c0011bb2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bb6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bb9:	83 f8 02             	cmp    eax,0x2
c0011bbc:	76 4f                	jbe    c0011c0d <SysReadDir(regs*)+0x5f>
c0011bbe:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011bc5:	77 52                	ja     c0011c19 <SysReadDir(regs*)+0x6b>
c0011bc7:	83 ec 0c             	sub    esp,0xc
c0011bca:	50                   	push   eax
c0011bcb:	e8 cb 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	85 c0                	test   eax,eax
c0011bd5:	74 42                	je     c0011c19 <SysReadDir(regs*)+0x6b>
c0011bd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bdf:	83 ec 0c             	sub    esp,0xc
c0011be2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011be6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011be8:	51                   	push   ecx
c0011be9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011bec:	51                   	push   ecx
c0011bed:	6a 00                	push   0x0
c0011bef:	68 10 01 00 00       	push   0x110
c0011bf4:	50                   	push   eax
c0011bf5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bf8:	83 c4 20             	add    esp,0x20
c0011bfb:	85 c0                	test   eax,eax
c0011bfd:	89 c1                	mov    ecx,eax
c0011bff:	74 27                	je     c0011c28 <SysReadDir(regs*)+0x7a>
c0011c01:	31 d2                	xor    edx,edx
c0011c03:	83 f9 07             	cmp    ecx,0x7
c0011c06:	b8 02 00 00 00       	mov    eax,0x2
c0011c0b:	75 16                	jne    c0011c23 <SysReadDir(regs*)+0x75>
c0011c0d:	b8 01 00 00 00       	mov    eax,0x1
c0011c12:	31 d2                	xor    edx,edx
c0011c14:	83 c4 18             	add    esp,0x18
c0011c17:	5b                   	pop    ebx
c0011c18:	c3                   	ret    
c0011c19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c23:	83 c4 18             	add    esp,0x18
c0011c26:	5b                   	pop    ebx
c0011c27:	c3                   	ret    
c0011c28:	31 c0                	xor    eax,eax
c0011c2a:	31 d2                	xor    edx,edx
c0011c2c:	eb e6                	jmp    c0011c14 <SysReadDir(regs*)+0x66>

c0011c2e <SysIsATTY(regs*)>:
c0011c2e:	83 ec 0c             	sub    esp,0xc
c0011c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c38:	83 f8 02             	cmp    eax,0x2
c0011c3b:	76 07                	jbe    c0011c44 <SysIsATTY(regs*)+0x16>
c0011c3d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c42:	75 26                	jne    c0011c6a <SysIsATTY(regs*)+0x3c>
c0011c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c52:	85 c0                	test   eax,eax
c0011c54:	74 24                	je     c0011c7a <SysIsATTY(regs*)+0x4c>
c0011c56:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c58:	83 ec 0c             	sub    esp,0xc
c0011c5b:	50                   	push   eax
c0011c5c:	ff 12                	call   DWORD PTR [edx]
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	31 d2                	xor    edx,edx
c0011c63:	83 c4 0c             	add    esp,0xc
c0011c66:	0f b6 c0             	movzx  eax,al
c0011c69:	c3                   	ret    
c0011c6a:	83 ec 0c             	sub    esp,0xc
c0011c6d:	50                   	push   eax
c0011c6e:	e8 28 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	85 c0                	test   eax,eax
c0011c78:	75 dc                	jne    c0011c56 <SysIsATTY(regs*)+0x28>
c0011c7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c84:	83 c4 0c             	add    esp,0xc
c0011c87:	c3                   	ret    

c0011c88 <SysSeek(regs*)>:
c0011c88:	56                   	push   esi
c0011c89:	53                   	push   ebx
c0011c8a:	83 ec 04             	sub    esp,0x4
c0011c8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c91:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c94:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011c97:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011c9d:	77 33                	ja     c0011cd2 <SysSeek(regs*)+0x4a>
c0011c9f:	83 ec 0c             	sub    esp,0xc
c0011ca2:	51                   	push   ecx
c0011ca3:	e8 f3 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ca8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011cab:	83 c4 0c             	add    esp,0xc
c0011cae:	31 db                	xor    ebx,ebx
c0011cb0:	53                   	push   ebx
c0011cb1:	51                   	push   ecx
c0011cb2:	50                   	push   eax
c0011cb3:	e8 d0 9c ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	85 c0                	test   eax,eax
c0011cbd:	0f 95 c0             	setne  al
c0011cc0:	31 d2                	xor    edx,edx
c0011cc2:	0f b6 c0             	movzx  eax,al
c0011cc5:	f7 d8                	neg    eax
c0011cc7:	83 d2 00             	adc    edx,0x0
c0011cca:	83 c4 04             	add    esp,0x4
c0011ccd:	5b                   	pop    ebx
c0011cce:	f7 da                	neg    edx
c0011cd0:	5e                   	pop    esi
c0011cd1:	c3                   	ret    
c0011cd2:	83 c4 04             	add    esp,0x4
c0011cd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cda:	5b                   	pop    ebx
c0011cdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ce0:	5e                   	pop    esi
c0011ce1:	c3                   	ret    

c0011ce2 <SysTell(regs*)>:
c0011ce2:	53                   	push   ebx
c0011ce3:	83 ec 08             	sub    esp,0x8
c0011ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ced:	83 f8 02             	cmp    eax,0x2
c0011cf0:	76 4e                	jbe    c0011d40 <SysTell(regs*)+0x5e>
c0011cf2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cf7:	76 19                	jbe    c0011d12 <SysTell(regs*)+0x30>
c0011cf9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cfc:	31 d2                	xor    edx,edx
c0011cfe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d0b:	83 c4 08             	add    esp,0x8
c0011d0e:	31 c0                	xor    eax,eax
c0011d10:	5b                   	pop    ebx
c0011d11:	c3                   	ret    
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	50                   	push   eax
c0011d16:	e8 80 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d1b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d1e:	5a                   	pop    edx
c0011d1f:	59                   	pop    ecx
c0011d20:	53                   	push   ebx
c0011d21:	50                   	push   eax
c0011d22:	e8 0d 9d ff ff       	call   c000ba34 <File::tell(unsigned long long*)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	85 c0                	test   eax,eax
c0011d2c:	0f 95 c0             	setne  al
c0011d2f:	31 d2                	xor    edx,edx
c0011d31:	0f b6 c0             	movzx  eax,al
c0011d34:	f7 d8                	neg    eax
c0011d36:	83 d2 00             	adc    edx,0x0
c0011d39:	83 c4 08             	add    esp,0x8
c0011d3c:	5b                   	pop    ebx
c0011d3d:	f7 da                	neg    edx
c0011d3f:	c3                   	ret    
c0011d40:	83 c4 08             	add    esp,0x8
c0011d43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d48:	5b                   	pop    ebx
c0011d49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d4e:	c3                   	ret    

c0011d4f <SysSize(regs*)>:
c0011d4f:	53                   	push   ebx
c0011d50:	83 ec 18             	sub    esp,0x18
c0011d53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d5a:	83 f8 02             	cmp    eax,0x2
c0011d5d:	76 54                	jbe    c0011db3 <SysSize(regs*)+0x64>
c0011d5f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d64:	76 19                	jbe    c0011d7f <SysSize(regs*)+0x30>
c0011d66:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d69:	31 d2                	xor    edx,edx
c0011d6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d78:	83 c4 18             	add    esp,0x18
c0011d7b:	31 c0                	xor    eax,eax
c0011d7d:	5b                   	pop    ebx
c0011d7e:	c3                   	ret    
c0011d7f:	83 ec 0c             	sub    esp,0xc
c0011d82:	50                   	push   eax
c0011d83:	e8 13 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d88:	83 c4 0c             	add    esp,0xc
c0011d8b:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d8f:	52                   	push   edx
c0011d90:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d93:	52                   	push   edx
c0011d94:	50                   	push   eax
c0011d95:	e8 32 9e ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	85 c0                	test   eax,eax
c0011d9f:	0f 95 c0             	setne  al
c0011da2:	31 d2                	xor    edx,edx
c0011da4:	0f b6 c0             	movzx  eax,al
c0011da7:	f7 d8                	neg    eax
c0011da9:	83 d2 00             	adc    edx,0x0
c0011dac:	83 c4 18             	add    esp,0x18
c0011daf:	5b                   	pop    ebx
c0011db0:	f7 da                	neg    edx
c0011db2:	c3                   	ret    
c0011db3:	83 c4 18             	add    esp,0x18
c0011db6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dbb:	5b                   	pop    ebx
c0011dbc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dc1:	c3                   	ret    

c0011dc2 <SysSizeFromFilename(regs*)>:
c0011dc2:	55                   	push   ebp
c0011dc3:	57                   	push   edi
c0011dc4:	56                   	push   esi
c0011dc5:	53                   	push   ebx
c0011dc6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011dcc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011dd3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011dd6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011dd9:	85 f6                	test   esi,esi
c0011ddb:	89 f8                	mov    eax,edi
c0011ddd:	74 09                	je     c0011de8 <SysSizeFromFilename(regs*)+0x26>
c0011ddf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011de5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011de8:	83 f8 02             	cmp    eax,0x2
c0011deb:	0f 86 ad 00 00 00    	jbe    c0011e9e <SysSizeFromFilename(regs*)+0xdc>
c0011df1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011df6:	76 1f                	jbe    c0011e17 <SysSizeFromFilename(regs*)+0x55>
c0011df8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011dfb:	31 d2                	xor    edx,edx
c0011dfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0a:	31 c0                	xor    eax,eax
c0011e0c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011e12:	5b                   	pop    ebx
c0011e13:	5e                   	pop    esi
c0011e14:	5f                   	pop    edi
c0011e15:	5d                   	pop    ebp
c0011e16:	c3                   	ret    
c0011e17:	83 ec 0c             	sub    esp,0xc
c0011e1a:	68 14 01 00 00       	push   0x114
c0011e1f:	e8 af 5c ff ff       	call   c0007ad3 <malloc>
c0011e24:	6a 01                	push   0x1
c0011e26:	89 c5                	mov    ebp,eax
c0011e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e30:	50                   	push   eax
c0011e31:	57                   	push   edi
c0011e32:	55                   	push   ebp
c0011e33:	e8 96 99 ff ff       	call   c000b7ce <File::File(char const*, Process*, bool)>
c0011e38:	83 c4 1c             	add    esp,0x1c
c0011e3b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0011e3f:	50                   	push   eax
c0011e40:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e43:	52                   	push   edx
c0011e44:	55                   	push   ebp
c0011e45:	e8 82 9d ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	85 ed                	test   ebp,ebp
c0011e4f:	89 c3                	mov    ebx,eax
c0011e51:	74 0d                	je     c0011e60 <SysSizeFromFilename(regs*)+0x9e>
c0011e53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e56:	83 ec 0c             	sub    esp,0xc
c0011e59:	55                   	push   ebp
c0011e5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	85 db                	test   ebx,ebx
c0011e62:	75 3a                	jne    c0011e9e <SysSizeFromFilename(regs*)+0xdc>
c0011e64:	83 ec 08             	sub    esp,0x8
c0011e67:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011e6b:	50                   	push   eax
c0011e6c:	57                   	push   edi
c0011e6d:	e8 9b 90 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c0011e72:	83 c4 10             	add    esp,0x10
c0011e75:	ba 00 00 00 00       	mov    edx,0x0
c0011e7a:	83 f8 01             	cmp    eax,0x1
c0011e7d:	b8 00 00 00 00       	mov    eax,0x0
c0011e82:	74 2f                	je     c0011eb3 <SysSizeFromFilename(regs*)+0xf1>
c0011e84:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0011e89:	74 3b                	je     c0011ec6 <SysSizeFromFilename(regs*)+0x104>
c0011e8b:	85 f6                	test   esi,esi
c0011e8d:	0f 84 79 ff ff ff    	je     c0011e0c <SysSizeFromFilename(regs*)+0x4a>
c0011e93:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011e99:	e9 6e ff ff ff       	jmp    c0011e0c <SysSizeFromFilename(regs*)+0x4a>
c0011e9e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011ea4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ea9:	5b                   	pop    ebx
c0011eaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eaf:	5e                   	pop    esi
c0011eb0:	5f                   	pop    edi
c0011eb1:	5d                   	pop    ebp
c0011eb2:	c3                   	ret    
c0011eb3:	85 f6                	test   esi,esi
c0011eb5:	0f 84 51 ff ff ff    	je     c0011e0c <SysSizeFromFilename(regs*)+0x4a>
c0011ebb:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011ec1:	e9 46 ff ff ff       	jmp    c0011e0c <SysSizeFromFilename(regs*)+0x4a>
c0011ec6:	85 f6                	test   esi,esi
c0011ec8:	0f 84 3e ff ff ff    	je     c0011e0c <SysSizeFromFilename(regs*)+0x4a>
c0011ece:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011ed4:	e9 33 ff ff ff       	jmp    c0011e0c <SysSizeFromFilename(regs*)+0x4a>

c0011ed9 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011ed9:	55                   	push   ebp
c0011eda:	57                   	push   edi
c0011edb:	56                   	push   esi
c0011edc:	53                   	push   ebx
c0011edd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011ee3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011eea:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011eed:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ef0:	85 f6                	test   esi,esi
c0011ef2:	89 f8                	mov    eax,edi
c0011ef4:	74 09                	je     c0011eff <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011ef6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011efc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eff:	83 f8 02             	cmp    eax,0x2
c0011f02:	0f 86 ad 00 00 00    	jbe    c0011fb5 <SysSizeFromFilenameNoSymlink(regs*)+0xdc>
c0011f08:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f0d:	76 1f                	jbe    c0011f2e <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011f0f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f12:	31 d2                	xor    edx,edx
c0011f14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f21:	31 c0                	xor    eax,eax
c0011f23:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011f29:	5b                   	pop    ebx
c0011f2a:	5e                   	pop    esi
c0011f2b:	5f                   	pop    edi
c0011f2c:	5d                   	pop    ebp
c0011f2d:	c3                   	ret    
c0011f2e:	83 ec 0c             	sub    esp,0xc
c0011f31:	68 14 01 00 00       	push   0x114
c0011f36:	e8 98 5b ff ff       	call   c0007ad3 <malloc>
c0011f3b:	6a 00                	push   0x0
c0011f3d:	89 c5                	mov    ebp,eax
c0011f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f47:	50                   	push   eax
c0011f48:	57                   	push   edi
c0011f49:	55                   	push   ebp
c0011f4a:	e8 7f 98 ff ff       	call   c000b7ce <File::File(char const*, Process*, bool)>
c0011f4f:	83 c4 1c             	add    esp,0x1c
c0011f52:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0011f56:	50                   	push   eax
c0011f57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f5a:	52                   	push   edx
c0011f5b:	55                   	push   ebp
c0011f5c:	e8 6b 9c ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0011f61:	83 c4 10             	add    esp,0x10
c0011f64:	85 ed                	test   ebp,ebp
c0011f66:	89 c3                	mov    ebx,eax
c0011f68:	74 0d                	je     c0011f77 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0011f6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011f6d:	83 ec 0c             	sub    esp,0xc
c0011f70:	55                   	push   ebp
c0011f71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f74:	83 c4 10             	add    esp,0x10
c0011f77:	85 db                	test   ebx,ebx
c0011f79:	75 3a                	jne    c0011fb5 <SysSizeFromFilenameNoSymlink(regs*)+0xdc>
c0011f7b:	83 ec 08             	sub    esp,0x8
c0011f7e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011f82:	50                   	push   eax
c0011f83:	57                   	push   edi
c0011f84:	e8 84 8f ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	ba 00 00 00 00       	mov    edx,0x0
c0011f91:	83 f8 01             	cmp    eax,0x1
c0011f94:	b8 00 00 00 00       	mov    eax,0x0
c0011f99:	74 2f                	je     c0011fca <SysSizeFromFilenameNoSymlink(regs*)+0xf1>
c0011f9b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0011fa0:	74 3b                	je     c0011fdd <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011fa2:	85 f6                	test   esi,esi
c0011fa4:	0f 84 79 ff ff ff    	je     c0011f23 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011faa:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011fb0:	e9 6e ff ff ff       	jmp    c0011f23 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011fb5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011fbb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc0:	5b                   	pop    ebx
c0011fc1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc6:	5e                   	pop    esi
c0011fc7:	5f                   	pop    edi
c0011fc8:	5d                   	pop    ebp
c0011fc9:	c3                   	ret    
c0011fca:	85 f6                	test   esi,esi
c0011fcc:	0f 84 51 ff ff ff    	je     c0011f23 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011fd2:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011fd8:	e9 46 ff ff ff       	jmp    c0011f23 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011fdd:	85 f6                	test   esi,esi
c0011fdf:	0f 84 3e ff ff ff    	je     c0011f23 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011fe5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011feb:	e9 33 ff ff ff       	jmp    c0011f23 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011ff0 <SysClose(regs*)>:
c0011ff0:	53                   	push   ebx
c0011ff1:	83 ec 08             	sub    esp,0x8
c0011ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ff8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ffb:	83 f8 02             	cmp    eax,0x2
c0011ffe:	76 41                	jbe    c0012041 <SysClose(regs*)+0x51>
c0012000:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012006:	83 fa 01             	cmp    edx,0x1
c0012009:	76 2d                	jbe    c0012038 <SysClose(regs*)+0x48>
c001200b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012010:	77 2f                	ja     c0012041 <SysClose(regs*)+0x51>
c0012012:	83 ec 0c             	sub    esp,0xc
c0012015:	50                   	push   eax
c0012016:	e8 80 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001201b:	89 04 24             	mov    DWORD PTR [esp],eax
c001201e:	89 c3                	mov    ebx,eax
c0012020:	e8 03 99 ff ff       	call   c000b928 <File::close()>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	85 db                	test   ebx,ebx
c001202a:	74 0c                	je     c0012038 <SysClose(regs*)+0x48>
c001202c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001202e:	83 ec 0c             	sub    esp,0xc
c0012031:	53                   	push   ebx
c0012032:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	83 c4 08             	add    esp,0x8
c001203b:	31 c0                	xor    eax,eax
c001203d:	5b                   	pop    ebx
c001203e:	31 d2                	xor    edx,edx
c0012040:	c3                   	ret    
c0012041:	83 c4 08             	add    esp,0x8
c0012044:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012049:	5b                   	pop    ebx
c001204a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001204f:	c3                   	ret    

c0012050 <SysOpenDir(regs*)>:
c0012050:	56                   	push   esi
c0012051:	53                   	push   ebx
c0012052:	83 ec 04             	sub    esp,0x4
c0012055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012059:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001205c:	85 c9                	test   ecx,ecx
c001205e:	74 5d                	je     c00120bd <SysOpenDir(regs*)+0x6d>
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	68 14 01 00 00       	push   0x114
c0012068:	e8 66 5a ff ff       	call   c0007ad3 <malloc>
c001206d:	83 c4 0c             	add    esp,0xc
c0012070:	89 c6                	mov    esi,eax
c0012072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001207a:	50                   	push   eax
c001207b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001207e:	52                   	push   edx
c001207f:	56                   	push   esi
c0012080:	e8 07 9d ff ff       	call   c000bd8c <Directory::Directory(char const*, Process*)>
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	85 f6                	test   esi,esi
c001208a:	74 31                	je     c00120bd <SysOpenDir(regs*)+0x6d>
c001208c:	83 ec 0c             	sub    esp,0xc
c001208f:	56                   	push   esi
c0012090:	e8 bf 9d ff ff       	call   c000be54 <Directory::open()>
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	85 c0                	test   eax,eax
c001209a:	75 21                	jne    c00120bd <SysOpenDir(regs*)+0x6d>
c001209c:	83 ec 0c             	sub    esp,0xc
c001209f:	56                   	push   esi
c00120a0:	e8 f9 70 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00120a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	89 02                	mov    DWORD PTR [edx],eax
c00120ad:	c1 f8 1f             	sar    eax,0x1f
c00120b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00120b3:	83 c4 04             	add    esp,0x4
c00120b6:	31 c0                	xor    eax,eax
c00120b8:	5b                   	pop    ebx
c00120b9:	31 d2                	xor    edx,edx
c00120bb:	5e                   	pop    esi
c00120bc:	c3                   	ret    
c00120bd:	83 c4 04             	add    esp,0x4
c00120c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120c5:	5b                   	pop    ebx
c00120c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120cb:	5e                   	pop    esi
c00120cc:	c3                   	ret    

c00120cd <SysMakeDir(regs*)>:
c00120cd:	56                   	push   esi
c00120ce:	53                   	push   ebx
c00120cf:	83 ec 10             	sub    esp,0x10
c00120d2:	68 14 01 00 00       	push   0x114
c00120d7:	e8 f7 59 ff ff       	call   c0007ad3 <malloc>
c00120dc:	83 c4 0c             	add    esp,0xc
c00120df:	89 c3                	mov    ebx,eax
c00120e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120e9:	50                   	push   eax
c00120ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ee:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00120f1:	52                   	push   edx
c00120f2:	53                   	push   ebx
c00120f3:	e8 94 9c ff ff       	call   c000bd8c <Directory::Directory(char const*, Process*)>
c00120f8:	83 c4 10             	add    esp,0x10
c00120fb:	85 db                	test   ebx,ebx
c00120fd:	74 2c                	je     c001212b <SysMakeDir(regs*)+0x5e>
c00120ff:	83 ec 0c             	sub    esp,0xc
c0012102:	53                   	push   ebx
c0012103:	e8 2c 9f ff ff       	call   c000c034 <Directory::create()>
c0012108:	89 c6                	mov    esi,eax
c001210a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001210c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001210f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012112:	83 c4 10             	add    esp,0x10
c0012115:	31 c0                	xor    eax,eax
c0012117:	85 f6                	test   esi,esi
c0012119:	0f 95 c0             	setne  al
c001211c:	31 d2                	xor    edx,edx
c001211e:	f7 d8                	neg    eax
c0012120:	83 d2 00             	adc    edx,0x0
c0012123:	83 c4 04             	add    esp,0x4
c0012126:	5b                   	pop    ebx
c0012127:	f7 da                	neg    edx
c0012129:	5e                   	pop    esi
c001212a:	c3                   	ret    
c001212b:	83 c4 04             	add    esp,0x4
c001212e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012133:	5b                   	pop    ebx
c0012134:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012139:	5e                   	pop    esi
c001213a:	c3                   	ret    

c001213b <SysCloseDir(regs*)>:
c001213b:	53                   	push   ebx
c001213c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012141:	83 ec 08             	sub    esp,0x8
c0012144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012148:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001214b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012150:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012153:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0012159:	77 2a                	ja     c0012185 <SysCloseDir(regs*)+0x4a>
c001215b:	83 ec 0c             	sub    esp,0xc
c001215e:	51                   	push   ecx
c001215f:	e8 37 73 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012164:	89 04 24             	mov    DWORD PTR [esp],eax
c0012167:	89 c3                	mov    ebx,eax
c0012169:	e8 42 9d ff ff       	call   c000beb0 <Directory::close()>
c001216e:	83 c4 10             	add    esp,0x10
c0012171:	85 db                	test   ebx,ebx
c0012173:	74 0c                	je     c0012181 <SysCloseDir(regs*)+0x46>
c0012175:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012177:	83 ec 0c             	sub    esp,0xc
c001217a:	53                   	push   ebx
c001217b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	31 c0                	xor    eax,eax
c0012183:	31 d2                	xor    edx,edx
c0012185:	83 c4 08             	add    esp,0x8
c0012188:	5b                   	pop    ebx
c0012189:	c3                   	ret    

c001218a <SysWait(regs*)>:
c001218a:	83 ec 10             	sub    esp,0x10
c001218d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012191:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012194:	52                   	push   edx
c0012195:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012198:	51                   	push   ecx
c0012199:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001219c:	50                   	push   eax
c001219d:	e8 0e 3e 00 00       	call   c0015fb0 <waitTask(int, int*, int)>
c00121a2:	83 c4 1c             	add    esp,0x1c
c00121a5:	89 c2                	mov    edx,eax
c00121a7:	c1 fa 1f             	sar    edx,0x1f
c00121aa:	c3                   	ret    

c00121ab <SysNotImpl(regs*)>:
c00121ab:	83 ec 18             	sub    esp,0x18
c00121ae:	68 26 21 02 c0       	push   0xc0022126
c00121b3:	e8 11 f1 ff ff       	call   c00112c9 <KePanic(char const*)>
c00121b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121c2:	83 c4 1c             	add    esp,0x1c
c00121c5:	c3                   	ret    

c00121c6 <SysPanic(regs*)>:
c00121c6:	83 ec 18             	sub    esp,0x18
c00121c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121cd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00121d0:	50                   	push   eax
c00121d1:	e8 f3 f0 ff ff       	call   c00112c9 <KePanic(char const*)>
c00121d6:	b8 01 00 00 00       	mov    eax,0x1
c00121db:	31 d2                	xor    edx,edx
c00121dd:	83 c4 1c             	add    esp,0x1c
c00121e0:	c3                   	ret    

c00121e1 <SysRmdir(regs*)>:
c00121e1:	56                   	push   esi
c00121e2:	53                   	push   ebx
c00121e3:	83 ec 10             	sub    esp,0x10
c00121e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121ea:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00121ed:	68 14 01 00 00       	push   0x114
c00121f2:	e8 dc 58 ff ff       	call   c0007ad3 <malloc>
c00121f7:	6a 00                	push   0x0
c00121f9:	89 c3                	mov    ebx,eax
c00121fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012200:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012203:	50                   	push   eax
c0012204:	56                   	push   esi
c0012205:	53                   	push   ebx
c0012206:	e8 c3 95 ff ff       	call   c000b7ce <File::File(char const*, Process*, bool)>
c001220b:	83 c4 14             	add    esp,0x14
c001220e:	53                   	push   ebx
c001220f:	e8 84 98 ff ff       	call   c000ba98 <File::unlink()>
c0012214:	83 c4 10             	add    esp,0x10
c0012217:	85 db                	test   ebx,ebx
c0012219:	89 c6                	mov    esi,eax
c001221b:	74 0c                	je     c0012229 <SysRmdir(regs*)+0x48>
c001221d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001221f:	83 ec 0c             	sub    esp,0xc
c0012222:	53                   	push   ebx
c0012223:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012226:	83 c4 10             	add    esp,0x10
c0012229:	31 c0                	xor    eax,eax
c001222b:	85 f6                	test   esi,esi
c001222d:	0f 95 c0             	setne  al
c0012230:	31 d2                	xor    edx,edx
c0012232:	f7 d8                	neg    eax
c0012234:	83 d2 00             	adc    edx,0x0
c0012237:	83 c4 04             	add    esp,0x4
c001223a:	5b                   	pop    ebx
c001223b:	f7 da                	neg    edx
c001223d:	5e                   	pop    esi
c001223e:	c3                   	ret    

c001223f <SysUnlink(regs*)>:
c001223f:	56                   	push   esi
c0012240:	53                   	push   ebx
c0012241:	83 ec 10             	sub    esp,0x10
c0012244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012248:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001224b:	68 14 01 00 00       	push   0x114
c0012250:	e8 7e 58 ff ff       	call   c0007ad3 <malloc>
c0012255:	6a 00                	push   0x0
c0012257:	89 c3                	mov    ebx,eax
c0012259:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001225e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012261:	50                   	push   eax
c0012262:	56                   	push   esi
c0012263:	53                   	push   ebx
c0012264:	e8 65 95 ff ff       	call   c000b7ce <File::File(char const*, Process*, bool)>
c0012269:	83 c4 14             	add    esp,0x14
c001226c:	53                   	push   ebx
c001226d:	e8 26 98 ff ff       	call   c000ba98 <File::unlink()>
c0012272:	83 c4 10             	add    esp,0x10
c0012275:	85 db                	test   ebx,ebx
c0012277:	89 c6                	mov    esi,eax
c0012279:	74 0c                	je     c0012287 <SysUnlink(regs*)+0x48>
c001227b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001227d:	83 ec 0c             	sub    esp,0xc
c0012280:	53                   	push   ebx
c0012281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	31 c0                	xor    eax,eax
c0012289:	85 f6                	test   esi,esi
c001228b:	0f 95 c0             	setne  al
c001228e:	31 d2                	xor    edx,edx
c0012290:	f7 d8                	neg    eax
c0012292:	83 d2 00             	adc    edx,0x0
c0012295:	83 c4 04             	add    esp,0x4
c0012298:	5b                   	pop    ebx
c0012299:	f7 da                	neg    edx
c001229b:	5e                   	pop    esi
c001229c:	c3                   	ret    

c001229d <SysGetArgv(regs*)>:
c001229d:	83 ec 0c             	sub    esp,0xc
c00122a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00122a4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00122a7:	85 c0                	test   eax,eax
c00122a9:	78 2c                	js     c00122d7 <SysGetArgv(regs*)+0x3a>
c00122ab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00122b1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00122b4:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00122ba:	7d 1b                	jge    c00122d7 <SysGetArgv(regs*)+0x3a>
c00122bc:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00122c3:	85 c0                	test   eax,eax
c00122c5:	74 18                	je     c00122df <SysGetArgv(regs*)+0x42>
c00122c7:	83 ec 08             	sub    esp,0x8
c00122ca:	50                   	push   eax
c00122cb:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00122ce:	50                   	push   eax
c00122cf:	e8 7c e3 fe ff       	call   c0000650 <strcpy>
c00122d4:	83 c4 10             	add    esp,0x10
c00122d7:	31 c0                	xor    eax,eax
c00122d9:	31 d2                	xor    edx,edx
c00122db:	83 c4 0c             	add    esp,0xc
c00122de:	c3                   	ret    
c00122df:	b8 01 00 00 00       	mov    eax,0x1
c00122e4:	31 d2                	xor    edx,edx
c00122e6:	83 c4 0c             	add    esp,0xc
c00122e9:	c3                   	ret    

c00122ea <SysUSleep(regs*)>:
c00122ea:	83 ec 1c             	sub    esp,0x1c
c00122ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00122f1:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00122f4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00122f7:	6a 00                	push   0x0
c00122f9:	6a 64                	push   0x64
c00122fb:	52                   	push   edx
c00122fc:	50                   	push   eax
c00122fd:	e8 2e d1 00 00       	call   c001f430 <__udivdi3>
c0012302:	83 c4 14             	add    esp,0x14
c0012305:	50                   	push   eax
c0012306:	e8 89 3d 00 00       	call   c0016094 <milliTenthSleep(unsigned int)>
c001230b:	31 c0                	xor    eax,eax
c001230d:	31 d2                	xor    edx,edx
c001230f:	83 c4 1c             	add    esp,0x1c
c0012312:	c3                   	ret    

c0012313 <SysSpawn(regs*)>:
c0012313:	56                   	push   esi
c0012314:	53                   	push   ebx
c0012315:	83 ec 04             	sub    esp,0x4
c0012318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001231c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001231f:	85 f6                	test   esi,esi
c0012321:	75 0a                	jne    c001232d <SysSpawn(regs*)+0x1a>
c0012323:	83 c4 04             	add    esp,0x4
c0012326:	31 c0                	xor    eax,eax
c0012328:	5b                   	pop    ebx
c0012329:	31 d2                	xor    edx,edx
c001232b:	5e                   	pop    esi
c001232c:	c3                   	ret    
c001232d:	83 ec 0c             	sub    esp,0xc
c0012330:	68 24 07 00 00       	push   0x724
c0012335:	e8 99 57 ff ff       	call   c0007ad3 <malloc>
c001233a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012343:	89 c6                	mov    esi,eax
c0012345:	31 c0                	xor    eax,eax
c0012347:	85 c9                	test   ecx,ecx
c0012349:	75 08                	jne    c0012353 <SysSpawn(regs*)+0x40>
c001234b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012350:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012353:	52                   	push   edx
c0012354:	50                   	push   eax
c0012355:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012358:	50                   	push   eax
c0012359:	56                   	push   esi
c001235a:	e8 9d 33 00 00       	call   c00156fc <Process::Process(char const*, Process*, char**)>
c001235f:	83 c4 10             	add    esp,0x10
c0012362:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012369:	75 b8                	jne    c0012323 <SysSpawn(regs*)+0x10>
c001236b:	83 ec 0c             	sub    esp,0xc
c001236e:	56                   	push   esi
c001236f:	e8 c0 38 00 00       	call   c0015c34 <Process::createUserThread()>
c0012374:	8b 06                	mov    eax,DWORD PTR [esi]
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	83 c4 04             	add    esp,0x4
c001237c:	5b                   	pop    ebx
c001237d:	89 c2                	mov    edx,eax
c001237f:	c1 fa 1f             	sar    edx,0x1f
c0012382:	5e                   	pop    esi
c0012383:	c3                   	ret    

c0012384 <SysGetEnv(regs*)>:
c0012384:	57                   	push   edi
c0012385:	56                   	push   esi
c0012386:	53                   	push   ebx
c0012387:	83 ec 1c             	sub    esp,0x1c
c001238a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001238f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012393:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012396:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012399:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001239c:	51                   	push   ecx
c001239d:	e8 df ed ff ff       	call   c0011181 <KeGetProcessTotalEnvCount(Process*)>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	39 c7                	cmp    edi,eax
c00123a7:	7c 12                	jl     c00123bb <SysGetEnv(regs*)+0x37>
c00123a9:	31 c0                	xor    eax,eax
c00123ab:	31 d2                	xor    edx,edx
c00123ad:	85 f6                	test   esi,esi
c00123af:	74 03                	je     c00123b4 <SysGetEnv(regs*)+0x30>
c00123b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	5b                   	pop    ebx
c00123b8:	5e                   	pop    esi
c00123b9:	5f                   	pop    edi
c00123ba:	c3                   	ret    
c00123bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00123bf:	83 ec 04             	sub    esp,0x4
c00123c2:	57                   	push   edi
c00123c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00123c9:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00123cc:	57                   	push   edi
c00123cd:	50                   	push   eax
c00123ce:	e8 ce ed ff ff       	call   c00111a1 <KeGetProcessEnvPair(Process*, int)>
c00123d3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123da:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00123de:	83 c4 0c             	add    esp,0xc
c00123e1:	85 d2                	test   edx,edx
c00123e3:	75 23                	jne    c0012408 <SysGetEnv(regs*)+0x84>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	50                   	push   eax
c00123e9:	e8 92 e1 fe ff       	call   c0000580 <strlen>
c00123ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123f1:	89 c3                	mov    ebx,eax
c00123f3:	e8 88 e1 fe ff       	call   c0000580 <strlen>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	31 d2                	xor    edx,edx
c00123fd:	83 c4 10             	add    esp,0x10
c0012400:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012404:	5b                   	pop    ebx
c0012405:	5e                   	pop    esi
c0012406:	5f                   	pop    edi
c0012407:	c3                   	ret    
c0012408:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001240b:	83 ec 08             	sub    esp,0x8
c001240e:	50                   	push   eax
c001240f:	56                   	push   esi
c0012410:	e8 3b e2 fe ff       	call   c0000650 <strcpy>
c0012415:	58                   	pop    eax
c0012416:	5a                   	pop    edx
c0012417:	68 40 21 02 c0       	push   0xc0022140
c001241c:	56                   	push   esi
c001241d:	e8 4e e4 fe ff       	call   c0000870 <strcat>
c0012422:	59                   	pop    ecx
c0012423:	5b                   	pop    ebx
c0012424:	57                   	push   edi
c0012425:	56                   	push   esi
c0012426:	e8 45 e4 fe ff       	call   c0000870 <strcat>
c001242b:	83 c4 10             	add    esp,0x10
c001242e:	31 c0                	xor    eax,eax
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	31 d2                	xor    edx,edx
c0012435:	5b                   	pop    ebx
c0012436:	5e                   	pop    esi
c0012437:	5f                   	pop    edi
c0012438:	c3                   	ret    

c0012439 <SysSetFatAttrib(regs*)>:
c0012439:	57                   	push   edi
c001243a:	56                   	push   esi
c001243b:	53                   	push   ebx
c001243c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012440:	83 ec 0c             	sub    esp,0xc
c0012443:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012446:	68 14 01 00 00       	push   0x114
c001244b:	e8 83 56 ff ff       	call   c0007ad3 <malloc>
c0012450:	83 c4 0c             	add    esp,0xc
c0012453:	89 c3                	mov    ebx,eax
c0012455:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001245a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001245d:	50                   	push   eax
c001245e:	57                   	push   edi
c001245f:	53                   	push   ebx
c0012460:	e8 47 94 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0012465:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012468:	83 c4 0c             	add    esp,0xc
c001246b:	0f b6 d4             	movzx  edx,ah
c001246e:	0f b6 c0             	movzx  eax,al
c0012471:	52                   	push   edx
c0012472:	50                   	push   eax
c0012473:	53                   	push   ebx
c0012474:	e8 b9 96 ff ff       	call   c000bb32 <File::chfatattr(unsigned char, unsigned char)>
c0012479:	83 c4 10             	add    esp,0x10
c001247c:	85 db                	test   ebx,ebx
c001247e:	89 c6                	mov    esi,eax
c0012480:	74 0c                	je     c001248e <SysSetFatAttrib(regs*)+0x55>
c0012482:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012484:	83 ec 0c             	sub    esp,0xc
c0012487:	53                   	push   ebx
c0012488:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001248b:	83 c4 10             	add    esp,0x10
c001248e:	5b                   	pop    ebx
c001248f:	31 c0                	xor    eax,eax
c0012491:	85 f6                	test   esi,esi
c0012493:	0f 95 c0             	setne  al
c0012496:	31 d2                	xor    edx,edx
c0012498:	5e                   	pop    esi
c0012499:	f7 d8                	neg    eax
c001249b:	83 d2 00             	adc    edx,0x0
c001249e:	f7 da                	neg    edx
c00124a0:	5f                   	pop    edi
c00124a1:	c3                   	ret    

c00124a2 <SysPipe(regs*)>:
c00124a2:	57                   	push   edi
c00124a3:	56                   	push   esi
c00124a4:	53                   	push   ebx
c00124a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a9:	83 ec 0c             	sub    esp,0xc
c00124ac:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00124af:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00124b2:	6a 20                	push   0x20
c00124b4:	e8 1a 56 ff ff       	call   c0007ad3 <malloc>
c00124b9:	89 c3                	mov    ebx,eax
c00124bb:	58                   	pop    eax
c00124bc:	5a                   	pop    edx
c00124bd:	68 00 50 00 00       	push   0x5000
c00124c2:	53                   	push   ebx
c00124c3:	e8 76 5f ff ff       	call   c000843e <Pipe::Pipe(int)>
c00124c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124cb:	e8 ce 6c ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00124d0:	89 07                	mov    DWORD PTR [edi],eax
c00124d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124d5:	e8 c4 6c ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	31 d2                	xor    edx,edx
c00124df:	89 06                	mov    DWORD PTR [esi],eax
c00124e1:	31 c0                	xor    eax,eax
c00124e3:	5b                   	pop    ebx
c00124e4:	5e                   	pop    esi
c00124e5:	5f                   	pop    edi
c00124e6:	c3                   	ret    

c00124e7 <SysGetUnixTime(regs*)>:
c00124e7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00124ec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00124f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124f6:	e9 7f 9d ff ff       	jmp    c000c27a <Clock::timeInSecondsLocal()>

c00124fb <string_ends_with(char const*, char const*)>:
c00124fb:	57                   	push   edi
c00124fc:	56                   	push   esi
c00124fd:	53                   	push   ebx
c00124fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012509:	53                   	push   ebx
c001250a:	e8 71 e0 fe ff       	call   c0000580 <strlen>
c001250f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012512:	89 c6                	mov    esi,eax
c0012514:	e8 67 e0 fe ff       	call   c0000580 <strlen>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	31 d2                	xor    edx,edx
c001251e:	39 c6                	cmp    esi,eax
c0012520:	7d 06                	jge    c0012528 <string_ends_with(char const*, char const*)+0x2d>
c0012522:	5b                   	pop    ebx
c0012523:	89 d0                	mov    eax,edx
c0012525:	5e                   	pop    esi
c0012526:	5f                   	pop    edi
c0012527:	c3                   	ret    
c0012528:	83 ec 08             	sub    esp,0x8
c001252b:	29 c6                	sub    esi,eax
c001252d:	57                   	push   edi
c001252e:	01 f3                	add    ebx,esi
c0012530:	53                   	push   ebx
c0012531:	e8 4a e2 fe ff       	call   c0000780 <strcmp>
c0012536:	83 c4 10             	add    esp,0x10
c0012539:	31 d2                	xor    edx,edx
c001253b:	5b                   	pop    ebx
c001253c:	5e                   	pop    esi
c001253d:	85 c0                	test   eax,eax
c001253f:	5f                   	pop    edi
c0012540:	0f 94 c2             	sete   dl
c0012543:	89 d0                	mov    eax,edx
c0012545:	c3                   	ret    

c0012546 <SysOpen(regs*)>:
c0012546:	56                   	push   esi
c0012547:	53                   	push   ebx
c0012548:	81 ec 04 01 00 00    	sub    esp,0x104
c001254e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012555:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012558:	85 c0                	test   eax,eax
c001255a:	0f 84 c4 01 00 00    	je     c0012724 <SysOpen(regs*)+0x1de>
c0012560:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012563:	85 c0                	test   eax,eax
c0012565:	0f 84 b9 01 00 00    	je     c0012724 <SysOpen(regs*)+0x1de>
c001256b:	6a 00                	push   0x0
c001256d:	68 42 21 02 c0       	push   0xc0022142
c0012572:	50                   	push   eax
c0012573:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012577:	56                   	push   esi
c0012578:	e8 33 90 ff ff       	call   c000b5b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001257d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012580:	e8 fb df fe ff       	call   c0000580 <strlen>
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	83 e8 01             	sub    eax,0x1
c001258b:	74 29                	je     c00125b6 <SysOpen(regs*)+0x70>
c001258d:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012591:	83 fa 2e             	cmp    edx,0x2e
c0012594:	74 1c                	je     c00125b2 <SysOpen(regs*)+0x6c>
c0012596:	83 fa 3a             	cmp    edx,0x3a
c0012599:	74 17                	je     c00125b2 <SysOpen(regs*)+0x6c>
c001259b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001259f:	83 e8 01             	sub    eax,0x1
c00125a2:	74 12                	je     c00125b6 <SysOpen(regs*)+0x70>
c00125a4:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00125a8:	83 fa 3a             	cmp    edx,0x3a
c00125ab:	74 05                	je     c00125b2 <SysOpen(regs*)+0x6c>
c00125ad:	83 fa 2e             	cmp    edx,0x2e
c00125b0:	75 e9                	jne    c001259b <SysOpen(regs*)+0x55>
c00125b2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00125b6:	83 ec 08             	sub    esp,0x8
c00125b9:	68 46 21 02 c0       	push   0xc0022146
c00125be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125c1:	50                   	push   eax
c00125c2:	e8 34 ff ff ff       	call   c00124fb <string_ends_with(char const*, char const*)>
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	85 c0                	test   eax,eax
c00125cc:	74 1d                	je     c00125eb <SysOpen(regs*)+0xa5>
c00125ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125d1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00125d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00125de:	81 c4 04 01 00 00    	add    esp,0x104
c00125e4:	31 c0                	xor    eax,eax
c00125e6:	5b                   	pop    ebx
c00125e7:	31 d2                	xor    edx,edx
c00125e9:	5e                   	pop    esi
c00125ea:	c3                   	ret    
c00125eb:	83 ec 08             	sub    esp,0x8
c00125ee:	68 4b 21 02 c0       	push   0xc002214b
c00125f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125f6:	50                   	push   eax
c00125f7:	e8 ff fe ff ff       	call   c00124fb <string_ends_with(char const*, char const*)>
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	85 c0                	test   eax,eax
c0012601:	75 cb                	jne    c00125ce <SysOpen(regs*)+0x88>
c0012603:	83 ec 08             	sub    esp,0x8
c0012606:	68 47 21 02 c0       	push   0xc0022147
c001260b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001260e:	50                   	push   eax
c001260f:	e8 6c e1 fe ff       	call   c0000780 <strcmp>
c0012614:	83 c4 10             	add    esp,0x10
c0012617:	85 c0                	test   eax,eax
c0012619:	74 b3                	je     c00125ce <SysOpen(regs*)+0x88>
c001261b:	83 ec 08             	sub    esp,0x8
c001261e:	68 46 21 02 c0       	push   0xc0022146
c0012623:	56                   	push   esi
c0012624:	e8 d2 fe ff ff       	call   c00124fb <string_ends_with(char const*, char const*)>
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	85 c0                	test   eax,eax
c001262e:	75 9e                	jne    c00125ce <SysOpen(regs*)+0x88>
c0012630:	83 ec 08             	sub    esp,0x8
c0012633:	68 50 21 02 c0       	push   0xc0022150
c0012638:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001263b:	50                   	push   eax
c001263c:	e8 ba fe ff ff       	call   c00124fb <string_ends_with(char const*, char const*)>
c0012641:	83 c4 10             	add    esp,0x10
c0012644:	85 c0                	test   eax,eax
c0012646:	0f 85 eb 00 00 00    	jne    c0012737 <SysOpen(regs*)+0x1f1>
c001264c:	83 ec 08             	sub    esp,0x8
c001264f:	68 55 21 02 c0       	push   0xc0022155
c0012654:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012657:	50                   	push   eax
c0012658:	e8 9e fe ff ff       	call   c00124fb <string_ends_with(char const*, char const*)>
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	85 c0                	test   eax,eax
c0012662:	0f 85 cf 00 00 00    	jne    c0012737 <SysOpen(regs*)+0x1f1>
c0012668:	83 ec 08             	sub    esp,0x8
c001266b:	68 51 21 02 c0       	push   0xc0022151
c0012670:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012673:	51                   	push   ecx
c0012674:	e8 07 e1 fe ff       	call   c0000780 <strcmp>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	85 c0                	test   eax,eax
c001267e:	0f 84 b3 00 00 00    	je     c0012737 <SysOpen(regs*)+0x1f1>
c0012684:	83 ec 08             	sub    esp,0x8
c0012687:	68 50 21 02 c0       	push   0xc0022150
c001268c:	56                   	push   esi
c001268d:	e8 69 fe ff ff       	call   c00124fb <string_ends_with(char const*, char const*)>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	85 c0                	test   eax,eax
c0012697:	0f 85 9a 00 00 00    	jne    c0012737 <SysOpen(regs*)+0x1f1>
c001269d:	83 ec 0c             	sub    esp,0xc
c00126a0:	68 14 01 00 00       	push   0x114
c00126a5:	e8 29 54 ff ff       	call   c0007ad3 <malloc>
c00126aa:	83 c4 0c             	add    esp,0xc
c00126ad:	89 c6                	mov    esi,eax
c00126af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126b7:	50                   	push   eax
c00126b8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00126bb:	52                   	push   edx
c00126bc:	56                   	push   esi
c00126bd:	e8 ea 91 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c00126c2:	83 c4 10             	add    esp,0x10
c00126c5:	85 f6                	test   esi,esi
c00126c7:	74 5b                	je     c0012724 <SysOpen(regs*)+0x1de>
c00126c9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126cc:	0f b6 c2             	movzx  eax,dl
c00126cf:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00126d2:	89 d0                	mov    eax,edx
c00126d4:	83 e0 01             	and    eax,0x1
c00126d7:	f6 c2 02             	test   dl,0x2
c00126da:	74 03                	je     c00126df <SysOpen(regs*)+0x199>
c00126dc:	83 c8 02             	or     eax,0x2
c00126df:	f6 c2 04             	test   dl,0x4
c00126e2:	74 03                	je     c00126e7 <SysOpen(regs*)+0x1a1>
c00126e4:	83 c8 04             	or     eax,0x4
c00126e7:	f6 c2 08             	test   dl,0x8
c00126ea:	74 03                	je     c00126ef <SysOpen(regs*)+0x1a9>
c00126ec:	83 c8 0a             	or     eax,0xa
c00126ef:	80 e2 10             	and    dl,0x10
c00126f2:	74 03                	je     c00126f7 <SysOpen(regs*)+0x1b1>
c00126f4:	83 c8 12             	or     eax,0x12
c00126f7:	83 ec 08             	sub    esp,0x8
c00126fa:	50                   	push   eax
c00126fb:	56                   	push   esi
c00126fc:	e8 c9 91 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	85 c0                	test   eax,eax
c0012706:	75 1c                	jne    c0012724 <SysOpen(regs*)+0x1de>
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	56                   	push   esi
c001270c:	e8 8d 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012711:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012714:	83 c4 10             	add    esp,0x10
c0012717:	89 02                	mov    DWORD PTR [edx],eax
c0012719:	c1 f8 1f             	sar    eax,0x1f
c001271c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001271f:	e9 ba fe ff ff       	jmp    c00125de <SysOpen(regs*)+0x98>
c0012724:	81 c4 04 01 00 00    	add    esp,0x104
c001272a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001272f:	5b                   	pop    ebx
c0012730:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012735:	5e                   	pop    esi
c0012736:	c3                   	ret    
c0012737:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001273a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012740:	e9 92 fe ff ff       	jmp    c00125d7 <SysOpen(regs*)+0x91>

c0012745 <KeSystemCall(regs*, void*)>:
c0012745:	53                   	push   ebx
c0012746:	83 ec 08             	sub    esp,0x8
c0012749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001274d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012750:	83 f8 3e             	cmp    eax,0x3e
c0012753:	77 16                	ja     c001276b <KeSystemCall(regs*, void*)+0x26>
c0012755:	8b 14 85 60 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcaa0]
c001275c:	85 d2                	test   edx,edx
c001275e:	74 0b                	je     c001276b <KeSystemCall(regs*, void*)+0x26>
c0012760:	83 ec 0c             	sub    esp,0xc
c0012763:	53                   	push   ebx
c0012764:	ff d2                	call   edx
c0012766:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012769:	eb 0d                	jmp    c0012778 <KeSystemCall(regs*, void*)+0x33>
c001276b:	52                   	push   edx
c001276c:	52                   	push   edx
c001276d:	50                   	push   eax
c001276e:	68 5a 21 02 c0       	push   0xc002215a
c0012773:	e8 92 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012778:	83 c4 10             	add    esp,0x10
c001277b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012780:	83 c4 08             	add    esp,0x8
c0012783:	31 d2                	xor    edx,edx
c0012785:	5b                   	pop    ebx
c0012786:	c3                   	ret    
c0012787:	90                   	nop

c0012788 <KeSwitchEndian16(unsigned short)>:
c0012788:	83 ec 04             	sub    esp,0x4
c001278b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001278f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012793:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012797:	c1 f8 08             	sar    eax,0x8
c001279a:	89 c2                	mov    edx,eax
c001279c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00127a0:	c1 e0 08             	shl    eax,0x8
c00127a3:	09 d0                	or     eax,edx
c00127a5:	83 c4 04             	add    esp,0x4
c00127a8:	c3                   	ret    
c00127a9:	8d 76 00             	lea    esi,[esi+0x0]

c00127ac <KeSwitchEndian32(unsigned int)>:
c00127ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127b0:	c1 e8 18             	shr    eax,0x18
c00127b3:	89 c2                	mov    edx,eax
c00127b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127b9:	c1 e0 08             	shl    eax,0x8
c00127bc:	25 00 00 ff 00       	and    eax,0xff0000
c00127c1:	09 c2                	or     edx,eax
c00127c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127c7:	c1 e8 08             	shr    eax,0x8
c00127ca:	25 00 ff 00 00       	and    eax,0xff00
c00127cf:	09 c2                	or     edx,eax
c00127d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127d5:	c1 e0 18             	shl    eax,0x18
c00127d8:	09 d0                	or     eax,edx
c00127da:	c3                   	ret    
c00127db:	90                   	nop

c00127dc <EthernetCRC32(unsigned char*, int)>:
c00127dc:	83 ec 10             	sub    esp,0x10
c00127df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00127e4:	75 0a                	jne    c00127f0 <EthernetCRC32(unsigned char*, int)+0x14>
c00127e6:	b8 00 00 00 00       	mov    eax,0x0
c00127eb:	e9 8c 00 00 00       	jmp    c001287c <EthernetCRC32(unsigned char*, int)+0xa0>
c00127f0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00127f5:	7f 09                	jg     c0012800 <EthernetCRC32(unsigned char*, int)+0x24>
c00127f7:	b8 00 00 00 00       	mov    eax,0x0
c00127fc:	eb 7e                	jmp    c001287c <EthernetCRC32(unsigned char*, int)+0xa0>
c00127fe:	66 90                	xchg   ax,ax
c0012800:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012808:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012810:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012814:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012818:	7d 5a                	jge    c0012874 <EthernetCRC32(unsigned char*, int)+0x98>
c001281a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001281e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012822:	01 d0                	add    eax,edx
c0012824:	8a 00                	mov    al,BYTE PTR [eax]
c0012826:	0f b6 c0             	movzx  eax,al
c0012829:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001282d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001283d:	7f 2d                	jg     c001286c <EthernetCRC32(unsigned char*, int)+0x90>
c001283f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012843:	83 e0 01             	and    eax,0x1
c0012846:	74 10                	je     c0012858 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001284c:	d1 e8                	shr    eax,1
c001284e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012853:	eb 0b                	jmp    c0012860 <EthernetCRC32(unsigned char*, int)+0x84>
c0012855:	8d 76 00             	lea    esi,[esi+0x0]
c0012858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001285c:	d1 e8                	shr    eax,1
c001285e:	66 90                	xchg   ax,ax
c0012860:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012864:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012869:	eb cd                	jmp    c0012838 <EthernetCRC32(unsigned char*, int)+0x5c>
c001286b:	90                   	nop
c001286c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012871:	eb 9d                	jmp    c0012810 <EthernetCRC32(unsigned char*, int)+0x34>
c0012873:	90                   	nop
c0012874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012878:	f7 d0                	not    eax
c001287a:	66 90                	xchg   ax,ax
c001287c:	83 c4 10             	add    esp,0x10
c001287f:	c3                   	ret    

c0012880 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012880:	83 ec 2c             	sub    esp,0x2c
c0012883:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012887:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001288c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012890:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012894:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012898:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001289b:	0f b7 c0             	movzx  eax,ax
c001289e:	3d 06 08 00 00       	cmp    eax,0x806
c00128a3:	75 13                	jne    c00128b8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00128a5:	83 ec 0c             	sub    esp,0xc
c00128a8:	68 6e 21 02 c0       	push   0xc002216e
c00128ad:	e8 58 80 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	eb 25                	jmp    c00128dc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00128b7:	90                   	nop
c00128b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128bf:	0f b7 c0             	movzx  eax,ax
c00128c2:	3d 00 08 00 00       	cmp    eax,0x800
c00128c7:	75 13                	jne    c00128dc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	68 84 21 02 c0       	push   0xc0022184
c00128d1:	e8 34 80 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00128d6:	83 c4 10             	add    esp,0x10
c00128d9:	8d 76 00             	lea    esi,[esi+0x0]
c00128dc:	90                   	nop
c00128dd:	83 c4 2c             	add    esp,0x2c
c00128e0:	c3                   	ret    

c00128e1 <CmOpen(char const*)>:
c00128e1:	57                   	push   edi
c00128e2:	56                   	push   esi
c00128e3:	53                   	push   ebx
c00128e4:	83 ec 1c             	sub    esp,0x1c
c00128e7:	6a 30                	push   0x30
c00128e9:	e8 e5 51 ff ff       	call   c0007ad3 <malloc>
c00128ee:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00128f5:	89 c3                	mov    ebx,eax
c00128f7:	e8 d7 51 ff ff       	call   c0007ad3 <malloc>
c00128fc:	83 c4 0c             	add    esp,0xc
c00128ff:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012905:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012909:	89 c6                	mov    esi,eax
c001290b:	50                   	push   eax
c001290c:	e8 9b 8f ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0012911:	83 c4 0c             	add    esp,0xc
c0012914:	89 33                	mov    DWORD PTR [ebx],esi
c0012916:	8d 44 24 07          	lea    eax,[esp+0x7]
c001291a:	50                   	push   eax
c001291b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001291f:	50                   	push   eax
c0012920:	56                   	push   esi
c0012921:	e8 a6 92 ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0012926:	5a                   	pop    edx
c0012927:	59                   	pop    ecx
c0012928:	6a 01                	push   0x1
c001292a:	ff 33                	push   DWORD PTR [ebx]
c001292c:	e8 99 8f ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0012931:	5e                   	pop    esi
c0012932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012936:	e8 98 51 ff ff       	call   c0007ad3 <malloc>
c001293b:	5a                   	pop    edx
c001293c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012940:	89 c7                	mov    edi,eax
c0012942:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012944:	8b 10                	mov    edx,DWORD PTR [eax]
c0012946:	56                   	push   esi
c0012947:	57                   	push   edi
c0012948:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001294c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012950:	50                   	push   eax
c0012951:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012954:	83 c4 14             	add    esp,0x14
c0012957:	ff 33                	push   DWORD PTR [ebx]
c0012959:	e8 ca 8f ff ff       	call   c000b928 <File::close()>
c001295e:	59                   	pop    ecx
c001295f:	58                   	pop    eax
c0012960:	6a 13                	push   0x13
c0012962:	ff 33                	push   DWORD PTR [ebx]
c0012964:	e8 61 8f ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0012969:	8b 03                	mov    eax,DWORD PTR [ebx]
c001296b:	8b 10                	mov    edx,DWORD PTR [eax]
c001296d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012970:	57                   	push   edi
c0012971:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012975:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012979:	50                   	push   eax
c001297a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001297d:	83 c4 14             	add    esp,0x14
c0012980:	57                   	push   edi
c0012981:	e8 5d 51 ff ff       	call   c0007ae3 <free>
c0012986:	83 c4 10             	add    esp,0x10
c0012989:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001298c:	75 10                	jne    c001299e <CmOpen(char const*)+0xbd>
c001298e:	83 ec 0c             	sub    esp,0xc
c0012991:	68 99 21 02 c0       	push   0xc0022199
c0012996:	e8 2e e9 ff ff       	call   c00112c9 <KePanic(char const*)>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	50                   	push   eax
c001299f:	6a 00                	push   0x0
c00129a1:	6a 00                	push   0x0
c00129a3:	ff 33                	push   DWORD PTR [ebx]
c00129a5:	8d 7b 05             	lea    edi,[ebx+0x5]
c00129a8:	e8 db 8f ff ff       	call   c000b988 <File::seek(unsigned long long)>
c00129ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129af:	8b 10                	mov    edx,DWORD PTR [eax]
c00129b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00129b4:	57                   	push   edi
c00129b5:	6a 00                	push   0x0
c00129b7:	6a 2b                	push   0x2b
c00129b9:	50                   	push   eax
c00129ba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00129bd:	83 c4 1c             	add    esp,0x1c
c00129c0:	6a 00                	push   0x0
c00129c2:	6a 00                	push   0x0
c00129c4:	ff 33                	push   DWORD PTR [ebx]
c00129c6:	e8 bd 8f ff ff       	call   c000b988 <File::seek(unsigned long long)>
c00129cb:	83 c4 0c             	add    esp,0xc
c00129ce:	6a 08                	push   0x8
c00129d0:	68 aa 21 02 c0       	push   0xc00221aa
c00129d5:	57                   	push   edi
c00129d6:	e8 a5 d9 fe ff       	call   c0000380 <memcmp>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	85 c0                	test   eax,eax
c00129e0:	74 10                	je     c00129f2 <CmOpen(char const*)+0x111>
c00129e2:	83 ec 0c             	sub    esp,0xc
c00129e5:	68 b3 21 02 c0       	push   0xc00221b3
c00129ea:	e8 da e8 ff ff       	call   c00112c9 <KePanic(char const*)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00129f6:	83 c4 10             	add    esp,0x10
c00129f9:	89 d8                	mov    eax,ebx
c00129fb:	5b                   	pop    ebx
c00129fc:	5e                   	pop    esi
c00129fd:	5f                   	pop    edi
c00129fe:	c3                   	ret    

c00129ff <CmClose(Reghive_Tag*)>:
c00129ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a03:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a07:	74 0b                	je     c0012a14 <CmClose(Reghive_Tag*)+0x15>
c0012a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a0f:	e9 14 8f ff ff       	jmp    c000b928 <File::close()>
c0012a14:	c3                   	ret    

c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a15:	53                   	push   ebx
c0012a16:	83 ec 18             	sub    esp,0x18
c0012a19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a1d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a21:	74 29                	je     c0012a4c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a23:	50                   	push   eax
c0012a24:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a29:	99                   	cdq    
c0012a2a:	52                   	push   edx
c0012a2b:	50                   	push   eax
c0012a2c:	ff 33                	push   DWORD PTR [ebx]
c0012a2e:	e8 55 8f ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0012a33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a35:	5a                   	pop    edx
c0012a36:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a3c:	51                   	push   ecx
c0012a3d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a41:	6a 00                	push   0x0
c0012a43:	6a 2b                	push   0x2b
c0012a45:	50                   	push   eax
c0012a46:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a49:	83 c4 20             	add    esp,0x20
c0012a4c:	83 c4 18             	add    esp,0x18
c0012a4f:	5b                   	pop    ebx
c0012a50:	c3                   	ret    

c0012a51 <CmGetString(Reghive_Tag*, int, char*)>:
c0012a51:	55                   	push   ebp
c0012a52:	57                   	push   edi
c0012a53:	56                   	push   esi
c0012a54:	53                   	push   ebx
c0012a55:	31 db                	xor    ebx,ebx
c0012a57:	83 ec 70             	sub    esp,0x70
c0012a5a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012a5e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012a65:	50                   	push   eax
c0012a66:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012a6d:	55                   	push   ebp
c0012a6e:	e8 a2 ff ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012a7b:	c1 e0 08             	shl    eax,0x8
c0012a7e:	89 c2                	mov    edx,eax
c0012a80:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012a85:	09 d0                	or     eax,edx
c0012a87:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012a8c:	c1 e0 08             	shl    eax,0x8
c0012a8f:	09 d0                	or     eax,edx
c0012a91:	74 25                	je     c0012ab8 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012a93:	52                   	push   edx
c0012a94:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012a98:	52                   	push   edx
c0012a99:	6b fb 0d             	imul   edi,ebx,0xd
c0012a9c:	50                   	push   eax
c0012a9d:	55                   	push   ebp
c0012a9e:	e8 72 ff ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012aa3:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012aa7:	b9 27 00 00 00       	mov    ecx,0x27
c0012aac:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012ab3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ab5:	83 c4 10             	add    esp,0x10
c0012ab8:	83 c3 03             	add    ebx,0x3
c0012abb:	83 fb 15             	cmp    ebx,0x15
c0012abe:	75 b6                	jne    c0012a76 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012ac0:	83 c4 6c             	add    esp,0x6c
c0012ac3:	5b                   	pop    ebx
c0012ac4:	5e                   	pop    esi
c0012ac5:	5f                   	pop    edi
c0012ac6:	5d                   	pop    ebp
c0012ac7:	c3                   	ret    

c0012ac8 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012ac8:	83 ec 40             	sub    esp,0x40
c0012acb:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012acf:	50                   	push   eax
c0012ad0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ad4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ad8:	e8 38 ff ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	83 c8 ff             	or     eax,0xffffffff
c0012ae3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012ae8:	75 19                	jne    c0012b03 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012aea:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012aef:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012af4:	c1 e0 08             	shl    eax,0x8
c0012af7:	09 c2                	or     edx,eax
c0012af9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012afe:	c1 e0 10             	shl    eax,0x10
c0012b01:	09 d0                	or     eax,edx
c0012b03:	83 c4 3c             	add    esp,0x3c
c0012b06:	c3                   	ret    

c0012b07 <CmGetNext(Reghive_Tag*, int)>:
c0012b07:	83 ec 40             	sub    esp,0x40
c0012b0a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012b0e:	50                   	push   eax
c0012b0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b17:	e8 f9 fe ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b1c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012b21:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012b26:	c1 e0 08             	shl    eax,0x8
c0012b29:	09 c2                	or     edx,eax
c0012b2b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012b30:	83 c4 4c             	add    esp,0x4c
c0012b33:	c1 e0 10             	shl    eax,0x10
c0012b36:	09 d0                	or     eax,edx
c0012b38:	c3                   	ret    

c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012b39:	53                   	push   ebx
c0012b3a:	83 ec 18             	sub    esp,0x18
c0012b3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b41:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b45:	74 29                	je     c0012b70 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012b47:	50                   	push   eax
c0012b48:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012b4d:	99                   	cdq    
c0012b4e:	52                   	push   edx
c0012b4f:	50                   	push   eax
c0012b50:	ff 33                	push   DWORD PTR [ebx]
c0012b52:	e8 31 8e ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0012b57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b59:	5a                   	pop    edx
c0012b5a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b60:	51                   	push   ecx
c0012b61:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012b65:	6a 00                	push   0x0
c0012b67:	6a 2b                	push   0x2b
c0012b69:	50                   	push   eax
c0012b6a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b6d:	83 c4 20             	add    esp,0x20
c0012b70:	83 c4 18             	add    esp,0x18
c0012b73:	5b                   	pop    ebx
c0012b74:	c3                   	ret    

c0012b75 <CmFreeExtent(Reghive_Tag*, int)>:
c0012b75:	53                   	push   ebx
c0012b76:	83 ec 3c             	sub    esp,0x3c
c0012b79:	6a 2b                	push   0x2b
c0012b7b:	6a 00                	push   0x0
c0012b7d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012b81:	53                   	push   ebx
c0012b82:	e8 69 d9 fe ff       	call   c00004f0 <memset>
c0012b87:	83 c4 0c             	add    esp,0xc
c0012b8a:	53                   	push   ebx
c0012b8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b93:	e8 a1 ff ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b98:	83 c4 48             	add    esp,0x48
c0012b9b:	5b                   	pop    ebx
c0012b9c:	c3                   	ret    

c0012b9d <CmUpdateHeader(Reghive_Tag*)>:
c0012b9d:	83 ec 0c             	sub    esp,0xc
c0012ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba4:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ba8:	74 10                	je     c0012bba <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012baa:	52                   	push   edx
c0012bab:	8d 50 05             	lea    edx,[eax+0x5]
c0012bae:	52                   	push   edx
c0012baf:	6a 00                	push   0x0
c0012bb1:	50                   	push   eax
c0012bb2:	e8 82 ff ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	83 c4 0c             	add    esp,0xc
c0012bbd:	c3                   	ret    

c0012bbe <CmExpand(Reghive_Tag*, int)>:
c0012bbe:	55                   	push   ebp
c0012bbf:	57                   	push   edi
c0012bc0:	83 cf ff             	or     edi,0xffffffff
c0012bc3:	56                   	push   esi
c0012bc4:	53                   	push   ebx
c0012bc5:	83 ec 3c             	sub    esp,0x3c
c0012bc8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012bcc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012bd0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012bd4:	74 59                	je     c0012c2f <CmExpand(Reghive_Tag*, int)+0x71>
c0012bd6:	50                   	push   eax
c0012bd7:	31 d2                	xor    edx,edx
c0012bd9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012bdd:	31 ff                	xor    edi,edi
c0012bdf:	52                   	push   edx
c0012be0:	50                   	push   eax
c0012be1:	ff 33                	push   DWORD PTR [ebx]
c0012be3:	e8 a0 8d ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0012be8:	83 c4 0c             	add    esp,0xc
c0012beb:	6a 2b                	push   0x2b
c0012bed:	6a 00                	push   0x0
c0012bef:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012bf3:	55                   	push   ebp
c0012bf4:	e8 f7 d8 fe ff       	call   c00004f0 <memset>
c0012bf9:	83 c4 10             	add    esp,0x10
c0012bfc:	39 f7                	cmp    edi,esi
c0012bfe:	7d 1b                	jge    c0012c1b <CmExpand(Reghive_Tag*, int)+0x5d>
c0012c00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c02:	83 ec 0c             	sub    esp,0xc
c0012c05:	47                   	inc    edi
c0012c06:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012c0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c0c:	51                   	push   ecx
c0012c0d:	55                   	push   ebp
c0012c0e:	6a 00                	push   0x0
c0012c10:	6a 2b                	push   0x2b
c0012c12:	50                   	push   eax
c0012c13:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c16:	83 c4 20             	add    esp,0x20
c0012c19:	eb e1                	jmp    c0012bfc <CmExpand(Reghive_Tag*, int)+0x3e>
c0012c1b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012c1e:	83 ec 0c             	sub    esp,0xc
c0012c21:	01 fe                	add    esi,edi
c0012c23:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012c26:	53                   	push   ebx
c0012c27:	e8 71 ff ff ff       	call   c0012b9d <CmUpdateHeader(Reghive_Tag*)>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	83 c4 3c             	add    esp,0x3c
c0012c32:	89 f8                	mov    eax,edi
c0012c34:	5b                   	pop    ebx
c0012c35:	5e                   	pop    esi
c0012c36:	5f                   	pop    edi
c0012c37:	5d                   	pop    ebp
c0012c38:	c3                   	ret    

c0012c39 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012c39:	55                   	push   ebp
c0012c3a:	57                   	push   edi
c0012c3b:	56                   	push   esi
c0012c3c:	53                   	push   ebx
c0012c3d:	83 cb ff             	or     ebx,0xffffffff
c0012c40:	83 ec 1c             	sub    esp,0x1c
c0012c43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012c47:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012c4b:	74 68                	je     c0012cb5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012c4d:	51                   	push   ecx
c0012c4e:	be 2b 00 00 00       	mov    esi,0x2b
c0012c53:	6a 00                	push   0x0
c0012c55:	31 ff                	xor    edi,edi
c0012c57:	6a 00                	push   0x0
c0012c59:	31 db                	xor    ebx,ebx
c0012c5b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012c5e:	e8 25 8d ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012c69:	76 3b                	jbe    c0012ca6 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012c6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c6e:	83 ec 0c             	sub    esp,0xc
c0012c71:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012c75:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c77:	51                   	push   ecx
c0012c78:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012c7c:	51                   	push   ecx
c0012c7d:	6a 00                	push   0x0
c0012c7f:	6a 01                	push   0x1
c0012c81:	50                   	push   eax
c0012c82:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c85:	83 c4 20             	add    esp,0x20
c0012c88:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012c8d:	74 26                	je     c0012cb5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012c8f:	52                   	push   edx
c0012c90:	43                   	inc    ebx
c0012c91:	57                   	push   edi
c0012c92:	56                   	push   esi
c0012c93:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012c96:	e8 ed 8c ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0012c9b:	83 c6 2b             	add    esi,0x2b
c0012c9e:	83 d7 00             	adc    edi,0x0
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	eb c0                	jmp    c0012c66 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012ca6:	50                   	push   eax
c0012ca7:	50                   	push   eax
c0012ca8:	6a 40                	push   0x40
c0012caa:	55                   	push   ebp
c0012cab:	e8 0e ff ff ff       	call   c0012bbe <CmExpand(Reghive_Tag*, int)>
c0012cb0:	83 c4 10             	add    esp,0x10
c0012cb3:	89 c3                	mov    ebx,eax
c0012cb5:	83 c4 1c             	add    esp,0x1c
c0012cb8:	89 d8                	mov    eax,ebx
c0012cba:	5b                   	pop    ebx
c0012cbb:	5e                   	pop    esi
c0012cbc:	5f                   	pop    edi
c0012cbd:	5d                   	pop    ebp
c0012cbe:	c3                   	ret    

c0012cbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012cbf:	55                   	push   ebp
c0012cc0:	57                   	push   edi
c0012cc1:	56                   	push   esi
c0012cc2:	53                   	push   ebx
c0012cc3:	81 ec 88 00 00 00    	sub    esp,0x88
c0012cc9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012cd0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cd7:	e8 5d ff ff ff       	call   c0012c39 <CmFindUnusedExtent(Reghive_Tag*)>
c0012cdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ce0:	83 c4 0c             	add    esp,0xc
c0012ce3:	6a 2b                	push   0x2b
c0012ce5:	6a 00                	push   0x0
c0012ce7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012ceb:	55                   	push   ebp
c0012cec:	e8 ff d7 fe ff       	call   c00004f0 <memset>
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	85 db                	test   ebx,ebx
c0012cf6:	74 12                	je     c0012d0a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012cf8:	51                   	push   ecx
c0012cf9:	55                   	push   ebp
c0012cfa:	53                   	push   ebx
c0012cfb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d02:	e8 0e fd ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012d0e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012d15:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012d1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d1c:	85 db                	test   ebx,ebx
c0012d1e:	74 49                	je     c0012d69 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012d20:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012d25:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012d2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d2e:	c1 e0 08             	shl    eax,0x8
c0012d31:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012d37:	09 c8                	or     eax,ecx
c0012d39:	74 11                	je     c0012d4c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012d3b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012d3f:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012d43:	c1 e8 10             	shr    eax,0x10
c0012d46:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012d4a:	eb 0f                	jmp    c0012d5b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012d4c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012d51:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012d56:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012d5b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012d5f:	c1 ea 08             	shr    edx,0x8
c0012d62:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012d67:	eb 0f                	jmp    c0012d78 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012d69:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012d6e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012d73:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012d78:	52                   	push   edx
c0012d79:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012d7d:	50                   	push   eax
c0012d7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d82:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d89:	e8 ab fd ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d8e:	83 c4 10             	add    esp,0x10
c0012d91:	85 db                	test   ebx,ebx
c0012d93:	74 12                	je     c0012da7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012d95:	50                   	push   eax
c0012d96:	55                   	push   ebp
c0012d97:	53                   	push   ebx
c0012d98:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d9f:	e8 95 fd ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012da4:	83 c4 10             	add    esp,0x10
c0012da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dab:	83 c4 7c             	add    esp,0x7c
c0012dae:	5b                   	pop    ebx
c0012daf:	5e                   	pop    esi
c0012db0:	5f                   	pop    edi
c0012db1:	5d                   	pop    ebp
c0012db2:	c3                   	ret    

c0012db3 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012db3:	55                   	push   ebp
c0012db4:	57                   	push   edi
c0012db5:	56                   	push   esi
c0012db6:	53                   	push   ebx
c0012db7:	bb 27 00 00 00       	mov    ebx,0x27
c0012dbc:	81 ec 88 00 00 00    	sub    esp,0x88
c0012dc2:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012dc9:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012dd0:	e8 ab d7 fe ff       	call   c0000580 <strlen>
c0012dd5:	8d 48 26             	lea    ecx,[eax+0x26]
c0012dd8:	89 c8                	mov    eax,ecx
c0012dda:	99                   	cdq    
c0012ddb:	f7 fb                	idiv   ebx
c0012ddd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012dea:	7e 10                	jle    c0012dfc <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012dec:	83 ec 0c             	sub    esp,0xc
c0012def:	68 c4 21 02 c0       	push   0xc00221c4
c0012df4:	e8 d0 e4 ff ff       	call   c00112c9 <KePanic(char const*)>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	53                   	push   ebx
c0012dfd:	31 ed                	xor    ebp,ebp
c0012dff:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012e03:	53                   	push   ebx
c0012e04:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e0b:	57                   	push   edi
c0012e0c:	e8 04 fc ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012e18:	89 f0                	mov    eax,esi
c0012e1a:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012e1e:	c1 e0 08             	shl    eax,0x8
c0012e21:	09 c6                	or     esi,eax
c0012e23:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012e27:	c1 e6 08             	shl    esi,0x8
c0012e2a:	09 c6                	or     esi,eax
c0012e2c:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012e30:	7e 72                	jle    c0012ea4 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012e32:	85 f6                	test   esi,esi
c0012e34:	75 25                	jne    c0012e5b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012e36:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012e3b:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012e3f:	50                   	push   eax
c0012e40:	6a 00                	push   0x0
c0012e42:	6a 00                	push   0x0
c0012e44:	57                   	push   edi
c0012e45:	e8 75 fe ff ff       	call   c0012cbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012e4a:	83 c4 10             	add    esp,0x10
c0012e4d:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012e50:	89 c6                	mov    esi,eax
c0012e52:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012e55:	c1 f8 10             	sar    eax,0x10
c0012e58:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012e5b:	51                   	push   ecx
c0012e5c:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012e60:	52                   	push   edx
c0012e61:	56                   	push   esi
c0012e62:	57                   	push   edi
c0012e63:	e8 ad fb ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e68:	83 c4 0c             	add    esp,0xc
c0012e6b:	6a 27                	push   0x27
c0012e6d:	6a 00                	push   0x0
c0012e6f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012e73:	51                   	push   ecx
c0012e74:	e8 77 d6 fe ff       	call   c00004f0 <memset>
c0012e79:	6b c5 27             	imul   eax,ebp,0x27
c0012e7c:	83 c4 0c             	add    esp,0xc
c0012e7f:	6a 27                	push   0x27
c0012e81:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012e88:	50                   	push   eax
c0012e89:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012e8d:	51                   	push   ecx
c0012e8e:	e8 fd d7 fe ff       	call   c0000690 <strncpy>
c0012e93:	83 c4 0c             	add    esp,0xc
c0012e96:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012e9a:	52                   	push   edx
c0012e9b:	56                   	push   esi
c0012e9c:	57                   	push   edi
c0012e9d:	e8 97 fc ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea2:	eb 19                	jmp    c0012ebd <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012ea4:	85 f6                	test   esi,esi
c0012ea6:	74 18                	je     c0012ec0 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012ea8:	52                   	push   edx
c0012ea9:	52                   	push   edx
c0012eaa:	56                   	push   esi
c0012eab:	57                   	push   edi
c0012eac:	e8 c4 fc ff ff       	call   c0012b75 <CmFreeExtent(Reghive_Tag*, int)>
c0012eb1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012eb5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012eb9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012ebd:	83 c4 10             	add    esp,0x10
c0012ec0:	45                   	inc    ebp
c0012ec1:	83 c3 03             	add    ebx,0x3
c0012ec4:	83 fd 07             	cmp    ebp,0x7
c0012ec7:	0f 85 47 ff ff ff    	jne    c0012e14 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012ecd:	50                   	push   eax
c0012ece:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012ed2:	50                   	push   eax
c0012ed3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012eda:	57                   	push   edi
c0012edb:	e8 59 fc ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012ee6:	5b                   	pop    ebx
c0012ee7:	5e                   	pop    esi
c0012ee8:	5f                   	pop    edi
c0012ee9:	5d                   	pop    ebp
c0012eea:	c3                   	ret    

c0012eeb <CmGetMatch(char*, char*, bool, bool*)>:
c0012eeb:	56                   	push   esi
c0012eec:	53                   	push   ebx
c0012eed:	50                   	push   eax
c0012eee:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012ef3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ef7:	74 25                	je     c0012f1e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012ef9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012efc:	31 db                	xor    ebx,ebx
c0012efe:	50                   	push   eax
c0012eff:	50                   	push   eax
c0012f00:	8d 04 9d 60 36 02 c0 	lea    eax,[ebx*4-0x3ffdc9a0]
c0012f07:	50                   	push   eax
c0012f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f0c:	e8 6f d8 fe ff       	call   c0000780 <strcmp>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	85 c0                	test   eax,eax
c0012f16:	74 2e                	je     c0012f46 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012f18:	43                   	inc    ebx
c0012f19:	83 fb 3f             	cmp    ebx,0x3f
c0012f1c:	75 e0                	jne    c0012efe <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012f1e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f21:	31 db                	xor    ebx,ebx
c0012f23:	51                   	push   ecx
c0012f24:	51                   	push   ecx
c0012f25:	8d 04 9d 60 36 02 c0 	lea    eax,[ebx*4-0x3ffdc9a0]
c0012f2c:	50                   	push   eax
c0012f2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f31:	e8 4a d8 fe ff       	call   c0000780 <strcmp>
c0012f36:	83 c4 10             	add    esp,0x10
c0012f39:	85 c0                	test   eax,eax
c0012f3b:	74 09                	je     c0012f46 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012f3d:	43                   	inc    ebx
c0012f3e:	83 fb 3f             	cmp    ebx,0x3f
c0012f41:	75 e0                	jne    c0012f23 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012f43:	83 cb ff             	or     ebx,0xffffffff
c0012f46:	5a                   	pop    edx
c0012f47:	89 d8                	mov    eax,ebx
c0012f49:	5b                   	pop    ebx
c0012f4a:	5e                   	pop    esi
c0012f4b:	c3                   	ret    

c0012f4c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012f4c:	55                   	push   ebp
c0012f4d:	31 c0                	xor    eax,eax
c0012f4f:	57                   	push   edi
c0012f50:	56                   	push   esi
c0012f51:	53                   	push   ebx
c0012f52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f56:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012f5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f62:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012f64:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012f67:	83 fd 1f             	cmp    ebp,0x1f
c0012f6a:	7f 0b                	jg     c0012f77 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012f6c:	0f b6 c2             	movzx  eax,dl
c0012f6f:	d3 e0                	shl    eax,cl
c0012f71:	09 07                	or     DWORD PTR [edi],eax
c0012f73:	b0 01                	mov    al,0x1
c0012f75:	01 33                	add    DWORD PTR [ebx],esi
c0012f77:	5b                   	pop    ebx
c0012f78:	5e                   	pop    esi
c0012f79:	5f                   	pop    edi
c0012f7a:	5d                   	pop    ebp
c0012f7b:	c3                   	ret    

c0012f7c <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012f7c:	57                   	push   edi
c0012f7d:	56                   	push   esi
c0012f7e:	53                   	push   ebx
c0012f7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f83:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012f87:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012f8b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f8f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012f91:	7c 17                	jl     c0012faa <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012f93:	8b 17                	mov    edx,DWORD PTR [edi]
c0012f95:	b8 01 00 00 00       	mov    eax,0x1
c0012f9a:	d3 e0                	shl    eax,cl
c0012f9c:	48                   	dec    eax
c0012f9d:	21 d0                	and    eax,edx
c0012f9f:	d3 ea                	shr    edx,cl
c0012fa1:	89 17                	mov    DWORD PTR [edi],edx
c0012fa3:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012fa5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012fa8:	eb 05                	jmp    c0012faf <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012faa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012fad:	31 c0                	xor    eax,eax
c0012faf:	5b                   	pop    ebx
c0012fb0:	5e                   	pop    esi
c0012fb1:	5f                   	pop    edi
c0012fb2:	c3                   	ret    

c0012fb3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012fb3:	83 ec 40             	sub    esp,0x40
c0012fb6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012fba:	50                   	push   eax
c0012fbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fc3:	e8 4d fa ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fc8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012fcc:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012fd0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012fd4:	89 10                	mov    DWORD PTR [eax],edx
c0012fd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012fd9:	83 c4 4c             	add    esp,0x4c
c0012fdc:	c3                   	ret    

c0012fdd <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012fdd:	55                   	push   ebp
c0012fde:	57                   	push   edi
c0012fdf:	56                   	push   esi
c0012fe0:	53                   	push   ebx
c0012fe1:	83 ec 40             	sub    esp,0x40
c0012fe4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012fe8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012fec:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012ff0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012ff4:	53                   	push   ebx
c0012ff5:	56                   	push   esi
c0012ff6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ffa:	e8 16 fa ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fff:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013003:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013007:	83 c4 0c             	add    esp,0xc
c001300a:	53                   	push   ebx
c001300b:	56                   	push   esi
c001300c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013010:	e8 24 fb ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013015:	83 c4 4c             	add    esp,0x4c
c0013018:	5b                   	pop    ebx
c0013019:	5e                   	pop    esi
c001301a:	5f                   	pop    edi
c001301b:	5d                   	pop    ebp
c001301c:	c3                   	ret    

c001301d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001301d:	55                   	push   ebp
c001301e:	57                   	push   edi
c001301f:	56                   	push   esi
c0013020:	31 f6                	xor    esi,esi
c0013022:	53                   	push   ebx
c0013023:	31 db                	xor    ebx,ebx
c0013025:	83 ec 40             	sub    esp,0x40
c0013028:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013030:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013038:	6a 12                	push   0x12
c001303a:	68 ee 00 00 00       	push   0xee
c001303f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013043:	e8 a8 d4 fe ff       	call   c00004f0 <memset>
c0013048:	83 c4 10             	add    esp,0x10
c001304b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001304f:	6a 08                	push   0x8
c0013051:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013055:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013059:	50                   	push   eax
c001305a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001305e:	55                   	push   ebp
c001305f:	57                   	push   edi
c0013060:	e8 e7 fe ff ff       	call   c0012f4c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001306c:	50                   	push   eax
c001306d:	6a 06                	push   0x6
c001306f:	55                   	push   ebp
c0013070:	57                   	push   edi
c0013071:	e8 06 ff ff ff       	call   c0012f7c <CmGetShift(unsigned int*, int*, int, bool*)>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001307e:	74 07                	je     c0013087 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013080:	46                   	inc    esi
c0013081:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013085:	eb e1                	jmp    c0013068 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0013087:	43                   	inc    ebx
c0013088:	83 fb 12             	cmp    ebx,0x12
c001308b:	75 c2                	jne    c001304f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001308d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013091:	31 f6                	xor    esi,esi
c0013093:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013096:	50                   	push   eax
c0013097:	50                   	push   eax
c0013098:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c001309d:	46                   	inc    esi
c001309e:	8d 04 85 60 36 02 c0 	lea    eax,[eax*4-0x3ffdc9a0]
c00130a5:	50                   	push   eax
c00130a6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00130aa:	e8 c1 d7 fe ff       	call   c0000870 <strcat>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	83 fe 18             	cmp    esi,0x18
c00130b5:	75 df                	jne    c0013096 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00130b7:	83 c4 3c             	add    esp,0x3c
c00130ba:	31 c0                	xor    eax,eax
c00130bc:	5b                   	pop    ebx
c00130bd:	5e                   	pop    esi
c00130be:	5f                   	pop    edi
c00130bf:	5d                   	pop    ebp
c00130c0:	c3                   	ret    

c00130c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00130c1:	83 ec 40             	sub    esp,0x40
c00130c4:	8d 44 24 09          	lea    eax,[esp+0x9]
c00130c8:	50                   	push   eax
c00130c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130d1:	e8 3f f9 ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130d6:	58                   	pop    eax
c00130d7:	5a                   	pop    edx
c00130d8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00130dc:	8d 44 24 15          	lea    eax,[esp+0x15]
c00130e0:	50                   	push   eax
c00130e1:	e8 37 ff ff ff       	call   c001301d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00130e6:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00130eb:	83 c4 4c             	add    esp,0x4c
c00130ee:	c3                   	ret    

c00130ef <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00130ef:	55                   	push   ebp
c00130f0:	57                   	push   edi
c00130f1:	56                   	push   esi
c00130f2:	53                   	push   ebx
c00130f3:	31 db                	xor    ebx,ebx
c00130f5:	83 ec 70             	sub    esp,0x70
c00130f8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00130ff:	6a 30                	push   0x30
c0013101:	6a 00                	push   0x0
c0013103:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013107:	56                   	push   esi
c0013108:	e8 e3 d3 fe ff       	call   c00004f0 <memset>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	57                   	push   edi
c0013114:	e8 67 d4 fe ff       	call   c0000580 <strlen>
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	39 d8                	cmp    eax,ebx
c001311e:	76 16                	jbe    c0013136 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013120:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	50                   	push   eax
c0013128:	e8 33 d8 fe ff       	call   c0000960 <toupper>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013133:	43                   	inc    ebx
c0013134:	eb da                	jmp    c0013110 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013136:	52                   	push   edx
c0013137:	31 db                	xor    ebx,ebx
c0013139:	6a 18                	push   0x18
c001313b:	31 ff                	xor    edi,edi
c001313d:	6a 3f                	push   0x3f
c001313f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013143:	50                   	push   eax
c0013144:	e8 a7 d3 fe ff       	call   c00004f0 <memset>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0013150:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013154:	84 c0                	test   al,al
c0013156:	0f 84 af 00 00 00    	je     c001320b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001315c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013160:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013163:	83 ec 0c             	sub    esp,0xc
c0013166:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001316b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001316f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0013173:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013178:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001317c:	56                   	push   esi
c001317d:	e8 fe d3 fe ff       	call   c0000580 <strlen>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	85 c0                	test   eax,eax
c0013187:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001318b:	74 0b                	je     c0013198 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001318d:	50                   	push   eax
c001318e:	6a 01                	push   0x1
c0013190:	56                   	push   esi
c0013191:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013195:	50                   	push   eax
c0013196:	eb 0a                	jmp    c00131a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013198:	50                   	push   eax
c0013199:	6a 00                	push   0x0
c001319b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001319f:	50                   	push   eax
c00131a0:	6a 00                	push   0x0
c00131a2:	e8 44 fd ff ff       	call   c0012eeb <CmGetMatch(char*, char*, bool, bool*)>
c00131a7:	83 c4 10             	add    esp,0x10
c00131aa:	83 f8 ff             	cmp    eax,0xffffffff
c00131ad:	75 1a                	jne    c00131c9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00131af:	83 ec 0c             	sub    esp,0xc
c00131b2:	68 d9 21 02 c0       	push   0xc00221d9
c00131b7:	e8 0d e1 ff ff       	call   c00112c9 <KePanic(char const*)>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	b8 02 00 00 00       	mov    eax,0x2
c00131c4:	e9 bb 00 00 00       	jmp    c0013284 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00131c9:	83 ff 18             	cmp    edi,0x18
c00131cc:	75 1a                	jne    c00131e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00131ce:	83 ec 0c             	sub    esp,0xc
c00131d1:	68 ee 21 02 c0       	push   0xc00221ee
c00131d6:	e8 ee e0 ff ff       	call   c00112c9 <KePanic(char const*)>
c00131db:	83 c4 10             	add    esp,0x10
c00131de:	b8 01 00 00 00       	mov    eax,0x1
c00131e3:	e9 9c 00 00 00       	jmp    c0013284 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00131e8:	47                   	inc    edi
c00131e9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131ee:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00131f2:	0f 45 dd             	cmovne ebx,ebp
c00131f5:	83 ec 0c             	sub    esp,0xc
c00131f8:	56                   	push   esi
c00131f9:	e8 82 d3 fe ff       	call   c0000580 <strlen>
c00131fe:	83 c4 10             	add    esp,0x10
c0013201:	85 c0                	test   eax,eax
c0013203:	74 06                	je     c001320b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013205:	43                   	inc    ebx
c0013206:	e9 41 ff ff ff       	jmp    c001314c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001320b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013213:	31 db                	xor    ebx,ebx
c0013215:	31 ff                	xor    edi,edi
c0013217:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001321f:	50                   	push   eax
c0013220:	6a 12                	push   0x12
c0013222:	68 ee 00 00 00       	push   0xee
c0013227:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001322e:	e8 bd d2 fe ff       	call   c00004f0 <memset>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001323a:	83 fb 17             	cmp    ebx,0x17
c001323d:	7e 26                	jle    c0013265 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c001323f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013243:	50                   	push   eax
c0013244:	6a 08                	push   0x8
c0013246:	55                   	push   ebp
c0013247:	56                   	push   esi
c0013248:	e8 2f fd ff ff       	call   c0012f7c <CmGetShift(unsigned int*, int*, int, bool*)>
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013255:	74 26                	je     c001327d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0013257:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001325e:	4b                   	dec    ebx
c001325f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013262:	47                   	inc    edi
c0013263:	eb 1c                	jmp    c0013281 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013265:	6a 06                	push   0x6
c0013267:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001326c:	50                   	push   eax
c001326d:	55                   	push   ebp
c001326e:	56                   	push   esi
c001326f:	e8 d8 fc ff ff       	call   c0012f4c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	84 c0                	test   al,al
c0013279:	75 06                	jne    c0013281 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001327b:	eb c2                	jmp    c001323f <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001327d:	31 c0                	xor    eax,eax
c001327f:	eb 03                	jmp    c0013284 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013281:	43                   	inc    ebx
c0013282:	eb b2                	jmp    c0013236 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013284:	83 c4 6c             	add    esp,0x6c
c0013287:	5b                   	pop    ebx
c0013288:	5e                   	pop    esi
c0013289:	5f                   	pop    edi
c001328a:	5d                   	pop    ebp
c001328b:	c3                   	ret    

c001328c <CmCreateString(Reghive_Tag*, int, char const*)>:
c001328c:	53                   	push   ebx
c001328d:	83 ec 3c             	sub    esp,0x3c
c0013290:	6a 2b                	push   0x2b
c0013292:	6a 00                	push   0x0
c0013294:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013298:	53                   	push   ebx
c0013299:	e8 52 d2 fe ff       	call   c00004f0 <memset>
c001329e:	58                   	pop    eax
c001329f:	5a                   	pop    edx
c00132a0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132a4:	50                   	push   eax
c00132a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00132a9:	e8 41 fe ff ff       	call   c00130ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132ae:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00132b3:	83 c4 0c             	add    esp,0xc
c00132b6:	6a 15                	push   0x15
c00132b8:	6a 00                	push   0x0
c00132ba:	8d 44 24 27          	lea    eax,[esp+0x27]
c00132be:	50                   	push   eax
c00132bf:	e8 2c d2 fe ff       	call   c00004f0 <memset>
c00132c4:	53                   	push   ebx
c00132c5:	6a 00                	push   0x0
c00132c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132cf:	e8 eb f9 ff ff       	call   c0012cbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132d4:	83 c4 58             	add    esp,0x58
c00132d7:	5b                   	pop    ebx
c00132d8:	c3                   	ret    

c00132d9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00132d9:	56                   	push   esi
c00132da:	53                   	push   ebx
c00132db:	83 ec 48             	sub    esp,0x48
c00132de:	6a 12                	push   0x12
c00132e0:	68 ff 00 00 00       	push   0xff
c00132e5:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00132e9:	56                   	push   esi
c00132ea:	e8 01 d2 fe ff       	call   c00004f0 <memset>
c00132ef:	5a                   	pop    edx
c00132f0:	59                   	pop    ecx
c00132f1:	56                   	push   esi
c00132f2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00132f6:	e8 f4 fd ff ff       	call   c00130ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013302:	85 db                	test   ebx,ebx
c0013304:	74 42                	je     c0013348 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013306:	50                   	push   eax
c0013307:	8d 44 24 19          	lea    eax,[esp+0x19]
c001330b:	50                   	push   eax
c001330c:	53                   	push   ebx
c001330d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013311:	e8 ff f6 ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013316:	83 c4 0c             	add    esp,0xc
c0013319:	6a 12                	push   0x12
c001331b:	8d 44 24 21          	lea    eax,[esp+0x21]
c001331f:	50                   	push   eax
c0013320:	56                   	push   esi
c0013321:	e8 5a d0 fe ff       	call   c0000380 <memcmp>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	85 c0                	test   eax,eax
c001332b:	74 1e                	je     c001334b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001332d:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013332:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013337:	c1 e3 08             	shl    ebx,0x8
c001333a:	09 d8                	or     eax,ebx
c001333c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013341:	c1 e3 10             	shl    ebx,0x10
c0013344:	09 c3                	or     ebx,eax
c0013346:	eb ba                	jmp    c0013302 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013348:	83 cb ff             	or     ebx,0xffffffff
c001334b:	83 c4 44             	add    esp,0x44
c001334e:	89 d8                	mov    eax,ebx
c0013350:	5b                   	pop    ebx
c0013351:	5e                   	pop    esi
c0013352:	c3                   	ret    

c0013353 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013353:	57                   	push   edi
c0013354:	56                   	push   esi
c0013355:	53                   	push   ebx
c0013356:	83 ec 34             	sub    esp,0x34
c0013359:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001335d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013361:	6a 2b                	push   0x2b
c0013363:	6a 00                	push   0x0
c0013365:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013369:	53                   	push   ebx
c001336a:	e8 81 d1 fe ff       	call   c00004f0 <memset>
c001336f:	58                   	pop    eax
c0013370:	5a                   	pop    edx
c0013371:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013375:	50                   	push   eax
c0013376:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001337a:	e8 70 fd ff ff       	call   c00130ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c001337f:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013383:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013387:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001338b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001338f:	53                   	push   ebx
c0013390:	6a 00                	push   0x0
c0013392:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013396:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001339a:	e8 20 f9 ff ff       	call   c0012cbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001339f:	83 c4 50             	add    esp,0x50
c00133a2:	5b                   	pop    ebx
c00133a3:	5e                   	pop    esi
c00133a4:	5f                   	pop    edi
c00133a5:	c3                   	ret    

c00133a6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00133a6:	55                   	push   ebp
c00133a7:	57                   	push   edi
c00133a8:	56                   	push   esi
c00133a9:	53                   	push   ebx
c00133aa:	83 ec 40             	sub    esp,0x40
c00133ad:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00133b1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00133b5:	6a 2b                	push   0x2b
c00133b7:	6a 00                	push   0x0
c00133b9:	8d 74 24 11          	lea    esi,[esp+0x11]
c00133bd:	56                   	push   esi
c00133be:	e8 2d d1 fe ff       	call   c00004f0 <memset>
c00133c3:	5f                   	pop    edi
c00133c4:	89 ef                	mov    edi,ebp
c00133c6:	58                   	pop    eax
c00133c7:	8d 44 24 11          	lea    eax,[esp+0x11]
c00133cb:	50                   	push   eax
c00133cc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00133d0:	e8 1a fd ff ff       	call   c00130ef <CmConvertToInternalFilename(char const*, unsigned char*)>
c00133d5:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00133da:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00133df:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00133e4:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	85 ed                	test   ebp,ebp
c00133ee:	74 14                	je     c0013404 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00133f0:	51                   	push   ecx
c00133f1:	51                   	push   ecx
c00133f2:	57                   	push   edi
c00133f3:	53                   	push   ebx
c00133f4:	e8 0e f7 ff ff       	call   c0012b07 <CmGetNext(Reghive_Tag*, int)>
c00133f9:	83 c4 10             	add    esp,0x10
c00133fc:	85 c0                	test   eax,eax
c00133fe:	74 04                	je     c0013404 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013400:	89 c7                	mov    edi,eax
c0013402:	eb e8                	jmp    c00133ec <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013404:	56                   	push   esi
c0013405:	6a 00                	push   0x0
c0013407:	57                   	push   edi
c0013408:	53                   	push   ebx
c0013409:	e8 b1 f8 ff ff       	call   c0012cbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001340e:	83 c4 0c             	add    esp,0xc
c0013411:	56                   	push   esi
c0013412:	50                   	push   eax
c0013413:	89 c7                	mov    edi,eax
c0013415:	53                   	push   ebx
c0013416:	e8 fa f5 ff ff       	call   c0012a15 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001341b:	58                   	pop    eax
c001341c:	5a                   	pop    edx
c001341d:	6a 6c                	push   0x6c
c001341f:	6a 00                	push   0x0
c0013421:	6a 00                	push   0x0
c0013423:	68 ff 21 02 c0       	push   0xc00221ff
c0013428:	57                   	push   edi
c0013429:	53                   	push   ebx
c001342a:	e8 24 ff ff ff       	call   c0013353 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001342f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013433:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013437:	c1 e8 10             	shr    eax,0x10
c001343a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001343e:	83 c4 1c             	add    esp,0x1c
c0013441:	56                   	push   esi
c0013442:	57                   	push   edi
c0013443:	53                   	push   ebx
c0013444:	e8 f0 f6 ff ff       	call   c0012b39 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013449:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001344e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013453:	c1 e0 08             	shl    eax,0x8
c0013456:	09 c2                	or     edx,eax
c0013458:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001345d:	83 c4 4c             	add    esp,0x4c
c0013460:	5b                   	pop    ebx
c0013461:	5e                   	pop    esi
c0013462:	c1 e0 10             	shl    eax,0x10
c0013465:	09 d0                	or     eax,edx
c0013467:	5f                   	pop    edi
c0013468:	5d                   	pop    ebp
c0013469:	c3                   	ret    

c001346a <zStrtok(char*, char const*)>:
c001346a:	55                   	push   ebp
c001346b:	57                   	push   edi
c001346c:	56                   	push   esi
c001346d:	53                   	push   ebx
c001346e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013476:	85 db                	test   ebx,ebx
c0013478:	74 2f                	je     c00134a9 <zStrtok(char*, char const*)+0x3f>
c001347a:	85 c0                	test   eax,eax
c001347c:	75 09                	jne    c0013487 <zStrtok(char*, char const*)+0x1d>
c001347e:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013483:	85 c0                	test   eax,eax
c0013485:	74 50                	je     c00134d7 <zStrtok(char*, char const*)+0x6d>
c0013487:	31 c9                	xor    ecx,ecx
c0013489:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001348d:	74 03                	je     c0013492 <zStrtok(char*, char const*)+0x28>
c001348f:	41                   	inc    ecx
c0013490:	eb f7                	jmp    c0013489 <zStrtok(char*, char const*)+0x1f>
c0013492:	31 d2                	xor    edx,edx
c0013494:	39 ca                	cmp    edx,ecx
c0013496:	74 15                	je     c00134ad <zStrtok(char*, char const*)+0x43>
c0013498:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001349c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001349f:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00134a2:	39 ee                	cmp    esi,ebp
c00134a4:	74 13                	je     c00134b9 <zStrtok(char*, char const*)+0x4f>
c00134a6:	42                   	inc    edx
c00134a7:	eb eb                	jmp    c0013494 <zStrtok(char*, char const*)+0x2a>
c00134a9:	31 c0                	xor    eax,eax
c00134ab:	eb 2a                	jmp    c00134d7 <zStrtok(char*, char const*)+0x6d>
c00134ad:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00134b7:	eb 1e                	jmp    c00134d7 <zStrtok(char*, char const*)+0x6d>
c00134b9:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00134bc:	39 ce                	cmp    esi,ecx
c00134be:	75 0a                	jne    c00134ca <zStrtok(char*, char const*)+0x60>
c00134c0:	40                   	inc    eax
c00134c1:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00134c6:	89 d8                	mov    eax,ebx
c00134c8:	eb 0d                	jmp    c00134d7 <zStrtok(char*, char const*)+0x6d>
c00134ca:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00134cd:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00134d1:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00134d7:	5b                   	pop    ebx
c00134d8:	5e                   	pop    esi
c00134d9:	5f                   	pop    edi
c00134da:	5d                   	pop    ebp
c00134db:	c3                   	ret    

c00134dc <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00134dc:	57                   	push   edi
c00134dd:	56                   	push   esi
c00134de:	53                   	push   ebx
c00134df:	81 ec 08 01 00 00    	sub    esp,0x108
c00134e5:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00134ec:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00134f3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00134f7:	53                   	push   ebx
c00134f8:	e8 53 d1 fe ff       	call   c0000650 <strcpy>
c00134fd:	59                   	pop    ecx
c00134fe:	5e                   	pop    esi
c00134ff:	68 63 25 02 c0       	push   0xc0022563
c0013504:	53                   	push   ebx
c0013505:	bb 01 00 00 00       	mov    ebx,0x1
c001350a:	e8 5b ff ff ff       	call   c001346a <zStrtok(char*, char const*)>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	85 c0                	test   eax,eax
c0013514:	74 3b                	je     c0013551 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013516:	52                   	push   edx
c0013517:	50                   	push   eax
c0013518:	6a 01                	push   0x1
c001351a:	57                   	push   edi
c001351b:	e8 b9 fd ff ff       	call   c00132d9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013520:	59                   	pop    ecx
c0013521:	5e                   	pop    esi
c0013522:	89 c3                	mov    ebx,eax
c0013524:	68 63 25 02 c0       	push   0xc0022563
c0013529:	6a 00                	push   0x0
c001352b:	e8 3a ff ff ff       	call   c001346a <zStrtok(char*, char const*)>
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	85 c0                	test   eax,eax
c0013535:	89 c6                	mov    esi,eax
c0013537:	74 18                	je     c0013551 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013539:	52                   	push   edx
c001353a:	52                   	push   edx
c001353b:	53                   	push   ebx
c001353c:	57                   	push   edi
c001353d:	e8 86 f5 ff ff       	call   c0012ac8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	83 f8 ff             	cmp    eax,0xffffffff
c0013548:	89 c3                	mov    ebx,eax
c001354a:	74 05                	je     c0013551 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001354c:	50                   	push   eax
c001354d:	56                   	push   esi
c001354e:	53                   	push   ebx
c001354f:	eb c9                	jmp    c001351a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013551:	81 c4 00 01 00 00    	add    esp,0x100
c0013557:	89 d8                	mov    eax,ebx
c0013559:	5b                   	pop    ebx
c001355a:	5e                   	pop    esi
c001355b:	5f                   	pop    edi
c001355c:	c3                   	ret    

c001355d <CmDisplayTree(Reghive_Tag*, int, int)>:
c001355d:	55                   	push   ebp
c001355e:	57                   	push   edi
c001355f:	56                   	push   esi
c0013560:	53                   	push   ebx
c0013561:	83 ec 5c             	sub    esp,0x5c
c0013564:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013568:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001356c:	85 db                	test   ebx,ebx
c001356e:	0f 8e 84 00 00 00    	jle    c00135f8 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013574:	57                   	push   edi
c0013575:	31 ed                	xor    ebp,ebp
c0013577:	6a 32                	push   0x32
c0013579:	6a 00                	push   0x0
c001357b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001357f:	57                   	push   edi
c0013580:	e8 6b cf fe ff       	call   c00004f0 <memset>
c0013585:	83 c4 0c             	add    esp,0xc
c0013588:	57                   	push   edi
c0013589:	53                   	push   ebx
c001358a:	56                   	push   esi
c001358b:	e8 31 fb ff ff       	call   c00130c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013590:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001359b:	7d 13                	jge    c00135b0 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001359d:	83 ec 0c             	sub    esp,0xc
c00135a0:	45                   	inc    ebp
c00135a1:	68 07 29 02 c0       	push   0xc0022907
c00135a6:	e8 5f 73 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	eb e7                	jmp    c0013597 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00135b0:	51                   	push   ecx
c00135b1:	57                   	push   edi
c00135b2:	53                   	push   ebx
c00135b3:	68 05 22 02 c0       	push   0xc0022205
c00135b8:	e8 4d 73 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00135c5:	75 1e                	jne    c00135e5 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00135c7:	52                   	push   edx
c00135c8:	52                   	push   edx
c00135c9:	53                   	push   ebx
c00135ca:	56                   	push   esi
c00135cb:	e8 f8 f4 ff ff       	call   c0012ac8 <CmEnterDirectory(Reghive_Tag*, int)>
c00135d0:	83 c4 0c             	add    esp,0xc
c00135d3:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00135d7:	8d 51 04             	lea    edx,[ecx+0x4]
c00135da:	52                   	push   edx
c00135db:	50                   	push   eax
c00135dc:	56                   	push   esi
c00135dd:	e8 7b ff ff ff       	call   c001355d <CmDisplayTree(Reghive_Tag*, int, int)>
c00135e2:	83 c4 10             	add    esp,0x10
c00135e5:	50                   	push   eax
c00135e6:	50                   	push   eax
c00135e7:	53                   	push   ebx
c00135e8:	56                   	push   esi
c00135e9:	e8 19 f5 ff ff       	call   c0012b07 <CmGetNext(Reghive_Tag*, int)>
c00135ee:	83 c4 10             	add    esp,0x10
c00135f1:	89 c3                	mov    ebx,eax
c00135f3:	e9 74 ff ff ff       	jmp    c001356c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00135f8:	83 c4 5c             	add    esp,0x5c
c00135fb:	5b                   	pop    ebx
c00135fc:	5e                   	pop    esi
c00135fd:	5f                   	pop    edi
c00135fe:	5d                   	pop    ebp
c00135ff:	c3                   	ret    

c0013600 <CmSplitFinalSlashInPlace(char*)>:
c0013600:	53                   	push   ebx
c0013601:	83 ec 14             	sub    esp,0x14
c0013604:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013608:	53                   	push   ebx
c0013609:	e8 72 cf fe ff       	call   c0000580 <strlen>
c001360e:	83 c4 10             	add    esp,0x10
c0013611:	48                   	dec    eax
c0013612:	85 c0                	test   eax,eax
c0013614:	74 15                	je     c001362b <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013616:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001361a:	8d 14 03             	lea    edx,[ebx+eax*1]
c001361d:	75 09                	jne    c0013628 <CmSplitFinalSlashInPlace(char*)+0x28>
c001361f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013622:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013626:	eb 05                	jmp    c001362d <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013628:	48                   	dec    eax
c0013629:	eb e7                	jmp    c0013612 <CmSplitFinalSlashInPlace(char*)+0x12>
c001362b:	31 c0                	xor    eax,eax
c001362d:	83 c4 08             	add    esp,0x8
c0013630:	5b                   	pop    ebx
c0013631:	c3                   	ret    

c0013632 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013632:	55                   	push   ebp
c0013633:	57                   	push   edi
c0013634:	56                   	push   esi
c0013635:	53                   	push   ebx
c0013636:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001363c:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013643:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0013646:	8d 43 01             	lea    eax,[ebx+0x1]
c0013649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001364d:	89 f0                	mov    eax,esi
c001364f:	3c 40                	cmp    al,0x40
c0013651:	75 1b                	jne    c001366e <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013653:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013656:	85 c0                	test   eax,eax
c0013658:	74 08                	je     c0013662 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001365a:	83 f8 3a             	cmp    eax,0x3a
c001365d:	74 03                	je     c0013662 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001365f:	43                   	inc    ebx
c0013660:	eb f1                	jmp    c0013653 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013662:	85 c0                	test   eax,eax
c0013664:	0f 84 45 01 00 00    	je     c00137af <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001366a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001366d:	43                   	inc    ebx
c001366e:	50                   	push   eax
c001366f:	6a 40                	push   0x40
c0013671:	6a 00                	push   0x0
c0013673:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013677:	50                   	push   eax
c0013678:	e8 73 ce fe ff       	call   c00004f0 <memset>
c001367d:	89 f1                	mov    ecx,esi
c001367f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013686:	31 c0                	xor    eax,eax
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	0f be f1             	movsx  esi,cl
c001368e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013691:	85 d2                	test   edx,edx
c0013693:	89 d1                	mov    ecx,edx
c0013695:	0f 84 14 01 00 00    	je     c00137af <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001369b:	3d c7 00 00 00       	cmp    eax,0xc7
c00136a0:	0f 8f 09 01 00 00    	jg     c00137af <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00136a6:	83 fa 0a             	cmp    edx,0xa
c00136a9:	0f 85 f1 00 00 00    	jne    c00137a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00136af:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00136b4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00136b9:	89 c8                	mov    eax,ecx
c00136bb:	a8 df                	test   al,0xdf
c00136bd:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00136c2:	83 f9 23             	cmp    ecx,0x23
c00136c5:	0f 94 c2             	sete   dl
c00136c8:	89 d5                	mov    ebp,edx
c00136ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136ce:	09 ea                	or     edx,ebp
c00136d0:	80 e2 01             	and    dl,0x1
c00136d3:	75 47                	jne    c001371c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00136d5:	83 e8 09             	sub    eax,0x9
c00136d8:	3c 01                	cmp    al,0x1
c00136da:	76 40                	jbe    c001371c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00136dc:	83 f9 5b             	cmp    ecx,0x5b
c00136df:	75 42                	jne    c0013723 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00136e1:	83 fe 40             	cmp    esi,0x40
c00136e4:	75 36                	jne    c001371c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00136e6:	83 ec 0c             	sub    esp,0xc
c00136e9:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00136ed:	55                   	push   ebp
c00136ee:	e8 8d ce fe ff       	call   c0000580 <strlen>
c00136f3:	83 c4 10             	add    esp,0x10
c00136f6:	83 f8 3f             	cmp    eax,0x3f
c00136f9:	0f 87 b0 00 00 00    	ja     c00137af <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00136ff:	50                   	push   eax
c0013700:	50                   	push   eax
c0013701:	55                   	push   ebp
c0013702:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013706:	55                   	push   ebp
c0013707:	e8 44 cf fe ff       	call   c0000650 <strcpy>
c001370c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001370f:	e8 6c ce fe ff       	call   c0000580 <strlen>
c0013714:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	31 d2                	xor    edx,edx
c001371e:	e9 84 00 00 00       	jmp    c00137a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013723:	83 fe 40             	cmp    esi,0x40
c0013726:	74 06                	je     c001372e <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013728:	8d 54 24 58          	lea    edx,[esp+0x58]
c001372c:	eb 19                	jmp    c0013747 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c001372e:	51                   	push   ecx
c001372f:	51                   	push   ecx
c0013730:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013734:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013738:	50                   	push   eax
c0013739:	e8 42 d0 fe ff       	call   c0000780 <strcmp>
c001373e:	83 c4 10             	add    esp,0x10
c0013741:	85 c0                	test   eax,eax
c0013743:	75 d7                	jne    c001371c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013745:	eb e1                	jmp    c0013728 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013747:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c001374a:	85 c9                	test   ecx,ecx
c001374c:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013751:	83 f9 3d             	cmp    ecx,0x3d
c0013754:	0f 94 c0             	sete   al
c0013757:	89 c5                	mov    ebp,eax
c0013759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001375d:	09 e8                	or     eax,ebp
c001375f:	a8 01                	test   al,0x1
c0013761:	89 c5                	mov    ebp,eax
c0013763:	75 03                	jne    c0013768 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013765:	42                   	inc    edx
c0013766:	eb df                	jmp    c0013747 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013768:	85 c9                	test   ecx,ecx
c001376a:	74 43                	je     c00137af <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001376c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013770:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013773:	52                   	push   edx
c0013774:	52                   	push   edx
c0013775:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013779:	50                   	push   eax
c001377a:	53                   	push   ebx
c001377b:	e8 00 d0 fe ff       	call   c0000780 <strcmp>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013787:	85 c0                	test   eax,eax
c0013789:	75 91                	jne    c001371c <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001378b:	50                   	push   eax
c001378c:	42                   	inc    edx
c001378d:	50                   	push   eax
c001378e:	52                   	push   edx
c001378f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013796:	e8 b5 ce fe ff       	call   c0000650 <strcpy>
c001379b:	83 c4 10             	add    esp,0x10
c001379e:	eb 11                	jmp    c00137b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00137a0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00137a4:	8d 50 01             	lea    edx,[eax+0x1]
c00137a7:	47                   	inc    edi
c00137a8:	89 d0                	mov    eax,edx
c00137aa:	e9 df fe ff ff       	jmp    c001368e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00137af:	31 ed                	xor    ebp,ebp
c00137b1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00137b7:	89 e8                	mov    eax,ebp
c00137b9:	5b                   	pop    ebx
c00137ba:	5e                   	pop    esi
c00137bb:	5f                   	pop    edi
c00137bc:	5d                   	pop    ebp
c00137bd:	c3                   	ret    

c00137be <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00137be:	57                   	push   edi
c00137bf:	56                   	push   esi
c00137c0:	53                   	push   ebx
c00137c1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00137c7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00137ce:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00137d5:	53                   	push   ebx
c00137d6:	e8 a5 cd fe ff       	call   c0000580 <strlen>
c00137db:	89 34 24             	mov    DWORD PTR [esp],esi
c00137de:	89 c7                	mov    edi,eax
c00137e0:	e8 9b cd fe ff       	call   c0000580 <strlen>
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00137ec:	3d ff 00 00 00       	cmp    eax,0xff
c00137f1:	0f 87 d3 00 00 00    	ja     c00138ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00137f7:	57                   	push   edi
c00137f8:	57                   	push   edi
c00137f9:	56                   	push   esi
c00137fa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00137fe:	56                   	push   esi
c00137ff:	e8 4c ce fe ff       	call   c0000650 <strcpy>
c0013804:	58                   	pop    eax
c0013805:	5a                   	pop    edx
c0013806:	68 63 25 02 c0       	push   0xc0022563
c001380b:	56                   	push   esi
c001380c:	e8 5f d0 fe ff       	call   c0000870 <strcat>
c0013811:	59                   	pop    ecx
c0013812:	5f                   	pop    edi
c0013813:	53                   	push   ebx
c0013814:	56                   	push   esi
c0013815:	e8 56 d0 fe ff       	call   c0000870 <strcat>
c001381a:	58                   	pop    eax
c001381b:	5a                   	pop    edx
c001381c:	68 0f 22 02 c0       	push   0xc002220f
c0013821:	56                   	push   esi
c0013822:	e8 49 d0 fe ff       	call   c0000870 <strcat>
c0013827:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001382e:	e8 a0 42 ff ff       	call   c0007ad3 <malloc>
c0013833:	83 c4 0c             	add    esp,0xc
c0013836:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001383c:	56                   	push   esi
c001383d:	50                   	push   eax
c001383e:	89 c3                	mov    ebx,eax
c0013840:	e8 67 80 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	85 db                	test   ebx,ebx
c001384a:	74 7e                	je     c00138ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001384c:	51                   	push   ecx
c001384d:	51                   	push   ecx
c001384e:	6a 01                	push   0x1
c0013850:	53                   	push   ebx
c0013851:	e8 74 80 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	85 c0                	test   eax,eax
c001385b:	74 08                	je     c0013865 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001385d:	83 ec 0c             	sub    esp,0xc
c0013860:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013862:	53                   	push   ebx
c0013863:	eb 5f                	jmp    c00138c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013865:	52                   	push   edx
c0013866:	8d 44 24 17          	lea    eax,[esp+0x17]
c001386a:	50                   	push   eax
c001386b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001386f:	50                   	push   eax
c0013870:	53                   	push   ebx
c0013871:	e8 56 83 ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0013876:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	89 c1                	mov    ecx,eax
c001387f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013883:	74 31                	je     c00138b6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013885:	83 ec 0c             	sub    esp,0xc
c0013888:	50                   	push   eax
c0013889:	e8 45 42 ff ff       	call   c0007ad3 <malloc>
c001388e:	89 c6                	mov    esi,eax
c0013890:	58                   	pop    eax
c0013891:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013893:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013897:	52                   	push   edx
c0013898:	56                   	push   esi
c0013899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001389d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00138a1:	53                   	push   ebx
c00138a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138a5:	83 c4 20             	add    esp,0x20
c00138a8:	85 c0                	test   eax,eax
c00138aa:	75 0a                	jne    c00138b6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00138ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138b0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00138b4:	74 18                	je     c00138ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00138b6:	83 ec 0c             	sub    esp,0xc
c00138b9:	53                   	push   ebx
c00138ba:	e8 69 80 ff ff       	call   c000b928 <File::close()>
c00138bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	31 c0                	xor    eax,eax
c00138cc:	eb 3b                	jmp    c0013909 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00138ce:	83 ec 0c             	sub    esp,0xc
c00138d1:	53                   	push   ebx
c00138d2:	e8 51 80 ff ff       	call   c000b928 <File::close()>
c00138d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138df:	83 c4 0c             	add    esp,0xc
c00138e2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00138e9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00138f0:	56                   	push   esi
c00138f1:	e8 3c fd ff ff       	call   c0013632 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00138f6:	89 34 24             	mov    DWORD PTR [esp],esi
c00138f9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00138fd:	e8 e1 41 ff ff       	call   c0007ae3 <free>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013909:	81 c4 20 01 00 00    	add    esp,0x120
c001390f:	5b                   	pop    ebx
c0013910:	5e                   	pop    esi
c0013911:	5f                   	pop    edi
c0013912:	c3                   	ret    

c0013913 <Reg::getLine(char*, char*, char*)>:
c0013913:	57                   	push   edi
c0013914:	56                   	push   esi
c0013915:	53                   	push   ebx
c0013916:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001391a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001391e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013922:	57                   	push   edi
c0013923:	56                   	push   esi
c0013924:	53                   	push   ebx
c0013925:	68 14 22 02 c0       	push   0xc0022214
c001392a:	e8 8f fe ff ff       	call   c00137be <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	84 c0                	test   al,al
c0013934:	75 10                	jne    c0013946 <Reg::getLine(char*, char*, char*)+0x33>
c0013936:	57                   	push   edi
c0013937:	56                   	push   esi
c0013938:	53                   	push   ebx
c0013939:	68 39 22 02 c0       	push   0xc0022239
c001393e:	e8 7b fe ff ff       	call   c00137be <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	5b                   	pop    ebx
c0013947:	5e                   	pop    esi
c0013948:	5f                   	pop    edi
c0013949:	c3                   	ret    

c001394a <Reg::readInt(char*, char*, int*)>:
c001394a:	55                   	push   ebp
c001394b:	57                   	push   edi
c001394c:	56                   	push   esi
c001394d:	53                   	push   ebx
c001394e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013954:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013958:	55                   	push   ebp
c0013959:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013960:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013967:	e8 a7 ff ff ff       	call   c0013913 <Reg::getLine(char*, char*, char*)>
c001396c:	83 c4 10             	add    esp,0x10
c001396f:	84 c0                	test   al,al
c0013971:	0f 84 b6 00 00 00    	je     c0013a2d <Reg::readInt(char*, char*, int*)+0xe3>
c0013977:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c001397c:	83 fa 2b             	cmp    edx,0x2b
c001397f:	74 0c                	je     c001398d <Reg::readInt(char*, char*, int*)+0x43>
c0013981:	83 fa 2d             	cmp    edx,0x2d
c0013984:	75 0e                	jne    c0013994 <Reg::readInt(char*, char*, int*)+0x4a>
c0013986:	ba 01 00 00 00       	mov    edx,0x1
c001398b:	eb 0b                	jmp    c0013998 <Reg::readInt(char*, char*, int*)+0x4e>
c001398d:	ba 01 00 00 00       	mov    edx,0x1
c0013992:	eb 02                	jmp    c0013996 <Reg::readInt(char*, char*, int*)+0x4c>
c0013994:	31 d2                	xor    edx,edx
c0013996:	31 c0                	xor    eax,eax
c0013998:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001399d:	be 0a 00 00 00       	mov    esi,0xa
c00139a2:	75 21                	jne    c00139c5 <Reg::readInt(char*, char*, int*)+0x7b>
c00139a4:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00139a9:	83 f9 78             	cmp    ecx,0x78
c00139ac:	75 0a                	jne    c00139b8 <Reg::readInt(char*, char*, int*)+0x6e>
c00139ae:	83 c2 02             	add    edx,0x2
c00139b1:	be 10 00 00 00       	mov    esi,0x10
c00139b6:	eb 0d                	jmp    c00139c5 <Reg::readInt(char*, char*, int*)+0x7b>
c00139b8:	83 f9 62             	cmp    ecx,0x62
c00139bb:	75 08                	jne    c00139c5 <Reg::readInt(char*, char*, int*)+0x7b>
c00139bd:	83 c2 02             	add    edx,0x2
c00139c0:	be 02 00 00 00       	mov    esi,0x2
c00139c5:	01 d5                	add    ebp,edx
c00139c7:	31 d2                	xor    edx,edx
c00139c9:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00139cd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00139d1:	85 c9                	test   ecx,ecx
c00139d3:	0f 94 c3             	sete   bl
c00139d6:	83 f9 0d             	cmp    ecx,0xd
c00139d9:	89 df                	mov    edi,ebx
c00139db:	0f 94 c3             	sete   bl
c00139de:	09 df                	or     edi,ebx
c00139e0:	89 fb                	mov    ebx,edi
c00139e2:	83 e7 01             	and    edi,0x1
c00139e5:	75 35                	jne    c0013a1c <Reg::readInt(char*, char*, int*)+0xd2>
c00139e7:	0f af d6             	imul   edx,esi
c00139ea:	83 fe 10             	cmp    esi,0x10
c00139ed:	75 26                	jne    c0013a15 <Reg::readInt(char*, char*, int*)+0xcb>
c00139ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139f3:	83 ef 41             	sub    edi,0x41
c00139f6:	89 fb                	mov    ebx,edi
c00139f8:	80 fb 05             	cmp    bl,0x5
c00139fb:	77 06                	ja     c0013a03 <Reg::readInt(char*, char*, int*)+0xb9>
c00139fd:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013a01:	eb 16                	jmp    c0013a19 <Reg::readInt(char*, char*, int*)+0xcf>
c0013a03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a07:	83 eb 61             	sub    ebx,0x61
c0013a0a:	80 fb 05             	cmp    bl,0x5
c0013a0d:	77 06                	ja     c0013a15 <Reg::readInt(char*, char*, int*)+0xcb>
c0013a0f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013a13:	eb 04                	jmp    c0013a19 <Reg::readInt(char*, char*, int*)+0xcf>
c0013a15:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013a19:	45                   	inc    ebp
c0013a1a:	eb ad                	jmp    c00139c9 <Reg::readInt(char*, char*, int*)+0x7f>
c0013a1c:	84 c0                	test   al,al
c0013a1e:	74 02                	je     c0013a22 <Reg::readInt(char*, char*, int*)+0xd8>
c0013a20:	f7 da                	neg    edx
c0013a22:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013a29:	89 10                	mov    DWORD PTR [eax],edx
c0013a2b:	88 d8                	mov    al,bl
c0013a2d:	81 c4 ec 00 00 00    	add    esp,0xec
c0013a33:	5b                   	pop    ebx
c0013a34:	5e                   	pop    esi
c0013a35:	5f                   	pop    edi
c0013a36:	5d                   	pop    ebp
c0013a37:	c3                   	ret    

c0013a38 <Reg::readString(char*, char*, char*, int)>:
c0013a38:	57                   	push   edi
c0013a39:	56                   	push   esi
c0013a3a:	53                   	push   ebx
c0013a3b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013a41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013a45:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013a4c:	57                   	push   edi
c0013a4d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013a54:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013a5b:	e8 b3 fe ff ff       	call   c0013913 <Reg::getLine(char*, char*, char*)>
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	84 c0                	test   al,al
c0013a65:	89 c6                	mov    esi,eax
c0013a67:	74 44                	je     c0013aad <Reg::readString(char*, char*, char*, int)+0x75>
c0013a69:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013a70:	31 c0                	xor    eax,eax
c0013a72:	4a                   	dec    edx
c0013a73:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013a76:	84 c9                	test   cl,cl
c0013a78:	74 0f                	je     c0013a89 <Reg::readString(char*, char*, char*, int)+0x51>
c0013a7a:	39 c2                	cmp    edx,eax
c0013a7c:	7e 0b                	jle    c0013a89 <Reg::readString(char*, char*, char*, int)+0x51>
c0013a7e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013a81:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013a86:	40                   	inc    eax
c0013a87:	eb ea                	jmp    c0013a73 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013a89:	83 ec 0c             	sub    esp,0xc
c0013a8c:	53                   	push   ebx
c0013a8d:	e8 ee ca fe ff       	call   c0000580 <strlen>
c0013a92:	83 c4 10             	add    esp,0x10
c0013a95:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013a9a:	75 11                	jne    c0013aad <Reg::readString(char*, char*, char*, int)+0x75>
c0013a9c:	83 ec 0c             	sub    esp,0xc
c0013a9f:	53                   	push   ebx
c0013aa0:	e8 db ca fe ff       	call   c0000580 <strlen>
c0013aa5:	83 c4 10             	add    esp,0x10
c0013aa8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013aad:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013ab3:	89 f0                	mov    eax,esi
c0013ab5:	5b                   	pop    ebx
c0013ab6:	5e                   	pop    esi
c0013ab7:	5f                   	pop    edi
c0013ab8:	c3                   	ret    

c0013ab9 <Reg::readBool(char*, char*, bool*)>:
c0013ab9:	83 ec 20             	sub    esp,0x20
c0013abc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ac0:	50                   	push   eax
c0013ac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ac5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ac9:	e8 7c fe ff ff       	call   c001394a <Reg::readInt(char*, char*, int*)>
c0013ace:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ad2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ad7:	0f 95 02             	setne  BYTE PTR [edx]
c0013ada:	83 c4 2c             	add    esp,0x2c
c0013add:	c3                   	ret    

c0013ade <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013ade:	53                   	push   ebx
c0013adf:	83 ec 1c             	sub    esp,0x1c
c0013ae2:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ae6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013aea:	50                   	push   eax
c0013aeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013af3:	e8 c1 ff ff ff       	call   c0013ab9 <Reg::readBool(char*, char*, bool*)>
c0013af8:	83 c4 10             	add    esp,0x10
c0013afb:	84 c0                	test   al,al
c0013afd:	74 04                	je     c0013b03 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013aff:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013b03:	83 c4 18             	add    esp,0x18
c0013b06:	88 d8                	mov    al,bl
c0013b08:	5b                   	pop    ebx
c0013b09:	c3                   	ret    

c0013b0a <Reg::readIntWithDefault(char*, char*, int)>:
c0013b0a:	53                   	push   ebx
c0013b0b:	83 ec 1c             	sub    esp,0x1c
c0013b0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013b12:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b16:	50                   	push   eax
c0013b17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b1f:	e8 26 fe ff ff       	call   c001394a <Reg::readInt(char*, char*, int*)>
c0013b24:	83 c4 10             	add    esp,0x10
c0013b27:	84 c0                	test   al,al
c0013b29:	74 04                	je     c0013b2f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013b2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b2f:	83 c4 18             	add    esp,0x18
c0013b32:	89 d8                	mov    eax,ebx
c0013b34:	5b                   	pop    ebx
c0013b35:	c3                   	ret    

c0013b36 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013b36:	57                   	push   edi
c0013b37:	56                   	push   esi
c0013b38:	53                   	push   ebx
c0013b39:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013b41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b45:	56                   	push   esi
c0013b46:	57                   	push   edi
c0013b47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4f:	e8 e4 fe ff ff       	call   c0013a38 <Reg::readString(char*, char*, char*, int)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	84 c0                	test   al,al
c0013b59:	75 16                	jne    c0013b71 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013b5b:	50                   	push   eax
c0013b5c:	56                   	push   esi
c0013b5d:	6a 00                	push   0x0
c0013b5f:	57                   	push   edi
c0013b60:	e8 8b c9 fe ff       	call   c00004f0 <memset>
c0013b65:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013b68:	89 de                	mov    esi,ebx
c0013b6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b6c:	83 c4 10             	add    esp,0x10
c0013b6f:	89 df                	mov    edi,ebx
c0013b71:	5b                   	pop    ebx
c0013b72:	89 f8                	mov    eax,edi
c0013b74:	5e                   	pop    esi
c0013b75:	5f                   	pop    edi
c0013b76:	c3                   	ret    

c0013b77 <SysEject(regs*)>:
c0013b77:	83 ec 0c             	sub    esp,0xc
c0013b7a:	83 ca ff             	or     edx,0xffffffff
c0013b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b81:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013b84:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013b89:	83 e9 41             	sub    ecx,0x41
c0013b8c:	83 f9 19             	cmp    ecx,0x19
c0013b8f:	77 18                	ja     c0013ba9 <SysEject(regs*)+0x32>
c0013b91:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013b98:	85 c9                	test   ecx,ecx
c0013b9a:	74 0d                	je     c0013ba9 <SysEject(regs*)+0x32>
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	51                   	push   ecx
c0013ba0:	e8 07 9f ff ff       	call   c000daac <LogicalDisk::eject()>
c0013ba5:	83 c4 10             	add    esp,0x10
c0013ba8:	99                   	cdq    
c0013ba9:	83 c4 0c             	add    esp,0xc
c0013bac:	c3                   	ret    

c0013bad <SysExit(regs*)>:
c0013bad:	83 ec 18             	sub    esp,0x18
c0013bb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bb4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013bb7:	e8 3c 2b 00 00       	call   c00166f8 <terminateTask(int)>
c0013bbc:	83 c8 ff             	or     eax,0xffffffff
c0013bbf:	83 c4 1c             	add    esp,0x1c
c0013bc2:	89 c2                	mov    edx,eax
c0013bc4:	c3                   	ret    

c0013bc5 <SysGetCwd(regs*)>:
c0013bc5:	83 ec 10             	sub    esp,0x10
c0013bc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bcc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013bcf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013bd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bd7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013bda:	e8 7d 79 ff ff       	call   c000b55c <Fs::getcwd(Process*, char*, int)>
c0013bdf:	83 c4 1c             	add    esp,0x1c
c0013be2:	99                   	cdq    
c0013be3:	c3                   	ret    

c0013be4 <SysGetPID(regs*)>:
c0013be4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bee:	99                   	cdq    
c0013bef:	c3                   	ret    

c0013bf0 <SysGetRAMData(regs*)>:
c0013bf0:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013bfa:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013c00:	99                   	cdq    
c0013c01:	f7 f9                	idiv   ecx
c0013c03:	c1 e0 18             	shl    eax,0x18
c0013c06:	09 c8                	or     eax,ecx
c0013c08:	99                   	cdq    
c0013c09:	c3                   	ret    

c0013c0a <SysGetVGAPtr(regs*)>:
c0013c0a:	55                   	push   ebp
c0013c0b:	57                   	push   edi
c0013c0c:	56                   	push   esi
c0013c0d:	53                   	push   ebx
c0013c0e:	83 ec 18             	sub    esp,0x18
c0013c11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013c15:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c18:	e8 a7 25 00 00       	call   c00161c4 <Thr::processFromPID(int)>
c0013c1d:	83 c4 10             	add    esp,0x10
c0013c20:	89 c1                	mov    ecx,eax
c0013c22:	b8 01 00 00 00       	mov    eax,0x1
c0013c27:	85 c9                	test   ecx,ecx
c0013c29:	74 57                	je     c0013c82 <SysGetVGAPtr(regs*)+0x78>
c0013c2b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013c2f:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013c35:	74 0c                	je     c0013c43 <SysGetVGAPtr(regs*)+0x39>
c0013c37:	83 ec 0c             	sub    esp,0xc
c0013c3a:	55                   	push   ebp
c0013c3b:	e8 2f 4b ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013c40:	83 c4 10             	add    esp,0x10
c0013c43:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013c46:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013c4b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013c4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c50:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013c53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c56:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013c5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c5f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013c62:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013c68:	50                   	push   eax
c0013c69:	50                   	push   eax
c0013c6a:	68 54 22 02 c0       	push   0xc0022254
c0013c6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c72:	05 a8 0f 00 00       	add    eax,0xfa8
c0013c77:	50                   	push   eax
c0013c78:	e8 d3 c9 fe ff       	call   c0000650 <strcpy>
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	31 c0                	xor    eax,eax
c0013c82:	83 c4 0c             	add    esp,0xc
c0013c85:	31 d2                	xor    edx,edx
c0013c87:	5b                   	pop    ebx
c0013c88:	5e                   	pop    esi
c0013c89:	5f                   	pop    edi
c0013c8a:	5d                   	pop    ebp
c0013c8b:	c3                   	ret    

c0013c8c <SysKill(regs*)>:
c0013c8c:	53                   	push   ebx
c0013c8d:	83 ec 08             	sub    esp,0x8
c0013c90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c94:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013c98:	75 16                	jne    c0013cb0 <SysKill(regs*)+0x24>
c0013c9a:	83 ec 0c             	sub    esp,0xc
c0013c9d:	68 5e 22 02 c0       	push   0xc002225e
c0013ca2:	e8 22 d6 ff ff       	call   c00112c9 <KePanic(char const*)>
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	e9 89 00 00 00       	jmp    c0013d38 <SysKill(regs*)+0xac>
c0013caf:	90                   	nop
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	68 e4 96 02 c0       	push   0xc00296e4
c0013cb8:	e8 5f bd 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	85 c0                	test   eax,eax
c0013cc5:	74 19                	je     c0013ce0 <SysKill(regs*)+0x54>
c0013cc7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013cca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ccd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ccf:	74 33                	je     c0013d04 <SysKill(regs*)+0x78>
c0013cd1:	52                   	push   edx
c0013cd2:	52                   	push   edx
c0013cd3:	50                   	push   eax
c0013cd4:	68 e4 96 02 c0       	push   0xc00296e4
c0013cd9:	e8 5e c0 00 00       	call   c001fd3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cde:	eb e0                	jmp    c0013cc0 <SysKill(regs*)+0x34>
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	68 d8 96 02 c0       	push   0xc00296d8
c0013ce8:	e8 2f bd 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ced:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	85 c0                	test   eax,eax
c0013cf5:	74 41                	je     c0013d38 <SysKill(regs*)+0xac>
c0013cf7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013cfa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013cfd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013cff:	75 27                	jne    c0013d28 <SysKill(regs*)+0x9c>
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	51                   	push   ecx
c0013d05:	51                   	push   ecx
c0013d06:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d11:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d17:	e8 4b da ff ff       	call   c0011767 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	31 c0                	xor    eax,eax
c0013d21:	31 d2                	xor    edx,edx
c0013d23:	eb 1b                	jmp    c0013d40 <SysKill(regs*)+0xb4>
c0013d25:	8d 76 00             	lea    esi,[esi+0x0]
c0013d28:	52                   	push   edx
c0013d29:	52                   	push   edx
c0013d2a:	50                   	push   eax
c0013d2b:	68 d8 96 02 c0       	push   0xc00296d8
c0013d30:	e8 07 c0 00 00       	call   c001fd3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d35:	eb b9                	jmp    c0013cf0 <SysKill(regs*)+0x64>
c0013d37:	90                   	nop
c0013d38:	83 c8 ff             	or     eax,0xffffffff
c0013d3b:	89 c2                	mov    edx,eax
c0013d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d40:	83 c4 08             	add    esp,0x8
c0013d43:	5b                   	pop    ebx
c0013d44:	c3                   	ret    

c0013d45 <SysLoadDLL(regs*)>:
c0013d45:	56                   	push   esi
c0013d46:	31 d2                	xor    edx,edx
c0013d48:	53                   	push   ebx
c0013d49:	b8 01 00 00 00       	mov    eax,0x1
c0013d4e:	51                   	push   ecx
c0013d4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d53:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013d57:	0f 84 8c 00 00 00    	je     c0013de9 <SysLoadDLL(regs*)+0xa4>
c0013d5d:	83 ec 0c             	sub    esp,0xc
c0013d60:	68 14 01 00 00       	push   0x114
c0013d65:	e8 69 3d ff ff       	call   c0007ad3 <malloc>
c0013d6a:	83 c4 0c             	add    esp,0xc
c0013d6d:	89 c3                	mov    ebx,eax
c0013d6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d74:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d77:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d7a:	53                   	push   ebx
c0013d7b:	e8 2c 7b ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	31 d2                	xor    edx,edx
c0013d85:	85 db                	test   ebx,ebx
c0013d87:	b8 02 00 00 00       	mov    eax,0x2
c0013d8c:	74 5b                	je     c0013de9 <SysLoadDLL(regs*)+0xa4>
c0013d8e:	83 ec 0c             	sub    esp,0xc
c0013d91:	53                   	push   ebx
c0013d92:	e8 f7 7d ff ff       	call   c000bb8e <File::exists()>
c0013d97:	83 c4 10             	add    esp,0x10
c0013d9a:	84 c0                	test   al,al
c0013d9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d9e:	75 11                	jne    c0013db1 <SysLoadDLL(regs*)+0x6c>
c0013da0:	83 ec 0c             	sub    esp,0xc
c0013da3:	53                   	push   ebx
c0013da4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013da7:	83 c4 10             	add    esp,0x10
c0013daa:	b8 03 00 00 00       	mov    eax,0x3
c0013daf:	eb 36                	jmp    c0013de7 <SysLoadDLL(regs*)+0xa2>
c0013db1:	83 ec 0c             	sub    esp,0xc
c0013db4:	53                   	push   ebx
c0013db5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013db8:	58                   	pop    eax
c0013db9:	5a                   	pop    edx
c0013dba:	6a 00                	push   0x0
c0013dbc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013dbf:	e8 49 15 00 00       	call   c001530d <Thr::loadDLL(char const*, bool)>
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	31 d2                	xor    edx,edx
c0013dc9:	89 c1                	mov    ecx,eax
c0013dcb:	b8 04 00 00 00       	mov    eax,0x4
c0013dd0:	85 c9                	test   ecx,ecx
c0013dd2:	74 15                	je     c0013de9 <SysLoadDLL(regs*)+0xa4>
c0013dd4:	53                   	push   ebx
c0013dd5:	53                   	push   ebx
c0013dd6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013ddc:	51                   	push   ecx
c0013ddd:	e8 6b 17 00 00       	call   c001554d <Thr::executeDLL(unsigned long, void*)>
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	31 c0                	xor    eax,eax
c0013de7:	31 d2                	xor    edx,edx
c0013de9:	59                   	pop    ecx
c0013dea:	5b                   	pop    ebx
c0013deb:	5e                   	pop    esi
c0013dec:	c3                   	ret    

c0013ded <SysRead(regs*)>:
c0013ded:	57                   	push   edi
c0013dee:	56                   	push   esi
c0013def:	53                   	push   ebx
c0013df0:	83 ec 10             	sub    esp,0x10
c0013df3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013df7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013dfa:	83 f8 02             	cmp    eax,0x2
c0013dfd:	77 10                	ja     c0013e0f <SysRead(regs*)+0x22>
c0013dff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e07:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013e0d:	eb 0e                	jmp    c0013e1d <SysRead(regs*)+0x30>
c0013e0f:	83 ec 0c             	sub    esp,0xc
c0013e12:	50                   	push   eax
c0013e13:	e8 83 56 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	89 c1                	mov    ecx,eax
c0013e1d:	83 c8 ff             	or     eax,0xffffffff
c0013e20:	85 c9                	test   ecx,ecx
c0013e22:	89 c2                	mov    edx,eax
c0013e24:	74 28                	je     c0013e4e <SysRead(regs*)+0x61>
c0013e26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013e2e:	83 ec 0c             	sub    esp,0xc
c0013e31:	31 ff                	xor    edi,edi
c0013e33:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013e37:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e39:	52                   	push   edx
c0013e3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e3d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013e40:	57                   	push   edi
c0013e41:	56                   	push   esi
c0013e42:	51                   	push   ecx
c0013e43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e4a:	83 c4 20             	add    esp,0x20
c0013e4d:	99                   	cdq    
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	5b                   	pop    ebx
c0013e52:	5e                   	pop    esi
c0013e53:	5f                   	pop    edi
c0013e54:	c3                   	ret    

c0013e55 <SysRegisterSignal(regs*)>:
c0013e55:	83 ec 18             	sub    esp,0x18
c0013e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e5c:	6a 00                	push   0x0
c0013e5e:	6a 00                	push   0x0
c0013e60:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e63:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e6e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013e74:	e8 b8 d8 ff ff       	call   c0011731 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013e79:	83 c4 2c             	add    esp,0x2c
c0013e7c:	99                   	cdq    
c0013e7d:	c3                   	ret    

c0013e7e <SysRegistryGetTypeFromPath(regs*)>:
c0013e7e:	57                   	push   edi
c0013e7f:	56                   	push   esi
c0013e80:	53                   	push   ebx
c0013e81:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e87:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013e8e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e91:	68 7f 22 02 c0       	push   0xc002227f
c0013e96:	e8 6f 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e9b:	5a                   	pop    edx
c0013e9c:	59                   	pop    ecx
c0013e9d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ea0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ea3:	e8 34 f6 ff ff       	call   c00134dc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ea8:	5f                   	pop    edi
c0013ea9:	5a                   	pop    edx
c0013eaa:	89 c6                	mov    esi,eax
c0013eac:	50                   	push   eax
c0013ead:	68 9f 22 02 c0       	push   0xc002229f
c0013eb2:	e8 53 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	85 f6                	test   esi,esi
c0013ebc:	74 28                	je     c0013ee6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013ebe:	50                   	push   eax
c0013ebf:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ec3:	57                   	push   edi
c0013ec4:	56                   	push   esi
c0013ec5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ec8:	e8 f4 f1 ff ff       	call   c00130c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013ecd:	83 c4 0c             	add    esp,0xc
c0013ed0:	57                   	push   edi
c0013ed1:	50                   	push   eax
c0013ed2:	89 c3                	mov    ebx,eax
c0013ed4:	68 a7 22 02 c0       	push   0xc00222a7
c0013ed9:	e8 2c 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ede:	89 d8                	mov    eax,ebx
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	99                   	cdq    
c0013ee4:	eb 05                	jmp    c0013eeb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013ee6:	83 c8 ff             	or     eax,0xffffffff
c0013ee9:	89 c2                	mov    edx,eax
c0013eeb:	81 c4 30 01 00 00    	add    esp,0x130
c0013ef1:	5b                   	pop    ebx
c0013ef2:	5e                   	pop    esi
c0013ef3:	5f                   	pop    edi
c0013ef4:	c3                   	ret    

c0013ef5 <SysRegistryReadExtent(regs*)>:
c0013ef5:	83 ec 1c             	sub    esp,0x1c
c0013ef8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013efc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013eff:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013f02:	85 c0                	test   eax,eax
c0013f04:	79 1f                	jns    c0013f25 <SysRegistryReadExtent(regs*)+0x30>
c0013f06:	52                   	push   edx
c0013f07:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013f0c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013f10:	52                   	push   edx
c0013f11:	50                   	push   eax
c0013f12:	51                   	push   ecx
c0013f13:	e8 9b f0 ff ff       	call   c0012fb3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013f18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f20:	83 c4 10             	add    esp,0x10
c0013f23:	eb 14                	jmp    c0013f39 <SysRegistryReadExtent(regs*)+0x44>
c0013f25:	83 ec 04             	sub    esp,0x4
c0013f28:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013f2b:	50                   	push   eax
c0013f2c:	51                   	push   ecx
c0013f2d:	e8 1f eb ff ff       	call   c0012a51 <CmGetString(Reghive_Tag*, int, char*)>
c0013f32:	83 c4 10             	add    esp,0x10
c0013f35:	31 c0                	xor    eax,eax
c0013f37:	31 d2                	xor    edx,edx
c0013f39:	83 c4 1c             	add    esp,0x1c
c0013f3c:	c3                   	ret    

c0013f3d <SysRegistryPathToExtentLookup(regs*)>:
c0013f3d:	53                   	push   ebx
c0013f3e:	83 ec 10             	sub    esp,0x10
c0013f41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f45:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f48:	68 bd 22 02 c0       	push   0xc00222bd
c0013f4d:	e8 b8 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013f52:	58                   	pop    eax
c0013f53:	5a                   	pop    edx
c0013f54:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f57:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f5a:	e8 7d f5 ff ff       	call   c00134dc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013f5f:	83 c4 18             	add    esp,0x18
c0013f62:	5b                   	pop    ebx
c0013f63:	99                   	cdq    
c0013f64:	c3                   	ret    

c0013f65 <SysRegistryEnterDirectory(regs*)>:
c0013f65:	53                   	push   ebx
c0013f66:	83 ec 10             	sub    esp,0x10
c0013f69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f6d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f70:	68 e0 22 02 c0       	push   0xc00222e0
c0013f75:	e8 90 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013f7a:	58                   	pop    eax
c0013f7b:	5a                   	pop    edx
c0013f7c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f7f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f82:	e8 41 eb ff ff       	call   c0012ac8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013f87:	83 c4 18             	add    esp,0x18
c0013f8a:	5b                   	pop    ebx
c0013f8b:	99                   	cdq    
c0013f8c:	c3                   	ret    

c0013f8d <SysRegistryGetNext(regs*)>:
c0013f8d:	53                   	push   ebx
c0013f8e:	83 ec 10             	sub    esp,0x10
c0013f91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f95:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f98:	68 fe 22 02 c0       	push   0xc00222fe
c0013f9d:	e8 68 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013fa2:	58                   	pop    eax
c0013fa3:	5a                   	pop    edx
c0013fa4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013fa7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013faa:	e8 58 eb ff ff       	call   c0012b07 <CmGetNext(Reghive_Tag*, int)>
c0013faf:	83 c4 18             	add    esp,0x18
c0013fb2:	5b                   	pop    ebx
c0013fb3:	99                   	cdq    
c0013fb4:	c3                   	ret    

c0013fb5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013fb5:	57                   	push   edi
c0013fb6:	56                   	push   esi
c0013fb7:	53                   	push   ebx
c0013fb8:	81 ec 34 01 00 00    	sub    esp,0x134
c0013fbe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013fc5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013fc9:	57                   	push   edi
c0013fca:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013fcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013fd0:	e8 ec f0 ff ff       	call   c00130c1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013fd5:	89 c3                	mov    ebx,eax
c0013fd7:	58                   	pop    eax
c0013fd8:	5a                   	pop    edx
c0013fd9:	57                   	push   edi
c0013fda:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013fdd:	e8 6e c6 fe ff       	call   c0000650 <strcpy>
c0013fe2:	81 c4 40 01 00 00    	add    esp,0x140
c0013fe8:	89 d8                	mov    eax,ebx
c0013fea:	5b                   	pop    ebx
c0013feb:	99                   	cdq    
c0013fec:	5e                   	pop    esi
c0013fed:	5f                   	pop    edi
c0013fee:	c3                   	ret    

c0013fef <SysRegistryOpen(regs*)>:
c0013fef:	83 ec 18             	sub    esp,0x18
c0013ff2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ff6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013ff9:	e8 e3 e8 ff ff       	call   c00128e1 <CmOpen(char const*)>
c0013ffe:	83 c4 1c             	add    esp,0x1c
c0014001:	99                   	cdq    
c0014002:	c3                   	ret    

c0014003 <SysRegistryClose(regs*)>:
c0014003:	83 ec 18             	sub    esp,0x18
c0014006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001400a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001400d:	e8 ed e9 ff ff       	call   c00129ff <CmClose(Reghive_Tag*)>
c0014012:	31 c0                	xor    eax,eax
c0014014:	31 d2                	xor    edx,edx
c0014016:	83 c4 1c             	add    esp,0x1c
c0014019:	c3                   	ret    

c001401a <SysSbrk(regs*)>:
c001401a:	56                   	push   esi
c001401b:	53                   	push   ebx
c001401c:	50                   	push   eax
c001401d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014022:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014026:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014029:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001402c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014032:	85 db                	test   ebx,ebx
c0014034:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014037:	74 02                	je     c001403b <SysSbrk(regs*)+0x21>
c0014039:	79 06                	jns    c0014041 <SysSbrk(regs*)+0x27>
c001403b:	89 f0                	mov    eax,esi
c001403d:	31 d2                	xor    edx,edx
c001403f:	eb 2a                	jmp    c001406b <SysSbrk(regs*)+0x51>
c0014041:	83 c8 ff             	or     eax,0xffffffff
c0014044:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001404a:	89 c2                	mov    edx,eax
c001404c:	77 1d                	ja     c001406b <SysSbrk(regs*)+0x51>
c001404e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014054:	50                   	push   eax
c0014055:	68 07 0c 00 00       	push   0xc07
c001405a:	c1 ea 0c             	shr    edx,0xc
c001405d:	52                   	push   edx
c001405e:	51                   	push   ecx
c001405f:	e8 a2 5d ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0014064:	89 f0                	mov    eax,esi
c0014066:	31 d2                	xor    edx,edx
c0014068:	83 c4 10             	add    esp,0x10
c001406b:	59                   	pop    ecx
c001406c:	5b                   	pop    ebx
c001406d:	5e                   	pop    esi
c001406e:	c3                   	ret    

c001406f <SysSetCwd(regs*)>:
c001406f:	83 ec 14             	sub    esp,0x14
c0014072:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014076:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014079:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001407e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014081:	e8 a7 7b ff ff       	call   c000bc2d <Fs::setcwd(Process*, char*)>
c0014086:	83 c4 1c             	add    esp,0x1c
c0014089:	99                   	cdq    
c001408a:	c3                   	ret    

c001408b <SysSetTime(regs*)>:
c001408b:	55                   	push   ebp
c001408c:	31 c9                	xor    ecx,ecx
c001408e:	57                   	push   edi
c001408f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014094:	56                   	push   esi
c0014095:	53                   	push   ebx
c0014096:	31 db                	xor    ebx,ebx
c0014098:	83 ec 10             	sub    esp,0x10
c001409b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001409f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00140a2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00140a5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00140a8:	89 c2                	mov    edx,eax
c00140aa:	c1 e8 05             	shr    eax,0x5
c00140ad:	83 e2 1f             	and    edx,0x1f
c00140b0:	42                   	inc    edx
c00140b1:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00140b7:	c1 e7 10             	shl    edi,0x10
c00140ba:	88 d1                	mov    cl,dl
c00140bc:	31 d2                	xor    edx,edx
c00140be:	f7 f5                	div    ebp
c00140c0:	89 dd                	mov    ebp,ebx
c00140c2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00140c8:	88 d5                	mov    ch,dl
c00140ca:	31 d2                	xor    edx,edx
c00140cc:	0f b7 c1             	movzx  eax,cx
c00140cf:	09 f8                	or     eax,edi
c00140d1:	bf 3c 00 00 00       	mov    edi,0x3c
c00140d6:	89 c1                	mov    ecx,eax
c00140d8:	89 f0                	mov    eax,esi
c00140da:	f7 f7                	div    edi
c00140dc:	c1 e2 10             	shl    edx,0x10
c00140df:	09 d5                	or     ebp,edx
c00140e1:	31 d2                	xor    edx,edx
c00140e3:	f7 f7                	div    edi
c00140e5:	89 eb                	mov    ebx,ebp
c00140e7:	bf 10 0e 00 00       	mov    edi,0xe10
c00140ec:	89 f0                	mov    eax,esi
c00140ee:	88 d7                	mov    bh,dl
c00140f0:	31 d2                	xor    edx,edx
c00140f2:	f7 f7                	div    edi
c00140f4:	bf 18 00 00 00       	mov    edi,0x18
c00140f9:	31 d2                	xor    edx,edx
c00140fb:	f7 f7                	div    edi
c00140fd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014102:	88 d3                	mov    bl,dl
c0014104:	53                   	push   ebx
c0014105:	51                   	push   ecx
c0014106:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001410c:	e8 2f 83 ff ff       	call   c000c440 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014111:	83 c4 1c             	add    esp,0x1c
c0014114:	31 d2                	xor    edx,edx
c0014116:	5b                   	pop    ebx
c0014117:	5e                   	pop    esi
c0014118:	83 f0 01             	xor    eax,0x1
c001411b:	5f                   	pop    edi
c001411c:	0f b6 c0             	movzx  eax,al
c001411f:	5d                   	pop    ebp
c0014120:	c3                   	ret    

c0014121 <SysSymlink(regs*)>:
c0014121:	53                   	push   ebx
c0014122:	83 c8 ff             	or     eax,0xffffffff
c0014125:	83 ec 08             	sub    esp,0x8
c0014128:	89 c2                	mov    edx,eax
c001412a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001412e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014131:	85 c9                	test   ecx,ecx
c0014133:	74 14                	je     c0014149 <SysSymlink(regs*)+0x28>
c0014135:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014138:	85 db                	test   ebx,ebx
c001413a:	74 0d                	je     c0014149 <SysSymlink(regs*)+0x28>
c001413c:	50                   	push   eax
c001413d:	50                   	push   eax
c001413e:	53                   	push   ebx
c001413f:	51                   	push   ecx
c0014140:	e8 e3 6f ff ff       	call   c000b128 <KeCreateSymlink(char const*, char const*)>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	99                   	cdq    
c0014149:	83 c4 08             	add    esp,0x8
c001414c:	5b                   	pop    ebx
c001414d:	c3                   	ret    

c001414e <SysTimezone(regs*)>:
c001414e:	53                   	push   ebx
c001414f:	83 ec 08             	sub    esp,0x8
c0014152:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014156:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001415a:	75 17                	jne    c0014173 <SysTimezone(regs*)+0x25>
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	68 15 23 02 c0       	push   0xc0022315
c0014164:	e8 a1 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014169:	83 c8 ff             	or     eax,0xffffffff
c001416c:	83 c4 10             	add    esp,0x10
c001416f:	89 c2                	mov    edx,eax
c0014171:	eb 20                	jmp    c0014193 <SysTimezone(regs*)+0x45>
c0014173:	83 ec 0c             	sub    esp,0xc
c0014176:	68 2a 23 02 c0       	push   0xc002232a
c001417b:	e8 8a 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014180:	58                   	pop    eax
c0014181:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014184:	e8 1b 80 ff ff       	call   c000c1a4 <User::loadClockSettings(int)>
c0014189:	83 c4 10             	add    esp,0x10
c001418c:	b8 01 00 00 00       	mov    eax,0x1
c0014191:	31 d2                	xor    edx,edx
c0014193:	83 c4 08             	add    esp,0x8
c0014196:	5b                   	pop    ebx
c0014197:	c3                   	ret    

c0014198 <SysTruncate(regs*)>:
c0014198:	55                   	push   ebp
c0014199:	57                   	push   edi
c001419a:	31 ff                	xor    edi,edi
c001419c:	56                   	push   esi
c001419d:	53                   	push   ebx
c001419e:	83 ec 0c             	sub    esp,0xc
c00141a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141a5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00141a8:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00141ac:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00141af:	89 ce                	mov    esi,ecx
c00141b1:	0f 84 9a 00 00 00    	je     c0014251 <SysTruncate(regs*)+0xb9>
c00141b7:	83 ec 0c             	sub    esp,0xc
c00141ba:	68 14 01 00 00       	push   0x114
c00141bf:	e8 0f 39 ff ff       	call   c0007ad3 <malloc>
c00141c4:	83 c4 0c             	add    esp,0xc
c00141c7:	89 c3                	mov    ebx,eax
c00141c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00141d1:	55                   	push   ebp
c00141d2:	53                   	push   ebx
c00141d3:	e8 d4 76 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c00141d8:	83 c4 10             	add    esp,0x10
c00141db:	31 d2                	xor    edx,edx
c00141dd:	85 db                	test   ebx,ebx
c00141df:	b8 03 00 00 00       	mov    eax,0x3
c00141e4:	0f 84 a2 00 00 00    	je     c001428c <SysTruncate(regs*)+0xf4>
c00141ea:	51                   	push   ecx
c00141eb:	51                   	push   ecx
c00141ec:	6a 02                	push   0x2
c00141ee:	53                   	push   ebx
c00141ef:	e8 d6 76 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	85 c0                	test   eax,eax
c00141f9:	74 13                	je     c001420e <SysTruncate(regs*)+0x76>
c00141fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141fd:	83 ec 0c             	sub    esp,0xc
c0014200:	53                   	push   ebx
c0014201:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	b8 04 00 00 00       	mov    eax,0x4
c001420c:	eb 7c                	jmp    c001428a <SysTruncate(regs*)+0xf2>
c001420e:	52                   	push   edx
c001420f:	57                   	push   edi
c0014210:	56                   	push   esi
c0014211:	53                   	push   ebx
c0014212:	e8 c7 77 ff ff       	call   c000b9de <File::truncate(unsigned long long)>
c0014217:	83 c4 10             	add    esp,0x10
c001421a:	85 c0                	test   eax,eax
c001421c:	74 1b                	je     c0014239 <SysTruncate(regs*)+0xa1>
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	53                   	push   ebx
c0014222:	e8 01 77 ff ff       	call   c000b928 <File::close()>
c0014227:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014229:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001422c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	b8 05 00 00 00       	mov    eax,0x5
c0014237:	eb 51                	jmp    c001428a <SysTruncate(regs*)+0xf2>
c0014239:	83 ec 0c             	sub    esp,0xc
c001423c:	53                   	push   ebx
c001423d:	e8 e6 76 ff ff       	call   c000b928 <File::close()>
c0014242:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014247:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001424a:	83 c4 10             	add    esp,0x10
c001424d:	31 c0                	xor    eax,eax
c001424f:	eb 39                	jmp    c001428a <SysTruncate(regs*)+0xf2>
c0014251:	31 d2                	xor    edx,edx
c0014253:	83 fd 02             	cmp    ebp,0x2
c0014256:	b8 01 00 00 00       	mov    eax,0x1
c001425b:	7e 2f                	jle    c001428c <SysTruncate(regs*)+0xf4>
c001425d:	83 ec 0c             	sub    esp,0xc
c0014260:	51                   	push   ecx
c0014261:	e8 35 52 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014266:	83 c4 10             	add    esp,0x10
c0014269:	31 d2                	xor    edx,edx
c001426b:	89 c1                	mov    ecx,eax
c001426d:	b8 02 00 00 00       	mov    eax,0x2
c0014272:	85 c9                	test   ecx,ecx
c0014274:	74 16                	je     c001428c <SysTruncate(regs*)+0xf4>
c0014276:	50                   	push   eax
c0014277:	57                   	push   edi
c0014278:	56                   	push   esi
c0014279:	51                   	push   ecx
c001427a:	e8 5f 77 ff ff       	call   c000b9de <File::truncate(unsigned long long)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	85 c0                	test   eax,eax
c0014284:	0f 95 c0             	setne  al
c0014287:	0f b6 c0             	movzx  eax,al
c001428a:	31 d2                	xor    edx,edx
c001428c:	83 c4 0c             	add    esp,0xc
c001428f:	5b                   	pop    ebx
c0014290:	5e                   	pop    esi
c0014291:	5f                   	pop    edi
c0014292:	5d                   	pop    ebp
c0014293:	c3                   	ret    

c0014294 <SysWrite(regs*)>:
c0014294:	57                   	push   edi
c0014295:	56                   	push   esi
c0014296:	53                   	push   ebx
c0014297:	83 ec 10             	sub    esp,0x10
c001429a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001429e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00142a1:	83 f8 02             	cmp    eax,0x2
c00142a4:	77 10                	ja     c00142b6 <SysWrite(regs*)+0x22>
c00142a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142ae:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00142b4:	eb 0e                	jmp    c00142c4 <SysWrite(regs*)+0x30>
c00142b6:	83 ec 0c             	sub    esp,0xc
c00142b9:	50                   	push   eax
c00142ba:	e8 dc 51 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00142bf:	83 c4 10             	add    esp,0x10
c00142c2:	89 c1                	mov    ecx,eax
c00142c4:	83 c8 ff             	or     eax,0xffffffff
c00142c7:	85 c9                	test   ecx,ecx
c00142c9:	89 c2                	mov    edx,eax
c00142cb:	74 28                	je     c00142f5 <SysWrite(regs*)+0x61>
c00142cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142d5:	83 ec 0c             	sub    esp,0xc
c00142d8:	31 ff                	xor    edi,edi
c00142da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00142de:	8b 01                	mov    eax,DWORD PTR [ecx]
c00142e0:	52                   	push   edx
c00142e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142e4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00142e7:	57                   	push   edi
c00142e8:	56                   	push   esi
c00142e9:	51                   	push   ecx
c00142ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00142f1:	83 c4 20             	add    esp,0x20
c00142f4:	99                   	cdq    
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	5b                   	pop    ebx
c00142f9:	5e                   	pop    esi
c00142fa:	5f                   	pop    edi
c00142fb:	c3                   	ret    

c00142fc <SysWsbe(regs*)>:
c00142fc:	57                   	push   edi
c00142fd:	b9 0b 00 00 00       	mov    ecx,0xb
c0014302:	56                   	push   esi
c0014303:	be 69 23 02 c0       	mov    esi,0xc0022369
c0014308:	53                   	push   ebx
c0014309:	83 ec 30             	sub    esp,0x30
c001430c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014310:	fc                   	cld    
c0014311:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014313:	83 ec 0c             	sub    esp,0xc
c0014316:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001431a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001431f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014322:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014328:	8b 06                	mov    eax,DWORD PTR [esi]
c001432a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001432d:	57                   	push   edi
c001432e:	e8 4d c2 fe ff       	call   c0000580 <strlen>
c0014333:	5a                   	pop    edx
c0014334:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014338:	52                   	push   edx
c0014339:	31 d2                	xor    edx,edx
c001433b:	57                   	push   edi
c001433c:	52                   	push   edx
c001433d:	50                   	push   eax
c001433e:	56                   	push   esi
c001433f:	ff d3                	call   ebx
c0014341:	83 c4 14             	add    esp,0x14
c0014344:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014348:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001434b:	e8 a8 23 00 00       	call   c00166f8 <terminateTask(int)>
c0014350:	83 c4 40             	add    esp,0x40
c0014353:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014358:	5b                   	pop    ebx
c0014359:	31 d2                	xor    edx,edx
c001435b:	5e                   	pop    esi
c001435c:	5f                   	pop    edi
c001435d:	c3                   	ret    

c001435e <SysYield(regs*)>:
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	fa                   	cli    
c0014362:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014368:	e8 0b 1a 00 00       	call   c0015d78 <schedule()>
c001436d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014372:	48                   	dec    eax
c0014373:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014378:	75 01                	jne    c001437b <SysYield(regs*)+0x1d>
c001437a:	fb                   	sti    
c001437b:	31 c0                	xor    eax,eax
c001437d:	31 d2                	xor    edx,edx
c001437f:	83 c4 0c             	add    esp,0xc
c0014382:	c3                   	ret    

c0014383 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014383:	55                   	push   ebp
c0014384:	57                   	push   edi
c0014385:	56                   	push   esi
c0014386:	53                   	push   ebx
c0014387:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001438d:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014398:	74 3b                	je     c00143d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001439a:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00143a2:	74 31                	je     c00143d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00143a4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00143ac:	75 27                	jne    c00143d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00143ae:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00143b5:	05 00 10 00 00       	add    eax,0x1000
c00143ba:	89 c2                	mov    edx,eax
c00143bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00143c1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00143c8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00143ce:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00143d5:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	6a 01                	push   0x1
c00143e1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00143e7:	e8 09 52 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00143ec:	83 c4 10             	add    esp,0x10
c00143ef:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143f5:	89 c3                	mov    ebx,eax
c00143f7:	0f 86 26 01 00 00    	jbe    c0014523 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00143fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014405:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001440c:	c1 ee 0c             	shr    esi,0xc
c001440f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014413:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001441a:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014421:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014425:	29 ef                	sub    edi,ebp
c0014427:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001442b:	0f 83 f9 00 00 00    	jae    c001452a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014431:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014437:	b8 00 10 00 00       	mov    eax,0x1000
c001443c:	0f 47 f8             	cmova  edi,eax
c001443f:	83 ec 0c             	sub    esp,0xc
c0014442:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014449:	31 d2                	xor    edx,edx
c001444b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001444d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014451:	50                   	push   eax
c0014452:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014456:	56                   	push   esi
c0014457:	52                   	push   edx
c0014458:	57                   	push   edi
c0014459:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014460:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014463:	83 c4 20             	add    esp,0x20
c0014466:	85 c0                	test   eax,eax
c0014468:	75 06                	jne    c0014470 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001446a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001446e:	74 13                	je     c0014483 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014470:	83 ec 0c             	sub    esp,0xc
c0014473:	53                   	push   ebx
c0014474:	e8 90 54 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014479:	83 c4 10             	add    esp,0x10
c001447c:	31 c0                	xor    eax,eax
c001447e:	e9 7c 01 00 00       	jmp    c00145ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014483:	fa                   	cli    
c0014484:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001448a:	e8 53 39 ff ff       	call   c0007de2 <Phys::allocatePage()>
c001448f:	6a 07                	push   0x7
c0014491:	53                   	push   ebx
c0014492:	50                   	push   eax
c0014493:	89 c7                	mov    edi,eax
c0014495:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001449a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001449d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144a3:	e8 56 58 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00144a8:	83 c4 0c             	add    esp,0xc
c00144ab:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00144b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144b8:	6a 00                	push   0x0
c00144ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144c8:	e8 97 56 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00144cd:	58                   	pop    eax
c00144ce:	5a                   	pop    edx
c00144cf:	68 07 0c 00 00       	push   0xc07
c00144d4:	55                   	push   ebp
c00144d5:	57                   	push   edi
c00144d6:	89 df                	mov    edi,ebx
c00144d8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144e5:	6a 00                	push   0x0
c00144e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144f5:	e8 68 5a ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144fa:	b9 00 10 00 00       	mov    ecx,0x1000
c00144ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014501:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014506:	83 c4 20             	add    esp,0x20
c0014509:	48                   	dec    eax
c001450a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001450f:	85 c0                	test   eax,eax
c0014511:	75 01                	jne    c0014514 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014513:	fb                   	sti    
c0014514:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014518:	81 c5 00 10 00 00    	add    ebp,0x1000
c001451e:	e9 f0 fe ff ff       	jmp    c0014413 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014523:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001452a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014531:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014537:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001453d:	0f 86 ae 00 00 00    	jbe    c00145f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014543:	fa                   	cli    
c0014544:	51                   	push   ecx
c0014545:	31 ff                	xor    edi,edi
c0014547:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001454e:	c1 ee 0c             	shr    esi,0xc
c0014551:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014557:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001455d:	6a 00                	push   0x0
c001455f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014564:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014567:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001456d:	e8 f2 55 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014572:	83 c4 10             	add    esp,0x10
c0014575:	e8 68 38 ff ff       	call   c0007de2 <Phys::allocatePage()>
c001457a:	47                   	inc    edi
c001457b:	6a 07                	push   0x7
c001457d:	53                   	push   ebx
c001457e:	50                   	push   eax
c001457f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014583:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014589:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001458c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014592:	e8 67 57 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014597:	58                   	pop    eax
c0014598:	5a                   	pop    edx
c0014599:	68 07 0c 00 00       	push   0xc07
c001459e:	55                   	push   ebp
c001459f:	81 c5 00 10 00 00    	add    ebp,0x1000
c00145a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a9:	50                   	push   eax
c00145aa:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00145b1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00145b7:	6a 00                	push   0x0
c00145b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00145c7:	e8 96 59 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00145cc:	83 c4 1c             	add    esp,0x1c
c00145cf:	68 00 10 00 00       	push   0x1000
c00145d4:	6a 00                	push   0x0
c00145d6:	53                   	push   ebx
c00145d7:	e8 14 bf fe ff       	call   c00004f0 <memset>
c00145dc:	83 c4 10             	add    esp,0x10
c00145df:	39 fe                	cmp    esi,edi
c00145e1:	77 92                	ja     c0014575 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00145e3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00145e8:	48                   	dec    eax
c00145e9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00145ee:	75 01                	jne    c00145f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00145f0:	fb                   	sti    
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	53                   	push   ebx
c00145f5:	e8 0f 53 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	b0 01                	mov    al,0x1
c00145ff:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014605:	5b                   	pop    ebx
c0014606:	5e                   	pop    esi
c0014607:	5f                   	pop    edi
c0014608:	5d                   	pop    ebp
c0014609:	c3                   	ret    

c001460a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001460a:	55                   	push   ebp
c001460b:	57                   	push   edi
c001460c:	56                   	push   esi
c001460d:	53                   	push   ebx
c001460e:	83 ec 48             	sub    esp,0x48
c0014611:	68 14 01 00 00       	push   0x114
c0014616:	e8 b8 34 ff ff       	call   c0007ad3 <malloc>
c001461b:	83 c4 0c             	add    esp,0xc
c001461e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014622:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014626:	89 c7                	mov    edi,eax
c0014628:	50                   	push   eax
c0014629:	e8 7e 72 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c001462e:	58                   	pop    eax
c001462f:	5a                   	pop    edx
c0014630:	6a 01                	push   0x1
c0014632:	57                   	push   edi
c0014633:	e8 92 72 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0014638:	83 c4 10             	add    esp,0x10
c001463b:	85 c0                	test   eax,eax
c001463d:	0f 85 4c 01 00 00    	jne    c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014643:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001464b:	83 ec 0c             	sub    esp,0xc
c001464e:	6a 34                	push   0x34
c0014650:	e8 7e 34 ff ff       	call   c0007ad3 <malloc>
c0014655:	89 c3                	mov    ebx,eax
c0014657:	58                   	pop    eax
c0014658:	8b 07                	mov    eax,DWORD PTR [edi]
c001465a:	8d 74 24 38          	lea    esi,[esp+0x38]
c001465e:	56                   	push   esi
c001465f:	53                   	push   ebx
c0014660:	6a 00                	push   0x0
c0014662:	6a 34                	push   0x34
c0014664:	57                   	push   edi
c0014665:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014668:	83 c4 20             	add    esp,0x20
c001466b:	85 c0                	test   eax,eax
c001466d:	0f 85 1c 01 00 00    	jne    c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014673:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014679:	0f 85 10 01 00 00    	jne    c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001467f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014682:	85 c0                	test   eax,eax
c0014684:	0f 84 05 01 00 00    	je     c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001468a:	31 d2                	xor    edx,edx
c001468c:	55                   	push   ebp
c001468d:	52                   	push   edx
c001468e:	50                   	push   eax
c001468f:	57                   	push   edi
c0014690:	e8 f3 72 ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014695:	83 c4 10             	add    esp,0x10
c0014698:	85 c0                	test   eax,eax
c001469a:	0f 85 ef 00 00 00    	jne    c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00146a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00146aa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00146ae:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00146b2:	0f af c2             	imul   eax,edx
c00146b5:	50                   	push   eax
c00146b6:	e8 18 34 ff ff       	call   c0007ad3 <malloc>
c00146bb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00146bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00146c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00146c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00146c8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00146cc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00146d0:	0f af c2             	imul   eax,edx
c00146d3:	99                   	cdq    
c00146d4:	52                   	push   edx
c00146d5:	50                   	push   eax
c00146d6:	57                   	push   edi
c00146d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146da:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00146dd:	83 c4 20             	add    esp,0x20
c00146e0:	85 c0                	test   eax,eax
c00146e2:	0f 84 a7 00 00 00    	je     c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00146e8:	31 d2                	xor    edx,edx
c00146ea:	51                   	push   ecx
c00146eb:	52                   	push   edx
c00146ec:	50                   	push   eax
c00146ed:	57                   	push   edi
c00146ee:	e8 95 72 ff ff       	call   c000b988 <File::seek(unsigned long long)>
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	85 c0                	test   eax,eax
c00146f8:	0f 85 91 00 00 00    	jne    c001478f <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00146fe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014702:	83 ec 0c             	sub    esp,0xc
c0014705:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014709:	0f af c2             	imul   eax,edx
c001470c:	50                   	push   eax
c001470d:	e8 c1 33 ff ff       	call   c0007ad3 <malloc>
c0014712:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014714:	89 34 24             	mov    DWORD PTR [esp],esi
c0014717:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001471b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014723:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014727:	0f af c2             	imul   eax,edx
c001472a:	99                   	cdq    
c001472b:	52                   	push   edx
c001472c:	50                   	push   eax
c001472d:	57                   	push   edi
c001472e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014731:	83 c4 20             	add    esp,0x20
c0014734:	31 c9                	xor    ecx,ecx
c0014736:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001473e:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014742:	0f b7 e9             	movzx  ebp,cx
c0014745:	0f 83 86 00 00 00    	jae    c00147d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c001474b:	c1 e5 05             	shl    ebp,0x5
c001474e:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014752:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014756:	75 73                	jne    c00147cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014758:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001475c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001475f:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014762:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014766:	52                   	push   edx
c0014767:	31 d2                	xor    edx,edx
c0014769:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001476c:	52                   	push   edx
c001476d:	50                   	push   eax
c001476e:	57                   	push   edi
c001476f:	e8 14 72 ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001477b:	85 c0                	test   eax,eax
c001477d:	74 17                	je     c0014796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001477f:	83 ec 0c             	sub    esp,0xc
c0014782:	68 95 23 02 c0       	push   0xc0022395
c0014787:	e8 7e 61 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	31 c0                	xor    eax,eax
c0014791:	e9 8b 00 00 00       	jmp    c0014821 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014796:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001479a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001479d:	83 ec 0c             	sub    esp,0xc
c00147a0:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00147a3:	50                   	push   eax
c00147a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147a8:	56                   	push   esi
c00147a9:	57                   	push   edi
c00147aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00147ae:	e8 d0 fb ff ff       	call   c0014383 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00147b3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00147b7:	83 c4 20             	add    esp,0x20
c00147ba:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00147be:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00147c2:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00147c7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00147cb:	41                   	inc    ecx
c00147cc:	e9 6d ff ff ff       	jmp    c001473e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00147d1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00147d5:	83 ec 0c             	sub    esp,0xc
c00147d8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147e0:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00147e6:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00147ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147f1:	05 00 10 00 00       	add    eax,0x1000
c00147f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00147f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147fd:	e8 e1 32 ff ff       	call   c0007ae3 <free>
c0014802:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014805:	e8 d9 32 ff ff       	call   c0007ae3 <free>
c001480a:	58                   	pop    eax
c001480b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001480f:	e8 cf 32 ff ff       	call   c0007ae3 <free>
c0014814:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014817:	e8 0c 71 ff ff       	call   c000b928 <File::close()>
c001481c:	83 c4 10             	add    esp,0x10
c001481f:	b0 01                	mov    al,0x1
c0014821:	83 c4 3c             	add    esp,0x3c
c0014824:	5b                   	pop    ebx
c0014825:	5e                   	pop    esi
c0014826:	5f                   	pop    edi
c0014827:	5d                   	pop    ebp
c0014828:	c3                   	ret    

c0014829 <Thr::runtimeReferenceHelper()>:
c0014829:	83 ec 18             	sub    esp,0x18
c001482c:	68 9d 23 02 c0       	push   0xc002239d
c0014831:	e8 d4 60 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014836:	fa                   	cli    
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	eb fe                	jmp    c001483a <Thr::runtimeReferenceHelper()+0x11>

c001483c <Thr::getAddressOfKernelSymbol(char const*)>:
c001483c:	57                   	push   edi
c001483d:	56                   	push   esi
c001483e:	53                   	push   ebx
c001483f:	31 db                	xor    ebx,ebx
c0014841:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c0014847:	7e 3c                	jle    c0014885 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014849:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014850:	31 ff                	xor    edi,edi
c0014852:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014859:	7e 27                	jle    c0014882 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001485b:	50                   	push   eax
c001485c:	50                   	push   eax
c001485d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014861:	8b 06                	mov    eax,DWORD PTR [esi]
c0014863:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c001486a:	50                   	push   eax
c001486b:	e8 10 bf fe ff       	call   c0000780 <strcmp>
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	85 c0                	test   eax,eax
c0014875:	75 05                	jne    c001487c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014877:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001487a:	eb 0b                	jmp    c0014887 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001487c:	83 c6 10             	add    esi,0x10
c001487f:	47                   	inc    edi
c0014880:	eb d0                	jmp    c0014852 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014882:	43                   	inc    ebx
c0014883:	eb bc                	jmp    c0014841 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014885:	31 c0                	xor    eax,eax
c0014887:	5b                   	pop    ebx
c0014888:	5e                   	pop    esi
c0014889:	5f                   	pop    edi
c001488a:	c3                   	ret    

c001488b <Thr::loadKernelSymbolTable(char const*)>:
c001488b:	55                   	push   ebp
c001488c:	57                   	push   edi
c001488d:	56                   	push   esi
c001488e:	53                   	push   ebx
c001488f:	83 ec 68             	sub    esp,0x68
c0014892:	68 14 01 00 00       	push   0x114
c0014897:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001489d:	e8 31 32 ff ff       	call   c0007ad3 <malloc>
c00148a2:	83 c4 0c             	add    esp,0xc
c00148a5:	56                   	push   esi
c00148a6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00148aa:	89 c3                	mov    ebx,eax
c00148ac:	50                   	push   eax
c00148ad:	e8 fa 6f ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c00148b2:	5e                   	pop    esi
c00148b3:	5f                   	pop    edi
c00148b4:	6a 01                	push   0x1
c00148b6:	53                   	push   ebx
c00148b7:	e8 0e 70 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c00148bc:	83 c4 10             	add    esp,0x10
c00148bf:	85 c0                	test   eax,eax
c00148c1:	74 0a                	je     c00148cd <Thr::loadKernelSymbolTable(char const*)+0x42>
c00148c3:	83 ec 0c             	sub    esp,0xc
c00148c6:	68 bf 23 02 c0       	push   0xc00223bf
c00148cb:	eb 34                	jmp    c0014901 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00148cd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00148d5:	83 ec 0c             	sub    esp,0xc
c00148d8:	6a 34                	push   0x34
c00148da:	e8 f4 31 ff ff       	call   c0007ad3 <malloc>
c00148df:	59                   	pop    ecx
c00148e0:	8d 74 24 34          	lea    esi,[esp+0x34]
c00148e4:	89 c7                	mov    edi,eax
c00148e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148e8:	56                   	push   esi
c00148e9:	57                   	push   edi
c00148ea:	6a 00                	push   0x0
c00148ec:	6a 34                	push   0x34
c00148ee:	53                   	push   ebx
c00148ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148f2:	83 c4 20             	add    esp,0x20
c00148f5:	85 c0                	test   eax,eax
c00148f7:	74 17                	je     c0014910 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00148f9:	83 ec 0c             	sub    esp,0xc
c00148fc:	68 d6 23 02 c0       	push   0xc00223d6
c0014901:	e8 c3 c9 ff ff       	call   c00112c9 <KePanic(char const*)>
c0014906:	83 c4 10             	add    esp,0x10
c0014909:	31 c0                	xor    eax,eax
c001490b:	e9 31 02 00 00       	jmp    c0014b41 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014910:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014916:	75 e1                	jne    c00148f9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014918:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001491b:	85 c0                	test   eax,eax
c001491d:	74 da                	je     c00148f9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001491f:	52                   	push   edx
c0014920:	31 d2                	xor    edx,edx
c0014922:	52                   	push   edx
c0014923:	50                   	push   eax
c0014924:	53                   	push   ebx
c0014925:	e8 5e 70 ff ff       	call   c000b988 <File::seek(unsigned long long)>
c001492a:	83 c4 10             	add    esp,0x10
c001492d:	85 c0                	test   eax,eax
c001492f:	75 c8                	jne    c00148f9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014931:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014935:	83 ec 0c             	sub    esp,0xc
c0014938:	31 ed                	xor    ebp,ebp
c001493a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001493e:	0f af c2             	imul   eax,edx
c0014941:	50                   	push   eax
c0014942:	e8 8c 31 ff ff       	call   c0007ad3 <malloc>
c0014947:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014949:	89 34 24             	mov    DWORD PTR [esp],esi
c001494c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014950:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014954:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014958:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001495c:	0f af c2             	imul   eax,edx
c001495f:	99                   	cdq    
c0014960:	52                   	push   edx
c0014961:	50                   	push   eax
c0014962:	53                   	push   ebx
c0014963:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014966:	83 c4 20             	add    esp,0x20
c0014969:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014971:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014979:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014981:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014989:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001498d:	0f b7 f5             	movzx  esi,bp
c0014990:	0f 83 a7 00 00 00    	jae    c0014a3d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014996:	6b f6 28             	imul   esi,esi,0x28
c0014999:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001499d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00149a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149a4:	50                   	push   eax
c00149a5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00149a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149ad:	8b 16                	mov    edx,DWORD PTR [esi]
c00149af:	6b c0 28             	imul   eax,eax,0x28
c00149b2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00149b6:	89 d0                	mov    eax,edx
c00149b8:	31 d2                	xor    edx,edx
c00149ba:	52                   	push   edx
c00149bb:	50                   	push   eax
c00149bc:	53                   	push   ebx
c00149bd:	e8 c6 6f ff ff       	call   c000b988 <File::seek(unsigned long long)>
c00149c2:	83 c4 0c             	add    esp,0xc
c00149c5:	6a 20                	push   0x20
c00149c7:	6a 00                	push   0x0
c00149c9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00149cd:	52                   	push   edx
c00149ce:	e8 1d bb fe ff       	call   c00004f0 <memset>
c00149d3:	58                   	pop    eax
c00149d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149d6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00149da:	51                   	push   ecx
c00149db:	8d 54 24 40          	lea    edx,[esp+0x40]
c00149df:	52                   	push   edx
c00149e0:	6a 00                	push   0x0
c00149e2:	6a 1f                	push   0x1f
c00149e4:	53                   	push   ebx
c00149e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149e8:	83 c4 18             	add    esp,0x18
c00149eb:	68 ed 23 02 c0       	push   0xc00223ed
c00149f0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00149f4:	52                   	push   edx
c00149f5:	e8 86 bd fe ff       	call   c0000780 <strcmp>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	85 c0                	test   eax,eax
c00149ff:	75 0f                	jne    c0014a10 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014a01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a10:	50                   	push   eax
c0014a11:	50                   	push   eax
c0014a12:	68 f5 23 02 c0       	push   0xc00223f5
c0014a17:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014a1b:	50                   	push   eax
c0014a1c:	e8 5f bd fe ff       	call   c0000780 <strcmp>
c0014a21:	83 c4 10             	add    esp,0x10
c0014a24:	85 c0                	test   eax,eax
c0014a26:	75 0f                	jne    c0014a37 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014a28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a37:	45                   	inc    ebp
c0014a38:	e9 4c ff ff ff       	jmp    c0014989 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014a3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a42:	75 10                	jne    c0014a54 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	68 fd 23 02 c0       	push   0xc00223fd
c0014a4c:	e8 78 c8 ff ff       	call   c00112c9 <KePanic(char const*)>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014a59:	75 10                	jne    c0014a6b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014a5b:	83 ec 0c             	sub    esp,0xc
c0014a5e:	68 fd 23 02 c0       	push   0xc00223fd
c0014a63:	e8 61 c8 ff ff       	call   c00112c9 <KePanic(char const*)>
c0014a68:	83 c4 10             	add    esp,0x10
c0014a6b:	50                   	push   eax
c0014a6c:	31 d2                	xor    edx,edx
c0014a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a72:	52                   	push   edx
c0014a73:	50                   	push   eax
c0014a74:	53                   	push   ebx
c0014a75:	e8 0e 6f ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014a7a:	5a                   	pop    edx
c0014a7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a7f:	e8 4f 30 ff ff       	call   c0007ad3 <malloc>
c0014a84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a88:	31 c9                	xor    ecx,ecx
c0014a8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a90:	5e                   	pop    esi
c0014a91:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014a95:	55                   	push   ebp
c0014a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a9a:	51                   	push   ecx
c0014a9b:	52                   	push   edx
c0014a9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014aa0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014aa4:	53                   	push   ebx
c0014aa5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014aa8:	83 c4 14             	add    esp,0x14
c0014aab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014aaf:	e8 1f 30 ff ff       	call   c0007ad3 <malloc>
c0014ab4:	89 c6                	mov    esi,eax
c0014ab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ab8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014abb:	56                   	push   esi
c0014abc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014ac0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014ac4:	51                   	push   ecx
c0014ac5:	52                   	push   edx
c0014ac6:	53                   	push   ebx
c0014ac7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014aca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ace:	83 c4 1c             	add    esp,0x1c
c0014ad1:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014ad7:	c1 e8 04             	shr    eax,0x4
c0014ada:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014ae1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ae5:	31 d2                	xor    edx,edx
c0014ae7:	52                   	push   edx
c0014ae8:	50                   	push   eax
c0014ae9:	53                   	push   ebx
c0014aea:	e8 99 6e ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014aef:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014af1:	31 d2                	xor    edx,edx
c0014af3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014af6:	56                   	push   esi
c0014af7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014afb:	52                   	push   edx
c0014afc:	50                   	push   eax
c0014afd:	53                   	push   ebx
c0014afe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b01:	83 c4 14             	add    esp,0x14
c0014b04:	53                   	push   ebx
c0014b05:	e8 1e 6e ff ff       	call   c000b928 <File::close()>
c0014b0a:	5d                   	pop    ebp
c0014b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b0f:	e8 cf 2f ff ff       	call   c0007ae3 <free>
c0014b14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b17:	e8 c7 2f ff ff       	call   c0007ae3 <free>
c0014b1c:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014b21:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b25:	83 c4 10             	add    esp,0x10
c0014b28:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014b32:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014b39:	b0 01                	mov    al,0x1
c0014b3b:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014b41:	83 c4 5c             	add    esp,0x5c
c0014b44:	5b                   	pop    ebx
c0014b45:	5e                   	pop    esi
c0014b46:	5f                   	pop    edi
c0014b47:	5d                   	pop    ebp
c0014b48:	c3                   	ret    

c0014b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014b49:	55                   	push   ebp
c0014b4a:	57                   	push   edi
c0014b4b:	56                   	push   esi
c0014b4c:	53                   	push   ebx
c0014b4d:	81 ec 68 03 00 00    	sub    esp,0x368
c0014b53:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014b5a:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014b60:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014b64:	68 14 01 00 00       	push   0x114
c0014b69:	e8 65 2f ff ff       	call   c0007ad3 <malloc>
c0014b6e:	83 c4 0c             	add    esp,0xc
c0014b71:	56                   	push   esi
c0014b72:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014b79:	50                   	push   eax
c0014b7a:	89 c3                	mov    ebx,eax
c0014b7c:	e8 2b 6d ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0014b81:	5f                   	pop    edi
c0014b82:	5d                   	pop    ebp
c0014b83:	6a 01                	push   0x1
c0014b85:	53                   	push   ebx
c0014b86:	e8 3f 6d ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	85 c0                	test   eax,eax
c0014b90:	0f 85 b3 06 00 00    	jne    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b96:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014b9e:	83 ec 0c             	sub    esp,0xc
c0014ba1:	6a 34                	push   0x34
c0014ba3:	e8 2b 2f ff ff       	call   c0007ad3 <malloc>
c0014ba8:	5e                   	pop    esi
c0014ba9:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014bad:	89 c5                	mov    ebp,eax
c0014baf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bb1:	56                   	push   esi
c0014bb2:	55                   	push   ebp
c0014bb3:	6a 00                	push   0x0
c0014bb5:	6a 34                	push   0x34
c0014bb7:	53                   	push   ebx
c0014bb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bbb:	83 c4 20             	add    esp,0x20
c0014bbe:	85 c0                	test   eax,eax
c0014bc0:	0f 85 83 06 00 00    	jne    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014bc6:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014bcd:	0f 85 76 06 00 00    	jne    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014bd3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014bd6:	85 c0                	test   eax,eax
c0014bd8:	0f 84 6b 06 00 00    	je     c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014bde:	31 d2                	xor    edx,edx
c0014be0:	51                   	push   ecx
c0014be1:	52                   	push   edx
c0014be2:	50                   	push   eax
c0014be3:	53                   	push   ebx
c0014be4:	e8 9f 6d ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014be9:	83 c4 10             	add    esp,0x10
c0014bec:	85 c0                	test   eax,eax
c0014bee:	0f 85 55 06 00 00    	jne    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014bf4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014bf7:	83 ec 0c             	sub    esp,0xc
c0014bfa:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014bfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c02:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014c06:	0f af c2             	imul   eax,edx
c0014c09:	50                   	push   eax
c0014c0a:	e8 c4 2e ff ff       	call   c0007ad3 <malloc>
c0014c0f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c11:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c1c:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014c20:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014c24:	0f af c2             	imul   eax,edx
c0014c27:	99                   	cdq    
c0014c28:	52                   	push   edx
c0014c29:	50                   	push   eax
c0014c2a:	53                   	push   ebx
c0014c2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c2e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014c31:	83 c4 20             	add    esp,0x20
c0014c34:	85 c0                	test   eax,eax
c0014c36:	0f 84 0d 06 00 00    	je     c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014c3c:	52                   	push   edx
c0014c3d:	31 d2                	xor    edx,edx
c0014c3f:	52                   	push   edx
c0014c40:	50                   	push   eax
c0014c41:	53                   	push   ebx
c0014c42:	e8 41 6d ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014c47:	83 c4 10             	add    esp,0x10
c0014c4a:	85 c0                	test   eax,eax
c0014c4c:	0f 85 f7 05 00 00    	jne    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014c52:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014c56:	83 ec 0c             	sub    esp,0xc
c0014c59:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014c5d:	0f af c2             	imul   eax,edx
c0014c60:	50                   	push   eax
c0014c61:	e8 6d 2e ff ff       	call   c0007ad3 <malloc>
c0014c66:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c68:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c73:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014c77:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014c7b:	0f af c2             	imul   eax,edx
c0014c7e:	99                   	cdq    
c0014c7f:	52                   	push   edx
c0014c80:	50                   	push   eax
c0014c81:	53                   	push   ebx
c0014c82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c85:	83 c4 20             	add    esp,0x20
c0014c88:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014c8e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c91:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014c95:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014c99:	73 78                	jae    c0014d13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014c9b:	c1 e7 05             	shl    edi,0x5
c0014c9e:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014ca2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014ca5:	75 63                	jne    c0014d0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014ca7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014caa:	31 d2                	xor    edx,edx
c0014cac:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014caf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cb3:	50                   	push   eax
c0014cb4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014cb7:	52                   	push   edx
c0014cb8:	50                   	push   eax
c0014cb9:	53                   	push   ebx
c0014cba:	e8 c9 6c ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014cbf:	83 c4 10             	add    esp,0x10
c0014cc2:	85 c0                	test   eax,eax
c0014cc4:	0f 85 7f 05 00 00    	jne    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014cca:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	31 d2                	xor    edx,edx
c0014cd6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014cda:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cdc:	01 c6                	add    esi,eax
c0014cde:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ce5:	50                   	push   eax
c0014ce6:	56                   	push   esi
c0014ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ceb:	52                   	push   edx
c0014cec:	50                   	push   eax
c0014ced:	53                   	push   ebx
c0014cee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cf1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cf4:	83 c4 1c             	add    esp,0x1c
c0014cf7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014cfa:	50                   	push   eax
c0014cfb:	6a 00                	push   0x0
c0014cfd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014d01:	56                   	push   esi
c0014d02:	e8 e9 b7 fe ff       	call   c00004f0 <memset>
c0014d07:	83 c4 10             	add    esp,0x10
c0014d0a:	66 ff 04 24          	inc    WORD PTR [esp]
c0014d0e:	e9 7b ff ff ff       	jmp    c0014c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014d13:	50                   	push   eax
c0014d14:	68 00 01 00 00       	push   0x100
c0014d19:	6a 00                	push   0x0
c0014d1b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014d1f:	50                   	push   eax
c0014d20:	e8 cb b7 fe ff       	call   c00004f0 <memset>
c0014d25:	83 c4 0c             	add    esp,0xc
c0014d28:	68 00 01 00 00       	push   0x100
c0014d2d:	6a 00                	push   0x0
c0014d2f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014d36:	50                   	push   eax
c0014d37:	e8 b4 b7 fe ff       	call   c00004f0 <memset>
c0014d3c:	83 c4 10             	add    esp,0x10
c0014d3f:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014d46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014d4d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014d5d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d65:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d71:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014d75:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014d7a:	0f 83 16 01 00 00    	jae    c0014e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014d80:	6b ff 28             	imul   edi,edi,0x28
c0014d83:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014d87:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014d8a:	51                   	push   ecx
c0014d8b:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014d8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014d93:	8b 07                	mov    eax,DWORD PTR [edi]
c0014d95:	6b d2 28             	imul   edx,edx,0x28
c0014d98:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014d9c:	31 d2                	xor    edx,edx
c0014d9e:	52                   	push   edx
c0014d9f:	50                   	push   eax
c0014da0:	53                   	push   ebx
c0014da1:	e8 e2 6b ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014da6:	83 c4 0c             	add    esp,0xc
c0014da9:	6a 20                	push   0x20
c0014dab:	6a 00                	push   0x0
c0014dad:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014db4:	51                   	push   ecx
c0014db5:	e8 36 b7 fe ff       	call   c00004f0 <memset>
c0014dba:	58                   	pop    eax
c0014dbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dbd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014dc1:	52                   	push   edx
c0014dc2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014dc9:	51                   	push   ecx
c0014dca:	6a 00                	push   0x0
c0014dcc:	6a 1f                	push   0x1f
c0014dce:	53                   	push   ebx
c0014dcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dd2:	83 c4 1c             	add    esp,0x1c
c0014dd5:	6a 09                	push   0x9
c0014dd7:	68 17 24 02 c0       	push   0xc0022417
c0014ddc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014de3:	51                   	push   ecx
c0014de4:	e8 97 b5 fe ff       	call   c0000380 <memcmp>
c0014de9:	83 c4 10             	add    esp,0x10
c0014dec:	85 c0                	test   eax,eax
c0014dee:	75 1a                	jne    c0014e0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014df3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014df6:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014dfa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014dfd:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014e04:	89 d0                	mov    eax,edx
c0014e06:	40                   	inc    eax
c0014e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e0a:	52                   	push   edx
c0014e0b:	6a 09                	push   0x9
c0014e0d:	68 21 24 02 c0       	push   0xc0022421
c0014e12:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e19:	50                   	push   eax
c0014e1a:	e8 61 b5 fe ff       	call   c0000380 <memcmp>
c0014e1f:	83 c4 10             	add    esp,0x10
c0014e22:	85 c0                	test   eax,eax
c0014e24:	75 1a                	jne    c0014e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014e26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014e29:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014e2c:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014e30:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014e33:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014e3a:	89 c8                	mov    eax,ecx
c0014e3c:	40                   	inc    eax
c0014e3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e40:	50                   	push   eax
c0014e41:	50                   	push   eax
c0014e42:	68 ed 23 02 c0       	push   0xc00223ed
c0014e47:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e4e:	50                   	push   eax
c0014e4f:	e8 2c b9 fe ff       	call   c0000780 <strcmp>
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	85 c0                	test   eax,eax
c0014e59:	75 0b                	jne    c0014e66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014e5b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014e5f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e66:	50                   	push   eax
c0014e67:	50                   	push   eax
c0014e68:	68 f5 23 02 c0       	push   0xc00223f5
c0014e6d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e74:	50                   	push   eax
c0014e75:	e8 06 b9 fe ff       	call   c0000780 <strcmp>
c0014e7a:	83 c4 10             	add    esp,0x10
c0014e7d:	85 c0                	test   eax,eax
c0014e7f:	75 0b                	jne    c0014e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014e81:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014e85:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014e88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e8c:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014e91:	e9 d7 fe ff ff       	jmp    c0014d6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014e96:	50                   	push   eax
c0014e97:	31 d2                	xor    edx,edx
c0014e99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e9d:	52                   	push   edx
c0014e9e:	50                   	push   eax
c0014e9f:	53                   	push   ebx
c0014ea0:	e8 e3 6a ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014ea5:	58                   	pop    eax
c0014ea6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014eaa:	e8 24 2c ff ff       	call   c0007ad3 <malloc>
c0014eaf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eb1:	31 d2                	xor    edx,edx
c0014eb3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014eb7:	58                   	pop    eax
c0014eb8:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014ebc:	56                   	push   esi
c0014ebd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec5:	52                   	push   edx
c0014ec6:	50                   	push   eax
c0014ec7:	53                   	push   ebx
c0014ec8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ecb:	83 c4 14             	add    esp,0x14
c0014ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ed2:	e8 fc 2b ff ff       	call   c0007ad3 <malloc>
c0014ed7:	31 d2                	xor    edx,edx
c0014ed9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014edd:	83 c4 0c             	add    esp,0xc
c0014ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee4:	52                   	push   edx
c0014ee5:	50                   	push   eax
c0014ee6:	53                   	push   ebx
c0014ee7:	e8 9c 6a ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014eec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eee:	31 d2                	xor    edx,edx
c0014ef0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ef3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ef7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014efb:	52                   	push   edx
c0014efc:	50                   	push   eax
c0014efd:	53                   	push   ebx
c0014efe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f01:	83 c4 20             	add    esp,0x20
c0014f04:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014f09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014f11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014f19:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014f1c:	0f 84 2b 03 00 00    	je     c001524d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014f22:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014f29:	31 d2                	xor    edx,edx
c0014f2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f2f:	c1 e8 03             	shr    eax,0x3
c0014f32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014f36:	51                   	push   ecx
c0014f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014f3f:	52                   	push   edx
c0014f40:	50                   	push   eax
c0014f41:	53                   	push   ebx
c0014f42:	e8 41 6a ff ff       	call   c000b988 <File::seek(unsigned long long)>
c0014f47:	5e                   	pop    esi
c0014f48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f4c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014f53:	e8 7b 2b ff ff       	call   c0007ad3 <malloc>
c0014f58:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f5a:	31 d2                	xor    edx,edx
c0014f5c:	89 c7                	mov    edi,eax
c0014f5e:	58                   	pop    eax
c0014f5f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014f63:	50                   	push   eax
c0014f64:	57                   	push   edi
c0014f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f69:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014f70:	52                   	push   edx
c0014f71:	50                   	push   eax
c0014f72:	53                   	push   ebx
c0014f73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f76:	83 c4 20             	add    esp,0x20
c0014f79:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014f81:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014f85:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014f89:	0f 8d a5 02 00 00    	jge    c0015234 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014f8f:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014f94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f98:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014f9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014f9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fa3:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014fa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fab:	c1 e8 08             	shr    eax,0x8
c0014fae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014fb2:	89 c2                	mov    edx,eax
c0014fb4:	c1 e2 04             	shl    edx,0x4
c0014fb7:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014fbb:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014fbe:	85 f6                	test   esi,esi
c0014fc0:	0f 85 cf 00 00 00    	jne    c0015095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014fc6:	83 ec 0c             	sub    esp,0xc
c0014fc9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd1:	03 02                	add    eax,DWORD PTR [edx]
c0014fd3:	50                   	push   eax
c0014fd4:	e8 63 f8 ff ff       	call   c001483c <Thr::getAddressOfKernelSymbol(char const*)>
c0014fd9:	83 c4 10             	add    esp,0x10
c0014fdc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014fe0:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014fe5:	85 c0                	test   eax,eax
c0014fe7:	89 c6                	mov    esi,eax
c0014fe9:	0f 85 a6 00 00 00    	jne    c0015095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014fef:	83 ec 0c             	sub    esp,0xc
c0014ff2:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffa:	03 02                	add    eax,DWORD PTR [edx]
c0014ffc:	50                   	push   eax
c0014ffd:	e8 b2 c4 ff ff       	call   c00114b4 <KeResolveCompatibilitySymbol(char*)>
c0015002:	83 c4 10             	add    esp,0x10
c0015005:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015009:	85 c0                	test   eax,eax
c001500b:	89 c6                	mov    esi,eax
c001500d:	0f 85 82 00 00 00    	jne    c0015095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015013:	50                   	push   eax
c0015014:	50                   	push   eax
c0015015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015019:	03 02                	add    eax,DWORD PTR [edx]
c001501b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001501f:	50                   	push   eax
c0015020:	68 2b 24 02 c0       	push   0xc002242b
c0015025:	e8 e0 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001502a:	58                   	pop    eax
c001502b:	5a                   	pop    edx
c001502c:	68 45 24 02 c0       	push   0xc0022445
c0015031:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015038:	51                   	push   ecx
c0015039:	e8 12 b6 fe ff       	call   c0000650 <strcpy>
c001503e:	59                   	pop    ecx
c001503f:	58                   	pop    eax
c0015040:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015044:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015048:	03 02                	add    eax,DWORD PTR [edx]
c001504a:	50                   	push   eax
c001504b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015052:	51                   	push   ecx
c0015053:	e8 18 b8 fe ff       	call   c0000870 <strcat>
c0015058:	58                   	pop    eax
c0015059:	5a                   	pop    edx
c001505a:	68 db 24 02 c0       	push   0xc00224db
c001505f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015066:	51                   	push   ecx
c0015067:	e8 04 b8 fe ff       	call   c0000870 <strcat>
c001506c:	83 c4 10             	add    esp,0x10
c001506f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015074:	0f 84 77 01 00 00    	je     c00151f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001507a:	83 ec 0c             	sub    esp,0xc
c001507d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015084:	51                   	push   ecx
c0015085:	e8 3f c2 ff ff       	call   c00112c9 <KePanic(char const*)>
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015091:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015095:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001509a:	83 f8 01             	cmp    eax,0x1
c001509d:	0f 85 9b 00 00 00    	jne    c001513e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00150a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00150a7:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00150ae:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00150b2:	01 d0                	add    eax,edx
c00150b4:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00150bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00150c0:	0f 94 c0             	sete   al
c00150c3:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00150cb:	0f 94 c1             	sete   cl
c00150ce:	09 c1                	or     ecx,eax
c00150d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00150d4:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00150d9:	0f b6 c9             	movzx  ecx,cl
c00150dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150de:	74 41                	je     c0015121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00150e0:	8d 14 06             	lea    edx,[esi+eax*1]
c00150e3:	85 c9                	test   ecx,ecx
c00150e5:	75 15                	jne    c00150fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00150e7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00150eb:	66 83 f8 0c          	cmp    ax,0xc
c00150ef:	76 05                	jbe    c00150f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00150f1:	b8 0c 00 00 00       	mov    eax,0xc
c00150f6:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00150fa:	76 37                	jbe    c0015133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00150fc:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015101:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015105:	0f 84 e6 00 00 00    	je     c00151f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001510b:	83 ec 0c             	sub    esp,0xc
c001510e:	68 5c 24 02 c0       	push   0xc002245c
c0015113:	e8 b1 c1 ff ff       	call   c00112c9 <KePanic(char const*)>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001511f:	eb 12                	jmp    c0015133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015121:	01 c2                	add    edx,eax
c0015123:	85 c9                	test   ecx,ecx
c0015125:	75 0c                	jne    c0015133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015127:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001512b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001512f:	77 02                	ja     c0015133 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015131:	01 f2                	add    edx,esi
c0015133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015137:	89 10                	mov    DWORD PTR [eax],edx
c0015139:	e9 ed 00 00 00       	jmp    c001522b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001513e:	83 f8 02             	cmp    eax,0x2
c0015141:	0f 85 81 00 00 00    	jne    c00151c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015147:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001514e:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015152:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015156:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001515e:	74 21                	je     c0015181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015160:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015168:	74 17                	je     c0015181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001516a:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001516e:	ba 0a 00 00 00       	mov    edx,0xa
c0015173:	83 f9 0e             	cmp    ecx,0xe
c0015176:	77 03                	ja     c001517b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015178:	8d 51 fc             	lea    edx,[ecx-0x4]
c001517b:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001517f:	76 1f                	jbe    c00151a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015181:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015186:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001518a:	74 65                	je     c00151f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001518c:	83 ec 0c             	sub    esp,0xc
c001518f:	68 78 24 02 c0       	push   0xc0022478
c0015194:	e8 30 c1 ff ff       	call   c00112c9 <KePanic(char const*)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151a0:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00151a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00151a7:	74 15                	je     c00151be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00151a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00151ad:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00151b4:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00151b8:	01 d1                	add    ecx,edx
c00151ba:	01 ce                	add    esi,ecx
c00151bc:	eb 06                	jmp    c00151c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00151be:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00151c2:	01 d6                	add    esi,edx
c00151c4:	89 30                	mov    DWORD PTR [eax],esi
c00151c6:	eb 63                	jmp    c001522b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00151c8:	56                   	push   esi
c00151c9:	56                   	push   esi
c00151ca:	50                   	push   eax
c00151cb:	68 94 24 02 c0       	push   0xc0022494
c00151d0:	e8 35 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00151dd:	74 12                	je     c00151f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00151df:	83 ec 0c             	sub    esp,0xc
c00151e2:	68 9f 24 02 c0       	push   0xc002249f
c00151e7:	e8 dd c0 ff ff       	call   c00112c9 <KePanic(char const*)>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	eb 3a                	jmp    c001522b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00151f1:	83 ec 0c             	sub    esp,0xc
c00151f4:	53                   	push   ebx
c00151f5:	e8 2e 67 ff ff       	call   c000b928 <File::close()>
c00151fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015202:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015205:	e8 d9 28 ff ff       	call   c0007ae3 <free>
c001520a:	59                   	pop    ecx
c001520b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001520f:	e8 cf 28 ff ff       	call   c0007ae3 <free>
c0015214:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015217:	e8 c7 28 ff ff       	call   c0007ae3 <free>
c001521c:	5b                   	pop    ebx
c001521d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015221:	e8 bd 28 ff ff       	call   c0007ae3 <free>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	eb 1e                	jmp    c0015249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001522b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001522f:	e9 4d fd ff ff       	jmp    c0014f81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	57                   	push   edi
c0015238:	e8 a6 28 ff ff       	call   c0007ae3 <free>
c001523d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015241:	83 c4 10             	add    esp,0x10
c0015244:	e9 cc fc ff ff       	jmp    c0014f15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015249:	31 c0                	xor    eax,eax
c001524b:	eb 32                	jmp    c001527f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001524d:	83 ec 0c             	sub    esp,0xc
c0015250:	53                   	push   ebx
c0015251:	e8 d2 66 ff ff       	call   c000b928 <File::close()>
c0015256:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001525b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001525e:	58                   	pop    eax
c001525f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015263:	e8 7b 28 ff ff       	call   c0007ae3 <free>
c0015268:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001526b:	e8 73 28 ff ff       	call   c0007ae3 <free>
c0015270:	5a                   	pop    edx
c0015271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015275:	e8 69 28 ff ff       	call   c0007ae3 <free>
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	b0 01                	mov    al,0x1
c001527f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015285:	5b                   	pop    ebx
c0015286:	5e                   	pop    esi
c0015287:	5f                   	pop    edi
c0015288:	5d                   	pop    ebp
c0015289:	c3                   	ret    

c001528a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001528a:	56                   	push   esi
c001528b:	31 d2                	xor    edx,edx
c001528d:	53                   	push   ebx
c001528e:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015294:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015298:	39 d3                	cmp    ebx,edx
c001529a:	7e 1b                	jle    c00152b7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001529c:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c00152a3:	39 c8                	cmp    eax,ecx
c00152a5:	77 0d                	ja     c00152b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00152a7:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00152ae:	01 c6                	add    esi,eax
c00152b0:	39 ce                	cmp    esi,ecx
c00152b2:	77 05                	ja     c00152b9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00152b4:	42                   	inc    edx
c00152b5:	eb e1                	jmp    c0015298 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00152b7:	31 c0                	xor    eax,eax
c00152b9:	5b                   	pop    ebx
c00152ba:	5e                   	pop    esi
c00152bb:	c3                   	ret    

c00152bc <Thr::getDriverNameFromAddress(unsigned long)>:
c00152bc:	53                   	push   ebx
c00152bd:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00152c3:	31 c0                	xor    eax,eax
c00152c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00152c9:	39 c3                	cmp    ebx,eax
c00152cb:	7e 22                	jle    c00152ef <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00152cd:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00152d4:	39 ca                	cmp    edx,ecx
c00152d6:	77 14                	ja     c00152ec <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00152d8:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00152df:	39 ca                	cmp    edx,ecx
c00152e1:	76 09                	jbe    c00152ec <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00152e3:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00152ea:	eb 05                	jmp    c00152f1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00152ec:	40                   	inc    eax
c00152ed:	eb da                	jmp    c00152c9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00152ef:	31 c0                	xor    eax,eax
c00152f1:	5b                   	pop    ebx
c00152f2:	c3                   	ret    

c00152f3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00152f3:	53                   	push   ebx
c00152f4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00152f8:	53                   	push   ebx
c00152f9:	e8 8c ff ff ff       	call   c001528a <Thr::getDriverBaseFromAddress(unsigned long)>
c00152fe:	5a                   	pop    edx
c00152ff:	31 d2                	xor    edx,edx
c0015301:	85 c0                	test   eax,eax
c0015303:	74 04                	je     c0015309 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015305:	89 da                	mov    edx,ebx
c0015307:	29 c2                	sub    edx,eax
c0015309:	5b                   	pop    ebx
c001530a:	89 d0                	mov    eax,edx
c001530c:	c3                   	ret    

c001530d <Thr::loadDLL(char const*, bool)>:
c001530d:	55                   	push   ebp
c001530e:	57                   	push   edi
c001530f:	56                   	push   esi
c0015310:	53                   	push   ebx
c0015311:	81 ec 34 01 00 00    	sub    esp,0x134
c0015317:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001531e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015325:	56                   	push   esi
c0015326:	68 b7 24 02 c0       	push   0xc00224b7
c001532b:	e8 da 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015330:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015337:	e8 97 27 ff ff       	call   c0007ad3 <malloc>
c001533c:	83 c4 0c             	add    esp,0xc
c001533f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015345:	56                   	push   esi
c0015346:	50                   	push   eax
c0015347:	89 c3                	mov    ebx,eax
c0015349:	e8 5e 65 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	85 db                	test   ebx,ebx
c0015353:	75 3c                	jne    c0015391 <Thr::loadDLL(char const*, bool)+0x84>
c0015355:	89 e8                	mov    eax,ebp
c0015357:	84 c0                	test   al,al
c0015359:	0f 84 e1 01 00 00    	je     c0015540 <Thr::loadDLL(char const*, bool)+0x233>
c001535f:	50                   	push   eax
c0015360:	50                   	push   eax
c0015361:	68 c8 24 02 c0       	push   0xc00224c8
c0015366:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001536a:	57                   	push   edi
c001536b:	e8 e0 b2 fe ff       	call   c0000650 <strcpy>
c0015370:	58                   	pop    eax
c0015371:	5a                   	pop    edx
c0015372:	56                   	push   esi
c0015373:	57                   	push   edi
c0015374:	e8 f7 b4 fe ff       	call   c0000870 <strcat>
c0015379:	59                   	pop    ecx
c001537a:	58                   	pop    eax
c001537b:	68 db 24 02 c0       	push   0xc00224db
c0015380:	57                   	push   edi
c0015381:	e8 ea b4 fe ff       	call   c0000870 <strcat>
c0015386:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015389:	e8 3b bf ff ff       	call   c00112c9 <KePanic(char const*)>
c001538e:	83 c4 10             	add    esp,0x10
c0015391:	50                   	push   eax
c0015392:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015396:	50                   	push   eax
c0015397:	8d 44 24 20          	lea    eax,[esp+0x20]
c001539b:	50                   	push   eax
c001539c:	53                   	push   ebx
c001539d:	e8 2a 68 ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	85 db                	test   ebx,ebx
c00153a7:	74 0c                	je     c00153b5 <Thr::loadDLL(char const*, bool)+0xa8>
c00153a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153ab:	83 ec 0c             	sub    esp,0xc
c00153ae:	53                   	push   ebx
c00153af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00153ba:	75 0a                	jne    c00153c6 <Thr::loadDLL(char const*, bool)+0xb9>
c00153bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153c0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00153c4:	75 3e                	jne    c0015404 <Thr::loadDLL(char const*, bool)+0xf7>
c00153c6:	89 e8                	mov    eax,ebp
c00153c8:	31 db                	xor    ebx,ebx
c00153ca:	84 c0                	test   al,al
c00153cc:	0f 84 6e 01 00 00    	je     c0015540 <Thr::loadDLL(char const*, bool)+0x233>
c00153d2:	50                   	push   eax
c00153d3:	50                   	push   eax
c00153d4:	68 c8 24 02 c0       	push   0xc00224c8
c00153d9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00153dd:	53                   	push   ebx
c00153de:	e8 6d b2 fe ff       	call   c0000650 <strcpy>
c00153e3:	58                   	pop    eax
c00153e4:	5a                   	pop    edx
c00153e5:	56                   	push   esi
c00153e6:	53                   	push   ebx
c00153e7:	e8 84 b4 fe ff       	call   c0000870 <strcat>
c00153ec:	59                   	pop    ecx
c00153ed:	5f                   	pop    edi
c00153ee:	68 db 24 02 c0       	push   0xc00224db
c00153f3:	53                   	push   ebx
c00153f4:	e8 77 b4 fe ff       	call   c0000870 <strcat>
c00153f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153fc:	e8 c8 be ff ff       	call   c00112c9 <KePanic(char const*)>
c0015401:	83 c4 10             	add    esp,0x10
c0015404:	53                   	push   ebx
c0015405:	6a 03                	push   0x3
c0015407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001540b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001540f:	05 ff 0f 00 00       	add    eax,0xfff
c0015414:	83 d2 00             	adc    edx,0x0
c0015417:	0f ac d0 0c          	shrd   eax,edx,0xc
c001541b:	50                   	push   eax
c001541c:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015422:	e8 df 49 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015427:	89 c3                	mov    ebx,eax
c0015429:	58                   	pop    eax
c001542a:	5a                   	pop    edx
c001542b:	53                   	push   ebx
c001542c:	68 b2 0a 02 c0       	push   0xc0020ab2
c0015431:	e8 d4 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015436:	89 34 24             	mov    DWORD PTR [esp],esi
c0015439:	e8 42 b1 fe ff       	call   c0000580 <strlen>
c001543e:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c0015444:	40                   	inc    eax
c0015445:	89 04 24             	mov    DWORD PTR [esp],eax
c0015448:	e8 86 26 ff ff       	call   c0007ad3 <malloc>
c001544d:	59                   	pop    ecx
c001544e:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c0015455:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001545a:	5f                   	pop    edi
c001545b:	56                   	push   esi
c001545c:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c0015463:	e8 e8 b1 fe ff       	call   c0000650 <strcpy>
c0015468:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001546d:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015474:	8d 50 01             	lea    edx,[eax+0x1]
c0015477:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c001547d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015481:	83 c4 0c             	add    esp,0xc
c0015484:	6a 01                	push   0x1
c0015486:	53                   	push   ebx
c0015487:	56                   	push   esi
c0015488:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c001548f:	e8 b5 f6 ff ff       	call   c0014b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015494:	83 c4 10             	add    esp,0x10
c0015497:	89 c7                	mov    edi,eax
c0015499:	89 f8                	mov    eax,edi
c001549b:	83 f0 01             	xor    eax,0x1
c001549e:	84 c0                	test   al,al
c00154a0:	74 18                	je     c00154ba <Thr::loadDLL(char const*, bool)+0x1ad>
c00154a2:	89 e8                	mov    eax,ebp
c00154a4:	84 c0                	test   al,al
c00154a6:	74 12                	je     c00154ba <Thr::loadDLL(char const*, bool)+0x1ad>
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	68 dd 24 02 c0       	push   0xc00224dd
c00154b0:	e8 14 be ff ff       	call   c00112c9 <KePanic(char const*)>
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	eb 06                	jmp    c00154c0 <Thr::loadDLL(char const*, bool)+0x1b3>
c00154ba:	89 f8                	mov    eax,edi
c00154bc:	84 c0                	test   al,al
c00154be:	75 10                	jne    c00154d0 <Thr::loadDLL(char const*, bool)+0x1c3>
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 fc 24 02 c0       	push   0xc00224fc
c00154c8:	e8 fc bd ff ff       	call   c00112c9 <KePanic(char const*)>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	31 f6                	xor    esi,esi
c00154d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154da:	05 ff 0f 00 00       	add    eax,0xfff
c00154df:	83 d2 00             	adc    edx,0x0
c00154e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00154e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00154ea:	c1 ea 0c             	shr    edx,0xc
c00154ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154f1:	ba 00 00 00 00       	mov    edx,0x0
c00154f6:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00154fa:	89 d0                	mov    eax,edx
c00154fc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015500:	73 32                	jae    c0015534 <Thr::loadDLL(char const*, bool)+0x227>
c0015502:	50                   	push   eax
c0015503:	50                   	push   eax
c0015504:	89 f0                	mov    eax,esi
c0015506:	c1 e0 0c             	shl    eax,0xc
c0015509:	01 d8                	add    eax,ebx
c001550b:	50                   	push   eax
c001550c:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015512:	e8 d3 43 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	8b 00                	mov    eax,DWORD PTR [eax]
c001551c:	a8 60                	test   al,0x60
c001551e:	75 11                	jne    c0015531 <Thr::loadDLL(char const*, bool)+0x224>
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015528:	50                   	push   eax
c0015529:	e8 4b 28 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	46                   	inc    esi
c0015532:	eb 9e                	jmp    c00154d2 <Thr::loadDLL(char const*, bool)+0x1c5>
c0015534:	89 f8                	mov    eax,edi
c0015536:	84 c0                	test   al,al
c0015538:	b8 00 00 00 00       	mov    eax,0x0
c001553d:	0f 44 d8             	cmove  ebx,eax
c0015540:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015546:	89 d8                	mov    eax,ebx
c0015548:	5b                   	pop    ebx
c0015549:	5e                   	pop    esi
c001554a:	5f                   	pop    edi
c001554b:	5d                   	pop    ebp
c001554c:	c3                   	ret    

c001554d <Thr::executeDLL(unsigned long, void*)>:
c001554d:	56                   	push   esi
c001554e:	53                   	push   ebx
c001554f:	52                   	push   edx
c0015550:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015554:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015558:	85 db                	test   ebx,ebx
c001555a:	75 10                	jne    c001556c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001555c:	83 ec 0c             	sub    esp,0xc
c001555f:	68 18 25 02 c0       	push   0xc0022518
c0015564:	e8 60 bd ff ff       	call   c00112c9 <KePanic(char const*)>
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	50                   	push   eax
c001556d:	50                   	push   eax
c001556e:	53                   	push   ebx
c001556f:	68 42 25 02 c0       	push   0xc0022542
c0015574:	e8 91 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015579:	89 d8                	mov    eax,ebx
c001557b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001557f:	83 c4 14             	add    esp,0x14
c0015582:	5b                   	pop    ebx
c0015583:	5e                   	pop    esi
c0015584:	ff e0                	jmp    eax
c0015586:	66 90                	xchg   ax,ax

c0015588 <userModeEntryPoint(void*)>:
c0015588:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001558d:	83 e8 01             	sub    eax,0x1
c0015590:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015595:	75 01                	jne    c0015598 <userModeEntryPoint(void*)+0x10>
c0015597:	fb                   	sti    
c0015598:	fb                   	sti    
c0015599:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001559e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155a1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00155a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155ab:	e9 8f ac fe ff       	jmp    c000023f <goToUsermode>

c00155b0 <changeTSS>:
c00155b0:	83 ec 14             	sub    esp,0x14
c00155b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00155bb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00155c0:	c1 e2 15             	shl    edx,0x15
c00155c3:	29 d0                	sub    eax,edx
c00155c5:	50                   	push   eax
c00155c6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00155cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155d1:	05 7c 11 00 00       	add    eax,0x117c
c00155d6:	50                   	push   eax
c00155d7:	e8 60 39 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00155dc:	83 c4 1c             	add    esp,0x1c
c00155df:	c3                   	ret    

c00155e0 <switchToThread(ThreadControlBlock*)>:
c00155e0:	57                   	push   edi
c00155e1:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00155e7:	56                   	push   esi
c00155e8:	53                   	push   ebx
c00155e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155ed:	85 c9                	test   ecx,ecx
c00155ef:	0f 85 8b 00 00 00    	jne    c0015680 <switchToThread(ThreadControlBlock*)+0xa0>
c00155f5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00155f9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00155ff:	74 7b                	je     c001567c <switchToThread(ThreadControlBlock*)+0x9c>
c0015601:	b8 00 04 00 00       	mov    eax,0x400
c0015606:	29 d0                	sub    eax,edx
c0015608:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001560b:	d1 f8                	sar    eax,1
c001560d:	01 d0                	add    eax,edx
c001560f:	90                   	nop
c0015610:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015613:	e8 04 28 00 00       	call   c0017e1c <HalQueryPerformanceCounter()>
c0015618:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c001561d:	89 c6                	mov    esi,eax
c001561f:	89 d7                	mov    edi,edx
c0015621:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015627:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c001562c:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c0015632:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015638:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c001563e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015644:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c001564a:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015650:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015653:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015656:	01 c6                	add    esi,eax
c0015658:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001565b:	11 d7                	adc    edi,edx
c001565d:	83 ec 0c             	sub    esp,0xc
c0015660:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015663:	53                   	push   ebx
c0015664:	e8 0e ac fe ff       	call   c0000277 <switchToThreadASM>
c0015669:	0f 20 c0             	mov    eax,cr0
c001566c:	83 c8 08             	or     eax,0x8
c001566f:	0f 22 c0             	mov    cr0,eax
c0015672:	83 c4 10             	add    esp,0x10
c0015675:	5b                   	pop    ebx
c0015676:	5e                   	pop    esi
c0015677:	5f                   	pop    edi
c0015678:	c3                   	ret    
c0015679:	8d 76 00             	lea    esi,[esi+0x0]
c001567c:	31 c0                	xor    eax,eax
c001567e:	eb 90                	jmp    c0015610 <switchToThread(ThreadControlBlock*)+0x30>
c0015680:	5b                   	pop    ebx
c0015681:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001568b:	5e                   	pop    esi
c001568c:	5f                   	pop    edi
c001568d:	c3                   	ret    
c001568e:	66 90                	xchg   ax,ax

c0015690 <Process::addArgs(char**)>:
c0015690:	57                   	push   edi
c0015691:	56                   	push   esi
c0015692:	53                   	push   ebx
c0015693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015697:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001569b:	85 f6                	test   esi,esi
c001569d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00156a7:	74 4f                	je     c00156f8 <Process::addArgs(char**)+0x68>
c00156a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00156ab:	85 c0                	test   eax,eax
c00156ad:	74 49                	je     c00156f8 <Process::addArgs(char**)+0x68>
c00156af:	31 db                	xor    ebx,ebx
c00156b1:	8d 76 00             	lea    esi,[esi+0x0]
c00156b4:	83 ec 0c             	sub    esp,0xc
c00156b7:	50                   	push   eax
c00156b8:	e8 c3 ae fe ff       	call   c0000580 <strlen>
c00156bd:	83 c0 01             	add    eax,0x1
c00156c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00156c3:	e8 0b 24 ff ff       	call   c0007ad3 <malloc>
c00156c8:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00156cf:	5a                   	pop    edx
c00156d0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00156d3:	83 c3 01             	add    ebx,0x1
c00156d6:	59                   	pop    ecx
c00156d7:	52                   	push   edx
c00156d8:	50                   	push   eax
c00156d9:	e8 72 af fe ff       	call   c0000650 <strcpy>
c00156de:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	83 c1 01             	add    ecx,0x1
c00156ea:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00156f0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00156f3:	85 c0                	test   eax,eax
c00156f5:	75 bd                	jne    c00156b4 <Process::addArgs(char**)+0x24>
c00156f7:	90                   	nop
c00156f8:	5b                   	pop    ebx
c00156f9:	5e                   	pop    esi
c00156fa:	5f                   	pop    edi
c00156fb:	c3                   	ret    

c00156fc <Process::Process(char const*, Process*, char**)>:
c00156fc:	56                   	push   esi
c00156fd:	53                   	push   ebx
c00156fe:	83 ec 14             	sub    esp,0x14
c0015701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015705:	05 0c 02 00 00       	add    eax,0x20c
c001570a:	bb 07 00 00 00       	mov    ebx,0x7
c001570f:	89 c6                	mov    esi,eax
c0015711:	8d 76 00             	lea    esi,[esi+0x0]
c0015714:	85 db                	test   ebx,ebx
c0015716:	78 14                	js     c001572c <Process::Process(char const*, Process*, char**)+0x30>
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	56                   	push   esi
c001571c:	e8 27 a6 00 00       	call   c001fd48 <ThreadControlBlock::ThreadControlBlock()>
c0015721:	83 c4 10             	add    esp,0x10
c0015724:	83 c6 5f             	add    esi,0x5f
c0015727:	83 eb 01             	sub    ebx,0x1
c001572a:	eb e8                	jmp    c0015714 <Process::Process(char const*, Process*, char**)+0x18>
c001572c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015730:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001573b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015742:	83 ec 0c             	sub    esp,0xc
c0015745:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015749:	e8 70 b9 ff ff       	call   c00110be <KeNewProcessEnv(Process*)>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	89 c2                	mov    edx,eax
c0015753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015757:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001575d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015761:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001576a:	a1 60 37 02 c0       	mov    eax,ds:0xc0023760
c001576f:	8d 50 01             	lea    edx,[eax+0x1]
c0015772:	89 15 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,edx
c0015778:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001577c:	89 02                	mov    DWORD PTR [edx],eax
c001577e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015786:	83 ec 0c             	sub    esp,0xc
c0015789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001578d:	e8 41 23 ff ff       	call   c0007ad3 <malloc>
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	89 c3                	mov    ebx,eax
c0015797:	83 ec 08             	sub    esp,0x8
c001579a:	6a 00                	push   0x0
c001579c:	53                   	push   ebx
c001579d:	e8 b0 48 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157a9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00157af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157b3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157c5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00157cb:	e8 12 bf ff ff       	call   c00116e2 <KeInitSignals()>
c00157d0:	89 c2                	mov    edx,eax
c00157d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157d6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00157dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157e6:	85 c0                	test   eax,eax
c00157e8:	74 42                	je     c001582c <Process::Process(char const*, Process*, char**)+0x130>
c00157ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015808:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001580e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015818:	05 0c 01 00 00       	add    eax,0x10c
c001581d:	83 ec 08             	sub    esp,0x8
c0015820:	52                   	push   edx
c0015821:	50                   	push   eax
c0015822:	e8 29 ae fe ff       	call   c0000650 <strcpy>
c0015827:	83 c4 10             	add    esp,0x10
c001582a:	eb 64                	jmp    c0015890 <Process::Process(char const*, Process*, char**)+0x194>
c001582c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015834:	83 ec 0c             	sub    esp,0xc
c0015837:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001583b:	e8 93 22 ff ff       	call   c0007ad3 <malloc>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	89 c3                	mov    ebx,eax
c0015845:	83 ec 08             	sub    esp,0x8
c0015848:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001584c:	53                   	push   ebx
c001584d:	e8 1a 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015859:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001585f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015863:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015869:	83 ec 0c             	sub    esp,0xc
c001586c:	50                   	push   eax
c001586d:	e8 a8 2c ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015872:	83 c4 10             	add    esp,0x10
c0015875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015879:	05 0c 01 00 00       	add    eax,0x10c
c001587e:	83 ec 08             	sub    esp,0x8
c0015881:	68 61 25 02 c0       	push   0xc0022561
c0015886:	50                   	push   eax
c0015887:	e8 c4 ad fe ff       	call   c0000650 <strcpy>
c001588c:	83 c4 10             	add    esp,0x10
c001588f:	90                   	nop
c0015890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015894:	83 c0 0c             	add    eax,0xc
c0015897:	83 ec 08             	sub    esp,0x8
c001589a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001589e:	50                   	push   eax
c001589f:	e8 ac ad fe ff       	call   c0000650 <strcpy>
c00158a4:	83 c4 10             	add    esp,0x10
c00158a7:	83 ec 08             	sub    esp,0x8
c00158aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00158ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158b2:	e8 d9 fd ff ff       	call   c0015690 <Process::addArgs(char**)>
c00158b7:	83 c4 10             	add    esp,0x10
c00158ba:	83 ec 08             	sub    esp,0x8
c00158bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158c5:	e8 40 ed ff ff       	call   c001460a <Thr::loadProgramIntoMemory(Process*, char const*)>
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00158d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00158d5:	83 f0 01             	xor    eax,0x1
c00158d8:	88 c2                	mov    dl,al
c00158da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158de:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00158e4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00158e9:	83 ec 04             	sub    esp,0x4
c00158ec:	50                   	push   eax
c00158ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158f1:	68 b8 25 02 c0       	push   0xc00225b8
c00158f6:	e8 0f 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00158fb:	83 c4 10             	add    esp,0x10
c00158fe:	90                   	nop
c00158ff:	83 c4 14             	add    esp,0x14
c0015902:	5b                   	pop    ebx
c0015903:	5e                   	pop    esi
c0015904:	c3                   	ret    
c0015905:	90                   	nop
c0015906:	66 90                	xchg   ax,ax

c0015908 <Process::Process(bool, char const*, Process*, char**)>:
c0015908:	56                   	push   esi
c0015909:	53                   	push   ebx
c001590a:	83 ec 24             	sub    esp,0x24
c001590d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015911:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015919:	05 0c 02 00 00       	add    eax,0x20c
c001591e:	bb 07 00 00 00       	mov    ebx,0x7
c0015923:	89 c6                	mov    esi,eax
c0015925:	8d 76 00             	lea    esi,[esi+0x0]
c0015928:	85 db                	test   ebx,ebx
c001592a:	78 14                	js     c0015940 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001592c:	83 ec 0c             	sub    esp,0xc
c001592f:	56                   	push   esi
c0015930:	e8 13 a4 00 00       	call   c001fd48 <ThreadControlBlock::ThreadControlBlock()>
c0015935:	83 c4 10             	add    esp,0x10
c0015938:	83 c6 5f             	add    esi,0x5f
c001593b:	83 eb 01             	sub    ebx,0x1
c001593e:	eb e8                	jmp    c0015928 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015940:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015944:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001594b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001594f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015956:	83 ec 0c             	sub    esp,0xc
c0015959:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001595d:	e8 5c b7 ff ff       	call   c00110be <KeNewProcessEnv(Process*)>
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	89 c2                	mov    edx,eax
c0015967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001596b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015975:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001597e:	a1 60 37 02 c0       	mov    eax,ds:0xc0023760
c0015983:	8d 50 01             	lea    edx,[eax+0x1]
c0015986:	89 15 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,edx
c001598c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015990:	89 02                	mov    DWORD PTR [edx],eax
c0015992:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001599a:	83 ec 0c             	sub    esp,0xc
c001599d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00159a1:	e8 2d 21 ff ff       	call   c0007ad3 <malloc>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	89 c3                	mov    ebx,eax
c00159ab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00159b0:	83 ec 08             	sub    esp,0x8
c00159b3:	50                   	push   eax
c00159b4:	53                   	push   ebx
c00159b5:	e8 98 46 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00159ba:	83 c4 10             	add    esp,0x10
c00159bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159c1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00159c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159cb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00159d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159d9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00159dd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00159e3:	e8 fa bc ff ff       	call   c00116e2 <KeInitSignals()>
c00159e8:	89 c2                	mov    edx,eax
c00159ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159ee:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00159f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159fe:	85 c0                	test   eax,eax
c0015a00:	74 42                	je     c0015a44 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015a02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a06:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a0c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a16:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015a1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a26:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015a2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a30:	05 0c 01 00 00       	add    eax,0x10c
c0015a35:	83 ec 08             	sub    esp,0x8
c0015a38:	52                   	push   edx
c0015a39:	50                   	push   eax
c0015a3a:	e8 11 ac fe ff       	call   c0000650 <strcpy>
c0015a3f:	83 c4 10             	add    esp,0x10
c0015a42:	eb 64                	jmp    c0015aa8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015a44:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015a53:	e8 7b 20 ff ff       	call   c0007ad3 <malloc>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	89 c3                	mov    ebx,eax
c0015a5d:	83 ec 08             	sub    esp,0x8
c0015a60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a64:	53                   	push   ebx
c0015a65:	e8 02 32 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a71:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015a77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a81:	83 ec 0c             	sub    esp,0xc
c0015a84:	50                   	push   eax
c0015a85:	e8 90 2a ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a91:	05 0c 01 00 00       	add    eax,0x10c
c0015a96:	83 ec 08             	sub    esp,0x8
c0015a99:	68 61 25 02 c0       	push   0xc0022561
c0015a9e:	50                   	push   eax
c0015a9f:	e8 ac ab fe ff       	call   c0000650 <strcpy>
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	90                   	nop
c0015aa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015aac:	83 c0 0c             	add    eax,0xc
c0015aaf:	83 ec 08             	sub    esp,0x8
c0015ab2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ab6:	50                   	push   eax
c0015ab7:	e8 94 ab fe ff       	call   c0000650 <strcpy>
c0015abc:	83 c4 10             	add    esp,0x10
c0015abf:	83 ec 08             	sub    esp,0x8
c0015ac2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ac6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015aca:	e8 c1 fb ff ff       	call   c0015690 <Process::addArgs(char**)>
c0015acf:	83 c4 10             	add    esp,0x10
c0015ad2:	90                   	nop
c0015ad3:	83 c4 24             	add    esp,0x24
c0015ad6:	5b                   	pop    ebx
c0015ad7:	5e                   	pop    esi
c0015ad8:	c3                   	ret    
c0015ad9:	8d 76 00             	lea    esi,[esi+0x0]

c0015adc <taskStartupFunction>:
c0015adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ae4:	c3                   	ret    
c0015ae5:	90                   	nop
c0015ae6:	66 90                	xchg   ax,ax

c0015ae8 <Semaphore::Semaphore(int)>:
c0015ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015af0:	89 10                	mov    DWORD PTR [eax],edx
c0015af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015af6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015afd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015b13:	90                   	nop
c0015b14:	c3                   	ret    
c0015b15:	90                   	nop
c0015b16:	66 90                	xchg   ax,ax

c0015b18 <Mutex::Mutex()>:
c0015b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b1c:	6a 01                	push   0x1
c0015b1e:	50                   	push   eax
c0015b1f:	e8 c4 ff ff ff       	call   c0015ae8 <Semaphore::Semaphore(int)>
c0015b24:	83 c4 08             	add    esp,0x8
c0015b27:	90                   	nop
c0015b28:	c3                   	ret    
c0015b29:	90                   	nop
c0015b2a:	66 90                	xchg   ax,ax

c0015b2c <Process::createThread(void (*)(void*), void*, int)>:
c0015b2c:	57                   	push   edi
c0015b2d:	31 c9                	xor    ecx,ecx
c0015b2f:	56                   	push   esi
c0015b30:	53                   	push   ebx
c0015b31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b35:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015b3c:	89 f2                	mov    edx,esi
c0015b3e:	66 90                	xchg   ax,ax
c0015b40:	0f b7 c2             	movzx  eax,dx
c0015b43:	80 e2 01             	and    dl,0x1
c0015b46:	74 14                	je     c0015b5c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015b48:	d1 f8                	sar    eax,1
c0015b4a:	83 c1 01             	add    ecx,0x1
c0015b4d:	83 f9 10             	cmp    ecx,0x10
c0015b50:	89 c2                	mov    edx,eax
c0015b52:	75 ec                	jne    c0015b40 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015b54:	31 db                	xor    ebx,ebx
c0015b56:	89 d8                	mov    eax,ebx
c0015b58:	5b                   	pop    ebx
c0015b59:	5e                   	pop    esi
c0015b5a:	5f                   	pop    edi
c0015b5b:	c3                   	ret    
c0015b5c:	b8 01 00 00 00       	mov    eax,0x1
c0015b61:	d3 e0                	shl    eax,cl
c0015b63:	09 c6                	or     esi,eax
c0015b65:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015b6c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015b6f:	c1 e0 05             	shl    eax,0x5
c0015b72:	29 c8                	sub    eax,ecx
c0015b74:	01 d8                	add    eax,ebx
c0015b76:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015b7d:	75 0d                	jne    c0015b8c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015b7f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015b89:	8d 76 00             	lea    esi,[esi+0x0]
c0015b8c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b92:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015b95:	83 ec 0c             	sub    esp,0xc
c0015b98:	c1 e6 05             	shl    esi,0x5
c0015b9b:	29 ce                	sub    esi,ecx
c0015b9d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ba0:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015ba3:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ba9:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015baf:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015bb5:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015bbc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015bc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015bc6:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015bcc:	89 ca                	mov    edx,ecx
c0015bce:	f7 da                	neg    edx
c0015bd0:	c1 e2 15             	shl    edx,0x15
c0015bd3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015bd9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015bdf:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015be3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015bed:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015bf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bf7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015bfd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015c07:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015c11:	68 00 01 00 00       	push   0x100
c0015c16:	e8 b8 1e ff ff       	call   c0007ad3 <malloc>
c0015c1b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015c1e:	58                   	pop    eax
c0015c1f:	5a                   	pop    edx
c0015c20:	53                   	push   ebx
c0015c21:	68 e4 96 02 c0       	push   0xc00296e4
c0015c26:	e8 b5 9e 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c2b:	83 c4 10             	add    esp,0x10
c0015c2e:	89 d8                	mov    eax,ebx
c0015c30:	5b                   	pop    ebx
c0015c31:	5e                   	pop    esi
c0015c32:	5f                   	pop    edi
c0015c33:	c3                   	ret    

c0015c34 <Process::createUserThread()>:
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	68 80 00 00 00       	push   0x80
c0015c3c:	6a 00                	push   0x0
c0015c3e:	68 88 55 01 c0       	push   0xc0015588
c0015c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c47:	50                   	push   eax
c0015c48:	e8 df fe ff ff       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c0015c4d:	83 c4 1c             	add    esp,0x1c
c0015c50:	c3                   	ret    
c0015c51:	8d 76 00             	lea    esi,[esi+0x0]

c0015c54 <setupMultitasking(void (*)())>:
c0015c54:	56                   	push   esi
c0015c55:	53                   	push   ebx
c0015c56:	83 ec 04             	sub    esp,0x4
c0015c59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c5d:	eb 11                	jmp    c0015c70 <setupMultitasking(void (*)())+0x1c>
c0015c5f:	90                   	nop
c0015c60:	83 ec 0c             	sub    esp,0xc
c0015c63:	68 e4 96 02 c0       	push   0xc00296e4
c0015c68:	e8 b7 9d 00 00       	call   c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c6d:	83 c4 10             	add    esp,0x10
c0015c70:	83 ec 0c             	sub    esp,0xc
c0015c73:	68 e4 96 02 c0       	push   0xc00296e4
c0015c78:	e8 83 9d 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c7d:	83 c4 10             	add    esp,0x10
c0015c80:	84 c0                	test   al,al
c0015c82:	74 dc                	je     c0015c60 <setupMultitasking(void (*)())+0xc>
c0015c84:	83 ec 0c             	sub    esp,0xc
c0015c87:	68 24 07 00 00       	push   0x724
c0015c8c:	e8 42 1e ff ff       	call   c0007ad3 <malloc>
c0015c91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015c98:	6a 00                	push   0x0
c0015c9a:	68 65 25 02 c0       	push   0xc0022565
c0015c9f:	6a 01                	push   0x1
c0015ca1:	50                   	push   eax
c0015ca2:	89 c3                	mov    ebx,eax
c0015ca4:	e8 5f fc ff ff       	call   c0015908 <Process::Process(bool, char const*, Process*, char**)>
c0015ca9:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015caf:	83 c4 14             	add    esp,0x14
c0015cb2:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015cb8:	50                   	push   eax
c0015cb9:	e8 b1 2a ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015cbe:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015cc5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015ccf:	83 c8 01             	or     eax,0x1
c0015cd2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015cd9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015cdf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015ce2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015cec:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015cf2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015cfc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015d02:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015d0c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015d16:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015d1c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015d22:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015d2c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015d36:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015d3d:	e8 91 1d ff ff       	call   c0007ad3 <malloc>
c0015d42:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015d48:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015d4e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015d54:	5a                   	pop    edx
c0015d55:	59                   	pop    ecx
c0015d56:	68 61 25 02 c0       	push   0xc0022561
c0015d5b:	50                   	push   eax
c0015d5c:	e8 ef a8 fe ff       	call   c0000650 <strcpy>
c0015d61:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015d68:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d6c:	83 c4 14             	add    esp,0x14
c0015d6f:	5b                   	pop    ebx
c0015d70:	5e                   	pop    esi
c0015d71:	e9 f3 a4 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015d76:	66 90                	xchg   ax,ax

c0015d78 <schedule()>:
c0015d78:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015d7e:	85 d2                	test   edx,edx
c0015d80:	74 0e                	je     c0015d90 <schedule()+0x18>
c0015d82:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015d8c:	c3                   	ret    
c0015d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d90:	53                   	push   ebx
c0015d91:	83 ec 14             	sub    esp,0x14
c0015d94:	68 e4 96 02 c0       	push   0xc00296e4
c0015d99:	e8 62 9c 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d9e:	83 c4 10             	add    esp,0x10
c0015da1:	84 c0                	test   al,al
c0015da3:	75 3f                	jne    c0015de4 <schedule()+0x6c>
c0015da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015daa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015dad:	83 fa 01             	cmp    edx,0x1
c0015db0:	74 3a                	je     c0015dec <schedule()+0x74>
c0015db2:	66 90                	xchg   ax,ax
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	68 e4 96 02 c0       	push   0xc00296e4
c0015dbc:	e8 5b 9c 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015dc1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015dc8:	89 c3                	mov    ebx,eax
c0015dca:	e8 55 9c 00 00       	call   c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015dcf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015dd9:	e8 02 f8 ff ff       	call   c00155e0 <switchToThread(ThreadControlBlock*)>
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]
c0015de4:	83 c4 08             	add    esp,0x8
c0015de7:	5b                   	pop    ebx
c0015de8:	c3                   	ret    
c0015de9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dfb:	50                   	push   eax
c0015dfc:	68 e4 96 02 c0       	push   0xc00296e4
c0015e01:	e8 da 9c 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	eb a9                	jmp    c0015db4 <schedule()+0x3c>
c0015e0b:	90                   	nop

c0015e0c <Semaphore::tryAcquire()>:
c0015e0c:	53                   	push   ebx
c0015e0d:	83 ec 08             	sub    esp,0x8
c0015e10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e14:	fa                   	cli    
c0015e15:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015e1b:	8d 42 01             	lea    eax,[edx+0x1]
c0015e1e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e23:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e28:	8d 58 01             	lea    ebx,[eax+0x1]
c0015e2b:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015e31:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015e34:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015e36:	7c 2c                	jl     c0015e64 <Semaphore::tryAcquire()+0x58>
c0015e38:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e3d:	85 c0                	test   eax,eax
c0015e3f:	75 0b                	jne    c0015e4c <Semaphore::tryAcquire()+0x40>
c0015e41:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e46:	85 c0                	test   eax,eax
c0015e48:	75 5a                	jne    c0015ea4 <Semaphore::tryAcquire()+0x98>
c0015e4a:	66 90                	xchg   ax,ax
c0015e4c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e52:	31 c0                	xor    eax,eax
c0015e54:	85 d2                	test   edx,edx
c0015e56:	75 04                	jne    c0015e5c <Semaphore::tryAcquire()+0x50>
c0015e58:	fb                   	sti    
c0015e59:	8d 76 00             	lea    esi,[esi+0x0]
c0015e5c:	83 c4 08             	add    esp,0x8
c0015e5f:	5b                   	pop    ebx
c0015e60:	c3                   	ret    
c0015e61:	8d 76 00             	lea    esi,[esi+0x0]
c0015e64:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e69:	83 c3 01             	add    ebx,0x1
c0015e6c:	85 c0                	test   eax,eax
c0015e6e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015e71:	75 21                	jne    c0015e94 <Semaphore::tryAcquire()+0x88>
c0015e73:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015e79:	85 c9                	test   ecx,ecx
c0015e7b:	74 17                	je     c0015e94 <Semaphore::tryAcquire()+0x88>
c0015e7d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e87:	e8 ec fe ff ff       	call   c0015d78 <schedule()>
c0015e8c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e91:	8d 50 ff             	lea    edx,[eax-0x1]
c0015e94:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e9a:	85 d2                	test   edx,edx
c0015e9c:	b0 01                	mov    al,0x1
c0015e9e:	75 bc                	jne    c0015e5c <Semaphore::tryAcquire()+0x50>
c0015ea0:	eb b6                	jmp    c0015e58 <Semaphore::tryAcquire()+0x4c>
c0015ea2:	66 90                	xchg   ax,ax
c0015ea4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015eae:	e8 c5 fe ff ff       	call   c0015d78 <schedule()>
c0015eb3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015eb8:	8d 50 ff             	lea    edx,[eax-0x1]
c0015ebb:	31 c0                	xor    eax,eax
c0015ebd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015ec3:	85 d2                	test   edx,edx
c0015ec5:	75 95                	jne    c0015e5c <Semaphore::tryAcquire()+0x50>
c0015ec7:	eb 8f                	jmp    c0015e58 <Semaphore::tryAcquire()+0x4c>
c0015ec9:	90                   	nop
c0015eca:	66 90                	xchg   ax,ax

c0015ecc <Semaphore::assertLocked(char const*)>:
c0015ecc:	83 ec 0c             	sub    esp,0xc
c0015ecf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ed3:	fa                   	cli    
c0015ed4:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015eda:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015edf:	83 c1 01             	add    ecx,0x1
c0015ee2:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015ee8:	8d 48 01             	lea    ecx,[eax+0x1]
c0015eeb:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015ef1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015ef3:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015ef6:	7c 28                	jl     c0015f20 <Semaphore::assertLocked(char const*)+0x54>
c0015ef8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015efd:	85 c0                	test   eax,eax
c0015eff:	75 0b                	jne    c0015f0c <Semaphore::assertLocked(char const*)+0x40>
c0015f01:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f06:	85 c0                	test   eax,eax
c0015f08:	75 32                	jne    c0015f3c <Semaphore::assertLocked(char const*)+0x70>
c0015f0a:	66 90                	xchg   ax,ax
c0015f0c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f11:	83 e8 01             	sub    eax,0x1
c0015f14:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f19:	75 01                	jne    c0015f1c <Semaphore::assertLocked(char const*)+0x50>
c0015f1b:	fb                   	sti    
c0015f1c:	83 c4 0c             	add    esp,0xc
c0015f1f:	c3                   	ret    
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f27:	52                   	push   edx
c0015f28:	e8 9c b3 ff ff       	call   c00112c9 <KePanic(char const*)>
c0015f2d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	83 e8 01             	sub    eax,0x1
c0015f38:	eb be                	jmp    c0015ef8 <Semaphore::assertLocked(char const*)+0x2c>
c0015f3a:	66 90                	xchg   ax,ax
c0015f3c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f46:	e8 2d fe ff ff       	call   c0015d78 <schedule()>
c0015f4b:	eb bf                	jmp    c0015f0c <Semaphore::assertLocked(char const*)+0x40>
c0015f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0015f50 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015f50:	83 ec 0c             	sub    esp,0xc
c0015f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f5c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015f5f:	e8 14 fe ff ff       	call   c0015d78 <schedule()>
c0015f64:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f69:	83 e8 01             	sub    eax,0x1
c0015f6c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f71:	75 01                	jne    c0015f74 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015f73:	fb                   	sti    
c0015f74:	83 c4 0c             	add    esp,0xc
c0015f77:	c3                   	ret    

c0015f78 <blockTask(TaskState)>:
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	fa                   	cli    
c0015f7c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f85:	83 c0 01             	add    eax,0x1
c0015f88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015f95:	e8 de fd ff ff       	call   c0015d78 <schedule()>
c0015f9a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f9f:	83 e8 01             	sub    eax,0x1
c0015fa2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fa7:	75 03                	jne    c0015fac <blockTask(TaskState)+0x34>
c0015fa9:	fb                   	sti    
c0015faa:	66 90                	xchg   ax,ax
c0015fac:	83 c4 0c             	add    esp,0xc
c0015faf:	c3                   	ret    

c0015fb0 <waitTask(int, int*, int)>:
c0015fb0:	83 ec 18             	sub    esp,0x18
c0015fb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015fbc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015fbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015fcb:	6a 07                	push   0x7
c0015fcd:	e8 a6 ff ff ff       	call   c0015f78 <blockTask(TaskState)>
c0015fd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fd7:	83 c4 10             	add    esp,0x10
c0015fda:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015fdd:	85 d2                	test   edx,edx
c0015fdf:	74 0b                	je     c0015fec <waitTask(int, int*, int)+0x3c>
c0015fe1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015fe4:	89 02                	mov    DWORD PTR [edx],eax
c0015fe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015feb:	90                   	nop
c0015fec:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015fef:	83 c4 0c             	add    esp,0xc
c0015ff2:	c3                   	ret    
c0015ff3:	90                   	nop

c0015ff4 <milliTenthSleepUntil(unsigned int)>:
c0015ff4:	83 ec 0c             	sub    esp,0xc
c0015ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ffb:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0016001:	76 05                	jbe    c0016008 <milliTenthSleepUntil(unsigned int)+0x14>
c0016003:	90                   	nop
c0016004:	83 c4 0c             	add    esp,0xc
c0016007:	c3                   	ret    
c0016008:	fa                   	cli    
c0016009:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001600f:	83 ec 08             	sub    esp,0x8
c0016012:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016018:	83 c2 01             	add    edx,0x1
c001601b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016021:	83 c1 01             	add    ecx,0x1
c0016024:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001602a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016030:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016038:	50                   	push   eax
c0016039:	68 d8 96 02 c0       	push   0xc00296d8
c001603e:	e8 9d 9a 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016043:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001604a:	e8 29 ff ff ff       	call   c0015f78 <blockTask(TaskState)>
c001604f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016054:	83 c4 10             	add    esp,0x10
c0016057:	83 e8 01             	sub    eax,0x1
c001605a:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001605f:	85 c0                	test   eax,eax
c0016061:	75 09                	jne    c001606c <milliTenthSleepUntil(unsigned int)+0x78>
c0016063:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016068:	85 c0                	test   eax,eax
c001606a:	75 14                	jne    c0016080 <milliTenthSleepUntil(unsigned int)+0x8c>
c001606c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016071:	83 e8 01             	sub    eax,0x1
c0016074:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016079:	75 89                	jne    c0016004 <milliTenthSleepUntil(unsigned int)+0x10>
c001607b:	fb                   	sti    
c001607c:	83 c4 0c             	add    esp,0xc
c001607f:	c3                   	ret    
c0016080:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001608a:	e8 e9 fc ff ff       	call   c0015d78 <schedule()>
c001608f:	eb db                	jmp    c001606c <milliTenthSleepUntil(unsigned int)+0x78>
c0016091:	8d 76 00             	lea    esi,[esi+0x0]

c0016094 <milliTenthSleep(unsigned int)>:
c0016094:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016098:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c001609d:	01 c2                	add    edx,eax
c001609f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00160a3:	e9 4c ff ff ff       	jmp    c0015ff4 <milliTenthSleepUntil(unsigned int)>

c00160a8 <sleep(unsigned int)>:
c00160a8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00160b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160b4:	eb de                	jmp    c0016094 <milliTenthSleep(unsigned int)>
c00160b6:	66 90                	xchg   ax,ax

c00160b8 <Semaphore::acquire()>:
c00160b8:	83 ec 0c             	sub    esp,0xc
c00160bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160bf:	fa                   	cli    
c00160c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160c5:	83 c0 01             	add    eax,0x1
c00160c8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160cd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00160d2:	8d 48 01             	lea    ecx,[eax+0x1]
c00160d5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00160db:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00160de:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00160e0:	7d 2e                	jge    c0016110 <Semaphore::acquire()+0x58>
c00160e2:	83 c1 01             	add    ecx,0x1
c00160e5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00160e8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00160ed:	85 c0                	test   eax,eax
c00160ef:	75 0b                	jne    c00160fc <Semaphore::acquire()+0x44>
c00160f1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00160f6:	85 c0                	test   eax,eax
c00160f8:	75 66                	jne    c0016160 <Semaphore::acquire()+0xa8>
c00160fa:	66 90                	xchg   ax,ax
c00160fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016101:	83 e8 01             	sub    eax,0x1
c0016104:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016109:	75 01                	jne    c001610c <Semaphore::acquire()+0x54>
c001610b:	fb                   	sti    
c001610c:	83 c4 0c             	add    esp,0xc
c001610f:	c3                   	ret    
c0016110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016115:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001611c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001611f:	85 c9                	test   ecx,ecx
c0016121:	74 51                	je     c0016174 <Semaphore::acquire()+0xbc>
c0016123:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016126:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001612c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001612f:	90                   	nop
c0016130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016135:	83 ec 0c             	sub    esp,0xc
c0016138:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001613b:	68 e4 25 02 c0       	push   0xc00225e4
c0016140:	e8 c5 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016145:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001614c:	e8 27 fe ff ff       	call   c0015f78 <blockTask(TaskState)>
c0016151:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016156:	83 c4 10             	add    esp,0x10
c0016159:	83 e8 01             	sub    eax,0x1
c001615c:	eb 8a                	jmp    c00160e8 <Semaphore::acquire()+0x30>
c001615e:	66 90                	xchg   ax,ax
c0016160:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001616a:	e8 09 fc ff ff       	call   c0015d78 <schedule()>
c001616f:	eb 8b                	jmp    c00160fc <Semaphore::acquire()+0x44>
c0016171:	8d 76 00             	lea    esi,[esi+0x0]
c0016174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016179:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001617c:	eb b2                	jmp    c0016130 <Semaphore::acquire()+0x78>
c001617e:	66 90                	xchg   ax,ax

c0016180 <taskReturned>:
c0016180:	83 ec 18             	sub    esp,0x18
c0016183:	68 04 26 02 c0       	push   0xc0022604
c0016188:	e8 3c b1 ff ff       	call   c00112c9 <KePanic(char const*)>
c001618d:	83 c4 10             	add    esp,0x10
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	6a 02                	push   0x2
c0016195:	e8 de fd ff ff       	call   c0015f78 <blockTask(TaskState)>
c001619a:	fa                   	cli    
c001619b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161a0:	83 c0 01             	add    eax,0x1
c00161a3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161a8:	e8 cb fb ff ff       	call   c0015d78 <schedule()>
c00161ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	83 e8 01             	sub    eax,0x1
c00161b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161bd:	85 c0                	test   eax,eax
c00161bf:	75 cf                	jne    c0016190 <taskReturned+0x10>
c00161c1:	fb                   	sti    
c00161c2:	eb cc                	jmp    c0016190 <taskReturned+0x10>

c00161c4 <Thr::processFromPID(int)>:
c00161c4:	57                   	push   edi
c00161c5:	56                   	push   esi
c00161c6:	53                   	push   ebx
c00161c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161cb:	fa                   	cli    
c00161cc:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c00161d2:	83 ec 0c             	sub    esp,0xc
c00161d5:	68 e4 96 02 c0       	push   0xc00296e4
c00161da:	83 c1 01             	add    ecx,0x1
c00161dd:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c00161e3:	e8 34 98 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	89 c7                	mov    edi,eax
c00161ed:	eb 15                	jmp    c0016204 <Thr::processFromPID(int)+0x40>
c00161ef:	90                   	nop
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	68 e4 96 02 c0       	push   0xc00296e4
c00161f8:	e8 1f 98 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	39 f8                	cmp    eax,edi
c0016202:	74 50                	je     c0016254 <Thr::processFromPID(int)+0x90>
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	68 e4 96 02 c0       	push   0xc00296e4
c001620c:	e8 0b 98 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016211:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016218:	89 c3                	mov    ebx,eax
c001621a:	e8 05 98 00 00       	call   c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001621f:	58                   	pop    eax
c0016220:	5a                   	pop    edx
c0016221:	53                   	push   ebx
c0016222:	68 e4 96 02 c0       	push   0xc00296e4
c0016227:	e8 b4 98 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001622c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001622f:	83 c4 10             	add    esp,0x10
c0016232:	39 30                	cmp    DWORD PTR [eax],esi
c0016234:	75 ba                	jne    c00161f0 <Thr::processFromPID(int)+0x2c>
c0016236:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001623b:	83 e8 01             	sub    eax,0x1
c001623e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016243:	74 0b                	je     c0016250 <Thr::processFromPID(int)+0x8c>
c0016245:	8d 76 00             	lea    esi,[esi+0x0]
c0016248:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001624b:	90                   	nop
c001624c:	5b                   	pop    ebx
c001624d:	5e                   	pop    esi
c001624e:	5f                   	pop    edi
c001624f:	c3                   	ret    
c0016250:	fb                   	sti    
c0016251:	eb f5                	jmp    c0016248 <Thr::processFromPID(int)+0x84>
c0016253:	90                   	nop
c0016254:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016259:	8d 50 ff             	lea    edx,[eax-0x1]
c001625c:	31 c0                	xor    eax,eax
c001625e:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016264:	85 d2                	test   edx,edx
c0016266:	75 e4                	jne    c001624c <Thr::processFromPID(int)+0x88>
c0016268:	fb                   	sti    
c0016269:	5b                   	pop    ebx
c001626a:	5e                   	pop    esi
c001626b:	5f                   	pop    edi
c001626c:	c3                   	ret    
c001626d:	8d 76 00             	lea    esi,[esi+0x0]

c0016270 <unblockTask(ThreadControlBlock*)>:
c0016270:	53                   	push   ebx
c0016271:	83 ec 08             	sub    esp,0x8
c0016274:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016278:	fa                   	cli    
c0016279:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001627e:	83 c0 01             	add    eax,0x1
c0016281:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016286:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016289:	85 c0                	test   eax,eax
c001628b:	74 67                	je     c00162f4 <unblockTask(ThreadControlBlock*)+0x84>
c001628d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016290:	83 f8 01             	cmp    eax,0x1
c0016293:	74 37                	je     c00162cc <unblockTask(ThreadControlBlock*)+0x5c>
c0016295:	83 ec 0c             	sub    esp,0xc
c0016298:	68 e4 96 02 c0       	push   0xc00296e4
c001629d:	e8 7a 97 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	85 c0                	test   eax,eax
c00162a7:	75 1b                	jne    c00162c4 <unblockTask(ThreadControlBlock*)+0x54>
c00162a9:	eb 5d                	jmp    c0016308 <unblockTask(ThreadControlBlock*)+0x98>
c00162ab:	90                   	nop
c00162ac:	83 ec 08             	sub    esp,0x8
c00162af:	50                   	push   eax
c00162b0:	68 e4 96 02 c0       	push   0xc00296e4
c00162b5:	e8 82 9a 00 00       	call   c001fd3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00162ba:	83 c4 10             	add    esp,0x10
c00162bd:	85 c0                	test   eax,eax
c00162bf:	74 47                	je     c0016308 <unblockTask(ThreadControlBlock*)+0x98>
c00162c1:	8d 76 00             	lea    esi,[esi+0x0]
c00162c4:	39 c3                	cmp    ebx,eax
c00162c6:	75 e4                	jne    c00162ac <unblockTask(ThreadControlBlock*)+0x3c>
c00162c8:	eb 12                	jmp    c00162dc <unblockTask(ThreadControlBlock*)+0x6c>
c00162ca:	66 90                	xchg   ax,ax
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	68 83 25 02 c0       	push   0xc0022583
c00162d4:	e8 31 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00162d9:	83 c4 10             	add    esp,0x10
c00162dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00162e1:	83 e8 01             	sub    eax,0x1
c00162e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00162e9:	75 01                	jne    c00162ec <unblockTask(ThreadControlBlock*)+0x7c>
c00162eb:	fb                   	sti    
c00162ec:	83 c4 08             	add    esp,0x8
c00162ef:	5b                   	pop    ebx
c00162f0:	c3                   	ret    
c00162f1:	8d 76 00             	lea    esi,[esi+0x0]
c00162f4:	83 ec 0c             	sub    esp,0xc
c00162f7:	68 6c 25 02 c0       	push   0xc002256c
c00162fc:	e8 09 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016301:	83 c4 10             	add    esp,0x10
c0016304:	eb d6                	jmp    c00162dc <unblockTask(ThreadControlBlock*)+0x6c>
c0016306:	66 90                	xchg   ax,ax
c0016308:	83 ec 08             	sub    esp,0x8
c001630b:	53                   	push   ebx
c001630c:	68 e4 96 02 c0       	push   0xc00296e4
c0016311:	e8 ca 97 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016316:	83 c4 10             	add    esp,0x10
c0016319:	eb c1                	jmp    c00162dc <unblockTask(ThreadControlBlock*)+0x6c>
c001631b:	90                   	nop

c001631c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001631c:	55                   	push   ebp
c001631d:	57                   	push   edi
c001631e:	56                   	push   esi
c001631f:	53                   	push   ebx
c0016320:	83 ec 1c             	sub    esp,0x1c
c0016323:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016327:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001632a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016330:	85 ed                	test   ebp,ebp
c0016332:	7e 28                	jle    c001635c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016334:	31 f6                	xor    esi,esi
c0016336:	66 90                	xchg   ax,ax
c0016338:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001633f:	83 ec 0c             	sub    esp,0xc
c0016342:	83 c6 01             	add    esi,0x1
c0016345:	57                   	push   edi
c0016346:	e8 98 17 ff ff       	call   c0007ae3 <free>
c001634b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001634e:	83 c4 10             	add    esp,0x10
c0016351:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016357:	7f df                	jg     c0016338 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016359:	8d 76 00             	lea    esi,[esi+0x0]
c001635c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016366:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001636b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001636e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016371:	d3 c0                	rol    eax,cl
c0016373:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001637a:	21 c8                	and    eax,ecx
c001637c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016383:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016386:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001638e:	89 f7                	mov    edi,esi
c0016390:	0f 85 72 01 00 00    	jne    c0016508 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016396:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001639c:	85 ed                	test   ebp,ebp
c001639e:	74 1c                	je     c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	55                   	push   ebp
c00163a4:	e8 31 ac ff ff       	call   c0010fda <EnvVarContainer::~EnvVarContainer()>
c00163a9:	59                   	pop    ecx
c00163aa:	5e                   	pop    esi
c00163ab:	6a 0c                	push   0xc
c00163ad:	55                   	push   ebp
c00163ae:	e8 59 44 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00163b3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00163b6:	83 c4 10             	add    esp,0x10
c00163b9:	89 f7                	mov    edi,esi
c00163bb:	90                   	nop
c00163bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00163c2:	85 c0                	test   eax,eax
c00163c4:	0f 84 b2 00 00 00    	je     c001647c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00163ca:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00163cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00163d1:	31 c9                	xor    ecx,ecx
c00163d3:	eb 17                	jmp    c00163ec <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00163d5:	8d 76 00             	lea    esi,[esi+0x0]
c00163d8:	83 c1 01             	add    ecx,0x1
c00163db:	83 f9 10             	cmp    ecx,0x10
c00163de:	0f 84 98 00 00 00    	je     c001647c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00163e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00163ea:	66 90                	xchg   ax,ax
c00163ec:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00163f3:	d3 fa                	sar    edx,cl
c00163f5:	80 e2 01             	and    dl,0x1
c00163f8:	74 de                	je     c00163d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163fa:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00163fd:	c1 e2 05             	shl    edx,0x5
c0016400:	29 ca                	sub    edx,ecx
c0016402:	01 d0                	add    eax,edx
c0016404:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001640a:	83 fd 07             	cmp    ebp,0x7
c001640d:	75 c9                	jne    c00163d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001640f:	05 40 02 00 00       	add    eax,0x240
c0016414:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016417:	83 fd ff             	cmp    ebp,0xffffffff
c001641a:	0f 8c f0 00 00 00    	jl     c0016510 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016420:	0f 84 ae 01 00 00    	je     c00165d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016426:	85 ed                	test   ebp,ebp
c0016428:	0f 84 92 01 00 00    	je     c00165c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001642e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016430:	75 a6                	jne    c00163d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016432:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016436:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001643c:	01 d0                	add    eax,edx
c001643e:	66 90                	xchg   ax,ax
c0016440:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001644d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016450:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016456:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001645d:	50                   	push   eax
c001645e:	e8 0d fe ff ff       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016469:	89 f7                	mov    edi,esi
c001646b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001646f:	83 c1 01             	add    ecx,0x1
c0016472:	83 f9 10             	cmp    ecx,0x10
c0016475:	0f 85 69 ff ff ff    	jne    c00163e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001647b:	90                   	nop
c001647c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016482:	85 c0                	test   eax,eax
c0016484:	74 62                	je     c00164e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016486:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001648c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016492:	74 54                	je     c00164e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	68 e4 96 02 c0       	push   0xc00296e4
c001649c:	e8 7b 95 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164a1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00164a8:	89 c7                	mov    edi,eax
c00164aa:	e8 51 95 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	84 c0                	test   al,al
c00164b4:	0f 84 ce 00 00 00    	je     c0016588 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00164ba:	66 90                	xchg   ax,ax
c00164bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164bf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00164c5:	85 d2                	test   edx,edx
c00164c7:	74 0f                	je     c00164d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00164c9:	8b 02                	mov    eax,DWORD PTR [edx]
c00164cb:	83 ec 0c             	sub    esp,0xc
c00164ce:	52                   	push   edx
c00164cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164d2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00164e2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00164e5:	8d 76 00             	lea    esi,[esi+0x0]
c00164e8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00164ee:	85 db                	test   ebx,ebx
c00164f0:	74 16                	je     c0016508 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00164f2:	83 ec 0c             	sub    esp,0xc
c00164f5:	53                   	push   ebx
c00164f6:	e8 95 36 ff ff       	call   c0009b90 <VAS::~VAS()>
c00164fb:	58                   	pop    eax
c00164fc:	5a                   	pop    edx
c00164fd:	6a 14                	push   0x14
c00164ff:	53                   	push   ebx
c0016500:	e8 07 43 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	83 c4 1c             	add    esp,0x1c
c001650b:	5b                   	pop    ebx
c001650c:	5e                   	pop    esi
c001650d:	5f                   	pop    edi
c001650e:	5d                   	pop    ebp
c001650f:	c3                   	ret    
c0016510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	68 38 26 02 c0       	push   0xc0022638
c001651c:	e8 a8 ad ff ff       	call   c00112c9 <KePanic(char const*)>
c0016521:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016524:	83 c4 10             	add    esp,0x10
c0016527:	89 f7                	mov    edi,esi
c0016529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001652d:	e9 a6 fe ff ff       	jmp    c00163d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016532:	66 90                	xchg   ax,ax
c0016534:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001653a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016540:	75 1e                	jne    c0016560 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016542:	83 ec 0c             	sub    esp,0xc
c0016545:	68 a0 26 02 c0       	push   0xc00226a0
c001654a:	e8 bb 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001654f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016556:	e8 1d fa ff ff       	call   c0015f78 <blockTask(TaskState)>
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	66 90                	xchg   ax,ax
c0016560:	83 ec 08             	sub    esp,0x8
c0016563:	56                   	push   esi
c0016564:	68 e4 96 02 c0       	push   0xc00296e4
c0016569:	e8 72 95 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001656e:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016575:	e8 a2 94 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001657a:	83 c4 10             	add    esp,0x10
c001657d:	39 f8                	cmp    eax,edi
c001657f:	0f 84 37 ff ff ff    	je     c00164bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016585:	8d 76 00             	lea    esi,[esi+0x0]
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	68 e4 96 02 c0       	push   0xc00296e4
c0016590:	e8 87 94 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016595:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001659c:	89 c6                	mov    esi,eax
c001659e:	e8 81 94 00 00       	call   c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165a3:	83 c4 10             	add    esp,0x10
c00165a6:	39 f3                	cmp    ebx,esi
c00165a8:	74 b6                	je     c0016560 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00165aa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00165ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165b0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00165b6:	75 a8                	jne    c0016560 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00165b8:	e9 77 ff ff ff       	jmp    c0016534 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00165bd:	8d 76 00             	lea    esi,[esi+0x0]
c00165c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	68 6c 26 02 c0       	push   0xc002266c
c00165cc:	e9 4b ff ff ff       	jmp    c001651c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00165d1:	8d 76 00             	lea    esi,[esi+0x0]
c00165d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165d8:	8b 36                	mov    esi,DWORD PTR [esi]
c00165da:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00165dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165e0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00165e6:	01 d7                	add    edi,edx
c00165e8:	89 f8                	mov    eax,edi
c00165ea:	e9 51 fe ff ff       	jmp    c0016440 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00165ef:	90                   	nop

c00165f0 <cleanerTaskFunction(void*)>:
c00165f0:	53                   	push   ebx
c00165f1:	83 ec 08             	sub    esp,0x8
c00165f4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165f9:	83 e8 01             	sub    eax,0x1
c00165fc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016601:	75 01                	jne    c0016604 <cleanerTaskFunction(void*)+0x14>
c0016603:	fb                   	sti    
c0016604:	fa                   	cli    
c0016605:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001660a:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016611:	8d 50 01             	lea    edx,[eax+0x1]
c0016614:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001661a:	0f 84 c4 00 00 00    	je     c00166e4 <cleanerTaskFunction(void*)+0xf4>
c0016620:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016625:	85 c0                	test   eax,eax
c0016627:	75 03                	jne    c001662c <cleanerTaskFunction(void*)+0x3c>
c0016629:	fb                   	sti    
c001662a:	66 90                	xchg   ax,ax
c001662c:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016633:	fa                   	cli    
c0016634:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001663a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016640:	83 c2 01             	add    edx,0x1
c0016643:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016649:	83 c1 01             	add    ecx,0x1
c001664c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016652:	fa                   	cli    
c0016653:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016659:	83 c3 01             	add    ebx,0x1
c001665c:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016662:	eb 28                	jmp    c001668c <cleanerTaskFunction(void*)+0x9c>
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	68 cc 96 02 c0       	push   0xc00296cc
c001666c:	e8 ab 93 00 00       	call   c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016671:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016678:	89 c3                	mov    ebx,eax
c001667a:	e8 a5 93 00 00       	call   c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001667f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016682:	e8 95 fc ff ff       	call   c001631c <cleanupTerminatedTask(ThreadControlBlock*)>
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	66 90                	xchg   ax,ax
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	68 cc 96 02 c0       	push   0xc00296cc
c0016694:	e8 67 93 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	84 c0                	test   al,al
c001669e:	74 c4                	je     c0016664 <cleanerTaskFunction(void*)+0x74>
c00166a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166a5:	83 e8 01             	sub    eax,0x1
c00166a8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166ad:	75 01                	jne    c00166b0 <cleanerTaskFunction(void*)+0xc0>
c00166af:	fb                   	sti    
c00166b0:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166b5:	83 e8 01             	sub    eax,0x1
c00166b8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166bd:	0f 85 31 ff ff ff    	jne    c00165f4 <cleanerTaskFunction(void*)+0x4>
c00166c3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00166c8:	85 c0                	test   eax,eax
c00166ca:	0f 84 24 ff ff ff    	je     c00165f4 <cleanerTaskFunction(void*)+0x4>
c00166d0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166da:	e8 99 f6 ff ff       	call   c0015d78 <schedule()>
c00166df:	e9 10 ff ff ff       	jmp    c00165f4 <cleanerTaskFunction(void*)+0x4>
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	6a 02                	push   0x2
c00166e9:	e8 62 f8 ff ff       	call   c0015f50 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166ee:	83 c4 10             	add    esp,0x10
c00166f1:	e9 36 ff ff ff       	jmp    c001662c <cleanerTaskFunction(void*)+0x3c>
c00166f6:	66 90                	xchg   ax,ax

c00166f8 <terminateTask(int)>:
c00166f8:	83 ec 14             	sub    esp,0x14
c00166fb:	fa                   	cli    
c00166fc:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016702:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016708:	83 c2 01             	add    edx,0x1
c001670b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016711:	83 c1 01             	add    ecx,0x1
c0016714:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001671a:	fa                   	cli    
c001671b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016720:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016724:	83 c0 01             	add    eax,0x1
c0016727:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001672c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016731:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016739:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001673c:	50                   	push   eax
c001673d:	68 cc 96 02 c0       	push   0xc00296cc
c0016742:	e8 99 93 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001674c:	83 c4 10             	add    esp,0x10
c001674f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016756:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001675b:	85 c0                	test   eax,eax
c001675d:	74 65                	je     c00167c4 <terminateTask(int)+0xcc>
c001675f:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016766:	83 ec 0c             	sub    esp,0xc
c0016769:	50                   	push   eax
c001676a:	e8 01 fb ff ff       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	66 90                	xchg   ax,ax
c0016774:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016779:	83 e8 01             	sub    eax,0x1
c001677c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016781:	75 01                	jne    c0016784 <terminateTask(int)+0x8c>
c0016783:	fb                   	sti    
c0016784:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016789:	83 e8 01             	sub    eax,0x1
c001678c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016791:	75 09                	jne    c001679c <terminateTask(int)+0xa4>
c0016793:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001679a:	75 3c                	jne    c00167d8 <terminateTask(int)+0xe0>
c001679c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167a1:	83 e8 01             	sub    eax,0x1
c00167a4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167a9:	75 01                	jne    c00167ac <terminateTask(int)+0xb4>
c00167ab:	fb                   	sti    
c00167ac:	fa                   	cli    
c00167ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167b2:	83 c0 01             	add    eax,0x1
c00167b5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	e8 b7 f5 ff ff       	call   c0015d78 <schedule()>
c00167c1:	eb d9                	jmp    c001679c <terminateTask(int)+0xa4>
c00167c3:	90                   	nop
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	68 9a 25 02 c0       	push   0xc002259a
c00167cc:	e8 39 41 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00167d1:	83 c4 10             	add    esp,0x10
c00167d4:	eb 9e                	jmp    c0016774 <terminateTask(int)+0x7c>
c00167d6:	66 90                	xchg   ax,ax
c00167d8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00167e2:	eb d8                	jmp    c00167bc <terminateTask(int)+0xc4>

c00167e4 <Thr::terminateFromIRQ(int)>:
c00167e4:	83 ec 18             	sub    esp,0x18
c00167e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167eb:	50                   	push   eax
c00167ec:	e8 07 ff ff ff       	call   c00166f8 <terminateTask(int)>
c00167f1:	90                   	nop
c00167f2:	66 90                	xchg   ax,ax

c00167f4 <Semaphore::release()>:
c00167f4:	83 ec 0c             	sub    esp,0xc
c00167f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00167fb:	fa                   	cli    
c00167fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016801:	83 c0 01             	add    eax,0x1
c0016804:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016809:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001680e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016811:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016817:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001681a:	85 c9                	test   ecx,ecx
c001681c:	74 42                	je     c0016860 <Semaphore::release()+0x6c>
c001681e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016821:	83 ec 0c             	sub    esp,0xc
c0016824:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016827:	51                   	push   ecx
c0016828:	e8 43 fa ff ff       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c001682d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016832:	83 c4 10             	add    esp,0x10
c0016835:	83 e8 01             	sub    eax,0x1
c0016838:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001683d:	85 c0                	test   eax,eax
c001683f:	75 0b                	jne    c001684c <Semaphore::release()+0x58>
c0016841:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016846:	85 c0                	test   eax,eax
c0016848:	75 22                	jne    c001686c <Semaphore::release()+0x78>
c001684a:	66 90                	xchg   ax,ax
c001684c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016851:	83 e8 01             	sub    eax,0x1
c0016854:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016859:	75 01                	jne    c001685c <Semaphore::release()+0x68>
c001685b:	fb                   	sti    
c001685c:	83 c4 0c             	add    esp,0xc
c001685f:	c3                   	ret    
c0016860:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016863:	83 e9 01             	sub    ecx,0x1
c0016866:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016869:	eb cd                	jmp    c0016838 <Semaphore::release()+0x44>
c001686b:	90                   	nop
c001686c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016876:	e8 fd f4 ff ff       	call   c0015d78 <schedule()>
c001687b:	eb cf                	jmp    c001684c <Semaphore::release()+0x58>
c001687d:	8d 76 00             	lea    esi,[esi+0x0]

c0016880 <__static_initialization_and_destruction_0(int, int)>:
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016888:	0f 85 8e 00 00 00    	jne    c001691c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001688e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016896:	0f 85 80 00 00 00    	jne    c001691c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	68 e4 96 02 c0       	push   0xc00296e4
c00168a4:	e8 eb 94 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00168a9:	83 c4 10             	add    esp,0x10
c00168ac:	83 ec 04             	sub    esp,0x4
c00168af:	68 70 32 02 c0       	push   0xc0023270
c00168b4:	68 e4 96 02 c0       	push   0xc00296e4
c00168b9:	68 44 fd 01 c0       	push   0xc001fd44
c00168be:	e8 f9 3e ff ff       	call   c000a7bc <__cxa_atexit>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	83 ec 0c             	sub    esp,0xc
c00168c9:	68 d8 96 02 c0       	push   0xc00296d8
c00168ce:	e8 c1 94 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	83 ec 04             	sub    esp,0x4
c00168d9:	68 70 32 02 c0       	push   0xc0023270
c00168de:	68 d8 96 02 c0       	push   0xc00296d8
c00168e3:	68 44 fd 01 c0       	push   0xc001fd44
c00168e8:	e8 cf 3e ff ff       	call   c000a7bc <__cxa_atexit>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 cc 96 02 c0       	push   0xc00296cc
c00168f8:	e8 97 94 00 00       	call   c001fd94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	83 ec 04             	sub    esp,0x4
c0016903:	68 70 32 02 c0       	push   0xc0023270
c0016908:	68 cc 96 02 c0       	push   0xc00296cc
c001690d:	68 44 fd 01 c0       	push   0xc001fd44
c0016912:	e8 a5 3e ff ff       	call   c000a7bc <__cxa_atexit>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	66 90                	xchg   ax,ax
c001691c:	90                   	nop
c001691d:	83 c4 0c             	add    esp,0xc
c0016920:	c3                   	ret    
c0016921:	8d 76 00             	lea    esi,[esi+0x0]

c0016924 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	83 ec 08             	sub    esp,0x8
c001692a:	68 ff ff 00 00       	push   0xffff
c001692f:	6a 01                	push   0x1
c0016931:	e8 4a ff ff ff       	call   c0016880 <__static_initialization_and_destruction_0(int, int)>
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	83 c4 0c             	add    esp,0xc
c001693c:	c3                   	ret    

c001693d <Vm::inbv(unsigned short)>:
c001693d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016941:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016946:	75 06                	jne    c001694e <Vm::inbv(unsigned short)+0x11>
c0016948:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c001694d:	c3                   	ret    
c001694e:	ec                   	in     al,dx
c001694f:	c3                   	ret    

c0016950 <Vm::outbv(unsigned short, unsigned char)>:
c0016950:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016958:	66 81 fa fe fe       	cmp    dx,0xfefe
c001695d:	75 25                	jne    c0016984 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001695f:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016965:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c001696b:	8d 51 01             	lea    edx,[ecx+0x1]
c001696e:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016974:	83 fa 20             	cmp    edx,0x20
c0016977:	75 0c                	jne    c0016985 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016979:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016983:	c3                   	ret    
c0016984:	ee                   	out    dx,al
c0016985:	c3                   	ret    

c0016986 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016986:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001698b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016990:	c1 e0 04             	shl    eax,0x4
c0016993:	01 d0                	add    eax,edx
c0016995:	c3                   	ret    

c0016996 <Vm::getSegment(unsigned int)>:
c0016996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001699a:	c1 e8 10             	shr    eax,0x10
c001699d:	c3                   	ret    

c001699e <Vm::getOffset(unsigned int)>:
c001699e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169a2:	c3                   	ret    

c00169a3 <Vm::mainloop2()>:
c00169a3:	83 ec 18             	sub    esp,0x18
c00169a6:	fa                   	cli    
c00169a7:	6a 02                	push   0x2
c00169a9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169af:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00169b6:	e8 95 f5 ff ff       	call   c0015f50 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00169c4:	52                   	push   edx
c00169c5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00169c9:	52                   	push   edx
c00169ca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00169ce:	52                   	push   edx
c00169cf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00169d3:	50                   	push   eax
c00169d4:	e8 36 98 fe ff       	call   c000020f <goToVM86>
c00169d9:	83 c4 2c             	add    esp,0x2c
c00169dc:	c3                   	ret    

c00169dd <Vm::mainVm8086Loop(void*)>:
c00169dd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169e2:	48                   	dec    eax
c00169e3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169e8:	75 01                	jne    c00169eb <Vm::mainVm8086Loop(void*)+0xe>
c00169ea:	fb                   	sti    
c00169eb:	eb b6                	jmp    c00169a3 <Vm::mainloop2()>

c00169ed <Vm::mainloop3(unsigned long)>:
c00169ed:	83 ec 18             	sub    esp,0x18
c00169f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169f4:	fa                   	cli    
c00169f5:	6a 02                	push   0x2
c00169f7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169fd:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016a04:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016a09:	e8 42 f5 ff ff       	call   c0015f50 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a0e:	83 c4 1c             	add    esp,0x1c
c0016a11:	eb 90                	jmp    c00169a3 <Vm::mainloop2()>

c0016a13 <Vm::initialise8086()>:
c0016a13:	83 ec 0c             	sub    esp,0xc
c0016a16:	68 80 00 00 00       	push   0x80
c0016a1b:	6a 00                	push   0x0
c0016a1d:	68 dd 69 01 c0       	push   0xc00169dd
c0016a22:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a28:	e8 ff f0 ff ff       	call   c0015b2c <Process::createThread(void (*)(void*), void*, int)>
c0016a2d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016a34:	68 00 01 00 00       	push   0x100
c0016a39:	6a 00                	push   0x0
c0016a3b:	6a 00                	push   0x0
c0016a3d:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016a42:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016a47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016a4d:	e8 b6 34 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016a52:	83 c4 2c             	add    esp,0x2c
c0016a55:	c3                   	ret    

c0016a56 <Vm::finish8086()>:
c0016a56:	53                   	push   ebx
c0016a57:	83 ec 08             	sub    esp,0x8
c0016a5a:	fa                   	cli    
c0016a5b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a61:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016a68:	75 15                	jne    c0016a7f <Vm::finish8086()+0x29>
c0016a6a:	e8 09 f3 ff ff       	call   c0015d78 <schedule()>
c0016a6f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a74:	48                   	dec    eax
c0016a75:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a7a:	75 de                	jne    c0016a5a <Vm::finish8086()+0x4>
c0016a7c:	fb                   	sti    
c0016a7d:	eb db                	jmp    c0016a5a <Vm::finish8086()+0x4>
c0016a7f:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016a8f:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a95:	e8 d6 f7 ff ff       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c0016a9a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a9f:	83 c4 10             	add    esp,0x10
c0016aa2:	8d 50 ff             	lea    edx,[eax-0x1]
c0016aa5:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016aab:	85 d2                	test   edx,edx
c0016aad:	75 01                	jne    c0016ab0 <Vm::finish8086()+0x5a>
c0016aaf:	fb                   	sti    
c0016ab0:	83 c4 08             	add    esp,0x8
c0016ab3:	89 d8                	mov    eax,ebx
c0016ab5:	5b                   	pop    ebx
c0016ab6:	c3                   	ret    

c0016ab7 <Vm::getOutput8086(unsigned char*)>:
c0016ab7:	57                   	push   edi
c0016ab8:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016abe:	56                   	push   esi
c0016abf:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016ac4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016ac8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016aca:	5e                   	pop    esi
c0016acb:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016ad0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016ada:	5f                   	pop    edi
c0016adb:	c3                   	ret    

c0016adc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016adc:	55                   	push   ebp
c0016add:	57                   	push   edi
c0016ade:	56                   	push   esi
c0016adf:	53                   	push   ebx
c0016ae0:	83 ec 0c             	sub    esp,0xc
c0016ae3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016ae7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016aeb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016aef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016af3:	fa                   	cli    
c0016af4:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016afa:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016b01:	75 15                	jne    c0016b18 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016b03:	e8 70 f2 ff ff       	call   c0015d78 <schedule()>
c0016b08:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b0d:	48                   	dec    eax
c0016b0e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b13:	75 de                	jne    c0016af3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016b15:	fb                   	sti    
c0016b16:	eb db                	jmp    c0016af3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016b18:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b22:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016b27:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b2b:	0f b7 ff             	movzx  edi,di
c0016b2e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b32:	0f b7 f6             	movzx  esi,si
c0016b35:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b39:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016b3d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b41:	50                   	push   eax
c0016b42:	6a 20                	push   0x20
c0016b44:	6a 00                	push   0x0
c0016b46:	68 40 97 02 c0       	push   0xc0029740
c0016b4b:	e8 a0 99 fe ff       	call   c00004f0 <memset>
c0016b50:	5a                   	pop    edx
c0016b51:	59                   	pop    ecx
c0016b52:	57                   	push   edi
c0016b53:	56                   	push   esi
c0016b54:	e8 2d fe ff ff       	call   c0016986 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016b60:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016b64:	89 c7                	mov    edi,eax
c0016b66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b68:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b6f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b74:	48                   	dec    eax
c0016b75:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b7a:	75 01                	jne    c0016b7d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016b7c:	fb                   	sti    
c0016b7d:	83 ec 0c             	sub    esp,0xc
c0016b80:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b86:	e8 e5 f6 ff ff       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c0016b8b:	83 c4 1c             	add    esp,0x1c
c0016b8e:	b0 01                	mov    al,0x1
c0016b90:	5b                   	pop    ebx
c0016b91:	5e                   	pop    esi
c0016b92:	5f                   	pop    edi
c0016b93:	5d                   	pop    ebp
c0016b94:	c3                   	ret    

c0016b95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016b95:	55                   	push   ebp
c0016b96:	57                   	push   edi
c0016b97:	56                   	push   esi
c0016b98:	53                   	push   ebx
c0016b99:	83 ec 34             	sub    esp,0x34
c0016b9c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ba0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ba4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ba8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016bac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016bb4:	68 c8 26 02 c0       	push   0xc00226c8
c0016bb9:	e8 4c 3d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016bbe:	83 c4 10             	add    esp,0x10
c0016bc1:	fa                   	cli    
c0016bc2:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016bc8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016bce:	84 db                	test   bl,bl
c0016bd0:	75 15                	jne    c0016be7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016bd2:	e8 a1 f1 ff ff       	call   c0015d78 <schedule()>
c0016bd7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bdc:	48                   	dec    eax
c0016bdd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016be2:	75 dd                	jne    c0016bc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016be4:	fb                   	sti    
c0016be5:	eb da                	jmp    c0016bc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016be7:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016bf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bf5:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016bfa:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016bfe:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016c02:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016c06:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016c0a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016c0e:	50                   	push   eax
c0016c0f:	6a 20                	push   0x20
c0016c11:	6a 00                	push   0x0
c0016c13:	68 40 97 02 c0       	push   0xc0029740
c0016c18:	e8 d3 98 fe ff       	call   c00004f0 <memset>
c0016c1d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016c24:	e8 aa 0e ff ff       	call   c0007ad3 <malloc>
c0016c29:	83 c4 0c             	add    esp,0xc
c0016c2c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016c32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c36:	89 c5                	mov    ebp,eax
c0016c38:	50                   	push   eax
c0016c39:	e8 6e 4c ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c0016c3e:	83 c4 10             	add    esp,0x10
c0016c41:	85 ed                	test   ebp,ebp
c0016c43:	75 0a                	jne    c0016c4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016c45:	83 ec 0c             	sub    esp,0xc
c0016c48:	68 ea 26 02 c0       	push   0xc00226ea
c0016c4d:	eb 2b                	jmp    c0016c7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016c4f:	50                   	push   eax
c0016c50:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016c54:	50                   	push   eax
c0016c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016c59:	50                   	push   eax
c0016c5a:	55                   	push   ebp
c0016c5b:	e8 6c 4f ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0016c60:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016c64:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016c68:	83 c4 10             	add    esp,0x10
c0016c6b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016c70:	74 27                	je     c0016c99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	68 fe 26 02 c0       	push   0xc00226fe
c0016c7a:	e8 4a a6 ff ff       	call   c00112c9 <KePanic(char const*)>
c0016c7f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	48                   	dec    eax
c0016c88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c8d:	85 c0                	test   eax,eax
c0016c8f:	75 01                	jne    c0016c92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016c91:	fb                   	sti    
c0016c92:	31 db                	xor    ebx,ebx
c0016c94:	e9 90 00 00 00       	jmp    c0016d29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016c99:	51                   	push   ecx
c0016c9a:	51                   	push   ecx
c0016c9b:	6a 01                	push   0x1
c0016c9d:	55                   	push   ebp
c0016c9e:	e8 27 4c ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0016ca3:	83 c4 10             	add    esp,0x10
c0016ca6:	85 c0                	test   eax,eax
c0016ca8:	74 26                	je     c0016cd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016caa:	83 ec 0c             	sub    esp,0xc
c0016cad:	68 17 27 02 c0       	push   0xc0022717
c0016cb2:	e8 12 a6 ff ff       	call   c00112c9 <KePanic(char const*)>
c0016cb7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016cbc:	83 c4 10             	add    esp,0x10
c0016cbf:	48                   	dec    eax
c0016cc0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016cc5:	85 c0                	test   eax,eax
c0016cc7:	75 c9                	jne    c0016c92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016cc9:	fb                   	sti    
c0016cca:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016cce:	eb 59                	jmp    c0016d29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016cd0:	50                   	push   eax
c0016cd1:	0f b7 ff             	movzx  edi,di
c0016cd4:	50                   	push   eax
c0016cd5:	0f b7 f6             	movzx  esi,si
c0016cd8:	57                   	push   edi
c0016cd9:	56                   	push   esi
c0016cda:	e8 a7 fc ff ff       	call   c0016986 <Vm::realToLinear(unsigned short, unsigned short)>
c0016cdf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ce2:	5a                   	pop    edx
c0016ce3:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016ce7:	56                   	push   esi
c0016ce8:	50                   	push   eax
c0016ce9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ced:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016cf1:	55                   	push   ebp
c0016cf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cf5:	83 c4 14             	add    esp,0x14
c0016cf8:	55                   	push   ebp
c0016cf9:	e8 2a 4c ff ff       	call   c000b928 <File::close()>
c0016cfe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016d0d:	48                   	dec    eax
c0016d0e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016d13:	85 c0                	test   eax,eax
c0016d15:	75 01                	jne    c0016d18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016d17:	fb                   	sti    
c0016d18:	83 ec 0c             	sub    esp,0xc
c0016d1b:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016d21:	e8 4a f5 ff ff       	call   c0016270 <unblockTask(ThreadControlBlock*)>
c0016d26:	83 c4 10             	add    esp,0x10
c0016d29:	83 c4 2c             	add    esp,0x2c
c0016d2c:	88 d8                	mov    al,bl
c0016d2e:	5b                   	pop    ebx
c0016d2f:	5e                   	pop    esi
c0016d30:	5f                   	pop    edi
c0016d31:	5d                   	pop    ebp
c0016d32:	c3                   	ret    

c0016d33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016d33:	57                   	push   edi
c0016d34:	56                   	push   esi
c0016d35:	53                   	push   ebx
c0016d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d3e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016d42:	83 e8 06             	sub    eax,0x6
c0016d45:	0f b7 c0             	movzx  eax,ax
c0016d48:	50                   	push   eax
c0016d49:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016d4e:	50                   	push   eax
c0016d4f:	e8 32 fc ff ff       	call   c0016986 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d54:	5a                   	pop    edx
c0016d55:	59                   	pop    ecx
c0016d56:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016d59:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016d5c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016d5f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016d65:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016d68:	8d 51 02             	lea    edx,[ecx+0x2]
c0016d6b:	66 89 10             	mov    WORD PTR [eax],dx
c0016d6e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016d72:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016d76:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016d7a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016d7d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016d81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d87:	89 f1                	mov    ecx,esi
c0016d89:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016d8d:	89 f2                	mov    edx,esi
c0016d8f:	0f b6 d6             	movzx  edx,dh
c0016d92:	0f b6 f1             	movzx  esi,cl
c0016d95:	74 0a                	je     c0016da1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016d97:	c1 e2 08             	shl    edx,0x8
c0016d9a:	09 f2                	or     edx,esi
c0016d9c:	80 ce 02             	or     dh,0x2
c0016d9f:	eb 08                	jmp    c0016da9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016da1:	c1 e2 08             	shl    edx,0x8
c0016da4:	09 f2                	or     edx,esi
c0016da6:	80 e6 fd             	and    dh,0xfd
c0016da9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016dad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db2:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016db6:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016dbe:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016dc1:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016dc9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016dcc:	5b                   	pop    ebx
c0016dcd:	5e                   	pop    esi
c0016dce:	5f                   	pop    edi
c0016dcf:	c3                   	ret    

c0016dd0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016dd0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016dd5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dda:	c1 e0 04             	shl    eax,0x4
c0016ddd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016de0:	c3                   	ret    

c0016de1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016de1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016de6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016deb:	c1 e0 04             	shl    eax,0x4
c0016dee:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016df2:	c3                   	ret    

c0016df3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016df3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016df8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dfd:	c1 e0 04             	shl    eax,0x4
c0016e00:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016e03:	c3                   	ret    

c0016e04 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016e04:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e09:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e0e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016e12:	c1 e0 04             	shl    eax,0x4
c0016e15:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016e18:	c3                   	ret    

c0016e19 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016e19:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e1e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e27:	c1 e0 04             	shl    eax,0x4
c0016e2a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016e2e:	c3                   	ret    

c0016e2f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016e2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e34:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e3d:	c1 e0 04             	shl    eax,0x4
c0016e40:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016e43:	c3                   	ret    

c0016e44 <Vm::faultHandler(regs*)>:
c0016e44:	55                   	push   ebp
c0016e45:	57                   	push   edi
c0016e46:	56                   	push   esi
c0016e47:	53                   	push   ebx
c0016e48:	83 ec 2c             	sub    esp,0x2c
c0016e4b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e4f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e52:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016e56:	0f b7 f8             	movzx  edi,ax
c0016e59:	0f b7 c0             	movzx  eax,ax
c0016e5c:	52                   	push   edx
c0016e5d:	50                   	push   eax
c0016e5e:	e8 23 fb ff ff       	call   c0016986 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e63:	5a                   	pop    edx
c0016e64:	59                   	pop    ecx
c0016e65:	89 c1                	mov    ecx,eax
c0016e67:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e6e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016e73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e77:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016e7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e7e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e8b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e8f:	e8 f2 fa ff ff       	call   c0016986 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e94:	5e                   	pop    esi
c0016e95:	be 06 00 00 00       	mov    esi,0x6
c0016e9a:	5d                   	pop    ebp
c0016e9b:	31 ed                	xor    ebp,ebp
c0016e9d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016ea2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016ea5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016eab:	0f 84 74 02 00 00    	je     c0017125 <Vm::faultHandler(regs*)+0x2e1>
c0016eb1:	0f 87 94 00 00 00    	ja     c0016f4b <Vm::faultHandler(regs*)+0x107>
c0016eb7:	83 fa 66             	cmp    edx,0x66
c0016eba:	0f 84 e2 01 00 00    	je     c00170a2 <Vm::faultHandler(regs*)+0x25e>
c0016ec0:	77 47                	ja     c0016f09 <Vm::faultHandler(regs*)+0xc5>
c0016ec2:	83 fa 36             	cmp    edx,0x36
c0016ec5:	0f 84 ca 01 00 00    	je     c0017095 <Vm::faultHandler(regs*)+0x251>
c0016ecb:	77 1a                	ja     c0016ee7 <Vm::faultHandler(regs*)+0xa3>
c0016ecd:	83 fa 26             	cmp    edx,0x26
c0016ed0:	0f 84 98 01 00 00    	je     c001706e <Vm::faultHandler(regs*)+0x22a>
c0016ed6:	83 fa 2e             	cmp    edx,0x2e
c0016ed9:	0f 85 27 06 00 00    	jne    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0016edf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ee2:	31 f6                	xor    esi,esi
c0016ee4:	41                   	inc    ecx
c0016ee5:	eb bb                	jmp    c0016ea2 <Vm::faultHandler(regs*)+0x5e>
c0016ee7:	83 fa 64             	cmp    edx,0x64
c0016eea:	0f 84 8b 01 00 00    	je     c001707b <Vm::faultHandler(regs*)+0x237>
c0016ef0:	0f 87 92 01 00 00    	ja     c0017088 <Vm::faultHandler(regs*)+0x244>
c0016ef6:	83 fa 3e             	cmp    edx,0x3e
c0016ef9:	0f 85 07 06 00 00    	jne    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0016eff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f02:	be 01 00 00 00       	mov    esi,0x1
c0016f07:	eb db                	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c0016f09:	83 fa 6d             	cmp    edx,0x6d
c0016f0c:	0f 84 34 03 00 00    	je     c0017246 <Vm::faultHandler(regs*)+0x402>
c0016f12:	77 17                	ja     c0016f2b <Vm::faultHandler(regs*)+0xe7>
c0016f14:	83 fa 67             	cmp    edx,0x67
c0016f17:	0f 84 92 01 00 00    	je     c00170af <Vm::faultHandler(regs*)+0x26b>
c0016f1d:	83 fa 6c             	cmp    edx,0x6c
c0016f20:	0f 84 b1 02 00 00    	je     c00171d7 <Vm::faultHandler(regs*)+0x393>
c0016f26:	e9 db 05 00 00       	jmp    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0016f2b:	83 fa 6f             	cmp    edx,0x6f
c0016f2e:	0f 84 40 04 00 00    	je     c0017374 <Vm::faultHandler(regs*)+0x530>
c0016f34:	0f 82 a2 03 00 00    	jb     c00172dc <Vm::faultHandler(regs*)+0x498>
c0016f3a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016f40:	0f 84 76 01 00 00    	je     c00170bc <Vm::faultHandler(regs*)+0x278>
c0016f46:	e9 bb 05 00 00       	jmp    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0016f4b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016f51:	0f 84 57 05 00 00    	je     c00174ae <Vm::faultHandler(regs*)+0x66a>
c0016f57:	0f 87 a9 00 00 00    	ja     c0017006 <Vm::faultHandler(regs*)+0x1c2>
c0016f5d:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016f63:	0f 84 d6 04 00 00    	je     c001743f <Vm::faultHandler(regs*)+0x5fb>
c0016f69:	77 78                	ja     c0016fe3 <Vm::faultHandler(regs*)+0x19f>
c0016f6b:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016f71:	0f 84 0e 02 00 00    	je     c0017185 <Vm::faultHandler(regs*)+0x341>
c0016f77:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016f7d:	0f 85 83 05 00 00    	jne    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0016f83:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016f87:	89 d1                	mov    ecx,edx
c0016f89:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016f8c:	c1 e1 08             	shl    ecx,0x8
c0016f8f:	09 ca                	or     edx,ecx
c0016f91:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016f94:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016f98:	89 d1                	mov    ecx,edx
c0016f9a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016f9e:	c1 e1 08             	shl    ecx,0x8
c0016fa1:	09 ca                	or     edx,ecx
c0016fa3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016fa6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016faa:	89 d1                	mov    ecx,edx
c0016fac:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016fb0:	c1 e1 08             	shl    ecx,0x8
c0016fb3:	09 ca                	or     edx,ecx
c0016fb5:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fbb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fbe:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016fc2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fc8:	d1 e8                	shr    eax,1
c0016fca:	83 e0 01             	and    eax,0x1
c0016fcd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fd0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fd3:	83 c0 06             	add    eax,0x6
c0016fd6:	25 ff ff 00 00       	and    eax,0xffff
c0016fdb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016fde:	e9 1f 05 00 00       	jmp    c0017502 <Vm::faultHandler(regs*)+0x6be>
c0016fe3:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016fe9:	0f 84 95 04 00 00    	je     c0017484 <Vm::faultHandler(regs*)+0x640>
c0016fef:	0f 82 66 04 00 00    	jb     c001745b <Vm::faultHandler(regs*)+0x617>
c0016ff5:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016ffb:	0f 84 9a 04 00 00    	je     c001749b <Vm::faultHandler(regs*)+0x657>
c0017001:	e9 00 05 00 00       	jmp    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0017006:	81 fa ef 00 00 00    	cmp    edx,0xef
c001700c:	0f 84 dd 04 00 00    	je     c00174ef <Vm::faultHandler(regs*)+0x6ab>
c0017012:	77 2e                	ja     c0017042 <Vm::faultHandler(regs*)+0x1fe>
c0017014:	81 fa ed 00 00 00    	cmp    edx,0xed
c001701a:	0f 84 aa 04 00 00    	je     c00174ca <Vm::faultHandler(regs*)+0x686>
c0017020:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017026:	0f 85 da 04 00 00    	jne    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c001702c:	50                   	push   eax
c001702d:	50                   	push   eax
c001702e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017032:	50                   	push   eax
c0017033:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017037:	50                   	push   eax
c0017038:	e8 13 f9 ff ff       	call   c0016950 <Vm::outbv(unsigned short, unsigned char)>
c001703d:	e9 a5 04 00 00       	jmp    c00174e7 <Vm::faultHandler(regs*)+0x6a3>
c0017042:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017048:	0f 84 6d 01 00 00    	je     c00171bb <Vm::faultHandler(regs*)+0x377>
c001704e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017054:	0f 84 6f 01 00 00    	je     c00171c9 <Vm::faultHandler(regs*)+0x385>
c001705a:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017060:	0f 85 a0 04 00 00    	jne    c0017506 <Vm::faultHandler(regs*)+0x6c2>
c0017066:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017069:	e9 76 fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c001706e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017071:	be 02 00 00 00       	mov    esi,0x2
c0017076:	e9 69 fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c001707b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001707e:	be 03 00 00 00       	mov    esi,0x3
c0017083:	e9 5c fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c0017088:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001708b:	be 04 00 00 00       	mov    esi,0x4
c0017090:	e9 4f fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c0017095:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017098:	be 05 00 00 00       	mov    esi,0x5
c001709d:	e9 42 fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c00170a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00170a5:	bd 01 00 00 00       	mov    ebp,0x1
c00170aa:	e9 35 fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c00170af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00170b2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00170b7:	e9 28 fe ff ff       	jmp    c0016ee4 <Vm::faultHandler(regs*)+0xa0>
c00170bc:	83 e5 01             	and    ebp,0x1
c00170bf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00170c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00170c6:	74 30                	je     c00170f8 <Vm::faultHandler(regs*)+0x2b4>
c00170c8:	83 e9 04             	sub    ecx,0x4
c00170cb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00170d1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00170d7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00170da:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00170dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00170e3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00170e7:	0f 84 12 04 00 00    	je     c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00170ed:	80 ce 02             	or     dh,0x2
c00170f0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00170f3:	e9 07 04 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00170f8:	83 e9 02             	sub    ecx,0x2
c00170fb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017101:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017104:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017108:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001710e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017112:	74 05                	je     c0017119 <Vm::faultHandler(regs*)+0x2d5>
c0017114:	80 ce 02             	or     dh,0x2
c0017117:	eb 03                	jmp    c001711c <Vm::faultHandler(regs*)+0x2d8>
c0017119:	80 e6 fd             	and    dh,0xfd
c001711c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017120:	e9 da 03 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c0017125:	83 e5 01             	and    ebp,0x1
c0017128:	74 2a                	je     c0017154 <Vm::faultHandler(regs*)+0x310>
c001712a:	8b 10                	mov    edx,DWORD PTR [eax]
c001712c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017132:	81 ca 00 02 02 00    	or     edx,0x20200
c0017138:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001713b:	8b 00                	mov    eax,DWORD PTR [eax]
c001713d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017143:	c1 e8 09             	shr    eax,0x9
c0017146:	83 e0 01             	and    eax,0x1
c0017149:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001714c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001714f:	83 c0 04             	add    eax,0x4
c0017152:	eb 24                	jmp    c0017178 <Vm::faultHandler(regs*)+0x334>
c0017154:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017157:	81 ca 00 02 02 00    	or     edx,0x20200
c001715d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017160:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017163:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017169:	c1 e8 09             	shr    eax,0x9
c001716c:	83 e0 01             	and    eax,0x1
c001716f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017172:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017175:	83 c0 02             	add    eax,0x2
c0017178:	25 ff ff 00 00       	and    eax,0xffff
c001717d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017180:	e9 7a 03 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c0017185:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017189:	3d ee 00 00 00       	cmp    eax,0xee
c001718e:	75 10                	jne    c00171a0 <Vm::faultHandler(regs*)+0x35c>
c0017190:	83 ec 0c             	sub    esp,0xc
c0017193:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017196:	e8 52 f8 ff ff       	call   c00169ed <Vm::mainloop3(unsigned long)>
c001719b:	e9 4a 03 00 00       	jmp    c00174ea <Vm::faultHandler(regs*)+0x6a6>
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00171a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171ab:	51                   	push   ecx
c00171ac:	50                   	push   eax
c00171ad:	53                   	push   ebx
c00171ae:	e8 80 fb ff ff       	call   c0016d33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00171b3:	83 c4 20             	add    esp,0x20
c00171b6:	e9 47 03 00 00       	jmp    c0017502 <Vm::faultHandler(regs*)+0x6be>
c00171bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171c0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171c4:	e9 36 03 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00171c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ce:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00171d2:	e9 28 03 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00171d7:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00171dc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00171df:	74 2b                	je     c001720c <Vm::faultHandler(regs*)+0x3c8>
c00171e1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00171e8:	76 22                	jbe    c001720c <Vm::faultHandler(regs*)+0x3c8>
c00171ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171ee:	50                   	push   eax
c00171ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171f3:	50                   	push   eax
c00171f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171f8:	50                   	push   eax
c00171f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171fd:	50                   	push   eax
c00171fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017202:	50                   	push   eax
c0017203:	6a 6c                	push   0x6c
c0017205:	6a 6c                	push   0x6c
c0017207:	e9 c0 01 00 00       	jmp    c00173cc <Vm::faultHandler(regs*)+0x588>
c001720c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	0f b7 f6             	movzx  esi,si
c0017216:	50                   	push   eax
c0017217:	e8 21 f7 ff ff       	call   c001693d <Vm::inbv(unsigned short)>
c001721c:	83 c4 0c             	add    esp,0xc
c001721f:	0f b6 c0             	movzx  eax,al
c0017222:	50                   	push   eax
c0017223:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017227:	50                   	push   eax
c0017228:	56                   	push   esi
c0017229:	e8 d6 fb ff ff       	call   c0016e04 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001722e:	83 c4 10             	add    esp,0x10
c0017231:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017234:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017238:	74 03                	je     c001723d <Vm::faultHandler(regs*)+0x3f9>
c001723a:	48                   	dec    eax
c001723b:	eb 01                	jmp    c001723e <Vm::faultHandler(regs*)+0x3fa>
c001723d:	40                   	inc    eax
c001723e:	0f b7 c0             	movzx  eax,ax
c0017241:	e9 8e 00 00 00       	jmp    c00172d4 <Vm::faultHandler(regs*)+0x490>
c0017246:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001724b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001724e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017251:	74 29                	je     c001727c <Vm::faultHandler(regs*)+0x438>
c0017253:	3d ff ff 00 00       	cmp    eax,0xffff
c0017258:	76 22                	jbe    c001727c <Vm::faultHandler(regs*)+0x438>
c001725a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001725e:	50                   	push   eax
c001725f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017263:	50                   	push   eax
c0017264:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017268:	50                   	push   eax
c0017269:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001726d:	50                   	push   eax
c001726e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017272:	50                   	push   eax
c0017273:	6a 6d                	push   0x6d
c0017275:	6a 6d                	push   0x6d
c0017277:	e9 50 01 00 00       	jmp    c00173cc <Vm::faultHandler(regs*)+0x588>
c001727c:	83 e5 01             	and    ebp,0x1
c001727f:	0f b7 c8             	movzx  ecx,ax
c0017282:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017285:	0f b7 f6             	movzx  esi,si
c0017288:	74 1e                	je     c00172a8 <Vm::faultHandler(regs*)+0x464>
c001728a:	ed                   	in     eax,dx
c001728b:	55                   	push   ebp
c001728c:	50                   	push   eax
c001728d:	51                   	push   ecx
c001728e:	56                   	push   esi
c001728f:	e8 9b fb ff ff       	call   c0016e2f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017294:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	8d 50 04             	lea    edx,[eax+0x4]
c001729d:	83 e8 04             	sub    eax,0x4
c00172a0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00172a6:	eb 20                	jmp    c00172c8 <Vm::faultHandler(regs*)+0x484>
c00172a8:	66 ed                	in     ax,dx
c00172aa:	57                   	push   edi
c00172ab:	0f b7 c0             	movzx  eax,ax
c00172ae:	50                   	push   eax
c00172af:	51                   	push   ecx
c00172b0:	56                   	push   esi
c00172b1:	e8 63 fb ff ff       	call   c0016e19 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00172b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	8d 50 02             	lea    edx,[eax+0x2]
c00172bf:	83 e8 02             	sub    eax,0x2
c00172c2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00172c8:	25 ff ff 00 00       	and    eax,0xffff
c00172cd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00172d1:	0f 44 c2             	cmove  eax,edx
c00172d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00172d7:	e9 23 02 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00172dc:	8d 46 ff             	lea    eax,[esi-0x1]
c00172df:	0f b6 f0             	movzx  esi,al
c00172e2:	83 fe 05             	cmp    esi,0x5
c00172e5:	77 23                	ja     c001730a <Vm::faultHandler(regs*)+0x4c6>
c00172e7:	ff 24 b5 8c 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd874]
c00172ee:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00172f3:	eb 15                	jmp    c001730a <Vm::faultHandler(regs*)+0x4c6>
c00172f5:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00172f9:	eb 0f                	jmp    c001730a <Vm::faultHandler(regs*)+0x4c6>
c00172fb:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00172ff:	eb 09                	jmp    c001730a <Vm::faultHandler(regs*)+0x4c6>
c0017301:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017305:	eb 03                	jmp    c001730a <Vm::faultHandler(regs*)+0x4c6>
c0017307:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001730a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001730f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017312:	74 29                	je     c001733d <Vm::faultHandler(regs*)+0x4f9>
c0017314:	3d ff ff 00 00       	cmp    eax,0xffff
c0017319:	76 22                	jbe    c001733d <Vm::faultHandler(regs*)+0x4f9>
c001731b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001731f:	50                   	push   eax
c0017320:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017324:	50                   	push   eax
c0017325:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017329:	50                   	push   eax
c001732a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001732e:	50                   	push   eax
c001732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017333:	50                   	push   eax
c0017334:	6a 6e                	push   0x6e
c0017336:	6a 6e                	push   0x6e
c0017338:	e9 8f 00 00 00       	jmp    c00173cc <Vm::faultHandler(regs*)+0x588>
c001733d:	52                   	push   edx
c001733e:	0f b7 c0             	movzx  eax,ax
c0017341:	52                   	push   edx
c0017342:	50                   	push   eax
c0017343:	57                   	push   edi
c0017344:	e8 87 fa ff ff       	call   c0016dd0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017349:	59                   	pop    ecx
c001734a:	5e                   	pop    esi
c001734b:	0f b6 c0             	movzx  eax,al
c001734e:	50                   	push   eax
c001734f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017353:	50                   	push   eax
c0017354:	e8 f7 f5 ff ff       	call   c0016950 <Vm::outbv(unsigned short, unsigned char)>
c0017359:	83 c4 10             	add    esp,0x10
c001735c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001735f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017363:	74 03                	je     c0017368 <Vm::faultHandler(regs*)+0x524>
c0017365:	48                   	dec    eax
c0017366:	eb 01                	jmp    c0017369 <Vm::faultHandler(regs*)+0x525>
c0017368:	40                   	inc    eax
c0017369:	0f b7 c0             	movzx  eax,ax
c001736c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001736f:	e9 8b 01 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c0017374:	8d 46 ff             	lea    eax,[esi-0x1]
c0017377:	0f b6 f0             	movzx  esi,al
c001737a:	83 fe 05             	cmp    esi,0x5
c001737d:	77 1e                	ja     c001739d <Vm::faultHandler(regs*)+0x559>
c001737f:	ff 24 b5 a4 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd85c]
c0017386:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001738a:	eb 11                	jmp    c001739d <Vm::faultHandler(regs*)+0x559>
c001738c:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001738f:	eb 0c                	jmp    c001739d <Vm::faultHandler(regs*)+0x559>
c0017391:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017394:	eb 07                	jmp    c001739d <Vm::faultHandler(regs*)+0x559>
c0017396:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017399:	eb 02                	jmp    c001739d <Vm::faultHandler(regs*)+0x559>
c001739b:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001739d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00173a2:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00173a5:	74 37                	je     c00173de <Vm::faultHandler(regs*)+0x59a>
c00173a7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00173ad:	76 2f                	jbe    c00173de <Vm::faultHandler(regs*)+0x59a>
c00173af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00173b3:	50                   	push   eax
c00173b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00173b8:	50                   	push   eax
c00173b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00173bd:	50                   	push   eax
c00173be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00173c2:	50                   	push   eax
c00173c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173c7:	50                   	push   eax
c00173c8:	6a 6f                	push   0x6f
c00173ca:	6a 6f                	push   0x6f
c00173cc:	68 30 27 02 c0       	push   0xc0022730
c00173d1:	e8 34 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173d6:	83 c4 20             	add    esp,0x20
c00173d9:	e9 86 01 00 00       	jmp    c0017564 <Vm::faultHandler(regs*)+0x720>
c00173de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00173e1:	0f b7 d7             	movzx  edx,di
c00173e4:	0f b7 c6             	movzx  eax,si
c00173e7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00173ea:	81 e1 00 04 00 00    	and    ecx,0x400
c00173f0:	83 e5 01             	and    ebp,0x1
c00173f3:	74 1c                	je     c0017411 <Vm::faultHandler(regs*)+0x5cd>
c00173f5:	55                   	push   ebp
c00173f6:	55                   	push   ebp
c00173f7:	50                   	push   eax
c00173f8:	52                   	push   edx
c00173f9:	e8 f5 f9 ff ff       	call   c0016df3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00173fe:	83 c4 10             	add    esp,0x10
c0017401:	89 fa                	mov    edx,edi
c0017403:	ef                   	out    dx,eax
c0017404:	8d 46 04             	lea    eax,[esi+0x4]
c0017407:	83 ee 04             	sub    esi,0x4
c001740a:	25 ff ff 00 00       	and    eax,0xffff
c001740f:	eb 1b                	jmp    c001742c <Vm::faultHandler(regs*)+0x5e8>
c0017411:	55                   	push   ebp
c0017412:	55                   	push   ebp
c0017413:	50                   	push   eax
c0017414:	52                   	push   edx
c0017415:	e8 c7 f9 ff ff       	call   c0016de1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001741a:	83 c4 10             	add    esp,0x10
c001741d:	89 fa                	mov    edx,edi
c001741f:	66 ef                	out    dx,ax
c0017421:	8d 46 02             	lea    eax,[esi+0x2]
c0017424:	83 ee 02             	sub    esi,0x2
c0017427:	25 ff ff 00 00       	and    eax,0xffff
c001742c:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017432:	85 c9                	test   ecx,ecx
c0017434:	0f 44 f0             	cmove  esi,eax
c0017437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001743a:	e9 c0 00 00 00       	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c001743f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017446:	83 ec 0c             	sub    esp,0xc
c0017449:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001744d:	50                   	push   eax
c001744e:	e8 ea f4 ff ff       	call   c001693d <Vm::inbv(unsigned short)>
c0017453:	0f b6 c0             	movzx  eax,al
c0017456:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017459:	eb 3a                	jmp    c0017495 <Vm::faultHandler(regs*)+0x651>
c001745b:	83 e5 01             	and    ebp,0x1
c001745e:	74 07                	je     c0017467 <Vm::faultHandler(regs*)+0x623>
c0017460:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017464:	ed                   	in     eax,dx
c0017465:	eb 14                	jmp    c001747b <Vm::faultHandler(regs*)+0x637>
c0017467:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001746a:	66 31 f6             	xor    si,si
c001746d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017470:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017474:	66 ed                	in     ax,dx
c0017476:	0f b7 c0             	movzx  eax,ax
c0017479:	09 f0                	or     eax,esi
c001747b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001747e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017482:	eb 7e                	jmp    c0017502 <Vm::faultHandler(regs*)+0x6be>
c0017484:	52                   	push   edx
c0017485:	52                   	push   edx
c0017486:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001748a:	50                   	push   eax
c001748b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001748f:	50                   	push   eax
c0017490:	e8 bb f4 ff ff       	call   c0016950 <Vm::outbv(unsigned short, unsigned char)>
c0017495:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017499:	eb 4f                	jmp    c00174ea <Vm::faultHandler(regs*)+0x6a6>
c001749b:	83 e5 01             	and    ebp,0x1
c001749e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00174a1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00174a5:	74 03                	je     c00174aa <Vm::faultHandler(regs*)+0x666>
c00174a7:	ef                   	out    dx,eax
c00174a8:	eb d4                	jmp    c001747e <Vm::faultHandler(regs*)+0x63a>
c00174aa:	66 ef                	out    dx,ax
c00174ac:	eb d0                	jmp    c001747e <Vm::faultHandler(regs*)+0x63a>
c00174ae:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174b2:	83 ec 0c             	sub    esp,0xc
c00174b5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00174bc:	50                   	push   eax
c00174bd:	e8 7b f4 ff ff       	call   c001693d <Vm::inbv(unsigned short)>
c00174c2:	0f b6 c0             	movzx  eax,al
c00174c5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00174c8:	eb 1d                	jmp    c00174e7 <Vm::faultHandler(regs*)+0x6a3>
c00174ca:	83 e5 01             	and    ebp,0x1
c00174cd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174d0:	74 03                	je     c00174d5 <Vm::faultHandler(regs*)+0x691>
c00174d2:	ed                   	in     eax,dx
c00174d3:	eb 0d                	jmp    c00174e2 <Vm::faultHandler(regs*)+0x69e>
c00174d5:	66 ed                	in     ax,dx
c00174d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00174da:	0f b7 c0             	movzx  eax,ax
c00174dd:	66 31 d2             	xor    dx,dx
c00174e0:	09 d0                	or     eax,edx
c00174e2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00174e5:	eb 18                	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00174e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174ea:	83 c4 10             	add    esp,0x10
c00174ed:	eb 13                	jmp    c0017502 <Vm::faultHandler(regs*)+0x6be>
c00174ef:	83 e5 01             	and    ebp,0x1
c00174f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00174f5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174f8:	74 03                	je     c00174fd <Vm::faultHandler(regs*)+0x6b9>
c00174fa:	ef                   	out    dx,eax
c00174fb:	eb 02                	jmp    c00174ff <Vm::faultHandler(regs*)+0x6bb>
c00174fd:	66 ef                	out    dx,ax
c00174ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017502:	b0 01                	mov    al,0x1
c0017504:	eb 60                	jmp    c0017566 <Vm::faultHandler(regs*)+0x722>
c0017506:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001750a:	50                   	push   eax
c001750b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001750f:	50                   	push   eax
c0017510:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017514:	50                   	push   eax
c0017515:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017519:	50                   	push   eax
c001751a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001751e:	50                   	push   eax
c001751f:	52                   	push   edx
c0017520:	52                   	push   edx
c0017521:	68 5d 27 02 c0       	push   0xc002275d
c0017526:	e8 df 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001752b:	83 c4 20             	add    esp,0x20
c001752e:	83 ec 0c             	sub    esp,0xc
c0017531:	6a 60                	push   0x60
c0017533:	e8 05 f4 ff ff       	call   c001693d <Vm::inbv(unsigned short)>
c0017538:	83 c4 10             	add    esp,0x10
c001753b:	0f b6 d0             	movzx  edx,al
c001753e:	83 fa 1c             	cmp    edx,0x1c
c0017541:	74 05                	je     c0017548 <Vm::faultHandler(regs*)+0x704>
c0017543:	83 fa 5a             	cmp    edx,0x5a
c0017546:	75 e6                	jne    c001752e <Vm::faultHandler(regs*)+0x6ea>
c0017548:	0f b6 c0             	movzx  eax,al
c001754b:	83 f8 1c             	cmp    eax,0x1c
c001754e:	74 05                	je     c0017555 <Vm::faultHandler(regs*)+0x711>
c0017550:	83 f8 5a             	cmp    eax,0x5a
c0017553:	75 0f                	jne    c0017564 <Vm::faultHandler(regs*)+0x720>
c0017555:	83 ec 0c             	sub    esp,0xc
c0017558:	6a 60                	push   0x60
c001755a:	e8 de f3 ff ff       	call   c001693d <Vm::inbv(unsigned short)>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	eb e4                	jmp    c0017548 <Vm::faultHandler(regs*)+0x704>
c0017564:	31 c0                	xor    eax,eax
c0017566:	83 c4 2c             	add    esp,0x2c
c0017569:	5b                   	pop    ebx
c001756a:	5e                   	pop    esi
c001756b:	5f                   	pop    edi
c001756c:	5d                   	pop    ebp
c001756d:	c3                   	ret    

c001756e <noCopro(unsigned long)>:
c001756e:	c3                   	ret    

c001756f <nmiHandler(regs*, void*)>:
c001756f:	83 ec 0c             	sub    esp,0xc
c0017572:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017577:	83 ec 0c             	sub    esp,0xc
c001757a:	50                   	push   eax
c001757b:	e8 56 fd fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	90                   	nop
c0017584:	83 c4 0c             	add    esp,0xc
c0017587:	c3                   	ret    

c0017588 <doubleFault(regs*, void*)>:
c0017588:	55                   	push   ebp
c0017589:	89 e5                	mov    ebp,esp
c001758b:	83 ec 08             	sub    esp,0x8
c001758e:	83 ec 0c             	sub    esp,0xc
c0017591:	68 bc 27 02 c0       	push   0xc00227bc
c0017596:	e8 2e 9d ff ff       	call   c00112c9 <KePanic(char const*)>
c001759b:	83 c4 10             	add    esp,0x10
c001759e:	90                   	nop
c001759f:	c9                   	leave  
c00175a0:	c3                   	ret    

c00175a1 <displayDebugInfo(regs*)>:
c00175a1:	83 ec 1c             	sub    esp,0x1c
c00175a4:	0f 20 c0             	mov    eax,cr0
c00175a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175ab:	0f 20 d0             	mov    eax,cr2
c00175ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00175b2:	0f 20 d8             	mov    eax,cr3
c00175b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00175b9:	0f 20 e0             	mov    eax,cr4
c00175bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00175bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175c3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00175c6:	83 ec 08             	sub    esp,0x8
c00175c9:	50                   	push   eax
c00175ca:	68 d8 27 02 c0       	push   0xc00227d8
c00175cf:	e8 36 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00175de:	83 ec 08             	sub    esp,0x8
c00175e1:	50                   	push   eax
c00175e2:	68 c9 27 02 c0       	push   0xc00227c9
c00175e7:	e8 1e 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00175ec:	83 c4 10             	add    esp,0x10
c00175ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175f3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00175f6:	83 ec 08             	sub    esp,0x8
c00175f9:	50                   	push   eax
c00175fa:	68 d4 27 02 c0       	push   0xc00227d4
c00175ff:	e8 06 33 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001760b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001760e:	83 ec 08             	sub    esp,0x8
c0017611:	50                   	push   eax
c0017612:	68 e3 27 02 c0       	push   0xc00227e3
c0017617:	e8 ee 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017623:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017626:	83 ec 08             	sub    esp,0x8
c0017629:	50                   	push   eax
c001762a:	68 ee 27 02 c0       	push   0xc00227ee
c001762f:	e8 d6 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017634:	83 c4 10             	add    esp,0x10
c0017637:	83 ec 08             	sub    esp,0x8
c001763a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001763e:	68 f9 27 02 c0       	push   0xc00227f9
c0017643:	e8 c2 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017648:	83 c4 10             	add    esp,0x10
c001764b:	83 ec 08             	sub    esp,0x8
c001764e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017652:	68 04 28 02 c0       	push   0xc0022804
c0017657:	e8 ae 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001765c:	83 c4 10             	add    esp,0x10
c001765f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017663:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017666:	c1 e0 05             	shl    eax,0x5
c0017669:	8d 90 80 37 02 c0    	lea    edx,[eax-0x3ffdc880]
c001766f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017673:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017676:	83 ec 04             	sub    esp,0x4
c0017679:	52                   	push   edx
c001767a:	50                   	push   eax
c001767b:	68 0f 28 02 c0       	push   0xc002280f
c0017680:	e8 85 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017685:	83 c4 10             	add    esp,0x10
c0017688:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001768d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017693:	83 ec 0c             	sub    esp,0xc
c0017696:	50                   	push   eax
c0017697:	e8 d3 10 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c001769c:	83 c4 10             	add    esp,0x10
c001769f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176aa:	83 ec 08             	sub    esp,0x8
c00176ad:	68 1e 28 02 c0       	push   0xc002281e
c00176b2:	50                   	push   eax
c00176b3:	e8 f4 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176ca:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00176cd:	83 ec 08             	sub    esp,0x8
c00176d0:	52                   	push   edx
c00176d1:	50                   	push   eax
c00176d2:	e8 8f 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176e5:	83 ec 08             	sub    esp,0x8
c00176e8:	68 2c 28 02 c0       	push   0xc002282c
c00176ed:	50                   	push   eax
c00176ee:	e8 b9 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176f3:	83 c4 10             	add    esp,0x10
c00176f6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017701:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017706:	8b 12                	mov    edx,DWORD PTR [edx]
c0017708:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001770b:	83 c2 0c             	add    edx,0xc
c001770e:	83 ec 08             	sub    esp,0x8
c0017711:	52                   	push   edx
c0017712:	50                   	push   eax
c0017713:	e8 94 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017718:	83 c4 10             	add    esp,0x10
c001771b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017720:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017726:	83 ec 08             	sub    esp,0x8
c0017729:	68 35 28 02 c0       	push   0xc0022835
c001772e:	50                   	push   eax
c001772f:	e8 78 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017734:	83 c4 10             	add    esp,0x10
c0017737:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001773c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017742:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017746:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017749:	83 ec 08             	sub    esp,0x8
c001774c:	52                   	push   edx
c001774d:	50                   	push   eax
c001774e:	e8 13 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017753:	83 c4 10             	add    esp,0x10
c0017756:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001775b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017761:	83 ec 08             	sub    esp,0x8
c0017764:	68 3d 28 02 c0       	push   0xc002283d
c0017769:	50                   	push   eax
c001776a:	e8 3d 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001777d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017781:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017784:	83 ec 08             	sub    esp,0x8
c0017787:	52                   	push   edx
c0017788:	50                   	push   eax
c0017789:	e8 d8 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001778e:	83 c4 10             	add    esp,0x10
c0017791:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017796:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001779c:	83 ec 08             	sub    esp,0x8
c001779f:	68 45 28 02 c0       	push   0xc0022845
c00177a4:	50                   	push   eax
c00177a5:	e8 02 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00177aa:	83 c4 10             	add    esp,0x10
c00177ad:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177bc:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00177bf:	83 ec 08             	sub    esp,0x8
c00177c2:	52                   	push   edx
c00177c3:	50                   	push   eax
c00177c4:	e8 9d 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177d7:	83 ec 08             	sub    esp,0x8
c00177da:	68 4d 28 02 c0       	push   0xc002284d
c00177df:	50                   	push   eax
c00177e0:	e8 c7 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177f7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00177fa:	83 ec 08             	sub    esp,0x8
c00177fd:	52                   	push   edx
c00177fe:	50                   	push   eax
c00177ff:	e8 62 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001780c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017812:	83 ec 08             	sub    esp,0x8
c0017815:	68 55 28 02 c0       	push   0xc0022855
c001781a:	50                   	push   eax
c001781b:	e8 8c 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017820:	83 c4 10             	add    esp,0x10
c0017823:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017828:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001782e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017832:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017835:	83 ec 08             	sub    esp,0x8
c0017838:	52                   	push   edx
c0017839:	50                   	push   eax
c001783a:	e8 27 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017847:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001784d:	83 ec 08             	sub    esp,0x8
c0017850:	68 5d 28 02 c0       	push   0xc002285d
c0017855:	50                   	push   eax
c0017856:	e8 51 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001785b:	83 c4 10             	add    esp,0x10
c001785e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017863:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017869:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001786d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017870:	83 ec 08             	sub    esp,0x8
c0017873:	52                   	push   edx
c0017874:	50                   	push   eax
c0017875:	e8 ec 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017882:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017888:	83 ec 08             	sub    esp,0x8
c001788b:	68 65 28 02 c0       	push   0xc0022865
c0017890:	50                   	push   eax
c0017891:	e8 16 12 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001789e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178a4:	83 ec 08             	sub    esp,0x8
c00178a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178ab:	50                   	push   eax
c00178ac:	e8 b5 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00178b1:	83 c4 10             	add    esp,0x10
c00178b4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178bf:	83 ec 08             	sub    esp,0x8
c00178c2:	68 6e 28 02 c0       	push   0xc002286e
c00178c7:	50                   	push   eax
c00178c8:	e8 df 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178db:	83 ec 08             	sub    esp,0x8
c00178de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00178e2:	50                   	push   eax
c00178e3:	e8 7e 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00178e8:	83 c4 10             	add    esp,0x10
c00178eb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178f6:	83 ec 08             	sub    esp,0x8
c00178f9:	68 76 28 02 c0       	push   0xc0022876
c00178fe:	50                   	push   eax
c00178ff:	e8 a8 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001790c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017912:	83 ec 08             	sub    esp,0x8
c0017915:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017919:	50                   	push   eax
c001791a:	e8 47 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	fa                   	cli    
c0017923:	f4                   	hlt    
c0017924:	eb fe                	jmp    c0017924 <displayDebugInfo(regs*)+0x383>

c0017926 <HalSystemIdle()>:
c0017926:	56                   	push   esi
c0017927:	53                   	push   ebx
c0017928:	83 ec 14             	sub    esp,0x14
c001792b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017930:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017936:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001793c:	83 e0 04             	and    eax,0x4
c001793f:	0f b6 c0             	movzx  eax,al
c0017942:	85 c0                	test   eax,eax
c0017944:	0f 95 c0             	setne  al
c0017947:	0f b6 c0             	movzx  eax,al
c001794a:	85 c0                	test   eax,eax
c001794c:	74 4c                	je     c001799a <HalSystemIdle()+0x74>
c001794e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017953:	83 ec 08             	sub    esp,0x8
c0017956:	68 e1 00 00 00       	push   0xe1
c001795b:	50                   	push   eax
c001795c:	e8 81 f7 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001796c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017971:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017975:	83 e2 02             	and    edx,0x2
c0017978:	89 d3                	mov    ebx,edx
c001797a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001797e:	83 e2 00             	and    edx,0x0
c0017981:	89 d6                	mov    esi,edx
c0017983:	56                   	push   esi
c0017984:	53                   	push   ebx
c0017985:	68 e1 00 00 00       	push   0xe1
c001798a:	50                   	push   eax
c001798b:	e8 7e f7 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	e8 fc 87 fe ff       	call   c0000194 <doTPAUSE>
c0017998:	eb 01                	jmp    c001799b <HalSystemIdle()+0x75>
c001799a:	f4                   	hlt    
c001799b:	90                   	nop
c001799c:	83 c4 14             	add    esp,0x14
c001799f:	5b                   	pop    ebx
c00179a0:	5e                   	pop    esi
c00179a1:	c3                   	ret    

c00179a2 <displayProgramFault(char const*)>:
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	83 ec 0c             	sub    esp,0xc
c00179a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179ac:	e8 59 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00179b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179c4:	85 c0                	test   eax,eax
c00179c6:	74 21                	je     c00179e9 <displayProgramFault(char const*)+0x47>
c00179c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00179cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00179cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d8:	6a 04                	push   0x4
c00179da:	6a 0f                	push   0xf
c00179dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e0:	50                   	push   eax
c00179e1:	e8 38 11 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	90                   	nop
c00179ea:	83 c4 0c             	add    esp,0xc
c00179ed:	c3                   	ret    

c00179ee <gpFault(regs*, void*)>:
c00179ee:	83 ec 1c             	sub    esp,0x1c
c00179f1:	c7 05 74 97 02 c0 44 6e 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016e44
c00179fb:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017a00:	85 c0                	test   eax,eax
c0017a02:	74 1e                	je     c0017a22 <gpFault(regs*, void*)+0x34>
c0017a04:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017a09:	83 ec 0c             	sub    esp,0xc
c0017a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a10:	ff d0                	call   eax
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a19:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a1e:	85 c0                	test   eax,eax
c0017a20:	75 2e                	jne    c0017a50 <gpFault(regs*, void*)+0x62>
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	68 7e 28 02 c0       	push   0xc002287e
c0017a2a:	e8 73 ff ff ff       	call   c00179a2 <displayProgramFault(char const*)>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	83 ec 0c             	sub    esp,0xc
c0017a35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a39:	e8 63 fb ff ff       	call   c00175a1 <displayDebugInfo(regs*)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	83 ec 0c             	sub    esp,0xc
c0017a44:	6a 00                	push   0x0
c0017a46:	e8 99 ed ff ff       	call   c00167e4 <Thr::terminateFromIRQ(int)>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	eb 01                	jmp    c0017a51 <gpFault(regs*, void*)+0x63>
c0017a50:	90                   	nop
c0017a51:	83 c4 1c             	add    esp,0x1c
c0017a54:	c3                   	ret    

c0017a55 <pgFault(regs*, void*)>:
c0017a55:	83 ec 1c             	sub    esp,0x1c
c0017a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017a5f:	0f 20 d0             	mov    eax,cr2
c0017a62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a6a:	83 ec 04             	sub    esp,0x4
c0017a6d:	52                   	push   edx
c0017a6e:	50                   	push   eax
c0017a6f:	68 5c 29 02 c0       	push   0xc002295c
c0017a74:	e8 91 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a83:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a86:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017a8c:	0f 20 d2             	mov    edx,cr2
c0017a8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017a93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a97:	83 ec 08             	sub    esp,0x8
c0017a9a:	52                   	push   edx
c0017a9b:	50                   	push   eax
c0017a9c:	e8 d9 28 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	0f b6 c0             	movzx  eax,al
c0017aa7:	85 c0                	test   eax,eax
c0017aa9:	75 2e                	jne    c0017ad9 <pgFault(regs*, void*)+0x84>
c0017aab:	83 ec 0c             	sub    esp,0xc
c0017aae:	68 97 28 02 c0       	push   0xc0022897
c0017ab3:	e8 ea fe ff ff       	call   c00179a2 <displayProgramFault(char const*)>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	83 ec 0c             	sub    esp,0xc
c0017abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ac2:	e8 da fa ff ff       	call   c00175a1 <displayDebugInfo(regs*)>
c0017ac7:	83 c4 10             	add    esp,0x10
c0017aca:	83 ec 0c             	sub    esp,0xc
c0017acd:	6a 00                	push   0x0
c0017acf:	e8 10 ed ff ff       	call   c00167e4 <Thr::terminateFromIRQ(int)>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	eb 01                	jmp    c0017ada <pgFault(regs*, void*)+0x85>
c0017ad9:	90                   	nop
c0017ada:	83 c4 1c             	add    esp,0x1c
c0017add:	c3                   	ret    

c0017ade <otherISRHandler(regs*, void*)>:
c0017ade:	83 ec 0c             	sub    esp,0xc
c0017ae1:	83 ec 0c             	sub    esp,0xc
c0017ae4:	68 84 29 02 c0       	push   0xc0022984
c0017ae9:	e8 b4 fe ff ff       	call   c00179a2 <displayProgramFault(char const*)>
c0017aee:	83 c4 10             	add    esp,0x10
c0017af1:	83 ec 0c             	sub    esp,0xc
c0017af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017af8:	e8 a4 fa ff ff       	call   c00175a1 <displayDebugInfo(regs*)>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	83 ec 0c             	sub    esp,0xc
c0017b03:	6a 00                	push   0x0
c0017b05:	e8 da ec ff ff       	call   c00167e4 <Thr::terminateFromIRQ(int)>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	90                   	nop
c0017b0e:	83 c4 0c             	add    esp,0xc
c0017b11:	c3                   	ret    

c0017b12 <opcodeFault(regs*, void*)>:
c0017b12:	55                   	push   ebp
c0017b13:	89 e5                	mov    ebp,esp
c0017b15:	83 ec 08             	sub    esp,0x8
c0017b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b1e:	83 ec 08             	sub    esp,0x8
c0017b21:	50                   	push   eax
c0017b22:	68 a2 28 02 c0       	push   0xc00228a2
c0017b27:	e8 de 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b2c:	83 c4 10             	add    esp,0x10
c0017b2f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017b3a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017b40:	0f b6 c0             	movzx  eax,al
c0017b43:	85 c0                	test   eax,eax
c0017b45:	74 21                	je     c0017b68 <opcodeFault(regs*, void*)+0x56>
c0017b47:	83 ec 0c             	sub    esp,0xc
c0017b4a:	68 ac 29 02 c0       	push   0xc00229ac
c0017b4f:	e8 b6 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b54:	83 c4 10             	add    esp,0x10
c0017b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b5d:	8d 50 19             	lea    edx,[eax+0x19]
c0017b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b63:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b66:	eb 2b                	jmp    c0017b93 <opcodeFault(regs*, void*)+0x81>
c0017b68:	83 ec 0c             	sub    esp,0xc
c0017b6b:	68 b0 28 02 c0       	push   0xc00228b0
c0017b70:	e8 2d fe ff ff       	call   c00179a2 <displayProgramFault(char const*)>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017b7e:	e8 1e fa ff ff       	call   c00175a1 <displayDebugInfo(regs*)>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	6a 00                	push   0x0
c0017b8b:	e8 54 ec ff ff       	call   c00167e4 <Thr::terminateFromIRQ(int)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	c9                   	leave  
c0017b94:	c3                   	ret    

c0017b95 <i386SaveCoprocessor(void*)>:
c0017b95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b99:	83 c0 3f             	add    eax,0x3f
c0017b9c:	83 e0 c0             	and    eax,0xffffffc0
c0017b9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ba3:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017ba9 <i386LoadCoprocessor(void*)>:
c0017ba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bad:	83 c0 3f             	add    eax,0x3f
c0017bb0:	83 e0 c0             	and    eax,0xffffffc0
c0017bb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bb7:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017bbd <x87EmulHandler(regs*, void*)>:
c0017bbd:	53                   	push   ebx
c0017bbe:	83 ec 08             	sub    esp,0x8
c0017bc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bc6:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017bca:	74 10                	je     c0017bdc <x87EmulHandler(regs*, void*)+0x1f>
c0017bcc:	83 ec 0c             	sub    esp,0xc
c0017bcf:	68 bd 28 02 c0       	push   0xc00228bd
c0017bd4:	e8 f0 96 ff ff       	call   c00112c9 <KePanic(char const*)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	0f 20 c0             	mov    eax,cr0
c0017bdf:	a8 08                	test   al,0x8
c0017be1:	74 59                	je     c0017c3c <x87EmulHandler(regs*, void*)+0x7f>
c0017be3:	0f 06                	clts   
c0017be5:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017bea:	85 c0                	test   eax,eax
c0017bec:	74 0e                	je     c0017bfc <x87EmulHandler(regs*, void*)+0x3f>
c0017bee:	83 ec 0c             	sub    esp,0xc
c0017bf1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017bf4:	e8 9c ff ff ff       	call   c0017b95 <i386SaveCoprocessor(void*)>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017c02:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017c06:	75 12                	jne    c0017c1a <x87EmulHandler(regs*, void*)+0x5d>
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	68 40 02 00 00       	push   0x240
c0017c10:	e8 be fe fe ff       	call   c0007ad3 <malloc>
c0017c15:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017c18:	eb 10                	jmp    c0017c2a <x87EmulHandler(regs*, void*)+0x6d>
c0017c1a:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017c25:	e8 7f ff ff ff       	call   c0017ba9 <i386LoadCoprocessor(void*)>
c0017c2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017c37:	83 c4 08             	add    esp,0x8
c0017c3a:	5b                   	pop    ebx
c0017c3b:	c3                   	ret    
c0017c3c:	83 ec 0c             	sub    esp,0xc
c0017c3f:	68 d1 28 02 c0       	push   0xc00228d1
c0017c44:	e8 c1 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c49:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c51:	83 c4 18             	add    esp,0x18
c0017c54:	5b                   	pop    ebx
c0017c55:	e9 8a eb ff ff       	jmp    c00167e4 <Thr::terminateFromIRQ(int)>

c0017c5a <HalInitialiseCoprocessor()>:
c0017c5a:	83 ec 10             	sub    esp,0x10
c0017c5d:	6a 00                	push   0x0
c0017c5f:	68 bd 7b 01 c0       	push   0xc0017bbd
c0017c64:	6a 07                	push   0x7
c0017c66:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017c70:	e8 ed 4f ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c75:	e8 a6 70 00 00       	call   c001ed20 <avxDetect>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	85 c0                	test   eax,eax
c0017c7f:	74 1c                	je     c0017c9d <HalInitialiseCoprocessor()+0x43>
c0017c81:	c7 05 70 97 02 c0 4a ed 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ed4a
c0017c8b:	c7 05 6c 97 02 c0 5b ed 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ed5b
c0017c95:	83 c4 0c             	add    esp,0xc
c0017c98:	e9 cf 70 00 00       	jmp    c001ed6c <avxInit>
c0017c9d:	e8 0e 74 00 00       	call   c001f0b0 <absolutelyNoChanceInHell>
c0017ca2:	85 c0                	test   eax,eax
c0017ca4:	74 1c                	je     c0017cc2 <HalInitialiseCoprocessor()+0x68>
c0017ca6:	c7 05 70 97 02 c0 c8 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f0c8
c0017cb0:	c7 05 6c 97 02 c0 d0 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f0d0
c0017cba:	83 c4 0c             	add    esp,0xc
c0017cbd:	e9 16 74 00 00       	jmp    c001f0d8 <sseInit>
c0017cc2:	e8 2f 74 00 00       	call   c001f0f6 <x87Detect>
c0017cc7:	85 c0                	test   eax,eax
c0017cc9:	74 1c                	je     c0017ce7 <HalInitialiseCoprocessor()+0x8d>
c0017ccb:	c7 05 70 97 02 c0 11 f1 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f111
c0017cd5:	c7 05 6c 97 02 c0 18 f1 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f118
c0017cdf:	83 c4 0c             	add    esp,0xc
c0017ce2:	e9 38 74 00 00       	jmp    c001f11f <x87Init>
c0017ce7:	c7 05 70 97 02 c0 6e 75 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001756e
c0017cf1:	c7 05 6c 97 02 c0 6e 75 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001756e
c0017cfb:	0f 20 c0             	mov    eax,cr0
c0017cfe:	83 c8 04             	or     eax,0x4
c0017d01:	0f 22 c0             	mov    cr0,eax
c0017d04:	83 c4 0c             	add    esp,0xc
c0017d07:	c3                   	ret    

c0017d08 <HalPanic(char const*)>:
c0017d08:	53                   	push   ebx
c0017d09:	83 ec 10             	sub    esp,0x10
c0017d0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d10:	fa                   	cli    
c0017d11:	53                   	push   ebx
c0017d12:	68 e7 28 02 c0       	push   0xc00228e7
c0017d17:	e8 ee 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d1c:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	85 c0                	test   eax,eax
c0017d26:	74 09                	je     c0017d31 <HalPanic(char const*)+0x29>
c0017d28:	83 ec 0c             	sub    esp,0xc
c0017d2b:	53                   	push   ebx
c0017d2c:	ff d0                	call   eax
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017d36:	85 c0                	test   eax,eax
c0017d38:	0f 84 dc 00 00 00    	je     c0017e1a <HalPanic(char const*)+0x112>
c0017d3e:	52                   	push   edx
c0017d3f:	6a 01                	push   0x1
c0017d41:	6a 0f                	push   0xf
c0017d43:	50                   	push   eax
c0017d44:	e8 81 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d49:	59                   	pop    ecx
c0017d4a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d50:	e8 65 0a ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017d55:	58                   	pop    eax
c0017d56:	5a                   	pop    edx
c0017d57:	68 64 0b 02 c0       	push   0xc0020b64
c0017d5c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d62:	e8 9b 08 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017d67:	83 c4 0c             	add    esp,0xc
c0017d6a:	6a 01                	push   0x1
c0017d6c:	6a 0f                	push   0xf
c0017d6e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d74:	e8 51 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d79:	59                   	pop    ecx
c0017d7a:	58                   	pop    eax
c0017d7b:	68 00 29 02 c0       	push   0xc0022900
c0017d80:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d86:	e8 21 0d ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017d8b:	83 c4 0c             	add    esp,0xc
c0017d8e:	6a 0f                	push   0xf
c0017d90:	6a 01                	push   0x1
c0017d92:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d98:	e8 2d 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d9d:	58                   	pop    eax
c0017d9e:	5a                   	pop    edx
c0017d9f:	68 09 29 02 c0       	push   0xc0022909
c0017da4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017daa:	e8 fd 0c ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017daf:	83 c4 0c             	add    esp,0xc
c0017db2:	6a 01                	push   0x1
c0017db4:	6a 0f                	push   0xf
c0017db6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dbc:	e8 09 08 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017dc1:	59                   	pop    ecx
c0017dc2:	58                   	pop    eax
c0017dc3:	68 4d 29 02 c0       	push   0xc002294d
c0017dc8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dce:	e8 d9 0c ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017dd3:	58                   	pop    eax
c0017dd4:	5a                   	pop    edx
c0017dd5:	68 16 29 02 c0       	push   0xc0022916
c0017dda:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017de0:	e8 c7 0c ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017de5:	59                   	pop    ecx
c0017de6:	58                   	pop    eax
c0017de7:	68 50 29 02 c0       	push   0xc0022950
c0017dec:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017df2:	e8 b5 0c ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017df7:	58                   	pop    eax
c0017df8:	5a                   	pop    edx
c0017df9:	53                   	push   ebx
c0017dfa:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e00:	e8 a7 0c ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017e05:	59                   	pop    ecx
c0017e06:	5b                   	pop    ebx
c0017e07:	68 4d 29 02 c0       	push   0xc002294d
c0017e0c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e12:	e8 95 0c ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017e17:	83 c4 10             	add    esp,0x10
c0017e1a:	eb fe                	jmp    c0017e1a <HalPanic(char const*)+0x112>

c0017e1c <HalQueryPerformanceCounter()>:
c0017e1c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e21:	31 d2                	xor    edx,edx
c0017e23:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017e29:	31 c0                	xor    eax,eax
c0017e2b:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017e32:	74 02                	je     c0017e36 <HalQueryPerformanceCounter()+0x1a>
c0017e34:	0f 31                	rdtsc  
c0017e36:	c3                   	ret    

c0017e37 <HalInitialise()>:
c0017e37:	53                   	push   ebx
c0017e38:	83 ec 08             	sub    esp,0x8
c0017e3b:	e8 59 50 ff ff       	call   c000ce99 <setupINTS()>
c0017e40:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e45:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017e4c:	75 0f                	jne    c0017e5d <HalInitialise()+0x26>
c0017e4e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017e54:	83 e2 fe             	and    edx,0xfffffffe
c0017e57:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017e5d:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017e64:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017e6a:	83 e2 fe             	and    edx,0xfffffffe
c0017e6d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017e73:	e8 a0 02 00 00       	call   c0018118 <picOpen()>
c0017e78:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e7f:	74 0a                	je     c0017e8b <HalInitialise()+0x54>
c0017e81:	e8 e2 01 00 00       	call   c0018068 <picDisable()>
c0017e86:	e8 0d 68 00 00       	call   c001e698 <apicOpen()>
c0017e8b:	50                   	push   eax
c0017e8c:	bb 0f 00 00 00       	mov    ebx,0xf
c0017e91:	6a 00                	push   0x0
c0017e93:	68 de 7a 01 c0       	push   0xc0017ade
c0017e98:	6a 00                	push   0x0
c0017e9a:	e8 c3 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e9f:	83 c4 0c             	add    esp,0xc
c0017ea2:	6a 00                	push   0x0
c0017ea4:	68 de 7a 01 c0       	push   0xc0017ade
c0017ea9:	6a 01                	push   0x1
c0017eab:	e8 b2 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017eb0:	83 c4 0c             	add    esp,0xc
c0017eb3:	6a 00                	push   0x0
c0017eb5:	68 6f 75 01 c0       	push   0xc001756f
c0017eba:	6a 02                	push   0x2
c0017ebc:	e8 a1 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ec1:	83 c4 0c             	add    esp,0xc
c0017ec4:	6a 00                	push   0x0
c0017ec6:	68 de 7a 01 c0       	push   0xc0017ade
c0017ecb:	6a 03                	push   0x3
c0017ecd:	e8 90 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ed2:	83 c4 0c             	add    esp,0xc
c0017ed5:	6a 00                	push   0x0
c0017ed7:	68 de 7a 01 c0       	push   0xc0017ade
c0017edc:	6a 04                	push   0x4
c0017ede:	e8 7f 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ee3:	83 c4 0c             	add    esp,0xc
c0017ee6:	6a 00                	push   0x0
c0017ee8:	68 de 7a 01 c0       	push   0xc0017ade
c0017eed:	6a 05                	push   0x5
c0017eef:	e8 6e 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ef4:	83 c4 0c             	add    esp,0xc
c0017ef7:	6a 00                	push   0x0
c0017ef9:	68 12 7b 01 c0       	push   0xc0017b12
c0017efe:	6a 06                	push   0x6
c0017f00:	e8 5d 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f05:	83 c4 0c             	add    esp,0xc
c0017f08:	6a 00                	push   0x0
c0017f0a:	68 88 75 01 c0       	push   0xc0017588
c0017f0f:	6a 08                	push   0x8
c0017f11:	e8 4c 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f16:	83 c4 0c             	add    esp,0xc
c0017f19:	6a 00                	push   0x0
c0017f1b:	68 de 7a 01 c0       	push   0xc0017ade
c0017f20:	6a 09                	push   0x9
c0017f22:	e8 3b 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f27:	83 c4 0c             	add    esp,0xc
c0017f2a:	6a 00                	push   0x0
c0017f2c:	68 de 7a 01 c0       	push   0xc0017ade
c0017f31:	6a 0a                	push   0xa
c0017f33:	e8 2a 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f38:	83 c4 0c             	add    esp,0xc
c0017f3b:	6a 00                	push   0x0
c0017f3d:	68 de 7a 01 c0       	push   0xc0017ade
c0017f42:	6a 0b                	push   0xb
c0017f44:	e8 19 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f49:	83 c4 0c             	add    esp,0xc
c0017f4c:	6a 00                	push   0x0
c0017f4e:	68 ee 79 01 c0       	push   0xc00179ee
c0017f53:	6a 0d                	push   0xd
c0017f55:	e8 08 4d ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f5a:	83 c4 0c             	add    esp,0xc
c0017f5d:	6a 00                	push   0x0
c0017f5f:	68 55 7a 01 c0       	push   0xc0017a55
c0017f64:	6a 0e                	push   0xe
c0017f66:	e8 f7 4c ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f6b:	83 c4 10             	add    esp,0x10
c0017f6e:	50                   	push   eax
c0017f6f:	6a 00                	push   0x0
c0017f71:	68 de 7a 01 c0       	push   0xc0017ade
c0017f76:	53                   	push   ebx
c0017f77:	43                   	inc    ebx
c0017f78:	e8 e5 4c ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f7d:	83 c4 10             	add    esp,0x10
c0017f80:	83 fb 1e             	cmp    ebx,0x1e
c0017f83:	75 e9                	jne    c0017f6e <HalInitialise()+0x137>
c0017f85:	50                   	push   eax
c0017f86:	6a 00                	push   0x0
c0017f88:	68 45 27 01 c0       	push   0xc0012745
c0017f8d:	6a 60                	push   0x60
c0017f8f:	e8 ce 4c ff ff       	call   c000cc62 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f94:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f99:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017fa3:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017faa:	e8 24 fb fe ff       	call   c0007ad3 <malloc>
c0017faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fb2:	89 c3                	mov    ebx,eax
c0017fb4:	e8 37 09 00 00       	call   c00188f0 <RTC::RTC()>
c0017fb9:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017fc3:	5a                   	pop    edx
c0017fc4:	59                   	pop    ecx
c0017fc5:	53                   	push   ebx
c0017fc6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fcc:	e8 5b 47 ff ff       	call   c000c72c <Device::addChild(Device*)>
c0017fd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fd3:	6a 00                	push   0x0
c0017fd5:	6a 00                	push   0x0
c0017fd7:	6a 00                	push   0x0
c0017fd9:	53                   	push   ebx
c0017fda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017fdd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017fe2:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017fe8:	83 c4 28             	add    esp,0x28
c0017feb:	5b                   	pop    ebx
c0017fec:	c3                   	ret    

c0017fed <HalMakeBeep(int)>:
c0017fed:	53                   	push   ebx
c0017fee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017ff2:	85 db                	test   ebx,ebx
c0017ff4:	75 07                	jne    c0017ffd <HalMakeBeep(int)+0x10>
c0017ff6:	e4 61                	in     al,0x61
c0017ff8:	83 e0 fc             	and    eax,0xfffffffc
c0017ffb:	eb 26                	jmp    c0018023 <HalMakeBeep(int)+0x36>
c0017ffd:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018002:	99                   	cdq    
c0018003:	f7 fb                	idiv   ebx
c0018005:	89 c1                	mov    ecx,eax
c0018007:	b0 b6                	mov    al,0xb6
c0018009:	e6 43                	out    0x43,al
c001800b:	88 c8                	mov    al,cl
c001800d:	e6 42                	out    0x42,al
c001800f:	89 c8                	mov    eax,ecx
c0018011:	c1 e8 08             	shr    eax,0x8
c0018014:	e6 42                	out    0x42,al
c0018016:	e4 61                	in     al,0x61
c0018018:	89 c2                	mov    edx,eax
c001801a:	83 ca 03             	or     edx,0x3
c001801d:	38 d0                	cmp    al,dl
c001801f:	74 04                	je     c0018025 <HalMakeBeep(int)+0x38>
c0018021:	88 d0                	mov    al,dl
c0018023:	e6 61                	out    0x61,al
c0018025:	5b                   	pop    ebx
c0018026:	c3                   	ret    

c0018027 <HalGetRand()>:
c0018027:	31 c0                	xor    eax,eax
c0018029:	c3                   	ret    

c001802a <HalEndOfInterrupt(int)>:
c001802a:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0018031:	74 23                	je     c0018056 <HalEndOfInterrupt(int)+0x2c>
c0018033:	83 ec 14             	sub    esp,0x14
c0018036:	6a 1b                	push   0x1b
c0018038:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001803e:	e8 9f f0 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0018043:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018048:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018052:	83 c4 1c             	add    esp,0x1c
c0018055:	c3                   	ret    
c0018056:	e9 41 02 00 00       	jmp    c001829c <picEOI(int)>

c001805b <HalRestart()>:
c001805b:	c3                   	ret    

c001805c <HalShutdown()>:
c001805c:	c3                   	ret    

c001805d <HalSleep()>:
c001805d:	c3                   	ret    
c001805e:	66 90                	xchg   ax,ax

c0018060 <picIoWait()>:
c0018060:	eb 00                	jmp    c0018062 <picIoWait()+0x2>
c0018062:	eb 00                	jmp    c0018064 <picIoWait()+0x4>
c0018064:	90                   	nop
c0018065:	c3                   	ret    
c0018066:	66 90                	xchg   ax,ax

c0018068 <picDisable()>:
c0018068:	83 ec 10             	sub    esp,0x10
c001806b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018072:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018077:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001807b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018080:	ee                   	out    dx,al
c0018081:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018088:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001808d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018091:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018096:	ee                   	out    dx,al
c0018097:	90                   	nop
c0018098:	83 c4 10             	add    esp,0x10
c001809b:	c3                   	ret    

c001809c <picGetIRQReg(int)>:
c001809c:	83 ec 10             	sub    esp,0x10
c001809f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180a3:	0f b6 c0             	movzx  eax,al
c00180a6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00180ad:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00180b1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00180b5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00180ba:	ee                   	out    dx,al
c00180bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180bf:	0f b6 c0             	movzx  eax,al
c00180c2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00180c9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00180cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00180d1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00180d6:	ee                   	out    dx,al
c00180d7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00180de:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00180e3:	89 c2                	mov    edx,eax
c00180e5:	ec                   	in     al,dx
c00180e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00180ea:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00180ee:	0f b6 c0             	movzx  eax,al
c00180f1:	c1 e0 08             	shl    eax,0x8
c00180f4:	89 c1                	mov    ecx,eax
c00180f6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00180fd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018102:	89 c2                	mov    edx,eax
c0018104:	ec                   	in     al,dx
c0018105:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018109:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001810d:	0f b6 c0             	movzx  eax,al
c0018110:	09 c8                	or     eax,ecx
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	c3                   	ret    
c0018116:	66 90                	xchg   ax,ax

c0018118 <picOpen()>:
c0018118:	83 ec 50             	sub    esp,0x50
c001811b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018122:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018127:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001812b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001812f:	ee                   	out    dx,al
c0018130:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018137:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001813c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018140:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018144:	ee                   	out    dx,al
c0018145:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001814d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018155:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001815c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018160:	89 c2                	mov    edx,eax
c0018162:	ec                   	in     al,dx
c0018163:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018167:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001816b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001816f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018176:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001817a:	89 c2                	mov    edx,eax
c001817c:	ec                   	in     al,dx
c001817d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018181:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018185:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018189:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018190:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018195:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018199:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001819d:	ee                   	out    dx,al
c001819e:	e8 bd fe ff ff       	call   c0018060 <picIoWait()>
c00181a3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00181aa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00181af:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00181b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00181b7:	ee                   	out    dx,al
c00181b8:	e8 a3 fe ff ff       	call   c0018060 <picIoWait()>
c00181bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00181c1:	0f b6 c0             	movzx  eax,al
c00181c4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00181cb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00181cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00181d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181d7:	ee                   	out    dx,al
c00181d8:	e8 83 fe ff ff       	call   c0018060 <picIoWait()>
c00181dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00181e1:	0f b6 c0             	movzx  eax,al
c00181e4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00181eb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00181ef:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00181f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181f7:	ee                   	out    dx,al
c00181f8:	e8 63 fe ff ff       	call   c0018060 <picIoWait()>
c00181fd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018204:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018209:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001820d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018211:	ee                   	out    dx,al
c0018212:	e8 49 fe ff ff       	call   c0018060 <picIoWait()>
c0018217:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001821e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018223:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018227:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001822b:	ee                   	out    dx,al
c001822c:	e8 2f fe ff ff       	call   c0018060 <picIoWait()>
c0018231:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018238:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001823d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018241:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018245:	ee                   	out    dx,al
c0018246:	e8 15 fe ff ff       	call   c0018060 <picIoWait()>
c001824b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018252:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018257:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001825b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001825f:	ee                   	out    dx,al
c0018260:	e8 fb fd ff ff       	call   c0018060 <picIoWait()>
c0018265:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001826a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018271:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018275:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018279:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001827d:	ee                   	out    dx,al
c001827e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018283:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001828a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001828e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018292:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018296:	ee                   	out    dx,al
c0018297:	90                   	nop
c0018298:	83 c4 50             	add    esp,0x50
c001829b:	c3                   	ret    

c001829c <picEOI(int)>:
c001829c:	83 ec 10             	sub    esp,0x10
c001829f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00182a4:	75 1e                	jne    c00182c4 <picEOI(int)+0x28>
c00182a6:	6a 0b                	push   0xb
c00182a8:	e8 ef fd ff ff       	call   c001809c <picGetIRQReg(int)>
c00182ad:	83 c4 04             	add    esp,0x4
c00182b0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00182b5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00182ba:	25 80 00 00 00       	and    eax,0x80
c00182bf:	74 73                	je     c0018334 <picEOI(int)+0x98>
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00182c9:	75 31                	jne    c00182fc <picEOI(int)+0x60>
c00182cb:	6a 0b                	push   0xb
c00182cd:	e8 ca fd ff ff       	call   c001809c <picGetIRQReg(int)>
c00182d2:	83 c4 04             	add    esp,0x4
c00182d5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182de:	98                   	cwde   
c00182df:	85 c0                	test   eax,eax
c00182e1:	78 19                	js     c00182fc <picEOI(int)+0x60>
c00182e3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00182ea:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00182ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00182f8:	ee                   	out    dx,al
c00182f9:	eb 3d                	jmp    c0018338 <picEOI(int)+0x9c>
c00182fb:	90                   	nop
c00182fc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018301:	7e 19                	jle    c001831c <picEOI(int)+0x80>
c0018303:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001830a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001830f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018313:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018318:	ee                   	out    dx,al
c0018319:	8d 76 00             	lea    esi,[esi+0x0]
c001831c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018323:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018328:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001832c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018331:	ee                   	out    dx,al
c0018332:	eb 04                	jmp    c0018338 <picEOI(int)+0x9c>
c0018334:	90                   	nop
c0018335:	8d 76 00             	lea    esi,[esi+0x0]
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	c3                   	ret    

c001833c <RTC::open(int, int, void*)>:
c001833c:	31 c0                	xor    eax,eax
c001833e:	c3                   	ret    
c001833f:	90                   	nop

c0018340 <RTC::close(int, int, void*)>:
c0018340:	31 c0                	xor    eax,eax
c0018342:	c3                   	ret    
c0018343:	90                   	nop

c0018344 <RTC::timeInSecondsUTC()>:
c0018344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018348:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001834e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018354:	c3                   	ret    
c0018355:	90                   	nop

c0018356 <RTC::timeInDatetimeUTC()>:
c0018356:	53                   	push   ebx
c0018357:	83 ec 14             	sub    esp,0x14
c001835a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018362:	8b 10                	mov    edx,DWORD PTR [eax]
c0018364:	50                   	push   eax
c0018365:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018368:	83 c4 0c             	add    esp,0xc
c001836b:	52                   	push   edx
c001836c:	50                   	push   eax
c001836d:	53                   	push   ebx
c001836e:	e8 2d 41 ff ff       	call   c000c4a0 <secondsToDatetime(unsigned long long)>
c0018373:	89 d8                	mov    eax,ebx
c0018375:	83 c4 14             	add    esp,0x14
c0018378:	5b                   	pop    ebx
c0018379:	c2 04 00             	ret    0x4

c001837c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001837c:	56                   	push   esi
c001837d:	53                   	push   ebx
c001837e:	83 ec 14             	sub    esp,0x14
c0018381:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018385:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018387:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001838a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001838e:	52                   	push   edx
c001838f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018393:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018397:	50                   	push   eax
c0018398:	e8 03 41 ff ff       	call   c000c4a0 <secondsToDatetime(unsigned long long)>
c001839d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00183a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00183ad:	89 f0                	mov    eax,esi
c00183af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00183b3:	83 c4 20             	add    esp,0x20
c00183b6:	5b                   	pop    ebx
c00183b7:	5e                   	pop    esi
c00183b8:	ff e0                	jmp    eax

c00183ba <RTC::~RTC()>:
c00183ba:	83 ec 0c             	sub    esp,0xc
c00183bd:	ba ec 29 02 c0       	mov    edx,0xc00229ec
c00183c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183c6:	89 10                	mov    DWORD PTR [eax],edx
c00183c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	50                   	push   eax
c00183d0:	e8 57 3e ff ff       	call   c000c22c <Clock::~Clock()>
c00183d5:	83 c4 10             	add    esp,0x10
c00183d8:	90                   	nop
c00183d9:	83 c4 0c             	add    esp,0xc
c00183dc:	c3                   	ret    
c00183dd:	90                   	nop

c00183de <RTC::~RTC()>:
c00183de:	83 ec 0c             	sub    esp,0xc
c00183e1:	83 ec 0c             	sub    esp,0xc
c00183e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183e8:	e8 cd ff ff ff       	call   c00183ba <RTC::~RTC()>
c00183ed:	83 c4 10             	add    esp,0x10
c00183f0:	83 ec 08             	sub    esp,0x8
c00183f3:	68 60 01 00 00       	push   0x160
c00183f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183fc:	e8 0b 24 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018401:	83 c4 10             	add    esp,0x10
c0018404:	83 c4 0c             	add    esp,0xc
c0018407:	c3                   	ret    

c0018408 <RTC::get_update_in_progress_flag()>:
c0018408:	83 ec 14             	sub    esp,0x14
c001840b:	6a 0a                	push   0xa
c001840d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018413:	e8 82 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018418:	83 c4 1c             	add    esp,0x1c
c001841b:	0f b6 c0             	movzx  eax,al
c001841e:	c1 e8 07             	shr    eax,0x7
c0018421:	c3                   	ret    

c0018422 <RTC::completeRTCRefresh()>:
c0018422:	55                   	push   ebp
c0018423:	57                   	push   edi
c0018424:	56                   	push   esi
c0018425:	53                   	push   ebx
c0018426:	83 ec 3c             	sub    esp,0x3c
c0018429:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001842f:	83 ec 0c             	sub    esp,0xc
c0018432:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018436:	e8 cd ff ff ff       	call   c0018408 <RTC::get_update_in_progress_flag()>
c001843b:	83 c4 10             	add    esp,0x10
c001843e:	84 c0                	test   al,al
c0018440:	74 0e                	je     c0018450 <RTC::completeRTCRefresh()+0x2e>
c0018442:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018448:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001844e:	73 df                	jae    c001842f <RTC::completeRTCRefresh()+0xd>
c0018450:	50                   	push   eax
c0018451:	50                   	push   eax
c0018452:	6a 00                	push   0x0
c0018454:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001845a:	e8 3b ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001845f:	89 c7                	mov    edi,eax
c0018461:	58                   	pop    eax
c0018462:	5a                   	pop    edx
c0018463:	6a 02                	push   0x2
c0018465:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001846b:	e8 2a ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018470:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018474:	59                   	pop    ecx
c0018475:	5b                   	pop    ebx
c0018476:	6a 04                	push   0x4
c0018478:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001847e:	e8 17 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018483:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018487:	5e                   	pop    esi
c0018488:	5d                   	pop    ebp
c0018489:	6a 07                	push   0x7
c001848b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018491:	e8 04 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018496:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001849a:	58                   	pop    eax
c001849b:	5a                   	pop    edx
c001849c:	6a 08                	push   0x8
c001849e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184a4:	e8 f1 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00184a9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00184ad:	59                   	pop    ecx
c00184ae:	5b                   	pop    ebx
c00184af:	6a 09                	push   0x9
c00184b1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184b7:	e8 de ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00184bc:	0f b6 c0             	movzx  eax,al
c00184bf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00184cc:	83 ec 0c             	sub    esp,0xc
c00184cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00184d3:	e8 30 ff ff ff       	call   c0018408 <RTC::get_update_in_progress_flag()>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	84 c0                	test   al,al
c00184dd:	74 0e                	je     c00184ed <RTC::completeRTCRefresh()+0xcb>
c00184df:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00184e5:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00184eb:	73 df                	jae    c00184cc <RTC::completeRTCRefresh()+0xaa>
c00184ed:	51                   	push   ecx
c00184ee:	51                   	push   ecx
c00184ef:	6a 00                	push   0x0
c00184f1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184f7:	e8 9e ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00184fc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018500:	5b                   	pop    ebx
c0018501:	5e                   	pop    esi
c0018502:	6a 02                	push   0x2
c0018504:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001850a:	e8 8b ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001850f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018513:	5d                   	pop    ebp
c0018514:	58                   	pop    eax
c0018515:	6a 04                	push   0x4
c0018517:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001851d:	e8 78 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018522:	88 c3                	mov    bl,al
c0018524:	58                   	pop    eax
c0018525:	5a                   	pop    edx
c0018526:	6a 07                	push   0x7
c0018528:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001852e:	e8 67 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018533:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018537:	59                   	pop    ecx
c0018538:	5e                   	pop    esi
c0018539:	6a 08                	push   0x8
c001853b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018541:	e8 54 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018546:	5d                   	pop    ebp
c0018547:	89 c6                	mov    esi,eax
c0018549:	58                   	pop    eax
c001854a:	6a 09                	push   0x9
c001854c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018552:	e8 43 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018557:	89 f9                	mov    ecx,edi
c0018559:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	0f b6 e8             	movzx  ebp,al
c0018563:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018568:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001856c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018570:	74 27                	je     c0018599 <RTC::completeRTCRefresh()+0x177>
c0018572:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018576:	89 f0                	mov    eax,esi
c0018578:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001857c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018580:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018584:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018588:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001858c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018590:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018594:	e9 2d ff ff ff       	jmp    c00184c6 <RTC::completeRTCRefresh()+0xa4>
c0018599:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001859e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00185a2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185a6:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00185aa:	75 c6                	jne    c0018572 <RTC::completeRTCRefresh()+0x150>
c00185ac:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00185b1:	89 f1                	mov    ecx,esi
c00185b3:	0f b6 fb             	movzx  edi,bl
c00185b6:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00185ba:	0f b6 c9             	movzx  ecx,cl
c00185bd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00185c1:	89 f1                	mov    ecx,esi
c00185c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185c7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00185cb:	0f 94 c2             	sete   dl
c00185ce:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00185d2:	0f 94 c0             	sete   al
c00185d5:	21 d0                	and    eax,edx
c00185d7:	31 d2                	xor    edx,edx
c00185d9:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00185dd:	0f 94 c2             	sete   dl
c00185e0:	85 c2                	test   edx,eax
c00185e2:	74 8e                	je     c0018572 <RTC::completeRTCRefresh()+0x150>
c00185e4:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00185e8:	75 88                	jne    c0018572 <RTC::completeRTCRefresh()+0x150>
c00185ea:	52                   	push   edx
c00185eb:	52                   	push   edx
c00185ec:	6a 0b                	push   0xb
c00185ee:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185f4:	e8 a1 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00185f9:	83 c4 10             	add    esp,0x10
c00185fc:	a8 04                	test   al,0x4
c00185fe:	75 7a                	jne    c001867a <RTC::completeRTCRefresh()+0x258>
c0018600:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018604:	c1 ef 04             	shr    edi,0x4
c0018607:	83 e6 0f             	and    esi,0xf
c001860a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001860e:	c1 ed 04             	shr    ebp,0x4
c0018611:	6b ed 0a             	imul   ebp,ebp,0xa
c0018614:	c1 ea 04             	shr    edx,0x4
c0018617:	6b d2 0a             	imul   edx,edx,0xa
c001861a:	83 e1 0f             	and    ecx,0xf
c001861d:	01 d1                	add    ecx,edx
c001861f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018623:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018627:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001862b:	c1 ea 04             	shr    edx,0x4
c001862e:	6b d2 0a             	imul   edx,edx,0xa
c0018631:	83 e1 0f             	and    ecx,0xf
c0018634:	01 d1                	add    ecx,edx
c0018636:	89 fa                	mov    edx,edi
c0018638:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001863c:	83 e2 07             	and    edx,0x7
c001863f:	89 d9                	mov    ecx,ebx
c0018641:	6b d2 0a             	imul   edx,edx,0xa
c0018644:	83 e1 0f             	and    ecx,0xf
c0018647:	83 e3 80             	and    ebx,0xffffff80
c001864a:	01 d1                	add    ecx,edx
c001864c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018650:	09 cb                	or     ebx,ecx
c0018652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018656:	c1 ea 04             	shr    edx,0x4
c0018659:	6b d2 0a             	imul   edx,edx,0xa
c001865c:	83 e1 0f             	and    ecx,0xf
c001865f:	01 d1                	add    ecx,edx
c0018661:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018665:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018669:	c1 ea 04             	shr    edx,0x4
c001866c:	6b d2 0a             	imul   edx,edx,0xa
c001866f:	01 d6                	add    esi,edx
c0018671:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018675:	83 e2 0f             	and    edx,0xf
c0018678:	01 d5                	add    ebp,edx
c001867a:	a8 02                	test   al,0x2
c001867c:	75 15                	jne    c0018693 <RTC::completeRTCRefresh()+0x271>
c001867e:	f6 c3 80             	test   bl,0x80
c0018681:	74 10                	je     c0018693 <RTC::completeRTCRefresh()+0x271>
c0018683:	83 e3 7f             	and    ebx,0x7f
c0018686:	b9 18 00 00 00       	mov    ecx,0x18
c001868b:	8d 43 0c             	lea    eax,[ebx+0xc]
c001868e:	99                   	cdq    
c001868f:	f7 f9                	idiv   ecx
c0018691:	88 d3                	mov    bl,dl
c0018693:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018699:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001869f:	77 06                	ja     c00186a7 <RTC::completeRTCRefresh()+0x285>
c00186a1:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00186a7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186ac:	31 c9                	xor    ecx,ecx
c00186ae:	31 d2                	xor    edx,edx
c00186b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00186b4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00186b8:	89 cd                	mov    ebp,ecx
c00186ba:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00186be:	c1 e7 10             	shl    edi,0x10
c00186c1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00186c7:	c1 e0 10             	shl    eax,0x10
c00186ca:	09 c5                	or     ebp,eax
c00186cc:	89 e9                	mov    ecx,ebp
c00186ce:	0f b7 c2             	movzx  eax,dx
c00186d1:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00186d5:	09 f8                	or     eax,edi
c00186d7:	89 c2                	mov    edx,eax
c00186d9:	50                   	push   eax
c00186da:	50                   	push   eax
c00186db:	88 d9                	mov    cl,bl
c00186dd:	51                   	push   ecx
c00186de:	52                   	push   edx
c00186df:	e8 37 3c ff ff       	call   c000c31b <datetimeToSeconds(datetime_t)>
c00186e4:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00186e8:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00186ee:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00186f4:	83 c4 4c             	add    esp,0x4c
c00186f7:	5b                   	pop    ebx
c00186f8:	5e                   	pop    esi
c00186f9:	5f                   	pop    edi
c00186fa:	5d                   	pop    ebp
c00186fb:	c3                   	ret    

c00186fc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00186fc:	55                   	push   ebp
c00186fd:	57                   	push   edi
c00186fe:	56                   	push   esi
c00186ff:	53                   	push   ebx
c0018700:	83 ec 30             	sub    esp,0x30
c0018703:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018707:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001870b:	6a 00                	push   0x0
c001870d:	6a 00                	push   0x0
c001870f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018715:	e8 98 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001871a:	83 c4 0c             	add    esp,0xc
c001871d:	6a 00                	push   0x0
c001871f:	6a 02                	push   0x2
c0018721:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018727:	e8 86 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001872c:	89 f8                	mov    eax,edi
c001872e:	89 f9                	mov    ecx,edi
c0018730:	0f b6 c4             	movzx  eax,ah
c0018733:	31 d2                	xor    edx,edx
c0018735:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018739:	c1 e9 10             	shr    ecx,0x10
c001873c:	89 f0                	mov    eax,esi
c001873e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018742:	89 f0                	mov    eax,esi
c0018744:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018748:	0f b6 c4             	movzx  eax,ah
c001874b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001874f:	89 f0                	mov    eax,esi
c0018751:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018755:	c1 e8 10             	shr    eax,0x10
c0018758:	b9 64 00 00 00       	mov    ecx,0x64
c001875d:	f7 f1                	div    ecx
c001875f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018763:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018767:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001876b:	59                   	pop    ecx
c001876c:	5b                   	pop    ebx
c001876d:	89 fb                	mov    ebx,edi
c001876f:	6a 0b                	push   0xb
c0018771:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018777:	e8 1e ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001877c:	83 c4 10             	add    esp,0x10
c001877f:	a8 04                	test   al,0x4
c0018781:	89 c5                	mov    ebp,eax
c0018783:	75 6e                	jne    c00187f3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018785:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018789:	31 d2                	xor    edx,edx
c001878b:	0f b6 c1             	movzx  eax,cl
c001878e:	b9 0a 00 00 00       	mov    ecx,0xa
c0018793:	f7 f1                	div    ecx
c0018795:	c1 e0 04             	shl    eax,0x4
c0018798:	09 d0                	or     eax,edx
c001879a:	31 d2                	xor    edx,edx
c001879c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187a0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00187a5:	f7 f1                	div    ecx
c00187a7:	c1 e0 04             	shl    eax,0x4
c00187aa:	09 d0                	or     eax,edx
c00187ac:	31 d2                	xor    edx,edx
c00187ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187b2:	0f b6 c3             	movzx  eax,bl
c00187b5:	f7 f1                	div    ecx
c00187b7:	c1 e0 04             	shl    eax,0x4
c00187ba:	09 d0                	or     eax,edx
c00187bc:	31 d2                	xor    edx,edx
c00187be:	89 c3                	mov    ebx,eax
c00187c0:	89 f0                	mov    eax,esi
c00187c2:	0f b6 c0             	movzx  eax,al
c00187c5:	f7 f1                	div    ecx
c00187c7:	c1 e0 04             	shl    eax,0x4
c00187ca:	09 d0                	or     eax,edx
c00187cc:	31 d2                	xor    edx,edx
c00187ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00187d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00187d7:	f7 f1                	div    ecx
c00187d9:	c1 e0 04             	shl    eax,0x4
c00187dc:	09 d0                	or     eax,edx
c00187de:	31 d2                	xor    edx,edx
c00187e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187e8:	f7 f1                	div    ecx
c00187ea:	c1 e0 04             	shl    eax,0x4
c00187ed:	09 d0                	or     eax,edx
c00187ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00187f3:	83 e5 02             	and    ebp,0x2
c00187f6:	75 1e                	jne    c0018816 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187f8:	0f b6 c3             	movzx  eax,bl
c00187fb:	83 f8 0b             	cmp    eax,0xb
c00187fe:	76 10                	jbe    c0018810 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018800:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018803:	84 d2                	test   dl,dl
c0018805:	88 d3                	mov    bl,dl
c0018807:	75 02                	jne    c001880b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018809:	b3 0c                	mov    bl,0xc
c001880b:	83 cb 80             	or     ebx,0xffffff80
c001880e:	eb 06                	jmp    c0018816 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018810:	85 c0                	test   eax,eax
c0018812:	75 02                	jne    c0018816 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018814:	b3 0c                	mov    bl,0xc
c0018816:	50                   	push   eax
c0018817:	0f b6 db             	movzx  ebx,bl
c001881a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001881f:	52                   	push   edx
c0018820:	6a 00                	push   0x0
c0018822:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018828:	e8 85 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001882d:	83 c4 0c             	add    esp,0xc
c0018830:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018835:	50                   	push   eax
c0018836:	6a 02                	push   0x2
c0018838:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001883e:	e8 6f ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018843:	83 c4 0c             	add    esp,0xc
c0018846:	53                   	push   ebx
c0018847:	6a 04                	push   0x4
c0018849:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001884f:	e8 5e ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018854:	83 c4 0c             	add    esp,0xc
c0018857:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001885c:	52                   	push   edx
c001885d:	6a 07                	push   0x7
c001885f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018865:	e8 48 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001886a:	83 c4 0c             	add    esp,0xc
c001886d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018872:	50                   	push   eax
c0018873:	6a 08                	push   0x8
c0018875:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001887b:	e8 32 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018880:	83 c4 0c             	add    esp,0xc
c0018883:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018888:	55                   	push   ebp
c0018889:	6a 09                	push   0x9
c001888b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018891:	e8 1c ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018896:	5a                   	pop    edx
c0018897:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001889b:	e8 82 fb ff ff       	call   c0018422 <RTC::completeRTCRefresh()>
c00188a0:	83 c4 3c             	add    esp,0x3c
c00188a3:	b0 01                	mov    al,0x1
c00188a5:	5b                   	pop    ebx
c00188a6:	5e                   	pop    esi
c00188a7:	5f                   	pop    edi
c00188a8:	5d                   	pop    ebp
c00188a9:	c3                   	ret    

c00188aa <rtcIRQHandler(regs*, void*)>:
c00188aa:	53                   	push   ebx
c00188ab:	83 ec 10             	sub    esp,0x10
c00188ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00188b2:	6a 0c                	push   0xc
c00188b4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00188ba:	e8 db e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188bf:	83 c4 10             	add    esp,0x10
c00188c2:	a8 80                	test   al,0x80
c00188c4:	74 24                	je     c00188ea <rtcIRQHandler(regs*, void*)+0x40>
c00188c6:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00188cd:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00188d4:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00188db:	75 0d                	jne    c00188ea <rtcIRQHandler(regs*, void*)+0x40>
c00188dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00188e1:	83 c4 08             	add    esp,0x8
c00188e4:	5b                   	pop    ebx
c00188e5:	e9 38 fb ff ff       	jmp    c0018422 <RTC::completeRTCRefresh()>
c00188ea:	83 c4 08             	add    esp,0x8
c00188ed:	5b                   	pop    ebx
c00188ee:	c3                   	ret    
c00188ef:	90                   	nop

c00188f0 <RTC::RTC()>:
c00188f0:	83 ec 1c             	sub    esp,0x1c
c00188f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f7:	83 ec 08             	sub    esp,0x8
c00188fa:	68 cf 29 02 c0       	push   0xc00229cf
c00188ff:	50                   	push   eax
c0018900:	e8 f1 38 ff ff       	call   c000c1f6 <Clock::Clock(char const*)>
c0018905:	83 c4 10             	add    esp,0x10
c0018908:	ba ec 29 02 c0       	mov    edx,0xc00229ec
c001890d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018911:	89 10                	mov    DWORD PTR [eax],edx
c0018913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018917:	83 ec 0c             	sub    esp,0xc
c001891a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001891e:	6a 01                	push   0x1
c0018920:	68 aa 88 01 c0       	push   0xc00188aa
c0018925:	6a 08                	push   0x8
c0018927:	50                   	push   eax
c0018928:	e8 ab 3d ff ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001892d:	83 c4 20             	add    esp,0x20
c0018930:	89 c2                	mov    edx,eax
c0018932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018936:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001893c:	fa                   	cli    
c001893d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018942:	83 c0 01             	add    eax,0x1
c0018945:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001894a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001894f:	83 ec 08             	sub    esp,0x8
c0018952:	6a 0b                	push   0xb
c0018954:	50                   	push   eax
c0018955:	e8 40 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001895a:	83 c4 10             	add    esp,0x10
c001895d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018961:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018966:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001896a:	83 ca 10             	or     edx,0x10
c001896d:	0f b6 d2             	movzx  edx,dl
c0018970:	83 ec 04             	sub    esp,0x4
c0018973:	52                   	push   edx
c0018974:	6a 0b                	push   0xb
c0018976:	50                   	push   eax
c0018977:	e8 36 e9 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001897c:	83 c4 10             	add    esp,0x10
c001897f:	83 ec 0c             	sub    esp,0xc
c0018982:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018986:	e8 97 fa ff ff       	call   c0018422 <RTC::completeRTCRefresh()>
c001898b:	83 c4 10             	add    esp,0x10
c001898e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018993:	83 e8 01             	sub    eax,0x1
c0018996:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001899b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00189a0:	85 c0                	test   eax,eax
c00189a2:	75 01                	jne    c00189a5 <RTC::RTC()+0xb5>
c00189a4:	fb                   	sti    
c00189a5:	90                   	nop
c00189a6:	83 c4 1c             	add    esp,0x1c
c00189a9:	c3                   	ret    
c00189aa:	66 90                	xchg   ax,ax

c00189ac <HalConsoleScroll(int, int)>:
c00189ac:	83 ec 10             	sub    esp,0x10
c00189af:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00189b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00189bf:	90                   	nop
c00189c0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00189c5:	0f 8f e1 00 00 00    	jg     c0018aac <HalConsoleScroll(int, int)+0x100>
c00189cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00189d3:	90                   	nop
c00189d4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00189dc:	0f 8f be 00 00 00    	jg     c0018aa0 <HalConsoleScroll(int, int)+0xf4>
c00189e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189e6:	89 d0                	mov    eax,edx
c00189e8:	c1 e0 02             	shl    eax,0x2
c00189eb:	01 d0                	add    eax,edx
c00189ed:	c1 e0 05             	shl    eax,0x5
c00189f0:	89 c2                	mov    edx,eax
c00189f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189f6:	01 d0                	add    eax,edx
c00189f8:	89 c2                	mov    edx,eax
c00189fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189fe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a05:	89 d0                	mov    eax,edx
c0018a07:	c1 e0 02             	shl    eax,0x2
c0018a0a:	01 d0                	add    eax,edx
c0018a0c:	c1 e0 05             	shl    eax,0x5
c0018a0f:	89 c2                	mov    edx,eax
c0018a11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a15:	01 d0                	add    eax,edx
c0018a17:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018a1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a21:	01 d0                	add    eax,edx
c0018a23:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018a25:	88 10                	mov    BYTE PTR [eax],dl
c0018a27:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018a2c:	75 66                	jne    c0018a94 <HalConsoleScroll(int, int)+0xe8>
c0018a2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a32:	83 e0 01             	and    eax,0x1
c0018a35:	74 39                	je     c0018a70 <HalConsoleScroll(int, int)+0xc4>
c0018a37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a3b:	83 e0 0f             	and    eax,0xf
c0018a3e:	88 c2                	mov    dl,al
c0018a40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a44:	c1 e0 04             	shl    eax,0x4
c0018a47:	09 d0                	or     eax,edx
c0018a49:	88 c1                	mov    cl,al
c0018a4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a4f:	89 d0                	mov    eax,edx
c0018a51:	c1 e0 02             	shl    eax,0x2
c0018a54:	01 d0                	add    eax,edx
c0018a56:	c1 e0 05             	shl    eax,0x5
c0018a59:	89 c2                	mov    edx,eax
c0018a5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a5f:	01 d0                	add    eax,edx
c0018a61:	89 c2                	mov    edx,eax
c0018a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a67:	01 d0                	add    eax,edx
c0018a69:	88 ca                	mov    dl,cl
c0018a6b:	88 10                	mov    BYTE PTR [eax],dl
c0018a6d:	eb 25                	jmp    c0018a94 <HalConsoleScroll(int, int)+0xe8>
c0018a6f:	90                   	nop
c0018a70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a74:	89 d0                	mov    eax,edx
c0018a76:	c1 e0 02             	shl    eax,0x2
c0018a79:	01 d0                	add    eax,edx
c0018a7b:	c1 e0 05             	shl    eax,0x5
c0018a7e:	89 c2                	mov    edx,eax
c0018a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a84:	01 d0                	add    eax,edx
c0018a86:	89 c2                	mov    edx,eax
c0018a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8c:	01 d0                	add    eax,edx
c0018a8e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018a91:	8d 76 00             	lea    esi,[esi+0x0]
c0018a94:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018a99:	e9 36 ff ff ff       	jmp    c00189d4 <HalConsoleScroll(int, int)+0x28>
c0018a9e:	66 90                	xchg   ax,ax
c0018aa0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018aa5:	e9 16 ff ff ff       	jmp    c00189c0 <HalConsoleScroll(int, int)+0x14>
c0018aaa:	66 90                	xchg   ax,ax
c0018aac:	90                   	nop
c0018aad:	83 c4 10             	add    esp,0x10
c0018ab0:	c3                   	ret    
c0018ab1:	8d 76 00             	lea    esi,[esi+0x0]

c0018ab4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018ab4:	83 ec 14             	sub    esp,0x14
c0018ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018abb:	88 04 24             	mov    BYTE PTR [esp],al
c0018abe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018ac1:	0f b6 c0             	movzx  eax,al
c0018ac4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ac8:	89 d1                	mov    ecx,edx
c0018aca:	83 e1 0f             	and    ecx,0xf
c0018acd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ad1:	c1 e2 04             	shl    edx,0x4
c0018ad4:	0f b6 d2             	movzx  edx,dl
c0018ad7:	09 ca                	or     edx,ecx
c0018ad9:	c1 e2 08             	shl    edx,0x8
c0018adc:	09 d0                	or     eax,edx
c0018ade:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018ae3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018aeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018aef:	89 d0                	mov    eax,edx
c0018af1:	c1 e0 02             	shl    eax,0x2
c0018af4:	01 d0                	add    eax,edx
c0018af6:	c1 e0 04             	shl    eax,0x4
c0018af9:	89 c2                	mov    edx,eax
c0018afb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018aff:	01 d0                	add    eax,edx
c0018b01:	d1 e0                	shl    eax,1
c0018b03:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b0b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018b10:	66 89 10             	mov    WORD PTR [eax],dx
c0018b13:	90                   	nop
c0018b14:	83 c4 14             	add    esp,0x14
c0018b17:	c3                   	ret    

c0018b18 <HalConsoleCursorUpdate(int, int)>:
c0018b18:	83 ec 20             	sub    esp,0x20
c0018b1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b1f:	89 c2                	mov    edx,eax
c0018b21:	c1 e2 02             	shl    edx,0x2
c0018b24:	01 d0                	add    eax,edx
c0018b26:	c1 e0 04             	shl    eax,0x4
c0018b29:	89 c2                	mov    edx,eax
c0018b2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b2f:	01 d0                	add    eax,edx
c0018b31:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018b36:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018b3d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018b42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b4a:	ee                   	out    dx,al
c0018b4b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018b50:	0f b6 c0             	movzx  eax,al
c0018b53:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018b5a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018b5e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018b62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b66:	ee                   	out    dx,al
c0018b67:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018b6e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018b73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018b77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b7b:	ee                   	out    dx,al
c0018b7c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018b81:	c1 e8 08             	shr    eax,0x8
c0018b84:	0f b6 c0             	movzx  eax,al
c0018b87:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018b8e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018b92:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018b96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b9a:	ee                   	out    dx,al
c0018b9b:	90                   	nop
c0018b9c:	83 c4 20             	add    esp,0x20
c0018b9f:	c3                   	ret    

c0018ba0 <FAT::getName()>:
c0018ba0:	b8 20 2a 02 c0       	mov    eax,0xc0022a20
c0018ba5:	c3                   	ret    
c0018ba6:	66 90                	xchg   ax,ax

c0018ba8 <FAT::tell(void*, unsigned long long*)>:
c0018ba8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018bad:	75 09                	jne    c0018bb8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018baf:	b8 04 00 00 00       	mov    eax,0x4
c0018bb4:	c3                   	ret    
c0018bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018bbd:	75 09                	jne    c0018bc8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018bbf:	b8 04 00 00 00       	mov    eax,0x4
c0018bc4:	c3                   	ret    
c0018bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bcc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018bcf:	ba 00 00 00 00       	mov    edx,0x0
c0018bd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bd8:	89 01                	mov    DWORD PTR [ecx],eax
c0018bda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018bdd:	b8 00 00 00 00       	mov    eax,0x0
c0018be2:	c3                   	ret    
c0018be3:	90                   	nop

c0018be4 <FAT::stat(void*, unsigned long long*)>:
c0018be4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018be9:	75 09                	jne    c0018bf4 <FAT::stat(void*, unsigned long long*)+0x10>
c0018beb:	b8 04 00 00 00       	mov    eax,0x4
c0018bf0:	c3                   	ret    
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018bf9:	75 09                	jne    c0018c04 <FAT::stat(void*, unsigned long long*)+0x20>
c0018bfb:	b8 04 00 00 00       	mov    eax,0x4
c0018c00:	c3                   	ret    
c0018c01:	8d 76 00             	lea    esi,[esi+0x0]
c0018c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c0b:	ba 00 00 00 00       	mov    edx,0x0
c0018c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c14:	89 01                	mov    DWORD PTR [ecx],eax
c0018c16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018c19:	b8 00 00 00 00       	mov    eax,0x0
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <FAT::~FAT()>:
c0018c20:	83 ec 0c             	sub    esp,0xc
c0018c23:	ba 6c 2a 02 c0       	mov    edx,0xc0022a6c
c0018c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c2c:	89 10                	mov    DWORD PTR [eax],edx
c0018c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c32:	83 ec 0c             	sub    esp,0xc
c0018c35:	50                   	push   eax
c0018c36:	e8 ef 28 ff ff       	call   c000b52a <Filesystem::~Filesystem()>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	90                   	nop
c0018c3f:	83 c4 0c             	add    esp,0xc
c0018c42:	c3                   	ret    
c0018c43:	90                   	nop

c0018c44 <FAT::~FAT()>:
c0018c44:	83 ec 0c             	sub    esp,0xc
c0018c47:	83 ec 0c             	sub    esp,0xc
c0018c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c4e:	e8 cd ff ff ff       	call   c0018c20 <FAT::~FAT()>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	83 ec 08             	sub    esp,0x8
c0018c59:	6a 08                	push   0x8
c0018c5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c5f:	e8 a8 1b ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	83 c4 0c             	add    esp,0xc
c0018c6a:	c3                   	ret    
c0018c6b:	90                   	nop

c0018c6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018c6c:	83 ec 1c             	sub    esp,0x1c
c0018c6f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018c76:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018c7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c7f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c86:	83 f8 ff             	cmp    eax,0xffffffff
c0018c89:	75 35                	jne    c0018cc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018c8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c8f:	88 c2                	mov    dl,al
c0018c91:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c96:	01 d0                	add    eax,edx
c0018c98:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c9c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ca2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ca6:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018cad:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018cb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018cb6:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018cbd:	eb 19                	jmp    c0018cd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018cbf:	90                   	nop
c0018cc0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018cc4:	88 c2                	mov    dl,al
c0018cc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cca:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cd1:	01 d0                	add    eax,edx
c0018cd3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018cd7:	90                   	nop
c0018cd8:	83 ec 04             	sub    esp,0x4
c0018cdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018cdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ce3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018ce7:	50                   	push   eax
c0018ce8:	e8 06 c3 fe ff       	call   c0004ff3 <f_getlabel>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018cf9:	75 09                	jne    c0018d04 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018cfb:	b8 00 00 00 00       	mov    eax,0x0
c0018d00:	eb 0a                	jmp    c0018d0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018d02:	66 90                	xchg   ax,ax
c0018d04:	b8 01 00 00 00       	mov    eax,0x1
c0018d09:	8d 76 00             	lea    esi,[esi+0x0]
c0018d0c:	83 c4 1c             	add    esp,0x1c
c0018d0f:	c3                   	ret    

c0018d10 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018d10:	53                   	push   ebx
c0018d11:	83 ec 58             	sub    esp,0x58
c0018d14:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018d1c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018d20:	b9 00 00 00 00       	mov    ecx,0x0
c0018d25:	b8 3c 00 00 00       	mov    eax,0x3c
c0018d2a:	83 e0 f8             	and    eax,0xfffffff8
c0018d2d:	89 c3                	mov    ebx,eax
c0018d2f:	b8 00 00 00 00       	mov    eax,0x0
c0018d34:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018d38:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018d3c:	83 c0 08             	add    eax,0x8
c0018d3f:	39 d8                	cmp    eax,ebx
c0018d41:	72 f1                	jb     c0018d34 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018d43:	01 c2                	add    edx,eax
c0018d45:	89 0a                	mov    DWORD PTR [edx],ecx
c0018d47:	83 c2 04             	add    edx,0x4
c0018d4a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d4e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d55:	83 f8 ff             	cmp    eax,0xffffffff
c0018d58:	75 36                	jne    c0018d90 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018d5a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018d5e:	88 c2                	mov    dl,al
c0018d60:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d65:	01 d0                	add    eax,edx
c0018d67:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d6b:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d71:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d75:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d7c:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d81:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018d85:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d8c:	eb 1a                	jmp    c0018da8 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018d8e:	66 90                	xchg   ax,ax
c0018d90:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018d94:	88 c2                	mov    dl,al
c0018d96:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d9a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018da1:	01 d0                	add    eax,edx
c0018da3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018da7:	90                   	nop
c0018da8:	83 ec 08             	sub    esp,0x8
c0018dab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018daf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018db3:	50                   	push   eax
c0018db4:	e8 b7 7a fe ff       	call   c0000870 <strcat>
c0018db9:	83 c4 10             	add    esp,0x10
c0018dbc:	83 ec 0c             	sub    esp,0xc
c0018dbf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018dc3:	50                   	push   eax
c0018dc4:	e8 7e c3 fe ff       	call   c0005147 <f_setlabel>
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018dd0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018dd5:	75 09                	jne    c0018de0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018dd7:	b8 00 00 00 00       	mov    eax,0x0
c0018ddc:	eb 0a                	jmp    c0018de8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018dde:	66 90                	xchg   ax,ax
c0018de0:	b8 01 00 00 00       	mov    eax,0x1
c0018de5:	8d 76 00             	lea    esi,[esi+0x0]
c0018de8:	83 c4 58             	add    esp,0x58
c0018deb:	5b                   	pop    ebx
c0018dec:	c3                   	ret    
c0018ded:	90                   	nop
c0018dee:	66 90                	xchg   ax,ax

c0018df0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018df0:	83 ec 2c             	sub    esp,0x2c
c0018df3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018dfb:	83 ec 08             	sub    esp,0x8
c0018dfe:	68 44 2a 02 c0       	push   0xc0022a44
c0018e03:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e07:	e8 74 79 fe ff       	call   c0000780 <strcmp>
c0018e0c:	83 c4 10             	add    esp,0x10
c0018e0f:	85 c0                	test   eax,eax
c0018e11:	0f 94 c0             	sete   al
c0018e14:	0f b6 c0             	movzx  eax,al
c0018e17:	85 c0                	test   eax,eax
c0018e19:	74 0d                	je     c0018e28 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018e1b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e23:	e9 c0 00 00 00       	jmp    c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e28:	83 ec 08             	sub    esp,0x8
c0018e2b:	68 36 2a 02 c0       	push   0xc0022a36
c0018e30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e34:	e8 47 79 fe ff       	call   c0000780 <strcmp>
c0018e39:	83 c4 10             	add    esp,0x10
c0018e3c:	85 c0                	test   eax,eax
c0018e3e:	0f 94 c0             	sete   al
c0018e41:	0f b6 c0             	movzx  eax,al
c0018e44:	85 c0                	test   eax,eax
c0018e46:	74 10                	je     c0018e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018e48:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e50:	e9 93 00 00 00       	jmp    c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]
c0018e58:	83 ec 08             	sub    esp,0x8
c0018e5b:	68 3c 2a 02 c0       	push   0xc0022a3c
c0018e60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e64:	e8 17 79 fe ff       	call   c0000780 <strcmp>
c0018e69:	83 c4 10             	add    esp,0x10
c0018e6c:	85 c0                	test   eax,eax
c0018e6e:	0f 94 c0             	sete   al
c0018e71:	0f b6 c0             	movzx  eax,al
c0018e74:	85 c0                	test   eax,eax
c0018e76:	74 0c                	je     c0018e84 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018e78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e80:	eb 66                	jmp    c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e82:	66 90                	xchg   ax,ax
c0018e84:	83 ec 08             	sub    esp,0x8
c0018e87:	68 1c 02 02 c0       	push   0xc002021c
c0018e8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e90:	e8 eb 78 fe ff       	call   c0000780 <strcmp>
c0018e95:	83 c4 10             	add    esp,0x10
c0018e98:	85 c0                	test   eax,eax
c0018e9a:	0f 94 c0             	sete   al
c0018e9d:	0f b6 c0             	movzx  eax,al
c0018ea0:	85 c0                	test   eax,eax
c0018ea2:	74 0c                	je     c0018eb0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018ea4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018eac:	eb 3a                	jmp    c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018eae:	66 90                	xchg   ax,ax
c0018eb0:	83 ec 08             	sub    esp,0x8
c0018eb3:	68 42 2a 02 c0       	push   0xc0022a42
c0018eb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ebc:	e8 bf 78 fe ff       	call   c0000780 <strcmp>
c0018ec1:	83 c4 10             	add    esp,0x10
c0018ec4:	85 c0                	test   eax,eax
c0018ec6:	0f 94 c0             	sete   al
c0018ec9:	0f b6 c0             	movzx  eax,al
c0018ecc:	85 c0                	test   eax,eax
c0018ece:	74 0c                	je     c0018edc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018ed0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018ed8:	eb 0e                	jmp    c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018eda:	66 90                	xchg   ax,ax
c0018edc:	b8 08 00 00 00       	mov    eax,0x8
c0018ee1:	e9 ea 00 00 00       	jmp    c0018fd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ee6:	66 90                	xchg   ax,ax
c0018ee8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018eef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018ef4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ef8:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018eff:	83 f8 ff             	cmp    eax,0xffffffff
c0018f02:	75 34                	jne    c0018f38 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018f04:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f08:	88 c2                	mov    dl,al
c0018f0a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f0f:	01 d0                	add    eax,edx
c0018f11:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f15:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f1f:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f26:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f2b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018f2f:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f36:	eb 18                	jmp    c0018f50 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018f38:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f3c:	88 c2                	mov    dl,al
c0018f3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f42:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f49:	01 d0                	add    eax,edx
c0018f4b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f4f:	90                   	nop
c0018f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f54:	88 04 24             	mov    BYTE PTR [esp],al
c0018f57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f5f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018f67:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018f6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018f74:	83 ec 0c             	sub    esp,0xc
c0018f77:	68 00 20 00 00       	push   0x2000
c0018f7c:	e8 52 eb fe ff       	call   c0007ad3 <malloc>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f88:	68 00 20 00 00       	push   0x2000
c0018f8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f91:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f95:	50                   	push   eax
c0018f96:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018f9a:	50                   	push   eax
c0018f9b:	e8 a4 c4 fe ff       	call   c0005444 <f_mkfs>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018fa7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018fac:	75 0a                	jne    c0018fb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018fae:	b8 00 00 00 00       	mov    eax,0x0
c0018fb3:	eb 1b                	jmp    c0018fd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018fbd:	75 09                	jne    c0018fc8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018fbf:	b8 09 00 00 00       	mov    eax,0x9
c0018fc4:	eb 0a                	jmp    c0018fd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018fc6:	66 90                	xchg   ax,ax
c0018fc8:	b8 01 00 00 00       	mov    eax,0x1
c0018fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd0:	83 c4 2c             	add    esp,0x2c
c0018fd3:	c3                   	ret    

c0018fd4 <FAT::tryMount(LogicalDisk*, int)>:
c0018fd4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018fda:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fdf:	83 f8 14             	cmp    eax,0x14
c0018fe2:	75 18                	jne    c0018ffc <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018fe4:	83 ec 0c             	sub    esp,0xc
c0018fe7:	68 48 2a 02 c0       	push   0xc0022a48
c0018fec:	e8 d8 82 ff ff       	call   c00112c9 <KePanic(char const*)>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	b0 00                	mov    al,0x0
c0018ff6:	e9 ed 01 00 00       	jmp    c00191e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ffb:	90                   	nop
c0018ffc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019003:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019009:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001900f:	3d 00 02 00 00       	cmp    eax,0x200
c0019014:	74 0a                	je     c0019020 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019016:	b0 00                	mov    al,0x0
c0019018:	e9 cb 01 00 00       	jmp    c00191e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001901d:	8d 76 00             	lea    esi,[esi+0x0]
c0019020:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019028:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001902f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0019036:	83 f8 ff             	cmp    eax,0xffffffff
c0019039:	74 09                	je     c0019044 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001903b:	b0 01                	mov    al,0x1
c001903d:	e9 a6 01 00 00       	jmp    c00191e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019042:	66 90                	xchg   ax,ax
c0019044:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001904e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019056:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001905d:	88 c2                	mov    dl,al
c001905f:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019064:	01 d0                	add    eax,edx
c0019066:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001906d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0019073:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001907a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0019081:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019086:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001908d:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0019094:	83 ec 0c             	sub    esp,0xc
c0019097:	68 34 02 00 00       	push   0x234
c001909c:	e8 32 ea fe ff       	call   c0007ad3 <malloc>
c00190a1:	83 c4 10             	add    esp,0x10
c00190a4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00190ab:	83 ec 04             	sub    esp,0x4
c00190ae:	6a 00                	push   0x0
c00190b0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00190b7:	50                   	push   eax
c00190b8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00190bf:	e8 7a ab fe ff       	call   c0003c3e <f_mount>
c00190c4:	83 c4 10             	add    esp,0x10
c00190c7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00190ce:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00190d6:	74 1c                	je     c00190f4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00190d8:	83 ec 0c             	sub    esp,0xc
c00190db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00190e2:	e8 0c ea fe ff       	call   c0007af3 <rfree>
c00190e7:	83 c4 10             	add    esp,0x10
c00190ea:	b0 00                	mov    al,0x0
c00190ec:	e9 f7 00 00 00       	jmp    c00191e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190f1:	8d 76 00             	lea    esi,[esi+0x0]
c00190f4:	83 ec 04             	sub    esp,0x4
c00190f7:	68 00 01 00 00       	push   0x100
c00190fc:	6a 00                	push   0x0
c00190fe:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019105:	50                   	push   eax
c0019106:	e8 e5 73 fe ff       	call   c00004f0 <memset>
c001910b:	83 c4 10             	add    esp,0x10
c001910e:	83 ec 08             	sub    esp,0x8
c0019111:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019118:	50                   	push   eax
c0019119:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019120:	50                   	push   eax
c0019121:	e8 4a 77 fe ff       	call   c0000870 <strcat>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	83 ec 08             	sub    esp,0x8
c001912c:	68 56 2a 02 c0       	push   0xc0022a56
c0019131:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019138:	50                   	push   eax
c0019139:	e8 32 77 fe ff       	call   c0000870 <strcat>
c001913e:	83 c4 10             	add    esp,0x10
c0019141:	83 ec 04             	sub    esp,0x4
c0019144:	6a 01                	push   0x1
c0019146:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001914d:	50                   	push   eax
c001914e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019152:	50                   	push   eax
c0019153:	e8 48 ab fe ff       	call   c0003ca0 <f_open>
c0019158:	83 c4 10             	add    esp,0x10
c001915b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019162:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019169:	85 c0                	test   eax,eax
c001916b:	74 0b                	je     c0019178 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001916d:	78 31                	js     c00191a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001916f:	83 e8 04             	sub    eax,0x4
c0019172:	83 f8 01             	cmp    eax,0x1
c0019175:	77 29                	ja     c00191a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019177:	90                   	nop
c0019178:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019180:	83 ec 0c             	sub    esp,0xc
c0019183:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019187:	50                   	push   eax
c0019188:	e8 c3 b2 fe ff       	call   c0004450 <f_close>
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	90                   	nop
c0019191:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019199:	85 c0                	test   eax,eax
c001919b:	74 43                	je     c00191e0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001919d:	eb 31                	jmp    c00191d0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001919f:	90                   	nop
c00191a0:	83 ec 0c             	sub    esp,0xc
c00191a3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00191aa:	e8 44 e9 fe ff       	call   c0007af3 <rfree>
c00191af:	83 c4 10             	add    esp,0x10
c00191b2:	83 ec 04             	sub    esp,0x4
c00191b5:	6a 00                	push   0x0
c00191b7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00191be:	50                   	push   eax
c00191bf:	6a 00                	push   0x0
c00191c1:	e8 78 aa fe ff       	call   c0003c3e <f_mount>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	b0 00                	mov    al,0x0
c00191cb:	eb 1b                	jmp    c00191e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00191cd:	8d 76 00             	lea    esi,[esi+0x0]
c00191d0:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00191d5:	83 c0 01             	add    eax,0x1
c00191d8:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c00191dd:	8d 76 00             	lea    esi,[esi+0x0]
c00191e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00191e7:	90                   	nop
c00191e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00191ee:	c3                   	ret    
c00191ef:	90                   	nop

c00191f0 <FAT::allocateSwapfile(char const*, int)>:
c00191f0:	55                   	push   ebp
c00191f1:	57                   	push   edi
c00191f2:	56                   	push   esi
c00191f3:	53                   	push   ebx
c00191f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00191fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019205:	83 ec 0c             	sub    esp,0xc
c0019208:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001920f:	e8 bf e8 fe ff       	call   c0007ad3 <malloc>
c0019214:	83 c4 10             	add    esp,0x10
c0019217:	89 c7                	mov    edi,eax
c0019219:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001921e:	83 ec 04             	sub    esp,0x4
c0019221:	50                   	push   eax
c0019222:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019229:	57                   	push   edi
c001922a:	e8 7d 26 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019239:	83 ec 04             	sub    esp,0x4
c001923c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019240:	50                   	push   eax
c0019241:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019245:	50                   	push   eax
c0019246:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001924d:	e8 7a 29 ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001925c:	c1 e0 14             	shl    eax,0x14
c001925f:	89 c7                	mov    edi,eax
c0019261:	89 c5                	mov    ebp,eax
c0019263:	c1 fd 1f             	sar    ebp,0x1f
c0019266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001926a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001926e:	89 f9                	mov    ecx,edi
c0019270:	31 c1                	xor    ecx,eax
c0019272:	89 cb                	mov    ebx,ecx
c0019274:	89 e9                	mov    ecx,ebp
c0019276:	31 d1                	xor    ecx,edx
c0019278:	89 ce                	mov    esi,ecx
c001927a:	89 f0                	mov    eax,esi
c001927c:	09 d8                	or     eax,ebx
c001927e:	0f 84 9c 00 00 00    	je     c0019320 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019284:	83 ec 0c             	sub    esp,0xc
c0019287:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001928e:	e8 05 28 ff ff       	call   c000ba98 <File::unlink()>
c0019293:	83 c4 10             	add    esp,0x10
c0019296:	83 ec 08             	sub    esp,0x8
c0019299:	6a 12                	push   0x12
c001929b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192a2:	e8 23 26 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00192b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00192be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00192c5:	c1 e0 14             	shl    eax,0x14
c00192c8:	83 ec 04             	sub    esp,0x4
c00192cb:	6a 01                	push   0x1
c00192cd:	50                   	push   eax
c00192ce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00192d5:	e8 fd bf fe ff       	call   c00052d7 <f_expand>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00192e6:	83 c0 10             	add    eax,0x10
c00192e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00192eb:	83 ec 0c             	sub    esp,0xc
c00192ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00192f2:	52                   	push   edx
c00192f3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00192f7:	52                   	push   edx
c00192f8:	6a 00                	push   0x0
c00192fa:	68 00 04 00 00       	push   0x400
c00192ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019306:	ff d0                	call   eax
c0019308:	83 c4 20             	add    esp,0x20
c001930b:	83 ec 0c             	sub    esp,0xc
c001930e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019315:	e8 0e 26 ff ff       	call   c000b928 <File::close()>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	8d 76 00             	lea    esi,[esi+0x0]
c0019320:	83 ec 08             	sub    esp,0x8
c0019323:	6a 01                	push   0x1
c0019325:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001932c:	e8 99 25 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001933b:	8b 00                	mov    eax,DWORD PTR [eax]
c001933d:	83 c0 0c             	add    eax,0xc
c0019340:	8b 00                	mov    eax,DWORD PTR [eax]
c0019342:	83 ec 0c             	sub    esp,0xc
c0019345:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019349:	52                   	push   edx
c001934a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001934e:	52                   	push   edx
c001934f:	6a 00                	push   0x0
c0019351:	6a 04                	push   0x4
c0019353:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001935a:	ff d0                	call   eax
c001935c:	83 c4 20             	add    esp,0x20
c001935f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019366:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001936c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019373:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001937a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001937d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019384:	83 ec 0c             	sub    esp,0xc
c0019387:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001938e:	e8 95 25 ff ff       	call   c000b928 <File::close()>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001939d:	ba 00 00 00 00       	mov    edx,0x0
c00193a2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00193a8:	5b                   	pop    ebx
c00193a9:	5e                   	pop    esi
c00193aa:	5f                   	pop    edi
c00193ab:	5d                   	pop    ebp
c00193ac:	c3                   	ret    
c00193ad:	90                   	nop
c00193ae:	66 90                	xchg   ax,ax

c00193b0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00193b0:	57                   	push   edi
c00193b1:	56                   	push   esi
c00193b2:	53                   	push   ebx
c00193b3:	81 ec 50 02 00 00    	sub    esp,0x250
c00193b9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00193c1:	74 0d                	je     c00193d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00193c3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00193cb:	75 0f                	jne    c00193dc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00193cd:	8d 76 00             	lea    esi,[esi+0x0]
c00193d0:	b8 04 00 00 00       	mov    eax,0x4
c00193d5:	e9 3a 01 00 00       	jmp    c0019514 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00193da:	66 90                	xchg   ax,ax
c00193dc:	83 ec 08             	sub    esp,0x8
c00193df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00193e6:	50                   	push   eax
c00193e7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00193ee:	e8 29 b3 fe ff       	call   c000471c <f_readdir>
c00193f3:	83 c4 10             	add    esp,0x10
c00193f6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00193fd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019404:	83 ec 0c             	sub    esp,0xc
c0019407:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001940e:	83 c0 16             	add    eax,0x16
c0019411:	50                   	push   eax
c0019412:	e8 69 71 fe ff       	call   c0000580 <strlen>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	ba 00 00 00 00       	mov    edx,0x0
c001941f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019423:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019427:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001942e:	0f b6 c0             	movzx  eax,al
c0019431:	83 e0 10             	and    eax,0x10
c0019434:	74 0a                	je     c0019440 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019436:	b8 02 00 00 00       	mov    eax,0x2
c001943b:	eb 0b                	jmp    c0019448 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001943d:	8d 76 00             	lea    esi,[esi+0x0]
c0019440:	b8 01 00 00 00       	mov    eax,0x1
c0019445:	8d 76 00             	lea    esi,[esi+0x0]
c0019448:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001944c:	83 ec 08             	sub    esp,0x8
c001944f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019456:	83 c0 16             	add    eax,0x16
c0019459:	50                   	push   eax
c001945a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001945e:	83 c0 10             	add    eax,0x10
c0019461:	50                   	push   eax
c0019462:	e8 e9 71 fe ff       	call   c0000650 <strcpy>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019471:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019478:	8d 44 24 08          	lea    eax,[esp+0x8]
c001947c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019483:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001948a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019491:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019498:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001949f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00194a6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00194ad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00194b4:	89 c6                	mov    esi,eax
c00194b6:	89 d7                	mov    edi,edx
c00194b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194ba:	89 c8                	mov    eax,ecx
c00194bc:	89 fa                	mov    edx,edi
c00194be:	89 f3                	mov    ebx,esi
c00194c0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00194c7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00194ce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00194d5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00194dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00194e2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00194e9:	0f be c0             	movsx  eax,al
c00194ec:	85 c0                	test   eax,eax
c00194ee:	75 08                	jne    c00194f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00194f0:	b8 07 00 00 00       	mov    eax,0x7
c00194f5:	eb 1d                	jmp    c0019514 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00194f7:	90                   	nop
c00194f8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00194ff:	85 c0                	test   eax,eax
c0019501:	75 09                	jne    c001950c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019503:	b8 00 00 00 00       	mov    eax,0x0
c0019508:	eb 0a                	jmp    c0019514 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001950a:	66 90                	xchg   ax,ax
c001950c:	b8 01 00 00 00       	mov    eax,0x1
c0019511:	8d 76 00             	lea    esi,[esi+0x0]
c0019514:	81 c4 50 02 00 00    	add    esp,0x250
c001951a:	5b                   	pop    ebx
c001951b:	5e                   	pop    esi
c001951c:	5f                   	pop    edi
c001951d:	c3                   	ret    
c001951e:	66 90                	xchg   ax,ax

c0019520 <FAT::read(void*, unsigned long, void*, int*)>:
c0019520:	83 ec 1c             	sub    esp,0x1c
c0019523:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019528:	74 0a                	je     c0019534 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001952a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001952f:	75 0b                	jne    c001953c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019531:	8d 76 00             	lea    esi,[esi+0x0]
c0019534:	b8 04 00 00 00       	mov    eax,0x4
c0019539:	eb 41                	jmp    c001957c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001953b:	90                   	nop
c001953c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019540:	50                   	push   eax
c0019541:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019545:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019549:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001954d:	e8 11 aa fe ff       	call   c0003f63 <f_read>
c0019552:	83 c4 10             	add    esp,0x10
c0019555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001955d:	89 c2                	mov    edx,eax
c001955f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019563:	89 10                	mov    DWORD PTR [eax],edx
c0019565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019569:	85 c0                	test   eax,eax
c001956b:	75 07                	jne    c0019574 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001956d:	b8 00 00 00 00       	mov    eax,0x0
c0019572:	eb 08                	jmp    c001957c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019574:	b8 01 00 00 00       	mov    eax,0x1
c0019579:	8d 76 00             	lea    esi,[esi+0x0]
c001957c:	83 c4 1c             	add    esp,0x1c
c001957f:	c3                   	ret    

c0019580 <FAT::write(void*, unsigned long, void*, int*)>:
c0019580:	83 ec 1c             	sub    esp,0x1c
c0019583:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019588:	74 0a                	je     c0019594 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001958a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001958f:	75 0b                	jne    c001959c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019591:	8d 76 00             	lea    esi,[esi+0x0]
c0019594:	b8 04 00 00 00       	mov    eax,0x4
c0019599:	eb 41                	jmp    c00195dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001959b:	90                   	nop
c001959c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195a0:	50                   	push   eax
c00195a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00195a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ad:	e8 92 ab fe ff       	call   c0004144 <f_write>
c00195b2:	83 c4 10             	add    esp,0x10
c00195b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195bd:	89 c2                	mov    edx,eax
c00195bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00195c3:	89 10                	mov    DWORD PTR [eax],edx
c00195c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195c9:	85 c0                	test   eax,eax
c00195cb:	75 07                	jne    c00195d4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00195cd:	b8 00 00 00 00       	mov    eax,0x0
c00195d2:	eb 08                	jmp    c00195dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00195d4:	b8 01 00 00 00       	mov    eax,0x1
c00195d9:	8d 76 00             	lea    esi,[esi+0x0]
c00195dc:	83 c4 1c             	add    esp,0x1c
c00195df:	c3                   	ret    

c00195e0 <FAT::close(void*)>:
c00195e0:	83 ec 1c             	sub    esp,0x1c
c00195e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195e8:	75 0a                	jne    c00195f4 <FAT::close(void*)+0x14>
c00195ea:	b8 04 00 00 00       	mov    eax,0x4
c00195ef:	eb 3f                	jmp    c0019630 <FAT::close(void*)+0x50>
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	83 ec 0c             	sub    esp,0xc
c00195f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195fb:	e8 50 ae fe ff       	call   c0004450 <f_close>
c0019600:	83 c4 10             	add    esp,0x10
c0019603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019607:	83 ec 0c             	sub    esp,0xc
c001960a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001960e:	e8 d0 e4 fe ff       	call   c0007ae3 <free>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001961a:	85 c0                	test   eax,eax
c001961c:	75 0a                	jne    c0019628 <FAT::close(void*)+0x48>
c001961e:	b8 00 00 00 00       	mov    eax,0x0
c0019623:	eb 0b                	jmp    c0019630 <FAT::close(void*)+0x50>
c0019625:	8d 76 00             	lea    esi,[esi+0x0]
c0019628:	b8 01 00 00 00       	mov    eax,0x1
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	83 c4 1c             	add    esp,0x1c
c0019633:	c3                   	ret    

c0019634 <FAT::closeDir(void*)>:
c0019634:	83 ec 1c             	sub    esp,0x1c
c0019637:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001963c:	75 0a                	jne    c0019648 <FAT::closeDir(void*)+0x14>
c001963e:	b8 04 00 00 00       	mov    eax,0x4
c0019643:	eb 3f                	jmp    c0019684 <FAT::closeDir(void*)+0x50>
c0019645:	8d 76 00             	lea    esi,[esi+0x0]
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001964f:	e8 a6 b0 fe ff       	call   c00046fa <f_closedir>
c0019654:	83 c4 10             	add    esp,0x10
c0019657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001965b:	83 ec 0c             	sub    esp,0xc
c001965e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019662:	e8 7c e4 fe ff       	call   c0007ae3 <free>
c0019667:	83 c4 10             	add    esp,0x10
c001966a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001966e:	85 c0                	test   eax,eax
c0019670:	75 0a                	jne    c001967c <FAT::closeDir(void*)+0x48>
c0019672:	b8 00 00 00 00       	mov    eax,0x0
c0019677:	eb 0b                	jmp    c0019684 <FAT::closeDir(void*)+0x50>
c0019679:	8d 76 00             	lea    esi,[esi+0x0]
c001967c:	b8 01 00 00 00       	mov    eax,0x1
c0019681:	8d 76 00             	lea    esi,[esi+0x0]
c0019684:	83 c4 1c             	add    esp,0x1c
c0019687:	c3                   	ret    

c0019688 <FAT::truncate(void*, unsigned long long)>:
c0019688:	83 ec 2c             	sub    esp,0x2c
c001968b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001968f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019693:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019697:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001969b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00196a0:	75 0a                	jne    c00196ac <FAT::truncate(void*, unsigned long long)+0x24>
c00196a2:	b8 04 00 00 00       	mov    eax,0x4
c00196a7:	eb 47                	jmp    c00196f0 <FAT::truncate(void*, unsigned long long)+0x68>
c00196a9:	8d 76 00             	lea    esi,[esi+0x0]
c00196ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00196b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00196bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196c3:	83 ec 08             	sub    esp,0x8
c00196c6:	50                   	push   eax
c00196c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00196cb:	e8 af ad fe ff       	call   c000447f <f_lseek>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196db:	85 c0                	test   eax,eax
c00196dd:	75 09                	jne    c00196e8 <FAT::truncate(void*, unsigned long long)+0x60>
c00196df:	b8 00 00 00 00       	mov    eax,0x0
c00196e4:	eb 0a                	jmp    c00196f0 <FAT::truncate(void*, unsigned long long)+0x68>
c00196e6:	66 90                	xchg   ax,ax
c00196e8:	b8 01 00 00 00       	mov    eax,0x1
c00196ed:	8d 76 00             	lea    esi,[esi+0x0]
c00196f0:	83 c4 2c             	add    esp,0x2c
c00196f3:	c3                   	ret    

c00196f4 <FAT::seek(void*, unsigned long long)>:
c00196f4:	83 ec 2c             	sub    esp,0x2c
c00196f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019703:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019707:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001970c:	75 0a                	jne    c0019718 <FAT::seek(void*, unsigned long long)+0x24>
c001970e:	b8 04 00 00 00       	mov    eax,0x4
c0019713:	eb 33                	jmp    c0019748 <FAT::seek(void*, unsigned long long)+0x54>
c0019715:	8d 76 00             	lea    esi,[esi+0x0]
c0019718:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001971c:	83 ec 08             	sub    esp,0x8
c001971f:	50                   	push   eax
c0019720:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019724:	e8 56 ad fe ff       	call   c000447f <f_lseek>
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019730:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019734:	85 c0                	test   eax,eax
c0019736:	75 08                	jne    c0019740 <FAT::seek(void*, unsigned long long)+0x4c>
c0019738:	b8 00 00 00 00       	mov    eax,0x0
c001973d:	eb 09                	jmp    c0019748 <FAT::seek(void*, unsigned long long)+0x54>
c001973f:	90                   	nop
c0019740:	b8 01 00 00 00       	mov    eax,0x1
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	83 c4 2c             	add    esp,0x2c
c001974b:	c3                   	ret    

c001974c <fatWrapperReadDisk>:
c001974c:	53                   	push   ebx
c001974d:	83 ec 18             	sub    esp,0x18
c0019750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019754:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019758:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001975d:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019764:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001976c:	ba 00 00 00 00       	mov    edx,0x0
c0019771:	83 ec 0c             	sub    esp,0xc
c0019774:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019778:	53                   	push   ebx
c0019779:	52                   	push   edx
c001977a:	50                   	push   eax
c001977b:	51                   	push   ecx
c001977c:	e8 95 43 ff ff       	call   c000db16 <LogicalDisk::read(unsigned long long, int, void*)>
c0019781:	83 c4 20             	add    esp,0x20
c0019784:	83 c4 18             	add    esp,0x18
c0019787:	5b                   	pop    ebx
c0019788:	c3                   	ret    
c0019789:	8d 76 00             	lea    esi,[esi+0x0]

c001978c <fatWrapperWriteDisk>:
c001978c:	53                   	push   ebx
c001978d:	83 ec 18             	sub    esp,0x18
c0019790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019794:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019798:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001979d:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00197a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00197a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197ac:	ba 00 00 00 00       	mov    edx,0x0
c00197b1:	83 ec 0c             	sub    esp,0xc
c00197b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b8:	53                   	push   ebx
c00197b9:	52                   	push   edx
c00197ba:	50                   	push   eax
c00197bb:	51                   	push   ecx
c00197bc:	e8 c1 43 ff ff       	call   c000db82 <LogicalDisk::write(unsigned long long, int, void*)>
c00197c1:	83 c4 20             	add    esp,0x20
c00197c4:	83 c4 18             	add    esp,0x18
c00197c7:	5b                   	pop    ebx
c00197c8:	c3                   	ret    
c00197c9:	8d 76 00             	lea    esi,[esi+0x0]

c00197cc <fatWrapperIoctl>:
c00197cc:	53                   	push   ebx
c00197cd:	83 ec 28             	sub    esp,0x28
c00197d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00197d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00197d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197dc:	88 d0                	mov    al,dl
c00197de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197e7:	83 f8 02             	cmp    eax,0x2
c00197ea:	75 34                	jne    c0019820 <fatWrapperIoctl+0x54>
c00197ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197f9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019800:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019806:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001980c:	89 c2                	mov    edx,eax
c001980e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019812:	66 89 10             	mov    WORD PTR [eax],dx
c0019815:	b8 00 00 00 00       	mov    eax,0x0
c001981a:	e9 c5 00 00 00       	jmp    c00198e4 <fatWrapperIoctl+0x118>
c001981f:	90                   	nop
c0019820:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019825:	83 f8 01             	cmp    eax,0x1
c0019828:	75 6a                	jne    c0019894 <fatWrapperIoctl+0xc8>
c001982a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001982e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019832:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019837:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001983e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019844:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001984a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019850:	89 c8                	mov    eax,ecx
c0019852:	89 da                	mov    edx,ebx
c0019854:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019858:	c1 e0 0a             	shl    eax,0xa
c001985b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019860:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0019867:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001986d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019873:	89 cb                	mov    ebx,ecx
c0019875:	c1 fb 1f             	sar    ebx,0x1f
c0019878:	53                   	push   ebx
c0019879:	51                   	push   ecx
c001987a:	52                   	push   edx
c001987b:	50                   	push   eax
c001987c:	e8 af 5b 00 00       	call   c001f430 <__udivdi3>
c0019881:	83 c4 10             	add    esp,0x10
c0019884:	89 c2                	mov    edx,eax
c0019886:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001988a:	89 10                	mov    DWORD PTR [eax],edx
c001988c:	b8 00 00 00 00       	mov    eax,0x0
c0019891:	eb 51                	jmp    c00198e4 <fatWrapperIoctl+0x118>
c0019893:	90                   	nop
c0019894:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019899:	85 c0                	test   eax,eax
c001989b:	75 07                	jne    c00198a4 <fatWrapperIoctl+0xd8>
c001989d:	b8 00 00 00 00       	mov    eax,0x0
c00198a2:	eb 40                	jmp    c00198e4 <fatWrapperIoctl+0x118>
c00198a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00198a9:	83 f8 03             	cmp    eax,0x3
c00198ac:	75 1a                	jne    c00198c8 <fatWrapperIoctl+0xfc>
c00198ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00198b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198ba:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00198c0:	b8 00 00 00 00       	mov    eax,0x0
c00198c5:	eb 1d                	jmp    c00198e4 <fatWrapperIoctl+0x118>
c00198c7:	90                   	nop
c00198c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00198cd:	83 f8 04             	cmp    eax,0x4
c00198d0:	75 0a                	jne    c00198dc <fatWrapperIoctl+0x110>
c00198d2:	b8 00 00 00 00       	mov    eax,0x0
c00198d7:	eb 0b                	jmp    c00198e4 <fatWrapperIoctl+0x118>
c00198d9:	8d 76 00             	lea    esi,[esi+0x0]
c00198dc:	b8 04 00 00 00       	mov    eax,0x4
c00198e1:	8d 76 00             	lea    esi,[esi+0x0]
c00198e4:	83 c4 28             	add    esp,0x28
c00198e7:	5b                   	pop    ebx
c00198e8:	c3                   	ret    
c00198e9:	90                   	nop
c00198ea:	66 90                	xchg   ax,ax

c00198ec <FAT::FAT()>:
c00198ec:	83 ec 1c             	sub    esp,0x1c
c00198ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198f3:	83 ec 0c             	sub    esp,0xc
c00198f6:	50                   	push   eax
c00198f7:	e8 0a 1c ff ff       	call   c000b506 <Filesystem::Filesystem()>
c00198fc:	83 c4 10             	add    esp,0x10
c00198ff:	ba 6c 2a 02 c0       	mov    edx,0xc0022a6c
c0019904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019908:	89 10                	mov    DWORD PTR [eax],edx
c001990a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019914:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001991c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019921:	7f 19                	jg     c001993c <FAT::FAT()+0x50>
c0019923:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019927:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019932:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019937:	eb e3                	jmp    c001991c <FAT::FAT()+0x30>
c0019939:	8d 76 00             	lea    esi,[esi+0x0]
c001993c:	90                   	nop
c001993d:	83 c4 1c             	add    esp,0x1c
c0019940:	c3                   	ret    
c0019941:	90                   	nop
c0019942:	66 90                	xchg   ax,ax

c0019944 <FAT::fixFilepath(char*)>:
c0019944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019948:	8a 00                	mov    al,BYTE PTR [eax]
c001994a:	0f be c0             	movsx  eax,al
c001994d:	83 f8 40             	cmp    eax,0x40
c0019950:	7e 2e                	jle    c0019980 <FAT::fixFilepath(char*)+0x3c>
c0019952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019956:	8a 00                	mov    al,BYTE PTR [eax]
c0019958:	83 e8 41             	sub    eax,0x41
c001995b:	88 c2                	mov    dl,al
c001995d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019961:	88 10                	mov    BYTE PTR [eax],dl
c0019963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019967:	8a 00                	mov    al,BYTE PTR [eax]
c0019969:	0f be c0             	movsx  eax,al
c001996c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0019973:	83 c0 30             	add    eax,0x30
c0019976:	88 c2                	mov    dl,al
c0019978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001997c:	88 10                	mov    BYTE PTR [eax],dl
c001997e:	66 90                	xchg   ax,ax
c0019980:	90                   	nop
c0019981:	c3                   	ret    
c0019982:	66 90                	xchg   ax,ax

c0019984 <FAT::open(char const*, void**, FileOpenMode)>:
c0019984:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001998a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019992:	74 0c                	je     c00199a0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019994:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001999c:	75 0e                	jne    c00199ac <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001999e:	66 90                	xchg   ax,ax
c00199a0:	b8 04 00 00 00       	mov    eax,0x4
c00199a5:	e9 46 01 00 00       	jmp    c0019af0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00199aa:	66 90                	xchg   ax,ax
c00199ac:	83 ec 08             	sub    esp,0x8
c00199af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199ba:	50                   	push   eax
c00199bb:	e8 90 6c fe ff       	call   c0000650 <strcpy>
c00199c0:	83 c4 10             	add    esp,0x10
c00199c3:	83 ec 08             	sub    esp,0x8
c00199c6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00199ca:	50                   	push   eax
c00199cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199d2:	e8 6d ff ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00199e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199e9:	83 e0 01             	and    eax,0x1
c00199ec:	74 12                	je     c0019a00 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00199ee:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199f5:	83 c8 01             	or     eax,0x1
c00199f8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199ff:	90                   	nop
c0019a00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a07:	83 e0 04             	and    eax,0x4
c0019a0a:	74 24                	je     c0019a30 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019a0c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a13:	83 c8 30             	or     eax,0x30
c0019a16:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a1d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a24:	83 c8 02             	or     eax,0x2
c0019a27:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a37:	83 e0 02             	and    eax,0x2
c0019a3a:	74 14                	je     c0019a50 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019a3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a43:	83 c8 02             	or     eax,0x2
c0019a46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a57:	83 e0 08             	and    eax,0x8
c0019a5a:	74 14                	je     c0019a70 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019a5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a63:	83 c8 04             	or     eax,0x4
c0019a66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a77:	83 e0 10             	and    eax,0x10
c0019a7a:	74 14                	je     c0019a90 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019a7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a83:	83 c8 08             	or     eax,0x8
c0019a86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	68 28 02 00 00       	push   0x228
c0019a98:	e8 36 e0 fe ff       	call   c0007ad3 <malloc>
c0019a9d:	83 c4 10             	add    esp,0x10
c0019aa0:	89 c2                	mov    edx,eax
c0019aa2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019aa9:	89 10                	mov    DWORD PTR [eax],edx
c0019aab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019ab3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0019abc:	83 ec 04             	sub    esp,0x4
c0019abf:	52                   	push   edx
c0019ac0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019ac4:	52                   	push   edx
c0019ac5:	50                   	push   eax
c0019ac6:	e8 d5 a1 fe ff       	call   c0003ca0 <f_open>
c0019acb:	83 c4 10             	add    esp,0x10
c0019ace:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019ad5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019add:	74 09                	je     c0019ae8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019adf:	b8 01 00 00 00       	mov    eax,0x1
c0019ae4:	eb 0a                	jmp    c0019af0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ae6:	66 90                	xchg   ax,ax
c0019ae8:	b8 00 00 00 00       	mov    eax,0x0
c0019aed:	8d 76 00             	lea    esi,[esi+0x0]
c0019af0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019af6:	c3                   	ret    
c0019af7:	90                   	nop

c0019af8 <FAT::openDir(char const*, void**)>:
c0019af8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019afe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b06:	74 0c                	je     c0019b14 <FAT::openDir(char const*, void**)+0x1c>
c0019b08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019b10:	75 0e                	jne    c0019b20 <FAT::openDir(char const*, void**)+0x28>
c0019b12:	66 90                	xchg   ax,ax
c0019b14:	b8 04 00 00 00       	mov    eax,0x4
c0019b19:	e9 82 00 00 00       	jmp    c0019ba0 <FAT::openDir(char const*, void**)+0xa8>
c0019b1e:	66 90                	xchg   ax,ax
c0019b20:	83 ec 08             	sub    esp,0x8
c0019b23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b2e:	50                   	push   eax
c0019b2f:	e8 1c 6b fe ff       	call   c0000650 <strcpy>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	83 ec 08             	sub    esp,0x8
c0019b3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b3e:	50                   	push   eax
c0019b3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b46:	e8 f9 fd ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	6a 30                	push   0x30
c0019b53:	e8 7b df fe ff       	call   c0007ad3 <malloc>
c0019b58:	83 c4 10             	add    esp,0x10
c0019b5b:	89 c2                	mov    edx,eax
c0019b5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b64:	89 10                	mov    DWORD PTR [eax],edx
c0019b66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b6f:	83 ec 08             	sub    esp,0x8
c0019b72:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019b76:	52                   	push   edx
c0019b77:	50                   	push   eax
c0019b78:	e8 b2 aa fe ff       	call   c000462f <f_opendir>
c0019b7d:	83 c4 10             	add    esp,0x10
c0019b80:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b87:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019b8f:	74 07                	je     c0019b98 <FAT::openDir(char const*, void**)+0xa0>
c0019b91:	b8 01 00 00 00       	mov    eax,0x1
c0019b96:	eb 08                	jmp    c0019ba0 <FAT::openDir(char const*, void**)+0xa8>
c0019b98:	b8 00 00 00 00       	mov    eax,0x0
c0019b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ba6:	c3                   	ret    
c0019ba7:	90                   	nop

c0019ba8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ba8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019bae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019bb6:	75 0c                	jne    c0019bc4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019bb8:	b8 04 00 00 00       	mov    eax,0x4
c0019bbd:	e9 d6 00 00 00       	jmp    c0019c98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019bc2:	66 90                	xchg   ax,ax
c0019bc4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019bcc:	75 0a                	jne    c0019bd8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019bce:	b8 04 00 00 00       	mov    eax,0x4
c0019bd3:	e9 c0 00 00 00       	jmp    c0019c98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019bd8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019be0:	75 0a                	jne    c0019bec <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019be2:	b8 04 00 00 00       	mov    eax,0x4
c0019be7:	e9 ac 00 00 00       	jmp    c0019c98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019bec:	83 ec 08             	sub    esp,0x8
c0019bef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019bf6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019bfd:	50                   	push   eax
c0019bfe:	e8 4d 6a fe ff       	call   c0000650 <strcpy>
c0019c03:	83 c4 10             	add    esp,0x10
c0019c06:	83 ec 08             	sub    esp,0x8
c0019c09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019c10:	50                   	push   eax
c0019c11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019c18:	e8 27 fd ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019c1d:	83 c4 10             	add    esp,0x10
c0019c20:	83 ec 08             	sub    esp,0x8
c0019c23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019c27:	50                   	push   eax
c0019c28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019c2f:	50                   	push   eax
c0019c30:	e8 79 ab fe ff       	call   c00047ae <f_stat>
c0019c35:	83 c4 10             	add    esp,0x10
c0019c38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019c3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019c46:	85 c0                	test   eax,eax
c0019c48:	74 0a                	je     c0019c54 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019c4a:	83 f8 04             	cmp    eax,0x4
c0019c4d:	74 39                	je     c0019c88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019c4f:	eb 3f                	jmp    c0019c90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019c51:	8d 76 00             	lea    esi,[esi+0x0]
c0019c54:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019c58:	0f b6 c0             	movzx  eax,al
c0019c5b:	83 e0 10             	and    eax,0x10
c0019c5e:	0f 95 c2             	setne  dl
c0019c61:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019c68:	88 10                	mov    BYTE PTR [eax],dl
c0019c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c6e:	ba 00 00 00 00       	mov    edx,0x0
c0019c73:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019c7a:	89 01                	mov    DWORD PTR [ecx],eax
c0019c7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c7f:	b8 00 00 00 00       	mov    eax,0x0
c0019c84:	eb 12                	jmp    c0019c98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c86:	66 90                	xchg   ax,ax
c0019c88:	b8 02 00 00 00       	mov    eax,0x2
c0019c8d:	eb 09                	jmp    c0019c98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c8f:	90                   	nop
c0019c90:	b8 01 00 00 00       	mov    eax,0x1
c0019c95:	8d 76 00             	lea    esi,[esi+0x0]
c0019c98:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019c9e:	c3                   	ret    
c0019c9f:	90                   	nop

c0019ca0 <FAT::unlink(char const*)>:
c0019ca0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ca6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cae:	75 08                	jne    c0019cb8 <FAT::unlink(char const*)+0x18>
c0019cb0:	b8 04 00 00 00       	mov    eax,0x4
c0019cb5:	eb 61                	jmp    c0019d18 <FAT::unlink(char const*)+0x78>
c0019cb7:	90                   	nop
c0019cb8:	83 ec 08             	sub    esp,0x8
c0019cbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cc6:	50                   	push   eax
c0019cc7:	e8 84 69 fe ff       	call   c0000650 <strcpy>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	83 ec 08             	sub    esp,0x8
c0019cd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cd6:	50                   	push   eax
c0019cd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cde:	e8 61 fc ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019ce3:	83 c4 10             	add    esp,0x10
c0019ce6:	83 ec 0c             	sub    esp,0xc
c0019ce9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ced:	50                   	push   eax
c0019cee:	e8 2d ad fe ff       	call   c0004a20 <f_unlink>
c0019cf3:	83 c4 10             	add    esp,0x10
c0019cf6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019cfd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d04:	85 c0                	test   eax,eax
c0019d06:	75 08                	jne    c0019d10 <FAT::unlink(char const*)+0x70>
c0019d08:	b8 00 00 00 00       	mov    eax,0x0
c0019d0d:	eb 09                	jmp    c0019d18 <FAT::unlink(char const*)+0x78>
c0019d0f:	90                   	nop
c0019d10:	b8 01 00 00 00       	mov    eax,0x1
c0019d15:	8d 76 00             	lea    esi,[esi+0x0]
c0019d18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d1e:	c3                   	ret    
c0019d1f:	90                   	nop

c0019d20 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019d20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019d26:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019d2d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019d34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019d38:	88 d0                	mov    al,dl
c0019d3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019d3e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019d46:	75 0c                	jne    c0019d54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019d48:	b8 04 00 00 00       	mov    eax,0x4
c0019d4d:	e9 7e 01 00 00       	jmp    c0019ed0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019d52:	66 90                	xchg   ax,ax
c0019d54:	83 ec 08             	sub    esp,0x8
c0019d57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019d5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d62:	50                   	push   eax
c0019d63:	e8 e8 68 fe ff       	call   c0000650 <strcpy>
c0019d68:	83 c4 10             	add    esp,0x10
c0019d6b:	83 ec 08             	sub    esp,0x8
c0019d6e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d72:	50                   	push   eax
c0019d73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019d7a:	e8 c5 fb ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019d7f:	83 c4 10             	add    esp,0x10
c0019d82:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019d8a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019d92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d97:	83 e0 01             	and    eax,0x1
c0019d9a:	74 14                	je     c0019db0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019d9c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019da3:	83 c8 01             	or     eax,0x1
c0019da6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019dad:	8d 76 00             	lea    esi,[esi+0x0]
c0019db0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019db5:	83 e0 02             	and    eax,0x2
c0019db8:	74 12                	je     c0019dcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019dba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019dc1:	83 c8 20             	or     eax,0x20
c0019dc4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019dcb:	90                   	nop
c0019dcc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019dd1:	83 e0 04             	and    eax,0x4
c0019dd4:	74 12                	je     c0019de8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019dd6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ddd:	83 c8 04             	or     eax,0x4
c0019de0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019de7:	90                   	nop
c0019de8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ded:	83 e0 08             	and    eax,0x8
c0019df0:	74 12                	je     c0019e04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019df2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019df9:	83 c8 02             	or     eax,0x2
c0019dfc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019e03:	90                   	nop
c0019e04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e09:	83 e0 01             	and    eax,0x1
c0019e0c:	74 12                	je     c0019e20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019e0e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e15:	83 c8 01             	or     eax,0x1
c0019e18:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e1f:	90                   	nop
c0019e20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e25:	83 e0 02             	and    eax,0x2
c0019e28:	74 12                	je     c0019e3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019e2a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e31:	83 c8 20             	or     eax,0x20
c0019e34:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e3b:	90                   	nop
c0019e3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e41:	83 e0 04             	and    eax,0x4
c0019e44:	74 12                	je     c0019e58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019e46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e4d:	83 c8 04             	or     eax,0x4
c0019e50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e57:	90                   	nop
c0019e58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e5d:	83 e0 08             	and    eax,0x8
c0019e60:	74 12                	je     c0019e74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019e62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e69:	83 c8 02             	or     eax,0x2
c0019e6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e73:	90                   	nop
c0019e74:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019e7b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019e82:	09 d0                	or     eax,edx
c0019e84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e8b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019e93:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019e9b:	83 ec 04             	sub    esp,0x4
c0019e9e:	52                   	push   edx
c0019e9f:	50                   	push   eax
c0019ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ea4:	50                   	push   eax
c0019ea5:	e8 e9 af fe ff       	call   c0004e93 <f_chmod>
c0019eaa:	83 c4 10             	add    esp,0x10
c0019ead:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019eb4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019ebb:	85 c0                	test   eax,eax
c0019ebd:	75 09                	jne    c0019ec8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019ebf:	b8 00 00 00 00       	mov    eax,0x0
c0019ec4:	eb 0a                	jmp    c0019ed0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019ec6:	66 90                	xchg   ax,ax
c0019ec8:	b8 01 00 00 00       	mov    eax,0x1
c0019ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019ed6:	c3                   	ret    
c0019ed7:	90                   	nop

c0019ed8 <FAT::rename(char const*, char const*)>:
c0019ed8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019ede:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019ee6:	74 0c                	je     c0019ef4 <FAT::rename(char const*, char const*)+0x1c>
c0019ee8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019ef0:	75 0e                	jne    c0019f00 <FAT::rename(char const*, char const*)+0x28>
c0019ef2:	66 90                	xchg   ax,ax
c0019ef4:	b8 04 00 00 00       	mov    eax,0x4
c0019ef9:	e9 9e 00 00 00       	jmp    c0019f9c <FAT::rename(char const*, char const*)+0xc4>
c0019efe:	66 90                	xchg   ax,ax
c0019f00:	83 ec 08             	sub    esp,0x8
c0019f03:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019f0a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019f11:	50                   	push   eax
c0019f12:	e8 39 67 fe ff       	call   c0000650 <strcpy>
c0019f17:	83 c4 10             	add    esp,0x10
c0019f1a:	83 ec 08             	sub    esp,0x8
c0019f1d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019f24:	50                   	push   eax
c0019f25:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019f2c:	e8 13 fa ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	83 ec 08             	sub    esp,0x8
c0019f37:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019f3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f42:	50                   	push   eax
c0019f43:	e8 08 67 fe ff       	call   c0000650 <strcpy>
c0019f48:	83 c4 10             	add    esp,0x10
c0019f4b:	83 ec 08             	sub    esp,0x8
c0019f4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f52:	50                   	push   eax
c0019f53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019f5a:	e8 e5 f9 ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019f5f:	83 c4 10             	add    esp,0x10
c0019f62:	83 ec 08             	sub    esp,0x8
c0019f65:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f69:	50                   	push   eax
c0019f6a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019f71:	50                   	push   eax
c0019f72:	e8 64 ad fe ff       	call   c0004cdb <f_rename>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019f81:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019f88:	85 c0                	test   eax,eax
c0019f8a:	75 08                	jne    c0019f94 <FAT::rename(char const*, char const*)+0xbc>
c0019f8c:	b8 00 00 00 00       	mov    eax,0x0
c0019f91:	eb 09                	jmp    c0019f9c <FAT::rename(char const*, char const*)+0xc4>
c0019f93:	90                   	nop
c0019f94:	b8 01 00 00 00       	mov    eax,0x1
c0019f99:	8d 76 00             	lea    esi,[esi+0x0]
c0019f9c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019fa2:	c3                   	ret    
c0019fa3:	90                   	nop

c0019fa4 <FAT::mkdir(char const*)>:
c0019fa4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019faa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fb2:	75 08                	jne    c0019fbc <FAT::mkdir(char const*)+0x18>
c0019fb4:	b8 04 00 00 00       	mov    eax,0x4
c0019fb9:	eb 61                	jmp    c001a01c <FAT::mkdir(char const*)+0x78>
c0019fbb:	90                   	nop
c0019fbc:	83 ec 08             	sub    esp,0x8
c0019fbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fca:	50                   	push   eax
c0019fcb:	e8 80 66 fe ff       	call   c0000650 <strcpy>
c0019fd0:	83 c4 10             	add    esp,0x10
c0019fd3:	83 ec 08             	sub    esp,0x8
c0019fd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fda:	50                   	push   eax
c0019fdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fe2:	e8 5d f9 ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c0019fe7:	83 c4 10             	add    esp,0x10
c0019fea:	83 ec 0c             	sub    esp,0xc
c0019fed:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ff1:	50                   	push   eax
c0019ff2:	e8 49 ab fe ff       	call   c0004b40 <f_mkdir>
c0019ff7:	83 c4 10             	add    esp,0x10
c0019ffa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a001:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a008:	85 c0                	test   eax,eax
c001a00a:	75 08                	jne    c001a014 <FAT::mkdir(char const*)+0x70>
c001a00c:	b8 00 00 00 00       	mov    eax,0x0
c001a011:	eb 09                	jmp    c001a01c <FAT::mkdir(char const*)+0x78>
c001a013:	90                   	nop
c001a014:	b8 01 00 00 00       	mov    eax,0x1
c001a019:	8d 76 00             	lea    esi,[esi+0x0]
c001a01c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a022:	c3                   	ret    
c001a023:	90                   	nop

c001a024 <FAT::exists(char const*)>:
c001a024:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a02a:	83 ec 08             	sub    esp,0x8
c001a02d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a034:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a038:	50                   	push   eax
c001a039:	e8 12 66 fe ff       	call   c0000650 <strcpy>
c001a03e:	83 c4 10             	add    esp,0x10
c001a041:	83 ec 08             	sub    esp,0x8
c001a044:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a048:	50                   	push   eax
c001a049:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a050:	e8 ef f8 ff ff       	call   c0019944 <FAT::fixFilepath(char*)>
c001a055:	83 c4 10             	add    esp,0x10
c001a058:	83 ec 08             	sub    esp,0x8
c001a05b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a062:	50                   	push   eax
c001a063:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a067:	50                   	push   eax
c001a068:	e8 41 a7 fe ff       	call   c00047ae <f_stat>
c001a06d:	83 c4 10             	add    esp,0x10
c001a070:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a077:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a07e:	85 c0                	test   eax,eax
c001a080:	75 06                	jne    c001a088 <FAT::exists(char const*)+0x64>
c001a082:	b0 01                	mov    al,0x1
c001a084:	eb 06                	jmp    c001a08c <FAT::exists(char const*)+0x68>
c001a086:	66 90                	xchg   ax,ax
c001a088:	b0 00                	mov    al,0x0
c001a08a:	66 90                	xchg   ax,ax
c001a08c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a092:	c3                   	ret    
c001a093:	90                   	nop

c001a094 <isoReadDiscSectorHelper>:
c001a094:	83 ec 2c             	sub    esp,0x2c
c001a097:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a09b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a09f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a0a4:	83 e8 41             	sub    eax,0x41
c001a0a7:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001a0ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a0b2:	ba 00 00 00 00       	mov    edx,0x0
c001a0b7:	83 ec 0c             	sub    esp,0xc
c001a0ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a0be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0c2:	52                   	push   edx
c001a0c3:	50                   	push   eax
c001a0c4:	51                   	push   ecx
c001a0c5:	e8 4c 3a ff ff       	call   c000db16 <LogicalDisk::read(unsigned long long, int, void*)>
c001a0ca:	83 c4 20             	add    esp,0x20
c001a0cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a0d6:	74 0c                	je     c001a0e4 <isoReadDiscSectorHelper+0x50>
c001a0d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0dc:	c1 e0 0b             	shl    eax,0xb
c001a0df:	eb 0b                	jmp    c001a0ec <isoReadDiscSectorHelper+0x58>
c001a0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e4:	b8 00 00 00 00       	mov    eax,0x0
c001a0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ec:	83 c4 2c             	add    esp,0x2c
c001a0ef:	c3                   	ret    

c001a0f0 <iso_kprintf>:
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	83 ec 08             	sub    esp,0x8
c001a0f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0fa:	68 1a 28 02 c0       	push   0xc002281a
c001a0ff:	e8 06 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	90                   	nop
c001a108:	83 c4 0c             	add    esp,0xc
c001a10b:	c3                   	ret    

c001a10c <iso_kprintfd>:
c001a10c:	83 ec 0c             	sub    esp,0xc
c001a10f:	83 ec 08             	sub    esp,0x8
c001a112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a116:	68 fa 0f 02 c0       	push   0xc0020ffa
c001a11b:	e8 ea 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	90                   	nop
c001a124:	83 c4 0c             	add    esp,0xc
c001a127:	c3                   	ret    

c001a128 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a128:	b8 08 00 00 00       	mov    eax,0x8
c001a12d:	c3                   	ret    

c001a12e <ISO9660::truncate(void*, unsigned long long)>:
c001a12e:	b8 01 00 00 00       	mov    eax,0x1
c001a133:	c3                   	ret    

c001a134 <ISO9660::getName()>:
c001a134:	b8 d0 2a 02 c0       	mov    eax,0xc0022ad0
c001a139:	c3                   	ret    

c001a13a <ISO9660::closeDir(void*)>:
c001a13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a13e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a140:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a143:	90                   	nop

c001a144 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a144:	b8 01 00 00 00       	mov    eax,0x1
c001a149:	c3                   	ret    

c001a14a <ISO9660::unlink(char const*)>:
c001a14a:	b8 01 00 00 00       	mov    eax,0x1
c001a14f:	c3                   	ret    

c001a150 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a150:	b8 03 00 00 00       	mov    eax,0x3
c001a155:	c3                   	ret    

c001a156 <ISO9660::rename(char const*, char const*)>:
c001a156:	b8 01 00 00 00       	mov    eax,0x1
c001a15b:	c3                   	ret    

c001a15c <ISO9660::mkdir(char const*)>:
c001a15c:	b8 01 00 00 00       	mov    eax,0x1
c001a161:	c3                   	ret    

c001a162 <ISO9660::~ISO9660()>:
c001a162:	83 ec 0c             	sub    esp,0xc
c001a165:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c001a16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a16e:	89 10                	mov    DWORD PTR [eax],edx
c001a170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a174:	83 ec 0c             	sub    esp,0xc
c001a177:	50                   	push   eax
c001a178:	e8 ad 13 ff ff       	call   c000b52a <Filesystem::~Filesystem()>
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	90                   	nop
c001a181:	83 c4 0c             	add    esp,0xc
c001a184:	c3                   	ret    
c001a185:	90                   	nop

c001a186 <ISO9660::~ISO9660()>:
c001a186:	83 ec 0c             	sub    esp,0xc
c001a189:	83 ec 0c             	sub    esp,0xc
c001a18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a190:	e8 cd ff ff ff       	call   c001a162 <ISO9660::~ISO9660()>
c001a195:	83 c4 10             	add    esp,0x10
c001a198:	83 ec 08             	sub    esp,0x8
c001a19b:	6a 08                	push   0x8
c001a19d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1a1:	e8 66 06 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	83 c4 0c             	add    esp,0xc
c001a1ac:	c3                   	ret    
c001a1ad:	90                   	nop

c001a1ae <ISO9660::exists(char const*)>:
c001a1ae:	83 ec 18             	sub    esp,0x18
c001a1b1:	68 eb 2a 02 c0       	push   0xc0022aeb
c001a1b6:	e8 0e 71 ff ff       	call   c00112c9 <KePanic(char const*)>
c001a1bb:	31 c0                	xor    eax,eax
c001a1bd:	83 c4 1c             	add    esp,0x1c
c001a1c0:	c3                   	ret    
c001a1c1:	90                   	nop

c001a1c2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a1c2:	56                   	push   esi
c001a1c3:	53                   	push   ebx
c001a1c4:	53                   	push   ebx
c001a1c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a1cd:	85 db                	test   ebx,ebx
c001a1cf:	0f 84 ca 00 00 00    	je     c001a29f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a1d5:	85 f6                	test   esi,esi
c001a1d7:	0f 84 c2 00 00 00    	je     c001a29f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a1dd:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a1e2:	b8 03 00 00 00       	mov    eax,0x3
c001a1e7:	0f 85 b7 00 00 00    	jne    c001a2a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a1ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a1ef:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a1f5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1fc:	74 1b                	je     c001a219 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a1fe:	85 c0                	test   eax,eax
c001a200:	74 10                	je     c001a212 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	68 09 2b 02 c0       	push   0xc0022b09
c001a20a:	e8 ba 70 ff ff       	call   c00112c9 <KePanic(char const*)>
c001a20f:	83 c4 10             	add    esp,0x10
c001a212:	8a 03                	mov    al,BYTE PTR [ebx]
c001a214:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a219:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a21c:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a223:	85 c0                	test   eax,eax
c001a225:	74 09                	je     c001a230 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a227:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a22e:	74 48                	je     c001a278 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a230:	83 ec 0c             	sub    esp,0xc
c001a233:	68 19 2b 02 c0       	push   0xc0022b19
c001a238:	e8 cd 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a23d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a240:	83 c4 10             	add    esp,0x10
c001a243:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a24a:	85 c0                	test   eax,eax
c001a24c:	74 17                	je     c001a265 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a24e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a255:	83 ec 0c             	sub    esp,0xc
c001a258:	68 39 2b 02 c0       	push   0xc0022b39
c001a25d:	e8 a8 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a26c:	83 ec 0c             	sub    esp,0xc
c001a26f:	50                   	push   eax
c001a270:	e8 f2 c7 fe ff       	call   c0006a67 <init_percd>
c001a275:	83 c4 10             	add    esp,0x10
c001a278:	51                   	push   ecx
c001a279:	83 c3 03             	add    ebx,0x3
c001a27c:	51                   	push   ecx
c001a27d:	6a 00                	push   0x0
c001a27f:	53                   	push   ebx
c001a280:	e8 a5 c2 fe ff       	call   c000652a <iso_open>
c001a285:	83 c4 10             	add    esp,0x10
c001a288:	89 c2                	mov    edx,eax
c001a28a:	b8 01 00 00 00       	mov    eax,0x1
c001a28f:	83 fa ff             	cmp    edx,0xffffffff
c001a292:	74 10                	je     c001a2a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a294:	83 c2 32             	add    edx,0x32
c001a297:	31 c0                	xor    eax,eax
c001a299:	01 d2                	add    edx,edx
c001a29b:	89 16                	mov    DWORD PTR [esi],edx
c001a29d:	eb 05                	jmp    c001a2a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a29f:	b8 04 00 00 00       	mov    eax,0x4
c001a2a4:	5a                   	pop    edx
c001a2a5:	5b                   	pop    ebx
c001a2a6:	5e                   	pop    esi
c001a2a7:	c3                   	ret    

c001a2a8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a2a8:	53                   	push   ebx
c001a2a9:	83 ec 08             	sub    esp,0x8
c001a2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2b4:	85 c0                	test   eax,eax
c001a2b6:	74 2d                	je     c001a2e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a2b8:	85 db                	test   ebx,ebx
c001a2ba:	74 29                	je     c001a2e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a2bc:	52                   	push   edx
c001a2bd:	b9 02 00 00 00       	mov    ecx,0x2
c001a2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2c6:	99                   	cdq    
c001a2c7:	f7 f9                	idiv   ecx
c001a2c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2cd:	83 e8 32             	sub    eax,0x32
c001a2d0:	50                   	push   eax
c001a2d1:	e8 fc c2 fe ff       	call   c00065d2 <iso_read>
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	89 03                	mov    DWORD PTR [ebx],eax
c001a2db:	09 d0                	or     eax,edx
c001a2dd:	0f 94 c0             	sete   al
c001a2e0:	0f b6 c0             	movzx  eax,al
c001a2e3:	eb 05                	jmp    c001a2ea <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a2e5:	b8 04 00 00 00       	mov    eax,0x4
c001a2ea:	83 c4 08             	add    esp,0x8
c001a2ed:	5b                   	pop    ebx
c001a2ee:	c3                   	ret    
c001a2ef:	90                   	nop

c001a2f0 <ISO9660::seek(void*, unsigned long long)>:
c001a2f0:	57                   	push   edi
c001a2f1:	b8 04 00 00 00       	mov    eax,0x4
c001a2f6:	56                   	push   esi
c001a2f7:	51                   	push   ecx
c001a2f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a300:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a304:	85 d2                	test   edx,edx
c001a306:	74 26                	je     c001a32e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a308:	89 d0                	mov    eax,edx
c001a30a:	b9 02 00 00 00       	mov    ecx,0x2
c001a30f:	6a 00                	push   0x0
c001a311:	99                   	cdq    
c001a312:	f7 f9                	idiv   ecx
c001a314:	57                   	push   edi
c001a315:	56                   	push   esi
c001a316:	83 e8 32             	sub    eax,0x32
c001a319:	50                   	push   eax
c001a31a:	e8 c9 c3 fe ff       	call   c00066e8 <iso_seek>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	31 f0                	xor    eax,esi
c001a324:	31 fa                	xor    edx,edi
c001a326:	09 d0                	or     eax,edx
c001a328:	0f 95 c0             	setne  al
c001a32b:	0f b6 c0             	movzx  eax,al
c001a32e:	5a                   	pop    edx
c001a32f:	5e                   	pop    esi
c001a330:	5f                   	pop    edi
c001a331:	c3                   	ret    

c001a332 <ISO9660::tell(void*, unsigned long long*)>:
c001a332:	53                   	push   ebx
c001a333:	83 ec 08             	sub    esp,0x8
c001a336:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a33a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a33e:	85 c0                	test   eax,eax
c001a340:	74 24                	je     c001a366 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a342:	85 db                	test   ebx,ebx
c001a344:	74 20                	je     c001a366 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a346:	b9 02 00 00 00       	mov    ecx,0x2
c001a34b:	99                   	cdq    
c001a34c:	f7 f9                	idiv   ecx
c001a34e:	83 ec 0c             	sub    esp,0xc
c001a351:	83 e8 32             	sub    eax,0x32
c001a354:	50                   	push   eax
c001a355:	e8 12 c4 fe ff       	call   c000676c <iso_tell>
c001a35a:	83 c4 10             	add    esp,0x10
c001a35d:	89 03                	mov    DWORD PTR [ebx],eax
c001a35f:	31 c0                	xor    eax,eax
c001a361:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a364:	eb 05                	jmp    c001a36b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a366:	b8 04 00 00 00       	mov    eax,0x4
c001a36b:	83 c4 08             	add    esp,0x8
c001a36e:	5b                   	pop    ebx
c001a36f:	c3                   	ret    

c001a370 <ISO9660::stat(void*, unsigned long long*)>:
c001a370:	56                   	push   esi
c001a371:	53                   	push   ebx
c001a372:	83 ec 10             	sub    esp,0x10
c001a375:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a379:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a37d:	68 5d 2b 02 c0       	push   0xc0022b5d
c001a382:	e8 83 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	85 db                	test   ebx,ebx
c001a38c:	74 2a                	je     c001a3b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a38e:	85 f6                	test   esi,esi
c001a390:	74 26                	je     c001a3b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a392:	89 d8                	mov    eax,ebx
c001a394:	b9 02 00 00 00       	mov    ecx,0x2
c001a399:	99                   	cdq    
c001a39a:	83 ec 0c             	sub    esp,0xc
c001a39d:	f7 f9                	idiv   ecx
c001a39f:	83 e8 32             	sub    eax,0x32
c001a3a2:	50                   	push   eax
c001a3a3:	e8 f5 c3 fe ff       	call   c000679d <iso_total>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a3b2:	89 06                	mov    DWORD PTR [esi],eax
c001a3b4:	31 c0                	xor    eax,eax
c001a3b6:	eb 05                	jmp    c001a3bd <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a3b8:	b8 04 00 00 00       	mov    eax,0x4
c001a3bd:	5a                   	pop    edx
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	c3                   	ret    
c001a3c1:	90                   	nop

c001a3c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a3c2:	55                   	push   ebp
c001a3c3:	57                   	push   edi
c001a3c4:	56                   	push   esi
c001a3c5:	53                   	push   ebx
c001a3c6:	83 ec 18             	sub    esp,0x18
c001a3c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a3cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a3d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a3d5:	68 65 2b 02 c0       	push   0xc0022b65
c001a3da:	e8 2b 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	85 ff                	test   edi,edi
c001a3e4:	0f 94 c0             	sete   al
c001a3e7:	85 f6                	test   esi,esi
c001a3e9:	0f 94 c2             	sete   dl
c001a3ec:	09 d0                	or     eax,edx
c001a3ee:	a8 01                	test   al,0x1
c001a3f0:	0f 85 dd 00 00 00    	jne    c001a4d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a3f6:	85 db                	test   ebx,ebx
c001a3f8:	0f 84 d5 00 00 00    	je     c001a4d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a3fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a401:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a407:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a40e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a415:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a417:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a41d:	74 1b                	je     c001a43a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a41f:	85 c0                	test   eax,eax
c001a421:	74 10                	je     c001a433 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a423:	83 ec 0c             	sub    esp,0xc
c001a426:	68 09 2b 02 c0       	push   0xc0022b09
c001a42b:	e8 99 6e ff ff       	call   c00112c9 <KePanic(char const*)>
c001a430:	83 c4 10             	add    esp,0x10
c001a433:	8a 03                	mov    al,BYTE PTR [ebx]
c001a435:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a43a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a43d:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a444:	85 c0                	test   eax,eax
c001a446:	74 09                	je     c001a451 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a448:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a44f:	74 51                	je     c001a4a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a451:	83 ec 0c             	sub    esp,0xc
c001a454:	68 6d 2b 02 c0       	push   0xc0022b6d
c001a459:	e8 ac 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a45e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a46c:	74 21                	je     c001a48f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a46e:	83 ec 0c             	sub    esp,0xc
c001a471:	68 8d 2b 02 c0       	push   0xc0022b8d
c001a476:	e8 8f 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a47b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a47e:	83 c4 10             	add    esp,0x10
c001a481:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a488:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a48f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a496:	83 ec 0c             	sub    esp,0xc
c001a499:	50                   	push   eax
c001a49a:	e8 c8 c5 fe ff       	call   c0006a67 <init_percd>
c001a49f:	83 c4 10             	add    esp,0x10
c001a4a2:	52                   	push   edx
c001a4a3:	83 c3 03             	add    ebx,0x3
c001a4a6:	52                   	push   edx
c001a4a7:	6a 00                	push   0x0
c001a4a9:	53                   	push   ebx
c001a4aa:	e8 7b c0 fe ff       	call   c000652a <iso_open>
c001a4af:	83 c4 10             	add    esp,0x10
c001a4b2:	83 f8 ff             	cmp    eax,0xffffffff
c001a4b5:	89 c5                	mov    ebp,eax
c001a4b7:	75 21                	jne    c001a4da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a4b9:	50                   	push   eax
c001a4ba:	50                   	push   eax
c001a4bb:	6a 01                	push   0x1
c001a4bd:	53                   	push   ebx
c001a4be:	e8 67 c0 fe ff       	call   c000652a <iso_open>
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	ba 02 00 00 00       	mov    edx,0x2
c001a4cb:	40                   	inc    eax
c001a4cc:	74 2b                	je     c001a4f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a4ce:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a4d1:	eb 24                	jmp    c001a4f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a4d3:	ba 04 00 00 00       	mov    edx,0x4
c001a4d8:	eb 1f                	jmp    c001a4f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a4da:	83 ec 0c             	sub    esp,0xc
c001a4dd:	50                   	push   eax
c001a4de:	e8 ba c2 fe ff       	call   c000679d <iso_total>
c001a4e3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a4ea:	89 07                	mov    DWORD PTR [edi],eax
c001a4ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a4ef:	e8 c0 c0 fe ff       	call   c00065b4 <iso_close>
c001a4f4:	83 c4 10             	add    esp,0x10
c001a4f7:	31 d2                	xor    edx,edx
c001a4f9:	83 c4 0c             	add    esp,0xc
c001a4fc:	89 d0                	mov    eax,edx
c001a4fe:	5b                   	pop    ebx
c001a4ff:	5e                   	pop    esi
c001a500:	5f                   	pop    edi
c001a501:	5d                   	pop    ebp
c001a502:	c3                   	ret    
c001a503:	90                   	nop

c001a504 <ISO9660::close(void*)>:
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	b8 04 00 00 00       	mov    eax,0x4
c001a50c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a510:	85 d2                	test   edx,edx
c001a512:	74 1b                	je     c001a52f <ISO9660::close(void*)+0x2b>
c001a514:	89 d0                	mov    eax,edx
c001a516:	b9 02 00 00 00       	mov    ecx,0x2
c001a51b:	99                   	cdq    
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	f7 f9                	idiv   ecx
c001a521:	83 e8 32             	sub    eax,0x32
c001a524:	50                   	push   eax
c001a525:	e8 8a c0 fe ff       	call   c00065b4 <iso_close>
c001a52a:	83 c4 10             	add    esp,0x10
c001a52d:	31 c0                	xor    eax,eax
c001a52f:	83 c4 0c             	add    esp,0xc
c001a532:	c3                   	ret    
c001a533:	90                   	nop

c001a534 <ISO9660::openDir(char const*, void**)>:
c001a534:	56                   	push   esi
c001a535:	53                   	push   ebx
c001a536:	50                   	push   eax
c001a537:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a53b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a53f:	85 db                	test   ebx,ebx
c001a541:	0f 84 bd 00 00 00    	je     c001a604 <ISO9660::openDir(char const*, void**)+0xd0>
c001a547:	85 f6                	test   esi,esi
c001a549:	0f 84 b5 00 00 00    	je     c001a604 <ISO9660::openDir(char const*, void**)+0xd0>
c001a54f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a551:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a557:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a55e:	74 1b                	je     c001a57b <ISO9660::openDir(char const*, void**)+0x47>
c001a560:	85 c0                	test   eax,eax
c001a562:	74 10                	je     c001a574 <ISO9660::openDir(char const*, void**)+0x40>
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	68 09 2b 02 c0       	push   0xc0022b09
c001a56c:	e8 58 6d ff ff       	call   c00112c9 <KePanic(char const*)>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	8a 03                	mov    al,BYTE PTR [ebx]
c001a576:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a57b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a57e:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a585:	85 c0                	test   eax,eax
c001a587:	74 10                	je     c001a599 <ISO9660::openDir(char const*, void**)+0x65>
c001a589:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a590:	74 1a                	je     c001a5ac <ISO9660::openDir(char const*, void**)+0x78>
c001a592:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a599:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	50                   	push   eax
c001a5a4:	e8 be c4 fe ff       	call   c0006a67 <init_percd>
c001a5a9:	83 c4 10             	add    esp,0x10
c001a5ac:	50                   	push   eax
c001a5ad:	83 c3 03             	add    ebx,0x3
c001a5b0:	50                   	push   eax
c001a5b1:	6a 01                	push   0x1
c001a5b3:	53                   	push   ebx
c001a5b4:	e8 71 bf fe ff       	call   c000652a <iso_open>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	83 f8 ff             	cmp    eax,0xffffffff
c001a5bf:	89 c3                	mov    ebx,eax
c001a5c1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a5c6:	75 1c                	jne    c001a5e4 <ISO9660::openDir(char const*, void**)+0xb0>
c001a5c8:	53                   	push   ebx
c001a5c9:	53                   	push   ebx
c001a5ca:	68 b1 2b 02 c0       	push   0xc0022bb1
c001a5cf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a5d5:	e8 d2 e4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	b8 01 00 00 00       	mov    eax,0x1
c001a5e2:	eb 25                	jmp    c001a609 <ISO9660::openDir(char const*, void**)+0xd5>
c001a5e4:	51                   	push   ecx
c001a5e5:	01 db                	add    ebx,ebx
c001a5e7:	51                   	push   ecx
c001a5e8:	83 c3 65             	add    ebx,0x65
c001a5eb:	68 c4 2b 02 c0       	push   0xc0022bc4
c001a5f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a5f6:	e8 b1 e4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	31 c0                	xor    eax,eax
c001a600:	89 1e                	mov    DWORD PTR [esi],ebx
c001a602:	eb 05                	jmp    c001a609 <ISO9660::openDir(char const*, void**)+0xd5>
c001a604:	b8 04 00 00 00       	mov    eax,0x4
c001a609:	5a                   	pop    edx
c001a60a:	5b                   	pop    ebx
c001a60b:	5e                   	pop    esi
c001a60c:	c3                   	ret    
c001a60d:	90                   	nop

c001a60e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a60e:	55                   	push   ebp
c001a60f:	57                   	push   edi
c001a610:	56                   	push   esi
c001a611:	53                   	push   ebx
c001a612:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a618:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a61f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a626:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a62d:	85 db                	test   ebx,ebx
c001a62f:	0f 84 e4 00 00 00    	je     c001a719 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a635:	85 ed                	test   ebp,ebp
c001a637:	0f 84 dc 00 00 00    	je     c001a719 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a63d:	83 ec 0c             	sub    esp,0xc
c001a640:	68 d7 2b 02 c0       	push   0xc0022bd7
c001a645:	e8 c0 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a64a:	89 d8                	mov    eax,ebx
c001a64c:	b9 02 00 00 00       	mov    ecx,0x2
c001a651:	99                   	cdq    
c001a652:	f7 f9                	idiv   ecx
c001a654:	83 e8 32             	sub    eax,0x32
c001a657:	89 04 24             	mov    DWORD PTR [esp],eax
c001a65a:	e8 90 c1 fe ff       	call   c00067ef <iso_readdir>
c001a65f:	83 c4 10             	add    esp,0x10
c001a662:	85 c0                	test   eax,eax
c001a664:	89 c3                	mov    ebx,eax
c001a666:	75 38                	jne    c001a6a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a668:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a66d:	53                   	push   ebx
c001a66e:	53                   	push   ebx
c001a66f:	68 e2 2b 02 c0       	push   0xc0022be2
c001a674:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a67a:	e8 2d e4 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a67f:	83 c4 0c             	add    esp,0xc
c001a682:	68 10 01 00 00       	push   0x110
c001a687:	6a 00                	push   0x0
c001a689:	57                   	push   edi
c001a68a:	e8 61 5e fe ff       	call   c00004f0 <memset>
c001a68f:	83 c4 10             	add    esp,0x10
c001a692:	b8 01 00 00 00       	mov    eax,0x1
c001a697:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a69e:	eb 7e                	jmp    c001a71e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a6a0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a6a6:	8d 70 08             	lea    esi,[eax+0x8]
c001a6a9:	83 ec 0c             	sub    esp,0xc
c001a6ac:	56                   	push   esi
c001a6ad:	e8 ce 5e fe ff       	call   c0000580 <strlen>
c001a6b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a6ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6be:	83 c4 10             	add    esp,0x10
c001a6c1:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a6c5:	75 0a                	jne    c001a6d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a6c7:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a6ca:	b8 02 00 00 00       	mov    eax,0x2
c001a6cf:	74 05                	je     c001a6d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a6d1:	b8 01 00 00 00       	mov    eax,0x1
c001a6d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6da:	50                   	push   eax
c001a6db:	50                   	push   eax
c001a6dc:	56                   	push   esi
c001a6dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6e1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a6e5:	50                   	push   eax
c001a6e6:	e8 65 5f fe ff       	call   c0000650 <strcpy>
c001a6eb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a6f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6f4:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a6fb:	5a                   	pop    edx
c001a6fc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a701:	59                   	pop    ecx
c001a702:	68 f5 2b 02 c0       	push   0xc0022bf5
c001a707:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a70d:	e8 9a e3 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a712:	83 c4 10             	add    esp,0x10
c001a715:	31 c0                	xor    eax,eax
c001a717:	eb 05                	jmp    c001a71e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a719:	b8 04 00 00 00       	mov    eax,0x4
c001a71e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a724:	5b                   	pop    ebx
c001a725:	5e                   	pop    esi
c001a726:	5f                   	pop    edi
c001a727:	5d                   	pop    ebp
c001a728:	c3                   	ret    

c001a729 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a729:	57                   	push   edi
c001a72a:	56                   	push   esi
c001a72b:	53                   	push   ebx
c001a72c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a730:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a734:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a73a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a73e:	0f be cb             	movsx  ecx,bl
c001a741:	75 0b                	jne    c001a74e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a743:	0f be 05 20 3a 02 c0 	movsx  eax,BYTE PTR ds:0xc0023a20
c001a74a:	39 c8                	cmp    eax,ecx
c001a74c:	74 47                	je     c001a795 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a74e:	83 ec 0c             	sub    esp,0xc
c001a751:	31 d2                	xor    edx,edx
c001a753:	68 a0 98 02 c0       	push   0xc00298a0
c001a758:	6a 01                	push   0x1
c001a75a:	52                   	push   edx
c001a75b:	56                   	push   esi
c001a75c:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a763:	e8 ae 33 ff ff       	call   c000db16 <LogicalDisk::read(unsigned long long, int, void*)>
c001a768:	83 c4 20             	add    esp,0x20
c001a76b:	85 c0                	test   eax,eax
c001a76d:	75 0e                	jne    c001a77d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a76f:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a775:	88 1d 20 3a 02 c0    	mov    BYTE PTR ds:0xc0023a20,bl
c001a77b:	eb 18                	jmp    c001a795 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a77d:	50                   	push   eax
c001a77e:	68 00 08 00 00       	push   0x800
c001a783:	6a 00                	push   0x0
c001a785:	57                   	push   edi
c001a786:	e8 65 5d fe ff       	call   c00004f0 <memset>
c001a78b:	83 c4 10             	add    esp,0x10
c001a78e:	b8 01 00 00 00       	mov    eax,0x1
c001a793:	eb 0e                	jmp    c001a7a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a795:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a79a:	b9 00 08 00 00       	mov    ecx,0x800
c001a79f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7a1:	31 c0                	xor    eax,eax
c001a7a3:	5b                   	pop    ebx
c001a7a4:	5e                   	pop    esi
c001a7a5:	5f                   	pop    edi
c001a7a6:	c3                   	ret    
c001a7a7:	90                   	nop

c001a7a8 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a7a8:	53                   	push   ebx
c001a7a9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a7af:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a7b9:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a7c0:	8d 58 41             	lea    ebx,[eax+0x41]
c001a7c3:	0f be db             	movsx  ebx,bl
c001a7c6:	53                   	push   ebx
c001a7c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a7cb:	50                   	push   eax
c001a7cc:	6a 10                	push   0x10
c001a7ce:	e8 56 ff ff ff       	call   c001a729 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a7d3:	83 c4 10             	add    esp,0x10
c001a7d6:	31 d2                	xor    edx,edx
c001a7d8:	85 c0                	test   eax,eax
c001a7da:	75 33                	jne    c001a80f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7dc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a7e1:	75 2c                	jne    c001a80f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7e3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a7e8:	75 25                	jne    c001a80f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7ea:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a7ef:	75 1e                	jne    c001a80f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7f1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a7f6:	75 17                	jne    c001a80f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7f8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a7fd:	75 10                	jne    c001a80f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7ff:	83 ec 0c             	sub    esp,0xc
c001a802:	53                   	push   ebx
c001a803:	e8 5f c2 fe ff       	call   c0006a67 <init_percd>
c001a808:	83 c4 10             	add    esp,0x10
c001a80b:	40                   	inc    eax
c001a80c:	0f 95 c2             	setne  dl
c001a80f:	81 c4 08 08 00 00    	add    esp,0x808
c001a815:	88 d0                	mov    al,dl
c001a817:	5b                   	pop    ebx
c001a818:	c3                   	ret    
c001a819:	90                   	nop

c001a81a <ISO9660::ISO9660()>:
c001a81a:	83 ec 0c             	sub    esp,0xc
c001a81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a821:	83 ec 0c             	sub    esp,0xc
c001a824:	50                   	push   eax
c001a825:	e8 dc 0c ff ff       	call   c000b506 <Filesystem::Filesystem()>
c001a82a:	83 c4 10             	add    esp,0x10
c001a82d:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c001a832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a836:	89 10                	mov    DWORD PTR [eax],edx
c001a838:	e8 3c c3 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a83d:	90                   	nop
c001a83e:	83 c4 0c             	add    esp,0xc
c001a841:	c3                   	ret    

c001a842 <SoundCard::beginPlayback()>:
c001a842:	c7 44 24 04 74 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c74
c001a84a:	e9 7a 6a ff ff       	jmp    c00112c9 <KePanic(char const*)>
c001a84f:	90                   	nop

c001a850 <SoundCard::stopPlayback()>:
c001a850:	c7 44 24 04 74 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c74
c001a858:	e9 6c 6a ff ff       	jmp    c00112c9 <KePanic(char const*)>
c001a85d:	90                   	nop

c001a85e <SoundCard::SoundCard(char const*)>:
c001a85e:	83 ec 1c             	sub    esp,0x1c
c001a861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a865:	83 ec 08             	sub    esp,0x8
c001a868:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a86c:	50                   	push   eax
c001a86d:	e8 52 20 ff ff       	call   c000c8c4 <Device::Device(char const*)>
c001a872:	83 c4 10             	add    esp,0x10
c001a875:	ba c0 2c 02 c0       	mov    edx,0xc0022cc0
c001a87a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a87e:	89 10                	mov    DWORD PTR [eax],edx
c001a880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a884:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a88b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a88f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a89d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8ab:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8b9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a8c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8cb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a8d0:	7f 1a                	jg     c001a8ec <SoundCard::SoundCard(char const*)+0x8e>
c001a8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8da:	83 c2 54             	add    edx,0x54
c001a8dd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a8e5:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a8ea:	eb df                	jmp    c001a8cb <SoundCard::SoundCard(char const*)+0x6d>
c001a8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8f0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a8f7:	90                   	nop
c001a8f8:	83 c4 1c             	add    esp,0x1c
c001a8fb:	c3                   	ret    

c001a8fc <SoundCard::~SoundCard()>:
c001a8fc:	83 ec 0c             	sub    esp,0xc
c001a8ff:	ba c0 2c 02 c0       	mov    edx,0xc0022cc0
c001a904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a908:	89 10                	mov    DWORD PTR [eax],edx
c001a90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a90e:	83 ec 0c             	sub    esp,0xc
c001a911:	50                   	push   eax
c001a912:	e8 17 1d ff ff       	call   c000c62e <Device::~Device()>
c001a917:	83 c4 10             	add    esp,0x10
c001a91a:	90                   	nop
c001a91b:	83 c4 0c             	add    esp,0xc
c001a91e:	c3                   	ret    
c001a91f:	90                   	nop

c001a920 <SoundCard::~SoundCard()>:
c001a920:	83 ec 0c             	sub    esp,0xc
c001a923:	83 ec 0c             	sub    esp,0xc
c001a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a92a:	e8 cd ff ff ff       	call   c001a8fc <SoundCard::~SoundCard()>
c001a92f:	83 c4 10             	add    esp,0x10
c001a932:	83 ec 08             	sub    esp,0x8
c001a935:	68 e8 01 00 00       	push   0x1e8
c001a93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a93e:	e8 c9 fe fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a943:	83 c4 10             	add    esp,0x10
c001a946:	83 c4 0c             	add    esp,0xc
c001a949:	c3                   	ret    

c001a94a <SoundCard::configureRates(int, int, int)>:
c001a94a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a94e:	31 c0                	xor    eax,eax
c001a950:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a957:	75 20                	jne    c001a979 <SoundCard::configureRates(int, int, int)+0x2f>
c001a959:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a95d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a967:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a971:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a977:	b0 01                	mov    al,0x1
c001a979:	c3                   	ret    

c001a97a <SoundCard::getSamples16(int, short*)>:
c001a97a:	55                   	push   ebp
c001a97b:	57                   	push   edi
c001a97c:	31 ff                	xor    edi,edi
c001a97e:	56                   	push   esi
c001a97f:	53                   	push   ebx
c001a980:	31 db                	xor    ebx,ebx
c001a982:	83 ec 10             	sub    esp,0x10
c001a985:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a989:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a98d:	8d 04 36             	lea    eax,[esi+esi*1]
c001a990:	50                   	push   eax
c001a991:	6a 00                	push   0x0
c001a993:	55                   	push   ebp
c001a994:	e8 57 5b fe ff       	call   c00004f0 <memset>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a0:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a9a7:	85 c0                	test   eax,eax
c001a9a9:	74 1a                	je     c001a9c5 <SoundCard::getSamples16(int, short*)+0x4b>
c001a9ab:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a9af:	75 14                	jne    c001a9c5 <SoundCard::getSamples16(int, short*)+0x4b>
c001a9b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a9b5:	55                   	push   ebp
c001a9b6:	56                   	push   esi
c001a9b7:	50                   	push   eax
c001a9b8:	e8 f3 02 00 00       	call   c001acb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	39 c3                	cmp    ebx,eax
c001a9c2:	0f 4c d8             	cmovl  ebx,eax
c001a9c5:	47                   	inc    edi
c001a9c6:	83 ff 20             	cmp    edi,0x20
c001a9c9:	75 d1                	jne    c001a99c <SoundCard::getSamples16(int, short*)+0x22>
c001a9cb:	83 c4 0c             	add    esp,0xc
c001a9ce:	89 d8                	mov    eax,ebx
c001a9d0:	5b                   	pop    ebx
c001a9d1:	5e                   	pop    esi
c001a9d2:	5f                   	pop    edi
c001a9d3:	5d                   	pop    ebp
c001a9d4:	c3                   	ret    
c001a9d5:	90                   	nop

c001a9d6 <SoundCard::getSamples32(int, int*)>:
c001a9d6:	55                   	push   ebp
c001a9d7:	57                   	push   edi
c001a9d8:	31 ff                	xor    edi,edi
c001a9da:	56                   	push   esi
c001a9db:	31 f6                	xor    esi,esi
c001a9dd:	53                   	push   ebx
c001a9de:	83 ec 10             	sub    esp,0x10
c001a9e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a9e5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a9e9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a9ed:	c1 e0 02             	shl    eax,0x2
c001a9f0:	50                   	push   eax
c001a9f1:	6a 00                	push   0x0
c001a9f3:	55                   	push   ebp
c001a9f4:	e8 f7 5a fe ff       	call   c00004f0 <memset>
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001aa03:	85 c0                	test   eax,eax
c001aa05:	74 1a                	je     c001aa21 <SoundCard::getSamples32(int, int*)+0x4b>
c001aa07:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001aa0b:	75 14                	jne    c001aa21 <SoundCard::getSamples32(int, int*)+0x4b>
c001aa0d:	53                   	push   ebx
c001aa0e:	55                   	push   ebp
c001aa0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa13:	50                   	push   eax
c001aa14:	e8 67 03 00 00       	call   c001ad80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001aa19:	83 c4 10             	add    esp,0x10
c001aa1c:	39 c6                	cmp    esi,eax
c001aa1e:	0f 4c f0             	cmovl  esi,eax
c001aa21:	47                   	inc    edi
c001aa22:	83 ff 20             	cmp    edi,0x20
c001aa25:	75 d5                	jne    c001a9fc <SoundCard::getSamples32(int, int*)+0x26>
c001aa27:	85 f6                	test   esi,esi
c001aa29:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001aa30:	75 0f                	jne    c001aa41 <SoundCard::getSamples32(int, int*)+0x6b>
c001aa32:	85 c0                	test   eax,eax
c001aa34:	74 1b                	je     c001aa51 <SoundCard::getSamples32(int, int*)+0x7b>
c001aa36:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	53                   	push   ebx
c001aa3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001aa3f:	eb 0d                	jmp    c001aa4e <SoundCard::getSamples32(int, int*)+0x78>
c001aa41:	85 c0                	test   eax,eax
c001aa43:	75 0c                	jne    c001aa51 <SoundCard::getSamples32(int, int*)+0x7b>
c001aa45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa47:	83 ec 0c             	sub    esp,0xc
c001aa4a:	53                   	push   ebx
c001aa4b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aa4e:	83 c4 10             	add    esp,0x10
c001aa51:	83 c4 0c             	add    esp,0xc
c001aa54:	89 f0                	mov    eax,esi
c001aa56:	5b                   	pop    ebx
c001aa57:	5e                   	pop    esi
c001aa58:	5f                   	pop    edi
c001aa59:	5d                   	pop    ebp
c001aa5a:	c3                   	ret    
c001aa5b:	90                   	nop

c001aa5c <SoundCard::addChannel(SoundPort*)>:
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	31 c0                	xor    eax,eax
c001aa61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa65:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001aa6d:	74 1b                	je     c001aa8a <SoundCard::addChannel(SoundPort*)+0x2e>
c001aa6f:	40                   	inc    eax
c001aa70:	83 f8 20             	cmp    eax,0x20
c001aa73:	75 f0                	jne    c001aa65 <SoundCard::addChannel(SoundPort*)+0x9>
c001aa75:	83 ec 0c             	sub    esp,0xc
c001aa78:	68 99 2c 02 c0       	push   0xc0022c99
c001aa7d:	e8 47 68 ff ff       	call   c00112c9 <KePanic(char const*)>
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	83 c8 ff             	or     eax,0xffffffff
c001aa88:	eb 0b                	jmp    c001aa95 <SoundCard::addChannel(SoundPort*)+0x39>
c001aa8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa8e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aa95:	83 c4 0c             	add    esp,0xc
c001aa98:	c3                   	ret    
c001aa99:	90                   	nop

c001aa9a <SoundCard::removeChannel(int)>:
c001aa9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aaa2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aaad:	c3                   	ret    
c001aaae:	66 90                	xchg   ax,ax

c001aab0 <SoundPort::SoundPort(int, int, int, int)>:
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aab7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aace:	89 10                	mov    DWORD PTR [eax],edx
c001aad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aad8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aadf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aae3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aae6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aaeb:	75 13                	jne    c001ab00 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aaed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaf3:	05 a0 0f 00 00       	add    eax,0xfa0
c001aaf8:	d1 e0                	shl    eax,1
c001aafa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aafe:	66 90                	xchg   ax,ax
c001ab00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ab0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab0f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ab16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab1d:	c1 e0 02             	shl    eax,0x2
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	50                   	push   eax
c001ab24:	e8 aa cf fe ff       	call   c0007ad3 <malloc>
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	89 c2                	mov    edx,eax
c001ab2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab35:	90                   	nop
c001ab36:	83 c4 0c             	add    esp,0xc
c001ab39:	c3                   	ret    
c001ab3a:	66 90                	xchg   ax,ax

c001ab3c <SoundPort::~SoundPort()>:
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ab46:	85 c0                	test   eax,eax
c001ab48:	74 1e                	je     c001ab68 <SoundPort::~SoundPort()+0x2c>
c001ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ab51:	83 ec 0c             	sub    esp,0xc
c001ab54:	50                   	push   eax
c001ab55:	e8 89 cf fe ff       	call   c0007ae3 <free>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab61:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ab68:	90                   	nop
c001ab69:	83 c4 0c             	add    esp,0xc
c001ab6c:	c3                   	ret    
c001ab6d:	90                   	nop
c001ab6e:	66 90                	xchg   ax,ax

c001ab70 <SoundPort::unpause()>:
c001ab70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab74:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ab78:	c3                   	ret    
c001ab79:	90                   	nop
c001ab7a:	66 90                	xchg   ax,ax

c001ab7c <SoundPort::pause()>:
c001ab7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab80:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ab84:	c3                   	ret    
c001ab85:	90                   	nop
c001ab86:	66 90                	xchg   ax,ax

c001ab88 <SoundPort::getBufferUsed()>:
c001ab88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab8f:	c3                   	ret    

c001ab90 <SoundPort::getBufferSize()>:
c001ab90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab97:	c3                   	ret    

c001ab98 <SoundPort::buffer16(short*, int)>:
c001ab98:	55                   	push   ebp
c001ab99:	57                   	push   edi
c001ab9a:	56                   	push   esi
c001ab9b:	53                   	push   ebx
c001ab9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aba0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aba4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aba7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001abaa:	74 68                	je     c001ac14 <SoundPort::buffer16(short*, int)+0x7c>
c001abac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001abb0:	85 c9                	test   ecx,ecx
c001abb2:	7e 60                	jle    c001ac14 <SoundPort::buffer16(short*, int)+0x7c>
c001abb4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001abb8:	8d 70 01             	lea    esi,[eax+0x1]
c001abbb:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001abbe:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001abc1:	c1 e1 0f             	shl    ecx,0xf
c001abc4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001abc7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abcd:	74 4d                	je     c001ac1c <SoundPort::buffer16(short*, int)+0x84>
c001abcf:	31 f6                	xor    esi,esi
c001abd1:	eb 21                	jmp    c001abf4 <SoundPort::buffer16(short*, int)+0x5c>
c001abd3:	90                   	nop
c001abd4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001abd9:	8d 79 01             	lea    edi,[ecx+0x1]
c001abdc:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001abdf:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001abe2:	c1 e3 0f             	shl    ebx,0xf
c001abe5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001abe8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abeb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abee:	74 1c                	je     c001ac0c <SoundPort::buffer16(short*, int)+0x74>
c001abf0:	89 c6                	mov    esi,eax
c001abf2:	66 90                	xchg   ax,ax
c001abf4:	8d 46 01             	lea    eax,[esi+0x1]
c001abf7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001abfb:	75 d7                	jne    c001abd4 <SoundPort::buffer16(short*, int)+0x3c>
c001abfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac01:	8d 76 00             	lea    esi,[esi+0x0]
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	5f                   	pop    edi
c001ac07:	5d                   	pop    ebp
c001ac08:	c3                   	ret    
c001ac09:	8d 76 00             	lea    esi,[esi+0x0]
c001ac0c:	5b                   	pop    ebx
c001ac0d:	8d 46 02             	lea    eax,[esi+0x2]
c001ac10:	5e                   	pop    esi
c001ac11:	5f                   	pop    edi
c001ac12:	5d                   	pop    ebp
c001ac13:	c3                   	ret    
c001ac14:	5b                   	pop    ebx
c001ac15:	31 c0                	xor    eax,eax
c001ac17:	5e                   	pop    esi
c001ac18:	5f                   	pop    edi
c001ac19:	5d                   	pop    ebp
c001ac1a:	c3                   	ret    
c001ac1b:	90                   	nop
c001ac1c:	b8 01 00 00 00       	mov    eax,0x1
c001ac21:	eb e1                	jmp    c001ac04 <SoundPort::buffer16(short*, int)+0x6c>
c001ac23:	90                   	nop

c001ac24 <SoundPort::buffer32(int*, int)>:
c001ac24:	55                   	push   ebp
c001ac25:	57                   	push   edi
c001ac26:	56                   	push   esi
c001ac27:	53                   	push   ebx
c001ac28:	83 ec 04             	sub    esp,0x4
c001ac2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ac37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac40:	74 5a                	je     c001ac9c <SoundPort::buffer32(int*, int)+0x78>
c001ac42:	85 c0                	test   eax,eax
c001ac44:	7e 56                	jle    c001ac9c <SoundPort::buffer32(int*, int)+0x78>
c001ac46:	8d 71 01             	lea    esi,[ecx+0x1]
c001ac49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ac4c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ac4f:	8b 37                	mov    esi,DWORD PTR [edi]
c001ac51:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ac54:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac57:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac5a:	74 4c                	je     c001aca8 <SoundPort::buffer32(int*, int)+0x84>
c001ac5c:	31 f6                	xor    esi,esi
c001ac5e:	eb 1c                	jmp    c001ac7c <SoundPort::buffer32(int*, int)+0x58>
c001ac60:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ac63:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ac66:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ac69:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ac6c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ac70:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac73:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac76:	74 18                	je     c001ac90 <SoundPort::buffer32(int*, int)+0x6c>
c001ac78:	89 de                	mov    esi,ebx
c001ac7a:	66 90                	xchg   ax,ax
c001ac7c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ac7f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ac82:	75 dc                	jne    c001ac60 <SoundPort::buffer32(int*, int)+0x3c>
c001ac84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac87:	90                   	nop
c001ac88:	83 c4 04             	add    esp,0x4
c001ac8b:	5b                   	pop    ebx
c001ac8c:	5e                   	pop    esi
c001ac8d:	5f                   	pop    edi
c001ac8e:	5d                   	pop    ebp
c001ac8f:	c3                   	ret    
c001ac90:	8d 46 02             	lea    eax,[esi+0x2]
c001ac93:	83 c4 04             	add    esp,0x4
c001ac96:	5b                   	pop    ebx
c001ac97:	5e                   	pop    esi
c001ac98:	5f                   	pop    edi
c001ac99:	5d                   	pop    ebp
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop
c001ac9c:	83 c4 04             	add    esp,0x4
c001ac9f:	31 c0                	xor    eax,eax
c001aca1:	5b                   	pop    ebx
c001aca2:	5e                   	pop    esi
c001aca3:	5f                   	pop    edi
c001aca4:	5d                   	pop    ebp
c001aca5:	c3                   	ret    
c001aca6:	66 90                	xchg   ax,ax
c001aca8:	b8 01 00 00 00       	mov    eax,0x1
c001acad:	eb d9                	jmp    c001ac88 <SoundPort::buffer32(int*, int)+0x64>
c001acaf:	90                   	nop

c001acb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001acb0:	55                   	push   ebp
c001acb1:	57                   	push   edi
c001acb2:	56                   	push   esi
c001acb3:	53                   	push   ebx
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acbb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acbf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acc3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001acc7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001accd:	39 03                	cmp    DWORD PTR [ebx],eax
c001accf:	74 13                	je     c001ace4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001acd1:	83 ec 0c             	sub    esp,0xc
c001acd4:	68 ec 2c 02 c0       	push   0xc0022cec
c001acd9:	e8 eb 65 ff ff       	call   c00112c9 <KePanic(char const*)>
c001acde:	83 c4 10             	add    esp,0x10
c001ace1:	8d 76 00             	lea    esi,[esi+0x0]
c001ace4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001acea:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aced:	74 11                	je     c001ad00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001acef:	83 ec 0c             	sub    esp,0xc
c001acf2:	68 2b 2d 02 c0       	push   0xc0022d2b
c001acf7:	e8 cd 65 ff ff       	call   c00112c9 <KePanic(char const*)>
c001acfc:	83 c4 10             	add    esp,0x10
c001acff:	90                   	nop
c001ad00:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ad06:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ad09:	74 11                	je     c001ad1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ad0b:	83 ec 0c             	sub    esp,0xc
c001ad0e:	68 2b 2d 02 c0       	push   0xc0022d2b
c001ad13:	e8 b1 65 ff ff       	call   c00112c9 <KePanic(char const*)>
c001ad18:	83 c4 10             	add    esp,0x10
c001ad1b:	90                   	nop
c001ad1c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ad1f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ad23:	85 f6                	test   esi,esi
c001ad25:	7e 2d                	jle    c001ad54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ad27:	31 c0                	xor    eax,eax
c001ad29:	8d 76 00             	lea    esi,[esi+0x0]
c001ad2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad2f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ad32:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ad38:	85 c9                	test   ecx,ecx
c001ad3a:	0f 49 d1             	cmovns edx,ecx
c001ad3d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001ad41:	c1 fa 0f             	sar    edx,0xf
c001ad44:	01 d1                	add    ecx,edx
c001ad46:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001ad4a:	83 c0 01             	add    eax,0x1
c001ad4d:	39 f0                	cmp    eax,esi
c001ad4f:	75 db                	jne    c001ad2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ad57:	83 ec 04             	sub    esp,0x4
c001ad5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad5d:	29 f0                	sub    eax,esi
c001ad5f:	c1 e0 02             	shl    eax,0x2
c001ad62:	50                   	push   eax
c001ad63:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ad66:	50                   	push   eax
c001ad67:	52                   	push   edx
c001ad68:	e8 63 56 fe ff       	call   c00003d0 <memmove>
c001ad6d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad70:	29 f0                	sub    eax,esi
c001ad72:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ad75:	83 c4 1c             	add    esp,0x1c
c001ad78:	89 f0                	mov    eax,esi
c001ad7a:	5b                   	pop    ebx
c001ad7b:	5e                   	pop    esi
c001ad7c:	5f                   	pop    edi
c001ad7d:	5d                   	pop    ebp
c001ad7e:	c3                   	ret    
c001ad7f:	90                   	nop

c001ad80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ad80:	55                   	push   ebp
c001ad81:	57                   	push   edi
c001ad82:	56                   	push   esi
c001ad83:	53                   	push   ebx
c001ad84:	83 ec 0c             	sub    esp,0xc
c001ad87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad8f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ad93:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad97:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ad9d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ad9f:	74 13                	je     c001adb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ada1:	83 ec 0c             	sub    esp,0xc
c001ada4:	68 0c 2d 02 c0       	push   0xc0022d0c
c001ada9:	e8 1b 65 ff ff       	call   c00112c9 <KePanic(char const*)>
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	8d 76 00             	lea    esi,[esi+0x0]
c001adb4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001adba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001adbd:	74 11                	je     c001add0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001adbf:	83 ec 0c             	sub    esp,0xc
c001adc2:	68 47 2d 02 c0       	push   0xc0022d47
c001adc7:	e8 fd 64 ff ff       	call   c00112c9 <KePanic(char const*)>
c001adcc:	83 c4 10             	add    esp,0x10
c001adcf:	90                   	nop
c001add0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001add6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001add9:	74 11                	je     c001adec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001addb:	83 ec 0c             	sub    esp,0xc
c001adde:	68 47 2d 02 c0       	push   0xc0022d47
c001ade3:	e8 e1 64 ff ff       	call   c00112c9 <KePanic(char const*)>
c001ade8:	83 c4 10             	add    esp,0x10
c001adeb:	90                   	nop
c001adec:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001adef:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001adf3:	85 ff                	test   edi,edi
c001adf5:	7e 21                	jle    c001ae18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001adf7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001adfe:	31 c0                	xor    eax,eax
c001ae00:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ae03:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ae06:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ae09:	01 d5                	add    ebp,edx
c001ae0b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ae0e:	83 c0 04             	add    eax,0x4
c001ae11:	39 c1                	cmp    ecx,eax
c001ae13:	75 eb                	jne    c001ae00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ae15:	8d 76 00             	lea    esi,[esi+0x0]
c001ae18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ae1b:	83 ec 04             	sub    esp,0x4
c001ae1e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ae21:	29 f8                	sub    eax,edi
c001ae23:	c1 e0 02             	shl    eax,0x2
c001ae26:	50                   	push   eax
c001ae27:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ae2a:	50                   	push   eax
c001ae2b:	52                   	push   edx
c001ae2c:	e8 9f 55 fe ff       	call   c00003d0 <memmove>
c001ae31:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ae34:	29 f8                	sub    eax,edi
c001ae36:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ae39:	83 c4 1c             	add    esp,0x1c
c001ae3c:	89 f8                	mov    eax,edi
c001ae3e:	5b                   	pop    ebx
c001ae3f:	5e                   	pop    esi
c001ae40:	5f                   	pop    edi
c001ae41:	5d                   	pop    ebp
c001ae42:	c3                   	ret    
c001ae43:	90                   	nop

c001ae44 <PCI::open(int, int, void*)>:
c001ae44:	83 ec 18             	sub    esp,0x18
c001ae47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ae55:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae57:	50                   	push   eax
c001ae58:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ae5b:	31 c0                	xor    eax,eax
c001ae5d:	83 c4 1c             	add    esp,0x1c
c001ae60:	c3                   	ret    
c001ae61:	90                   	nop

c001ae62 <PCI::close(int, int, void*)>:
c001ae62:	31 c0                	xor    eax,eax
c001ae64:	c3                   	ret    
c001ae65:	90                   	nop

c001ae66 <PCI::PCI()>:
c001ae66:	83 ec 0c             	sub    esp,0xc
c001ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6d:	83 ec 08             	sub    esp,0x8
c001ae70:	68 63 2d 02 c0       	push   0xc0022d63
c001ae75:	50                   	push   eax
c001ae76:	e8 0d 12 ff ff       	call   c000c088 <Bus::Bus(char const*)>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae87:	89 10                	mov    DWORD PTR [eax],edx
c001ae89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9b:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001aea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aeaa:	0f b6 d0             	movzx  edx,al
c001aead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001aeb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aec2:	0f b6 d0             	movzx  edx,al
c001aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001aece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aed8:	8d 50 01             	lea    edx,[eax+0x1]
c001aedb:	88 d1                	mov    cl,dl
c001aedd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aee1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001aee7:	0f b6 d0             	movzx  edx,al
c001aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001aef2:	83 c9 c0             	or     ecx,0xffffffc0
c001aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001aef9:	90                   	nop
c001aefa:	83 c4 0c             	add    esp,0xc
c001aefd:	c3                   	ret    

c001aefe <PCI::readBAR8(unsigned int, int)>:
c001aefe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af06:	f6 c2 01             	test   dl,0x1
c001af09:	74 07                	je     c001af12 <PCI::readBAR8(unsigned int, int)+0x14>
c001af0b:	83 e2 fc             	and    edx,0xfffffffc
c001af0e:	01 c2                	add    edx,eax
c001af10:	ec                   	in     al,dx
c001af11:	c3                   	ret    
c001af12:	83 e2 f0             	and    edx,0xfffffff0
c001af15:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001af18:	c3                   	ret    
c001af19:	90                   	nop

c001af1a <PCI::readBAR16(unsigned int, int)>:
c001af1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af22:	f6 c2 01             	test   dl,0x1
c001af25:	74 08                	je     c001af2f <PCI::readBAR16(unsigned int, int)+0x15>
c001af27:	83 e2 fc             	and    edx,0xfffffffc
c001af2a:	01 c2                	add    edx,eax
c001af2c:	66 ed                	in     ax,dx
c001af2e:	c3                   	ret    
c001af2f:	83 e2 f0             	and    edx,0xfffffff0
c001af32:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <PCI::readBAR32(unsigned int, int)>:
c001af38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af40:	f6 c2 01             	test   dl,0x1
c001af43:	74 07                	je     c001af4c <PCI::readBAR32(unsigned int, int)+0x14>
c001af45:	83 e2 fc             	and    edx,0xfffffffc
c001af48:	01 c2                	add    edx,eax
c001af4a:	ed                   	in     eax,dx
c001af4b:	c3                   	ret    
c001af4c:	83 e2 f0             	and    edx,0xfffffff0
c001af4f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001af52:	c3                   	ret    
c001af53:	90                   	nop

c001af54 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001af54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af60:	f6 c2 01             	test   dl,0x1
c001af63:	74 07                	je     c001af6c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001af65:	83 e2 fc             	and    edx,0xfffffffc
c001af68:	01 ca                	add    edx,ecx
c001af6a:	ee                   	out    dx,al
c001af6b:	c3                   	ret    
c001af6c:	83 e2 f0             	and    edx,0xfffffff0
c001af6f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001af72:	c3                   	ret    
c001af73:	90                   	nop

c001af74 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001af74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af80:	f6 c2 01             	test   dl,0x1
c001af83:	74 08                	je     c001af8d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001af85:	83 e2 fc             	and    edx,0xfffffffc
c001af88:	01 ca                	add    edx,ecx
c001af8a:	66 ef                	out    dx,ax
c001af8c:	c3                   	ret    
c001af8d:	83 e2 f0             	and    edx,0xfffffff0
c001af90:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001af94:	c3                   	ret    
c001af95:	90                   	nop

c001af96 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001af96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afa2:	f6 c2 01             	test   dl,0x1
c001afa5:	74 07                	je     c001afae <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001afa7:	83 e2 fc             	and    edx,0xfffffffc
c001afaa:	01 ca                	add    edx,ecx
c001afac:	ef                   	out    dx,eax
c001afad:	c3                   	ret    
c001afae:	83 e2 f0             	and    edx,0xfffffff0
c001afb1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001afb4:	c3                   	ret    
c001afb5:	90                   	nop

c001afb6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afb6:	55                   	push   ebp
c001afb7:	57                   	push   edi
c001afb8:	56                   	push   esi
c001afb9:	53                   	push   ebx
c001afba:	83 ec 0c             	sub    esp,0xc
c001afbd:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001afc2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001afc6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001afca:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001afce:	83 fe 07             	cmp    esi,0x7
c001afd1:	76 10                	jbe    c001afe3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001afd3:	83 ec 0c             	sub    esp,0xc
c001afd6:	68 6b 2d 02 c0       	push   0xc0022d6b
c001afdb:	e8 e9 62 ff ff       	call   c00112c9 <KePanic(char const*)>
c001afe0:	83 c4 10             	add    esp,0x10
c001afe3:	0f b6 db             	movzx  ebx,bl
c001afe6:	83 fb 0f             	cmp    ebx,0xf
c001afe9:	76 10                	jbe    c001affb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001afeb:	83 ec 0c             	sub    esp,0xc
c001afee:	68 9b 2d 02 c0       	push   0xc0022d9b
c001aff3:	e8 d1 62 ff ff       	call   c00112c9 <KePanic(char const*)>
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	8d 04 36             	lea    eax,[esi+esi*1]
c001affe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b003:	83 c8 f0             	or     eax,0xfffffff0
c001b006:	ee                   	out    dx,al
c001b007:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b00c:	89 e8                	mov    eax,ebp
c001b00e:	ee                   	out    dx,al
c001b00f:	89 f9                	mov    ecx,edi
c001b011:	89 d8                	mov    eax,ebx
c001b013:	0f b6 d9             	movzx  ebx,cl
c001b016:	83 c4 0c             	add    esp,0xc
c001b019:	c1 e0 08             	shl    eax,0x8
c001b01c:	83 e3 fc             	and    ebx,0xfffffffc
c001b01f:	09 d8                	or     eax,ebx
c001b021:	5b                   	pop    ebx
c001b022:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b027:	5e                   	pop    esi
c001b028:	5f                   	pop    edi
c001b029:	5d                   	pop    ebp
c001b02a:	c3                   	ret    
c001b02b:	90                   	nop

c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b02c:	57                   	push   edi
c001b02d:	56                   	push   esi
c001b02e:	53                   	push   ebx
c001b02f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b037:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b03b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b03f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b045:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b049:	83 ff 01             	cmp    edi,0x1
c001b04c:	75 3f                	jne    c001b08d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b04e:	89 de                	mov    esi,ebx
c001b050:	0f b6 c0             	movzx  eax,al
c001b053:	c1 e0 10             	shl    eax,0x10
c001b056:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b05c:	0f b6 c9             	movzx  ecx,cl
c001b05f:	09 f0                	or     eax,esi
c001b061:	c1 e1 08             	shl    ecx,0x8
c001b064:	0f b6 d2             	movzx  edx,dl
c001b067:	c1 e2 0b             	shl    edx,0xb
c001b06a:	09 c8                	or     eax,ecx
c001b06c:	09 d0                	or     eax,edx
c001b06e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b073:	0d 00 00 00 80       	or     eax,0x80000000
c001b078:	ef                   	out    dx,eax
c001b079:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b07e:	ed                   	in     eax,dx
c001b07f:	83 e3 02             	and    ebx,0x2
c001b082:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b089:	d3 e8                	shr    eax,cl
c001b08b:	eb 44                	jmp    c001b0d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b08d:	83 ff 02             	cmp    edi,0x2
c001b090:	75 2d                	jne    c001b0bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b092:	83 ec 0c             	sub    esp,0xc
c001b095:	0f b6 fb             	movzx  edi,bl
c001b098:	57                   	push   edi
c001b099:	0f b6 c9             	movzx  ecx,cl
c001b09c:	51                   	push   ecx
c001b09d:	0f b6 d2             	movzx  edx,dl
c001b0a0:	52                   	push   edx
c001b0a1:	0f b6 c0             	movzx  eax,al
c001b0a4:	50                   	push   eax
c001b0a5:	56                   	push   esi
c001b0a6:	e8 0b ff ff ff       	call   c001afb6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0ab:	89 c2                	mov    edx,eax
c001b0ad:	ed                   	in     eax,dx
c001b0ae:	83 e3 02             	and    ebx,0x2
c001b0b1:	83 c4 20             	add    esp,0x20
c001b0b4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b0bb:	d3 e8                	shr    eax,cl
c001b0bd:	eb 12                	jmp    c001b0d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	68 cb 2d 02 c0       	push   0xc0022dcb
c001b0c7:	e8 fd 61 ff ff       	call   c00112c9 <KePanic(char const*)>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	31 c0                	xor    eax,eax
c001b0d1:	5b                   	pop    ebx
c001b0d2:	5e                   	pop    esi
c001b0d3:	5f                   	pop    edi
c001b0d4:	c3                   	ret    
c001b0d5:	90                   	nop

c001b0d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b0d6:	83 ec 18             	sub    esp,0x18
c001b0d9:	6a 00                	push   0x0
c001b0db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0e0:	50                   	push   eax
c001b0e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0e6:	50                   	push   eax
c001b0e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0ec:	50                   	push   eax
c001b0ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f1:	e8 36 ff ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0f6:	83 c4 2c             	add    esp,0x2c
c001b0f9:	c3                   	ret    

c001b0fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b0fa:	83 ec 18             	sub    esp,0x18
c001b0fd:	6a 0e                	push   0xe
c001b0ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b104:	50                   	push   eax
c001b105:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b10a:	50                   	push   eax
c001b10b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b110:	50                   	push   eax
c001b111:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b115:	e8 12 ff ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b11a:	83 c4 2c             	add    esp,0x2c
c001b11d:	0f b6 c0             	movzx  eax,al
c001b120:	c3                   	ret    
c001b121:	90                   	nop

c001b122 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b122:	55                   	push   ebp
c001b123:	57                   	push   edi
c001b124:	56                   	push   esi
c001b125:	53                   	push   ebx
c001b126:	83 ec 18             	sub    esp,0x18
c001b129:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b12e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b133:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b138:	6a 0a                	push   0xa
c001b13a:	56                   	push   esi
c001b13b:	55                   	push   ebp
c001b13c:	57                   	push   edi
c001b13d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b141:	e8 e6 fe ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b146:	83 c4 14             	add    esp,0x14
c001b149:	6a 0a                	push   0xa
c001b14b:	56                   	push   esi
c001b14c:	55                   	push   ebp
c001b14d:	57                   	push   edi
c001b14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b152:	89 c3                	mov    ebx,eax
c001b154:	0f b6 db             	movzx  ebx,bl
c001b157:	e8 d0 fe ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b15c:	83 c4 2c             	add    esp,0x2c
c001b15f:	25 00 ff 00 00       	and    eax,0xff00
c001b164:	09 d8                	or     eax,ebx
c001b166:	5b                   	pop    ebx
c001b167:	5e                   	pop    esi
c001b168:	5f                   	pop    edi
c001b169:	5d                   	pop    ebp
c001b16a:	c3                   	ret    
c001b16b:	90                   	nop

c001b16c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b16c:	83 ec 18             	sub    esp,0x18
c001b16f:	6a 08                	push   0x8
c001b171:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b176:	50                   	push   eax
c001b177:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b17c:	50                   	push   eax
c001b17d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b182:	50                   	push   eax
c001b183:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b187:	e8 a0 fe ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b18c:	83 c4 2c             	add    esp,0x2c
c001b18f:	0f b6 c4             	movzx  eax,ah
c001b192:	c3                   	ret    
c001b193:	90                   	nop

c001b194 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b194:	83 ec 18             	sub    esp,0x18
c001b197:	6a 08                	push   0x8
c001b199:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b19e:	50                   	push   eax
c001b19f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1a4:	50                   	push   eax
c001b1a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1aa:	50                   	push   eax
c001b1ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1af:	e8 78 fe ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1b4:	83 c4 2c             	add    esp,0x2c
c001b1b7:	c3                   	ret    

c001b1b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b1b8:	83 ec 18             	sub    esp,0x18
c001b1bb:	6a 3c                	push   0x3c
c001b1bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1c2:	50                   	push   eax
c001b1c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1c8:	50                   	push   eax
c001b1c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1ce:	50                   	push   eax
c001b1cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d3:	e8 54 fe ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1d8:	83 c4 2c             	add    esp,0x2c
c001b1db:	c3                   	ret    

c001b1dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b1dc:	83 ec 18             	sub    esp,0x18
c001b1df:	6a 18                	push   0x18
c001b1e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1e6:	50                   	push   eax
c001b1e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1ec:	50                   	push   eax
c001b1ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1f2:	50                   	push   eax
c001b1f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f7:	e8 30 fe ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1fc:	83 c4 2c             	add    esp,0x2c
c001b1ff:	0f b6 c4             	movzx  eax,ah
c001b202:	c3                   	ret    
c001b203:	90                   	nop

c001b204 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b204:	55                   	push   ebp
c001b205:	57                   	push   edi
c001b206:	56                   	push   esi
c001b207:	53                   	push   ebx
c001b208:	83 ec 28             	sub    esp,0x28
c001b20b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b20f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b214:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b219:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b21e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b225:	8d 43 12             	lea    eax,[ebx+0x12]
c001b228:	83 c3 10             	add    ebx,0x10
c001b22b:	0f b6 c0             	movzx  eax,al
c001b22e:	0f b6 db             	movzx  ebx,bl
c001b231:	50                   	push   eax
c001b232:	51                   	push   ecx
c001b233:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b237:	57                   	push   edi
c001b238:	55                   	push   ebp
c001b239:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b23d:	e8 ea fd ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b242:	83 c4 14             	add    esp,0x14
c001b245:	53                   	push   ebx
c001b246:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b24a:	51                   	push   ecx
c001b24b:	89 c6                	mov    esi,eax
c001b24d:	57                   	push   edi
c001b24e:	55                   	push   ebp
c001b24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b253:	c1 e6 10             	shl    esi,0x10
c001b256:	e8 d1 fd ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b25b:	83 c4 3c             	add    esp,0x3c
c001b25e:	5b                   	pop    ebx
c001b25f:	0f b7 c0             	movzx  eax,ax
c001b262:	09 f0                	or     eax,esi
c001b264:	5e                   	pop    esi
c001b265:	5f                   	pop    edi
c001b266:	5d                   	pop    ebp
c001b267:	c3                   	ret    

c001b268 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b268:	55                   	push   ebp
c001b269:	57                   	push   edi
c001b26a:	56                   	push   esi
c001b26b:	53                   	push   ebx
c001b26c:	83 ec 0c             	sub    esp,0xc
c001b26f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b277:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b27b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b27f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b285:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b289:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b28d:	83 f9 01             	cmp    ecx,0x1
c001b290:	75 5d                	jne    c001b2ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b292:	0f b6 c8             	movzx  ecx,al
c001b295:	89 f0                	mov    eax,esi
c001b297:	25 fc 00 00 00       	and    eax,0xfc
c001b29c:	0f b6 d2             	movzx  edx,dl
c001b29f:	c1 e1 10             	shl    ecx,0x10
c001b2a2:	c1 e2 0b             	shl    edx,0xb
c001b2a5:	09 c1                	or     ecx,eax
c001b2a7:	89 f8                	mov    eax,edi
c001b2a9:	0f b6 f8             	movzx  edi,al
c001b2ac:	c1 e7 08             	shl    edi,0x8
c001b2af:	09 f9                	or     ecx,edi
c001b2b1:	09 d1                	or     ecx,edx
c001b2b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2b8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b2be:	89 c8                	mov    eax,ecx
c001b2c0:	ef                   	out    dx,eax
c001b2c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2c6:	ed                   	in     eax,dx
c001b2c7:	83 e6 02             	and    esi,0x2
c001b2ca:	0f b7 db             	movzx  ebx,bx
c001b2cd:	74 0a                	je     c001b2d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b2cf:	c1 e3 10             	shl    ebx,0x10
c001b2d2:	0f b7 d0             	movzx  edx,ax
c001b2d5:	09 d3                	or     ebx,edx
c001b2d7:	eb 05                	jmp    c001b2de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b2d9:	66 31 c0             	xor    ax,ax
c001b2dc:	09 c3                	or     ebx,eax
c001b2de:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2e3:	89 c8                	mov    eax,ecx
c001b2e5:	ef                   	out    dx,eax
c001b2e6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2eb:	89 d8                	mov    eax,ebx
c001b2ed:	eb 41                	jmp    c001b330 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b2ef:	83 f9 02             	cmp    ecx,0x2
c001b2f2:	75 45                	jne    c001b339 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b2f4:	89 f1                	mov    ecx,esi
c001b2f6:	83 ec 0c             	sub    esp,0xc
c001b2f9:	0f b6 f1             	movzx  esi,cl
c001b2fc:	89 f9                	mov    ecx,edi
c001b2fe:	56                   	push   esi
c001b2ff:	0f b6 f9             	movzx  edi,cl
c001b302:	57                   	push   edi
c001b303:	0f b6 d2             	movzx  edx,dl
c001b306:	52                   	push   edx
c001b307:	0f b6 c0             	movzx  eax,al
c001b30a:	50                   	push   eax
c001b30b:	55                   	push   ebp
c001b30c:	e8 a5 fc ff ff       	call   c001afb6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b311:	89 c2                	mov    edx,eax
c001b313:	ed                   	in     eax,dx
c001b314:	83 c4 20             	add    esp,0x20
c001b317:	f6 c2 02             	test   dl,0x2
c001b31a:	0f b7 db             	movzx  ebx,bx
c001b31d:	74 0c                	je     c001b32b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b31f:	0f b7 c8             	movzx  ecx,ax
c001b322:	89 d8                	mov    eax,ebx
c001b324:	c1 e0 10             	shl    eax,0x10
c001b327:	09 c8                	or     eax,ecx
c001b329:	eb 05                	jmp    c001b330 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b32b:	66 31 c0             	xor    ax,ax
c001b32e:	09 d8                	or     eax,ebx
c001b330:	ef                   	out    dx,eax
c001b331:	83 c4 0c             	add    esp,0xc
c001b334:	5b                   	pop    ebx
c001b335:	5e                   	pop    esi
c001b336:	5f                   	pop    edi
c001b337:	5d                   	pop    ebp
c001b338:	c3                   	ret    
c001b339:	c7 44 24 20 cb 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022dcb
c001b341:	83 c4 0c             	add    esp,0xc
c001b344:	5b                   	pop    ebx
c001b345:	5e                   	pop    esi
c001b346:	5f                   	pop    edi
c001b347:	5d                   	pop    ebp
c001b348:	e9 7c 5f ff ff       	jmp    c00112c9 <KePanic(char const*)>
c001b34d:	90                   	nop

c001b34e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b34e:	55                   	push   ebp
c001b34f:	57                   	push   edi
c001b350:	56                   	push   esi
c001b351:	53                   	push   ebx
c001b352:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b358:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b35f:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b366:	0f 85 bd 00 00 00    	jne    c001b429 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	68 14 01 00 00       	push   0x114
c001b374:	e8 5a c7 fe ff       	call   c0007ad3 <malloc>
c001b379:	83 c4 0c             	add    esp,0xc
c001b37c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b382:	68 d1 2d 02 c0       	push   0xc0022dd1
c001b387:	50                   	push   eax
c001b388:	89 c3                	mov    ebx,eax
c001b38a:	e8 1d 05 ff ff       	call   c000b8ac <File::File(char const*, Process*)>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	85 db                	test   ebx,ebx
c001b394:	0f 84 6b 02 00 00    	je     c001b605 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b39a:	57                   	push   edi
c001b39b:	57                   	push   edi
c001b39c:	6a 01                	push   0x1
c001b39e:	53                   	push   ebx
c001b39f:	e8 26 05 ff ff       	call   c000b8ca <File::open(FileOpenMode)>
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	85 c0                	test   eax,eax
c001b3a9:	0f 85 56 02 00 00    	jne    c001b605 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b3af:	52                   	push   edx
c001b3b0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b3b4:	50                   	push   eax
c001b3b5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b3b9:	50                   	push   eax
c001b3ba:	53                   	push   ebx
c001b3bb:	e8 0c 08 ff ff       	call   c000bbcc <File::stat(unsigned long long*, bool*)>
c001b3c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3c4:	40                   	inc    eax
c001b3c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3c8:	e8 06 c7 fe ff       	call   c0007ad3 <malloc>
c001b3cd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b3d1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b3d5:	59                   	pop    ecx
c001b3d6:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b3db:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b3dd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b3e1:	51                   	push   ecx
c001b3e2:	50                   	push   eax
c001b3e3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3eb:	53                   	push   ebx
c001b3ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b3ef:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b3f3:	83 c4 20             	add    esp,0x20
c001b3f6:	89 c8                	mov    eax,ecx
c001b3f8:	99                   	cdq    
c001b3f9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b3fd:	0f 85 02 02 00 00    	jne    c001b605 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b403:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b407:	0f 85 f8 01 00 00    	jne    c001b605 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b40d:	83 ec 0c             	sub    esp,0xc
c001b410:	53                   	push   ebx
c001b411:	e8 12 05 ff ff       	call   c000b928 <File::close()>
c001b416:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b424:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b429:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b431:	31 c9                	xor    ecx,ecx
c001b433:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b43a:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b440:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b447:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b44d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b452:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b45a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b45f:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b46b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b473:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b477:	39 cd                	cmp    ebp,ecx
c001b479:	0f 8e 86 01 00 00    	jle    c001b605 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b47f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b482:	d4 40                	aam    0x40
c001b484:	d5 39                	aad    0x39
c001b486:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b48a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b48e:	d4 40                	aam    0x40
c001b490:	d5 39                	aad    0x39
c001b492:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b496:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b49a:	d4 40                	aam    0x40
c001b49c:	d5 39                	aad    0x39
c001b49e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b4a2:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b4a6:	d4 40                	aam    0x40
c001b4a8:	d5 39                	aad    0x39
c001b4aa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b4ae:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b4b2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b4b6:	3c 56                	cmp    al,0x56
c001b4b8:	74 47                	je     c001b501 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b4ba:	d4 40                	aam    0x40
c001b4bc:	d5 39                	aad    0x39
c001b4be:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b4c1:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b4c5:	0f b6 db             	movzx  ebx,bl
c001b4c8:	c1 e3 04             	shl    ebx,0x4
c001b4cb:	d4 40                	aam    0x40
c001b4cd:	d5 39                	aad    0x39
c001b4cf:	83 e8 30             	sub    eax,0x30
c001b4d2:	0f b6 c0             	movzx  eax,al
c001b4d5:	09 c3                	or     ebx,eax
c001b4d7:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b4db:	c1 e3 04             	shl    ebx,0x4
c001b4de:	d4 40                	aam    0x40
c001b4e0:	d5 39                	aad    0x39
c001b4e2:	83 e8 30             	sub    eax,0x30
c001b4e5:	0f b6 c0             	movzx  eax,al
c001b4e8:	09 c3                	or     ebx,eax
c001b4ea:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b4ee:	c1 e3 04             	shl    ebx,0x4
c001b4f1:	d4 40                	aam    0x40
c001b4f3:	d5 39                	aad    0x39
c001b4f5:	83 e8 30             	sub    eax,0x30
c001b4f8:	0f b6 c0             	movzx  eax,al
c001b4fb:	09 c3                	or     ebx,eax
c001b4fd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b501:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b505:	80 fb 58             	cmp    bl,0x58
c001b508:	74 49                	je     c001b553 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b50a:	88 d8                	mov    al,bl
c001b50c:	d4 40                	aam    0x40
c001b50e:	d5 39                	aad    0x39
c001b510:	83 e8 30             	sub    eax,0x30
c001b513:	0f b6 f8             	movzx  edi,al
c001b516:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b51a:	c1 e7 04             	shl    edi,0x4
c001b51d:	d4 40                	aam    0x40
c001b51f:	d5 39                	aad    0x39
c001b521:	83 e8 30             	sub    eax,0x30
c001b524:	0f b6 c0             	movzx  eax,al
c001b527:	09 c7                	or     edi,eax
c001b529:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b52d:	c1 e7 04             	shl    edi,0x4
c001b530:	d4 40                	aam    0x40
c001b532:	d5 39                	aad    0x39
c001b534:	83 e8 30             	sub    eax,0x30
c001b537:	0f b6 c0             	movzx  eax,al
c001b53a:	09 c7                	or     edi,eax
c001b53c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b540:	c1 e7 04             	shl    edi,0x4
c001b543:	d4 40                	aam    0x40
c001b545:	d5 39                	aad    0x39
c001b547:	83 e8 30             	sub    eax,0x30
c001b54a:	0f b6 c0             	movzx  eax,al
c001b54d:	09 c7                	or     edi,eax
c001b54f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b553:	8d 41 10             	lea    eax,[ecx+0x10]
c001b556:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b55a:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b55e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b562:	83 f9 0a             	cmp    ecx,0xa
c001b565:	74 07                	je     c001b56e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b567:	47                   	inc    edi
c001b568:	39 c5                	cmp    ebp,eax
c001b56a:	75 16                	jne    c001b582 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b56c:	89 e8                	mov    eax,ebp
c001b56e:	83 f9 0a             	cmp    ecx,0xa
c001b571:	0f 94 c1             	sete   cl
c001b574:	0f b6 c9             	movzx  ecx,cl
c001b577:	01 c1                	add    ecx,eax
c001b579:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b57e:	75 0f                	jne    c001b58f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b580:	eb 1c                	jmp    c001b59e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b582:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b585:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b589:	40                   	inc    eax
c001b58a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b58d:	eb cb                	jmp    c001b55a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b58f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b593:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b598:	0f 85 d9 fe ff ff    	jne    c001b477 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b59e:	80 fb 58             	cmp    bl,0x58
c001b5a1:	74 10                	je     c001b5b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b5a3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b5a8:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b5ad:	0f 85 c4 fe ff ff    	jne    c001b477 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5bb:	83 e8 30             	sub    eax,0x30
c001b5be:	c1 e0 04             	shl    eax,0x4
c001b5c1:	83 eb 30             	sub    ebx,0x30
c001b5c4:	09 d8                	or     eax,ebx
c001b5c6:	0f b6 c0             	movzx  eax,al
c001b5c9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b5cd:	0f 85 a4 fe ff ff    	jne    c001b477 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b5d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5d7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b5db:	83 e8 30             	sub    eax,0x30
c001b5de:	c1 e0 04             	shl    eax,0x4
c001b5e1:	83 eb 30             	sub    ebx,0x30
c001b5e4:	09 d8                	or     eax,ebx
c001b5e6:	0f b6 c0             	movzx  eax,al
c001b5e9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b5ed:	0f 85 84 fe ff ff    	jne    c001b477 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b5f3:	50                   	push   eax
c001b5f4:	50                   	push   eax
c001b5f5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b5f9:	50                   	push   eax
c001b5fa:	56                   	push   esi
c001b5fb:	e8 50 50 fe ff       	call   c0000650 <strcpy>
c001b600:	83 c4 10             	add    esp,0x10
c001b603:	eb 05                	jmp    c001b60a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b605:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b608:	31 f6                	xor    esi,esi
c001b60a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b610:	89 f0                	mov    eax,esi
c001b612:	5b                   	pop    ebx
c001b613:	5e                   	pop    esi
c001b614:	5f                   	pop    edi
c001b615:	5d                   	pop    ebp
c001b616:	c3                   	ret    
c001b617:	90                   	nop

c001b618 <PCI::checkBus(unsigned char)>:
c001b618:	56                   	push   esi
c001b619:	53                   	push   ebx
c001b61a:	31 db                	xor    ebx,ebx
c001b61c:	51                   	push   ecx
c001b61d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b622:	52                   	push   edx
c001b623:	53                   	push   ebx
c001b624:	43                   	inc    ebx
c001b625:	56                   	push   esi
c001b626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b62a:	e8 0f 03 00 00       	call   c001b93e <PCI::checkDevice(unsigned char, unsigned char)>
c001b62f:	83 c4 10             	add    esp,0x10
c001b632:	83 fb 20             	cmp    ebx,0x20
c001b635:	75 eb                	jne    c001b622 <PCI::checkBus(unsigned char)+0xa>
c001b637:	58                   	pop    eax
c001b638:	5b                   	pop    ebx
c001b639:	5e                   	pop    esi
c001b63a:	c3                   	ret    
c001b63b:	90                   	nop

c001b63c <PCI::foundDevice(PCIDeviceInfo)>:
c001b63c:	55                   	push   ebp
c001b63d:	57                   	push   edi
c001b63e:	56                   	push   esi
c001b63f:	53                   	push   ebx
c001b640:	83 ec 1c             	sub    esp,0x1c
c001b643:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b648:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b64c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b651:	0f 84 63 01 00 00    	je     c001b7ba <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b657:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b65c:	66 3d 06 04          	cmp    ax,0x406
c001b660:	75 2c                	jne    c001b68e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b662:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b667:	50                   	push   eax
c001b668:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b66d:	50                   	push   eax
c001b66e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b673:	50                   	push   eax
c001b674:	53                   	push   ebx
c001b675:	e8 62 fb ff ff       	call   c001b1dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b67a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b67e:	0f b6 c0             	movzx  eax,al
c001b681:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b685:	83 c4 2c             	add    esp,0x2c
c001b688:	5b                   	pop    ebx
c001b689:	5e                   	pop    esi
c001b68a:	5f                   	pop    edi
c001b68b:	5d                   	pop    ebp
c001b68c:	eb 8a                	jmp    c001b618 <PCI::checkBus(unsigned char)>
c001b68e:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b693:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b699:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b69d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b6a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b6a5:	85 d2                	test   edx,edx
c001b6a7:	74 34                	je     c001b6dd <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b6a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b6ac:	85 c9                	test   ecx,ecx
c001b6ae:	74 29                	je     c001b6d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b6b0:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b6b6:	31 f5                	xor    ebp,esi
c001b6b8:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b6be:	75 19                	jne    c001b6d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b6c0:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b6c6:	75 11                	jne    c001b6d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b6c8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b6cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b6d3:	0f 84 e1 00 00 00    	je     c001b7ba <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b6d9:	8b 12                	mov    edx,DWORD PTR [edx]
c001b6db:	eb c8                	jmp    c001b6a5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b6dd:	3d 01 06 00 00       	cmp    eax,0x601
c001b6e2:	75 19                	jne    c001b6fd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b6e4:	83 ec 0c             	sub    esp,0xc
c001b6e7:	68 64 01 00 00       	push   0x164
c001b6ec:	e8 e2 c3 fe ff       	call   c0007ad3 <malloc>
c001b6f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6f4:	89 c5                	mov    ebp,eax
c001b6f6:	e8 ab 0e 00 00       	call   c001c5a6 <SATABus::SATABus()>
c001b6fb:	eb 1e                	jmp    c001b71b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b6fd:	3d 01 01 00 00       	cmp    eax,0x101
c001b702:	75 62                	jne    c001b766 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	68 70 02 00 00       	push   0x270
c001b70c:	e8 c2 c3 fe ff       	call   c0007ad3 <malloc>
c001b711:	89 04 24             	mov    DWORD PTR [esp],eax
c001b714:	89 c5                	mov    ebp,eax
c001b716:	e8 f3 02 00 00       	call   c001ba0e <IDE::IDE()>
c001b71b:	58                   	pop    eax
c001b71c:	5a                   	pop    edx
c001b71d:	55                   	push   ebp
c001b71e:	53                   	push   ebx
c001b71f:	e8 08 10 ff ff       	call   c000c72c <Device::addChild(Device*)>
c001b724:	83 ec 1c             	sub    esp,0x1c
c001b727:	b9 09 00 00 00       	mov    ecx,0x9
c001b72c:	fc                   	cld    
c001b72d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b731:	89 e7                	mov    edi,esp
c001b733:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b735:	55                   	push   ebp
c001b736:	e8 37 0f ff ff       	call   c000c672 <Device::preOpenPCI(PCIDeviceInfo)>
c001b73b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b73e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b742:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b74a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b752:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b75a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b75d:	83 c4 4c             	add    esp,0x4c
c001b760:	5b                   	pop    ebx
c001b761:	5e                   	pop    esi
c001b762:	5f                   	pop    edi
c001b763:	5d                   	pop    ebp
c001b764:	ff e0                	jmp    eax
c001b766:	83 ec 0c             	sub    esp,0xc
c001b769:	68 58 01 00 00       	push   0x158
c001b76e:	e8 60 c3 fe ff       	call   c0007ad3 <malloc>
c001b773:	5a                   	pop    edx
c001b774:	59                   	pop    ecx
c001b775:	68 ea 2d 02 c0       	push   0xc0022dea
c001b77a:	50                   	push   eax
c001b77b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b77f:	e8 46 12 ff ff       	call   c000c9ca <DriverlessDevice::DriverlessDevice(char const*)>
c001b784:	5e                   	pop    esi
c001b785:	5f                   	pop    edi
c001b786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b78a:	50                   	push   eax
c001b78b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b78f:	53                   	push   ebx
c001b790:	e8 97 0f ff ff       	call   c000c72c <Device::addChild(Device*)>
c001b795:	83 c4 10             	add    esp,0x10
c001b798:	b9 09 00 00 00       	mov    ecx,0x9
c001b79d:	fc                   	cld    
c001b79e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b7a2:	89 fe                	mov    esi,edi
c001b7a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b7a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b7ae:	83 c4 1c             	add    esp,0x1c
c001b7b1:	5b                   	pop    ebx
c001b7b2:	5e                   	pop    esi
c001b7b3:	5f                   	pop    edi
c001b7b4:	5d                   	pop    ebp
c001b7b5:	e9 b8 0e ff ff       	jmp    c000c672 <Device::preOpenPCI(PCIDeviceInfo)>
c001b7ba:	83 c4 1c             	add    esp,0x1c
c001b7bd:	5b                   	pop    ebx
c001b7be:	5e                   	pop    esi
c001b7bf:	5f                   	pop    edi
c001b7c0:	5d                   	pop    ebp
c001b7c1:	c3                   	ret    

c001b7c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b7c2:	55                   	push   ebp
c001b7c3:	57                   	push   edi
c001b7c4:	56                   	push   esi
c001b7c5:	53                   	push   ebx
c001b7c6:	83 ec 68             	sub    esp,0x68
c001b7c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b7d0:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b7d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b7d8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b7df:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b7e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b7e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b7ef:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b7f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b7f8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b7fd:	6a 0c                	push   0xc
c001b7ff:	57                   	push   edi
c001b800:	53                   	push   ebx
c001b801:	56                   	push   esi
c001b802:	55                   	push   ebp
c001b803:	e8 24 f8 ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b808:	83 c4 20             	add    esp,0x20
c001b80b:	57                   	push   edi
c001b80c:	53                   	push   ebx
c001b80d:	56                   	push   esi
c001b80e:	55                   	push   ebp
c001b80f:	e8 0e f9 ff ff       	call   c001b122 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b814:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b819:	57                   	push   edi
c001b81a:	53                   	push   ebx
c001b81b:	56                   	push   esi
c001b81c:	55                   	push   ebp
c001b81d:	e8 96 f9 ff ff       	call   c001b1b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b822:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b826:	83 c4 14             	add    esp,0x14
c001b829:	6a 3c                	push   0x3c
c001b82b:	57                   	push   edi
c001b82c:	53                   	push   ebx
c001b82d:	56                   	push   esi
c001b82e:	55                   	push   ebp
c001b82f:	e8 f8 f7 ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b834:	0f b6 c4             	movzx  eax,ah
c001b837:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b83b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b83f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b843:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b848:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b84e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b854:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b858:	83 c4 20             	add    esp,0x20
c001b85b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b860:	74 30                	je     c001b892 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b862:	31 c0                	xor    eax,eax
c001b864:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b868:	7e 28                	jle    c001b892 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b86a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b872:	39 cb                	cmp    ebx,ecx
c001b874:	75 19                	jne    c001b88f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b876:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b87e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b882:	75 0b                	jne    c001b88f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b884:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b88b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b88f:	40                   	inc    eax
c001b890:	eb d2                	jmp    c001b864 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b892:	31 d2                	xor    edx,edx
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	57                   	push   edi
c001b898:	53                   	push   ebx
c001b899:	56                   	push   esi
c001b89a:	52                   	push   edx
c001b89b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b89f:	55                   	push   ebp
c001b8a0:	e8 5f f9 ff ff       	call   c001b204 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b8a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b8a9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b8ad:	42                   	inc    edx
c001b8ae:	83 c4 20             	add    esp,0x20
c001b8b1:	83 fa 06             	cmp    edx,0x6
c001b8b4:	75 de                	jne    c001b894 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b8b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8ba:	83 ec 0c             	sub    esp,0xc
c001b8bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8c1:	c1 e2 08             	shl    edx,0x8
c001b8c4:	0f b6 c4             	movzx  eax,ah
c001b8c7:	09 d0                	or     eax,edx
c001b8c9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b8ce:	6a 02                	push   0x2
c001b8d0:	57                   	push   edi
c001b8d1:	53                   	push   ebx
c001b8d2:	56                   	push   esi
c001b8d3:	55                   	push   ebp
c001b8d4:	e8 53 f7 ff ff       	call   c001b02c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b8d9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b8de:	83 c4 20             	add    esp,0x20
c001b8e1:	57                   	push   edi
c001b8e2:	53                   	push   ebx
c001b8e3:	56                   	push   esi
c001b8e4:	55                   	push   ebp
c001b8e5:	e8 82 f8 ff ff       	call   c001b16c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b8ea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b8ee:	57                   	push   edi
c001b8ef:	53                   	push   ebx
c001b8f0:	56                   	push   esi
c001b8f1:	55                   	push   ebp
c001b8f2:	e8 df f7 ff ff       	call   c001b0d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8f7:	b9 09 00 00 00       	mov    ecx,0x9
c001b8fc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b901:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b905:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b909:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b90d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b911:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b915:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b919:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b91d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b921:	83 ec 0c             	sub    esp,0xc
c001b924:	fc                   	cld    
c001b925:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b929:	89 e7                	mov    edi,esp
c001b92b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b92d:	55                   	push   ebp
c001b92e:	e8 09 fd ff ff       	call   c001b63c <PCI::foundDevice(PCIDeviceInfo)>
c001b933:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b939:	5b                   	pop    ebx
c001b93a:	5e                   	pop    esi
c001b93b:	5f                   	pop    edi
c001b93c:	5d                   	pop    ebp
c001b93d:	c3                   	ret    

c001b93e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b93e:	55                   	push   ebp
c001b93f:	57                   	push   edi
c001b940:	56                   	push   esi
c001b941:	53                   	push   ebx
c001b942:	83 ec 0c             	sub    esp,0xc
c001b945:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b94a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b94f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b953:	6a 00                	push   0x0
c001b955:	56                   	push   esi
c001b956:	57                   	push   edi
c001b957:	55                   	push   ebp
c001b958:	e8 79 f7 ff ff       	call   c001b0d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b95d:	6a 00                	push   0x0
c001b95f:	56                   	push   esi
c001b960:	57                   	push   edi
c001b961:	55                   	push   ebp
c001b962:	e8 5b fe ff ff       	call   c001b7c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b967:	83 c4 20             	add    esp,0x20
c001b96a:	6a 00                	push   0x0
c001b96c:	56                   	push   esi
c001b96d:	57                   	push   edi
c001b96e:	55                   	push   ebp
c001b96f:	e8 86 f7 ff ff       	call   c001b0fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	a8 80                	test   al,0x80
c001b979:	74 2d                	je     c001b9a8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b97b:	bb 01 00 00 00       	mov    ebx,0x1
c001b980:	53                   	push   ebx
c001b981:	56                   	push   esi
c001b982:	57                   	push   edi
c001b983:	55                   	push   ebp
c001b984:	e8 4d f7 ff ff       	call   c001b0d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	0f b7 c0             	movzx  eax,ax
c001b98f:	3d ff ff 00 00       	cmp    eax,0xffff
c001b994:	74 0c                	je     c001b9a2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b996:	53                   	push   ebx
c001b997:	56                   	push   esi
c001b998:	57                   	push   edi
c001b999:	55                   	push   ebp
c001b99a:	e8 23 fe ff ff       	call   c001b7c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	43                   	inc    ebx
c001b9a3:	83 fb 08             	cmp    ebx,0x8
c001b9a6:	75 d8                	jne    c001b980 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b9a8:	83 c4 0c             	add    esp,0xc
c001b9ab:	5b                   	pop    ebx
c001b9ac:	5e                   	pop    esi
c001b9ad:	5f                   	pop    edi
c001b9ae:	5d                   	pop    ebp
c001b9af:	c3                   	ret    

c001b9b0 <PCI::detect()>:
c001b9b0:	56                   	push   esi
c001b9b1:	53                   	push   ebx
c001b9b2:	53                   	push   ebx
c001b9b3:	31 db                	xor    ebx,ebx
c001b9b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9b9:	6a 00                	push   0x0
c001b9bb:	6a 00                	push   0x0
c001b9bd:	6a 00                	push   0x0
c001b9bf:	56                   	push   esi
c001b9c0:	e8 35 f7 ff ff       	call   c001b0fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b9c5:	83 c4 10             	add    esp,0x10
c001b9c8:	a8 80                	test   al,0x80
c001b9ca:	75 21                	jne    c001b9ed <PCI::detect()+0x3d>
c001b9cc:	51                   	push   ecx
c001b9cd:	51                   	push   ecx
c001b9ce:	6a 00                	push   0x0
c001b9d0:	56                   	push   esi
c001b9d1:	e8 42 fc ff ff       	call   c001b618 <PCI::checkBus(unsigned char)>
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	eb 2a                	jmp    c001ba05 <PCI::detect()+0x55>
c001b9db:	52                   	push   edx
c001b9dc:	52                   	push   edx
c001b9dd:	53                   	push   ebx
c001b9de:	43                   	inc    ebx
c001b9df:	56                   	push   esi
c001b9e0:	e8 33 fc ff ff       	call   c001b618 <PCI::checkBus(unsigned char)>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	83 fb 08             	cmp    ebx,0x8
c001b9eb:	74 18                	je     c001ba05 <PCI::detect()+0x55>
c001b9ed:	53                   	push   ebx
c001b9ee:	6a 00                	push   0x0
c001b9f0:	6a 00                	push   0x0
c001b9f2:	56                   	push   esi
c001b9f3:	e8 de f6 ff ff       	call   c001b0d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b9f8:	83 c4 10             	add    esp,0x10
c001b9fb:	0f b7 c0             	movzx  eax,ax
c001b9fe:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba03:	74 d6                	je     c001b9db <PCI::detect()+0x2b>
c001ba05:	58                   	pop    eax
c001ba06:	5b                   	pop    ebx
c001ba07:	5e                   	pop    esi
c001ba08:	c3                   	ret    
c001ba09:	90                   	nop

c001ba0a <IDE::close(int, int, void*)>:
c001ba0a:	83 c8 ff             	or     eax,0xffffffff
c001ba0d:	c3                   	ret    

c001ba0e <IDE::IDE()>:
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba15:	83 ec 08             	sub    esp,0x8
c001ba18:	68 30 2e 02 c0       	push   0xc0022e30
c001ba1d:	50                   	push   eax
c001ba1e:	e8 4d 10 ff ff       	call   c000ca70 <HardDiskController::HardDiskController(char const*)>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	ba c0 2e 02 c0       	mov    edx,0xc0022ec0
c001ba2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2f:	89 10                	mov    DWORD PTR [eax],edx
c001ba31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba35:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ba3c:	90                   	nop
c001ba3d:	83 c4 0c             	add    esp,0xc
c001ba40:	c3                   	ret    
c001ba41:	90                   	nop

c001ba42 <IDE::prepareInterrupt(unsigned char)>:
c001ba42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba4b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ba53:	c3                   	ret    

c001ba54 <selectDrive(unsigned char, unsigned char)>:
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <IDE::getBase(unsigned char)>:
c001ba56:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ba5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ba67:	c3                   	ret    

c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ba68:	55                   	push   ebp
c001ba69:	57                   	push   edi
c001ba6a:	56                   	push   esi
c001ba6b:	53                   	push   ebx
c001ba6c:	83 ec 1c             	sub    esp,0x1c
c001ba6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ba73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba7f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ba82:	80 f9 03             	cmp    cl,0x3
c001ba85:	77 4f                	ja     c001bad6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ba87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba8b:	0f b6 f2             	movzx  esi,dl
c001ba8e:	0f b6 db             	movzx  ebx,bl
c001ba91:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ba94:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ba99:	80 ca 80             	or     dl,0x80
c001ba9c:	52                   	push   edx
c001ba9d:	6a 0c                	push   0xc
c001ba9f:	56                   	push   esi
c001baa0:	57                   	push   edi
c001baa1:	e8 c2 ff ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baa6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001baab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baaf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bab3:	ee                   	out    dx,al
c001bab4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bab9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001babd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bac1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bac9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bacd:	83 c4 2c             	add    esp,0x2c
c001bad0:	5b                   	pop    ebx
c001bad1:	5e                   	pop    esi
c001bad2:	5f                   	pop    edi
c001bad3:	5d                   	pop    ebp
c001bad4:	eb 92                	jmp    c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bad6:	0f b6 cb             	movzx  ecx,bl
c001bad9:	83 f9 07             	cmp    ecx,0x7
c001badc:	77 12                	ja     c001baf0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bade:	0f b6 d2             	movzx  edx,dl
c001bae1:	0f b6 db             	movzx  ebx,bl
c001bae4:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001baec:	01 da                	add    edx,ebx
c001baee:	eb 2f                	jmp    c001bb1f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001baf0:	83 f9 0d             	cmp    ecx,0xd
c001baf3:	77 13                	ja     c001bb08 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001baf5:	0f b6 d2             	movzx  edx,dl
c001baf8:	0f b6 db             	movzx  ebx,bl
c001bafb:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bb02:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bb06:	eb 17                	jmp    c001bb1f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bb08:	83 f9 15             	cmp    ecx,0x15
c001bb0b:	77 13                	ja     c001bb20 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bb0d:	0f b6 d2             	movzx  edx,dl
c001bb10:	0f b6 db             	movzx  ebx,bl
c001bb13:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bb1b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bb1f:	ee                   	out    dx,al
c001bb20:	83 c4 1c             	add    esp,0x1c
c001bb23:	5b                   	pop    ebx
c001bb24:	5e                   	pop    esi
c001bb25:	5f                   	pop    edi
c001bb26:	5d                   	pop    ebp
c001bb27:	c3                   	ret    

c001bb28 <IDE::read(unsigned char, unsigned char)>:
c001bb28:	57                   	push   edi
c001bb29:	56                   	push   esi
c001bb2a:	53                   	push   ebx
c001bb2b:	83 ec 10             	sub    esp,0x10
c001bb2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bb3a:	8d 42 f8             	lea    eax,[edx-0x8]
c001bb3d:	3c 03                	cmp    al,0x3
c001bb3f:	77 48                	ja     c001bb89 <IDE::read(unsigned char, unsigned char)+0x61>
c001bb41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb45:	0f b6 f1             	movzx  esi,cl
c001bb48:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bb4b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bb50:	0c 80                	or     al,0x80
c001bb52:	50                   	push   eax
c001bb53:	6a 0c                	push   0xc
c001bb55:	56                   	push   esi
c001bb56:	53                   	push   ebx
c001bb57:	e8 0c ff ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb60:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bb65:	0f b6 d2             	movzx  edx,dl
c001bb68:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bb6c:	ec                   	in     al,dx
c001bb6d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bb71:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bb76:	52                   	push   edx
c001bb77:	6a 0c                	push   0xc
c001bb79:	56                   	push   esi
c001bb7a:	53                   	push   ebx
c001bb7b:	e8 e8 fe ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb80:	83 c4 20             	add    esp,0x20
c001bb83:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bb87:	eb 4c                	jmp    c001bbd5 <IDE::read(unsigned char, unsigned char)+0xad>
c001bb89:	0f b6 f2             	movzx  esi,dl
c001bb8c:	83 fe 07             	cmp    esi,0x7
c001bb8f:	77 12                	ja     c001bba3 <IDE::read(unsigned char, unsigned char)+0x7b>
c001bb91:	0f b6 c9             	movzx  ecx,cl
c001bb94:	0f b6 d2             	movzx  edx,dl
c001bb97:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bb9f:	01 c2                	add    edx,eax
c001bba1:	eb 31                	jmp    c001bbd4 <IDE::read(unsigned char, unsigned char)+0xac>
c001bba3:	83 fe 0d             	cmp    esi,0xd
c001bba6:	77 13                	ja     c001bbbb <IDE::read(unsigned char, unsigned char)+0x93>
c001bba8:	0f b6 c9             	movzx  ecx,cl
c001bbab:	0f b6 d2             	movzx  edx,dl
c001bbae:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bbb5:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bbb9:	eb 19                	jmp    c001bbd4 <IDE::read(unsigned char, unsigned char)+0xac>
c001bbbb:	31 c0                	xor    eax,eax
c001bbbd:	83 fe 15             	cmp    esi,0x15
c001bbc0:	77 13                	ja     c001bbd5 <IDE::read(unsigned char, unsigned char)+0xad>
c001bbc2:	0f b6 c9             	movzx  ecx,cl
c001bbc5:	0f b6 d2             	movzx  edx,dl
c001bbc8:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bbd0:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bbd4:	ec                   	in     al,dx
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	5b                   	pop    ebx
c001bbd9:	5e                   	pop    esi
c001bbda:	5f                   	pop    edi
c001bbdb:	c3                   	ret    

c001bbdc <IDE::waitInterrupt(unsigned char)>:
c001bbdc:	55                   	push   ebp
c001bbdd:	57                   	push   edi
c001bbde:	56                   	push   esi
c001bbdf:	53                   	push   ebx
c001bbe0:	31 db                	xor    ebx,ebx
c001bbe2:	83 ec 0c             	sub    esp,0xc
c001bbe5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bbe9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bbee:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bbf6:	89 e8                	mov    eax,ebp
c001bbf8:	84 c0                	test   al,al
c001bbfa:	75 30                	jne    c001bc2c <IDE::waitInterrupt(unsigned char)+0x50>
c001bbfc:	50                   	push   eax
c001bbfd:	6a 0c                	push   0xc
c001bbff:	56                   	push   esi
c001bc00:	57                   	push   edi
c001bc01:	e8 22 ff ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	a8 01                	test   al,0x1
c001bc0b:	75 27                	jne    c001bc34 <IDE::waitInterrupt(unsigned char)+0x58>
c001bc0d:	f6 c3 04             	test   bl,0x4
c001bc10:	75 12                	jne    c001bc24 <IDE::waitInterrupt(unsigned char)+0x48>
c001bc12:	83 fb 32             	cmp    ebx,0x32
c001bc15:	7e 0d                	jle    c001bc24 <IDE::waitInterrupt(unsigned char)+0x48>
c001bc17:	83 ec 0c             	sub    esp,0xc
c001bc1a:	6a 64                	push   0x64
c001bc1c:	e8 73 a4 ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	83 fb 3c             	cmp    ebx,0x3c
c001bc27:	74 0b                	je     c001bc34 <IDE::waitInterrupt(unsigned char)+0x58>
c001bc29:	43                   	inc    ebx
c001bc2a:	eb c2                	jmp    c001bbee <IDE::waitInterrupt(unsigned char)+0x12>
c001bc2c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bc34:	83 c4 0c             	add    esp,0xc
c001bc37:	89 e8                	mov    eax,ebp
c001bc39:	5b                   	pop    ebx
c001bc3a:	5e                   	pop    esi
c001bc3b:	5f                   	pop    edi
c001bc3c:	5d                   	pop    ebp
c001bc3d:	c3                   	ret    

c001bc3e <ideChannel0IRQHandler(regs*, void*)>:
c001bc3e:	83 ec 10             	sub    esp,0x10
c001bc41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc45:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bc4c:	6a 07                	push   0x7
c001bc4e:	6a 00                	push   0x0
c001bc50:	50                   	push   eax
c001bc51:	e8 d2 fe ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001bc56:	83 c4 1c             	add    esp,0x1c
c001bc59:	c3                   	ret    

c001bc5a <ideChannel1IRQHandler(regs*, void*)>:
c001bc5a:	83 ec 10             	sub    esp,0x10
c001bc5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc61:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bc68:	6a 07                	push   0x7
c001bc6a:	6a 01                	push   0x1
c001bc6c:	50                   	push   eax
c001bc6d:	e8 b6 fe ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001bc72:	83 c4 1c             	add    esp,0x1c
c001bc75:	c3                   	ret    

c001bc76 <IDE::enableIRQs(unsigned char, bool)>:
c001bc76:	57                   	push   edi
c001bc77:	b8 02 00 00 00       	mov    eax,0x2
c001bc7c:	56                   	push   esi
c001bc7d:	53                   	push   ebx
c001bc7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bc83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc87:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bc8b:	74 02                	je     c001bc8f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bc8d:	31 c0                	xor    eax,eax
c001bc8f:	0f b6 db             	movzx  ebx,bl
c001bc92:	bf 04 00 00 00       	mov    edi,0x4
c001bc97:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bc9e:	50                   	push   eax
c001bc9f:	6a 0c                	push   0xc
c001bca1:	53                   	push   ebx
c001bca2:	56                   	push   esi
c001bca3:	e8 c0 fd ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bca8:	83 c4 10             	add    esp,0x10
c001bcab:	50                   	push   eax
c001bcac:	6a 0c                	push   0xc
c001bcae:	53                   	push   ebx
c001bcaf:	56                   	push   esi
c001bcb0:	e8 73 fe ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001bcb5:	83 c4 10             	add    esp,0x10
c001bcb8:	4f                   	dec    edi
c001bcb9:	75 f0                	jne    c001bcab <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bcbb:	5b                   	pop    ebx
c001bcbc:	5e                   	pop    esi
c001bcbd:	5f                   	pop    edi
c001bcbe:	c3                   	ret    
c001bcbf:	90                   	nop

c001bcc0 <IDE::open(int, int, void*)>:
c001bcc0:	55                   	push   ebp
c001bcc1:	57                   	push   edi
c001bcc2:	56                   	push   esi
c001bcc3:	53                   	push   ebx
c001bcc4:	83 ec 1c             	sub    esp,0x1c
c001bcc7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bccb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bcd2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bcdb:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bce4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bceb:	0f 85 da 02 00 00    	jne    c001bfcb <IDE::open(int, int, void*)+0x30b>
c001bcf1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bcf7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bcfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcff:	83 e0 7f             	and    eax,0x7f
c001bd02:	83 f8 05             	cmp    eax,0x5
c001bd05:	74 05                	je     c001bd0c <IDE::open(int, int, void*)+0x4c>
c001bd07:	83 f8 0f             	cmp    eax,0xf
c001bd0a:	75 32                	jne    c001bd3e <IDE::open(int, int, void*)+0x7e>
c001bd0c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bd12:	83 e0 fc             	and    eax,0xfffffffc
c001bd15:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd1c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bd22:	83 e0 fc             	and    eax,0xfffffffc
c001bd25:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd2c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bd32:	83 e0 fc             	and    eax,0xfffffffc
c001bd35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd3c:	eb 14                	jmp    c001bd52 <IDE::open(int, int, void*)+0x92>
c001bd3e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bd48:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bd52:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bd59:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bd5e:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bd65:	89 fa                	mov    edx,edi
c001bd67:	89 f1                	mov    ecx,esi
c001bd69:	c1 e1 10             	shl    ecx,0x10
c001bd6c:	89 e8                	mov    eax,ebp
c001bd6e:	c1 e0 0b             	shl    eax,0xb
c001bd71:	09 c1                	or     ecx,eax
c001bd73:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bd7a:	c1 e0 08             	shl    eax,0x8
c001bd7d:	09 c1                	or     ecx,eax
c001bd7f:	89 c8                	mov    eax,ecx
c001bd81:	0d 08 00 00 80       	or     eax,0x80000008
c001bd86:	ef                   	out    dx,eax
c001bd87:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd8c:	ed                   	in     eax,dx
c001bd8d:	c1 e8 10             	shr    eax,0x10
c001bd90:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd95:	0f 84 f9 00 00 00    	je     c001be94 <IDE::open(int, int, void*)+0x1d4>
c001bd9b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bda1:	89 fa                	mov    edx,edi
c001bda3:	89 c8                	mov    eax,ecx
c001bda5:	ef                   	out    dx,eax
c001bda6:	b0 fe                	mov    al,0xfe
c001bda8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdad:	ee                   	out    dx,al
c001bdae:	89 c8                	mov    eax,ecx
c001bdb0:	89 fa                	mov    edx,edi
c001bdb2:	ef                   	out    dx,eax
c001bdb3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdb8:	ed                   	in     eax,dx
c001bdb9:	3c fe                	cmp    al,0xfe
c001bdbb:	0f 85 a4 00 00 00    	jne    c001be65 <IDE::open(int, int, void*)+0x1a5>
c001bdc1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bdc7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bdce:	74 30                	je     c001be00 <IDE::open(int, int, void*)+0x140>
c001bdd0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bdd6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bdda:	83 ec 0c             	sub    esp,0xc
c001bddd:	40                   	inc    eax
c001bdde:	0f b6 c0             	movzx  eax,al
c001bde1:	50                   	push   eax
c001bde2:	55                   	push   ebp
c001bde3:	56                   	push   esi
c001bde4:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bdea:	51                   	push   ecx
c001bdeb:	e8 d8 38 ff ff       	call   c000f6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bdf0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bdf5:	83 c4 1c             	add    esp,0x1c
c001bdf8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdfe:	eb 0a                	jmp    c001be0a <IDE::open(int, int, void*)+0x14a>
c001be00:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001be0a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001be11:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001be16:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001be1d:	89 ea                	mov    edx,ebp
c001be1f:	c1 e1 10             	shl    ecx,0x10
c001be22:	c1 e0 08             	shl    eax,0x8
c001be25:	09 c1                	or     ecx,eax
c001be27:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001be2e:	c1 e0 0b             	shl    eax,0xb
c001be31:	09 c1                	or     ecx,eax
c001be33:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001be39:	89 c8                	mov    eax,ecx
c001be3b:	ef                   	out    dx,eax
c001be3c:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001be42:	be fc 0c 00 00       	mov    esi,0xcfc
c001be47:	89 f2                	mov    edx,esi
c001be49:	89 f8                	mov    eax,edi
c001be4b:	ee                   	out    dx,al
c001be4c:	89 c8                	mov    eax,ecx
c001be4e:	89 ea                	mov    edx,ebp
c001be50:	ef                   	out    dx,eax
c001be51:	89 f2                	mov    edx,esi
c001be53:	ed                   	in     eax,dx
c001be54:	0f b6 c0             	movzx  eax,al
c001be57:	39 f8                	cmp    eax,edi
c001be59:	74 49                	je     c001bea4 <IDE::open(int, int, void*)+0x1e4>
c001be5b:	83 ec 0c             	sub    esp,0xc
c001be5e:	68 48 2e 02 c0       	push   0xc0022e48
c001be63:	eb 37                	jmp    c001be9c <IDE::open(int, int, void*)+0x1dc>
c001be65:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001be6e:	75 1a                	jne    c001be8a <IDE::open(int, int, void*)+0x1ca>
c001be70:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001be75:	3d 8a 00 00 00       	cmp    eax,0x8a
c001be7a:	74 05                	je     c001be81 <IDE::open(int, int, void*)+0x1c1>
c001be7c:	83 c0 80             	add    eax,0xffffff80
c001be7f:	75 09                	jne    c001be8a <IDE::open(int, int, void*)+0x1ca>
c001be81:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be88:	eb 1a                	jmp    c001bea4 <IDE::open(int, int, void*)+0x1e4>
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	68 50 2e 02 c0       	push   0xc0022e50
c001be92:	eb 08                	jmp    c001be9c <IDE::open(int, int, void*)+0x1dc>
c001be94:	83 ec 0c             	sub    esp,0xc
c001be97:	68 81 2e 02 c0       	push   0xc0022e81
c001be9c:	e8 28 54 ff ff       	call   c00112c9 <KePanic(char const*)>
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001beab:	74 1a                	je     c001bec7 <IDE::open(int, int, void*)+0x207>
c001bead:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001beb3:	83 e0 fc             	and    eax,0xfffffffc
c001beb6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bebd:	83 c0 08             	add    eax,0x8
c001bec0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bec7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001becd:	89 c2                	mov    edx,eax
c001becf:	83 e2 0f             	and    edx,0xf
c001bed2:	83 fa 08             	cmp    edx,0x8
c001bed5:	75 0a                	jne    c001bee1 <IDE::open(int, int, void*)+0x221>
c001bed7:	83 e8 02             	sub    eax,0x2
c001beda:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bee1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bee7:	89 c2                	mov    edx,eax
c001bee9:	83 e2 0f             	and    edx,0xf
c001beec:	83 fa 08             	cmp    edx,0x8
c001beef:	75 0a                	jne    c001befb <IDE::open(int, int, void*)+0x23b>
c001bef1:	83 e8 02             	sub    eax,0x2
c001bef4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001befb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bf02:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bf09:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf0c:	89 d0                	mov    eax,edx
c001bf0e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf12:	8d 7a 01             	lea    edi,[edx+0x1]
c001bf15:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bf19:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bf1d:	83 e1 3f             	and    ecx,0x3f
c001bf20:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bf24:	89 f9                	mov    ecx,edi
c001bf26:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bf2d:	8d 78 02             	lea    edi,[eax+0x2]
c001bf30:	0f b6 c9             	movzx  ecx,cl
c001bf33:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bf36:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bf3a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf3e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bf42:	83 e2 3f             	and    edx,0x3f
c001bf45:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bf49:	89 f9                	mov    ecx,edi
c001bf4b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bf51:	8d 78 03             	lea    edi,[eax+0x3]
c001bf54:	0f b6 d1             	movzx  edx,cl
c001bf57:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf5a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bf5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf62:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bf66:	83 e1 3f             	and    ecx,0x3f
c001bf69:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bf6d:	89 f9                	mov    ecx,edi
c001bf6f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bf75:	8d 78 04             	lea    edi,[eax+0x4]
c001bf78:	0f b6 c9             	movzx  ecx,cl
c001bf7b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bf7e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bf82:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf86:	89 fa                	mov    edx,edi
c001bf88:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bf8e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bf92:	83 e2 3f             	and    edx,0x3f
c001bf95:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bf99:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bfa0:	66 85 f6             	test   si,si
c001bfa3:	74 65                	je     c001c00a <IDE::open(int, int, void*)+0x34a>
c001bfa5:	89 f9                	mov    ecx,edi
c001bfa7:	83 c0 05             	add    eax,0x5
c001bfaa:	0f b6 d1             	movzx  edx,cl
c001bfad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bfb0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bfb4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bfb8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bfbe:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bfc2:	83 e0 3f             	and    eax,0x3f
c001bfc5:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bfc9:	eb 3f                	jmp    c001c00a <IDE::open(int, int, void*)+0x34a>
c001bfcb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bfd2:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bfd8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bfdf:	05 06 02 00 00       	add    eax,0x206
c001bfe4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfeb:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bff2:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bff9:	05 06 02 00 00       	add    eax,0x206
c001bffe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c005:	e9 bd fe ff ff       	jmp    c001bec7 <IDE::open(int, int, void*)+0x207>
c001c00a:	50                   	push   eax
c001c00b:	50                   	push   eax
c001c00c:	6a 00                	push   0x0
c001c00e:	53                   	push   ebx
c001c00f:	e8 2e fa ff ff       	call   c001ba42 <IDE::prepareInterrupt(unsigned char)>
c001c014:	5a                   	pop    edx
c001c015:	59                   	pop    ecx
c001c016:	6a 01                	push   0x1
c001c018:	53                   	push   ebx
c001c019:	e8 24 fa ff ff       	call   c001ba42 <IDE::prepareInterrupt(unsigned char)>
c001c01e:	83 c4 0c             	add    esp,0xc
c001c021:	6a 00                	push   0x0
c001c023:	6a 00                	push   0x0
c001c025:	53                   	push   ebx
c001c026:	e8 4b fc ff ff       	call   c001bc76 <IDE::enableIRQs(unsigned char, bool)>
c001c02b:	83 c4 0c             	add    esp,0xc
c001c02e:	6a 00                	push   0x0
c001c030:	6a 01                	push   0x1
c001c032:	53                   	push   ebx
c001c033:	e8 3e fc ff ff       	call   c001bc76 <IDE::enableIRQs(unsigned char, bool)>
c001c038:	83 c4 10             	add    esp,0x10
c001c03b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c042:	74 34                	je     c001c078 <IDE::open(int, int, void*)+0x3b8>
c001c044:	83 ec 0c             	sub    esp,0xc
c001c047:	53                   	push   ebx
c001c048:	6a 01                	push   0x1
c001c04a:	68 3e bc 01 c0       	push   0xc001bc3e
c001c04f:	6a 0e                	push   0xe
c001c051:	53                   	push   ebx
c001c052:	e8 81 06 ff ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c057:	83 c4 14             	add    esp,0x14
c001c05a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c060:	53                   	push   ebx
c001c061:	6a 01                	push   0x1
c001c063:	68 5a bc 01 c0       	push   0xc001bc5a
c001c068:	6a 0f                	push   0xf
c001c06a:	53                   	push   ebx
c001c06b:	e8 68 06 ff ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c070:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c076:	eb 38                	jmp    c001c0b0 <IDE::open(int, int, void*)+0x3f0>
c001c078:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	53                   	push   ebx
c001c086:	6a 00                	push   0x0
c001c088:	68 3e bc 01 c0       	push   0xc001bc3e
c001c08d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c093:	53                   	push   ebx
c001c094:	e8 3f 06 ff ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c099:	83 c4 14             	add    esp,0x14
c001c09c:	53                   	push   ebx
c001c09d:	6a 00                	push   0x0
c001c09f:	68 5a bc 01 c0       	push   0xc001bc5a
c001c0a4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c0aa:	53                   	push   ebx
c001c0ab:	e8 28 06 ff ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0b2:	83 c4 20             	add    esp,0x20
c001c0b5:	83 ec 0c             	sub    esp,0xc
c001c0b8:	53                   	push   ebx
c001c0b9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c0bc:	83 c4 0c             	add    esp,0xc
c001c0bf:	6a 07                	push   0x7
c001c0c1:	6a 00                	push   0x0
c001c0c3:	53                   	push   ebx
c001c0c4:	e8 5f fa ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c0c9:	83 c4 0c             	add    esp,0xc
c001c0cc:	6a 07                	push   0x7
c001c0ce:	6a 01                	push   0x1
c001c0d0:	53                   	push   ebx
c001c0d1:	e8 52 fa ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c0d6:	83 c4 0c             	add    esp,0xc
c001c0d9:	6a 01                	push   0x1
c001c0db:	6a 00                	push   0x0
c001c0dd:	53                   	push   ebx
c001c0de:	e8 93 fb ff ff       	call   c001bc76 <IDE::enableIRQs(unsigned char, bool)>
c001c0e3:	83 c4 0c             	add    esp,0xc
c001c0e6:	6a 01                	push   0x1
c001c0e8:	6a 01                	push   0x1
c001c0ea:	53                   	push   ebx
c001c0eb:	e8 86 fb ff ff       	call   c001bc76 <IDE::enableIRQs(unsigned char, bool)>
c001c0f0:	83 c4 2c             	add    esp,0x2c
c001c0f3:	31 c0                	xor    eax,eax
c001c0f5:	5b                   	pop    ebx
c001c0f6:	5e                   	pop    esi
c001c0f7:	5f                   	pop    edi
c001c0f8:	5d                   	pop    ebp
c001c0f9:	c3                   	ret    

c001c0fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c0fa:	55                   	push   ebp
c001c0fb:	57                   	push   edi
c001c0fc:	56                   	push   esi
c001c0fd:	53                   	push   ebx
c001c0fe:	83 ec 1c             	sub    esp,0x1c
c001c101:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c105:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c109:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c10d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c111:	8d 42 f8             	lea    eax,[edx-0x8]
c001c114:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c118:	3c 03                	cmp    al,0x3
c001c11a:	77 5a                	ja     c001c176 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c11c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c120:	0f b6 db             	movzx  ebx,bl
c001c123:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c127:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c12a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c12f:	0c 80                	or     al,0x80
c001c131:	50                   	push   eax
c001c132:	6a 0c                	push   0xc
c001c134:	53                   	push   ebx
c001c135:	56                   	push   esi
c001c136:	e8 2d f9 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c13b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c13f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c144:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c148:	0f b6 d2             	movzx  edx,dl
c001c14b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c14f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c151:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c156:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c15a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c15e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c166:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c16a:	83 c4 2c             	add    esp,0x2c
c001c16d:	5b                   	pop    ebx
c001c16e:	5e                   	pop    esi
c001c16f:	5f                   	pop    edi
c001c170:	5d                   	pop    ebp
c001c171:	e9 f2 f8 ff ff       	jmp    c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c176:	0f b6 c2             	movzx  eax,dl
c001c179:	83 f8 07             	cmp    eax,0x7
c001c17c:	77 12                	ja     c001c190 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c17e:	0f b6 db             	movzx  ebx,bl
c001c181:	0f b6 c2             	movzx  eax,dl
c001c184:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c18c:	01 c2                	add    edx,eax
c001c18e:	eb 2f                	jmp    c001c1bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c190:	83 f8 0d             	cmp    eax,0xd
c001c193:	77 13                	ja     c001c1a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c195:	0f b6 db             	movzx  ebx,bl
c001c198:	0f b6 d2             	movzx  edx,dl
c001c19b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c1a2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c1a6:	eb 17                	jmp    c001c1bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c1a8:	83 f8 15             	cmp    eax,0x15
c001c1ab:	77 14                	ja     c001c1c1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c1ad:	0f b6 db             	movzx  ebx,bl
c001c1b0:	0f b6 d2             	movzx  edx,dl
c001c1b3:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c1bb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c1bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c1c1:	83 c4 1c             	add    esp,0x1c
c001c1c4:	5b                   	pop    ebx
c001c1c5:	5e                   	pop    esi
c001c1c6:	5f                   	pop    edi
c001c1c7:	5d                   	pop    ebp
c001c1c8:	c3                   	ret    
c001c1c9:	90                   	nop

c001c1ca <IDE::detect()>:
c001c1ca:	55                   	push   ebp
c001c1cb:	57                   	push   edi
c001c1cc:	56                   	push   esi
c001c1cd:	53                   	push   ebx
c001c1ce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c1d4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c1db:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c1e2:	0f 85 9e 02 00 00    	jne    c001c486 <IDE::detect()+0x2bc>
c001c1e8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c1ef:	31 f6                	xor    esi,esi
c001c1f1:	31 ff                	xor    edi,edi
c001c1f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c1fb:	89 f8                	mov    eax,edi
c001c1fd:	c1 e0 06             	shl    eax,0x6
c001c200:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c208:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c20c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c214:	c1 e0 04             	shl    eax,0x4
c001c217:	83 c8 a0             	or     eax,0xffffffa0
c001c21a:	0f b6 c0             	movzx  eax,al
c001c21d:	50                   	push   eax
c001c21e:	6a 06                	push   0x6
c001c220:	56                   	push   esi
c001c221:	53                   	push   ebx
c001c222:	e8 41 f8 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c227:	83 c4 0c             	add    esp,0xc
c001c22a:	6a 0c                	push   0xc
c001c22c:	56                   	push   esi
c001c22d:	53                   	push   ebx
c001c22e:	e8 f5 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c233:	83 c4 0c             	add    esp,0xc
c001c236:	6a 0c                	push   0xc
c001c238:	56                   	push   esi
c001c239:	53                   	push   ebx
c001c23a:	e8 e9 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c23f:	83 c4 0c             	add    esp,0xc
c001c242:	6a 0c                	push   0xc
c001c244:	56                   	push   esi
c001c245:	53                   	push   ebx
c001c246:	e8 dd f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c24b:	83 c4 0c             	add    esp,0xc
c001c24e:	6a 0c                	push   0xc
c001c250:	56                   	push   esi
c001c251:	53                   	push   ebx
c001c252:	e8 d1 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c257:	68 ec 00 00 00       	push   0xec
c001c25c:	6a 07                	push   0x7
c001c25e:	56                   	push   esi
c001c25f:	53                   	push   ebx
c001c260:	e8 03 f8 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c265:	83 c4 1c             	add    esp,0x1c
c001c268:	6a 0c                	push   0xc
c001c26a:	56                   	push   esi
c001c26b:	53                   	push   ebx
c001c26c:	e8 b7 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c271:	83 c4 0c             	add    esp,0xc
c001c274:	6a 0c                	push   0xc
c001c276:	56                   	push   esi
c001c277:	53                   	push   ebx
c001c278:	e8 ab f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c27d:	83 c4 0c             	add    esp,0xc
c001c280:	6a 0c                	push   0xc
c001c282:	56                   	push   esi
c001c283:	53                   	push   ebx
c001c284:	e8 9f f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c289:	83 c4 0c             	add    esp,0xc
c001c28c:	6a 0c                	push   0xc
c001c28e:	56                   	push   esi
c001c28f:	53                   	push   ebx
c001c290:	e8 93 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c295:	83 c4 0c             	add    esp,0xc
c001c298:	6a 0c                	push   0xc
c001c29a:	56                   	push   esi
c001c29b:	53                   	push   ebx
c001c29c:	e8 87 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	84 c0                	test   al,al
c001c2a6:	0f 84 61 01 00 00    	je     c001c40d <IDE::detect()+0x243>
c001c2ac:	31 ed                	xor    ebp,ebp
c001c2ae:	50                   	push   eax
c001c2af:	6a 0c                	push   0xc
c001c2b1:	56                   	push   esi
c001c2b2:	53                   	push   ebx
c001c2b3:	e8 70 f8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c2b8:	83 c4 10             	add    esp,0x10
c001c2bb:	a8 01                	test   al,0x1
c001c2bd:	0f 85 6b 01 00 00    	jne    c001c42e <IDE::detect()+0x264>
c001c2c3:	a8 80                	test   al,0x80
c001c2c5:	75 04                	jne    c001c2cb <IDE::detect()+0x101>
c001c2c7:	a8 08                	test   al,0x8
c001c2c9:	75 23                	jne    c001c2ee <IDE::detect()+0x124>
c001c2cb:	45                   	inc    ebp
c001c2cc:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c2d2:	7e da                	jle    c001c2ae <IDE::detect()+0xe4>
c001c2d4:	83 ec 0c             	sub    esp,0xc
c001c2d7:	6a 32                	push   0x32
c001c2d9:	e8 b6 9d ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001c2de:	83 c4 10             	add    esp,0x10
c001c2e1:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c2e7:	75 c5                	jne    c001c2ae <IDE::detect()+0xe4>
c001c2e9:	e9 40 01 00 00       	jmp    c001c42e <IDE::detect()+0x264>
c001c2ee:	31 c9                	xor    ecx,ecx
c001c2f0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c2f4:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c2f8:	83 ec 0c             	sub    esp,0xc
c001c2fb:	68 80 00 00 00       	push   0x80
c001c300:	55                   	push   ebp
c001c301:	6a 00                	push   0x0
c001c303:	56                   	push   esi
c001c304:	53                   	push   ebx
c001c305:	e8 f0 fd ff ff       	call   c001c0fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c30a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c30f:	89 f8                	mov    eax,edi
c001c311:	c1 e0 06             	shl    eax,0x6
c001c314:	01 d8                	add    eax,ebx
c001c316:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c31d:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c324:	89 d1                	mov    ecx,edx
c001c326:	89 f2                	mov    edx,esi
c001c328:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c32e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c332:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c338:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c33c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c343:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c34b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c352:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c35a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c360:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c367:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c36d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c371:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c375:	83 c4 20             	add    esp,0x20
c001c378:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c37b:	83 c5 02             	add    ebp,0x2
c001c37e:	83 c0 02             	add    eax,0x2
c001c381:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c387:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c38a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c390:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c394:	75 e2                	jne    c001c378 <IDE::detect()+0x1ae>
c001c396:	89 f8                	mov    eax,edi
c001c398:	c1 e0 06             	shl    eax,0x6
c001c39b:	01 d8                	add    eax,ebx
c001c39d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c3a4:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c3ab:	c1 ea 09             	shr    edx,0x9
c001c3ae:	83 e2 01             	and    edx,0x1
c001c3b1:	80 e1 01             	and    cl,0x1
c001c3b4:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c3ba:	75 22                	jne    c001c3de <IDE::detect()+0x214>
c001c3bc:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c3c3:	74 47                	je     c001c40c <IDE::detect()+0x242>
c001c3c5:	83 ec 0c             	sub    esp,0xc
c001c3c8:	68 7c 01 00 00       	push   0x17c
c001c3cd:	e8 01 b7 fe ff       	call   c0007ad3 <malloc>
c001c3d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3d5:	89 c5                	mov    ebp,eax
c001c3d7:	e8 16 05 00 00       	call   c001c8f2 <ATA::ATA()>
c001c3dc:	eb 17                	jmp    c001c3f5 <IDE::detect()+0x22b>
c001c3de:	83 ec 0c             	sub    esp,0xc
c001c3e1:	68 84 01 00 00       	push   0x184
c001c3e6:	e8 e8 b6 fe ff       	call   c0007ad3 <malloc>
c001c3eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3ee:	89 c5                	mov    ebp,eax
c001c3f0:	e8 6f 0e 00 00       	call   c001d264 <ATAPI::ATAPI()>
c001c3f5:	5a                   	pop    edx
c001c3f6:	59                   	pop    ecx
c001c3f7:	55                   	push   ebp
c001c3f8:	53                   	push   ebx
c001c3f9:	e8 2e 03 ff ff       	call   c000c72c <Device::addChild(Device*)>
c001c3fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c401:	53                   	push   ebx
c001c402:	57                   	push   edi
c001c403:	6a 00                	push   0x0
c001c405:	55                   	push   ebp
c001c406:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c409:	83 c4 20             	add    esp,0x20
c001c40c:	47                   	inc    edi
c001c40d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c412:	74 0d                	je     c001c421 <IDE::detect()+0x257>
c001c414:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c41c:	e9 da fd ff ff       	jmp    c001c1fb <IDE::detect()+0x31>
c001c421:	4e                   	dec    esi
c001c422:	74 62                	je     c001c486 <IDE::detect()+0x2bc>
c001c424:	be 01 00 00 00       	mov    esi,0x1
c001c429:	e9 c5 fd ff ff       	jmp    c001c1f3 <IDE::detect()+0x29>
c001c42e:	50                   	push   eax
c001c42f:	6a 04                	push   0x4
c001c431:	56                   	push   esi
c001c432:	53                   	push   ebx
c001c433:	e8 f0 f6 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c438:	83 c4 0c             	add    esp,0xc
c001c43b:	6a 05                	push   0x5
c001c43d:	56                   	push   esi
c001c43e:	53                   	push   ebx
c001c43f:	89 c5                	mov    ebp,eax
c001c441:	e8 e2 f6 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c446:	89 e9                	mov    ecx,ebp
c001c448:	83 c4 10             	add    esp,0x10
c001c44b:	0f b6 e9             	movzx  ebp,cl
c001c44e:	83 fd 14             	cmp    ebp,0x14
c001c451:	74 2d                	je     c001c480 <IDE::detect()+0x2b6>
c001c453:	83 fd 69             	cmp    ebp,0x69
c001c456:	75 b5                	jne    c001c40d <IDE::detect()+0x243>
c001c458:	3c 96                	cmp    al,0x96
c001c45a:	75 b1                	jne    c001c40d <IDE::detect()+0x243>
c001c45c:	68 a1 00 00 00       	push   0xa1
c001c461:	6a 07                	push   0x7
c001c463:	56                   	push   esi
c001c464:	53                   	push   ebx
c001c465:	e8 fe f5 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c46a:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c471:	e8 1e 9c ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	b1 01                	mov    cl,0x1
c001c47b:	e9 70 fe ff ff       	jmp    c001c2f0 <IDE::detect()+0x126>
c001c480:	3c eb                	cmp    al,0xeb
c001c482:	75 cf                	jne    c001c453 <IDE::detect()+0x289>
c001c484:	eb d6                	jmp    c001c45c <IDE::detect()+0x292>
c001c486:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c48c:	5b                   	pop    ebx
c001c48d:	5e                   	pop    esi
c001c48e:	5f                   	pop    edi
c001c48f:	5d                   	pop    ebp
c001c490:	c3                   	ret    
c001c491:	90                   	nop

c001c492 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c492:	55                   	push   ebp
c001c493:	57                   	push   edi
c001c494:	56                   	push   esi
c001c495:	53                   	push   ebx
c001c496:	83 ec 1c             	sub    esp,0x1c
c001c499:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c49d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c4a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c4a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c4ad:	88 c3                	mov    bl,al
c001c4af:	25 ff 00 00 00       	and    eax,0xff
c001c4b4:	0f 84 88 00 00 00    	je     c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4ba:	83 ec 0c             	sub    esp,0xc
c001c4bd:	89 c7                	mov    edi,eax
c001c4bf:	68 ab 2e 02 c0       	push   0xc0022eab
c001c4c4:	e8 41 e4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	83 ff 01             	cmp    edi,0x1
c001c4cf:	74 6b                	je     c001c53c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c4d1:	83 ff 02             	cmp    edi,0x2
c001c4d4:	75 58                	jne    c001c52e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c4d6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c4db:	50                   	push   eax
c001c4dc:	6a 01                	push   0x1
c001c4de:	01 ff                	add    edi,edi
c001c4e0:	09 fe                	or     esi,edi
c001c4e2:	89 f0                	mov    eax,esi
c001c4e4:	0f b6 f0             	movzx  esi,al
c001c4e7:	c1 e6 06             	shl    esi,0x6
c001c4ea:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c4f2:	50                   	push   eax
c001c4f3:	55                   	push   ebp
c001c4f4:	e8 2f f6 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	a8 01                	test   al,0x1
c001c4fe:	74 02                	je     c001c502 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c500:	b3 07                	mov    bl,0x7
c001c502:	a8 02                	test   al,0x2
c001c504:	74 02                	je     c001c508 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c506:	b3 03                	mov    bl,0x3
c001c508:	a8 04                	test   al,0x4
c001c50a:	74 02                	je     c001c50e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c50c:	b3 14                	mov    bl,0x14
c001c50e:	a8 08                	test   al,0x8
c001c510:	74 02                	je     c001c514 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c512:	b3 03                	mov    bl,0x3
c001c514:	a8 10                	test   al,0x10
c001c516:	74 02                	je     c001c51a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c518:	b3 15                	mov    bl,0x15
c001c51a:	a8 20                	test   al,0x20
c001c51c:	74 02                	je     c001c520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c51e:	b3 03                	mov    bl,0x3
c001c520:	a8 40                	test   al,0x40
c001c522:	74 02                	je     c001c526 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c524:	b3 16                	mov    bl,0x16
c001c526:	a8 80                	test   al,0x80
c001c528:	74 18                	je     c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c52a:	b3 0d                	mov    bl,0xd
c001c52c:	eb 14                	jmp    c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c52e:	83 ff 03             	cmp    edi,0x3
c001c531:	74 0d                	je     c001c540 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c533:	83 ff 04             	cmp    edi,0x4
c001c536:	75 0a                	jne    c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c538:	b3 08                	mov    bl,0x8
c001c53a:	eb 06                	jmp    c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c53c:	b3 13                	mov    bl,0x13
c001c53e:	eb 02                	jmp    c001c542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c540:	b3 17                	mov    bl,0x17
c001c542:	83 c4 1c             	add    esp,0x1c
c001c545:	88 d8                	mov    al,bl
c001c547:	5b                   	pop    ebx
c001c548:	5e                   	pop    esi
c001c549:	5f                   	pop    edi
c001c54a:	5d                   	pop    ebp
c001c54b:	c3                   	ret    

c001c54c <IDE::polling(unsigned char, unsigned int)>:
c001c54c:	57                   	push   edi
c001c54d:	56                   	push   esi
c001c54e:	53                   	push   ebx
c001c54f:	bb 04 00 00 00       	mov    ebx,0x4
c001c554:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c558:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c55d:	52                   	push   edx
c001c55e:	6a 0c                	push   0xc
c001c560:	56                   	push   esi
c001c561:	57                   	push   edi
c001c562:	e8 c1 f5 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c567:	83 c4 10             	add    esp,0x10
c001c56a:	4b                   	dec    ebx
c001c56b:	75 f0                	jne    c001c55d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c56d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c572:	50                   	push   eax
c001c573:	6a 0c                	push   0xc
c001c575:	56                   	push   esi
c001c576:	57                   	push   edi
c001c577:	e8 ac f5 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	a8 01                	test   al,0x1
c001c581:	75 17                	jne    c001c59a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c583:	a8 20                	test   al,0x20
c001c585:	75 0f                	jne    c001c596 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c587:	4b                   	dec    ebx
c001c588:	74 10                	je     c001c59a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c58a:	a8 80                	test   al,0x80
c001c58c:	75 e4                	jne    c001c572 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c58e:	a8 08                	test   al,0x8
c001c590:	74 e0                	je     c001c572 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c592:	31 c0                	xor    eax,eax
c001c594:	eb 06                	jmp    c001c59c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c596:	b0 01                	mov    al,0x1
c001c598:	eb 02                	jmp    c001c59c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c59a:	b0 02                	mov    al,0x2
c001c59c:	5b                   	pop    ebx
c001c59d:	5e                   	pop    esi
c001c59e:	5f                   	pop    edi
c001c59f:	c3                   	ret    

c001c5a0 <SATABus::close(int, int, void*)>:
c001c5a0:	31 c0                	xor    eax,eax
c001c5a2:	c3                   	ret    
c001c5a3:	90                   	nop

c001c5a4 <SATABus::detect()>:
c001c5a4:	c3                   	ret    
c001c5a5:	90                   	nop

c001c5a6 <SATABus::SATABus()>:
c001c5a6:	83 ec 0c             	sub    esp,0xc
c001c5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ad:	83 ec 08             	sub    esp,0x8
c001c5b0:	68 e4 2e 02 c0       	push   0xc0022ee4
c001c5b5:	50                   	push   eax
c001c5b6:	e8 b5 04 ff ff       	call   c000ca70 <HardDiskController::HardDiskController(char const*)>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	ba 10 2f 02 c0       	mov    edx,0xc0022f10
c001c5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c7:	89 10                	mov    DWORD PTR [eax],edx
c001c5c9:	83 ec 0c             	sub    esp,0xc
c001c5cc:	6a 50                	push   0x50
c001c5ce:	e8 de b8 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	89 c2                	mov    edx,eax
c001c5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	6a 50                	push   0x50
c001c5e7:	e8 09 d0 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c5ec:	83 c4 10             	add    esp,0x10
c001c5ef:	89 c2                	mov    edx,eax
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c5fb:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c600:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c604:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c60a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c60e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c614:	83 ec 0c             	sub    esp,0xc
c001c617:	6a 03                	push   0x3
c001c619:	6a 50                	push   0x50
c001c61b:	51                   	push   ecx
c001c61c:	52                   	push   edx
c001c61d:	50                   	push   eax
c001c61e:	e8 e5 d8 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c623:	83 c4 20             	add    esp,0x20
c001c626:	90                   	nop
c001c627:	83 c4 0c             	add    esp,0xc
c001c62a:	c3                   	ret    
c001c62b:	90                   	nop

c001c62c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c62c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c630:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c633:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c636:	09 c2                	or     edx,eax
c001c638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c63c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c642:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c644:	31 c0                	xor    eax,eax
c001c646:	c1 e9 08             	shr    ecx,0x8
c001c649:	83 e1 0f             	and    ecx,0xf
c001c64c:	39 c8                	cmp    eax,ecx
c001c64e:	74 0a                	je     c001c65a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c650:	f6 c2 01             	test   dl,0x1
c001c653:	74 08                	je     c001c65d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c655:	d1 ea                	shr    edx,1
c001c657:	40                   	inc    eax
c001c658:	eb f2                	jmp    c001c64c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c65a:	83 c8 ff             	or     eax,0xffffffff
c001c65d:	c3                   	ret    

c001c65e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c65e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c662:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c665:	89 c2                	mov    edx,eax
c001c667:	c1 ea 08             	shr    edx,0x8
c001c66a:	83 e2 0f             	and    edx,0xf
c001c66d:	4a                   	dec    edx
c001c66e:	75 32                	jne    c001c6a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c670:	83 e0 0f             	and    eax,0xf
c001c673:	83 f8 03             	cmp    eax,0x3
c001c676:	75 2a                	jne    c001c6a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c678:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c67b:	b8 02 00 00 00       	mov    eax,0x2
c001c680:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c686:	74 1c                	je     c001c6a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c688:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c68e:	b8 04 00 00 00       	mov    eax,0x4
c001c693:	74 0f                	je     c001c6a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c695:	31 c0                	xor    eax,eax
c001c697:	83 fa 03             	cmp    edx,0x3
c001c69a:	0f 94 c0             	sete   al
c001c69d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c6a1:	c3                   	ret    
c001c6a2:	31 c0                	xor    eax,eax
c001c6a4:	c3                   	ret    
c001c6a5:	90                   	nop

c001c6a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c6a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6ad:	0f ba e2 0f          	bt     edx,0xf
c001c6b1:	72 f7                	jb     c001c6aa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c6b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6b6:	83 ca 10             	or     edx,0x10
c001c6b9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c6bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6bf:	83 ca 01             	or     edx,0x1
c001c6c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c6c5:	c3                   	ret    

c001c6c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c6c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6cd:	83 e2 fe             	and    edx,0xfffffffe
c001c6d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c6d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6d6:	83 e2 ef             	and    edx,0xffffffef
c001c6d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c6dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6df:	0f ba e2 0e          	bt     edx,0xe
c001c6e3:	72 f7                	jb     c001c6dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c6e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6e8:	0f ba e2 0f          	bt     edx,0xf
c001c6ec:	72 ee                	jb     c001c6dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c6ee:	c3                   	ret    
c001c6ef:	90                   	nop

c001c6f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c6f0:	55                   	push   ebp
c001c6f1:	57                   	push   edi
c001c6f2:	56                   	push   esi
c001c6f3:	53                   	push   ebx
c001c6f4:	83 ec 1c             	sub    esp,0x1c
c001c6f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c6fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c6ff:	53                   	push   ebx
c001c700:	57                   	push   edi
c001c701:	e8 c0 ff ff ff       	call   c001c6c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c706:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c713:	c1 e5 0a             	shl    ebp,0xa
c001c716:	01 e8                	add    eax,ebp
c001c718:	89 03                	mov    DWORD PTR [ebx],eax
c001c71a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c71c:	68 00 04 00 00       	push   0x400
c001c721:	6a 00                	push   0x0
c001c723:	50                   	push   eax
c001c724:	e8 c7 3d fe ff       	call   c00004f0 <memset>
c001c729:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c72f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c733:	83 c4 1c             	add    esp,0x1c
c001c736:	01 e8                	add    eax,ebp
c001c738:	89 03                	mov    DWORD PTR [ebx],eax
c001c73a:	c1 e6 08             	shl    esi,0x8
c001c73d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c744:	81 c6 00 80 00 00    	add    esi,0x8000
c001c74a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c750:	01 f0                	add    eax,esi
c001c752:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c755:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c758:	68 00 01 00 00       	push   0x100
c001c75d:	6a 00                	push   0x0
c001c75f:	50                   	push   eax
c001c760:	e8 8b 3d fe ff       	call   c00004f0 <memset>
c001c765:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c76b:	31 d2                	xor    edx,edx
c001c76d:	01 f0                	add    eax,esi
c001c76f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c772:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c779:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c77f:	01 ee                	add    esi,ebp
c001c781:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c785:	83 c4 10             	add    esp,0x10
c001c788:	c1 e5 0d             	shl    ebp,0xd
c001c78b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c791:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c797:	83 c6 20             	add    esi,0x20
c001c79a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c79e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c7a4:	01 e8                	add    eax,ebp
c001c7a6:	01 d0                	add    eax,edx
c001c7a8:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c7ab:	52                   	push   edx
c001c7ac:	68 00 01 00 00       	push   0x100
c001c7b1:	6a 00                	push   0x0
c001c7b3:	50                   	push   eax
c001c7b4:	e8 37 3d fe ff       	call   c00004f0 <memset>
c001c7b9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c7bf:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c7c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7ca:	83 c4 10             	add    esp,0x10
c001c7cd:	01 e8                	add    eax,ebp
c001c7cf:	01 d0                	add    eax,edx
c001c7d1:	81 c2 00 01 00 00    	add    edx,0x100
c001c7d7:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c7da:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c7e0:	75 af                	jne    c001c791 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c7e2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c7e9:	50                   	push   eax
c001c7ea:	50                   	push   eax
c001c7eb:	53                   	push   ebx
c001c7ec:	57                   	push   edi
c001c7ed:	e8 b4 fe ff ff       	call   c001c6a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c7f2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c7f9:	83 c4 2c             	add    esp,0x2c
c001c7fc:	5b                   	pop    ebx
c001c7fd:	5e                   	pop    esi
c001c7fe:	5f                   	pop    edi
c001c7ff:	5d                   	pop    ebp
c001c800:	c3                   	ret    
c001c801:	90                   	nop

c001c802 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c802:	55                   	push   ebp
c001c803:	57                   	push   edi
c001c804:	56                   	push   esi
c001c805:	53                   	push   ebx
c001c806:	31 db                	xor    ebx,ebx
c001c808:	83 ec 0c             	sub    esp,0xc
c001c80b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c80f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c813:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c816:	f7 c7 01 00 00 00    	test   edi,0x1
c001c81c:	74 7a                	je     c001c898 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c81e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c822:	89 d8                	mov    eax,ebx
c001c824:	c1 e0 07             	shl    eax,0x7
c001c827:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c82e:	55                   	push   ebp
c001c82f:	56                   	push   esi
c001c830:	e8 29 fe ff ff       	call   c001c65e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c835:	5a                   	pop    edx
c001c836:	59                   	pop    ecx
c001c837:	83 f8 01             	cmp    eax,0x1
c001c83a:	75 21                	jne    c001c85d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c83c:	50                   	push   eax
c001c83d:	53                   	push   ebx
c001c83e:	55                   	push   ebp
c001c83f:	56                   	push   esi
c001c840:	e8 ab fe ff ff       	call   c001c6f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c845:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c84c:	e8 82 b2 fe ff       	call   c0007ad3 <malloc>
c001c851:	89 04 24             	mov    DWORD PTR [esp],eax
c001c854:	89 c5                	mov    ebp,eax
c001c856:	e8 c1 10 00 00       	call   c001d91c <SATA::SATA()>
c001c85b:	eb 24                	jmp    c001c881 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c85d:	83 f8 04             	cmp    eax,0x4
c001c860:	75 36                	jne    c001c898 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c862:	51                   	push   ecx
c001c863:	53                   	push   ebx
c001c864:	55                   	push   ebp
c001c865:	56                   	push   esi
c001c866:	e8 85 fe ff ff       	call   c001c6f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c86b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c872:	e8 5c b2 fe ff       	call   c0007ad3 <malloc>
c001c877:	89 04 24             	mov    DWORD PTR [esp],eax
c001c87a:	89 c5                	mov    ebp,eax
c001c87c:	e8 f5 17 00 00       	call   c001e076 <SATAPI::SATAPI()>
c001c881:	58                   	pop    eax
c001c882:	5a                   	pop    edx
c001c883:	55                   	push   ebp
c001c884:	56                   	push   esi
c001c885:	e8 a2 fe fe ff       	call   c000c72c <Device::addChild(Device*)>
c001c88a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c88d:	56                   	push   esi
c001c88e:	6a 00                	push   0x0
c001c890:	53                   	push   ebx
c001c891:	55                   	push   ebp
c001c892:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c895:	83 c4 20             	add    esp,0x20
c001c898:	d1 ef                	shr    edi,1
c001c89a:	43                   	inc    ebx
c001c89b:	83 fb 20             	cmp    ebx,0x20
c001c89e:	0f 85 72 ff ff ff    	jne    c001c816 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c8a4:	83 c4 0c             	add    esp,0xc
c001c8a7:	5b                   	pop    ebx
c001c8a8:	5e                   	pop    esi
c001c8a9:	5f                   	pop    edi
c001c8aa:	5d                   	pop    ebp
c001c8ab:	c3                   	ret    

c001c8ac <SATABus::open(int, int, void*)>:
c001c8ac:	83 ec 14             	sub    esp,0x14
c001c8af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8b3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c8b9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c8bf:	52                   	push   edx
c001c8c0:	50                   	push   eax
c001c8c1:	e8 3c ff ff ff       	call   c001c802 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c8c6:	31 c0                	xor    eax,eax
c001c8c8:	83 c4 1c             	add    esp,0x1c
c001c8cb:	c3                   	ret    

c001c8cc <ATA::close(int, int, void*)>:
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c8d9:	85 c0                	test   eax,eax
c001c8db:	74 0c                	je     c001c8e9 <ATA::close(int, int, void*)+0x1d>
c001c8dd:	8b 10                	mov    edx,DWORD PTR [eax]
c001c8df:	83 ec 0c             	sub    esp,0xc
c001c8e2:	50                   	push   eax
c001c8e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	31 c0                	xor    eax,eax
c001c8eb:	83 c4 0c             	add    esp,0xc
c001c8ee:	c3                   	ret    
c001c8ef:	90                   	nop

c001c8f0 <ATA::powerSaving(PowerSavingLevel)>:
c001c8f0:	c3                   	ret    
c001c8f1:	90                   	nop

c001c8f2 <ATA::ATA()>:
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f9:	83 ec 04             	sub    esp,0x4
c001c8fc:	68 00 02 00 00       	push   0x200
c001c901:	68 dd 2f 02 c0       	push   0xc0022fdd
c001c906:	50                   	push   eax
c001c907:	e8 ee 01 ff ff       	call   c000cafa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c90c:	83 c4 10             	add    esp,0x10
c001c90f:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001c914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c918:	89 10                	mov    DWORD PTR [eax],edx
c001c91a:	90                   	nop
c001c91b:	83 c4 0c             	add    esp,0xc
c001c91e:	c3                   	ret    
c001c91f:	90                   	nop

c001c920 <ATA::flush(bool)>:
c001c920:	53                   	push   ebx
c001c921:	83 ec 08             	sub    esp,0x8
c001c924:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c929:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c92d:	83 f8 01             	cmp    eax,0x1
c001c930:	19 c0                	sbb    eax,eax
c001c932:	83 e0 fd             	and    eax,0xfffffffd
c001c935:	05 ea 00 00 00       	add    eax,0xea
c001c93a:	50                   	push   eax
c001c93b:	6a 07                	push   0x7
c001c93d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c944:	50                   	push   eax
c001c945:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c94b:	e8 18 f1 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c950:	83 c4 0c             	add    esp,0xc
c001c953:	6a 00                	push   0x0
c001c955:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c95c:	50                   	push   eax
c001c95d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c963:	e8 e4 fb ff ff       	call   c001c54c <IDE::polling(unsigned char, unsigned int)>
c001c968:	83 c4 18             	add    esp,0x18
c001c96b:	5b                   	pop    ebx
c001c96c:	c3                   	ret    
c001c96d:	90                   	nop

c001c96e <ATA::readyForCommand()>:
c001c96e:	56                   	push   esi
c001c96f:	53                   	push   ebx
c001c970:	53                   	push   ebx
c001c971:	31 db                	xor    ebx,ebx
c001c973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c977:	51                   	push   ecx
c001c978:	6a 0c                	push   0xc
c001c97a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c981:	50                   	push   eax
c001c982:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c988:	e8 9b f1 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	a8 88                	test   al,0x88
c001c992:	74 1f                	je     c001c9b3 <ATA::readyForCommand()+0x45>
c001c994:	43                   	inc    ebx
c001c995:	83 fb 63             	cmp    ebx,0x63
c001c998:	7e dd                	jle    c001c977 <ATA::readyForCommand()+0x9>
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	6a 0a                	push   0xa
c001c99f:	e8 f0 96 ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001c9a4:	83 c4 10             	add    esp,0x10
c001c9a7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c9ad:	75 c8                	jne    c001c977 <ATA::readyForCommand()+0x9>
c001c9af:	31 c0                	xor    eax,eax
c001c9b1:	eb 02                	jmp    c001c9b5 <ATA::readyForCommand()+0x47>
c001c9b3:	b0 01                	mov    al,0x1
c001c9b5:	5a                   	pop    edx
c001c9b6:	5b                   	pop    ebx
c001c9b7:	5e                   	pop    esi
c001c9b8:	c3                   	ret    
c001c9b9:	90                   	nop

c001c9ba <ATA::access(unsigned long long, int, void*, bool)>:
c001c9ba:	55                   	push   ebp
c001c9bb:	57                   	push   edi
c001c9bc:	56                   	push   esi
c001c9bd:	53                   	push   ebx
c001c9be:	83 ec 2c             	sub    esp,0x2c
c001c9c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c9c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c9c9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c9cd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c9d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9d5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c9d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c9dd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c9e7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c9ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c9f1:	c1 e0 06             	shl    eax,0x6
c001c9f4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c9fc:	74 5b                	je     c001ca59 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c9fe:	89 fa                	mov    edx,edi
c001ca00:	89 f0                	mov    eax,esi
c001ca02:	c1 ea 1c             	shr    edx,0x1c
c001ca05:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001ca09:	89 d1                	mov    ecx,edx
c001ca0b:	09 c1                	or     ecx,eax
c001ca0d:	74 25                	je     c001ca34 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ca0f:	31 ed                	xor    ebp,ebp
c001ca11:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ca18:	89 fa                	mov    edx,edi
c001ca1a:	89 f0                	mov    eax,esi
c001ca1c:	0f ad d0             	shrd   eax,edx,cl
c001ca1f:	d3 ea                	shr    edx,cl
c001ca21:	f6 c1 20             	test   cl,0x20
c001ca24:	74 02                	je     c001ca28 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ca26:	89 d0                	mov    eax,edx
c001ca28:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ca2c:	45                   	inc    ebp
c001ca2d:	83 fd 06             	cmp    ebp,0x6
c001ca30:	75 df                	jne    c001ca11 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ca32:	eb 71                	jmp    c001caa5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001ca34:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ca39:	89 f0                	mov    eax,esi
c001ca3b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ca42:	0f ac f8 10          	shrd   eax,edi,0x10
c001ca46:	bf 01 00 00 00       	mov    edi,0x1
c001ca4b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ca4f:	c1 ee 18             	shr    esi,0x18
c001ca52:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ca57:	eb 53                	jmp    c001caac <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ca59:	6a 00                	push   0x0
c001ca5b:	6a 3f                	push   0x3f
c001ca5d:	57                   	push   edi
c001ca5e:	56                   	push   esi
c001ca5f:	e8 cc 2a 00 00       	call   c001f530 <__umoddi3>
c001ca64:	83 c4 10             	add    esp,0x10
c001ca67:	40                   	inc    eax
c001ca68:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ca6c:	6a 00                	push   0x0
c001ca6e:	68 f0 03 00 00       	push   0x3f0
c001ca73:	57                   	push   edi
c001ca74:	56                   	push   esi
c001ca75:	e8 b6 29 00 00       	call   c001f430 <__udivdi3>
c001ca7a:	83 c4 10             	add    esp,0x10
c001ca7d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ca82:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ca89:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ca8e:	6a 00                	push   0x0
c001ca90:	6a 3f                	push   0x3f
c001ca92:	57                   	push   edi
c001ca93:	31 ff                	xor    edi,edi
c001ca95:	56                   	push   esi
c001ca96:	e8 95 29 00 00       	call   c001f430 <__udivdi3>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 e0 0f             	and    eax,0xf
c001caa1:	89 c6                	mov    esi,eax
c001caa3:	eb 07                	jmp    c001caac <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001caa5:	31 f6                	xor    esi,esi
c001caa7:	bf 02 00 00 00       	mov    edi,0x2
c001caac:	50                   	push   eax
c001caad:	6a 00                	push   0x0
c001caaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab6:	50                   	push   eax
c001cab7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cabb:	e8 b6 f1 ff ff       	call   c001bc76 <IDE::enableIRQs(unsigned char, bool)>
c001cac0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac3:	e8 a6 fe ff ff       	call   c001c96e <ATA::readyForCommand()>
c001cac8:	83 c4 10             	add    esp,0x10
c001cacb:	84 c0                	test   al,al
c001cacd:	75 0a                	jne    c001cad9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cacf:	be 01 00 00 00       	mov    esi,0x1
c001cad4:	e9 9b 02 00 00       	jmp    c001cd74 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cad9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cadf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cae5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001caec:	c1 e0 04             	shl    eax,0x4
c001caef:	09 c6                	or     esi,eax
c001caf1:	f7 c7 03 00 00 00    	test   edi,0x3
c001caf7:	75 05                	jne    c001cafe <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001caf9:	83 ce a0             	or     esi,0xffffffa0
c001cafc:	eb 03                	jmp    c001cb01 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cafe:	83 ce e0             	or     esi,0xffffffe0
c001cb01:	89 f0                	mov    eax,esi
c001cb03:	0f b6 f0             	movzx  esi,al
c001cb06:	56                   	push   esi
c001cb07:	6a 06                	push   0x6
c001cb09:	51                   	push   ecx
c001cb0a:	52                   	push   edx
c001cb0b:	e8 58 ef ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	6a 00                	push   0x0
c001cb15:	6a 01                	push   0x1
c001cb17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb1e:	50                   	push   eax
c001cb1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb25:	e8 3e ef ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2a:	89 f8                	mov    eax,edi
c001cb2c:	83 c4 10             	add    esp,0x10
c001cb2f:	0f b6 f0             	movzx  esi,al
c001cb32:	83 fe 02             	cmp    esi,0x2
c001cb35:	75 6e                	jne    c001cba5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cb37:	6a 00                	push   0x0
c001cb39:	6a 08                	push   0x8
c001cb3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb42:	50                   	push   eax
c001cb43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb49:	e8 1a ef ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb4e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cb53:	50                   	push   eax
c001cb54:	6a 09                	push   0x9
c001cb56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb5d:	50                   	push   eax
c001cb5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb64:	e8 ff ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb69:	83 c4 20             	add    esp,0x20
c001cb6c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cb71:	50                   	push   eax
c001cb72:	6a 0a                	push   0xa
c001cb74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb7b:	50                   	push   eax
c001cb7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb82:	e8 e1 ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb87:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cb8c:	50                   	push   eax
c001cb8d:	6a 0b                	push   0xb
c001cb8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb96:	50                   	push   eax
c001cb97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb9d:	e8 c6 ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cba2:	83 c4 20             	add    esp,0x20
c001cba5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cbaa:	50                   	push   eax
c001cbab:	6a 02                	push   0x2
c001cbad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbb4:	50                   	push   eax
c001cbb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbbb:	e8 a8 ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbc0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cbc5:	50                   	push   eax
c001cbc6:	6a 03                	push   0x3
c001cbc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbcf:	50                   	push   eax
c001cbd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbd6:	e8 8d ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbdb:	83 c4 20             	add    esp,0x20
c001cbde:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cbe3:	50                   	push   eax
c001cbe4:	6a 04                	push   0x4
c001cbe6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbed:	50                   	push   eax
c001cbee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbf4:	e8 6f ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbfe:	50                   	push   eax
c001cbff:	6a 05                	push   0x5
c001cc01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc08:	50                   	push   eax
c001cc09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc0f:	e8 54 ee ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc14:	83 c4 20             	add    esp,0x20
c001cc17:	83 fe 02             	cmp    esi,0x2
c001cc1a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cc1f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cc24:	85 c9                	test   ecx,ecx
c001cc26:	74 07                	je     c001cc2f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cc28:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc2d:	75 47                	jne    c001cc76 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cc2f:	89 f8                	mov    eax,edi
c001cc31:	0f b6 f8             	movzx  edi,al
c001cc34:	31 c0                	xor    eax,eax
c001cc36:	83 ff 02             	cmp    edi,0x2
c001cc39:	0f 95 c0             	setne  al
c001cc3c:	89 c6                	mov    esi,eax
c001cc3e:	74 0c                	je     c001cc4c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cc40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc45:	b8 30 00 00 00       	mov    eax,0x30
c001cc4a:	75 2f                	jne    c001cc7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cc4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc50:	83 f2 01             	xor    edx,0x1
c001cc53:	85 c9                	test   ecx,ecx
c001cc55:	74 09                	je     c001cc60 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cc57:	84 d2                	test   dl,dl
c001cc59:	b8 24 00 00 00       	mov    eax,0x24
c001cc5e:	75 1b                	jne    c001cc7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cc60:	85 f6                	test   esi,esi
c001cc62:	0f 84 67 fe ff ff    	je     c001cacf <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cc68:	84 d2                	test   dl,dl
c001cc6a:	b8 20 00 00 00       	mov    eax,0x20
c001cc6f:	75 0a                	jne    c001cc7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cc71:	e9 59 fe ff ff       	jmp    c001cacf <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cc76:	b8 34 00 00 00       	mov    eax,0x34
c001cc7b:	50                   	push   eax
c001cc7c:	6a 07                	push   0x7
c001cc7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc85:	50                   	push   eax
c001cc86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc8c:	e8 d7 ed ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc91:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cc9d:	85 f6                	test   esi,esi
c001cc9f:	0f 84 b5 00 00 00    	je     c001cd5a <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cca5:	50                   	push   eax
c001cca6:	6a 01                	push   0x1
c001cca8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccaf:	50                   	push   eax
c001ccb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccb6:	e8 91 f8 ff ff       	call   c001c54c <IDE::polling(unsigned char, unsigned int)>
c001ccbb:	83 c4 10             	add    esp,0x10
c001ccbe:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ccc4:	0f b6 c0             	movzx  eax,al
c001ccc7:	85 c0                	test   eax,eax
c001ccc9:	74 1f                	je     c001ccea <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cccb:	50                   	push   eax
c001cccc:	89 c6                	mov    esi,eax
c001ccce:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ccd5:	0f b6 d2             	movzx  edx,dl
c001ccd8:	50                   	push   eax
c001ccd9:	52                   	push   edx
c001ccda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cce0:	e8 ad f7 ff ff       	call   c001c492 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cce5:	e9 87 00 00 00       	jmp    c001cd71 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001ccea:	85 ed                	test   ebp,ebp
c001ccec:	74 3b                	je     c001cd29 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001ccee:	31 ff                	xor    edi,edi
c001ccf0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ccf4:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001ccf8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ccfd:	50                   	push   eax
c001ccfe:	50                   	push   eax
c001ccff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd06:	50                   	push   eax
c001cd07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd0d:	e8 44 ed ff ff       	call   c001ba56 <IDE::getBase(unsigned char)>
c001cd12:	89 c2                	mov    edx,eax
c001cd14:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cd19:	66 ef                	out    dx,ax
c001cd1b:	47                   	inc    edi
c001cd1c:	83 c4 10             	add    esp,0x10
c001cd1f:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cd25:	75 c9                	jne    c001ccf0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cd27:	eb 23                	jmp    c001cd4c <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cd29:	51                   	push   ecx
c001cd2a:	0f b6 d2             	movzx  edx,dl
c001cd2d:	51                   	push   ecx
c001cd2e:	52                   	push   edx
c001cd2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd35:	e8 1c ed ff ff       	call   c001ba56 <IDE::getBase(unsigned char)>
c001cd3a:	b9 00 01 00 00       	mov    ecx,0x100
c001cd3f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cd43:	89 c2                	mov    edx,eax
c001cd45:	fc                   	cld    
c001cd46:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cd54:	4e                   	dec    esi
c001cd55:	e9 43 ff ff ff       	jmp    c001cc9d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cd5a:	31 f6                	xor    esi,esi
c001cd5c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cd61:	74 11                	je     c001cd74 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cd63:	50                   	push   eax
c001cd64:	50                   	push   eax
c001cd65:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cd6a:	50                   	push   eax
c001cd6b:	53                   	push   ebx
c001cd6c:	e8 af fb ff ff       	call   c001c920 <ATA::flush(bool)>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	83 c4 2c             	add    esp,0x2c
c001cd77:	89 f0                	mov    eax,esi
c001cd79:	5b                   	pop    ebx
c001cd7a:	5e                   	pop    esi
c001cd7b:	5f                   	pop    edi
c001cd7c:	5d                   	pop    ebp
c001cd7d:	c3                   	ret    

c001cd7e <ATA::detectCHS()>:
c001cd7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd82:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd88:	c1 e0 06             	shl    eax,0x6
c001cd8b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd91:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd9b:	c7 44 24 04 34 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f34
c001cda3:	e9 21 45 ff ff       	jmp    c00112c9 <KePanic(char const*)>

c001cda8 <ATA::open(int, int, void*)>:
c001cda8:	53                   	push   ebx
c001cda9:	83 ec 08             	sub    esp,0x8
c001cdac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdb8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cdbe:	c1 e0 06             	shl    eax,0x6
c001cdc1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cdc7:	01 d0                	add    eax,edx
c001cdc9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cdd0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cdd6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cddd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cde7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cdee:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cdf4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cdfb:	75 0c                	jne    c001ce09 <ATA::open(int, int, void*)+0x61>
c001cdfd:	83 ec 0c             	sub    esp,0xc
c001ce00:	53                   	push   ebx
c001ce01:	e8 78 ff ff ff       	call   c001cd7e <ATA::detectCHS()>
c001ce06:	83 c4 10             	add    esp,0x10
c001ce09:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ce0f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce15:	c1 e0 06             	shl    eax,0x6
c001ce18:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ce1f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce29:	d1 e8                	shr    eax,1
c001ce2b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ce31:	6a 04                	push   0x4
c001ce33:	6a 0c                	push   0xc
c001ce35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3c:	50                   	push   eax
c001ce3d:	52                   	push   edx
c001ce3e:	e8 25 ec ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce43:	90                   	nop
c001ce44:	90                   	nop
c001ce45:	6a 00                	push   0x0
c001ce47:	6a 0c                	push   0xc
c001ce49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce50:	50                   	push   eax
c001ce51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce57:	e8 0c ec ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5c:	83 c4 14             	add    esp,0x14
c001ce5f:	53                   	push   ebx
c001ce60:	e8 fd fc fe ff       	call   c000cb62 <PhysicalDisk::startCache()>
c001ce65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce68:	e8 41 0f ff ff       	call   c000ddae <createPartitionsForDisk(PhysicalDisk*)>
c001ce6d:	83 c4 18             	add    esp,0x18
c001ce70:	31 c0                	xor    eax,eax
c001ce72:	5b                   	pop    ebx
c001ce73:	c3                   	ret    

c001ce74 <combineCharAndColour(char, unsigned char)>:
c001ce74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce79:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ce7f:	c1 e0 08             	shl    eax,0x8
c001ce82:	09 d0                	or     eax,edx
c001ce84:	c3                   	ret    

c001ce85 <combineColours(unsigned char, unsigned char)>:
c001ce85:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce8a:	c1 e0 04             	shl    eax,0x4
c001ce8d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ce91:	c3                   	ret    

c001ce92 <ATA::read(unsigned long long, int, void*)>:
c001ce92:	55                   	push   ebp
c001ce93:	57                   	push   edi
c001ce94:	56                   	push   esi
c001ce95:	be 04 00 00 00       	mov    esi,0x4
c001ce9a:	53                   	push   ebx
c001ce9b:	83 ec 0c             	sub    esp,0xc
c001ce9e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cea2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ceaa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ceae:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ceb1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ceb7:	0f 87 a1 01 00 00    	ja     c001d05e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cebd:	85 c9                	test   ecx,ecx
c001cebf:	be 06 00 00 00       	mov    esi,0x6
c001cec4:	0f 84 94 01 00 00    	je     c001d05e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ceca:	55                   	push   ebp
c001cecb:	55                   	push   ebp
c001cecc:	6a 00                	push   0x0
c001cece:	51                   	push   ecx
c001cecf:	53                   	push   ebx
c001ced0:	52                   	push   edx
c001ced1:	50                   	push   eax
c001ced2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ced6:	e8 df fa ff ff       	call   c001c9ba <ATA::access(unsigned long long, int, void*, bool)>
c001cedb:	83 c4 20             	add    esp,0x20
c001cede:	85 c0                	test   eax,eax
c001cee0:	89 c6                	mov    esi,eax
c001cee2:	0f 85 71 01 00 00    	jne    c001d059 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cee8:	50                   	push   eax
c001cee9:	bd 10 27 00 00       	mov    ebp,0x2710
c001ceee:	50                   	push   eax
c001ceef:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cef5:	6a 0f                	push   0xf
c001cef7:	6a 00                	push   0x0
c001cef9:	89 da                	mov    edx,ebx
c001cefb:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cf01:	e8 7f ff ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001cf06:	59                   	pop    ecx
c001cf07:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf0c:	5b                   	pop    ebx
c001cf0d:	0f b6 d8             	movzx  ebx,al
c001cf10:	89 d0                	mov    eax,edx
c001cf12:	53                   	push   ebx
c001cf13:	99                   	cdq    
c001cf14:	f7 fd                	idiv   ebp
c001cf16:	99                   	cdq    
c001cf17:	f7 f9                	idiv   ecx
c001cf19:	83 c2 30             	add    edx,0x30
c001cf1c:	0f b6 d2             	movzx  edx,dl
c001cf1f:	52                   	push   edx
c001cf20:	e8 4f ff ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cf25:	5f                   	pop    edi
c001cf26:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf2b:	5a                   	pop    edx
c001cf2c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf32:	53                   	push   ebx
c001cf33:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf38:	99                   	cdq    
c001cf39:	f7 ff                	idiv   edi
c001cf3b:	99                   	cdq    
c001cf3c:	f7 f9                	idiv   ecx
c001cf3e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf41:	0f b6 c0             	movzx  eax,al
c001cf44:	50                   	push   eax
c001cf45:	e8 2a ff ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cf4a:	5f                   	pop    edi
c001cf4b:	bf 64 00 00 00       	mov    edi,0x64
c001cf50:	5a                   	pop    edx
c001cf51:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf57:	53                   	push   ebx
c001cf58:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf5d:	99                   	cdq    
c001cf5e:	f7 ff                	idiv   edi
c001cf60:	99                   	cdq    
c001cf61:	f7 f9                	idiv   ecx
c001cf63:	8d 42 30             	lea    eax,[edx+0x30]
c001cf66:	0f b6 c0             	movzx  eax,al
c001cf69:	50                   	push   eax
c001cf6a:	e8 05 ff ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cf6f:	5a                   	pop    edx
c001cf70:	5a                   	pop    edx
c001cf71:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cf77:	53                   	push   ebx
c001cf78:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf7d:	99                   	cdq    
c001cf7e:	f7 f9                	idiv   ecx
c001cf80:	99                   	cdq    
c001cf81:	f7 f9                	idiv   ecx
c001cf83:	8d 42 30             	lea    eax,[edx+0x30]
c001cf86:	0f b6 c0             	movzx  eax,al
c001cf89:	50                   	push   eax
c001cf8a:	e8 e5 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cf8f:	5a                   	pop    edx
c001cf90:	5a                   	pop    edx
c001cf91:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf97:	53                   	push   ebx
c001cf98:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf9d:	99                   	cdq    
c001cf9e:	f7 f9                	idiv   ecx
c001cfa0:	83 c2 30             	add    edx,0x30
c001cfa3:	0f b6 d2             	movzx  edx,dl
c001cfa6:	52                   	push   edx
c001cfa7:	e8 c8 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cfac:	5a                   	pop    edx
c001cfad:	5a                   	pop    edx
c001cfae:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cfb4:	53                   	push   ebx
c001cfb5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfba:	99                   	cdq    
c001cfbb:	f7 fd                	idiv   ebp
c001cfbd:	99                   	cdq    
c001cfbe:	f7 f9                	idiv   ecx
c001cfc0:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc3:	0f b6 c0             	movzx  eax,al
c001cfc6:	50                   	push   eax
c001cfc7:	e8 a8 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cfcc:	5d                   	pop    ebp
c001cfcd:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cfd2:	5a                   	pop    edx
c001cfd3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cfd9:	53                   	push   ebx
c001cfda:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfdf:	99                   	cdq    
c001cfe0:	f7 fd                	idiv   ebp
c001cfe2:	99                   	cdq    
c001cfe3:	f7 f9                	idiv   ecx
c001cfe5:	8d 42 30             	lea    eax,[edx+0x30]
c001cfe8:	0f b6 c0             	movzx  eax,al
c001cfeb:	50                   	push   eax
c001cfec:	e8 83 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001cff1:	5d                   	pop    ebp
c001cff2:	5a                   	pop    edx
c001cff3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cff9:	53                   	push   ebx
c001cffa:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfff:	99                   	cdq    
c001d000:	f7 ff                	idiv   edi
c001d002:	99                   	cdq    
c001d003:	f7 f9                	idiv   ecx
c001d005:	8d 42 30             	lea    eax,[edx+0x30]
c001d008:	0f b6 c0             	movzx  eax,al
c001d00b:	50                   	push   eax
c001d00c:	e8 63 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d011:	5f                   	pop    edi
c001d012:	5d                   	pop    ebp
c001d013:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d019:	53                   	push   ebx
c001d01a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d01f:	99                   	cdq    
c001d020:	f7 f9                	idiv   ecx
c001d022:	99                   	cdq    
c001d023:	f7 f9                	idiv   ecx
c001d025:	8d 42 30             	lea    eax,[edx+0x30]
c001d028:	0f b6 c0             	movzx  eax,al
c001d02b:	50                   	push   eax
c001d02c:	e8 43 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d031:	5a                   	pop    edx
c001d032:	5f                   	pop    edi
c001d033:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d039:	53                   	push   ebx
c001d03a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d03f:	99                   	cdq    
c001d040:	f7 f9                	idiv   ecx
c001d042:	83 c2 30             	add    edx,0x30
c001d045:	0f b6 d2             	movzx  edx,dl
c001d048:	52                   	push   edx
c001d049:	e8 26 fe ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d04e:	83 c4 10             	add    esp,0x10
c001d051:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d057:	eb 05                	jmp    c001d05e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d059:	be 01 00 00 00       	mov    esi,0x1
c001d05e:	83 c4 0c             	add    esp,0xc
c001d061:	89 f0                	mov    eax,esi
c001d063:	5b                   	pop    ebx
c001d064:	5e                   	pop    esi
c001d065:	5f                   	pop    edi
c001d066:	5d                   	pop    ebp
c001d067:	c3                   	ret    

c001d068 <ATA::write(unsigned long long, int, void*)>:
c001d068:	55                   	push   ebp
c001d069:	57                   	push   edi
c001d06a:	56                   	push   esi
c001d06b:	be 04 00 00 00       	mov    esi,0x4
c001d070:	53                   	push   ebx
c001d071:	83 ec 0c             	sub    esp,0xc
c001d074:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d07c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d080:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d084:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d087:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d08d:	0f 87 9c 01 00 00    	ja     c001d22f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d093:	85 c9                	test   ecx,ecx
c001d095:	be 06 00 00 00       	mov    esi,0x6
c001d09a:	0f 84 8f 01 00 00    	je     c001d22f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0a0:	55                   	push   ebp
c001d0a1:	55                   	push   ebp
c001d0a2:	6a 01                	push   0x1
c001d0a4:	51                   	push   ecx
c001d0a5:	53                   	push   ebx
c001d0a6:	52                   	push   edx
c001d0a7:	50                   	push   eax
c001d0a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0ac:	e8 09 f9 ff ff       	call   c001c9ba <ATA::access(unsigned long long, int, void*, bool)>
c001d0b1:	83 c4 20             	add    esp,0x20
c001d0b4:	85 c0                	test   eax,eax
c001d0b6:	89 c6                	mov    esi,eax
c001d0b8:	0f 85 6c 01 00 00    	jne    c001d22a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d0be:	50                   	push   eax
c001d0bf:	bd 10 27 00 00       	mov    ebp,0x2710
c001d0c4:	50                   	push   eax
c001d0c5:	6a 0f                	push   0xf
c001d0c7:	6a 00                	push   0x0
c001d0c9:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001d0cf:	e8 b1 fd ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001d0d4:	5a                   	pop    edx
c001d0d5:	59                   	pop    ecx
c001d0d6:	b9 0a 00 00 00       	mov    ecx,0xa
c001d0db:	0f b6 d8             	movzx  ebx,al
c001d0de:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0e3:	53                   	push   ebx
c001d0e4:	99                   	cdq    
c001d0e5:	f7 fd                	idiv   ebp
c001d0e7:	99                   	cdq    
c001d0e8:	f7 f9                	idiv   ecx
c001d0ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d0ed:	0f b6 c0             	movzx  eax,al
c001d0f0:	50                   	push   eax
c001d0f1:	e8 7e fd ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d0f6:	5f                   	pop    edi
c001d0f7:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0fc:	5a                   	pop    edx
c001d0fd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d103:	53                   	push   ebx
c001d104:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d109:	99                   	cdq    
c001d10a:	f7 ff                	idiv   edi
c001d10c:	99                   	cdq    
c001d10d:	f7 f9                	idiv   ecx
c001d10f:	8d 42 30             	lea    eax,[edx+0x30]
c001d112:	0f b6 c0             	movzx  eax,al
c001d115:	50                   	push   eax
c001d116:	e8 59 fd ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d11b:	5f                   	pop    edi
c001d11c:	bf 64 00 00 00       	mov    edi,0x64
c001d121:	5a                   	pop    edx
c001d122:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d128:	53                   	push   ebx
c001d129:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d12e:	99                   	cdq    
c001d12f:	f7 ff                	idiv   edi
c001d131:	99                   	cdq    
c001d132:	f7 f9                	idiv   ecx
c001d134:	8d 42 30             	lea    eax,[edx+0x30]
c001d137:	0f b6 c0             	movzx  eax,al
c001d13a:	50                   	push   eax
c001d13b:	e8 34 fd ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d140:	5a                   	pop    edx
c001d141:	5a                   	pop    edx
c001d142:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d148:	53                   	push   ebx
c001d149:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d14e:	99                   	cdq    
c001d14f:	f7 f9                	idiv   ecx
c001d151:	99                   	cdq    
c001d152:	f7 f9                	idiv   ecx
c001d154:	8d 42 30             	lea    eax,[edx+0x30]
c001d157:	0f b6 c0             	movzx  eax,al
c001d15a:	50                   	push   eax
c001d15b:	e8 14 fd ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d160:	5a                   	pop    edx
c001d161:	5a                   	pop    edx
c001d162:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d168:	53                   	push   ebx
c001d169:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d16e:	99                   	cdq    
c001d16f:	f7 f9                	idiv   ecx
c001d171:	83 c2 30             	add    edx,0x30
c001d174:	0f b6 d2             	movzx  edx,dl
c001d177:	52                   	push   edx
c001d178:	e8 f7 fc ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d17d:	5a                   	pop    edx
c001d17e:	5a                   	pop    edx
c001d17f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d185:	53                   	push   ebx
c001d186:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d18b:	99                   	cdq    
c001d18c:	f7 fd                	idiv   ebp
c001d18e:	99                   	cdq    
c001d18f:	f7 f9                	idiv   ecx
c001d191:	8d 42 30             	lea    eax,[edx+0x30]
c001d194:	0f b6 c0             	movzx  eax,al
c001d197:	50                   	push   eax
c001d198:	e8 d7 fc ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d19d:	5d                   	pop    ebp
c001d19e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d1a3:	5a                   	pop    edx
c001d1a4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d1aa:	53                   	push   ebx
c001d1ab:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d1b0:	99                   	cdq    
c001d1b1:	f7 fd                	idiv   ebp
c001d1b3:	99                   	cdq    
c001d1b4:	f7 f9                	idiv   ecx
c001d1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1b9:	0f b6 c0             	movzx  eax,al
c001d1bc:	50                   	push   eax
c001d1bd:	e8 b2 fc ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d1c2:	5d                   	pop    ebp
c001d1c3:	5a                   	pop    edx
c001d1c4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1ca:	53                   	push   ebx
c001d1cb:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d1d0:	99                   	cdq    
c001d1d1:	f7 ff                	idiv   edi
c001d1d3:	99                   	cdq    
c001d1d4:	f7 f9                	idiv   ecx
c001d1d6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d9:	0f b6 c0             	movzx  eax,al
c001d1dc:	50                   	push   eax
c001d1dd:	e8 92 fc ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d1e2:	5f                   	pop    edi
c001d1e3:	5d                   	pop    ebp
c001d1e4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d1ea:	53                   	push   ebx
c001d1eb:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d1f0:	99                   	cdq    
c001d1f1:	f7 f9                	idiv   ecx
c001d1f3:	99                   	cdq    
c001d1f4:	f7 f9                	idiv   ecx
c001d1f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1f9:	0f b6 c0             	movzx  eax,al
c001d1fc:	50                   	push   eax
c001d1fd:	e8 72 fc ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d202:	5a                   	pop    edx
c001d203:	5f                   	pop    edi
c001d204:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d20a:	53                   	push   ebx
c001d20b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d210:	99                   	cdq    
c001d211:	f7 f9                	idiv   ecx
c001d213:	83 c2 30             	add    edx,0x30
c001d216:	0f b6 d2             	movzx  edx,dl
c001d219:	52                   	push   edx
c001d21a:	e8 55 fc ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d228:	eb 05                	jmp    c001d22f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d22a:	be 01 00 00 00       	mov    esi,0x1
c001d22f:	83 c4 0c             	add    esp,0xc
c001d232:	89 f0                	mov    eax,esi
c001d234:	5b                   	pop    ebx
c001d235:	5e                   	pop    esi
c001d236:	5f                   	pop    edi
c001d237:	5d                   	pop    ebp
c001d238:	c3                   	ret    
c001d239:	90                   	nop

c001d23a <ATAPI::write(unsigned long long, int, void*)>:
c001d23a:	b8 03 00 00 00       	mov    eax,0x3
c001d23f:	c3                   	ret    

c001d240 <ATAPI::close(int, int, void*)>:
c001d240:	83 ec 0c             	sub    esp,0xc
c001d243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d247:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d24d:	85 c0                	test   eax,eax
c001d24f:	74 0c                	je     c001d25d <ATAPI::close(int, int, void*)+0x1d>
c001d251:	8b 10                	mov    edx,DWORD PTR [eax]
c001d253:	83 ec 0c             	sub    esp,0xc
c001d256:	50                   	push   eax
c001d257:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d25a:	83 c4 10             	add    esp,0x10
c001d25d:	31 c0                	xor    eax,eax
c001d25f:	83 c4 0c             	add    esp,0xc
c001d262:	c3                   	ret    
c001d263:	90                   	nop

c001d264 <ATAPI::ATAPI()>:
c001d264:	83 ec 0c             	sub    esp,0xc
c001d267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d26b:	83 ec 04             	sub    esp,0x4
c001d26e:	68 00 08 00 00       	push   0x800
c001d273:	68 7d 30 02 c0       	push   0xc002307d
c001d278:	50                   	push   eax
c001d279:	e8 7c f8 fe ff       	call   c000cafa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d27e:	83 c4 10             	add    esp,0x10
c001d281:	ba 98 2f 02 c0       	mov    edx,0xc0022f98
c001d286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d28a:	89 10                	mov    DWORD PTR [eax],edx
c001d28c:	90                   	nop
c001d28d:	83 c4 0c             	add    esp,0xc
c001d290:	c3                   	ret    
c001d291:	90                   	nop

c001d292 <ATAPI::readyForCommand()>:
c001d292:	56                   	push   esi
c001d293:	53                   	push   ebx
c001d294:	53                   	push   ebx
c001d295:	31 db                	xor    ebx,ebx
c001d297:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d29b:	51                   	push   ecx
c001d29c:	6a 0c                	push   0xc
c001d29e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d2a5:	50                   	push   eax
c001d2a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d2ac:	e8 77 e8 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001d2b1:	83 c4 10             	add    esp,0x10
c001d2b4:	a8 88                	test   al,0x88
c001d2b6:	74 25                	je     c001d2dd <ATAPI::readyForCommand()+0x4b>
c001d2b8:	43                   	inc    ebx
c001d2b9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d2bf:	7e da                	jle    c001d29b <ATAPI::readyForCommand()+0x9>
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	68 5e 01 00 00       	push   0x15e
c001d2c9:	e8 c6 8d ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001d2ce:	83 c4 10             	add    esp,0x10
c001d2d1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d2d7:	75 c2                	jne    c001d29b <ATAPI::readyForCommand()+0x9>
c001d2d9:	31 c0                	xor    eax,eax
c001d2db:	eb 02                	jmp    c001d2df <ATAPI::readyForCommand()+0x4d>
c001d2dd:	b0 01                	mov    al,0x1
c001d2df:	5a                   	pop    edx
c001d2e0:	5b                   	pop    ebx
c001d2e1:	5e                   	pop    esi
c001d2e2:	c3                   	ret    
c001d2e3:	90                   	nop

c001d2e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d2e4:	55                   	push   ebp
c001d2e5:	57                   	push   edi
c001d2e6:	56                   	push   esi
c001d2e7:	53                   	push   ebx
c001d2e8:	83 ec 20             	sub    esp,0x20
c001d2eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d2ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d2f3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d2f7:	6a 01                	push   0x1
c001d2f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d300:	50                   	push   eax
c001d301:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d307:	e8 6a e9 ff ff       	call   c001bc76 <IDE::enableIRQs(unsigned char, bool)>
c001d30c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d313:	59                   	pop    ecx
c001d314:	5e                   	pop    esi
c001d315:	50                   	push   eax
c001d316:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d31c:	e8 21 e7 ff ff       	call   c001ba42 <IDE::prepareInterrupt(unsigned char)>
c001d321:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d324:	e8 69 ff ff ff       	call   c001d292 <ATAPI::readyForCommand()>
c001d329:	83 c4 10             	add    esp,0x10
c001d32c:	84 c0                	test   al,al
c001d32e:	75 0a                	jne    c001d33a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d330:	bb 01 00 00 00       	mov    ebx,0x1
c001d335:	e9 5f 02 00 00       	jmp    c001d599 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d33a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d340:	c1 e0 04             	shl    eax,0x4
c001d343:	0f b6 c0             	movzx  eax,al
c001d346:	50                   	push   eax
c001d347:	6a 06                	push   0x6
c001d349:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d350:	50                   	push   eax
c001d351:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d357:	e8 0c e7 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d35c:	6a 00                	push   0x0
c001d35e:	6a 01                	push   0x1
c001d360:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d367:	50                   	push   eax
c001d368:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d36e:	e8 f5 e6 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d373:	83 c4 20             	add    esp,0x20
c001d376:	0f b6 c3             	movzx  eax,bl
c001d379:	50                   	push   eax
c001d37a:	0f b6 df             	movzx  ebx,bh
c001d37d:	6a 04                	push   0x4
c001d37f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d386:	50                   	push   eax
c001d387:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d38d:	e8 d6 e6 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d392:	53                   	push   ebx
c001d393:	6a 05                	push   0x5
c001d395:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d39c:	50                   	push   eax
c001d39d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3a3:	e8 c0 e6 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3a8:	83 c4 20             	add    esp,0x20
c001d3ab:	68 a0 00 00 00       	push   0xa0
c001d3b0:	6a 07                	push   0x7
c001d3b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3b9:	50                   	push   eax
c001d3ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3c0:	e8 a3 e6 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3c5:	83 c4 0c             	add    esp,0xc
c001d3c8:	6a 01                	push   0x1
c001d3ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3d1:	50                   	push   eax
c001d3d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3d8:	e8 6f f1 ff ff       	call   c001c54c <IDE::polling(unsigned char, unsigned int)>
c001d3dd:	83 c4 10             	add    esp,0x10
c001d3e0:	0f b6 d8             	movzx  ebx,al
c001d3e3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d3e9:	85 db                	test   ebx,ebx
c001d3eb:	74 20                	je     c001d40d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d3ed:	53                   	push   ebx
c001d3ee:	0f b6 c0             	movzx  eax,al
c001d3f1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d3f8:	52                   	push   edx
c001d3f9:	50                   	push   eax
c001d3fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d400:	e8 8d f0 ff ff       	call   c001c492 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d405:	83 c4 10             	add    esp,0x10
c001d408:	e9 8c 01 00 00       	jmp    c001d599 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d40d:	52                   	push   edx
c001d40e:	0f b6 c0             	movzx  eax,al
c001d411:	52                   	push   edx
c001d412:	50                   	push   eax
c001d413:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d419:	e8 38 e6 ff ff       	call   c001ba56 <IDE::getBase(unsigned char)>
c001d41e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d422:	b9 06 00 00 00       	mov    ecx,0x6
c001d427:	89 c2                	mov    edx,eax
c001d429:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d42c:	89 e8                	mov    eax,ebp
c001d42e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	0f b6 c0             	movzx  eax,al
c001d438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d43c:	85 db                	test   ebx,ebx
c001d43e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d444:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d44b:	0f 84 eb 00 00 00    	je     c001d53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d451:	55                   	push   ebp
c001d452:	55                   	push   ebp
c001d453:	52                   	push   edx
c001d454:	50                   	push   eax
c001d455:	e8 82 e7 ff ff       	call   c001bbdc <IDE::waitInterrupt(unsigned char)>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	84 c0                	test   al,al
c001d45f:	0f 84 cb fe ff ff    	je     c001d330 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d465:	56                   	push   esi
c001d466:	56                   	push   esi
c001d467:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d46e:	50                   	push   eax
c001d46f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d475:	e8 c8 e5 ff ff       	call   c001ba42 <IDE::prepareInterrupt(unsigned char)>
c001d47a:	83 c4 0c             	add    esp,0xc
c001d47d:	6a 04                	push   0x4
c001d47f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d486:	50                   	push   eax
c001d487:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d48d:	e8 96 e6 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001d492:	83 c4 0c             	add    esp,0xc
c001d495:	6a 05                	push   0x5
c001d497:	89 c6                	mov    esi,eax
c001d499:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4a0:	50                   	push   eax
c001d4a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4a7:	e8 7c e6 ff ff       	call   c001bb28 <IDE::read(unsigned char, unsigned char)>
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	0f b6 e8             	movzx  ebp,al
c001d4b2:	89 f0                	mov    eax,esi
c001d4b4:	c1 e5 08             	shl    ebp,0x8
c001d4b7:	0f b6 f0             	movzx  esi,al
c001d4ba:	09 f5                	or     ebp,esi
c001d4bc:	31 f6                	xor    esi,esi
c001d4be:	d1 fd                	sar    ebp,1
c001d4c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d4c5:	74 5c                	je     c001d523 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d4c7:	39 ee                	cmp    esi,ebp
c001d4c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d4cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d4d6:	75 0d                	jne    c001d4e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d4d8:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d4db:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d4df:	4b                   	dec    ebx
c001d4e0:	e9 57 ff ff ff       	jmp    c001d43c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d4e5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d4e9:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d4ed:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d4f2:	51                   	push   ecx
c001d4f3:	51                   	push   ecx
c001d4f4:	52                   	push   edx
c001d4f5:	50                   	push   eax
c001d4f6:	e8 5b e5 ff ff       	call   c001ba56 <IDE::getBase(unsigned char)>
c001d4fb:	89 c2                	mov    edx,eax
c001d4fd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d502:	66 ef                	out    dx,ax
c001d504:	46                   	inc    esi
c001d505:	83 c4 10             	add    esp,0x10
c001d508:	eb bd                	jmp    c001d4c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d50a:	51                   	push   ecx
c001d50b:	51                   	push   ecx
c001d50c:	52                   	push   edx
c001d50d:	50                   	push   eax
c001d50e:	e8 43 e5 ff ff       	call   c001ba56 <IDE::getBase(unsigned char)>
c001d513:	89 c2                	mov    edx,eax
c001d515:	66 ed                	in     ax,dx
c001d517:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d522:	46                   	inc    esi
c001d523:	39 ee                	cmp    esi,ebp
c001d525:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d52b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d532:	75 d6                	jne    c001d50a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d534:	01 f6                	add    esi,esi
c001d536:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d53a:	eb a3                	jmp    c001d4df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d53c:	51                   	push   ecx
c001d53d:	51                   	push   ecx
c001d53e:	52                   	push   edx
c001d53f:	50                   	push   eax
c001d540:	e8 97 e6 ff ff       	call   c001bbdc <IDE::waitInterrupt(unsigned char)>
c001d545:	83 c4 10             	add    esp,0x10
c001d548:	84 c0                	test   al,al
c001d54a:	0f 84 e0 fd ff ff    	je     c001d330 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d550:	52                   	push   edx
c001d551:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d556:	52                   	push   edx
c001d557:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d55e:	50                   	push   eax
c001d55f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d565:	e8 d8 e4 ff ff       	call   c001ba42 <IDE::prepareInterrupt(unsigned char)>
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	50                   	push   eax
c001d56e:	50                   	push   eax
c001d56f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d576:	50                   	push   eax
c001d577:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d57d:	e8 d4 e4 ff ff       	call   c001ba56 <IDE::getBase(unsigned char)>
c001d582:	8d 50 07             	lea    edx,[eax+0x7]
c001d585:	ec                   	in     al,dx
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	a8 88                	test   al,0x88
c001d58b:	74 0a                	je     c001d597 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d58d:	4b                   	dec    ebx
c001d58e:	75 dd                	jne    c001d56d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d590:	bb 02 00 00 00       	mov    ebx,0x2
c001d595:	eb 02                	jmp    c001d599 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d597:	31 db                	xor    ebx,ebx
c001d599:	83 c4 1c             	add    esp,0x1c
c001d59c:	89 d8                	mov    eax,ebx
c001d59e:	5b                   	pop    ebx
c001d59f:	5e                   	pop    esi
c001d5a0:	5f                   	pop    edi
c001d5a1:	5d                   	pop    ebp
c001d5a2:	c3                   	ret    
c001d5a3:	90                   	nop

c001d5a4 <ATAPI::diskRemoved()>:
c001d5a4:	53                   	push   ebx
c001d5a5:	83 ec 14             	sub    esp,0x14
c001d5a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d5b3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d5b9:	e8 de 04 ff ff       	call   c000da9c <LogicalDisk::unmount()>
c001d5be:	58                   	pop    eax
c001d5bf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5c5:	e8 b6 0e ff ff       	call   c000e480 <VCache::writeWriteBuffer()>
c001d5ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d5d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5d4:	83 c4 18             	add    esp,0x18
c001d5d7:	5b                   	pop    ebx
c001d5d8:	e9 93 0e ff ff       	jmp    c000e470 <VCache::invalidateReadBuffer()>
c001d5dd:	90                   	nop

c001d5de <ATAPI::eject()>:
c001d5de:	57                   	push   edi
c001d5df:	b9 03 00 00 00       	mov    ecx,0x3
c001d5e4:	53                   	push   ebx
c001d5e5:	83 ec 14             	sub    esp,0x14
c001d5e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d5ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5f0:	fc                   	cld    
c001d5f1:	31 c0                	xor    eax,eax
c001d5f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5f5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5fa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5ff:	50                   	push   eax
c001d600:	50                   	push   eax
c001d601:	6a 00                	push   0x0
c001d603:	6a 00                	push   0x0
c001d605:	6a 00                	push   0x0
c001d607:	6a 02                	push   0x2
c001d609:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d60d:	50                   	push   eax
c001d60e:	53                   	push   ebx
c001d60f:	e8 d0 fc ff ff       	call   c001d2e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d614:	83 c4 14             	add    esp,0x14
c001d617:	53                   	push   ebx
c001d618:	e8 87 ff ff ff       	call   c001d5a4 <ATAPI::diskRemoved()>
c001d61d:	83 c4 24             	add    esp,0x24
c001d620:	31 c0                	xor    eax,eax
c001d622:	5b                   	pop    ebx
c001d623:	5f                   	pop    edi
c001d624:	c3                   	ret    
c001d625:	90                   	nop

c001d626 <ATAPI::diskInserted()>:
c001d626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d62a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d631:	c3                   	ret    

c001d632 <ATAPI::detectMedia()>:
c001d632:	56                   	push   esi
c001d633:	53                   	push   ebx
c001d634:	83 ec 28             	sub    esp,0x28
c001d637:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d63b:	6a 0c                	push   0xc
c001d63d:	6a 00                	push   0x0
c001d63f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d643:	56                   	push   esi
c001d644:	e8 a7 2e fe ff       	call   c00004f0 <memset>
c001d649:	58                   	pop    eax
c001d64a:	5a                   	pop    edx
c001d64b:	6a 00                	push   0x0
c001d64d:	6a 00                	push   0x0
c001d64f:	6a 00                	push   0x0
c001d651:	6a 00                	push   0x0
c001d653:	56                   	push   esi
c001d654:	53                   	push   ebx
c001d655:	e8 8a fc ff ff       	call   c001d2e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d65a:	83 c4 1c             	add    esp,0x1c
c001d65d:	6a 0c                	push   0xc
c001d65f:	6a 00                	push   0x0
c001d661:	56                   	push   esi
c001d662:	e8 89 2e fe ff       	call   c00004f0 <memset>
c001d667:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d66c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d671:	59                   	pop    ecx
c001d672:	58                   	pop    eax
c001d673:	6a 01                	push   0x1
c001d675:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d679:	50                   	push   eax
c001d67a:	6a 00                	push   0x0
c001d67c:	6a 12                	push   0x12
c001d67e:	56                   	push   esi
c001d67f:	53                   	push   ebx
c001d680:	e8 5f fc ff ff       	call   c001d2e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d685:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d689:	83 c4 20             	add    esp,0x20
c001d68c:	83 e0 7f             	and    eax,0x7f
c001d68f:	83 f8 70             	cmp    eax,0x70
c001d692:	74 15                	je     c001d6a9 <ATAPI::detectMedia()+0x77>
c001d694:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d69b:	75 0c                	jne    c001d6a9 <ATAPI::detectMedia()+0x77>
c001d69d:	83 ec 0c             	sub    esp,0xc
c001d6a0:	53                   	push   ebx
c001d6a1:	e8 80 ff ff ff       	call   c001d626 <ATAPI::diskInserted()>
c001d6a6:	83 c4 10             	add    esp,0x10
c001d6a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d6ad:	83 e0 0f             	and    eax,0xf
c001d6b0:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d6b5:	0f b6 c0             	movzx  eax,al
c001d6b8:	75 19                	jne    c001d6d3 <ATAPI::detectMedia()+0xa1>
c001d6ba:	83 f8 02             	cmp    eax,0x2
c001d6bd:	75 14                	jne    c001d6d3 <ATAPI::detectMedia()+0xa1>
c001d6bf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6c6:	74 24                	je     c001d6ec <ATAPI::detectMedia()+0xba>
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	53                   	push   ebx
c001d6cc:	e8 d3 fe ff ff       	call   c001d5a4 <ATAPI::diskRemoved()>
c001d6d1:	eb 16                	jmp    c001d6e9 <ATAPI::detectMedia()+0xb7>
c001d6d3:	85 c0                	test   eax,eax
c001d6d5:	75 15                	jne    c001d6ec <ATAPI::detectMedia()+0xba>
c001d6d7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6de:	75 0c                	jne    c001d6ec <ATAPI::detectMedia()+0xba>
c001d6e0:	83 ec 0c             	sub    esp,0xc
c001d6e3:	53                   	push   ebx
c001d6e4:	e8 3d ff ff ff       	call   c001d626 <ATAPI::diskInserted()>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	83 c4 24             	add    esp,0x24
c001d6ef:	5b                   	pop    ebx
c001d6f0:	5e                   	pop    esi
c001d6f1:	c3                   	ret    

c001d6f2 <ATAPI::open(int, int, void*)>:
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	50                   	push   eax
c001d6f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d701:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d707:	c1 e0 06             	shl    eax,0x6
c001d70a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d710:	01 d0                	add    eax,edx
c001d712:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d719:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d71f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d726:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d730:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d737:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d73d:	6a 04                	push   0x4
c001d73f:	6a 0c                	push   0xc
c001d741:	51                   	push   ecx
c001d742:	52                   	push   edx
c001d743:	e8 20 e3 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d748:	90                   	nop
c001d749:	90                   	nop
c001d74a:	6a 00                	push   0x0
c001d74c:	6a 0c                	push   0xc
c001d74e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d755:	50                   	push   eax
c001d756:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d75c:	e8 07 e3 ff ff       	call   c001ba68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d761:	83 c4 14             	add    esp,0x14
c001d764:	68 78 01 00 00       	push   0x178
c001d769:	e8 65 a3 fe ff       	call   c0007ad3 <malloc>
c001d76e:	83 c4 0c             	add    esp,0xc
c001d771:	6a 00                	push   0x0
c001d773:	68 ff ff ff 7f       	push   0x7fffffff
c001d778:	6a 00                	push   0x0
c001d77a:	6a 00                	push   0x0
c001d77c:	53                   	push   ebx
c001d77d:	68 2f 31 02 c0       	push   0xc002312f
c001d782:	89 c6                	mov    esi,eax
c001d784:	50                   	push   eax
c001d785:	e8 50 01 ff ff       	call   c000d8da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d78a:	83 c4 14             	add    esp,0x14
c001d78d:	56                   	push   esi
c001d78e:	e8 07 02 ff ff       	call   c000d99a <LogicalDisk::assignDriveLetter()>
c001d793:	5a                   	pop    edx
c001d794:	59                   	pop    ecx
c001d795:	0f be c0             	movsx  eax,al
c001d798:	50                   	push   eax
c001d799:	68 80 2f 02 c0       	push   0xc0022f80
c001d79e:	e8 67 d1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d7a3:	58                   	pop    eax
c001d7a4:	5a                   	pop    edx
c001d7a5:	56                   	push   esi
c001d7a6:	53                   	push   ebx
c001d7a7:	e8 80 ef fe ff       	call   c000c72c <Device::addChild(Device*)>
c001d7ac:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d7b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7b5:	e8 a8 f3 fe ff       	call   c000cb62 <PhysicalDisk::startCache()>
c001d7ba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d7c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7c4:	e8 69 fe ff ff       	call   c001d632 <ATAPI::detectMedia()>
c001d7c9:	83 c4 14             	add    esp,0x14
c001d7cc:	31 c0                	xor    eax,eax
c001d7ce:	5b                   	pop    ebx
c001d7cf:	5e                   	pop    esi
c001d7d0:	c3                   	ret    
c001d7d1:	90                   	nop

c001d7d2 <ATAPI::read(unsigned long long, int, void*)>:
c001d7d2:	55                   	push   ebp
c001d7d3:	57                   	push   edi
c001d7d4:	56                   	push   esi
c001d7d5:	53                   	push   ebx
c001d7d6:	83 ec 1c             	sub    esp,0x1c
c001d7d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d7e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d7e5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d7ec:	74 3c                	je     c001d82a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d7ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d7f2:	b9 03 00 00 00       	mov    ecx,0x3
c001d7f7:	fc                   	cld    
c001d7f8:	31 c0                	xor    eax,eax
c001d7fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7fc:	89 e8                	mov    eax,ebp
c001d7fe:	0f ce                	bswap  esi
c001d800:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d804:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d809:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d80d:	50                   	push   eax
c001d80e:	50                   	push   eax
c001d80f:	55                   	push   ebp
c001d810:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d814:	c1 e5 0b             	shl    ebp,0xb
c001d817:	6a 00                	push   0x0
c001d819:	55                   	push   ebp
c001d81a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d81e:	50                   	push   eax
c001d81f:	53                   	push   ebx
c001d820:	e8 bf fa ff ff       	call   c001d2e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d825:	83 c4 20             	add    esp,0x20
c001d828:	eb 1a                	jmp    c001d844 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	53                   	push   ebx
c001d82e:	e8 ff fd ff ff       	call   c001d632 <ATAPI::detectMedia()>
c001d833:	83 c4 10             	add    esp,0x10
c001d836:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d83d:	75 af                	jne    c001d7ee <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d83f:	b8 02 00 00 00       	mov    eax,0x2
c001d844:	83 c4 1c             	add    esp,0x1c
c001d847:	5b                   	pop    ebx
c001d848:	5e                   	pop    esi
c001d849:	5f                   	pop    edi
c001d84a:	5d                   	pop    ebp
c001d84b:	c3                   	ret    

c001d84c <SATA::close(int, int, void*)>:
c001d84c:	83 ec 0c             	sub    esp,0xc
c001d84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d853:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d859:	85 c0                	test   eax,eax
c001d85b:	74 0c                	je     c001d869 <SATA::close(int, int, void*)+0x1d>
c001d85d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d85f:	83 ec 0c             	sub    esp,0xc
c001d862:	50                   	push   eax
c001d863:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	31 c0                	xor    eax,eax
c001d86b:	83 c4 0c             	add    esp,0xc
c001d86e:	c3                   	ret    
c001d86f:	90                   	nop

c001d870 <SATA::powerSaving(PowerSavingLevel)>:
c001d870:	c3                   	ret    
c001d871:	90                   	nop

c001d872 <SATA::open(int, int, void*)>:
c001d872:	56                   	push   esi
c001d873:	53                   	push   ebx
c001d874:	50                   	push   eax
c001d875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d87d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d887:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d88d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d891:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d89b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d8a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d8ac:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d8b2:	e8 2b a5 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d8b7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d8bd:	89 c6                	mov    esi,eax
c001d8bf:	e8 1e a5 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d8c4:	81 c6 00 10 00 00    	add    esi,0x1000
c001d8ca:	39 c6                	cmp    esi,eax
c001d8cc:	74 10                	je     c001d8de <SATA::open(int, int, void*)+0x6c>
c001d8ce:	83 ec 0c             	sub    esp,0xc
c001d8d1:	68 c8 2f 02 c0       	push   0xc0022fc8
c001d8d6:	e8 ee 39 ff ff       	call   c00112c9 <KePanic(char const*)>
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	83 ec 0c             	sub    esp,0xc
c001d8e1:	6a 02                	push   0x2
c001d8e3:	e8 0d bd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d8e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d8ee:	6a 03                	push   0x3
c001d8f0:	50                   	push   eax
c001d8f1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d8f7:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d8fd:	e8 fc c3 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d902:	83 c4 14             	add    esp,0x14
c001d905:	53                   	push   ebx
c001d906:	e8 57 f2 fe ff       	call   c000cb62 <PhysicalDisk::startCache()>
c001d90b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d90e:	e8 9b 04 ff ff       	call   c000ddae <createPartitionsForDisk(PhysicalDisk*)>
c001d913:	83 c4 14             	add    esp,0x14
c001d916:	31 c0                	xor    eax,eax
c001d918:	5b                   	pop    ebx
c001d919:	5e                   	pop    esi
c001d91a:	c3                   	ret    
c001d91b:	90                   	nop

c001d91c <SATA::SATA()>:
c001d91c:	83 ec 0c             	sub    esp,0xc
c001d91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d923:	83 ec 04             	sub    esp,0x4
c001d926:	68 00 02 00 00       	push   0x200
c001d92b:	68 dc 2f 02 c0       	push   0xc0022fdc
c001d930:	50                   	push   eax
c001d931:	e8 c4 f1 fe ff       	call   c000cafa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	ba 4c 30 02 c0       	mov    edx,0xc002304c
c001d93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d942:	89 10                	mov    DWORD PTR [eax],edx
c001d944:	90                   	nop
c001d945:	83 c4 0c             	add    esp,0xc
c001d948:	c3                   	ret    
c001d949:	90                   	nop

c001d94a <SATA::access(unsigned long long, int, void*, bool)>:
c001d94a:	55                   	push   ebp
c001d94b:	57                   	push   edi
c001d94c:	56                   	push   esi
c001d94d:	53                   	push   ebx
c001d94e:	83 ec 2c             	sub    esp,0x2c
c001d951:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d955:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d95a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d95e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d962:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d96a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d96e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d972:	7e 10                	jle    c001d984 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d974:	83 ec 0c             	sub    esp,0xc
c001d977:	68 ec 2f 02 c0       	push   0xc0022fec
c001d97c:	e8 48 39 ff ff       	call   c00112c9 <KePanic(char const*)>
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d98a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d990:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d996:	89 e8                	mov    eax,ebp
c001d998:	c1 e0 07             	shl    eax,0x7
c001d99b:	01 d0                	add    eax,edx
c001d99d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d9a7:	8d 45 02             	lea    eax,[ebp+0x2]
c001d9aa:	51                   	push   ecx
c001d9ab:	c1 e0 07             	shl    eax,0x7
c001d9ae:	51                   	push   ecx
c001d9af:	01 d0                	add    eax,edx
c001d9b1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d9b5:	50                   	push   eax
c001d9b6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d9bc:	e8 6b ec ff ff       	call   c001c62c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d9c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9c5:	83 c4 10             	add    esp,0x10
c001d9c8:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d9cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9d1:	0f 84 5b 01 00 00    	je     c001db32 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d9d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d9db:	c1 e0 09             	shl    eax,0x9
c001d9de:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d9e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d9e7:	74 0e                	je     c001d9f7 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d9e9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d9ef:	89 c1                	mov    ecx,eax
c001d9f1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d9f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d9f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d9fb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001da01:	8d 45 02             	lea    eax,[ebp+0x2]
c001da04:	c1 e0 07             	shl    eax,0x7
c001da07:	01 d0                	add    eax,edx
c001da09:	8b 00                	mov    eax,DWORD PTR [eax]
c001da0b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001da11:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001da17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da1b:	c1 e1 05             	shl    ecx,0x5
c001da1e:	01 c8                	add    eax,ecx
c001da20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da24:	83 e1 01             	and    ecx,0x1
c001da27:	89 ce                	mov    esi,ecx
c001da29:	8a 08                	mov    cl,BYTE PTR [eax]
c001da2b:	c1 e6 06             	shl    esi,0x6
c001da2e:	83 e1 bf             	and    ecx,0xffffffbf
c001da31:	09 f1                	or     ecx,esi
c001da33:	88 08                	mov    BYTE PTR [eax],cl
c001da35:	8b 08                	mov    ecx,DWORD PTR [eax]
c001da37:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001da3d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001da43:	89 08                	mov    DWORD PTR [eax],ecx
c001da45:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001da4b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001da51:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001da57:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001da5a:	50                   	push   eax
c001da5b:	68 90 00 00 00       	push   0x90
c001da60:	6a 00                	push   0x0
c001da62:	56                   	push   esi
c001da63:	e8 88 2a fe ff       	call   c00004f0 <memset>
c001da68:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001da6e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001da74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da78:	83 c4 10             	add    esp,0x10
c001da7b:	48                   	dec    eax
c001da7c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001da81:	89 c1                	mov    ecx,eax
c001da83:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001da89:	25 00 00 c0 ff       	and    eax,0xffc00000
c001da8e:	09 c8                	or     eax,ecx
c001da90:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001da96:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001da9c:	83 c8 80             	or     eax,0xffffff80
c001da9f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001daa5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001daa8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daac:	25 00 7f 00 00       	and    eax,0x7f00
c001dab1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dab6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dabb:	66 89 06             	mov    WORD PTR [esi],ax
c001dabe:	b0 35                	mov    al,0x35
c001dac0:	75 02                	jne    c001dac4 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dac2:	b0 25                	mov    al,0x25
c001dac4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dacb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dacf:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dad3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dad7:	c1 e8 10             	shr    eax,0x10
c001dada:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dadd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dae1:	c1 e8 18             	shr    eax,0x18
c001dae4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dae7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001daeb:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001daee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001daf2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001daf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001daf9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dafd:	89 ee                	mov    esi,ebp
c001daff:	31 c0                	xor    eax,eax
c001db01:	c1 e6 07             	shl    esi,0x7
c001db04:	01 d6                	add    esi,edx
c001db06:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001db0c:	80 e1 88             	and    cl,0x88
c001db0f:	74 0a                	je     c001db1b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001db11:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001db16:	74 0a                	je     c001db22 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001db18:	40                   	inc    eax
c001db19:	eb eb                	jmp    c001db06 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001db1b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001db20:	75 17                	jne    c001db39 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001db22:	83 ec 0c             	sub    esp,0xc
c001db25:	68 25 30 02 c0       	push   0xc0023025
c001db2a:	e8 db cd fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	b8 01 00 00 00       	mov    eax,0x1
c001db37:	eb 5b                	jmp    c001db94 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001db39:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001db3d:	c1 e5 07             	shl    ebp,0x7
c001db40:	b8 01 00 00 00       	mov    eax,0x1
c001db45:	01 ea                	add    edx,ebp
c001db47:	d3 e0                	shl    eax,cl
c001db49:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001db4f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001db55:	85 c8                	test   eax,ecx
c001db57:	74 16                	je     c001db6f <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001db59:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001db5f:	0f ba e1 1e          	bt     ecx,0x1e
c001db63:	73 ea                	jae    c001db4f <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001db65:	83 ec 0c             	sub    esp,0xc
c001db68:	68 33 30 02 c0       	push   0xc0023033
c001db6d:	eb bb                	jmp    c001db2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001db6f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001db75:	0f ba e0 1e          	bt     eax,0x1e
c001db79:	72 b7                	jb     c001db32 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001db7b:	31 c0                	xor    eax,eax
c001db7d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001db82:	75 10                	jne    c001db94 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001db84:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001db8a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001db94:	83 c4 2c             	add    esp,0x2c
c001db97:	5b                   	pop    ebx
c001db98:	5e                   	pop    esi
c001db99:	5f                   	pop    edi
c001db9a:	5d                   	pop    ebp
c001db9b:	c3                   	ret    

c001db9c <SATA::read(unsigned long long, int, void*)>:
c001db9c:	55                   	push   ebp
c001db9d:	57                   	push   edi
c001db9e:	56                   	push   esi
c001db9f:	be 04 00 00 00       	mov    esi,0x4
c001dba4:	53                   	push   ebx
c001dba5:	83 ec 0c             	sub    esp,0xc
c001dba8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dbac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dbb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dbb8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dbbb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dbc1:	0f 87 1a 02 00 00    	ja     c001dde1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbc7:	85 c9                	test   ecx,ecx
c001dbc9:	be 06 00 00 00       	mov    esi,0x6
c001dbce:	0f 84 0d 02 00 00    	je     c001dde1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbd4:	56                   	push   esi
c001dbd5:	56                   	push   esi
c001dbd6:	6a 00                	push   0x0
c001dbd8:	51                   	push   ecx
c001dbd9:	53                   	push   ebx
c001dbda:	52                   	push   edx
c001dbdb:	50                   	push   eax
c001dbdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbe0:	e8 65 fd ff ff       	call   c001d94a <SATA::access(unsigned long long, int, void*, bool)>
c001dbe5:	83 c4 20             	add    esp,0x20
c001dbe8:	85 c0                	test   eax,eax
c001dbea:	89 c6                	mov    esi,eax
c001dbec:	0f 85 ea 01 00 00    	jne    c001dddc <SATA::read(unsigned long long, int, void*)+0x240>
c001dbf2:	50                   	push   eax
c001dbf3:	50                   	push   eax
c001dbf4:	6a 0f                	push   0xf
c001dbf6:	6a 00                	push   0x0
c001dbf8:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001dbfe:	bb 0a 00 00 00       	mov    ebx,0xa
c001dc03:	e8 7d f2 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dc08:	5a                   	pop    edx
c001dc09:	59                   	pop    ecx
c001dc0a:	b9 10 27 00 00       	mov    ecx,0x2710
c001dc0f:	0f b6 c0             	movzx  eax,al
c001dc12:	50                   	push   eax
c001dc13:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc18:	99                   	cdq    
c001dc19:	f7 f9                	idiv   ecx
c001dc1b:	99                   	cdq    
c001dc1c:	f7 fb                	idiv   ebx
c001dc1e:	8d 42 30             	lea    eax,[edx+0x30]
c001dc21:	0f b6 c0             	movzx  eax,al
c001dc24:	50                   	push   eax
c001dc25:	e8 4a f2 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dc2a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc30:	5f                   	pop    edi
c001dc31:	5d                   	pop    ebp
c001dc32:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dc37:	6a 0f                	push   0xf
c001dc39:	6a 00                	push   0x0
c001dc3b:	e8 45 f2 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dc40:	5a                   	pop    edx
c001dc41:	59                   	pop    ecx
c001dc42:	0f b6 c0             	movzx  eax,al
c001dc45:	50                   	push   eax
c001dc46:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc4b:	99                   	cdq    
c001dc4c:	f7 fd                	idiv   ebp
c001dc4e:	99                   	cdq    
c001dc4f:	f7 fb                	idiv   ebx
c001dc51:	8d 42 30             	lea    eax,[edx+0x30]
c001dc54:	0f b6 c0             	movzx  eax,al
c001dc57:	50                   	push   eax
c001dc58:	e8 17 f2 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dc5d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc63:	5f                   	pop    edi
c001dc64:	bf 64 00 00 00       	mov    edi,0x64
c001dc69:	58                   	pop    eax
c001dc6a:	6a 0f                	push   0xf
c001dc6c:	6a 00                	push   0x0
c001dc6e:	e8 12 f2 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dc73:	5a                   	pop    edx
c001dc74:	59                   	pop    ecx
c001dc75:	0f b6 c0             	movzx  eax,al
c001dc78:	50                   	push   eax
c001dc79:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc7e:	99                   	cdq    
c001dc7f:	f7 ff                	idiv   edi
c001dc81:	99                   	cdq    
c001dc82:	f7 fb                	idiv   ebx
c001dc84:	8d 42 30             	lea    eax,[edx+0x30]
c001dc87:	0f b6 c0             	movzx  eax,al
c001dc8a:	50                   	push   eax
c001dc8b:	e8 e4 f1 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dc90:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc96:	58                   	pop    eax
c001dc97:	5a                   	pop    edx
c001dc98:	6a 0f                	push   0xf
c001dc9a:	6a 00                	push   0x0
c001dc9c:	e8 e4 f1 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dca1:	59                   	pop    ecx
c001dca2:	5a                   	pop    edx
c001dca3:	0f b6 c0             	movzx  eax,al
c001dca6:	50                   	push   eax
c001dca7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcac:	99                   	cdq    
c001dcad:	f7 fb                	idiv   ebx
c001dcaf:	99                   	cdq    
c001dcb0:	f7 fb                	idiv   ebx
c001dcb2:	8d 42 30             	lea    eax,[edx+0x30]
c001dcb5:	0f b6 c0             	movzx  eax,al
c001dcb8:	50                   	push   eax
c001dcb9:	e8 b6 f1 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dcbe:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dcc4:	59                   	pop    ecx
c001dcc5:	58                   	pop    eax
c001dcc6:	6a 0f                	push   0xf
c001dcc8:	6a 00                	push   0x0
c001dcca:	e8 b6 f1 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dccf:	5a                   	pop    edx
c001dcd0:	59                   	pop    ecx
c001dcd1:	0f b6 c0             	movzx  eax,al
c001dcd4:	50                   	push   eax
c001dcd5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcda:	99                   	cdq    
c001dcdb:	f7 fb                	idiv   ebx
c001dcdd:	83 c2 30             	add    edx,0x30
c001dce0:	0f b6 d2             	movzx  edx,dl
c001dce3:	52                   	push   edx
c001dce4:	e8 8b f1 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dce9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dcef:	58                   	pop    eax
c001dcf0:	5a                   	pop    edx
c001dcf1:	6a 0f                	push   0xf
c001dcf3:	6a 00                	push   0x0
c001dcf5:	e8 8b f1 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dcfa:	59                   	pop    ecx
c001dcfb:	b9 10 27 00 00       	mov    ecx,0x2710
c001dd00:	5a                   	pop    edx
c001dd01:	0f b6 c0             	movzx  eax,al
c001dd04:	50                   	push   eax
c001dd05:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd0a:	99                   	cdq    
c001dd0b:	f7 f9                	idiv   ecx
c001dd0d:	99                   	cdq    
c001dd0e:	f7 fb                	idiv   ebx
c001dd10:	8d 42 30             	lea    eax,[edx+0x30]
c001dd13:	0f b6 c0             	movzx  eax,al
c001dd16:	50                   	push   eax
c001dd17:	e8 58 f1 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dd1c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dd22:	59                   	pop    ecx
c001dd23:	58                   	pop    eax
c001dd24:	6a 0f                	push   0xf
c001dd26:	6a 00                	push   0x0
c001dd28:	e8 58 f1 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dd2d:	5a                   	pop    edx
c001dd2e:	59                   	pop    ecx
c001dd2f:	0f b6 c0             	movzx  eax,al
c001dd32:	50                   	push   eax
c001dd33:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd38:	99                   	cdq    
c001dd39:	f7 fd                	idiv   ebp
c001dd3b:	99                   	cdq    
c001dd3c:	f7 fb                	idiv   ebx
c001dd3e:	8d 42 30             	lea    eax,[edx+0x30]
c001dd41:	0f b6 c0             	movzx  eax,al
c001dd44:	50                   	push   eax
c001dd45:	e8 2a f1 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dd4a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd50:	5d                   	pop    ebp
c001dd51:	58                   	pop    eax
c001dd52:	6a 0f                	push   0xf
c001dd54:	6a 00                	push   0x0
c001dd56:	e8 2a f1 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dd5b:	5a                   	pop    edx
c001dd5c:	59                   	pop    ecx
c001dd5d:	0f b6 c0             	movzx  eax,al
c001dd60:	50                   	push   eax
c001dd61:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd66:	99                   	cdq    
c001dd67:	f7 ff                	idiv   edi
c001dd69:	99                   	cdq    
c001dd6a:	f7 fb                	idiv   ebx
c001dd6c:	8d 42 30             	lea    eax,[edx+0x30]
c001dd6f:	0f b6 c0             	movzx  eax,al
c001dd72:	50                   	push   eax
c001dd73:	e8 fc f0 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dd78:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd7e:	5f                   	pop    edi
c001dd7f:	5d                   	pop    ebp
c001dd80:	6a 0f                	push   0xf
c001dd82:	6a 00                	push   0x0
c001dd84:	e8 fc f0 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dd89:	5a                   	pop    edx
c001dd8a:	59                   	pop    ecx
c001dd8b:	0f b6 c0             	movzx  eax,al
c001dd8e:	50                   	push   eax
c001dd8f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd94:	99                   	cdq    
c001dd95:	f7 fb                	idiv   ebx
c001dd97:	99                   	cdq    
c001dd98:	f7 fb                	idiv   ebx
c001dd9a:	8d 42 30             	lea    eax,[edx+0x30]
c001dd9d:	0f b6 c0             	movzx  eax,al
c001dda0:	50                   	push   eax
c001dda1:	e8 ce f0 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dda6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ddac:	5f                   	pop    edi
c001ddad:	5d                   	pop    ebp
c001ddae:	6a 0f                	push   0xf
c001ddb0:	6a 00                	push   0x0
c001ddb2:	e8 ce f0 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001ddb7:	5a                   	pop    edx
c001ddb8:	59                   	pop    ecx
c001ddb9:	0f b6 c0             	movzx  eax,al
c001ddbc:	50                   	push   eax
c001ddbd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddc2:	99                   	cdq    
c001ddc3:	f7 fb                	idiv   ebx
c001ddc5:	83 c2 30             	add    edx,0x30
c001ddc8:	0f b6 d2             	movzx  edx,dl
c001ddcb:	52                   	push   edx
c001ddcc:	e8 a3 f0 ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ddda:	eb 05                	jmp    c001dde1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dddc:	be 01 00 00 00       	mov    esi,0x1
c001dde1:	83 c4 0c             	add    esp,0xc
c001dde4:	89 f0                	mov    eax,esi
c001dde6:	5b                   	pop    ebx
c001dde7:	5e                   	pop    esi
c001dde8:	5f                   	pop    edi
c001dde9:	5d                   	pop    ebp
c001ddea:	c3                   	ret    
c001ddeb:	90                   	nop

c001ddec <SATA::write(unsigned long long, int, void*)>:
c001ddec:	55                   	push   ebp
c001dded:	57                   	push   edi
c001ddee:	56                   	push   esi
c001ddef:	53                   	push   ebx
c001ddf0:	83 ec 0c             	sub    esp,0xc
c001ddf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ddf7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ddfb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ddff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de03:	8d 70 ff             	lea    esi,[eax-0x1]
c001de06:	b8 04 00 00 00       	mov    eax,0x4
c001de0b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001de11:	0f 87 2c 02 00 00    	ja     c001e043 <SATA::write(unsigned long long, int, void*)+0x257>
c001de17:	85 db                	test   ebx,ebx
c001de19:	b8 06 00 00 00       	mov    eax,0x6
c001de1e:	0f 84 1f 02 00 00    	je     c001e043 <SATA::write(unsigned long long, int, void*)+0x257>
c001de24:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001de28:	c1 e6 09             	shl    esi,0x9
c001de2b:	01 de                	add    esi,ebx
c001de2d:	50                   	push   eax
c001de2e:	89 d7                	mov    edi,edx
c001de30:	50                   	push   eax
c001de31:	83 c7 01             	add    edi,0x1
c001de34:	6a 01                	push   0x1
c001de36:	89 cd                	mov    ebp,ecx
c001de38:	53                   	push   ebx
c001de39:	83 d5 00             	adc    ebp,0x0
c001de3c:	6a 01                	push   0x1
c001de3e:	81 c3 00 02 00 00    	add    ebx,0x200
c001de44:	51                   	push   ecx
c001de45:	52                   	push   edx
c001de46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de4a:	e8 fb fa ff ff       	call   c001d94a <SATA::access(unsigned long long, int, void*, bool)>
c001de4f:	83 c4 20             	add    esp,0x20
c001de52:	39 f3                	cmp    ebx,esi
c001de54:	89 fa                	mov    edx,edi
c001de56:	89 e9                	mov    ecx,ebp
c001de58:	75 d3                	jne    c001de2d <SATA::write(unsigned long long, int, void*)+0x41>
c001de5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001de5e:	bd 10 27 00 00       	mov    ebp,0x2710
c001de63:	bb 0a 00 00 00       	mov    ebx,0xa
c001de68:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001de6e:	50                   	push   eax
c001de6f:	50                   	push   eax
c001de70:	6a 0f                	push   0xf
c001de72:	6a 00                	push   0x0
c001de74:	e8 0c f0 ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001de79:	5a                   	pop    edx
c001de7a:	59                   	pop    ecx
c001de7b:	0f b6 c0             	movzx  eax,al
c001de7e:	50                   	push   eax
c001de7f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de84:	99                   	cdq    
c001de85:	f7 fd                	idiv   ebp
c001de87:	99                   	cdq    
c001de88:	f7 fb                	idiv   ebx
c001de8a:	8d 42 30             	lea    eax,[edx+0x30]
c001de8d:	0f b6 c0             	movzx  eax,al
c001de90:	50                   	push   eax
c001de91:	e8 de ef ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001de96:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001de9c:	5e                   	pop    esi
c001de9d:	5f                   	pop    edi
c001de9e:	bf e8 03 00 00       	mov    edi,0x3e8
c001dea3:	6a 0f                	push   0xf
c001dea5:	6a 00                	push   0x0
c001dea7:	e8 d9 ef ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001deac:	5a                   	pop    edx
c001dead:	59                   	pop    ecx
c001deae:	0f b6 c0             	movzx  eax,al
c001deb1:	50                   	push   eax
c001deb2:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001deb7:	99                   	cdq    
c001deb8:	f7 ff                	idiv   edi
c001deba:	99                   	cdq    
c001debb:	f7 fb                	idiv   ebx
c001debd:	8d 42 30             	lea    eax,[edx+0x30]
c001dec0:	0f b6 c0             	movzx  eax,al
c001dec3:	50                   	push   eax
c001dec4:	e8 ab ef ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dec9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001decf:	5e                   	pop    esi
c001ded0:	be 64 00 00 00       	mov    esi,0x64
c001ded5:	58                   	pop    eax
c001ded6:	6a 0f                	push   0xf
c001ded8:	6a 00                	push   0x0
c001deda:	e8 a6 ef ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dedf:	5a                   	pop    edx
c001dee0:	59                   	pop    ecx
c001dee1:	0f b6 c0             	movzx  eax,al
c001dee4:	50                   	push   eax
c001dee5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001deea:	99                   	cdq    
c001deeb:	f7 fe                	idiv   esi
c001deed:	99                   	cdq    
c001deee:	f7 fb                	idiv   ebx
c001def0:	8d 42 30             	lea    eax,[edx+0x30]
c001def3:	0f b6 c0             	movzx  eax,al
c001def6:	50                   	push   eax
c001def7:	e8 78 ef ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001defc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df02:	58                   	pop    eax
c001df03:	5a                   	pop    edx
c001df04:	6a 0f                	push   0xf
c001df06:	6a 00                	push   0x0
c001df08:	e8 78 ef ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001df0d:	59                   	pop    ecx
c001df0e:	5a                   	pop    edx
c001df0f:	0f b6 c0             	movzx  eax,al
c001df12:	50                   	push   eax
c001df13:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001df18:	99                   	cdq    
c001df19:	f7 fb                	idiv   ebx
c001df1b:	99                   	cdq    
c001df1c:	f7 fb                	idiv   ebx
c001df1e:	8d 42 30             	lea    eax,[edx+0x30]
c001df21:	0f b6 c0             	movzx  eax,al
c001df24:	50                   	push   eax
c001df25:	e8 4a ef ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001df2a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df30:	59                   	pop    ecx
c001df31:	58                   	pop    eax
c001df32:	6a 0f                	push   0xf
c001df34:	6a 00                	push   0x0
c001df36:	e8 4a ef ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001df3b:	5a                   	pop    edx
c001df3c:	59                   	pop    ecx
c001df3d:	0f b6 c0             	movzx  eax,al
c001df40:	50                   	push   eax
c001df41:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001df46:	99                   	cdq    
c001df47:	f7 fb                	idiv   ebx
c001df49:	83 c2 30             	add    edx,0x30
c001df4c:	0f b6 d2             	movzx  edx,dl
c001df4f:	52                   	push   edx
c001df50:	e8 1f ef ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001df55:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df5b:	58                   	pop    eax
c001df5c:	5a                   	pop    edx
c001df5d:	6a 0f                	push   0xf
c001df5f:	6a 00                	push   0x0
c001df61:	e8 1f ef ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001df66:	59                   	pop    ecx
c001df67:	5a                   	pop    edx
c001df68:	0f b6 c0             	movzx  eax,al
c001df6b:	50                   	push   eax
c001df6c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df71:	99                   	cdq    
c001df72:	f7 fd                	idiv   ebp
c001df74:	99                   	cdq    
c001df75:	f7 fb                	idiv   ebx
c001df77:	8d 42 30             	lea    eax,[edx+0x30]
c001df7a:	0f b6 c0             	movzx  eax,al
c001df7d:	50                   	push   eax
c001df7e:	e8 f1 ee ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001df83:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001df89:	59                   	pop    ecx
c001df8a:	5d                   	pop    ebp
c001df8b:	6a 0f                	push   0xf
c001df8d:	6a 00                	push   0x0
c001df8f:	e8 f1 ee ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001df94:	5a                   	pop    edx
c001df95:	59                   	pop    ecx
c001df96:	0f b6 c0             	movzx  eax,al
c001df99:	50                   	push   eax
c001df9a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df9f:	99                   	cdq    
c001dfa0:	f7 ff                	idiv   edi
c001dfa2:	99                   	cdq    
c001dfa3:	f7 fb                	idiv   ebx
c001dfa5:	8d 42 30             	lea    eax,[edx+0x30]
c001dfa8:	0f b6 c0             	movzx  eax,al
c001dfab:	50                   	push   eax
c001dfac:	e8 c3 ee ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dfb1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dfb7:	5f                   	pop    edi
c001dfb8:	5d                   	pop    ebp
c001dfb9:	6a 0f                	push   0xf
c001dfbb:	6a 00                	push   0x0
c001dfbd:	e8 c3 ee ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dfc2:	5a                   	pop    edx
c001dfc3:	59                   	pop    ecx
c001dfc4:	0f b6 c0             	movzx  eax,al
c001dfc7:	50                   	push   eax
c001dfc8:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dfcd:	99                   	cdq    
c001dfce:	f7 fe                	idiv   esi
c001dfd0:	99                   	cdq    
c001dfd1:	f7 fb                	idiv   ebx
c001dfd3:	8d 42 30             	lea    eax,[edx+0x30]
c001dfd6:	0f b6 c0             	movzx  eax,al
c001dfd9:	50                   	push   eax
c001dfda:	e8 95 ee ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001dfdf:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dfe5:	5e                   	pop    esi
c001dfe6:	5f                   	pop    edi
c001dfe7:	6a 0f                	push   0xf
c001dfe9:	6a 00                	push   0x0
c001dfeb:	e8 95 ee ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001dff0:	5d                   	pop    ebp
c001dff1:	5a                   	pop    edx
c001dff2:	0f b6 c0             	movzx  eax,al
c001dff5:	50                   	push   eax
c001dff6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dffb:	99                   	cdq    
c001dffc:	f7 fb                	idiv   ebx
c001dffe:	99                   	cdq    
c001dfff:	f7 fb                	idiv   ebx
c001e001:	8d 42 30             	lea    eax,[edx+0x30]
c001e004:	0f b6 c0             	movzx  eax,al
c001e007:	50                   	push   eax
c001e008:	e8 67 ee ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001e00d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e013:	59                   	pop    ecx
c001e014:	5e                   	pop    esi
c001e015:	6a 0f                	push   0xf
c001e017:	6a 00                	push   0x0
c001e019:	e8 67 ee ff ff       	call   c001ce85 <combineColours(unsigned char, unsigned char)>
c001e01e:	5f                   	pop    edi
c001e01f:	5d                   	pop    ebp
c001e020:	0f b6 c0             	movzx  eax,al
c001e023:	50                   	push   eax
c001e024:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001e029:	99                   	cdq    
c001e02a:	f7 fb                	idiv   ebx
c001e02c:	83 c2 30             	add    edx,0x30
c001e02f:	0f b6 d2             	movzx  edx,dl
c001e032:	52                   	push   edx
c001e033:	e8 3c ee ff ff       	call   c001ce74 <combineCharAndColour(char, unsigned char)>
c001e038:	83 c4 10             	add    esp,0x10
c001e03b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e041:	31 c0                	xor    eax,eax
c001e043:	83 c4 0c             	add    esp,0xc
c001e046:	5b                   	pop    ebx
c001e047:	5e                   	pop    esi
c001e048:	5f                   	pop    edi
c001e049:	5d                   	pop    ebp
c001e04a:	c3                   	ret    
c001e04b:	90                   	nop

c001e04c <SATAPI::write(unsigned long long, int, void*)>:
c001e04c:	b8 03 00 00 00       	mov    eax,0x3
c001e051:	c3                   	ret    

c001e052 <SATAPI::close(int, int, void*)>:
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e059:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e05f:	85 c0                	test   eax,eax
c001e061:	74 0c                	je     c001e06f <SATAPI::close(int, int, void*)+0x1d>
c001e063:	8b 10                	mov    edx,DWORD PTR [eax]
c001e065:	83 ec 0c             	sub    esp,0xc
c001e068:	50                   	push   eax
c001e069:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	31 c0                	xor    eax,eax
c001e071:	83 c4 0c             	add    esp,0xc
c001e074:	c3                   	ret    
c001e075:	90                   	nop

c001e076 <SATAPI::SATAPI()>:
c001e076:	83 ec 0c             	sub    esp,0xc
c001e079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07d:	83 ec 04             	sub    esp,0x4
c001e080:	68 00 08 00 00       	push   0x800
c001e085:	68 7c 30 02 c0       	push   0xc002307c
c001e08a:	50                   	push   eax
c001e08b:	e8 6a ea fe ff       	call   c000cafa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e090:	83 c4 10             	add    esp,0x10
c001e093:	ba 70 31 02 c0       	mov    edx,0xc0023170
c001e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09c:	89 10                	mov    DWORD PTR [eax],edx
c001e09e:	90                   	nop
c001e09f:	83 c4 0c             	add    esp,0xc
c001e0a2:	c3                   	ret    
c001e0a3:	90                   	nop

c001e0a4 <SATAPI::diskRemoved()>:
c001e0a4:	c3                   	ret    
c001e0a5:	90                   	nop

c001e0a6 <SATAPI::diskInserted()>:
c001e0a6:	83 ec 18             	sub    esp,0x18
c001e0a9:	68 88 30 02 c0       	push   0xc0023088
c001e0ae:	e8 57 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0b7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e0be:	83 c4 1c             	add    esp,0x1c
c001e0c1:	c3                   	ret    

c001e0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e0c2:	55                   	push   ebp
c001e0c3:	57                   	push   edi
c001e0c4:	56                   	push   esi
c001e0c5:	53                   	push   ebx
c001e0c6:	83 ec 34             	sub    esp,0x34
c001e0c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e0cd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e0d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0d5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e0d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0dd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e0e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e0e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e0ed:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e0f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e0f7:	83 c0 02             	add    eax,0x2
c001e0fa:	c1 e0 07             	shl    eax,0x7
c001e0fd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e109:	c1 e0 07             	shl    eax,0x7
c001e10c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e110:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e114:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e11e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e122:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e128:	e8 ff e4 ff ff       	call   c001c62c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e12d:	83 c4 10             	add    esp,0x10
c001e130:	89 c2                	mov    edx,eax
c001e132:	b8 01 00 00 00       	mov    eax,0x1
c001e137:	83 fa ff             	cmp    edx,0xffffffff
c001e13a:	0f 84 5f 02 00 00    	je     c001e39f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e148:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e14e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e150:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e156:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e15c:	89 d1                	mov    ecx,edx
c001e15e:	c1 e1 05             	shl    ecx,0x5
c001e161:	01 c8                	add    eax,ecx
c001e163:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e165:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e16b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e171:	89 08                	mov    DWORD PTR [eax],ecx
c001e173:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e179:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e17f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e185:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e188:	50                   	push   eax
c001e189:	68 90 00 00 00       	push   0x90
c001e18e:	6a 00                	push   0x0
c001e190:	53                   	push   ebx
c001e191:	e8 5a 23 fe ff       	call   c00004f0 <memset>
c001e196:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e199:	b9 0c 00 00 00       	mov    ecx,0xc
c001e19e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e1a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1a4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e1aa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e1ae:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e1b2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e1b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e1bc:	48                   	dec    eax
c001e1bd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e1c2:	89 c1                	mov    ecx,eax
c001e1c4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e1ca:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e1cf:	09 c8                	or     eax,ecx
c001e1d1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e1d7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e1dd:	83 c8 80             	or     eax,0xffffff80
c001e1e0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e1e6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e1e9:	25 00 7f 00 00       	and    eax,0x7f00
c001e1ee:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e1f3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1fa:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e1fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e202:	c1 e8 10             	shr    eax,0x10
c001e205:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e20c:	c1 e8 18             	shr    eax,0x18
c001e20f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e212:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e216:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e219:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e21d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e220:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e224:	83 c4 10             	add    esp,0x10
c001e227:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e22b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e22f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e233:	31 c0                	xor    eax,eax
c001e235:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e23b:	80 e1 88             	and    cl,0x88
c001e23e:	74 0a                	je     c001e24a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e240:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e245:	74 0a                	je     c001e251 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e247:	40                   	inc    eax
c001e248:	eb eb                	jmp    c001e235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e24a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e24f:	75 43                	jne    c001e294 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e251:	83 ec 0c             	sub    esp,0xc
c001e254:	68 a0 30 02 c0       	push   0xc00230a0
c001e259:	e8 ac c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e25e:	58                   	pop    eax
c001e25f:	5a                   	pop    edx
c001e260:	68 b5 30 02 c0       	push   0xc00230b5
c001e265:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e26b:	e8 3c a8 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e270:	59                   	pop    ecx
c001e271:	5b                   	pop    ebx
c001e272:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e276:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e27c:	e8 45 e4 ff ff       	call   c001c6c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e281:	5e                   	pop    esi
c001e282:	5f                   	pop    edi
c001e283:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e287:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e28d:	e8 14 e4 ff ff       	call   c001c6a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e292:	eb 48                	jmp    c001e2dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e294:	b8 01 00 00 00       	mov    eax,0x1
c001e299:	88 d1                	mov    cl,dl
c001e29b:	d3 e0                	shl    eax,cl
c001e29d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e2a2:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e2a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2ac:	89 c7                	mov    edi,eax
c001e2ae:	c1 e3 07             	shl    ebx,0x7
c001e2b1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e2b5:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e2bb:	85 c7                	test   edi,eax
c001e2bd:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e2c3:	0f 84 a3 00 00 00    	je     c001e36c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e2c9:	0f ba e0 1e          	bt     eax,0x1e
c001e2cd:	73 1a                	jae    c001e2e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e2cf:	83 ec 0c             	sub    esp,0xc
c001e2d2:	68 c7 30 02 c0       	push   0xc00230c7
c001e2d7:	e8 2e c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e2dc:	83 c4 10             	add    esp,0x10
c001e2df:	b8 01 00 00 00       	mov    eax,0x1
c001e2e4:	e9 b6 00 00 00       	jmp    c001e39f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e2e9:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e2ef:	83 f8 0d             	cmp    eax,0xd
c001e2f2:	77 0a                	ja     c001e2fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e2f4:	83 ec 0c             	sub    esp,0xc
c001e2f7:	68 c8 00 00 00       	push   0xc8
c001e2fc:	eb 28                	jmp    c001e326 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e2fe:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e304:	83 f8 0d             	cmp    eax,0xd
c001e307:	77 0a                	ja     c001e313 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e309:	83 ec 0c             	sub    esp,0xc
c001e30c:	68 58 02 00 00       	push   0x258
c001e311:	eb 13                	jmp    c001e326 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e313:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e319:	83 f8 06             	cmp    eax,0x6
c001e31c:	77 10                	ja     c001e32e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	68 dc 05 00 00       	push   0x5dc
c001e326:	e8 69 7d ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001e32b:	83 c4 10             	add    esp,0x10
c001e32e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e332:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e335:	75 06                	jne    c001e33d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e337:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e33b:	74 15                	je     c001e352 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e33d:	83 fe 06             	cmp    esi,0x6
c001e340:	77 10                	ja     c001e352 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e342:	83 ec 0c             	sub    esp,0xc
c001e345:	68 c4 09 00 00       	push   0x9c4
c001e34a:	e8 45 7d ff ff       	call   c0016094 <milliTenthSleep(unsigned int)>
c001e34f:	83 c4 10             	add    esp,0x10
c001e352:	46                   	inc    esi
c001e353:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e359:	0f 85 56 ff ff ff    	jne    c001e2b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e35f:	83 ec 0c             	sub    esp,0xc
c001e362:	68 da 30 02 c0       	push   0xc00230da
c001e367:	e9 6b ff ff ff       	jmp    c001e2d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e36c:	0f ba e0 1e          	bt     eax,0x1e
c001e370:	73 0d                	jae    c001e37f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e372:	83 ec 0c             	sub    esp,0xc
c001e375:	68 ee 30 02 c0       	push   0xc00230ee
c001e37a:	e9 58 ff ff ff       	jmp    c001e2d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e37f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e384:	74 17                	je     c001e39d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e386:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e38b:	74 10                	je     c001e39d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e38d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e393:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e397:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e39b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e39d:	31 c0                	xor    eax,eax
c001e39f:	83 c4 2c             	add    esp,0x2c
c001e3a2:	5b                   	pop    ebx
c001e3a3:	5e                   	pop    esi
c001e3a4:	5f                   	pop    edi
c001e3a5:	5d                   	pop    ebp
c001e3a6:	c3                   	ret    
c001e3a7:	90                   	nop

c001e3a8 <SATAPI::eject()>:
c001e3a8:	57                   	push   edi
c001e3a9:	b9 03 00 00 00       	mov    ecx,0x3
c001e3ae:	83 ec 18             	sub    esp,0x18
c001e3b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e3b5:	fc                   	cld    
c001e3b6:	31 c0                	xor    eax,eax
c001e3b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3ba:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e3bf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e3c4:	50                   	push   eax
c001e3c5:	6a 00                	push   0x0
c001e3c7:	6a 00                	push   0x0
c001e3c9:	6a 00                	push   0x0
c001e3cb:	6a 00                	push   0x0
c001e3cd:	6a 02                	push   0x2
c001e3cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e3d3:	50                   	push   eax
c001e3d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e3d8:	e8 e5 fc ff ff       	call   c001e0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e3dd:	83 c4 38             	add    esp,0x38
c001e3e0:	31 c0                	xor    eax,eax
c001e3e2:	5f                   	pop    edi
c001e3e3:	c3                   	ret    

c001e3e4 <SATAPI::detectMedia()>:
c001e3e4:	53                   	push   ebx
c001e3e5:	83 ec 14             	sub    esp,0x14
c001e3e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e3ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e3f2:	e8 89 00 ff ff       	call   c000e480 <VCache::writeWriteBuffer()>
c001e3f7:	59                   	pop    ecx
c001e3f8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e3fe:	e8 6d 00 ff ff       	call   c000e470 <VCache::invalidateReadBuffer()>
c001e403:	c7 04 24 03 31 02 c0 	mov    DWORD PTR [esp],0xc0023103
c001e40a:	e8 fb c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e40f:	83 c4 10             	add    esp,0x10
c001e412:	31 c0                	xor    eax,eax
c001e414:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e41b:	85 d2                	test   edx,edx
c001e41d:	74 0f                	je     c001e42e <SATAPI::detectMedia()+0x4a>
c001e41f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e425:	75 07                	jne    c001e42e <SATAPI::detectMedia()+0x4a>
c001e427:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e42e:	40                   	inc    eax
c001e42f:	83 f8 1a             	cmp    eax,0x1a
c001e432:	75 e0                	jne    c001e414 <SATAPI::detectMedia()+0x30>
c001e434:	83 c4 08             	add    esp,0x8
c001e437:	5b                   	pop    ebx
c001e438:	c3                   	ret    
c001e439:	90                   	nop

c001e43a <SATAPI::open(int, int, void*)>:
c001e43a:	56                   	push   esi
c001e43b:	53                   	push   ebx
c001e43c:	51                   	push   ecx
c001e43d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e445:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e44f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e455:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e459:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e463:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e46d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e474:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e47a:	e8 63 99 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e47f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e485:	89 c6                	mov    esi,eax
c001e487:	e8 56 99 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e48c:	81 c6 00 10 00 00    	add    esi,0x1000
c001e492:	39 c6                	cmp    esi,eax
c001e494:	74 10                	je     c001e4a6 <SATAPI::open(int, int, void*)+0x6c>
c001e496:	83 ec 0c             	sub    esp,0xc
c001e499:	68 18 31 02 c0       	push   0xc0023118
c001e49e:	e8 26 2e ff ff       	call   c00112c9 <KePanic(char const*)>
c001e4a3:	83 c4 10             	add    esp,0x10
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	6a 02                	push   0x2
c001e4ab:	e8 45 b1 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e4b0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e4b6:	6a 03                	push   0x3
c001e4b8:	50                   	push   eax
c001e4b9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e4bf:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e4c5:	e8 34 b8 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e4ca:	83 c4 14             	add    esp,0x14
c001e4cd:	68 78 01 00 00       	push   0x178
c001e4d2:	e8 fc 95 fe ff       	call   c0007ad3 <malloc>
c001e4d7:	83 c4 0c             	add    esp,0xc
c001e4da:	6a 00                	push   0x0
c001e4dc:	68 ff ff ff 7f       	push   0x7fffffff
c001e4e1:	6a 00                	push   0x0
c001e4e3:	6a 00                	push   0x0
c001e4e5:	53                   	push   ebx
c001e4e6:	68 2e 31 02 c0       	push   0xc002312e
c001e4eb:	89 c6                	mov    esi,eax
c001e4ed:	50                   	push   eax
c001e4ee:	e8 e7 f3 fe ff       	call   c000d8da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e4f3:	83 c4 14             	add    esp,0x14
c001e4f6:	56                   	push   esi
c001e4f7:	e8 9e f4 fe ff       	call   c000d99a <LogicalDisk::assignDriveLetter()>
c001e4fc:	5a                   	pop    edx
c001e4fd:	59                   	pop    ecx
c001e4fe:	0f be c0             	movsx  eax,al
c001e501:	50                   	push   eax
c001e502:	68 80 2f 02 c0       	push   0xc0022f80
c001e507:	e8 fe c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e50c:	58                   	pop    eax
c001e50d:	5a                   	pop    edx
c001e50e:	56                   	push   esi
c001e50f:	53                   	push   ebx
c001e510:	e8 17 e2 fe ff       	call   c000c72c <Device::addChild(Device*)>
c001e515:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e51b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e51e:	e8 3f e6 fe ff       	call   c000cb62 <PhysicalDisk::startCache()>
c001e523:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e52a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e52d:	e8 b2 fe ff ff       	call   c001e3e4 <SATAPI::detectMedia()>
c001e532:	83 c4 14             	add    esp,0x14
c001e535:	31 c0                	xor    eax,eax
c001e537:	5b                   	pop    ebx
c001e538:	5e                   	pop    esi
c001e539:	c3                   	ret    

c001e53a <SATAPI::read(unsigned long long, int, void*)>:
c001e53a:	55                   	push   ebp
c001e53b:	57                   	push   edi
c001e53c:	56                   	push   esi
c001e53d:	53                   	push   ebx
c001e53e:	83 ec 3c             	sub    esp,0x3c
c001e541:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e545:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e549:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e54d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e551:	83 fd 04             	cmp    ebp,0x4
c001e554:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e55c:	7e 10                	jle    c001e56e <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e55e:	83 ec 0c             	sub    esp,0xc
c001e561:	68 3c 31 02 c0       	push   0xc002313c
c001e566:	e8 5e 2d ff ff       	call   c00112c9 <KePanic(char const*)>
c001e56b:	83 c4 10             	add    esp,0x10
c001e56e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e574:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e57a:	51                   	push   ecx
c001e57b:	50                   	push   eax
c001e57c:	83 c0 02             	add    eax,0x2
c001e57f:	c1 e0 07             	shl    eax,0x7
c001e582:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e588:	50                   	push   eax
c001e589:	52                   	push   edx
c001e58a:	e8 61 e1 ff ff       	call   c001c6f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e58f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e593:	b9 03 00 00 00       	mov    ecx,0x3
c001e598:	fc                   	cld    
c001e599:	31 c0                	xor    eax,eax
c001e59b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e59d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e5a2:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e5a7:	83 c4 0c             	add    esp,0xc
c001e5aa:	6a 00                	push   0x0
c001e5ac:	6a 00                	push   0x0
c001e5ae:	6a 00                	push   0x0
c001e5b0:	6a 00                	push   0x0
c001e5b2:	6a 02                	push   0x2
c001e5b4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e5b8:	50                   	push   eax
c001e5b9:	53                   	push   ebx
c001e5ba:	e8 03 fb ff ff       	call   c001e0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e5bf:	83 c4 20             	add    esp,0x20
c001e5c2:	85 c0                	test   eax,eax
c001e5c4:	89 c6                	mov    esi,eax
c001e5c6:	75 46                	jne    c001e60e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e5c8:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e5cc:	b9 03 00 00 00       	mov    ecx,0x3
c001e5d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5d7:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e5dc:	0f c8                	bswap  eax
c001e5de:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e5e2:	89 e8                	mov    eax,ebp
c001e5e4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e5e8:	50                   	push   eax
c001e5e9:	55                   	push   ebp
c001e5ea:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e5ee:	c1 e5 0b             	shl    ebp,0xb
c001e5f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5f9:	55                   	push   ebp
c001e5fa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e5fe:	50                   	push   eax
c001e5ff:	53                   	push   ebx
c001e600:	e8 bd fa ff ff       	call   c001e0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e605:	83 c4 20             	add    esp,0x20
c001e608:	85 c0                	test   eax,eax
c001e60a:	89 c6                	mov    esi,eax
c001e60c:	74 0c                	je     c001e61a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e60e:	83 ec 0c             	sub    esp,0xc
c001e611:	53                   	push   ebx
c001e612:	e8 cd fd ff ff       	call   c001e3e4 <SATAPI::detectMedia()>
c001e617:	83 c4 10             	add    esp,0x10
c001e61a:	83 c4 3c             	add    esp,0x3c
c001e61d:	89 f0                	mov    eax,esi
c001e61f:	5b                   	pop    ebx
c001e620:	5e                   	pop    esi
c001e621:	5f                   	pop    edi
c001e622:	5d                   	pop    ebp
c001e623:	c3                   	ret    

c001e624 <IOAPIC::close(int, int, void*)>:
c001e624:	b8 00 00 00 00       	mov    eax,0x0
c001e629:	c3                   	ret    

c001e62a <apicGetBase()>:
c001e62a:	55                   	push   ebp
c001e62b:	89 e5                	mov    ebp,esp
c001e62d:	83 ec 18             	sub    esp,0x18
c001e630:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e635:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e63b:	83 e0 08             	and    eax,0x8
c001e63e:	0f b6 c0             	movzx  eax,al
c001e641:	85 c0                	test   eax,eax
c001e643:	75 07                	jne    c001e64c <apicGetBase()+0x22>
c001e645:	b8 00 00 00 00       	mov    eax,0x0
c001e64a:	eb 21                	jmp    c001e66d <apicGetBase()+0x43>
c001e64c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e651:	83 ec 08             	sub    esp,0x8
c001e654:	6a 1b                	push   0x1b
c001e656:	50                   	push   eax
c001e657:	e8 86 8a fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e65c:	83 c4 10             	add    esp,0x10
c001e65f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e662:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e665:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e668:	25 00 00 ff ff       	and    eax,0xffff0000
c001e66d:	c9                   	leave  
c001e66e:	c3                   	ret    
c001e66f:	90                   	nop

c001e670 <IOAPIC::IOAPIC()>:
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e677:	83 ec 08             	sub    esp,0x8
c001e67a:	68 a0 31 02 c0       	push   0xc00231a0
c001e67f:	50                   	push   eax
c001e680:	e8 3f e2 fe ff       	call   c000c8c4 <Device::Device(char const*)>
c001e685:	83 c4 10             	add    esp,0x10
c001e688:	ba b0 31 02 c0       	mov    edx,0xc00231b0
c001e68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e691:	89 10                	mov    DWORD PTR [eax],edx
c001e693:	90                   	nop
c001e694:	83 c4 0c             	add    esp,0xc
c001e697:	c3                   	ret    

c001e698 <apicOpen()>:
c001e698:	55                   	push   ebp
c001e699:	89 e5                	mov    ebp,esp
c001e69b:	53                   	push   ebx
c001e69c:	83 ec 34             	sub    esp,0x34
c001e69f:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e6a4:	83 f0 01             	xor    eax,0x1
c001e6a7:	0f b6 c0             	movzx  eax,al
c001e6aa:	85 c0                	test   eax,eax
c001e6ac:	0f 84 a3 00 00 00    	je     c001e755 <apicOpen()+0xbd>
c001e6b2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e6b6:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e6bb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e6bf:	0f b6 c0             	movzx  eax,al
c001e6c2:	39 c2                	cmp    edx,eax
c001e6c4:	0f 83 84 00 00 00    	jae    c001e74e <apicOpen()+0xb6>
c001e6ca:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e6d1:	83 ec 0c             	sub    esp,0xc
c001e6d4:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e6d7:	e8 f7 93 fe ff       	call   c0007ad3 <malloc>
c001e6dc:	83 c4 10             	add    esp,0x10
c001e6df:	89 c3                	mov    ebx,eax
c001e6e1:	83 ec 0c             	sub    esp,0xc
c001e6e4:	53                   	push   ebx
c001e6e5:	e8 86 ff ff ff       	call   c001e670 <IOAPIC::IOAPIC()>
c001e6ea:	83 c4 10             	add    esp,0x10
c001e6ed:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e6f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e6f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e6f7:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e6fe:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e703:	83 c0 01             	add    eax,0x1
c001e706:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e70b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e710:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e716:	83 ec 08             	sub    esp,0x8
c001e719:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e71c:	50                   	push   eax
c001e71d:	e8 0a e0 fe ff       	call   c000c72c <Device::addChild(Device*)>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e728:	8b 00                	mov    eax,DWORD PTR [eax]
c001e72a:	83 c0 08             	add    eax,0x8
c001e72d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e72f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e733:	6a 00                	push   0x0
c001e735:	6a 00                	push   0x0
c001e737:	52                   	push   edx
c001e738:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e73b:	ff d0                	call   eax
c001e73d:	83 c4 10             	add    esp,0x10
c001e740:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e743:	83 c0 01             	add    eax,0x1
c001e746:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e749:	e9 68 ff ff ff       	jmp    c001e6b6 <apicOpen()+0x1e>
c001e74e:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e755:	e8 d0 fe ff ff       	call   c001e62a <apicGetBase()>
c001e75a:	05 f0 00 00 00       	add    eax,0xf0
c001e75f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e762:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e765:	8b 00                	mov    eax,DWORD PTR [eax]
c001e767:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e76a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e771:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e778:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e77b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e77e:	89 10                	mov    DWORD PTR [eax],edx
c001e780:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e787:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e78c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e78f:	7d 7c                	jge    c001e80d <apicOpen()+0x175>
c001e791:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e794:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e79b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e79e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7a1:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e7a8:	c1 e8 08             	shr    eax,0x8
c001e7ab:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e7af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7b2:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e7b9:	c1 e8 18             	shr    eax,0x18
c001e7bc:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e7bf:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e7c3:	3d ff 00 00 00       	cmp    eax,0xff
c001e7c8:	75 3a                	jne    c001e804 <apicOpen()+0x16c>
c001e7ca:	e8 5b fe ff ff       	call   c001e62a <apicGetBase()>
c001e7cf:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e7d3:	83 fa 01             	cmp    edx,0x1
c001e7d6:	75 07                	jne    c001e7df <apicOpen()+0x147>
c001e7d8:	ba 60 03 00 00       	mov    edx,0x360
c001e7dd:	eb 05                	jmp    c001e7e4 <apicOpen()+0x14c>
c001e7df:	ba 50 03 00 00       	mov    edx,0x350
c001e7e4:	01 d0                	add    eax,edx
c001e7e6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e7e9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e7f1:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e7f8:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e7fc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e7ff:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e802:	89 10                	mov    DWORD PTR [eax],edx
c001e804:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e808:	e9 7a ff ff ff       	jmp    c001e787 <apicOpen()+0xef>
c001e80d:	90                   	nop
c001e80e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e811:	c9                   	leave  
c001e812:	c3                   	ret    
c001e813:	90                   	nop

c001e814 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e814:	55                   	push   ebp
c001e815:	89 e5                	mov    ebp,esp
c001e817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e81a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e820:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e823:	72 1d                	jb     c001e842 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e828:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e831:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e837:	01 d0                	add    eax,edx
c001e839:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e83c:	73 04                	jae    c001e842 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e83e:	b0 01                	mov    al,0x1
c001e840:	eb 02                	jmp    c001e844 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e842:	b0 00                	mov    al,0x0
c001e844:	5d                   	pop    ebp
c001e845:	c3                   	ret    

c001e846 <IOAPIC::read(int)>:
c001e846:	55                   	push   ebp
c001e847:	89 e5                	mov    ebp,esp
c001e849:	83 ec 10             	sub    esp,0x10
c001e84c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e84f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e855:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e858:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e85b:	0f b6 d0             	movzx  edx,al
c001e85e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e861:	89 10                	mov    DWORD PTR [eax],edx
c001e863:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e866:	83 c0 10             	add    eax,0x10
c001e869:	8b 00                	mov    eax,DWORD PTR [eax]
c001e86b:	c9                   	leave  
c001e86c:	c3                   	ret    
c001e86d:	90                   	nop

c001e86e <IOAPIC::open(int, int, void*)>:
c001e86e:	55                   	push   ebp
c001e86f:	89 e5                	mov    ebp,esp
c001e871:	57                   	push   edi
c001e872:	56                   	push   esi
c001e873:	53                   	push   ebx
c001e874:	83 ec 04             	sub    esp,0x4
c001e877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e87a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e87d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e886:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e88c:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e896:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e89c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e89f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e8a5:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8af:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e8be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8c1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e8c7:	0f b6 f0             	movzx  esi,al
c001e8ca:	89 d0                	mov    eax,edx
c001e8cc:	ba 00 00 00 00       	mov    edx,0x0
c001e8d1:	89 c7                	mov    edi,eax
c001e8d3:	83 e7 ff             	and    edi,0xffffffff
c001e8d6:	89 f9                	mov    ecx,edi
c001e8d8:	0f b6 da             	movzx  ebx,dl
c001e8db:	89 c8                	mov    eax,ecx
c001e8dd:	89 da                	mov    edx,ebx
c001e8df:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e8e2:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e8e5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e8e9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e8ed:	83 e0 00             	and    eax,0x0
c001e8f0:	09 d0                	or     eax,edx
c001e8f2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8f9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e8ff:	8d 50 01             	lea    edx,[eax+0x1]
c001e902:	88 d1                	mov    cl,dl
c001e904:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e907:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e90d:	0f b6 d0             	movzx  edx,al
c001e910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e913:	83 c2 08             	add    edx,0x8
c001e916:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e91a:	0f b6 c9             	movzx  ecx,cl
c001e91d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e923:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e927:	6a 01                	push   0x1
c001e929:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e92c:	e8 15 ff ff ff       	call   c001e846 <IOAPIC::read(int)>
c001e931:	83 c4 08             	add    esp,0x8
c001e934:	c1 f8 10             	sar    eax,0x10
c001e937:	0f b6 c0             	movzx  eax,al
c001e93a:	8d 50 01             	lea    edx,[eax+0x1]
c001e93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e940:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e946:	b8 00 00 00 00       	mov    eax,0x0
c001e94b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e94e:	5b                   	pop    ebx
c001e94f:	5e                   	pop    esi
c001e950:	5f                   	pop    edi
c001e951:	5d                   	pop    ebp
c001e952:	c3                   	ret    
c001e953:	90                   	nop

c001e954 <IOAPIC::write(int, int)>:
c001e954:	55                   	push   ebp
c001e955:	89 e5                	mov    ebp,esp
c001e957:	83 ec 10             	sub    esp,0x10
c001e95a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e95d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e963:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e966:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e969:	0f b6 d0             	movzx  edx,al
c001e96c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e96f:	89 10                	mov    DWORD PTR [eax],edx
c001e971:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e974:	8d 50 10             	lea    edx,[eax+0x10]
c001e977:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e97a:	89 02                	mov    DWORD PTR [edx],eax
c001e97c:	90                   	nop
c001e97d:	c9                   	leave  
c001e97e:	c3                   	ret    
c001e97f:	90                   	nop

c001e980 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e980:	55                   	push   ebp
c001e981:	89 e5                	mov    ebp,esp
c001e983:	53                   	push   ebx
c001e984:	83 ec 2c             	sub    esp,0x2c
c001e987:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e98a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e98d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e990:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e993:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e996:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e999:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e99c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e99f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e9a2:	88 d8                	mov    al,bl
c001e9a4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e9a7:	88 c8                	mov    al,cl
c001e9a9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e9ac:	88 d0                	mov    al,dl
c001e9ae:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e9b1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e9b5:	83 c0 08             	add    eax,0x8
c001e9b8:	d1 e0                	shl    eax,1
c001e9ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9bd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e9c1:	83 c0 08             	add    eax,0x8
c001e9c4:	d1 e0                	shl    eax,1
c001e9c6:	83 c0 01             	add    eax,0x1
c001e9c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e9cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9cf:	50                   	push   eax
c001e9d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9d3:	e8 6e fe ff ff       	call   c001e846 <IOAPIC::read(int)>
c001e9d8:	83 c4 08             	add    esp,0x8
c001e9db:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9de:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e9e5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e9e8:	c1 e0 18             	shl    eax,0x18
c001e9eb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e9ee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e9f1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9f4:	52                   	push   edx
c001e9f5:	50                   	push   eax
c001e9f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9f9:	e8 56 ff ff ff       	call   c001e954 <IOAPIC::write(int, int)>
c001e9fe:	83 c4 0c             	add    esp,0xc
c001ea01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea04:	50                   	push   eax
c001ea05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea08:	e8 39 fe ff ff       	call   c001e846 <IOAPIC::read(int)>
c001ea0d:	83 c4 08             	add    esp,0x8
c001ea10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ea13:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ea1a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ea21:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ea28:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ea2c:	85 c0                	test   eax,eax
c001ea2e:	74 09                	je     c001ea39 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ea30:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ea37:	eb 07                	jmp    c001ea40 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ea39:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ea40:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ea44:	85 c0                	test   eax,eax
c001ea46:	74 09                	je     c001ea51 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ea48:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ea4f:	eb 07                	jmp    c001ea58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ea51:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ea58:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ea5f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ea63:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ea66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ea69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea6c:	52                   	push   edx
c001ea6d:	50                   	push   eax
c001ea6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea71:	e8 de fe ff ff       	call   c001e954 <IOAPIC::write(int, int)>
c001ea76:	83 c4 0c             	add    esp,0xc
c001ea79:	90                   	nop
c001ea7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ea7d:	c9                   	leave  
c001ea7e:	c3                   	ret    
c001ea7f:	90                   	nop

c001ea80 <APICTimer::close(int, int, void*)>:
c001ea80:	b8 00 00 00 00       	mov    eax,0x0
c001ea85:	c3                   	ret    
c001ea86:	66 90                	xchg   ax,ax

c001ea88 <apicTimerHandler(regs*, void*)>:
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ea91:	b8 10 27 00 00       	mov    eax,0x2710
c001ea96:	ba 00 00 00 00       	mov    edx,0x0
c001ea9b:	f7 f1                	div    ecx
c001ea9d:	83 ec 0c             	sub    esp,0xc
c001eaa0:	50                   	push   eax
c001eaa1:	e8 f2 f6 fe ff       	call   c000e198 <timerHandler(unsigned int)>
c001eaa6:	83 c4 10             	add    esp,0x10
c001eaa9:	90                   	nop
c001eaaa:	83 c4 0c             	add    esp,0xc
c001eaad:	c3                   	ret    
c001eaae:	66 90                	xchg   ax,ax

c001eab0 <APICTimer::open(int, int, void*)>:
c001eab0:	83 ec 0c             	sub    esp,0xc
c001eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab9:	83 c0 24             	add    eax,0x24
c001eabc:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabe:	83 ec 08             	sub    esp,0x8
c001eac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac9:	ff d0                	call   eax
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ead6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eae4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eaea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eaf4:	83 ec 0c             	sub    esp,0xc
c001eaf7:	51                   	push   ecx
c001eaf8:	6a 01                	push   0x1
c001eafa:	68 88 ea 01 c0       	push   0xc001ea88
c001eaff:	52                   	push   edx
c001eb00:	50                   	push   eax
c001eb01:	e8 d2 db fe ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb06:	83 c4 20             	add    esp,0x20
c001eb09:	89 c2                	mov    edx,eax
c001eb0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eb15:	b8 00 00 00 00       	mov    eax,0x0
c001eb1a:	83 c4 0c             	add    esp,0xc
c001eb1d:	c3                   	ret    
c001eb1e:	66 90                	xchg   ax,ax

c001eb20 <APICTimer::write(int)>:
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	83 ec 0c             	sub    esp,0xc
c001eb26:	68 d4 31 02 c0       	push   0xc00231d4
c001eb2b:	e8 99 27 ff ff       	call   c00112c9 <KePanic(char const*)>
c001eb30:	83 c4 10             	add    esp,0x10
c001eb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb41:	90                   	nop
c001eb42:	83 c4 0c             	add    esp,0xc
c001eb45:	c3                   	ret    
c001eb46:	66 90                	xchg   ax,ax

c001eb48 <APICTimer::APICTimer()>:
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4f:	83 ec 08             	sub    esp,0x8
c001eb52:	68 e4 31 02 c0       	push   0xc00231e4
c001eb57:	50                   	push   eax
c001eb58:	e8 6f f5 fe ff       	call   c000e0cc <Timer::Timer(char const*)>
c001eb5d:	83 c4 10             	add    esp,0x10
c001eb60:	ba f8 31 02 c0       	mov    edx,0xc00231f8
c001eb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb69:	89 10                	mov    DWORD PTR [eax],edx
c001eb6b:	90                   	nop
c001eb6c:	83 c4 0c             	add    esp,0xc
c001eb6f:	c3                   	ret    

c001eb70 <PIT::write(int)>:
c001eb70:	83 ec 10             	sub    esp,0x10
c001eb73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eb7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb85:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001eb8a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eb8f:	89 c2                	mov    edx,eax
c001eb91:	c1 fa 1f             	sar    edx,0x1f
c001eb94:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eb98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb9c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eba3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eba8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ebac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ebb1:	ee                   	out    dx,al
c001ebb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebb6:	0f b6 c0             	movzx  eax,al
c001ebb9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ebc0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ebc4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ebc8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ebcd:	ee                   	out    dx,al
c001ebce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebd2:	c1 f8 08             	sar    eax,0x8
c001ebd5:	0f b6 c0             	movzx  eax,al
c001ebd8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ebdf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ebe3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ebe7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ebec:	ee                   	out    dx,al
c001ebed:	90                   	nop
c001ebee:	83 c4 10             	add    esp,0x10
c001ebf1:	c3                   	ret    
c001ebf2:	66 90                	xchg   ax,ax

c001ebf4 <pitHandler(regs*, void*)>:
c001ebf4:	83 ec 0c             	sub    esp,0xc
c001ebf7:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ebfd:	b8 10 27 00 00       	mov    eax,0x2710
c001ec02:	89 c2                	mov    edx,eax
c001ec04:	c1 fa 1f             	sar    edx,0x1f
c001ec07:	f7 f9                	idiv   ecx
c001ec09:	83 ec 0c             	sub    esp,0xc
c001ec0c:	50                   	push   eax
c001ec0d:	e8 86 f5 fe ff       	call   c000e198 <timerHandler(unsigned int)>
c001ec12:	83 c4 10             	add    esp,0x10
c001ec15:	90                   	nop
c001ec16:	83 c4 0c             	add    esp,0xc
c001ec19:	c3                   	ret    
c001ec1a:	66 90                	xchg   ax,ax

c001ec1c <PIT::open(int, int, void*)>:
c001ec1c:	83 ec 0c             	sub    esp,0xc
c001ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec25:	83 c0 24             	add    eax,0x24
c001ec28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2a:	83 ec 08             	sub    esp,0x8
c001ec2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec35:	ff d0                	call   eax
c001ec37:	83 c4 10             	add    esp,0x10
c001ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3e:	83 ec 0c             	sub    esp,0xc
c001ec41:	6a 00                	push   0x0
c001ec43:	6a 01                	push   0x1
c001ec45:	68 f4 eb 01 c0       	push   0xc001ebf4
c001ec4a:	6a 00                	push   0x0
c001ec4c:	50                   	push   eax
c001ec4d:	e8 86 da fe ff       	call   c000c6d8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec52:	83 c4 20             	add    esp,0x20
c001ec55:	89 c2                	mov    edx,eax
c001ec57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec61:	b8 00 00 00 00       	mov    eax,0x0
c001ec66:	83 c4 0c             	add    esp,0xc
c001ec69:	c3                   	ret    
c001ec6a:	66 90                	xchg   ax,ax

c001ec6c <PIT::close(int, int, void*)>:
c001ec6c:	83 ec 0c             	sub    esp,0xc
c001ec6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec73:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ec7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec81:	6a 01                	push   0x1
c001ec83:	68 f4 eb 01 c0       	push   0xc001ebf4
c001ec88:	6a 00                	push   0x0
c001ec8a:	50                   	push   eax
c001ec8b:	e8 7e da fe ff       	call   c000c70e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ec90:	83 c4 10             	add    esp,0x10
c001ec93:	b8 00 00 00 00       	mov    eax,0x0
c001ec98:	83 c4 0c             	add    esp,0xc
c001ec9b:	c3                   	ret    

c001ec9c <PIT::PIT()>:
c001ec9c:	83 ec 0c             	sub    esp,0xc
c001ec9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca3:	83 ec 08             	sub    esp,0x8
c001eca6:	68 20 32 02 c0       	push   0xc0023220
c001ecab:	50                   	push   eax
c001ecac:	e8 1b f4 fe ff       	call   c000e0cc <Timer::Timer(char const*)>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	ba 48 32 02 c0       	mov    edx,0xc0023248
c001ecb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbd:	89 10                	mov    DWORD PTR [eax],edx
c001ecbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ecc9:	0f b6 d0             	movzx  edx,al
c001eccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ecd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ece1:	0f b6 d0             	movzx  edx,al
c001ece4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ecf7:	8d 50 01             	lea    edx,[eax+0x1]
c001ecfa:	88 d1                	mov    cl,dl
c001ecfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed00:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ed06:	0f b6 d0             	movzx  edx,al
c001ed09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ed11:	83 e1 3f             	and    ecx,0x3f
c001ed14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ed18:	90                   	nop
c001ed19:	83 c4 0c             	add    esp,0xc
c001ed1c:	c3                   	ret    
c001ed1d:	66 90                	xchg   ax,ax
c001ed1f:	90                   	nop

c001ed20 <avxDetect>:
c001ed20:	b8 01 00 00 00       	mov    eax,0x1
c001ed25:	0f a2                	cpuid  
c001ed27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ed2d:	74 15                	je     c001ed44 <avxDetect.noAVX>
c001ed2f:	b8 01 00 00 00       	mov    eax,0x1
c001ed34:	0f a2                	cpuid  
c001ed36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ed3c:	74 06                	je     c001ed44 <avxDetect.noAVX>
c001ed3e:	b8 01 00 00 00       	mov    eax,0x1
c001ed43:	c3                   	ret    

c001ed44 <avxDetect.noAVX>:
c001ed44:	b8 00 00 00 00       	mov    eax,0x0
c001ed49:	c3                   	ret    

c001ed4a <avxSave>:
c001ed4a:	53                   	push   ebx
c001ed4b:	52                   	push   edx
c001ed4c:	31 c0                	xor    eax,eax
c001ed4e:	48                   	dec    eax
c001ed4f:	89 c2                	mov    edx,eax
c001ed51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed55:	0f ae 23             	xsave  [ebx]
c001ed58:	5a                   	pop    edx
c001ed59:	5b                   	pop    ebx
c001ed5a:	c3                   	ret    

c001ed5b <avxLoad>:
c001ed5b:	53                   	push   ebx
c001ed5c:	52                   	push   edx
c001ed5d:	31 c0                	xor    eax,eax
c001ed5f:	48                   	dec    eax
c001ed60:	89 c2                	mov    edx,eax
c001ed62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed66:	0f ae 2b             	xrstor [ebx]
c001ed69:	5a                   	pop    edx
c001ed6a:	5b                   	pop    ebx
c001ed6b:	c3                   	ret    

c001ed6c <avxInit>:
c001ed6c:	e8 67 03 00 00       	call   c001f0d8 <sseInit>
c001ed71:	50                   	push   eax
c001ed72:	51                   	push   ecx
c001ed73:	0f 20 e0             	mov    eax,cr4
c001ed76:	0d 00 00 04 00       	or     eax,0x40000
c001ed7b:	0f 22 e0             	mov    cr4,eax
c001ed7e:	31 c9                	xor    ecx,ecx
c001ed80:	0f 01 d0             	xgetbv 
c001ed83:	0d 07 00 00 00       	or     eax,0x7
c001ed88:	0f 01 d1             	xsetbv 
c001ed8b:	59                   	pop    ecx
c001ed8c:	58                   	pop    eax
c001ed8d:	c3                   	ret    

c001ed8e <avxClose>:
c001ed8e:	c3                   	ret    

c001ed8f <wouldSheSayYes>:
c001ed8f:	c3                   	ret    
c001ed90:	49                   	dec    ecx
c001ed91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ed95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ed99:	75 20                	jne    c001edbb <isr0+0xb>
c001ed9b:	4e                   	dec    esi
c001ed9c:	79 61                	jns    c001edff <isr7+0x3>
c001ed9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eda3:	66 90                	xchg   ax,ax
c001eda5:	66 90                	xchg   ax,ax
c001eda7:	66 90                	xchg   ax,ax
c001eda9:	66 90                	xchg   ax,ax
c001edab:	66 90                	xchg   ax,ax
c001edad:	66 90                	xchg   ax,ax
c001edaf:	90                   	nop

c001edb0 <isr0>:
c001edb0:	fa                   	cli    
c001edb1:	68 00 00 00 00       	push   0x0
c001edb6:	68 00 00 00 00       	push   0x0
c001edbb:	e9 56 01 00 00       	jmp    c001ef16 <int_common_stub>

c001edc0 <isr1>:
c001edc0:	fa                   	cli    
c001edc1:	6a 00                	push   0x0
c001edc3:	6a 01                	push   0x1
c001edc5:	e9 4c 01 00 00       	jmp    c001ef16 <int_common_stub>

c001edca <isr2>:
c001edca:	fa                   	cli    
c001edcb:	6a 00                	push   0x0
c001edcd:	6a 02                	push   0x2
c001edcf:	e9 42 01 00 00       	jmp    c001ef16 <int_common_stub>

c001edd4 <isr3>:
c001edd4:	fa                   	cli    
c001edd5:	6a 00                	push   0x0
c001edd7:	6a 03                	push   0x3
c001edd9:	e9 38 01 00 00       	jmp    c001ef16 <int_common_stub>

c001edde <isr4>:
c001edde:	fa                   	cli    
c001eddf:	6a 00                	push   0x0
c001ede1:	6a 04                	push   0x4
c001ede3:	e9 2e 01 00 00       	jmp    c001ef16 <int_common_stub>

c001ede8 <isr5>:
c001ede8:	fa                   	cli    
c001ede9:	6a 00                	push   0x0
c001edeb:	6a 05                	push   0x5
c001eded:	e9 24 01 00 00       	jmp    c001ef16 <int_common_stub>

c001edf2 <isr6>:
c001edf2:	fa                   	cli    
c001edf3:	6a 00                	push   0x0
c001edf5:	6a 06                	push   0x6
c001edf7:	e9 1a 01 00 00       	jmp    c001ef16 <int_common_stub>

c001edfc <isr7>:
c001edfc:	fa                   	cli    
c001edfd:	6a 00                	push   0x0
c001edff:	6a 07                	push   0x7
c001ee01:	e9 10 01 00 00       	jmp    c001ef16 <int_common_stub>

c001ee06 <isr8>:
c001ee06:	fa                   	cli    
c001ee07:	6a 08                	push   0x8
c001ee09:	e9 08 01 00 00       	jmp    c001ef16 <int_common_stub>

c001ee0e <isr9>:
c001ee0e:	fa                   	cli    
c001ee0f:	6a 00                	push   0x0
c001ee11:	6a 09                	push   0x9
c001ee13:	e9 fe 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee18 <isr10>:
c001ee18:	fa                   	cli    
c001ee19:	6a 0a                	push   0xa
c001ee1b:	e9 f6 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee20 <isr11>:
c001ee20:	fa                   	cli    
c001ee21:	6a 0b                	push   0xb
c001ee23:	e9 ee 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee28 <isr12>:
c001ee28:	fa                   	cli    
c001ee29:	6a 0c                	push   0xc
c001ee2b:	e9 e6 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee30 <isr13>:
c001ee30:	fa                   	cli    
c001ee31:	6a 0d                	push   0xd
c001ee33:	53                   	push   ebx
c001ee34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ee38:	81 fb 06 f0 01 c0    	cmp    ebx,0xc001f006
c001ee3e:	5b                   	pop    ebx
c001ee3f:	0f 84 c3 01 00 00    	je     c001f008 <finishSignal2>
c001ee45:	e9 cc 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee4a <isr14>:
c001ee4a:	fa                   	cli    
c001ee4b:	6a 0e                	push   0xe
c001ee4d:	e9 c4 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee52 <isr15>:
c001ee52:	fa                   	cli    
c001ee53:	6a 00                	push   0x0
c001ee55:	6a 0f                	push   0xf
c001ee57:	e9 ba 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee5c <isr16>:
c001ee5c:	fa                   	cli    
c001ee5d:	6a 00                	push   0x0
c001ee5f:	6a 10                	push   0x10
c001ee61:	e9 b0 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee66 <isr17>:
c001ee66:	fa                   	cli    
c001ee67:	6a 00                	push   0x0
c001ee69:	6a 11                	push   0x11
c001ee6b:	e9 a6 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee70 <isr18>:
c001ee70:	fa                   	cli    
c001ee71:	6a 00                	push   0x0
c001ee73:	6a 12                	push   0x12
c001ee75:	e9 9c 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee7a <irq3>:
c001ee7a:	fa                   	cli    
c001ee7b:	6a 00                	push   0x0
c001ee7d:	6a 23                	push   0x23
c001ee7f:	e9 92 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee84 <irq4>:
c001ee84:	fa                   	cli    
c001ee85:	6a 00                	push   0x0
c001ee87:	6a 24                	push   0x24
c001ee89:	e9 88 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee8e <irq5>:
c001ee8e:	fa                   	cli    
c001ee8f:	6a 00                	push   0x0
c001ee91:	6a 25                	push   0x25
c001ee93:	e9 7e 00 00 00       	jmp    c001ef16 <int_common_stub>

c001ee98 <irq6>:
c001ee98:	fa                   	cli    
c001ee99:	6a 00                	push   0x0
c001ee9b:	6a 26                	push   0x26
c001ee9d:	e9 74 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eea2 <irq7>:
c001eea2:	fa                   	cli    
c001eea3:	6a 00                	push   0x0
c001eea5:	6a 27                	push   0x27
c001eea7:	e9 6a 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eeac <irq8>:
c001eeac:	fa                   	cli    
c001eead:	6a 00                	push   0x0
c001eeaf:	6a 28                	push   0x28
c001eeb1:	e9 60 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eeb6 <irq9>:
c001eeb6:	fa                   	cli    
c001eeb7:	6a 00                	push   0x0
c001eeb9:	6a 29                	push   0x29
c001eebb:	e9 56 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eec0 <irq10>:
c001eec0:	fa                   	cli    
c001eec1:	6a 00                	push   0x0
c001eec3:	6a 2a                	push   0x2a
c001eec5:	e9 4c 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eeca <irq11>:
c001eeca:	fa                   	cli    
c001eecb:	6a 00                	push   0x0
c001eecd:	6a 2b                	push   0x2b
c001eecf:	e9 42 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eed4 <irq12>:
c001eed4:	fa                   	cli    
c001eed5:	6a 00                	push   0x0
c001eed7:	6a 2c                	push   0x2c
c001eed9:	e9 38 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eede <irq13>:
c001eede:	fa                   	cli    
c001eedf:	6a 00                	push   0x0
c001eee1:	6a 2d                	push   0x2d
c001eee3:	e9 2e 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eee8 <irq14>:
c001eee8:	fa                   	cli    
c001eee9:	6a 00                	push   0x0
c001eeeb:	6a 2e                	push   0x2e
c001eeed:	e9 24 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eef2 <irq15>:
c001eef2:	fa                   	cli    
c001eef3:	6a 00                	push   0x0
c001eef5:	6a 2f                	push   0x2f
c001eef7:	e9 1a 00 00 00       	jmp    c001ef16 <int_common_stub>

c001eefc <irq1>:
c001eefc:	fa                   	cli    
c001eefd:	6a 00                	push   0x0
c001eeff:	6a 21                	push   0x21
c001ef01:	eb 13                	jmp    c001ef16 <int_common_stub>

c001ef03 <irq2>:
c001ef03:	fa                   	cli    
c001ef04:	6a 00                	push   0x0
c001ef06:	6a 22                	push   0x22
c001ef08:	eb 0c                	jmp    c001ef16 <int_common_stub>

c001ef0a <isr96>:
c001ef0a:	6a 00                	push   0x0
c001ef0c:	6a 60                	push   0x60
c001ef0e:	fb                   	sti    
c001ef0f:	eb 37                	jmp    c001ef48 <syscall_common_stub>

c001ef11 <irq0>:
c001ef11:	fa                   	cli    
c001ef12:	6a 00                	push   0x0
c001ef14:	6a 20                	push   0x20

c001ef16 <int_common_stub>:
c001ef16:	60                   	pusha  
c001ef17:	1e                   	push   ds
c001ef18:	06                   	push   es
c001ef19:	0f a0                	push   fs
c001ef1b:	0f a8                	push   gs
c001ef1d:	66 b8 10 00          	mov    ax,0x10
c001ef21:	66 8e d8             	mov    ds,ax
c001ef24:	66 8e c0             	mov    es,ax
c001ef27:	66 8e e0             	mov    fs,ax
c001ef2a:	66 8e e8             	mov    gs,ax
c001ef2d:	54                   	push   esp
c001ef2e:	fc                   	cld    
c001ef2f:	e8 a4 dc fe ff       	call   c000cbd8 <int_handler>
c001ef34:	81 c4 04 00 00 00    	add    esp,0x4
c001ef3a:	0f a9                	pop    gs
c001ef3c:	0f a1                	pop    fs
c001ef3e:	07                   	pop    es
c001ef3f:	1f                   	pop    ds
c001ef40:	61                   	popa   
c001ef41:	81 c4 08 00 00 00    	add    esp,0x8
c001ef47:	cf                   	iret   

c001ef48 <syscall_common_stub>:
c001ef48:	60                   	pusha  
c001ef49:	1e                   	push   ds
c001ef4a:	06                   	push   es
c001ef4b:	0f a0                	push   fs
c001ef4d:	0f a8                	push   gs
c001ef4f:	66 b8 10 00          	mov    ax,0x10
c001ef53:	66 8e d8             	mov    ds,ax
c001ef56:	66 8e c0             	mov    es,ax
c001ef59:	66 8e e0             	mov    fs,ax
c001ef5c:	66 8e e8             	mov    gs,ax
c001ef5f:	54                   	push   esp
c001ef60:	fc                   	cld    
c001ef61:	e8 72 dc fe ff       	call   c000cbd8 <int_handler>
c001ef66:	81 c4 04 00 00 00    	add    esp,0x4
c001ef6c:	0f a9                	pop    gs
c001ef6e:	0f a1                	pop    fs
c001ef70:	07                   	pop    es
c001ef71:	1f                   	pop    ds
c001ef72:	e8 64 29 ff ff       	call   c00118db <KiCheckSignalZ>
c001ef77:	3d 00 00 00 00       	cmp    eax,0x0
c001ef7c:	0f 84 c0 00 00 00    	je     c001f042 <skipSignals>
c001ef82:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ef87:	61                   	popa   
c001ef88:	53                   	push   ebx
c001ef89:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ef8f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ef92:	5b                   	pop    ebx
c001ef93:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ef98:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ef9b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ef9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001efa1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001efa4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001efa7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001efaa:	81 c4 08 00 00 00    	add    esp,0x8
c001efb0:	5e                   	pop    esi
c001efb1:	5b                   	pop    ebx
c001efb2:	59                   	pop    ecx
c001efb3:	5a                   	pop    edx
c001efb4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001efb7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001efba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001efbd:	52                   	push   edx
c001efbe:	51                   	push   ecx
c001efbf:	53                   	push   ebx
c001efc0:	56                   	push   esi
c001efc1:	81 ec 08 00 00 00    	sub    esp,0x8
c001efc7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001efca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001efcd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001efd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001efd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001efd6:	60                   	pusha  
c001efd7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001efdd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001efe0:	89 e3                	mov    ebx,esp
c001efe2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001efe5:	52                   	push   edx
c001efe6:	68 06 f0 01 c0       	push   0xc001f006
c001efeb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001efee:	89 dc                	mov    esp,ebx
c001eff0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001eff3:	68 23 00 00 00       	push   0x23
c001eff8:	51                   	push   ecx
c001eff9:	68 02 02 00 00       	push   0x202
c001effe:	68 1b 00 00 00       	push   0x1b
c001f003:	ff 36                	push   DWORD PTR [esi]
c001f005:	cf                   	iret   

c001f006 <finishSignal>:
c001f006:	cd 0f                	int    0xf

c001f008 <finishSignal2>:
c001f008:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f00e:	e8 45 29 ff ff       	call   c0011958 <KiFinishSignalZ>
c001f013:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f019:	68 23 00 00 00       	push   0x23
c001f01e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f021:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f024:	68 1b 00 00 00       	push   0x1b
c001f029:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f02c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f02f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f032:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f035:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f038:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f03b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f03e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f041:	cf                   	iret   

c001f042 <skipSignals>:
c001f042:	61                   	popa   
c001f043:	81 c4 08 00 00 00    	add    esp,0x8
c001f049:	cf                   	iret   
c001f04a:	90                   	nop
c001f04b:	90                   	nop

c001f04c <irq16>:
c001f04c:	fa                   	cli    
c001f04d:	6a 00                	push   0x0
c001f04f:	6a 30                	push   0x30
c001f051:	e9 c0 fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f056 <irq17>:
c001f056:	fa                   	cli    
c001f057:	6a 00                	push   0x0
c001f059:	6a 31                	push   0x31
c001f05b:	e9 b6 fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f060 <irq18>:
c001f060:	fa                   	cli    
c001f061:	6a 00                	push   0x0
c001f063:	6a 32                	push   0x32
c001f065:	e9 ac fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f06a <irq19>:
c001f06a:	fa                   	cli    
c001f06b:	6a 00                	push   0x0
c001f06d:	6a 33                	push   0x33
c001f06f:	e9 a2 fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f074 <irq20>:
c001f074:	fa                   	cli    
c001f075:	6a 00                	push   0x0
c001f077:	6a 34                	push   0x34
c001f079:	e9 98 fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f07e <irq21>:
c001f07e:	fa                   	cli    
c001f07f:	6a 00                	push   0x0
c001f081:	6a 35                	push   0x35
c001f083:	e9 8e fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f088 <irq22>:
c001f088:	fa                   	cli    
c001f089:	6a 00                	push   0x0
c001f08b:	6a 36                	push   0x36
c001f08d:	e9 84 fe ff ff       	jmp    c001ef16 <int_common_stub>

c001f092 <irq23>:
c001f092:	fa                   	cli    
c001f093:	6a 00                	push   0x0
c001f095:	6a 37                	push   0x37
c001f097:	e9 7a fe ff ff       	jmp    c001ef16 <int_common_stub>
c001f09c:	66 90                	xchg   ax,ax
c001f09e:	66 90                	xchg   ax,ax

c001f0a0 <i386GetRDRAND>:
c001f0a0:	b9 64 00 00 00       	mov    ecx,0x64

c001f0a5 <retry>:
c001f0a5:	0f c7 f0             	rdrand eax
c001f0a8:	72 05                	jb     c001f0af <retry.done>
c001f0aa:	e2 f9                	loop   c001f0a5 <retry>

c001f0ac <retry.fail>:
c001f0ac:	31 c0                	xor    eax,eax
c001f0ae:	c3                   	ret    

c001f0af <retry.done>:
c001f0af:	c3                   	ret    

c001f0b0 <absolutelyNoChanceInHell>:
c001f0b0:	b8 01 00 00 00       	mov    eax,0x1
c001f0b5:	0f a2                	cpuid  
c001f0b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f0bd:	74 06                	je     c001f0c5 <sseDetect.noSSE>
c001f0bf:	b8 01 00 00 00       	mov    eax,0x1
c001f0c4:	c3                   	ret    

c001f0c5 <sseDetect.noSSE>:
c001f0c5:	31 c0                	xor    eax,eax
c001f0c7:	c3                   	ret    

c001f0c8 <sseSave>:
c001f0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0cc:	0f ae 00             	fxsave [eax]
c001f0cf:	c3                   	ret    

c001f0d0 <sseLoad>:
c001f0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d4:	0f ae 08             	fxrstor [eax]
c001f0d7:	c3                   	ret    

c001f0d8 <sseInit>:
c001f0d8:	e8 42 00 00 00       	call   c001f11f <x87Init>
c001f0dd:	0f 20 e0             	mov    eax,cr4
c001f0e0:	66 0d 00 06          	or     ax,0x600
c001f0e4:	0f 22 e0             	mov    cr4,eax
c001f0e7:	c3                   	ret    

c001f0e8 <sseClose>:
c001f0e8:	c3                   	ret    
c001f0e9:	66 90                	xchg   ax,ax
c001f0eb:	66 90                	xchg   ax,ax
c001f0ed:	66 90                	xchg   ax,ax
c001f0ef:	90                   	nop

c001f0f0 <value_37F>:
c001f0f0:	7f 03                	jg     c001f0f5 <value_37A+0x1>

c001f0f2 <value_37E>:
c001f0f2:	7e 03                	jle    c001f0f7 <x87Detect+0x1>

c001f0f4 <value_37A>:
c001f0f4:	7a 03                	jp     c001f0f9 <x87Detect+0x3>

c001f0f6 <x87Detect>:
c001f0f6:	b8 01 00 00 00       	mov    eax,0x1
c001f0fb:	0f a2                	cpuid  
c001f0fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f103:	74 06                	je     c001f10b <x87Detect.nox87>
c001f105:	b8 01 00 00 00       	mov    eax,0x1
c001f10a:	c3                   	ret    

c001f10b <x87Detect.nox87>:
c001f10b:	b8 00 00 00 00       	mov    eax,0x0
c001f110:	c3                   	ret    

c001f111 <x87Save>:
c001f111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f115:	dd 30                	fnsave [eax]
c001f117:	c3                   	ret    

c001f118 <x87Load>:
c001f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f11c:	dd 20                	frstor [eax]
c001f11e:	c3                   	ret    

c001f11f <x87Init>:
c001f11f:	0f 20 c0             	mov    eax,cr0
c001f122:	66 25 fb ff          	and    ax,0xfffb
c001f126:	66 0d 22 00          	or     ax,0x22
c001f12a:	0f 22 c0             	mov    cr0,eax
c001f12d:	db e3                	fninit 
c001f12f:	0f 06                	clts   
c001f131:	d9 2d f4 f0 01 c0    	fldcw  WORD PTR ds:0xc001f0f4
c001f137:	c3                   	ret    

c001f138 <x87Close>:
c001f138:	c3                   	ret    
c001f139:	66 90                	xchg   ax,ax
c001f13b:	90                   	nop

c001f13c <__do_global_ctors_aux>:
c001f13c:	a1 f0 00 02 c0       	mov    eax,ds:0xc00200f0
c001f141:	83 f8 ff             	cmp    eax,0xffffffff
c001f144:	74 1a                	je     c001f160 <__do_global_ctors_aux+0x24>
c001f146:	55                   	push   ebp
c001f147:	89 e5                	mov    ebp,esp
c001f149:	53                   	push   ebx
c001f14a:	52                   	push   edx
c001f14b:	bb f0 00 02 c0       	mov    ebx,0xc00200f0
c001f150:	ff d0                	call   eax
c001f152:	83 eb 04             	sub    ebx,0x4
c001f155:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f157:	83 f8 ff             	cmp    eax,0xffffffff
c001f15a:	75 f4                	jne    c001f150 <__do_global_ctors_aux+0x14>
c001f15c:	58                   	pop    eax
c001f15d:	5b                   	pop    ebx
c001f15e:	5d                   	pop    ebp
c001f15f:	c3                   	ret    
c001f160:	c3                   	ret    
c001f161:	66 90                	xchg   ax,ax
c001f163:	90                   	nop

c001f164 <__divdi3>:
c001f164:	55                   	push   ebp
c001f165:	57                   	push   edi
c001f166:	56                   	push   esi
c001f167:	53                   	push   ebx
c001f168:	83 ec 1c             	sub    esp,0x1c
c001f16b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f16f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f173:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f176:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f17a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f17e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f182:	85 db                	test   ebx,ebx
c001f184:	0f 88 8e 00 00 00    	js     c001f218 <__divdi3+0xb4>
c001f18a:	89 dd                	mov    ebp,ebx
c001f18c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f194:	89 d3                	mov    ebx,edx
c001f196:	85 d2                	test   edx,edx
c001f198:	79 0d                	jns    c001f1a7 <__divdi3+0x43>
c001f19a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f19e:	f7 d8                	neg    eax
c001f1a0:	83 d2 00             	adc    edx,0x0
c001f1a3:	f7 da                	neg    edx
c001f1a5:	89 d3                	mov    ebx,edx
c001f1a7:	89 c7                	mov    edi,eax
c001f1a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f1ac:	85 db                	test   ebx,ebx
c001f1ae:	75 48                	jne    c001f1f8 <__divdi3+0x94>
c001f1b0:	39 ef                	cmp    edi,ebp
c001f1b2:	76 24                	jbe    c001f1d8 <__divdi3+0x74>
c001f1b4:	89 ea                	mov    edx,ebp
c001f1b6:	f7 f7                	div    edi
c001f1b8:	89 c1                	mov    ecx,eax
c001f1ba:	31 f6                	xor    esi,esi
c001f1bc:	89 c8                	mov    eax,ecx
c001f1be:	89 f2                	mov    edx,esi
c001f1c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1c4:	85 c9                	test   ecx,ecx
c001f1c6:	74 07                	je     c001f1cf <__divdi3+0x6b>
c001f1c8:	f7 d8                	neg    eax
c001f1ca:	83 d2 00             	adc    edx,0x0
c001f1cd:	f7 da                	neg    edx
c001f1cf:	83 c4 1c             	add    esp,0x1c
c001f1d2:	5b                   	pop    ebx
c001f1d3:	5e                   	pop    esi
c001f1d4:	5f                   	pop    edi
c001f1d5:	5d                   	pop    ebp
c001f1d6:	c3                   	ret    
c001f1d7:	90                   	nop
c001f1d8:	85 ff                	test   edi,edi
c001f1da:	75 0b                	jne    c001f1e7 <__divdi3+0x83>
c001f1dc:	b8 01 00 00 00       	mov    eax,0x1
c001f1e1:	31 d2                	xor    edx,edx
c001f1e3:	f7 f3                	div    ebx
c001f1e5:	89 c7                	mov    edi,eax
c001f1e7:	31 d2                	xor    edx,edx
c001f1e9:	89 e8                	mov    eax,ebp
c001f1eb:	f7 f7                	div    edi
c001f1ed:	89 c6                	mov    esi,eax
c001f1ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f1f2:	f7 f7                	div    edi
c001f1f4:	89 c1                	mov    ecx,eax
c001f1f6:	eb c4                	jmp    c001f1bc <__divdi3+0x58>
c001f1f8:	39 eb                	cmp    ebx,ebp
c001f1fa:	77 3c                	ja     c001f238 <__divdi3+0xd4>
c001f1fc:	0f bd f3             	bsr    esi,ebx
c001f1ff:	83 f6 1f             	xor    esi,0x1f
c001f202:	75 40                	jne    c001f244 <__divdi3+0xe0>
c001f204:	39 eb                	cmp    ebx,ebp
c001f206:	72 09                	jb     c001f211 <__divdi3+0xad>
c001f208:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f20b:	0f 87 97 00 00 00    	ja     c001f2a8 <__divdi3+0x144>
c001f211:	b9 01 00 00 00       	mov    ecx,0x1
c001f216:	eb a4                	jmp    c001f1bc <__divdi3+0x58>
c001f218:	f7 d9                	neg    ecx
c001f21a:	83 d3 00             	adc    ebx,0x0
c001f21d:	f7 db                	neg    ebx
c001f21f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f222:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f226:	89 dd                	mov    ebp,ebx
c001f228:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f230:	e9 5f ff ff ff       	jmp    c001f194 <__divdi3+0x30>
c001f235:	8d 76 00             	lea    esi,[esi+0x0]
c001f238:	31 f6                	xor    esi,esi
c001f23a:	31 c9                	xor    ecx,ecx
c001f23c:	e9 7b ff ff ff       	jmp    c001f1bc <__divdi3+0x58>
c001f241:	8d 76 00             	lea    esi,[esi+0x0]
c001f244:	b8 20 00 00 00       	mov    eax,0x20
c001f249:	29 f0                	sub    eax,esi
c001f24b:	89 f1                	mov    ecx,esi
c001f24d:	d3 e3                	shl    ebx,cl
c001f24f:	89 fa                	mov    edx,edi
c001f251:	88 c1                	mov    cl,al
c001f253:	d3 ea                	shr    edx,cl
c001f255:	09 da                	or     edx,ebx
c001f257:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f25b:	89 f1                	mov    ecx,esi
c001f25d:	d3 e7                	shl    edi,cl
c001f25f:	89 eb                	mov    ebx,ebp
c001f261:	88 c1                	mov    cl,al
c001f263:	d3 eb                	shr    ebx,cl
c001f265:	89 f1                	mov    ecx,esi
c001f267:	d3 e5                	shl    ebp,cl
c001f269:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f26c:	88 c1                	mov    cl,al
c001f26e:	d3 ea                	shr    edx,cl
c001f270:	09 d5                	or     ebp,edx
c001f272:	89 e8                	mov    eax,ebp
c001f274:	89 da                	mov    edx,ebx
c001f276:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f27a:	89 d3                	mov    ebx,edx
c001f27c:	89 c5                	mov    ebp,eax
c001f27e:	f7 e7                	mul    edi
c001f280:	39 d3                	cmp    ebx,edx
c001f282:	72 18                	jb     c001f29c <__divdi3+0x138>
c001f284:	74 0a                	je     c001f290 <__divdi3+0x12c>
c001f286:	89 e9                	mov    ecx,ebp
c001f288:	31 f6                	xor    esi,esi
c001f28a:	e9 2d ff ff ff       	jmp    c001f1bc <__divdi3+0x58>
c001f28f:	90                   	nop
c001f290:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f293:	89 f1                	mov    ecx,esi
c001f295:	d3 e7                	shl    edi,cl
c001f297:	39 c7                	cmp    edi,eax
c001f299:	73 eb                	jae    c001f286 <__divdi3+0x122>
c001f29b:	90                   	nop
c001f29c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f29f:	31 f6                	xor    esi,esi
c001f2a1:	e9 16 ff ff ff       	jmp    c001f1bc <__divdi3+0x58>
c001f2a6:	66 90                	xchg   ax,ax
c001f2a8:	31 c9                	xor    ecx,ecx
c001f2aa:	e9 0d ff ff ff       	jmp    c001f1bc <__divdi3+0x58>
c001f2af:	90                   	nop

c001f2b0 <__moddi3>:
c001f2b0:	55                   	push   ebp
c001f2b1:	57                   	push   edi
c001f2b2:	56                   	push   esi
c001f2b3:	53                   	push   ebx
c001f2b4:	83 ec 2c             	sub    esp,0x2c
c001f2b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f2bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f2bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f2c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f2c7:	85 db                	test   ebx,ebx
c001f2c9:	0f 88 85 00 00 00    	js     c001f354 <__moddi3+0xa4>
c001f2cf:	89 de                	mov    esi,ebx
c001f2d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f2d9:	89 d7                	mov    edi,edx
c001f2db:	85 d2                	test   edx,edx
c001f2dd:	79 09                	jns    c001f2e8 <__moddi3+0x38>
c001f2df:	f7 d8                	neg    eax
c001f2e1:	83 d2 00             	adc    edx,0x0
c001f2e4:	f7 da                	neg    edx
c001f2e6:	89 d7                	mov    edi,edx
c001f2e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2ec:	89 cd                	mov    ebp,ecx
c001f2ee:	85 ff                	test   edi,edi
c001f2f0:	75 52                	jne    c001f344 <__moddi3+0x94>
c001f2f2:	89 c3                	mov    ebx,eax
c001f2f4:	39 f0                	cmp    eax,esi
c001f2f6:	76 24                	jbe    c001f31c <__moddi3+0x6c>
c001f2f8:	89 c8                	mov    eax,ecx
c001f2fa:	89 f2                	mov    edx,esi
c001f2fc:	f7 f3                	div    ebx
c001f2fe:	89 d6                	mov    esi,edx
c001f300:	89 f0                	mov    eax,esi
c001f302:	31 d2                	xor    edx,edx
c001f304:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f308:	85 c9                	test   ecx,ecx
c001f30a:	74 07                	je     c001f313 <__moddi3+0x63>
c001f30c:	f7 d8                	neg    eax
c001f30e:	83 d2 00             	adc    edx,0x0
c001f311:	f7 da                	neg    edx
c001f313:	83 c4 2c             	add    esp,0x2c
c001f316:	5b                   	pop    ebx
c001f317:	5e                   	pop    esi
c001f318:	5f                   	pop    edi
c001f319:	5d                   	pop    ebp
c001f31a:	c3                   	ret    
c001f31b:	90                   	nop
c001f31c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f320:	85 db                	test   ebx,ebx
c001f322:	75 0d                	jne    c001f331 <__moddi3+0x81>
c001f324:	b8 01 00 00 00       	mov    eax,0x1
c001f329:	31 d2                	xor    edx,edx
c001f32b:	f7 f7                	div    edi
c001f32d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f331:	89 f0                	mov    eax,esi
c001f333:	31 d2                	xor    edx,edx
c001f335:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f339:	f7 f7                	div    edi
c001f33b:	89 e8                	mov    eax,ebp
c001f33d:	f7 f7                	div    edi
c001f33f:	89 d6                	mov    esi,edx
c001f341:	eb bd                	jmp    c001f300 <__moddi3+0x50>
c001f343:	90                   	nop
c001f344:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f348:	39 f7                	cmp    edi,esi
c001f34a:	76 20                	jbe    c001f36c <__moddi3+0xbc>
c001f34c:	89 c8                	mov    eax,ecx
c001f34e:	89 f2                	mov    edx,esi
c001f350:	eb b2                	jmp    c001f304 <__moddi3+0x54>
c001f352:	66 90                	xchg   ax,ax
c001f354:	f7 d9                	neg    ecx
c001f356:	83 d3 00             	adc    ebx,0x0
c001f359:	f7 db                	neg    ebx
c001f35b:	89 de                	mov    esi,ebx
c001f35d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f365:	e9 6f ff ff ff       	jmp    c001f2d9 <__moddi3+0x29>
c001f36a:	66 90                	xchg   ax,ax
c001f36c:	0f bd c7             	bsr    eax,edi
c001f36f:	83 f0 1f             	xor    eax,0x1f
c001f372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f376:	75 24                	jne    c001f39c <__moddi3+0xec>
c001f378:	39 f7                	cmp    edi,esi
c001f37a:	72 06                	jb     c001f382 <__moddi3+0xd2>
c001f37c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f380:	77 0c                	ja     c001f38e <__moddi3+0xde>
c001f382:	89 e9                	mov    ecx,ebp
c001f384:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f388:	19 fe                	sbb    esi,edi
c001f38a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f38e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f392:	89 f2                	mov    edx,esi
c001f394:	e9 6b ff ff ff       	jmp    c001f304 <__moddi3+0x54>
c001f399:	8d 76 00             	lea    esi,[esi+0x0]
c001f39c:	b8 20 00 00 00       	mov    eax,0x20
c001f3a1:	89 c2                	mov    edx,eax
c001f3a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f3a7:	29 da                	sub    edx,ebx
c001f3a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f3ad:	88 d9                	mov    cl,bl
c001f3af:	d3 e7                	shl    edi,cl
c001f3b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3b5:	88 d1                	mov    cl,dl
c001f3b7:	d3 e8                	shr    eax,cl
c001f3b9:	09 c7                	or     edi,eax
c001f3bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f3bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f3c3:	89 d8                	mov    eax,ebx
c001f3c5:	88 d9                	mov    cl,bl
c001f3c7:	d3 e7                	shl    edi,cl
c001f3c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3cd:	89 f3                	mov    ebx,esi
c001f3cf:	88 d1                	mov    cl,dl
c001f3d1:	d3 eb                	shr    ebx,cl
c001f3d3:	89 c7                	mov    edi,eax
c001f3d5:	88 c1                	mov    cl,al
c001f3d7:	d3 e6                	shl    esi,cl
c001f3d9:	89 e8                	mov    eax,ebp
c001f3db:	88 d1                	mov    cl,dl
c001f3dd:	d3 e8                	shr    eax,cl
c001f3df:	09 f0                	or     eax,esi
c001f3e1:	89 f9                	mov    ecx,edi
c001f3e3:	d3 e5                	shl    ebp,cl
c001f3e5:	89 da                	mov    edx,ebx
c001f3e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f3eb:	89 d3                	mov    ebx,edx
c001f3ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3f1:	89 c6                	mov    esi,eax
c001f3f3:	89 d1                	mov    ecx,edx
c001f3f5:	39 d3                	cmp    ebx,edx
c001f3f7:	72 27                	jb     c001f420 <__moddi3+0x170>
c001f3f9:	74 21                	je     c001f41c <__moddi3+0x16c>
c001f3fb:	29 f5                	sub    ebp,esi
c001f3fd:	19 cb                	sbb    ebx,ecx
c001f3ff:	89 de                	mov    esi,ebx
c001f401:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f405:	d3 e6                	shl    esi,cl
c001f407:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f40b:	89 f9                	mov    ecx,edi
c001f40d:	d3 ed                	shr    ebp,cl
c001f40f:	09 ee                	or     esi,ebp
c001f411:	89 f0                	mov    eax,esi
c001f413:	d3 eb                	shr    ebx,cl
c001f415:	89 da                	mov    edx,ebx
c001f417:	e9 e8 fe ff ff       	jmp    c001f304 <__moddi3+0x54>
c001f41c:	39 c5                	cmp    ebp,eax
c001f41e:	73 db                	jae    c001f3fb <__moddi3+0x14b>
c001f420:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f424:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f428:	89 d1                	mov    ecx,edx
c001f42a:	89 c6                	mov    esi,eax
c001f42c:	eb cd                	jmp    c001f3fb <__moddi3+0x14b>
c001f42e:	66 90                	xchg   ax,ax

c001f430 <__udivdi3>:
c001f430:	55                   	push   ebp
c001f431:	57                   	push   edi
c001f432:	56                   	push   esi
c001f433:	53                   	push   ebx
c001f434:	83 ec 1c             	sub    esp,0x1c
c001f437:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f43b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f43f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f443:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f447:	85 d2                	test   edx,edx
c001f449:	75 41                	jne    c001f48c <__udivdi3+0x5c>
c001f44b:	39 f7                	cmp    edi,esi
c001f44d:	76 15                	jbe    c001f464 <__udivdi3+0x34>
c001f44f:	89 e8                	mov    eax,ebp
c001f451:	89 f2                	mov    edx,esi
c001f453:	f7 f7                	div    edi
c001f455:	31 db                	xor    ebx,ebx
c001f457:	89 da                	mov    edx,ebx
c001f459:	83 c4 1c             	add    esp,0x1c
c001f45c:	5b                   	pop    ebx
c001f45d:	5e                   	pop    esi
c001f45e:	5f                   	pop    edi
c001f45f:	5d                   	pop    ebp
c001f460:	c3                   	ret    
c001f461:	8d 76 00             	lea    esi,[esi+0x0]
c001f464:	89 f9                	mov    ecx,edi
c001f466:	85 ff                	test   edi,edi
c001f468:	75 0b                	jne    c001f475 <__udivdi3+0x45>
c001f46a:	b8 01 00 00 00       	mov    eax,0x1
c001f46f:	31 d2                	xor    edx,edx
c001f471:	f7 f7                	div    edi
c001f473:	89 c1                	mov    ecx,eax
c001f475:	31 d2                	xor    edx,edx
c001f477:	89 f0                	mov    eax,esi
c001f479:	f7 f1                	div    ecx
c001f47b:	89 c3                	mov    ebx,eax
c001f47d:	89 e8                	mov    eax,ebp
c001f47f:	f7 f1                	div    ecx
c001f481:	89 da                	mov    edx,ebx
c001f483:	83 c4 1c             	add    esp,0x1c
c001f486:	5b                   	pop    ebx
c001f487:	5e                   	pop    esi
c001f488:	5f                   	pop    edi
c001f489:	5d                   	pop    ebp
c001f48a:	c3                   	ret    
c001f48b:	90                   	nop
c001f48c:	39 f2                	cmp    edx,esi
c001f48e:	77 1c                	ja     c001f4ac <__udivdi3+0x7c>
c001f490:	0f bd da             	bsr    ebx,edx
c001f493:	83 f3 1f             	xor    ebx,0x1f
c001f496:	75 24                	jne    c001f4bc <__udivdi3+0x8c>
c001f498:	39 f2                	cmp    edx,esi
c001f49a:	72 08                	jb     c001f4a4 <__udivdi3+0x74>
c001f49c:	39 ef                	cmp    edi,ebp
c001f49e:	0f 87 84 00 00 00    	ja     c001f528 <__udivdi3+0xf8>
c001f4a4:	b8 01 00 00 00       	mov    eax,0x1
c001f4a9:	eb ac                	jmp    c001f457 <__udivdi3+0x27>
c001f4ab:	90                   	nop
c001f4ac:	31 db                	xor    ebx,ebx
c001f4ae:	31 c0                	xor    eax,eax
c001f4b0:	89 da                	mov    edx,ebx
c001f4b2:	83 c4 1c             	add    esp,0x1c
c001f4b5:	5b                   	pop    ebx
c001f4b6:	5e                   	pop    esi
c001f4b7:	5f                   	pop    edi
c001f4b8:	5d                   	pop    ebp
c001f4b9:	c3                   	ret    
c001f4ba:	66 90                	xchg   ax,ax
c001f4bc:	b8 20 00 00 00       	mov    eax,0x20
c001f4c1:	29 d8                	sub    eax,ebx
c001f4c3:	88 d9                	mov    cl,bl
c001f4c5:	d3 e2                	shl    edx,cl
c001f4c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f4cb:	89 fa                	mov    edx,edi
c001f4cd:	88 c1                	mov    cl,al
c001f4cf:	d3 ea                	shr    edx,cl
c001f4d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4d5:	09 d1                	or     ecx,edx
c001f4d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f4db:	88 d9                	mov    cl,bl
c001f4dd:	d3 e7                	shl    edi,cl
c001f4df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4e3:	89 f7                	mov    edi,esi
c001f4e5:	88 c1                	mov    cl,al
c001f4e7:	d3 ef                	shr    edi,cl
c001f4e9:	88 d9                	mov    cl,bl
c001f4eb:	d3 e6                	shl    esi,cl
c001f4ed:	89 ea                	mov    edx,ebp
c001f4ef:	88 c1                	mov    cl,al
c001f4f1:	d3 ea                	shr    edx,cl
c001f4f3:	09 d6                	or     esi,edx
c001f4f5:	89 f0                	mov    eax,esi
c001f4f7:	89 fa                	mov    edx,edi
c001f4f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4fd:	89 d7                	mov    edi,edx
c001f4ff:	89 c6                	mov    esi,eax
c001f501:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f505:	39 d7                	cmp    edi,edx
c001f507:	72 13                	jb     c001f51c <__udivdi3+0xec>
c001f509:	74 09                	je     c001f514 <__udivdi3+0xe4>
c001f50b:	89 f0                	mov    eax,esi
c001f50d:	31 db                	xor    ebx,ebx
c001f50f:	e9 43 ff ff ff       	jmp    c001f457 <__udivdi3+0x27>
c001f514:	88 d9                	mov    cl,bl
c001f516:	d3 e5                	shl    ebp,cl
c001f518:	39 c5                	cmp    ebp,eax
c001f51a:	73 ef                	jae    c001f50b <__udivdi3+0xdb>
c001f51c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f51f:	31 db                	xor    ebx,ebx
c001f521:	e9 31 ff ff ff       	jmp    c001f457 <__udivdi3+0x27>
c001f526:	66 90                	xchg   ax,ax
c001f528:	31 c0                	xor    eax,eax
c001f52a:	e9 28 ff ff ff       	jmp    c001f457 <__udivdi3+0x27>
c001f52f:	90                   	nop

c001f530 <__umoddi3>:
c001f530:	55                   	push   ebp
c001f531:	57                   	push   edi
c001f532:	56                   	push   esi
c001f533:	53                   	push   ebx
c001f534:	83 ec 1c             	sub    esp,0x1c
c001f537:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f53b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f53f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f547:	89 da                	mov    edx,ebx
c001f549:	85 c0                	test   eax,eax
c001f54b:	75 37                	jne    c001f584 <__umoddi3+0x54>
c001f54d:	39 df                	cmp    edi,ebx
c001f54f:	76 13                	jbe    c001f564 <__umoddi3+0x34>
c001f551:	89 f0                	mov    eax,esi
c001f553:	f7 f7                	div    edi
c001f555:	89 d0                	mov    eax,edx
c001f557:	31 d2                	xor    edx,edx
c001f559:	83 c4 1c             	add    esp,0x1c
c001f55c:	5b                   	pop    ebx
c001f55d:	5e                   	pop    esi
c001f55e:	5f                   	pop    edi
c001f55f:	5d                   	pop    ebp
c001f560:	c3                   	ret    
c001f561:	8d 76 00             	lea    esi,[esi+0x0]
c001f564:	89 fd                	mov    ebp,edi
c001f566:	85 ff                	test   edi,edi
c001f568:	75 0b                	jne    c001f575 <__umoddi3+0x45>
c001f56a:	b8 01 00 00 00       	mov    eax,0x1
c001f56f:	31 d2                	xor    edx,edx
c001f571:	f7 f7                	div    edi
c001f573:	89 c5                	mov    ebp,eax
c001f575:	89 d8                	mov    eax,ebx
c001f577:	31 d2                	xor    edx,edx
c001f579:	f7 f5                	div    ebp
c001f57b:	89 f0                	mov    eax,esi
c001f57d:	f7 f5                	div    ebp
c001f57f:	89 d0                	mov    eax,edx
c001f581:	eb d4                	jmp    c001f557 <__umoddi3+0x27>
c001f583:	90                   	nop
c001f584:	89 f1                	mov    ecx,esi
c001f586:	39 d8                	cmp    eax,ebx
c001f588:	76 0a                	jbe    c001f594 <__umoddi3+0x64>
c001f58a:	89 f0                	mov    eax,esi
c001f58c:	83 c4 1c             	add    esp,0x1c
c001f58f:	5b                   	pop    ebx
c001f590:	5e                   	pop    esi
c001f591:	5f                   	pop    edi
c001f592:	5d                   	pop    ebp
c001f593:	c3                   	ret    
c001f594:	0f bd e8             	bsr    ebp,eax
c001f597:	83 f5 1f             	xor    ebp,0x1f
c001f59a:	75 1c                	jne    c001f5b8 <__umoddi3+0x88>
c001f59c:	39 d8                	cmp    eax,ebx
c001f59e:	72 04                	jb     c001f5a4 <__umoddi3+0x74>
c001f5a0:	39 f7                	cmp    edi,esi
c001f5a2:	77 08                	ja     c001f5ac <__umoddi3+0x7c>
c001f5a4:	89 da                	mov    edx,ebx
c001f5a6:	29 fe                	sub    esi,edi
c001f5a8:	19 c2                	sbb    edx,eax
c001f5aa:	89 f1                	mov    ecx,esi
c001f5ac:	89 c8                	mov    eax,ecx
c001f5ae:	83 c4 1c             	add    esp,0x1c
c001f5b1:	5b                   	pop    ebx
c001f5b2:	5e                   	pop    esi
c001f5b3:	5f                   	pop    edi
c001f5b4:	5d                   	pop    ebp
c001f5b5:	c3                   	ret    
c001f5b6:	66 90                	xchg   ax,ax
c001f5b8:	ba 20 00 00 00       	mov    edx,0x20
c001f5bd:	29 ea                	sub    edx,ebp
c001f5bf:	89 e9                	mov    ecx,ebp
c001f5c1:	d3 e0                	shl    eax,cl
c001f5c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f5c7:	89 f8                	mov    eax,edi
c001f5c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f5cd:	88 d1                	mov    cl,dl
c001f5cf:	d3 e8                	shr    eax,cl
c001f5d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5d5:	09 c1                	or     ecx,eax
c001f5d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5db:	89 e9                	mov    ecx,ebp
c001f5dd:	d3 e7                	shl    edi,cl
c001f5df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5e3:	89 d8                	mov    eax,ebx
c001f5e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f5e9:	88 d1                	mov    cl,dl
c001f5eb:	d3 e8                	shr    eax,cl
c001f5ed:	89 c7                	mov    edi,eax
c001f5ef:	89 e9                	mov    ecx,ebp
c001f5f1:	d3 e3                	shl    ebx,cl
c001f5f3:	89 f0                	mov    eax,esi
c001f5f5:	88 d1                	mov    cl,dl
c001f5f7:	d3 e8                	shr    eax,cl
c001f5f9:	09 d8                	or     eax,ebx
c001f5fb:	89 e9                	mov    ecx,ebp
c001f5fd:	d3 e6                	shl    esi,cl
c001f5ff:	89 f3                	mov    ebx,esi
c001f601:	89 fa                	mov    edx,edi
c001f603:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f607:	89 d1                	mov    ecx,edx
c001f609:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f60d:	89 c6                	mov    esi,eax
c001f60f:	89 d7                	mov    edi,edx
c001f611:	39 d1                	cmp    ecx,edx
c001f613:	72 27                	jb     c001f63c <__umoddi3+0x10c>
c001f615:	74 21                	je     c001f638 <__umoddi3+0x108>
c001f617:	89 ca                	mov    edx,ecx
c001f619:	29 f3                	sub    ebx,esi
c001f61b:	19 fa                	sbb    edx,edi
c001f61d:	89 d0                	mov    eax,edx
c001f61f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f623:	d3 e0                	shl    eax,cl
c001f625:	89 e9                	mov    ecx,ebp
c001f627:	d3 eb                	shr    ebx,cl
c001f629:	09 d8                	or     eax,ebx
c001f62b:	d3 ea                	shr    edx,cl
c001f62d:	83 c4 1c             	add    esp,0x1c
c001f630:	5b                   	pop    ebx
c001f631:	5e                   	pop    esi
c001f632:	5f                   	pop    edi
c001f633:	5d                   	pop    ebp
c001f634:	c3                   	ret    
c001f635:	8d 76 00             	lea    esi,[esi+0x0]
c001f638:	39 c3                	cmp    ebx,eax
c001f63a:	73 db                	jae    c001f617 <__umoddi3+0xe7>
c001f63c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f640:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f644:	89 d7                	mov    edi,edx
c001f646:	89 c6                	mov    esi,eax
c001f648:	eb cd                	jmp    c001f617 <__umoddi3+0xe7>

Disassembly of section .init:

c001f64a <_init>:
c001f64a:	55                   	push   ebp
c001f64b:	89 e5                	mov    ebp,esp
c001f64d:	e8 a2 0a fe ff       	call   c00000f4 <frame_dummy>
c001f652:	e8 e5 fa ff ff       	call   c001f13c <__do_global_ctors_aux>
c001f657:	5d                   	pop    ebp
c001f658:	c3                   	ret    

Disassembly of section .fini:

c001f659 <_fini>:
c001f659:	55                   	push   ebp
c001f65a:	89 e5                	mov    ebp,esp
c001f65c:	e8 23 0a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f661:	5d                   	pop    ebp
c001f662:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f664 <Computer::~Computer()>:
c001f664:	83 ec 0c             	sub    esp,0xc
c001f667:	ba 74 09 02 c0       	mov    edx,0xc0020974
c001f66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f670:	89 10                	mov    DWORD PTR [eax],edx
c001f672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	50                   	push   eax
c001f67a:	e8 af cf fe ff       	call   c000c62e <Device::~Device()>
c001f67f:	83 c4 10             	add    esp,0x10
c001f682:	90                   	nop
c001f683:	83 c4 0c             	add    esp,0xc
c001f686:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f688 <Computer::~Computer()>:
c001f688:	83 ec 0c             	sub    esp,0xc
c001f68b:	83 ec 0c             	sub    esp,0xc
c001f68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f692:	e8 cd ff ff ff       	call   c001f664 <Computer::~Computer()>
c001f697:	83 c4 10             	add    esp,0x10
c001f69a:	83 ec 08             	sub    esp,0x8
c001f69d:	68 70 01 00 00       	push   0x170
c001f6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6a6:	e8 61 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f6ab:	83 c4 10             	add    esp,0x10
c001f6ae:	83 c4 0c             	add    esp,0xc
c001f6b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f6b2 <idleCommon()>:
c001f6b2:	83 ec 0c             	sub    esp,0xc
c001f6b5:	fa                   	cli    
c001f6b6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f6bc:	e8 b7 66 ff ff       	call   c0015d78 <schedule()>
c001f6c1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f6c6:	48                   	dec    eax
c001f6c7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f6cc:	75 01                	jne    c001f6cf <idleCommon()+0x1d>
c001f6ce:	fb                   	sti    
c001f6cf:	83 c4 0c             	add    esp,0xc
c001f6d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f6d4 <LinkedList<UnixFile>::~LinkedList()>:
c001f6d4:	90                   	nop
c001f6d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f6d6 <LinkedList<UnixFile>::LinkedList()>:
c001f6d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f704:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f70b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f716:	90                   	nop
c001f717:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f718 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f720:	75 10                	jne    c001f732 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f722:	83 ec 0c             	sub    esp,0xc
c001f725:	68 88 0b 02 c0       	push   0xc0020b88
c001f72a:	e8 9a 1b ff ff       	call   c00112c9 <KePanic(char const*)>
c001f72f:	83 c4 10             	add    esp,0x10
c001f732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f736:	8b 00                	mov    eax,DWORD PTR [eax]
c001f738:	85 c0                	test   eax,eax
c001f73a:	74 34                	je     c001f770 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f740:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f743:	85 c0                	test   eax,eax
c001f745:	74 29                	je     c001f770 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f74e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f752:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f759:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f767:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f76e:	eb 65                	jmp    c001f7d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f774:	8b 00                	mov    eax,DWORD PTR [eax]
c001f776:	85 c0                	test   eax,eax
c001f778:	75 4b                	jne    c001f7c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f781:	85 c0                	test   eax,eax
c001f783:	75 40                	jne    c001f7c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78d:	89 10                	mov    DWORD PTR [eax],edx
c001f78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f793:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f797:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7af:	85 c0                	test   eax,eax
c001f7b1:	74 22                	je     c001f7d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7b3:	83 ec 0c             	sub    esp,0xc
c001f7b6:	68 aa 0b 02 c0       	push   0xc0020baa
c001f7bb:	e8 09 1b ff ff       	call   c00112c9 <KePanic(char const*)>
c001f7c0:	83 c4 10             	add    esp,0x10
c001f7c3:	eb 10                	jmp    c001f7d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	68 b4 0b 02 c0       	push   0xc0020bb4
c001f7cd:	e8 f7 1a ff ff       	call   c00112c9 <KePanic(char const*)>
c001f7d2:	83 c4 10             	add    esp,0x10
c001f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7dc:	8d 50 01             	lea    edx,[eax+0x1]
c001f7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7e6:	90                   	nop
c001f7e7:	83 c4 0c             	add    esp,0xc
c001f7ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f7ec <LinkedList<UnixFile>::getFirstElement()>:
c001f7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f7f4 <LinkedList<UnixFile>::removeFirst()>:
c001f7f4:	83 ec 0c             	sub    esp,0xc
c001f7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7fd:	85 c0                	test   eax,eax
c001f7ff:	75 12                	jne    c001f813 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f801:	83 ec 0c             	sub    esp,0xc
c001f804:	68 c0 0b 02 c0       	push   0xc0020bc0
c001f809:	e8 bb 1a ff ff       	call   c00112c9 <KePanic(char const*)>
c001f80e:	83 c4 10             	add    esp,0x10
c001f811:	eb 7e                	jmp    c001f891 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f817:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f81a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81d:	85 c0                	test   eax,eax
c001f81f:	74 10                	je     c001f831 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f821:	83 ec 0c             	sub    esp,0xc
c001f824:	68 0b 0c 02 c0       	push   0xc0020c0b
c001f829:	e8 9b 1a ff ff       	call   c00112c9 <KePanic(char const*)>
c001f82e:	83 c4 10             	add    esp,0x10
c001f831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f835:	8b 00                	mov    eax,DWORD PTR [eax]
c001f837:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83a:	85 c0                	test   eax,eax
c001f83c:	75 33                	jne    c001f871 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f842:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85a:	83 f8 01             	cmp    eax,0x1
c001f85d:	74 21                	je     c001f880 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f85f:	83 ec 0c             	sub    esp,0xc
c001f862:	68 e4 0b 02 c0       	push   0xc0020be4
c001f867:	e8 5d 1a ff ff       	call   c00112c9 <KePanic(char const*)>
c001f86c:	83 c4 10             	add    esp,0x10
c001f86f:	eb 0f                	jmp    c001f880 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f875:	8b 00                	mov    eax,DWORD PTR [eax]
c001f877:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87e:	89 10                	mov    DWORD PTR [eax],edx
c001f880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f887:	8d 50 ff             	lea    edx,[eax-0x1]
c001f88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f891:	83 c4 0c             	add    esp,0xc
c001f894:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f896 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f89a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f89d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f89e <DriverlessDevice::~DriverlessDevice()>:
c001f89e:	ba 9c 17 02 c0       	mov    edx,0xc002179c
c001f8a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a7:	89 10                	mov    DWORD PTR [eax],edx
c001f8a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ad:	50                   	push   eax
c001f8ae:	e8 7b cd fe ff       	call   c000c62e <Device::~Device()>
c001f8b3:	83 c4 04             	add    esp,0x4
c001f8b6:	90                   	nop
c001f8b7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f8b8 <DriverlessDevice::~DriverlessDevice()>:
c001f8b8:	83 ec 0c             	sub    esp,0xc
c001f8bb:	83 ec 0c             	sub    esp,0xc
c001f8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c2:	e8 d7 ff ff ff       	call   c001f89e <DriverlessDevice::~DriverlessDevice()>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	83 ec 08             	sub    esp,0x8
c001f8cd:	68 58 01 00 00       	push   0x158
c001f8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d6:	e8 31 af fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f8db:	83 c4 10             	add    esp,0x10
c001f8de:	83 c4 0c             	add    esp,0xc
c001f8e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f8e2 <LinkedList<Device>::addElement(Device*)>:
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8ea:	75 10                	jne    c001f8fc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f8ec:	83 ec 0c             	sub    esp,0xc
c001f8ef:	68 88 0b 02 c0       	push   0xc0020b88
c001f8f4:	e8 d0 19 ff ff       	call   c00112c9 <KePanic(char const*)>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f900:	8b 00                	mov    eax,DWORD PTR [eax]
c001f902:	85 c0                	test   eax,eax
c001f904:	74 3a                	je     c001f940 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f90d:	85 c0                	test   eax,eax
c001f90f:	74 2f                	je     c001f940 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f915:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f918:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f91c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f926:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f92a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f931:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f934:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f93e:	eb 68                	jmp    c001f9a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f944:	8b 00                	mov    eax,DWORD PTR [eax]
c001f946:	85 c0                	test   eax,eax
c001f948:	75 4e                	jne    c001f998 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f951:	85 c0                	test   eax,eax
c001f953:	75 43                	jne    c001f998 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f959:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f95d:	89 10                	mov    DWORD PTR [eax],edx
c001f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f967:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f971:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f982:	85 c0                	test   eax,eax
c001f984:	74 22                	je     c001f9a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f986:	83 ec 0c             	sub    esp,0xc
c001f989:	68 aa 0b 02 c0       	push   0xc0020baa
c001f98e:	e8 36 19 ff ff       	call   c00112c9 <KePanic(char const*)>
c001f993:	83 c4 10             	add    esp,0x10
c001f996:	eb 10                	jmp    c001f9a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f998:	83 ec 0c             	sub    esp,0xc
c001f99b:	68 b4 0b 02 c0       	push   0xc0020bb4
c001f9a0:	e8 24 19 ff ff       	call   c00112c9 <KePanic(char const*)>
c001f9a5:	83 c4 10             	add    esp,0x10
c001f9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9af:	8d 50 01             	lea    edx,[eax+0x1]
c001f9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9b9:	90                   	nop
c001f9ba:	83 c4 0c             	add    esp,0xc
c001f9bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f9be <LinkedList<Device>::LinkedList()>:
c001f9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9fe:	90                   	nop
c001f9ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fa00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa06:	85 c0                	test   eax,eax
c001fa08:	75 0e                	jne    c001fa18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fa0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa11:	85 c0                	test   eax,eax
c001fa13:	75 03                	jne    c001fa18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fa15:	b0 01                	mov    al,0x1
c001fa17:	c3                   	ret    
c001fa18:	b0 00                	mov    al,0x0
c001fa1a:	90                   	nop
c001fa1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fa1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fa1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fa24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa2d:	85 c0                	test   eax,eax
c001fa2f:	75 17                	jne    c001fa48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fa31:	83 ec 0c             	sub    esp,0xc
c001fa34:	68 c0 0b 02 c0       	push   0xc0020bc0
c001fa39:	e8 8b 18 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fa3e:	83 c4 10             	add    esp,0x10
c001fa41:	e9 96 00 00 00       	jmp    c001fadc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fa46:	66 90                	xchg   ax,ax
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa52:	85 c0                	test   eax,eax
c001fa54:	0f 95 c0             	setne  al
c001fa57:	0f b6 c0             	movzx  eax,al
c001fa5a:	85 c0                	test   eax,eax
c001fa5c:	74 12                	je     c001fa70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fa5e:	83 ec 0c             	sub    esp,0xc
c001fa61:	68 0b 0c 02 c0       	push   0xc0020c0b
c001fa66:	e8 5e 18 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fa6b:	83 c4 10             	add    esp,0x10
c001fa6e:	66 90                	xchg   ax,ax
c001fa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa79:	85 c0                	test   eax,eax
c001fa7b:	0f 94 c0             	sete   al
c001fa7e:	0f b6 c0             	movzx  eax,al
c001fa81:	85 c0                	test   eax,eax
c001fa83:	74 33                	je     c001fab8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faa1:	83 f8 01             	cmp    eax,0x1
c001faa4:	74 22                	je     c001fac8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001faa6:	83 ec 0c             	sub    esp,0xc
c001faa9:	68 e4 0b 02 c0       	push   0xc0020be4
c001faae:	e8 16 18 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fab3:	83 c4 10             	add    esp,0x10
c001fab6:	eb 10                	jmp    c001fac8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fabc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fabe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac5:	89 10                	mov    DWORD PTR [eax],edx
c001fac7:	90                   	nop
c001fac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001facf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fad9:	8d 76 00             	lea    esi,[esi+0x0]
c001fadc:	83 c4 0c             	add    esp,0xc
c001fadf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fae0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fae0:	83 ec 0c             	sub    esp,0xc
c001fae3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fae8:	75 12                	jne    c001fafc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	68 88 0b 02 c0       	push   0xc0020b88
c001faf2:	e8 d2 17 ff ff       	call   c00112c9 <KePanic(char const*)>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	66 90                	xchg   ax,ax
c001fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb02:	85 c0                	test   eax,eax
c001fb04:	74 36                	je     c001fb3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb0d:	85 c0                	test   eax,eax
c001fb0f:	74 2b                	je     c001fb3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb38:	eb 6a                	jmp    c001fba4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fb3a:	66 90                	xchg   ax,ax
c001fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb42:	85 c0                	test   eax,eax
c001fb44:	75 4e                	jne    c001fb94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb4d:	85 c0                	test   eax,eax
c001fb4f:	75 43                	jne    c001fb94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb59:	89 10                	mov    DWORD PTR [eax],edx
c001fb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7b:	85 c0                	test   eax,eax
c001fb7d:	74 25                	je     c001fba4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fb7f:	83 ec 0c             	sub    esp,0xc
c001fb82:	68 aa 0b 02 c0       	push   0xc0020baa
c001fb87:	e8 3d 17 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fb8c:	83 c4 10             	add    esp,0x10
c001fb8f:	eb 13                	jmp    c001fba4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fb91:	8d 76 00             	lea    esi,[esi+0x0]
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	68 b4 0b 02 c0       	push   0xc0020bb4
c001fb9c:	e8 28 17 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fba1:	83 c4 10             	add    esp,0x10
c001fba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbab:	8d 50 01             	lea    edx,[eax+0x1]
c001fbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbb5:	90                   	nop
c001fbb6:	83 c4 0c             	add    esp,0xc
c001fbb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fbbc <ACPI::~ACPI()>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	ba 84 1d 02 c0       	mov    edx,0xc0021d84
c001fbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc8:	89 10                	mov    DWORD PTR [eax],edx
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	83 ec 0c             	sub    esp,0xc
c001fbd1:	50                   	push   eax
c001fbd2:	e8 57 ca fe ff       	call   c000c62e <Device::~Device()>
c001fbd7:	83 c4 10             	add    esp,0x10
c001fbda:	90                   	nop
c001fbdb:	83 c4 0c             	add    esp,0xc
c001fbde:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fbe0 <ACPI::~ACPI()>:
c001fbe0:	83 ec 0c             	sub    esp,0xc
c001fbe3:	83 ec 0c             	sub    esp,0xc
c001fbe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbea:	e8 cd ff ff ff       	call   c001fbbc <ACPI::~ACPI()>
c001fbef:	83 c4 10             	add    esp,0x10
c001fbf2:	83 ec 08             	sub    esp,0x8
c001fbf5:	68 64 12 00 00       	push   0x1264
c001fbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbfe:	e8 09 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	83 c4 0c             	add    esp,0xc
c001fc09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fc0c <LinkedList<Device>::~LinkedList()>:
c001fc0c:	90                   	nop
c001fc0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fc10 <LinkedList<Device>::isEmpty()>:
c001fc10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc16:	85 c0                	test   eax,eax
c001fc18:	75 0e                	jne    c001fc28 <LinkedList<Device>::isEmpty()+0x18>
c001fc1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc21:	85 c0                	test   eax,eax
c001fc23:	75 03                	jne    c001fc28 <LinkedList<Device>::isEmpty()+0x18>
c001fc25:	b0 01                	mov    al,0x1
c001fc27:	c3                   	ret    
c001fc28:	b0 00                	mov    al,0x0
c001fc2a:	90                   	nop
c001fc2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fc2c <LinkedList<Device>::getFirstElement()>:
c001fc2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fc34 <LinkedList<Device>::removeFirst()>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc3d:	85 c0                	test   eax,eax
c001fc3f:	75 17                	jne    c001fc58 <LinkedList<Device>::removeFirst()+0x24>
c001fc41:	83 ec 0c             	sub    esp,0xc
c001fc44:	68 c0 0b 02 c0       	push   0xc0020bc0
c001fc49:	e8 7b 16 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fc4e:	83 c4 10             	add    esp,0x10
c001fc51:	e9 92 00 00 00       	jmp    c001fce8 <LinkedList<Device>::removeFirst()+0xb4>
c001fc56:	66 90                	xchg   ax,ax
c001fc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fc65:	85 c0                	test   eax,eax
c001fc67:	74 13                	je     c001fc7c <LinkedList<Device>::removeFirst()+0x48>
c001fc69:	83 ec 0c             	sub    esp,0xc
c001fc6c:	68 0b 0c 02 c0       	push   0xc0020c0b
c001fc71:	e8 53 16 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fc76:	83 c4 10             	add    esp,0x10
c001fc79:	8d 76 00             	lea    esi,[esi+0x0]
c001fc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fc88:	85 c0                	test   eax,eax
c001fc8a:	75 34                	jne    c001fcc0 <LinkedList<Device>::removeFirst()+0x8c>
c001fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fca8:	83 f8 01             	cmp    eax,0x1
c001fcab:	74 27                	je     c001fcd4 <LinkedList<Device>::removeFirst()+0xa0>
c001fcad:	83 ec 0c             	sub    esp,0xc
c001fcb0:	68 e4 0b 02 c0       	push   0xc0020be4
c001fcb5:	e8 0f 16 ff ff       	call   c00112c9 <KePanic(char const*)>
c001fcba:	83 c4 10             	add    esp,0x10
c001fcbd:	eb 15                	jmp    c001fcd4 <LinkedList<Device>::removeFirst()+0xa0>
c001fcbf:	90                   	nop
c001fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	89 10                	mov    DWORD PTR [eax],edx
c001fcd2:	66 90                	xchg   ax,ax
c001fcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcdb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fce5:	8d 76 00             	lea    esi,[esi+0x0]
c001fce8:	83 c4 0c             	add    esp,0xc
c001fceb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fcec <CPU::~CPU()>:
c001fcec:	83 ec 0c             	sub    esp,0xc
c001fcef:	ba 2c 1f 02 c0       	mov    edx,0xc0021f2c
c001fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf8:	89 10                	mov    DWORD PTR [eax],edx
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	83 ec 0c             	sub    esp,0xc
c001fd01:	50                   	push   eax
c001fd02:	e8 27 c9 fe ff       	call   c000c62e <Device::~Device()>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	90                   	nop
c001fd0b:	83 c4 0c             	add    esp,0xc
c001fd0e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fd10 <CPU::~CPU()>:
c001fd10:	83 ec 0c             	sub    esp,0xc
c001fd13:	83 ec 0c             	sub    esp,0xc
c001fd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd1a:	e8 cd ff ff ff       	call   c001fcec <CPU::~CPU()>
c001fd1f:	83 c4 10             	add    esp,0x10
c001fd22:	83 ec 08             	sub    esp,0x8
c001fd25:	68 94 11 00 00       	push   0x1194
c001fd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd2e:	e8 d9 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	83 c4 0c             	add    esp,0xc
c001fd39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fd3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fd3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fd44 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fd44:	90                   	nop
c001fd45:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fd48 <ThreadControlBlock::ThreadControlBlock()>:
c001fd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd57:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd62:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fd69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fd74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd78:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fd7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd83:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fd87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fd8f:	90                   	nop
c001fd90:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fda9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdcd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdd4:	90                   	nop
c001fdd5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fdd6 <PCI::~PCI()>:
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001fdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde2:	89 10                	mov    DWORD PTR [eax],edx
c001fde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	50                   	push   eax
c001fdec:	e8 cf c2 fe ff       	call   c000c0c0 <Bus::~Bus()>
c001fdf1:	83 c4 10             	add    esp,0x10
c001fdf4:	90                   	nop
c001fdf5:	83 c4 0c             	add    esp,0xc
c001fdf8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fdfa <PCI::~PCI()>:
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	83 ec 0c             	sub    esp,0xc
c001fe00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe04:	e8 cd ff ff ff       	call   c001fdd6 <PCI::~PCI()>
c001fe09:	83 c4 10             	add    esp,0x10
c001fe0c:	83 ec 08             	sub    esp,0x8
c001fe0f:	68 5c 01 00 00       	push   0x15c
c001fe14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe18:	e8 ef a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe1d:	83 c4 10             	add    esp,0x10
c001fe20:	83 c4 0c             	add    esp,0xc
c001fe23:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fe24 <IDE::~IDE()>:
c001fe24:	83 ec 0c             	sub    esp,0xc
c001fe27:	ba c0 2e 02 c0       	mov    edx,0xc0022ec0
c001fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe30:	89 10                	mov    DWORD PTR [eax],edx
c001fe32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe36:	83 ec 0c             	sub    esp,0xc
c001fe39:	50                   	push   eax
c001fe3a:	e8 69 cc fe ff       	call   c000caa8 <HardDiskController::~HardDiskController()>
c001fe3f:	83 c4 10             	add    esp,0x10
c001fe42:	90                   	nop
c001fe43:	83 c4 0c             	add    esp,0xc
c001fe46:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fe48 <IDE::~IDE()>:
c001fe48:	83 ec 0c             	sub    esp,0xc
c001fe4b:	83 ec 0c             	sub    esp,0xc
c001fe4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe52:	e8 cd ff ff ff       	call   c001fe24 <IDE::~IDE()>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	83 ec 08             	sub    esp,0x8
c001fe5d:	68 70 02 00 00       	push   0x270
c001fe62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe66:	e8 a1 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe6b:	83 c4 10             	add    esp,0x10
c001fe6e:	83 c4 0c             	add    esp,0xc
c001fe71:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fe72 <SATABus::~SATABus()>:
c001fe72:	83 ec 0c             	sub    esp,0xc
c001fe75:	ba 10 2f 02 c0       	mov    edx,0xc0022f10
c001fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7e:	89 10                	mov    DWORD PTR [eax],edx
c001fe80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe84:	83 ec 0c             	sub    esp,0xc
c001fe87:	50                   	push   eax
c001fe88:	e8 1b cc fe ff       	call   c000caa8 <HardDiskController::~HardDiskController()>
c001fe8d:	83 c4 10             	add    esp,0x10
c001fe90:	90                   	nop
c001fe91:	83 c4 0c             	add    esp,0xc
c001fe94:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fe96 <SATABus::~SATABus()>:
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	83 ec 0c             	sub    esp,0xc
c001fe9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea0:	e8 cd ff ff ff       	call   c001fe72 <SATABus::~SATABus()>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	83 ec 08             	sub    esp,0x8
c001feab:	68 64 01 00 00       	push   0x164
c001feb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb4:	e8 53 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feb9:	83 c4 10             	add    esp,0x10
c001febc:	83 c4 0c             	add    esp,0xc
c001febf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fec0 <ATA::~ATA()>:
c001fec0:	83 ec 0c             	sub    esp,0xc
c001fec3:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecc:	89 10                	mov    DWORD PTR [eax],edx
c001fece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed2:	83 ec 0c             	sub    esp,0xc
c001fed5:	50                   	push   eax
c001fed6:	e8 af cc fe ff       	call   c000cb8a <PhysicalDisk::~PhysicalDisk()>
c001fedb:	83 c4 10             	add    esp,0x10
c001fede:	90                   	nop
c001fedf:	83 c4 0c             	add    esp,0xc
c001fee2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fee4 <ATA::~ATA()>:
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	83 ec 0c             	sub    esp,0xc
c001feea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feee:	e8 cd ff ff ff       	call   c001fec0 <ATA::~ATA()>
c001fef3:	83 c4 10             	add    esp,0x10
c001fef6:	83 ec 08             	sub    esp,0x8
c001fef9:	68 7c 01 00 00       	push   0x17c
c001fefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff02:	e8 05 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	83 c4 0c             	add    esp,0xc
c001ff0d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ff0e <ATAPI::~ATAPI()>:
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	ba 98 2f 02 c0       	mov    edx,0xc0022f98
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	89 10                	mov    DWORD PTR [eax],edx
c001ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff20:	83 ec 0c             	sub    esp,0xc
c001ff23:	50                   	push   eax
c001ff24:	e8 61 cc fe ff       	call   c000cb8a <PhysicalDisk::~PhysicalDisk()>
c001ff29:	83 c4 10             	add    esp,0x10
c001ff2c:	90                   	nop
c001ff2d:	83 c4 0c             	add    esp,0xc
c001ff30:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ff32 <ATAPI::~ATAPI()>:
c001ff32:	83 ec 0c             	sub    esp,0xc
c001ff35:	83 ec 0c             	sub    esp,0xc
c001ff38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3c:	e8 cd ff ff ff       	call   c001ff0e <ATAPI::~ATAPI()>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	83 ec 08             	sub    esp,0x8
c001ff47:	68 84 01 00 00       	push   0x184
c001ff4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff50:	e8 b7 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff55:	83 c4 10             	add    esp,0x10
c001ff58:	83 c4 0c             	add    esp,0xc
c001ff5b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ff5c <SATA::~SATA()>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	ba 4c 30 02 c0       	mov    edx,0xc002304c
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	89 10                	mov    DWORD PTR [eax],edx
c001ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	50                   	push   eax
c001ff72:	e8 13 cc fe ff       	call   c000cb8a <PhysicalDisk::~PhysicalDisk()>
c001ff77:	83 c4 10             	add    esp,0x10
c001ff7a:	90                   	nop
c001ff7b:	83 c4 0c             	add    esp,0xc
c001ff7e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ff80 <SATA::~SATA()>:
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	83 ec 0c             	sub    esp,0xc
c001ff86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8a:	e8 cd ff ff ff       	call   c001ff5c <SATA::~SATA()>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	83 ec 08             	sub    esp,0x8
c001ff95:	68 7c 01 00 00       	push   0x17c
c001ff9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9e:	e8 69 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ffa3:	83 c4 10             	add    esp,0x10
c001ffa6:	83 c4 0c             	add    esp,0xc
c001ffa9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ffaa <SATAPI::~SATAPI()>:
c001ffaa:	83 ec 0c             	sub    esp,0xc
c001ffad:	ba 70 31 02 c0       	mov    edx,0xc0023170
c001ffb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb6:	89 10                	mov    DWORD PTR [eax],edx
c001ffb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	50                   	push   eax
c001ffc0:	e8 c5 cb fe ff       	call   c000cb8a <PhysicalDisk::~PhysicalDisk()>
c001ffc5:	83 c4 10             	add    esp,0x10
c001ffc8:	90                   	nop
c001ffc9:	83 c4 0c             	add    esp,0xc
c001ffcc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ffce <SATAPI::~SATAPI()>:
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	83 ec 0c             	sub    esp,0xc
c001ffd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd8:	e8 cd ff ff ff       	call   c001ffaa <SATAPI::~SATAPI()>
c001ffdd:	83 c4 10             	add    esp,0x10
c001ffe0:	83 ec 08             	sub    esp,0x8
c001ffe3:	68 84 01 00 00       	push   0x184
c001ffe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffec:	e8 1b a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fff1:	83 c4 10             	add    esp,0x10
c001fff4:	83 c4 0c             	add    esp,0xc
c001fff7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fff8 <IOAPIC::~IOAPIC()>:
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	ba b0 31 02 c0       	mov    edx,0xc00231b0
c0020000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020004:	89 10                	mov    DWORD PTR [eax],edx
c0020006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000a:	83 ec 0c             	sub    esp,0xc
c002000d:	50                   	push   eax
c002000e:	e8 1b c6 fe ff       	call   c000c62e <Device::~Device()>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	90                   	nop
c0020017:	83 c4 0c             	add    esp,0xc
c002001a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002001c <IOAPIC::~IOAPIC()>:
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	83 ec 0c             	sub    esp,0xc
c0020022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020026:	e8 cd ff ff ff       	call   c001fff8 <IOAPIC::~IOAPIC()>
c002002b:	83 c4 10             	add    esp,0x10
c002002e:	83 ec 08             	sub    esp,0x8
c0020031:	68 68 01 00 00       	push   0x168
c0020036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002003a:	e8 cd a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002003f:	83 c4 10             	add    esp,0x10
c0020042:	83 c4 0c             	add    esp,0xc
c0020045:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020048 <APICTimer::~APICTimer()>:
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	ba f8 31 02 c0       	mov    edx,0xc00231f8
c0020050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020054:	89 10                	mov    DWORD PTR [eax],edx
c0020056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005a:	83 ec 0c             	sub    esp,0xc
c002005d:	50                   	push   eax
c002005e:	e8 a1 e0 fe ff       	call   c000e104 <Timer::~Timer()>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	90                   	nop
c0020067:	83 c4 0c             	add    esp,0xc
c002006a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002006c <APICTimer::~APICTimer()>:
c002006c:	83 ec 0c             	sub    esp,0xc
c002006f:	83 ec 0c             	sub    esp,0xc
c0020072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020076:	e8 cd ff ff ff       	call   c0020048 <APICTimer::~APICTimer()>
c002007b:	83 c4 10             	add    esp,0x10
c002007e:	83 ec 08             	sub    esp,0x8
c0020081:	68 60 01 00 00       	push   0x160
c0020086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002008a:	e8 7d a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002008f:	83 c4 10             	add    esp,0x10
c0020092:	83 c4 0c             	add    esp,0xc
c0020095:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020098 <PIT::~PIT()>:
c0020098:	83 ec 0c             	sub    esp,0xc
c002009b:	ba 48 32 02 c0       	mov    edx,0xc0023248
c00200a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a4:	89 10                	mov    DWORD PTR [eax],edx
c00200a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200aa:	83 ec 0c             	sub    esp,0xc
c00200ad:	50                   	push   eax
c00200ae:	e8 51 e0 fe ff       	call   c000e104 <Timer::~Timer()>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	90                   	nop
c00200b7:	83 c4 0c             	add    esp,0xc
c00200ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00200bc <PIT::~PIT()>:
c00200bc:	83 ec 0c             	sub    esp,0xc
c00200bf:	83 ec 0c             	sub    esp,0xc
c00200c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c6:	e8 cd ff ff ff       	call   c0020098 <PIT::~PIT()>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	83 ec 08             	sub    esp,0x8
c00200d1:	68 5c 01 00 00       	push   0x15c
c00200d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200da:	e8 2d a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	83 c4 0c             	add    esp,0xc
c00200e5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 5d 20 02 c0       	mov    esi,0xc002205d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 79 20 02 c0       	mov    esi,0xc0022079
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
