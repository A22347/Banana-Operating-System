
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 05 7b 00 00       	call   c0007b25 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 2d 02 c0       	mov    eax,0xc0022de4
c0000025:	3d e4 2d 02 c0       	cmp    eax,0xc0022de4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 2d 02 c0       	push   0xc0022de4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 2d 02 c0       	mov    eax,0xc0022de4
c0000051:	2d e4 2d 02 c0       	sub    eax,0xc0022de4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 2d 02 c0       	push   0xc0022de4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c f6 01 c0       	mov    ebx,0xc001f63c
c0000097:	81 eb 38 f6 01 c0    	sub    ebx,0xc001f638
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 f6 01 c0       	mov    esi,0xc001f638
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 2d 02 c0       	push   0xc0022de4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 e4 2d 02 c0       	push   0xc0022de4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 af 48 01 00       	call   c0014b5c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f0 a3 00 00       	call   c000a6b5 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 8d 48 01 00       	call   c0014b5c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 9a 4d 01 00       	call   c0015088 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 35 54 01 00       	call   c001572c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 89 07 01 00       	jmp    c0010b08 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 40 f6 01 c0 02 	test   BYTE PTR [edx-0x3ffe09c0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 40 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe09c0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 40 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe09c0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 40 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe09c0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 40 f6 01 c0 04 	test   BYTE PTR [ecx-0x3ffe09c0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 40 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe09c0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e2a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 9b 6a 00 00       	call   c00079a0 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 f6 69 00 00       	call   c00079a0 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e0 69 00 00       	call   c00079a0 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 de 68 00 00       	call   c00079a0 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011af:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000124f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000126a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001324:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000132a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001331:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013f7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013fd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001404:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001552:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 44 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe08bc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 b2 6e 01 00       	jmp    c0018c8c <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 dc 6e 01 00       	jmp    c0018ccc <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 fd 6e 01 00       	jmp    c0018d0c <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 a0 f8 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0760]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 a0 f8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0760]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 62 f7 01 c0       	mov    eax,0xc001f762
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 20 f8 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe07e0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 6b f7 01 c0       	mov    eax,0xc001f76b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 a0 f8 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0760]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 f0 f7 01 c0       	mov    eax,0xc001f7f0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb e0 f7 01 c0       	mov    ebx,0xc001f7e0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 c0 f7 01 c0       	mov    eax,0xc001f7c0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 d0 f7 01 c0       	mov    eax,0xc001f7d0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 72 f7 01 c0       	mov    edx,0xc001f772
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 7e f7 01 c0       	mov    edx,0xc001f77e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 92 f7 01 c0       	mov    edx,0xc001f792
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 68 1e 00 00       	call   c0007acb <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 60 1e 00 00       	call   c0007adb <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c c0 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fbc0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 c0 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbc0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 c0 f9 01 c0       	mov    eax,0xc001f9c0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 00 f9 01 c0       	mov    eax,0xc001f900
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 c0 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0740]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 c0 fc 01 c0       	push   0xc001fcc0
c0006147:	e8 e4 34 01 00       	call   c0019630 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ce fc 01 c0       	push   0xc001fcce
c000617f:	e8 ac 34 01 00       	call   c0019630 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 15 34 01 00       	call   c00195d4 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 40 02 c0       	mov    eax,0xc0024020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 dd fc 01 c0       	push   0xc001fcdd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000657b:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006585:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c000659d:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006616:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00066ad:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000670f:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000674c:	05 40 45 02 c0       	add    eax,0xc0024540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c000680c:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 e0 fc 01 c0       	push   0xc001fce0
c000682f:	e8 fc 2d 01 00       	call   c0019630 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 0a 2e 01 00       	call   c001964c <iso_kprintfd>
c0006842:	c7 04 24 e5 fc 01 c0 	mov    DWORD PTR [esp],0xc001fce5
c0006849:	e8 e2 2d 01 00       	call   c0019630 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006855:	e8 f2 2d 01 00       	call   c001964c <iso_kprintfd>
c000685a:	c7 04 24 eb fc 01 c0 	mov    DWORD PTR [esp],0xc001fceb
c0006861:	e8 ca 2d 01 00       	call   c0019630 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c000686d:	e8 da 2d 01 00       	call   c001964c <iso_kprintfd>
c0006872:	c7 04 24 f1 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcf1
c0006879:	e8 b2 2d 01 00       	call   c0019630 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006885:	e8 c2 2d 01 00       	call   c001964c <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068eb:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 dd fc 01 c0       	push   0xc001fcdd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a2a:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a30:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 fa fc 01 c0       	push   0xc001fcfa
c0006a52:	e8 d9 2b 01 00       	call   c0019630 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a87:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 05 fd 01 c0       	push   0xc001fd05
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 0c fd 01 c0       	push   0xc001fd0c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b25:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b48:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 13 fd 01 c0       	push   0xc001fd13
c0006b69:	e8 c2 2a 01 00       	call   c0019630 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 1e fd 01 c0       	push   0xc001fd1e
c0006b84:	e8 a7 2a 01 00       	call   c0019630 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 45 02 c0       	push   0xc0024540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 18 0f 00 00       	call   c0007acb <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006bbf:	e8 07 0f 00 00       	call   c0007acb <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 f2 0e 00 00       	call   c0007acb <malloc>
c0006bd9:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 d9 0e 00 00       	call   c0007acb <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006c1f:	e8 b7 0e 00 00       	call   c0007adb <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 a9 0e 00 00       	call   c0007adb <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 8f 0e 00 00       	call   c0007adb <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 7a 0e 00 00       	call   c0007adb <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	83 ec 0c             	sub    esp,0xc
c0006c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006c92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c98:	50                   	push   eax
c0006c99:	e8 b4 54 00 00       	call   c000c152 <Device::closeAll()>
c0006c9e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca4:	83 c4 10             	add    esp,0x10
c0006ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ca9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cbd:	5b                   	pop    ebx
c0006cbe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc1:	5e                   	pop    esi
c0006cc2:	5f                   	pop    edi
c0006cc3:	ff e0                	jmp    eax

c0006cc5 <Krnl::firstTask()>:
c0006cc5:	53                   	push   ebx
c0006cc6:	83 ec 14             	sub    esp,0x14
c0006cc9:	fb                   	sti    
c0006cca:	68 2f fd 01 c0       	push   0xc001fd2f
c0006ccf:	e8 73 97 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0006cd4:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cdb:	e8 eb 0d 00 00       	call   c0007acb <malloc>
c0006ce0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ce7:	89 c3                	mov    ebx,eax
c0006ce9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cee:	50                   	push   eax
c0006cef:	68 48 fd 01 c0       	push   0xc001fd48
c0006cf4:	6a 01                	push   0x1
c0006cf6:	53                   	push   ebx
c0006cf7:	e8 b8 e1 00 00       	call   c0014eb4 <Process::Process(bool, char const*, Process*, char**)>
c0006cfc:	83 c4 20             	add    esp,0x20
c0006cff:	68 ff 00 00 00       	push   0xff
c0006d04:	6a 00                	push   0x0
c0006d06:	68 15 75 00 c0       	push   0xc0007515
c0006d0b:	53                   	push   ebx
c0006d0c:	e8 c7 e3 00 00       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c0006d11:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006d17:	6a 7a                	push   0x7a
c0006d19:	6a 00                	push   0x0
c0006d1b:	68 9c 5b 01 c0       	push   0xc0015b9c
c0006d20:	52                   	push   edx
c0006d21:	e8 b2 e3 00 00       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c0006d26:	83 c4 20             	add    esp,0x20
c0006d29:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d30:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d35:	e8 9a 9f 00 00       	call   c0010cd4 <KeInitRand()>
c0006d3a:	83 ec 0c             	sub    esp,0xc
c0006d3d:	68 44 fe 01 c0       	push   0xc001fe44
c0006d42:	e8 00 97 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0006d47:	e8 73 f2 00 00       	call   c0015fbf <Vm::initialise8086()>
c0006d4c:	e8 23 42 00 00       	call   c000af74 <Fs::initVFS()>
c0006d51:	c7 04 24 55 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd55
c0006d58:	e8 ea 96 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0006d5d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d62:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6a:	6a 00                	push   0x0
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	50                   	push   eax
c0006d71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d74:	83 c4 14             	add    esp,0x14
c0006d77:	68 44 fe 01 c0       	push   0xc001fe44
c0006d7c:	e8 c6 96 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0006d81:	e8 fa 9b 00 00       	call   c0010980 <KeLoadSystemEnv()>
c0006d86:	e8 57 9e 00 00       	call   c0010be2 <KeSetupPowerManager()>
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	6a 3a                	push   0x3a
c0006d90:	68 6f fd 01 c0       	push   0xc001fd6f
c0006d95:	68 78 fd 01 c0       	push   0xc001fd78
c0006d9a:	e8 3f c4 00 00       	call   c00131de <Reg::readIntWithDefault(char*, char*, int)>
c0006d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da2:	e8 05 4d 00 00       	call   c000baac <User::loadClockSettings(int)>
c0006da7:	c7 04 24 68 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe68
c0006dae:	e8 94 96 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0006db3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006db8:	59                   	pop    ecx
c0006db9:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dbf:	53                   	push   ebx
c0006dc0:	e8 8b 53 00 00       	call   c000c150 <Device::loadDriversForAll()>
c0006dc5:	c7 04 24 80 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd80
c0006dcc:	e8 76 96 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0006dd1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dd7:	58                   	pop    eax
c0006dd8:	5a                   	pop    edx
c0006dd9:	6a 01                	push   0x1
c0006ddb:	68 91 fd 01 c0       	push   0xc001fd91
c0006de0:	e8 d3 da 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c0006de5:	59                   	pop    ecx
c0006de6:	5a                   	pop    edx
c0006de7:	53                   	push   ebx
c0006de8:	50                   	push   eax
c0006de9:	e8 0a dd 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c0006dee:	83 c4 10             	add    esp,0x10
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	6a 02                	push   0x2
c0006df6:	e8 29 e7 00 00       	call   c0015524 <blockTask(TaskState)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	eb f1                	jmp    c0006df1 <Krnl::firstTask()+0x12c>

c0006e00 <Computer::Computer()>:
c0006e00:	83 ec 0c             	sub    esp,0xc
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	83 ec 08             	sub    esp,0x8
c0006e0a:	68 ad fd 01 c0       	push   0xc001fdad
c0006e0f:	50                   	push   eax
c0006e10:	e8 b7 53 00 00       	call   c000c1cc <Device::Device(char const*)>
c0006e15:	83 c4 10             	add    esp,0x10
c0006e18:	ba b4 fe 01 c0       	mov    edx,0xc001feb4
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	89 10                	mov    DWORD PTR [eax],edx
c0006e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e27:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e43:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e49:	83 ca 04             	or     edx,0x4
c0006e4c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e74:	0f b6 d0             	movzx  edx,al
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0006e8d:	88 d1                	mov    cl,dl
c0006e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e93:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e99:	0f b6 d0             	movzx  edx,al
c0006e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006ea4:	83 e1 3f             	and    ecx,0x3f
c0006ea7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eab:	90                   	nop
c0006eac:	83 c4 0c             	add    esp,0xc
c0006eaf:	c3                   	ret    

c0006eb0 <Computer::setBootMessage(char const*)>:
c0006eb0:	c3                   	ret    
c0006eb1:	90                   	nop

c0006eb2 <Computer::detectFeatures()>:
c0006eb2:	55                   	push   ebp
c0006eb3:	57                   	push   edi
c0006eb4:	56                   	push   esi
c0006eb5:	53                   	push   ebx
c0006eb6:	83 ec 1c             	sub    esp,0x1c
c0006eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ebd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ec3:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ec9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ecf:	e8 25 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ed4:	31 d2                	xor    edx,edx
c0006ed6:	85 c0                	test   eax,eax
c0006ed8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ede:	0f 95 c2             	setne  dl
c0006ee1:	d1 e2                	shl    edx,1
c0006ee3:	83 e0 fd             	and    eax,0xfffffffd
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006eee:	a8 02                	test   al,0x2
c0006ef0:	75 51                	jne    c0006f43 <Computer::detectFeatures()+0x91>
c0006ef2:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ef9:	74 0f                	je     c0006f0a <Computer::detectFeatures()+0x58>
c0006efb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f01:	83 e0 fb             	and    eax,0xfffffffb
c0006f04:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0a:	e8 27 77 01 00       	call   c001e636 <x87Detect>
c0006f0f:	83 e0 01             	and    eax,0x1
c0006f12:	c1 e0 04             	shl    eax,0x4
c0006f15:	89 c2                	mov    edx,eax
c0006f17:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f1d:	83 e0 ef             	and    eax,0xffffffef
c0006f20:	09 d0                	or     eax,edx
c0006f22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f28:	a8 10                	test   al,0x10
c0006f2a:	88 c2                	mov    dl,al
c0006f2c:	0f 85 33 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1b3>
c0006f32:	80 e2 80             	and    dl,0x80
c0006f35:	0f 85 4c 01 00 00    	jne    c0007087 <Computer::detectFeatures()+0x1d5>
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	5f                   	pop    edi
c0006f41:	5d                   	pop    ebp
c0006f42:	c3                   	ret    
c0006f43:	83 ec 0c             	sub    esp,0xc
c0006f46:	6a 20                	push   0x20
c0006f48:	e8 e9 89 00 00       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c0006f4d:	83 e0 01             	and    eax,0x1
c0006f50:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f5d:	83 e0 f7             	and    eax,0xfffffff7
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f68:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f6f:	e8 c2 89 00 00       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	83 e2 01             	and    edx,0x1
c0006f7f:	83 e0 fe             	and    eax,0xfffffffe
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f91:	e8 a0 89 00 00       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	89 c2                	mov    edx,eax
c0006f98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f9e:	c1 e2 07             	shl    edx,0x7
c0006fa1:	83 e0 7f             	and    eax,0x7f
c0006fa4:	09 d0                	or     eax,edx
c0006fa6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fac:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fb3:	e8 7e 89 00 00       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	83 e0 01             	and    eax,0x1
c0006fbe:	c1 e0 05             	shl    eax,0x5
c0006fc1:	89 c2                	mov    edx,eax
c0006fc3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc9:	83 e0 df             	and    eax,0xffffffdf
c0006fcc:	09 d0                	or     eax,edx
c0006fce:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fde:	0f 84 c9 00 00 00    	je     c00070ad <Computer::detectFeatures()+0x1fb>
c0006fe4:	83 e0 fe             	and    eax,0xfffffffe
c0006fe7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff3:	89 c2                	mov    edx,eax
c0006ff5:	83 e2 09             	and    edx,0x9
c0006ff8:	83 fa 01             	cmp    edx,0x1
c0006ffb:	75 09                	jne    c0007006 <Computer::detectFeatures()+0x154>
c0006ffd:	83 e0 fe             	and    eax,0xfffffffe
c0007000:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8d 44 24 18          	lea    eax,[esp+0x18]
c000700d:	50                   	push   eax
c000700e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007012:	55                   	push   ebp
c0007013:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007017:	57                   	push   edi
c0007018:	8d 74 24 18          	lea    esi,[esp+0x18]
c000701c:	56                   	push   esi
c000701d:	68 00 00 00 80       	push   0x80000000
c0007022:	e8 8b 88 00 00       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007027:	83 c4 20             	add    esp,0x20
c000702a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007035:	0f 86 b7 fe ff ff    	jbe    c0006ef2 <Computer::detectFeatures()+0x40>
c000703b:	83 ec 0c             	sub    esp,0xc
c000703e:	50                   	push   eax
c000703f:	55                   	push   ebp
c0007040:	57                   	push   edi
c0007041:	56                   	push   esi
c0007042:	68 01 00 00 80       	push   0x80000001
c0007047:	e8 66 88 00 00       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000704c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007052:	83 c4 20             	add    esp,0x20
c0007055:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000705a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007060:	e9 8d fe ff ff       	jmp    c0006ef2 <Computer::detectFeatures()+0x40>
c0007065:	e8 86 75 01 00       	call   c001e5f0 <absolutelyNoChanceInHell>
c000706a:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007070:	83 e2 7f             	and    edx,0x7f
c0007073:	c1 e0 07             	shl    eax,0x7
c0007076:	09 c2                	or     edx,eax
c0007078:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000707e:	80 e2 80             	and    dl,0x80
c0007081:	0f 84 b4 fe ff ff    	je     c0006f3b <Computer::detectFeatures()+0x89>
c0007087:	e8 d4 71 01 00       	call   c001e260 <avxDetect>
c000708c:	83 e0 01             	and    eax,0x1
c000708f:	c1 e0 05             	shl    eax,0x5
c0007092:	89 c2                	mov    edx,eax
c0007094:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000709a:	83 e0 df             	and    eax,0xffffffdf
c000709d:	09 d0                	or     eax,edx
c000709f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070a5:	83 c4 1c             	add    esp,0x1c
c00070a8:	5b                   	pop    ebx
c00070a9:	5e                   	pop    esi
c00070aa:	5f                   	pop    edi
c00070ab:	5d                   	pop    ebp
c00070ac:	c3                   	ret    
c00070ad:	83 ec 0c             	sub    esp,0xc
c00070b0:	68 00 02 00 00       	push   0x200
c00070b5:	e8 7c 88 00 00       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c00070ba:	83 c4 10             	add    esp,0x10
c00070bd:	89 c2                	mov    edx,eax
c00070bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070c5:	83 e2 01             	and    edx,0x1
c00070c8:	83 e0 fe             	and    eax,0xfffffffe
c00070cb:	09 d0                	or     eax,edx
c00070cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070d3:	e9 15 ff ff ff       	jmp    c0006fed <Computer::detectFeatures()+0x13b>

c00070d8 <Computer::displayFeatures()>:
c00070d8:	c3                   	ret    
c00070d9:	90                   	nop

c00070da <Computer::rdmsr(unsigned int)>:
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070e8:	74 0a                	je     c00070f4 <Computer::rdmsr(unsigned int)+0x1a>
c00070ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070ee:	0f 32                	rdmsr  
c00070f0:	83 c4 0c             	add    esp,0xc
c00070f3:	c3                   	ret    
c00070f4:	83 ec 0c             	sub    esp,0xc
c00070f7:	68 b6 fd 01 c0       	push   0xc001fdb6
c00070fc:	e8 1c 9a 00 00       	call   c0010b1d <KePanic(char const*)>
c0007101:	83 c4 10             	add    esp,0x10
c0007104:	eb e4                	jmp    c00070ea <Computer::rdmsr(unsigned int)+0x10>

c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007106:	57                   	push   edi
c0007107:	56                   	push   esi
c0007108:	83 ec 04             	sub    esp,0x4
c000710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000710f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007113:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007117:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000711e:	74 10                	je     c0007130 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007120:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007124:	89 f0                	mov    eax,esi
c0007126:	89 fa                	mov    edx,edi
c0007128:	0f 30                	wrmsr  
c000712a:	83 c4 04             	add    esp,0x4
c000712d:	5e                   	pop    esi
c000712e:	5f                   	pop    edi
c000712f:	c3                   	ret    
c0007130:	83 ec 0c             	sub    esp,0xc
c0007133:	68 bc fd 01 c0       	push   0xc001fdbc
c0007138:	e8 e0 99 00 00       	call   c0010b1d <KePanic(char const*)>
c000713d:	83 c4 10             	add    esp,0x10
c0007140:	eb de                	jmp    c0007120 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007142 <Computer::shutdown()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 00                	push   0x0
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::restart()>:
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007161:	8b 10                	mov    edx,DWORD PTR [eax]
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	6a 01                	push   0x1
c0007169:	50                   	push   eax
c000716a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716d:	83 c4 1c             	add    esp,0x1c
c0007170:	c3                   	ret    
c0007171:	90                   	nop

c0007172 <Computer::sleep()>:
c0007172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007176:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000717c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007180:	e9 83 82 00 00       	jmp    c000f408 <ACPI::sleep()>
c0007185:	90                   	nop

c0007186 <Computer::nmiEnabled()>:
c0007186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::readCMOS(unsigned char)>:
c0007192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007196:	31 d2                	xor    edx,edx
c0007198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000719c:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071a3:	75 02                	jne    c00071a7 <Computer::readCMOS(unsigned char)+0x15>
c00071a5:	b2 80                	mov    dl,0x80
c00071a7:	09 d0                	or     eax,edx
c00071a9:	e6 70                	out    0x70,al
c00071ab:	e4 71                	in     al,0x71
c00071ad:	c3                   	ret    

c00071ae <Computer::enableNMI(bool)>:
c00071ae:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071b6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071bc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071c4:	eb cc                	jmp    c0007192 <Computer::readCMOS(unsigned char)>

c00071c6 <Computer::open(int, int, void*)>:
c00071c6:	56                   	push   esi
c00071c7:	53                   	push   ebx
c00071c8:	83 ec 10             	sub    esp,0x10
c00071cb:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071d6:	68 c2 fd 01 c0       	push   0xc001fdc2
c00071db:	0f 94 05 40 26 02 c0 	sete   BYTE PTR ds:0xc0022640
c00071e2:	e8 60 92 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c00071e7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ee:	e8 d8 08 00 00       	call   c0007acb <malloc>
c00071f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f6:	89 c6                	mov    esi,eax
c00071f8:	e8 7f 7d 00 00       	call   c000ef7c <ACPI::ACPI()>
c00071fd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007203:	58                   	pop    eax
c0007204:	5a                   	pop    edx
c0007205:	56                   	push   esi
c0007206:	53                   	push   ebx
c0007207:	e8 28 4e 00 00       	call   c000c034 <Device::addChild(Device*)>
c000720c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000720f:	e8 9e fc ff ff       	call   c0006eb2 <Computer::detectFeatures()>
c0007214:	59                   	pop    ecx
c0007215:	5e                   	pop    esi
c0007216:	6a 01                	push   0x1
c0007218:	53                   	push   ebx
c0007219:	e8 90 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c000721e:	c7 04 24 da fd 01 c0 	mov    DWORD PTR [esp],0xc001fdda
c0007225:	e8 1d 92 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000722a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007231:	e8 95 08 00 00       	call   c0007acb <malloc>
c0007236:	89 04 24             	mov    DWORD PTR [esp],eax
c0007239:	89 c6                	mov    esi,eax
c000723b:	e8 ae 87 00 00       	call   c000f9ee <CPU::CPU()>
c0007240:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007246:	58                   	pop    eax
c0007247:	5a                   	pop    edx
c0007248:	56                   	push   esi
c0007249:	53                   	push   ebx
c000724a:	e8 e5 4d 00 00       	call   c000c034 <Device::addChild(Device*)>
c000724f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007255:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007259:	8b 10                	mov    edx,DWORD PTR [eax]
c000725b:	51                   	push   ecx
c000725c:	6a 00                	push   0x0
c000725e:	6a 00                	push   0x0
c0007260:	50                   	push   eax
c0007261:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007264:	83 c4 14             	add    esp,0x14
c0007267:	68 88 fe 01 c0       	push   0xc001fe88
c000726c:	e8 d6 91 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0007271:	e8 90 ff 00 00       	call   c0017206 <HalInitialiseCoprocessor()>
c0007276:	c7 04 24 f4 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdf4
c000727d:	e8 c5 91 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0007282:	c7 04 24 c5 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cc5
c0007289:	e8 72 df 00 00       	call   c0015200 <setupMultitasking(void (*)())>
c000728e:	83 c4 14             	add    esp,0x14
c0007291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	c3                   	ret    
c0007299:	90                   	nop

c000729a <Computer::disableNMI()>:
c000729a:	6a 00                	push   0x0
c000729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a0:	50                   	push   eax
c00072a1:	e8 08 ff ff ff       	call   c00071ae <Computer::enableNMI(bool)>
c00072a6:	5a                   	pop    edx
c00072a7:	59                   	pop    ecx
c00072a8:	c3                   	ret    
c00072a9:	90                   	nop

c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072aa:	53                   	push   ebx
c00072ab:	b2 80                	mov    dl,0x80
c00072ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c0:	74 02                	je     c00072c4 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072c2:	31 d2                	xor    edx,edx
c00072c4:	09 d0                	or     eax,edx
c00072c6:	e6 70                	out    0x70,al
c00072c8:	88 c8                	mov    al,cl
c00072ca:	e6 71                	out    0x71,al
c00072cc:	5b                   	pop    ebx
c00072cd:	c3                   	ret    

c00072ce <Computer::handleNMI()>:
c00072ce:	56                   	push   esi
c00072cf:	53                   	push   ebx
c00072d0:	83 ec 10             	sub    esp,0x10
c00072d3:	e4 92                	in     al,0x92
c00072d5:	89 c6                	mov    esi,eax
c00072d7:	e4 61                	in     al,0x61
c00072d9:	68 0f fe 01 c0       	push   0xc001fe0f
c00072de:	88 c3                	mov    bl,al
c00072e0:	e8 19 36 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00072e5:	83 c4 10             	add    esp,0x10
c00072e8:	83 e6 10             	and    esi,0x10
c00072eb:	75 10                	jne    c00072fd <Computer::handleNMI()+0x2f>
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	75 20                	jne    c0007312 <Computer::handleNMI()+0x44>
c00072f2:	80 e3 80             	and    bl,0x80
c00072f5:	75 30                	jne    c0007327 <Computer::handleNMI()+0x59>
c00072f7:	83 c4 04             	add    esp,0x4
c00072fa:	5b                   	pop    ebx
c00072fb:	5e                   	pop    esi
c00072fc:	c3                   	ret    
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	68 20 fe 01 c0       	push   0xc001fe20
c0007305:	e8 13 98 00 00       	call   c0010b1d <KePanic(char const*)>
c000730a:	83 c4 10             	add    esp,0x10
c000730d:	f6 c3 40             	test   bl,0x40
c0007310:	74 e0                	je     c00072f2 <Computer::handleNMI()+0x24>
c0007312:	83 ec 0c             	sub    esp,0xc
c0007315:	68 2d fe 01 c0       	push   0xc001fe2d
c000731a:	e8 fe 97 00 00       	call   c0010b1d <KePanic(char const*)>
c000731f:	83 c4 10             	add    esp,0x10
c0007322:	80 e3 80             	and    bl,0x80
c0007325:	74 d0                	je     c00072f7 <Computer::handleNMI()+0x29>
c0007327:	c7 44 24 10 37 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fe37
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	e9 e4 97 00 00       	jmp    c0010b1d <KePanic(char const*)>
c0007339:	90                   	nop

c000733a <GDTEntry::setBase(unsigned int)>:
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007342:	89 c1                	mov    ecx,eax
c0007344:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007348:	c1 e9 10             	shr    ecx,0x10
c000734b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000734e:	c1 e8 18             	shr    eax,0x18
c0007351:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007354:	c3                   	ret    
c0007355:	90                   	nop

c0007356 <GDTEntry::setLimit(unsigned int)>:
c0007356:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007361:	66 89 01             	mov    WORD PTR [ecx],ax
c0007364:	c1 e8 10             	shr    eax,0x10
c0007367:	83 e0 0f             	and    eax,0xf
c000736a:	83 e2 f0             	and    edx,0xfffffff0
c000736d:	09 d0                	or     eax,edx
c000736f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <GDT::GDT()>:
c0007374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000737e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007388:	90                   	nop
c0007389:	c3                   	ret    

c000738a <GDT::addEntry(GDTEntry)>:
c000738a:	53                   	push   ebx
c000738b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000738f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007397:	8b 02                	mov    eax,DWORD PTR [edx]
c0007399:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000739d:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a0:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073a4:	c1 e0 03             	shl    eax,0x3
c00073a7:	89 0a                	mov    DWORD PTR [edx],ecx
c00073a9:	5b                   	pop    ebx
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::getNumberOfEntries()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::flush()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00073ba:	83 c0 04             	add    eax,0x4
c00073bd:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073c2:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073c9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073d0:	e9 85 8f ff ff       	jmp    c000035a <loadGDT>
c00073d5:	90                   	nop

c00073d6 <GDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 30             	sub    esp,0x30
c00073dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e0:	6a 00                	push   0x0
c00073e2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073e6:	56                   	push   esi
c00073e7:	e8 4e ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c00073ec:	6a 00                	push   0x0
c00073ee:	56                   	push   esi
c00073ef:	e8 62 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c00073f4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073fc:	6a 00                	push   0x0
c00073fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007402:	56                   	push   esi
c0007403:	e8 32 ff ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c0007408:	68 ff ff ff 00       	push   0xffffff
c000740d:	56                   	push   esi
c000740e:	e8 43 ff ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c0007413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007417:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000741b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007420:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007424:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007429:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000742d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007431:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007435:	89 f8                	mov    eax,edi
c0007437:	89 fa                	mov    edx,edi
c0007439:	80 e4 f7             	and    ah,0xf7
c000743c:	80 ce 60             	or     dh,0x60
c000743f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007443:	89 c7                	mov    edi,eax
c0007445:	80 cc 60             	or     ah,0x60
c0007448:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000744c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007450:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007454:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007458:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000745c:	83 c4 20             	add    esp,0x20
c000745f:	6a 00                	push   0x0
c0007461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007465:	50                   	push   eax
c0007466:	e8 cf fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000746b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000746f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007473:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007477:	83 e0 3f             	and    eax,0x3f
c000747a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000747e:	6a 00                	push   0x0
c0007480:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007484:	50                   	push   eax
c0007485:	e8 b0 fe ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000748a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000748e:	83 e0 3f             	and    eax,0x3f
c0007491:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a0:	53                   	push   ebx
c00074a1:	e8 e4 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b1:	53                   	push   ebx
c00074b2:	e8 d3 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	53                   	push   ebx
c00074bd:	e8 c8 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074c9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074cd:	53                   	push   ebx
c00074ce:	e8 b7 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074de:	53                   	push   ebx
c00074df:	e8 a6 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ef:	53                   	push   ebx
c00074f0:	e8 95 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007500:	53                   	push   ebx
c0007501:	e8 84 fe ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0007506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007509:	e8 a6 fe ff ff       	call   c00073b4 <GDT::flush()>
c000750e:	83 c4 40             	add    esp,0x40
c0007511:	5b                   	pop    ebx
c0007512:	5e                   	pop    esi
c0007513:	5f                   	pop    edi
c0007514:	c3                   	ret    

c0007515 <idleFunction(void*)>:
c0007515:	83 ec 0c             	sub    esp,0xc
c0007518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000751d:	48                   	dec    eax
c000751e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007523:	75 01                	jne    c0007526 <idleFunction(void*)+0x11>
c0007525:	fb                   	sti    
c0007526:	e8 a7 f9 00 00       	call   c0016ed2 <HalSystemIdle()>
c000752b:	e8 c2 76 01 00       	call   c001ebf2 <idleCommon()>
c0007530:	eb f4                	jmp    c0007526 <idleFunction(void*)+0x11>
c0007532:	66 90                	xchg   ax,ax

c0007534 <IDTEntry::IDTEntry(bool)>:
c0007534:	53                   	push   ebx
c0007535:	83 ec 04             	sub    esp,0x4
c0007538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753c:	88 04 24             	mov    BYTE PTR [esp],al
c000753f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007543:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007558:	83 e2 f0             	and    edx,0xfffffff0
c000755b:	83 ca 0e             	or     edx,0xe
c000755e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007568:	83 e2 ef             	and    edx,0xffffffef
c000756b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007572:	85 c0                	test   eax,eax
c0007574:	74 06                	je     c000757c <IDTEntry::IDTEntry(bool)+0x48>
c0007576:	b2 03                	mov    dl,0x3
c0007578:	eb 06                	jmp    c0007580 <IDTEntry::IDTEntry(bool)+0x4c>
c000757a:	66 90                	xchg   ax,ax
c000757c:	b2 00                	mov    dl,0x0
c000757e:	66 90                	xchg   ax,ax
c0007580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007584:	83 e2 03             	and    edx,0x3
c0007587:	89 d3                	mov    ebx,edx
c0007589:	c1 e3 05             	shl    ebx,0x5
c000758c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758f:	83 e2 9f             	and    edx,0xffffff9f
c0007592:	88 d1                	mov    cl,dl
c0007594:	88 da                	mov    dl,bl
c0007596:	09 ca                	or     edx,ecx
c0007598:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000759b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a2:	83 ca 80             	or     edx,0xffffff80
c00075a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a8:	90                   	nop
c00075a9:	83 c4 04             	add    esp,0x4
c00075ac:	5b                   	pop    ebx
c00075ad:	c3                   	ret    

c00075ae <IDTEntry::setOffset(unsigned int)>:
c00075ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b6:	66 89 02             	mov    WORD PTR [edx],ax
c00075b9:	c1 e8 10             	shr    eax,0x10
c00075bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c0:	c3                   	ret    
c00075c1:	90                   	nop
c00075c2:	66 90                	xchg   ax,ax

c00075c4 <IDT::IDT()>:
c00075c4:	90                   	nop
c00075c5:	c3                   	ret    

c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ca:	83 c0 30             	add    eax,0x30
c00075cd:	c3                   	ret    

c00075ce <IDT::addEntry(IDTEntry, int)>:
c00075ce:	53                   	push   ebx
c00075cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075e6:	5b                   	pop    ebx
c00075e7:	c3                   	ret    

c00075e8 <IDT::addEntry(int, void (*)(), bool)>:
c00075e8:	53                   	push   ebx
c00075e9:	83 ec 10             	sub    esp,0x10
c00075ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f1:	50                   	push   eax
c00075f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f6:	53                   	push   ebx
c00075f7:	e8 38 ff ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c00075fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007600:	53                   	push   ebx
c0007601:	e8 a8 ff ff ff       	call   c00075ae <IDTEntry::setOffset(unsigned int)>
c0007606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000760e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007612:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007616:	e8 b3 ff ff ff       	call   c00075ce <IDT::addEntry(IDTEntry, int)>
c000761b:	83 c4 30             	add    esp,0x30
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::flush()>:
c0007620:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007632:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007639:	c3                   	ret    

c000763a <IDT::setup()>:
c000763a:	57                   	push   edi
c000763b:	56                   	push   esi
c000763c:	53                   	push   ebx
c000763d:	83 ec 10             	sub    esp,0x10
c0007640:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007644:	6a 00                	push   0x0
c0007646:	68 f0 e2 01 c0       	push   0xc001e2f0
c000764b:	6a 00                	push   0x0
c000764d:	53                   	push   ebx
c000764e:	e8 95 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 00 e3 01 c0       	push   0xc001e300
c000765a:	6a 01                	push   0x1
c000765c:	53                   	push   ebx
c000765d:	e8 86 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 0a e3 01 c0       	push   0xc001e30a
c000766c:	6a 02                	push   0x2
c000766e:	53                   	push   ebx
c000766f:	e8 74 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 14 e3 01 c0       	push   0xc001e314
c000767b:	6a 03                	push   0x3
c000767d:	53                   	push   ebx
c000767e:	e8 65 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 1e e3 01 c0       	push   0xc001e31e
c000768d:	6a 04                	push   0x4
c000768f:	53                   	push   ebx
c0007690:	e8 53 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 28 e3 01 c0       	push   0xc001e328
c000769c:	6a 05                	push   0x5
c000769e:	53                   	push   ebx
c000769f:	e8 44 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 32 e3 01 c0       	push   0xc001e332
c00076ae:	6a 06                	push   0x6
c00076b0:	53                   	push   ebx
c00076b1:	e8 32 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 3c e3 01 c0       	push   0xc001e33c
c00076bd:	6a 07                	push   0x7
c00076bf:	53                   	push   ebx
c00076c0:	e8 23 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 46 e3 01 c0       	push   0xc001e346
c00076cf:	6a 08                	push   0x8
c00076d1:	53                   	push   ebx
c00076d2:	e8 11 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 4e e3 01 c0       	push   0xc001e34e
c00076de:	6a 09                	push   0x9
c00076e0:	53                   	push   ebx
c00076e1:	e8 02 ff ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 58 e3 01 c0       	push   0xc001e358
c00076f0:	6a 0a                	push   0xa
c00076f2:	53                   	push   ebx
c00076f3:	e8 f0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 00                	push   0x0
c00076fa:	68 60 e3 01 c0       	push   0xc001e360
c00076ff:	6a 0b                	push   0xb
c0007701:	53                   	push   ebx
c0007702:	e8 e1 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 68 e3 01 c0       	push   0xc001e368
c0007711:	6a 0c                	push   0xc
c0007713:	53                   	push   ebx
c0007714:	e8 cf fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 70 e3 01 c0       	push   0xc001e370
c0007720:	6a 0d                	push   0xd
c0007722:	53                   	push   ebx
c0007723:	e8 c0 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 8a e3 01 c0       	push   0xc001e38a
c0007732:	6a 0e                	push   0xe
c0007734:	53                   	push   ebx
c0007735:	e8 ae fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 92 e3 01 c0       	push   0xc001e392
c0007741:	6a 0f                	push   0xf
c0007743:	53                   	push   ebx
c0007744:	e8 9f fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 9c e3 01 c0       	push   0xc001e39c
c0007753:	6a 10                	push   0x10
c0007755:	53                   	push   ebx
c0007756:	e8 8d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 a6 e3 01 c0       	push   0xc001e3a6
c0007762:	6a 11                	push   0x11
c0007764:	53                   	push   ebx
c0007765:	e8 7e fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 b0 e3 01 c0       	push   0xc001e3b0
c0007774:	6a 12                	push   0x12
c0007776:	53                   	push   ebx
c0007777:	e8 6c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 01                	push   0x1
c000777e:	68 4a e4 01 c0       	push   0xc001e44a
c0007783:	6a 60                	push   0x60
c0007785:	53                   	push   ebx
c0007786:	e8 5d fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 51 e4 01 c0       	push   0xc001e451
c0007795:	6a 20                	push   0x20
c0007797:	53                   	push   ebx
c0007798:	e8 4b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 3c e4 01 c0       	push   0xc001e43c
c00077a4:	6a 21                	push   0x21
c00077a6:	53                   	push   ebx
c00077a7:	e8 3c fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 43 e4 01 c0       	push   0xc001e443
c00077b6:	6a 22                	push   0x22
c00077b8:	53                   	push   ebx
c00077b9:	e8 2a fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 ba e3 01 c0       	push   0xc001e3ba
c00077c5:	6a 23                	push   0x23
c00077c7:	53                   	push   ebx
c00077c8:	e8 1b fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 c4 e3 01 c0       	push   0xc001e3c4
c00077d7:	6a 24                	push   0x24
c00077d9:	53                   	push   ebx
c00077da:	e8 09 fe ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 ce e3 01 c0       	push   0xc001e3ce
c00077e6:	6a 25                	push   0x25
c00077e8:	53                   	push   ebx
c00077e9:	e8 fa fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 d8 e3 01 c0       	push   0xc001e3d8
c00077f8:	6a 26                	push   0x26
c00077fa:	53                   	push   ebx
c00077fb:	e8 e8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 e2 e3 01 c0       	push   0xc001e3e2
c0007807:	6a 27                	push   0x27
c0007809:	53                   	push   ebx
c000780a:	e8 d9 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 ec e3 01 c0       	push   0xc001e3ec
c0007819:	6a 28                	push   0x28
c000781b:	53                   	push   ebx
c000781c:	e8 c7 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 f6 e3 01 c0       	push   0xc001e3f6
c0007828:	6a 29                	push   0x29
c000782a:	53                   	push   ebx
c000782b:	e8 b8 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 00 e4 01 c0       	push   0xc001e400
c000783a:	6a 2a                	push   0x2a
c000783c:	53                   	push   ebx
c000783d:	e8 a6 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 0a e4 01 c0       	push   0xc001e40a
c0007849:	6a 2b                	push   0x2b
c000784b:	53                   	push   ebx
c000784c:	e8 97 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 14 e4 01 c0       	push   0xc001e414
c000785b:	6a 2c                	push   0x2c
c000785d:	53                   	push   ebx
c000785e:	e8 85 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 1e e4 01 c0       	push   0xc001e41e
c000786a:	6a 2d                	push   0x2d
c000786c:	53                   	push   ebx
c000786d:	e8 76 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 28 e4 01 c0       	push   0xc001e428
c000787c:	6a 2e                	push   0x2e
c000787e:	53                   	push   ebx
c000787f:	e8 64 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 32 e4 01 c0       	push   0xc001e432
c000788b:	6a 2f                	push   0x2f
c000788d:	53                   	push   ebx
c000788e:	e8 55 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 20             	add    esp,0x20
c0007896:	6a 00                	push   0x0
c0007898:	68 8c e5 01 c0       	push   0xc001e58c
c000789d:	6a 30                	push   0x30
c000789f:	53                   	push   ebx
c00078a0:	e8 43 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	6a 00                	push   0x0
c00078a7:	68 96 e5 01 c0       	push   0xc001e596
c00078ac:	6a 31                	push   0x31
c00078ae:	53                   	push   ebx
c00078af:	e8 34 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078b4:	83 c4 20             	add    esp,0x20
c00078b7:	6a 00                	push   0x0
c00078b9:	68 a0 e5 01 c0       	push   0xc001e5a0
c00078be:	6a 32                	push   0x32
c00078c0:	53                   	push   ebx
c00078c1:	e8 22 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	6a 00                	push   0x0
c00078c8:	68 aa e5 01 c0       	push   0xc001e5aa
c00078cd:	6a 33                	push   0x33
c00078cf:	53                   	push   ebx
c00078d0:	e8 13 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078d5:	83 c4 20             	add    esp,0x20
c00078d8:	6a 00                	push   0x0
c00078da:	68 b4 e5 01 c0       	push   0xc001e5b4
c00078df:	6a 34                	push   0x34
c00078e1:	53                   	push   ebx
c00078e2:	e8 01 fd ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	6a 00                	push   0x0
c00078e9:	68 be e5 01 c0       	push   0xc001e5be
c00078ee:	6a 35                	push   0x35
c00078f0:	53                   	push   ebx
c00078f1:	e8 f2 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c00078f6:	83 c4 20             	add    esp,0x20
c00078f9:	6a 00                	push   0x0
c00078fb:	68 c8 e5 01 c0       	push   0xc001e5c8
c0007900:	6a 36                	push   0x36
c0007902:	53                   	push   ebx
c0007903:	e8 e0 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007908:	6a 00                	push   0x0
c000790a:	68 d2 e5 01 c0       	push   0xc001e5d2
c000790f:	6a 37                	push   0x37
c0007911:	53                   	push   ebx
c0007912:	e8 d1 fc ff ff       	call   c00075e8 <IDT::addEntry(int, void (*)(), bool)>
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	6a 03                	push   0x3
c000791c:	6a 02                	push   0x2
c000791e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007924:	e8 d1 24 00 00       	call   c0009dfa <VAS::allocatePages(int, int)>
c0007929:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007930:	89 c6                	mov    esi,eax
c0007932:	e8 94 01 00 00       	call   c0007acb <malloc>
c0007937:	81 c6 00 20 00 00    	add    esi,0x2000
c000793d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007940:	89 c7                	mov    edi,eax
c0007942:	e8 d9 15 00 00       	call   c0008f20 <TSS::TSS()>
c0007947:	83 c4 0c             	add    esp,0xc
c000794a:	68 46 e3 01 c0       	push   0xc001e346
c000794f:	56                   	push   esi
c0007950:	57                   	push   edi
c0007951:	e8 0e 16 00 00       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c0007956:	89 c6                	mov    esi,eax
c0007958:	58                   	pop    eax
c0007959:	5a                   	pop    edx
c000795a:	6a 00                	push   0x0
c000795c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007960:	50                   	push   eax
c0007961:	e8 ce fb ff ff       	call   c0007534 <IDTEntry::IDTEntry(bool)>
c0007966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000796f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007980:	80 ce 05             	or     dh,0x5
c0007983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007987:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000798e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007994:	e8 87 fc ff ff       	call   c0007620 <IDT::flush()>
c0007999:	83 c4 20             	add    esp,0x20
c000799c:	5b                   	pop    ebx
c000799d:	5e                   	pop    esi
c000799e:	5f                   	pop    edi
c000799f:	c3                   	ret    

c00079a0 <sbrk>:
c00079a0:	55                   	push   ebp
c00079a1:	57                   	push   edi
c00079a2:	56                   	push   esi
c00079a3:	53                   	push   ebx
c00079a4:	83 ec 1c             	sub    esp,0x1c
c00079a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079ab:	85 c0                	test   eax,eax
c00079ad:	74 66                	je     c0007a15 <sbrk+0x75>
c00079af:	78 6b                	js     c0007a1c <sbrk+0x7c>
c00079b1:	8b 15 28 26 02 c0    	mov    edx,DWORD PTR ds:0xc0022628
c00079b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079bb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c1:	05 ff 0f 00 00       	add    eax,0xfff
c00079c6:	0f 49 e8             	cmovns ebp,eax
c00079c9:	c1 fd 0c             	sar    ebp,0xc
c00079cc:	bb 00 00 00 00       	mov    ebx,0x0
c00079d1:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d7:	8b 3d 28 26 02 c0    	mov    edi,DWORD PTR ds:0xc0022628
c00079dd:	e8 f3 03 00 00       	call   c0007dd5 <Phys::allocatePage()>
c00079e2:	68 01 04 00 00       	push   0x401
c00079e7:	57                   	push   edi
c00079e8:	50                   	push   eax
c00079e9:	56                   	push   esi
c00079ea:	e8 03 23 00 00       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ef:	81 05 28 26 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022628,0x1000
c00079f9:	83 c3 01             	add    ebx,0x1
c00079fc:	83 c4 10             	add    esp,0x10
c00079ff:	39 dd                	cmp    ebp,ebx
c0007a01:	75 ce                	jne    c00079d1 <sbrk+0x31>
c0007a03:	0f 20 d8             	mov    eax,cr3
c0007a06:	0f 22 d8             	mov    cr3,eax
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	83 c4 1c             	add    esp,0x1c
c0007a10:	5b                   	pop    ebx
c0007a11:	5e                   	pop    esi
c0007a12:	5f                   	pop    edi
c0007a13:	5d                   	pop    ebp
c0007a14:	c3                   	ret    
c0007a15:	a1 28 26 02 c0       	mov    eax,ds:0xc0022628
c0007a1a:	eb f1                	jmp    c0007a0d <sbrk+0x6d>
c0007a1c:	83 ec 08             	sub    esp,0x8
c0007a1f:	50                   	push   eax
c0007a20:	68 d8 fe 01 c0       	push   0xc001fed8
c0007a25:	e8 d4 2e 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0007a2a:	83 c4 10             	add    esp,0x10
c0007a2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a32:	eb d9                	jmp    c0007a0d <sbrk+0x6d>

c0007a34 <mmap>:
c0007a34:	83 ec 18             	sub    esp,0x18
c0007a37:	68 08 ff 01 c0       	push   0xc001ff08
c0007a3c:	e8 dc 90 00 00       	call   c0010b1d <KePanic(char const*)>
c0007a41:	b8 00 00 00 00       	mov    eax,0x0
c0007a46:	83 c4 1c             	add    esp,0x1c
c0007a49:	c3                   	ret    

c0007a4a <munmap>:
c0007a4a:	83 ec 18             	sub    esp,0x18
c0007a4d:	68 0d ff 01 c0       	push   0xc001ff0d
c0007a52:	e8 c6 90 00 00       	call   c0010b1d <KePanic(char const*)>
c0007a57:	b8 00 00 00 00       	mov    eax,0x0
c0007a5c:	83 c4 1c             	add    esp,0x1c
c0007a5f:	c3                   	ret    

c0007a60 <liballoc_lock()>:
c0007a60:	fa                   	cli    
c0007a61:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a68:	b8 00 00 00 00       	mov    eax,0x0
c0007a6d:	c3                   	ret    

c0007a6e <liballoc_unlock()>:
c0007a6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a73:	83 e8 01             	sub    eax,0x1
c0007a76:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a7b:	75 01                	jne    c0007a7e <liballoc_unlock()+0x10>
c0007a7d:	fb                   	sti    
c0007a7e:	b8 00 00 00 00       	mov    eax,0x0
c0007a83:	c3                   	ret    

c0007a84 <liballoc_alloc(int)>:
c0007a84:	83 ec 10             	sub    esp,0x10
c0007a87:	6a 01                	push   0x1
c0007a89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a93:	e8 62 23 00 00       	call   c0009dfa <VAS::allocatePages(int, int)>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_free(void*, int)>:
c0007a9c:	83 ec 14             	sub    esp,0x14
c0007a9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007aa9:	e8 8c 1f 00 00       	call   c0009a3a <VAS::freeAllocatedPages(unsigned long)>
c0007aae:	b8 00 00 00 00       	mov    eax,0x0
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <realloc>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac2:	e8 5a 9b ff ff       	call   c0001621 <dlrealloc>
c0007ac7:	83 c4 1c             	add    esp,0x1c
c0007aca:	c3                   	ret    

c0007acb <malloc>:
c0007acb:	83 ec 18             	sub    esp,0x18
c0007ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad2:	e8 0d 96 ff ff       	call   c00010e4 <dlmalloc>
c0007ad7:	83 c4 1c             	add    esp,0x1c
c0007ada:	c3                   	ret    

c0007adb <free>:
c0007adb:	83 ec 18             	sub    esp,0x18
c0007ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ae2:	e8 9f 92 ff ff       	call   c0000d86 <dlfree>
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <rfree>:
c0007aeb:	83 ec 18             	sub    esp,0x18
c0007aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af2:	e8 8f 92 ff ff       	call   c0000d86 <dlfree>
c0007af7:	83 c4 1c             	add    esp,0x1c
c0007afa:	c3                   	ret    

c0007afb <calloc>:
c0007afb:	56                   	push   esi
c0007afc:	53                   	push   ebx
c0007afd:	83 ec 10             	sub    esp,0x10
c0007b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b09:	53                   	push   ebx
c0007b0a:	e8 bc ff ff ff       	call   c0007acb <malloc>
c0007b0f:	89 c6                	mov    esi,eax
c0007b11:	83 c4 0c             	add    esp,0xc
c0007b14:	53                   	push   ebx
c0007b15:	6a 00                	push   0x0
c0007b17:	50                   	push   eax
c0007b18:	e8 d3 89 ff ff       	call   c00004f0 <memset>
c0007b1d:	89 f0                	mov    eax,esi
c0007b1f:	83 c4 14             	add    esp,0x14
c0007b22:	5b                   	pop    ebx
c0007b23:	5e                   	pop    esi
c0007b24:	c3                   	ret    

c0007b25 <KeEntryPoint>:
c0007b25:	57                   	push   edi
c0007b26:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b2b:	56                   	push   esi
c0007b2c:	31 f6                	xor    esi,esi
c0007b2e:	53                   	push   ebx
c0007b2f:	89 fa                	mov    edx,edi
c0007b31:	83 ec 2c             	sub    esp,0x2c
c0007b34:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b39:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b3e:	89 f0                	mov    eax,esi
c0007b40:	ee                   	out    dx,al
c0007b41:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b46:	b0 80                	mov    al,0x80
c0007b48:	89 da                	mov    edx,ebx
c0007b4a:	ee                   	out    dx,al
c0007b4b:	b1 03                	mov    cl,0x3
c0007b4d:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b52:	88 c8                	mov    al,cl
c0007b54:	ee                   	out    dx,al
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	89 fa                	mov    edx,edi
c0007b59:	ee                   	out    dx,al
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	ee                   	out    dx,al
c0007b5f:	b0 c7                	mov    al,0xc7
c0007b61:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 0b                	mov    al,0xb
c0007b69:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b6e:	ee                   	out    dx,al
c0007b6f:	68 14 ff 01 c0       	push   0xc001ff14
c0007b74:	e8 85 2d 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0007b79:	e8 4d 88 00 00       	call   c00103cb <KeDisplaySplashScreen()>
c0007b7e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	e8 ae 03 00 00       	call   c0007f43 <Phys::physicalMemorySetup(unsigned int)>
c0007b95:	e8 23 1c 00 00       	call   c00097bd <Virt::virtualMemorySetup()>
c0007b9a:	58                   	pop    eax
c0007b9b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b9f:	53                   	push   ebx
c0007ba0:	e8 15 1f 00 00       	call   c0009aba <VAS::VAS()>
c0007ba5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bab:	e8 da 6f 01 00       	call   c001eb8a <_init>
c0007bb0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bb7:	e8 0f ff ff ff       	call   c0007acb <malloc>
c0007bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bbf:	89 c6                	mov    esi,eax
c0007bc1:	e8 3a f2 ff ff       	call   c0006e00 <Computer::Computer()>
c0007bc6:	53                   	push   ebx
c0007bc7:	6a 00                	push   0x0
c0007bc9:	6a 00                	push   0x0
c0007bcb:	56                   	push   esi
c0007bcc:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bd2:	e8 ef f5 ff ff       	call   c00071c6 <Computer::open(int, int, void*)>
c0007bd7:	83 c4 14             	add    esp,0x14
c0007bda:	53                   	push   ebx
c0007bdb:	e8 a4 1f 00 00       	call   c0009b84 <VAS::~VAS()>
c0007be0:	83 c4 30             	add    esp,0x30
c0007be3:	5b                   	pop    ebx
c0007be4:	5e                   	pop    esi
c0007be5:	5f                   	pop    edi
c0007be6:	c3                   	ret    

c0007be7 <Phys::allocateDMA(unsigned long)>:
c0007be7:	55                   	push   ebp
c0007be8:	31 ed                	xor    ebp,ebp
c0007bea:	57                   	push   edi
c0007beb:	56                   	push   esi
c0007bec:	31 f6                	xor    esi,esi
c0007bee:	53                   	push   ebx
c0007bef:	31 db                	xor    ebx,ebx
c0007bf1:	83 ec 1c             	sub    esp,0x1c
c0007bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bf8:	05 ff 0f 00 00       	add    eax,0xfff
c0007bfd:	c1 e8 0c             	shr    eax,0xc
c0007c00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c04:	31 c0                	xor    eax,eax
c0007c06:	eb 1b                	jmp    c0007c23 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c08:	8d 78 01             	lea    edi,[eax+0x1]
c0007c0b:	85 c0                	test   eax,eax
c0007c0d:	0f 44 eb             	cmove  ebp,ebx
c0007c10:	0f 44 f3             	cmove  esi,ebx
c0007c13:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c17:	74 37                	je     c0007c50 <Phys::allocateDMA(unsigned long)+0x69>
c0007c19:	89 f8                	mov    eax,edi
c0007c1b:	83 c3 01             	add    ebx,0x1
c0007c1e:	83 fb 0f             	cmp    ebx,0xf
c0007c21:	7f 13                	jg     c0007c36 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c23:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c2a:	74 dc                	je     c0007c08 <Phys::allocateDMA(unsigned long)+0x21>
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c3 01             	add    ebx,0x1
c0007c31:	83 fb 0f             	cmp    ebx,0xf
c0007c34:	7e ed                	jle    c0007c23 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c36:	83 ec 0c             	sub    esp,0xc
c0007c39:	68 2c ff 01 c0       	push   0xc001ff2c
c0007c3e:	e8 da 8e 00 00       	call   c0010b1d <KePanic(char const*)>
c0007c43:	83 c4 10             	add    esp,0x10
c0007c46:	31 c0                	xor    eax,eax
c0007c48:	83 c4 1c             	add    esp,0x1c
c0007c4b:	5b                   	pop    ebx
c0007c4c:	5e                   	pop    esi
c0007c4d:	5f                   	pop    edi
c0007c4e:	5d                   	pop    ebp
c0007c4f:	c3                   	ret    
c0007c50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c54:	89 f2                	mov    edx,esi
c0007c56:	c1 fa 04             	sar    edx,0x4
c0007c59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5d:	01 f1                	add    ecx,esi
c0007c5f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c62:	83 e9 01             	sub    ecx,0x1
c0007c65:	0f 48 ca             	cmovs  ecx,edx
c0007c68:	c1 f9 04             	sar    ecx,0x4
c0007c6b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c6f:	74 06                	je     c0007c77 <Phys::allocateDMA(unsigned long)+0x90>
c0007c71:	89 eb                	mov    ebx,ebp
c0007c73:	31 c0                	xor    eax,eax
c0007c75:	eb b7                	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x47>
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	85 d2                	test   edx,edx
c0007c7d:	74 17                	je     c0007c96 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c7f:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c85:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c8c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c8f:	83 c2 01             	add    edx,0x1
c0007c92:	39 d0                	cmp    eax,edx
c0007c94:	75 f6                	jne    c0007c8c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c96:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ca4:	01 c2                	add    edx,eax
c0007ca6:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007cac:	85 c9                	test   ecx,ecx
c0007cae:	74 17                	je     c0007cc7 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cb0:	83 ec 0c             	sub    esp,0xc
c0007cb3:	68 2c ff 01 c0       	push   0xc001ff2c
c0007cb8:	e8 60 8e 00 00       	call   c0010b1d <KePanic(char const*)>
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	89 f8                	mov    eax,edi
c0007cc2:	e9 54 ff ff ff       	jmp    c0007c1b <Phys::allocateDMA(unsigned long)+0x34>
c0007cc7:	c1 e6 0c             	shl    esi,0xc
c0007cca:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cd0:	e9 73 ff ff ff       	jmp    c0007c48 <Phys::allocateDMA(unsigned long)+0x61>

c0007cd5 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cd9:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cdf:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ce4:	c1 ea 0c             	shr    edx,0xc
c0007ce7:	29 d0                	sub    eax,edx
c0007ce9:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf2:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cf7:	c1 e8 0c             	shr    eax,0xc
c0007cfa:	85 d2                	test   edx,edx
c0007cfc:	74 11                	je     c0007d0f <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cfe:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d03:	01 c2                	add    edx,eax
c0007d05:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d08:	83 c0 01             	add    eax,0x1
c0007d0b:	39 d0                	cmp    eax,edx
c0007d0d:	75 f6                	jne    c0007d05 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d0f:	c3                   	ret    

c0007d10 <Phys::setPageState(unsigned long, bool)>:
c0007d10:	57                   	push   edi
c0007d11:	56                   	push   esi
c0007d12:	8b 35 2c 26 02 c0    	mov    esi,DWORD PTR ds:0xc002262c
c0007d18:	53                   	push   ebx
c0007d19:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d26:	89 ca                	mov    edx,ecx
c0007d28:	83 e1 07             	and    ecx,0x7
c0007d2b:	c1 ea 03             	shr    edx,0x3
c0007d2e:	0f b6 c0             	movzx  eax,al
c0007d31:	d3 c3                	rol    ebx,cl
c0007d33:	01 d6                	add    esi,edx
c0007d35:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d38:	d3 e0                	shl    eax,cl
c0007d3a:	21 fb                	and    ebx,edi
c0007d3c:	88 1e                	mov    BYTE PTR [esi],bl
c0007d3e:	8b 1d 2c 26 02 c0    	mov    ebx,DWORD PTR ds:0xc002262c
c0007d44:	01 da                	add    edx,ebx
c0007d46:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d48:	09 c8                	or     eax,ecx
c0007d4a:	88 02                	mov    BYTE PTR [edx],al
c0007d4c:	5b                   	pop    ebx
c0007d4d:	5e                   	pop    esi
c0007d4e:	5f                   	pop    edi
c0007d4f:	c3                   	ret    

c0007d50 <Phys::getPageState(unsigned long)>:
c0007d50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d54:	8b 15 2c 26 02 c0    	mov    edx,DWORD PTR ds:0xc002262c
c0007d5a:	89 c8                	mov    eax,ecx
c0007d5c:	83 e1 07             	and    ecx,0x7
c0007d5f:	c1 e8 03             	shr    eax,0x3
c0007d62:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d66:	d3 f8                	sar    eax,cl
c0007d68:	83 e0 01             	and    eax,0x1
c0007d6b:	c3                   	ret    

c0007d6c <Phys::freePage(unsigned long)>:
c0007d6c:	53                   	push   ebx
c0007d6d:	83 ec 08             	sub    esp,0x8
c0007d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d74:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d7a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d80:	76 41                	jbe    c0007dc3 <Phys::freePage(unsigned long)+0x57>
c0007d82:	c1 e8 0c             	shr    eax,0xc
c0007d85:	50                   	push   eax
c0007d86:	89 c3                	mov    ebx,eax
c0007d88:	e8 c3 ff ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007d8d:	5a                   	pop    edx
c0007d8e:	84 c0                	test   al,al
c0007d90:	74 20                	je     c0007db2 <Phys::freePage(unsigned long)+0x46>
c0007d92:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 00                	push   0x0
c0007d9c:	53                   	push   ebx
c0007d9d:	83 e8 01             	sub    eax,0x1
c0007da0:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007da5:	e8 66 ff ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007daa:	83 c4 10             	add    esp,0x10
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    
c0007db2:	c7 44 24 10 d1 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ffd1
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	e9 5a 8d 00 00       	jmp    c0010b1d <KePanic(char const*)>
c0007dc3:	68 00 10 00 00       	push   0x1000
c0007dc8:	50                   	push   eax
c0007dc9:	e8 07 ff ff ff       	call   c0007cd5 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dce:	59                   	pop    ecx
c0007dcf:	5b                   	pop    ebx
c0007dd0:	83 c4 08             	add    esp,0x8
c0007dd3:	5b                   	pop    ebx
c0007dd4:	c3                   	ret    

c0007dd5 <Phys::allocatePage()>:
c0007dd5:	56                   	push   esi
c0007dd6:	53                   	push   ebx
c0007dd7:	83 ec 14             	sub    esp,0x14
c0007dda:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007de0:	89 f3                	mov    ebx,esi
c0007de2:	eb 0a                	jmp    c0007dee <Phys::allocatePage()+0x19>
c0007de4:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dea:	39 de                	cmp    esi,ebx
c0007dec:	74 26                	je     c0007e14 <Phys::allocatePage()+0x3f>
c0007dee:	53                   	push   ebx
c0007def:	e8 5c ff ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007df4:	5a                   	pop    edx
c0007df5:	84 c0                	test   al,al
c0007df7:	74 67                	je     c0007e60 <Phys::allocatePage()+0x8b>
c0007df9:	83 c3 01             	add    ebx,0x1
c0007dfc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e02:	75 e0                	jne    c0007de4 <Phys::allocatePage()+0xf>
c0007e04:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007e0e:	31 db                	xor    ebx,ebx
c0007e10:	39 de                	cmp    esi,ebx
c0007e12:	75 da                	jne    c0007dee <Phys::allocatePage()+0x19>
c0007e14:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007e19:	83 ec 0c             	sub    esp,0xc
c0007e1c:	83 f0 01             	xor    eax,0x1
c0007e1f:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e2c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e32:	50                   	push   eax
c0007e33:	e8 7a 27 00 00       	call   c000a5b2 <VAS::scanForEviction()>
c0007e38:	83 c4 10             	add    esp,0x10
c0007e3b:	85 c0                	test   eax,eax
c0007e3d:	75 48                	jne    c0007e87 <Phys::allocatePage()+0xb2>
c0007e3f:	83 ec 0c             	sub    esp,0xc
c0007e42:	68 54 ff 01 c0       	push   0xc001ff54
c0007e47:	e8 d1 8c 00 00       	call   c0010b1d <KePanic(char const*)>
c0007e4c:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e52:	83 c4 10             	add    esp,0x10
c0007e55:	53                   	push   ebx
c0007e56:	e8 f5 fe ff ff       	call   c0007d50 <Phys::getPageState(unsigned long)>
c0007e5b:	5a                   	pop    edx
c0007e5c:	84 c0                	test   al,al
c0007e5e:	75 99                	jne    c0007df9 <Phys::allocatePage()+0x24>
c0007e60:	6a 01                	push   0x1
c0007e62:	53                   	push   ebx
c0007e63:	e8 a8 fe ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007e68:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e6e:	59                   	pop    ecx
c0007e6f:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e74:	5b                   	pop    ebx
c0007e75:	83 c2 01             	add    edx,0x1
c0007e78:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e7e:	c1 e0 0c             	shl    eax,0xc
c0007e81:	83 c4 14             	add    esp,0x14
c0007e84:	5b                   	pop    ebx
c0007e85:	5e                   	pop    esi
c0007e86:	c3                   	ret    
c0007e87:	83 ec 08             	sub    esp,0x8
c0007e8a:	89 c2                	mov    edx,eax
c0007e8c:	6a 01                	push   0x1
c0007e8e:	c1 ea 0c             	shr    edx,0xc
c0007e91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e95:	52                   	push   edx
c0007e96:	e8 75 fe ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007e9b:	83 c4 10             	add    esp,0x10
c0007e9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ea2:	eb dd                	jmp    c0007e81 <Phys::allocatePage()+0xac>

c0007ea4 <Phys::allocateContiguousPages(int)>:
c0007ea4:	57                   	push   edi
c0007ea5:	56                   	push   esi
c0007ea6:	53                   	push   ebx
c0007ea7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eab:	fa                   	cli    
c0007eac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007eb1:	31 db                	xor    ebx,ebx
c0007eb3:	83 c0 01             	add    eax,0x1
c0007eb6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ebb:	85 db                	test   ebx,ebx
c0007ebd:	75 11                	jne    c0007ed0 <Phys::allocateContiguousPages(int)+0x2c>
c0007ebf:	e8 11 ff ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	89 c7                	mov    edi,eax
c0007ec9:	74 21                	je     c0007eec <Phys::allocateContiguousPages(int)+0x48>
c0007ecb:	bb 01 00 00 00       	mov    ebx,0x1
c0007ed0:	e8 00 ff ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0007ed5:	89 da                	mov    edx,ebx
c0007ed7:	c1 e2 0c             	shl    edx,0xc
c0007eda:	01 fa                	add    edx,edi
c0007edc:	39 c2                	cmp    edx,eax
c0007ede:	74 22                	je     c0007f02 <Phys::allocateContiguousPages(int)+0x5e>
c0007ee0:	83 fe 01             	cmp    esi,0x1
c0007ee3:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee8:	89 c7                	mov    edi,eax
c0007eea:	75 e4                	jne    c0007ed0 <Phys::allocateContiguousPages(int)+0x2c>
c0007eec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ef1:	83 e8 01             	sub    eax,0x1
c0007ef4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ef9:	75 01                	jne    c0007efc <Phys::allocateContiguousPages(int)+0x58>
c0007efb:	fb                   	sti    
c0007efc:	5b                   	pop    ebx
c0007efd:	89 f8                	mov    eax,edi
c0007eff:	5e                   	pop    esi
c0007f00:	5f                   	pop    edi
c0007f01:	c3                   	ret    
c0007f02:	83 c3 01             	add    ebx,0x1
c0007f05:	39 f3                	cmp    ebx,esi
c0007f07:	75 b2                	jne    c0007ebb <Phys::allocateContiguousPages(int)+0x17>
c0007f09:	eb e1                	jmp    c0007eec <Phys::allocateContiguousPages(int)+0x48>

c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f0b:	56                   	push   esi
c0007f0c:	53                   	push   ebx
c0007f0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f11:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f17:	73 06                	jae    c0007f1f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f19:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f23:	c1 eb 0c             	shr    ebx,0xc
c0007f26:	c1 e8 0c             	shr    eax,0xc
c0007f29:	39 d8                	cmp    eax,ebx
c0007f2b:	73 13                	jae    c0007f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f2d:	6a 00                	push   0x0
c0007f2f:	50                   	push   eax
c0007f30:	8d 70 01             	lea    esi,[eax+0x1]
c0007f33:	e8 d8 fd ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007f38:	39 f3                	cmp    ebx,esi
c0007f3a:	89 f0                	mov    eax,esi
c0007f3c:	5a                   	pop    edx
c0007f3d:	59                   	pop    ecx
c0007f3e:	75 ed                	jne    c0007f2d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f40:	5b                   	pop    ebx
c0007f41:	5e                   	pop    esi
c0007f42:	c3                   	ret    

c0007f43 <Phys::physicalMemorySetup(unsigned int)>:
c0007f43:	55                   	push   ebp
c0007f44:	57                   	push   edi
c0007f45:	56                   	push   esi
c0007f46:	53                   	push   ebx
c0007f47:	31 db                	xor    ebx,ebx
c0007f49:	83 ec 40             	sub    esp,0x40
c0007f4c:	6a 10                	push   0x10
c0007f4e:	6a 00                	push   0x0
c0007f50:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f55:	e8 96 85 ff ff       	call   c00004f0 <memset>
c0007f5a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f63:	05 00 10 00 00       	add    eax,0x1000
c0007f68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f6c:	5a                   	pop    edx
c0007f6d:	59                   	pop    ecx
c0007f6e:	50                   	push   eax
c0007f6f:	68 e7 ff 01 c0       	push   0xc001ffe7
c0007f74:	e8 85 29 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0007f79:	83 c4 10             	add    esp,0x10
c0007f7c:	83 ec 08             	sub    esp,0x8
c0007f7f:	6a 01                	push   0x1
c0007f81:	53                   	push   ebx
c0007f82:	83 c3 01             	add    ebx,0x1
c0007f85:	e8 86 fd ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0007f8a:	83 c4 10             	add    esp,0x10
c0007f8d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f93:	75 e7                	jne    c0007f7c <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f95:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f9c:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fa3:	c1 e0 08             	shl    eax,0x8
c0007fa6:	09 c2                	or     edx,eax
c0007fa8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fac:	0f 84 43 01 00 00    	je     c00080f5 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fb2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fba:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fbf:	e9 82 00 00 00       	jmp    c0008046 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fc4:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc9:	89 c1                	mov    ecx,eax
c0007fcb:	39 f2                	cmp    edx,esi
c0007fcd:	19 f9                	sbb    ecx,edi
c0007fcf:	0f 82 c0 00 00 00    	jb     c0008095 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd9:	89 c5                	mov    ebp,eax
c0007fdb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007fe3:	19 cd                	sbb    ebp,ecx
c0007fe5:	0f 83 af 00 00 00    	jae    c000809a <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007feb:	89 d6                	mov    esi,edx
c0007fed:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007ff2:	39 f2                	cmp    edx,esi
c0007ff4:	89 cf                	mov    edi,ecx
c0007ff6:	19 c8                	sbb    eax,ecx
c0007ff8:	73 07                	jae    c0008001 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0007ffa:	be 00 00 0a 00       	mov    esi,0xa0000
c0007fff:	31 ff                	xor    edi,edi
c0008001:	89 f2                	mov    edx,esi
c0008003:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008008:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000800e:	89 f9                	mov    ecx,edi
c0008010:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008014:	83 d1 ff             	adc    ecx,0xffffffff
c0008017:	39 d0                	cmp    eax,edx
c0008019:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000801d:	b8 00 00 00 00       	mov    eax,0x0
c0008022:	19 c8                	sbb    eax,ecx
c0008024:	0f 82 9d 01 00 00    	jb     c00081c7 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000802a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000802e:	83 c3 18             	add    ebx,0x18
c0008031:	83 c6 01             	add    esi,0x1
c0008034:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000803c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0008040:	0f 84 bf 00 00 00    	je     c0008105 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008046:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008048:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000804b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000804e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008051:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008055:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000805c:	01 f0                	add    eax,esi
c000805e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008062:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008066:	55                   	push   ebp
c0008067:	11 fa                	adc    edx,edi
c0008069:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000806d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008075:	50                   	push   eax
c0008076:	56                   	push   esi
c0008077:	68 84 ff 01 c0       	push   0xc001ff84
c000807c:	e8 7d 28 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0008081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008085:	83 c4 10             	add    esp,0x10
c0008088:	09 f8                	or     eax,edi
c000808a:	75 79                	jne    c0008105 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000808c:	83 fd 01             	cmp    ebp,0x1
c000808f:	0f 84 2f ff ff ff    	je     c0007fc4 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0008095:	83 fd 01             	cmp    ebp,0x1
c0008098:	75 90                	jne    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000809a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000809e:	31 d2                	xor    edx,edx
c00080a0:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080aa:	19 d1                	sbb    ecx,edx
c00080ac:	0f 82 78 ff ff ff    	jb     c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080b2:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080b7:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080bb:	b9 00 00 00 00       	mov    ecx,0x0
c00080c0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080c4:	0f 83 60 ff ff ff    	jae    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080ca:	39 c6                	cmp    esi,eax
c00080cc:	19 d7                	sbb    edi,edx
c00080ce:	0f 83 ff 00 00 00    	jae    c00081d3 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080d4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080dc:	29 c7                	sub    edi,eax
c00080de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080e2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080e6:	19 d5                	sbb    ebp,edx
c00080e8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080f0:	e9 de 00 00 00       	jmp    c00081d3 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080f5:	83 ec 0c             	sub    esp,0xc
c00080f8:	68 ff ff 01 c0       	push   0xc001ffff
c00080fd:	e8 1b 8a 00 00       	call   c0010b1d <KePanic(char const*)>
c0008102:	83 c4 10             	add    esp,0x10
c0008105:	83 ec 08             	sub    esp,0x8
c0008108:	bb 60 00 00 00       	mov    ebx,0x60
c000810d:	6a 00                	push   0x0
c000810f:	6a 06                	push   0x6
c0008111:	e8 fa fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008116:	58                   	pop    eax
c0008117:	5a                   	pop    edx
c0008118:	6a 00                	push   0x0
c000811a:	6a 07                	push   0x7
c000811c:	e8 ef fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008121:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008127:	83 c4 10             	add    esp,0x10
c000812a:	83 c1 02             	add    ecx,0x2
c000812d:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008133:	83 ec 08             	sub    esp,0x8
c0008136:	6a 00                	push   0x0
c0008138:	53                   	push   ebx
c0008139:	83 c3 01             	add    ebx,0x1
c000813c:	e8 cf fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000814a:	75 e7                	jne    c0008133 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000814c:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008151:	bb 40 01 00 00       	mov    ebx,0x140
c0008156:	83 c0 20             	add    eax,0x20
c0008159:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000815e:	eb 26                	jmp    c0008186 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	6a 00                	push   0x0
c0008165:	53                   	push   ebx
c0008166:	83 c3 01             	add    ebx,0x1
c0008169:	e8 a2 fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c000816e:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	83 c0 01             	add    eax,0x1
c0008179:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000817f:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008184:	74 07                	je     c000818d <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008186:	3d ff 03 00 00       	cmp    eax,0x3ff
c000818b:	7e d3                	jle    c0008160 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000818d:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008192:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008197:	7f 26                	jg     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0008199:	83 ec 08             	sub    esp,0x8
c000819c:	6a 00                	push   0x0
c000819e:	53                   	push   ebx
c000819f:	83 c3 01             	add    ebx,0x1
c00081a2:	e8 69 fb ff ff       	call   c0007d10 <Phys::setPageState(unsigned long, bool)>
c00081a7:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081ac:	83 c4 10             	add    esp,0x10
c00081af:	83 c0 01             	add    eax,0x1
c00081b2:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081b8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081bd:	75 d3                	jne    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081bf:	83 c4 3c             	add    esp,0x3c
c00081c2:	5b                   	pop    ebx
c00081c3:	5e                   	pop    esi
c00081c4:	5f                   	pop    edi
c00081c5:	5d                   	pop    ebp
c00081c6:	c3                   	ret    
c00081c7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081cb:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081d3:	83 ec 04             	sub    esp,0x4
c00081d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081da:	56                   	push   esi
c00081db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081df:	57                   	push   edi
c00081e0:	68 a8 ff 01 c0       	push   0xc001ffa8
c00081e5:	e8 14 27 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00081ea:	5d                   	pop    ebp
c00081eb:	58                   	pop    eax
c00081ec:	56                   	push   esi
c00081ed:	57                   	push   edi
c00081ee:	e8 18 fd ff ff       	call   c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00081f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00081fb:	83 c4 0c             	add    esp,0xc
c00081fe:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c0008204:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008208:	01 f0                	add    eax,esi
c000820a:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000820f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008216:	52                   	push   edx
c0008217:	50                   	push   eax
c0008218:	68 0d 00 02 c0       	push   0xc002000d
c000821d:	e8 dc 26 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0008222:	83 c4 10             	add    esp,0x10
c0008225:	e9 00 fe ff ff       	jmp    c000802a <Phys::physicalMemorySetup(unsigned int)+0xe7>

c000822a <Pipe::isAtty()>:
c000822a:	31 c0                	xor    eax,eax
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ba 6c 00 02 c0       	mov    edx,0xc002006c
c0008236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000823a:	89 10                	mov    DWORD PTR [eax],edx
c000823c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008240:	83 ec 0c             	sub    esp,0xc
c0008243:	50                   	push   eax
c0008244:	e8 37 11 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c0008249:	83 c4 10             	add    esp,0x10
c000824c:	90                   	nop
c000824d:	83 c4 0c             	add    esp,0xc
c0008250:	c3                   	ret    
c0008251:	90                   	nop

c0008252 <Pipe::~Pipe()>:
c0008252:	83 ec 0c             	sub    esp,0xc
c0008255:	83 ec 0c             	sub    esp,0xc
c0008258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825c:	e8 cd ff ff ff       	call   c000822e <Pipe::~Pipe()>
c0008261:	83 c4 10             	add    esp,0x10
c0008264:	83 ec 08             	sub    esp,0x8
c0008267:	6a 20                	push   0x20
c0008269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826d:	e8 8e 25 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c0008272:	83 c4 10             	add    esp,0x10
c0008275:	83 c4 0c             	add    esp,0xc
c0008278:	c3                   	ret    
c0008279:	90                   	nop

c000827a <Pipe::write(unsigned long long, void*, int*)>:
c000827a:	55                   	push   ebp
c000827b:	57                   	push   edi
c000827c:	56                   	push   esi
c000827d:	53                   	push   ebx
c000827e:	83 ec 1c             	sub    esp,0x1c
c0008281:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008285:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000828d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008290:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008294:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008297:	89 04 24             	mov    DWORD PTR [esp],eax
c000829a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000829e:	89 d8                	mov    eax,ebx
c00082a0:	89 d6                	mov    esi,edx
c00082a2:	89 d7                	mov    edi,edx
c00082a4:	c1 ff 1f             	sar    edi,0x1f
c00082a7:	03 34 24             	add    esi,DWORD PTR [esp]
c00082aa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082ae:	c1 f8 1f             	sar    eax,0x1f
c00082b1:	39 f3                	cmp    ebx,esi
c00082b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082bb:	19 f8                	sbb    eax,edi
c00082bd:	b8 01 00 00 00       	mov    eax,0x1
c00082c2:	72 72                	jb     c0008336 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082c7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082cb:	01 d0                	add    eax,edx
c00082cd:	99                   	cdq    
c00082ce:	f7 fb                	idiv   ebx
c00082d0:	89 d8                	mov    eax,ebx
c00082d2:	29 d0                	sub    eax,edx
c00082d4:	89 d6                	mov    esi,edx
c00082d6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082d9:	89 c3                	mov    ebx,eax
c00082db:	c1 fb 1f             	sar    ebx,0x1f
c00082de:	39 c2                	cmp    edx,eax
c00082e0:	19 df                	sbb    edi,ebx
c00082e2:	bb 00 00 00 00       	mov    ebx,0x0
c00082e7:	72 04                	jb     c00082ed <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082e9:	89 d3                	mov    ebx,edx
c00082eb:	29 c3                	sub    ebx,eax
c00082ed:	89 d0                	mov    eax,edx
c00082ef:	29 d8                	sub    eax,ebx
c00082f1:	74 0d                	je     c0008300 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00082f3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f6:	89 c1                	mov    ecx,eax
c00082f8:	01 f7                	add    edi,esi
c00082fa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008300:	85 db                	test   ebx,ebx
c0008302:	74 0d                	je     c0008311 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008304:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008308:	89 d9                	mov    ecx,ebx
c000830a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000830d:	89 c6                	mov    esi,eax
c000830f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008311:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008314:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008319:	75 10                	jne    c000832b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000831b:	83 ec 0c             	sub    esp,0xc
c000831e:	68 29 00 02 c0       	push   0xc0020029
c0008323:	e8 f5 87 00 00       	call   c0010b1d <KePanic(char const*)>
c0008328:	83 c4 10             	add    esp,0x10
c000832b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000832f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008332:	89 08                	mov    DWORD PTR [eax],ecx
c0008334:	31 c0                	xor    eax,eax
c0008336:	83 c4 1c             	add    esp,0x1c
c0008339:	5b                   	pop    ebx
c000833a:	5e                   	pop    esi
c000833b:	5f                   	pop    edi
c000833c:	5d                   	pop    ebp
c000833d:	c3                   	ret    

c000833e <Pipe::read(unsigned long long, void*, int*)>:
c000833e:	55                   	push   ebp
c000833f:	57                   	push   edi
c0008340:	56                   	push   esi
c0008341:	53                   	push   ebx
c0008342:	83 ec 1c             	sub    esp,0x1c
c0008345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000834d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008351:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008354:	89 c8                	mov    eax,ecx
c0008356:	99                   	cdq    
c0008357:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000835b:	74 24                	je     c0008381 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000835d:	39 f9                	cmp    ecx,edi
c000835f:	89 d1                	mov    ecx,edx
c0008361:	19 f1                	sbb    ecx,esi
c0008363:	73 1c                	jae    c0008381 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008365:	fa                   	cli    
c0008366:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000836c:	e8 b3 cf 00 00       	call   c0015324 <schedule()>
c0008371:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008376:	48                   	dec    eax
c0008377:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000837c:	75 d3                	jne    c0008351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000837e:	fb                   	sti    
c000837f:	eb d0                	jmp    c0008351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008381:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008385:	39 f8                	cmp    eax,edi
c0008387:	89 d1                	mov    ecx,edx
c0008389:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000838d:	19 f1                	sbb    ecx,esi
c000838f:	73 08                	jae    c0008399 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0008391:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008395:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008399:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000839c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000839f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083a3:	29 f7                	sub    edi,esi
c00083a5:	89 f8                	mov    eax,edi
c00083a7:	99                   	cdq    
c00083a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ac:	89 d0                	mov    eax,edx
c00083ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083b2:	19 c2                	sbb    edx,eax
c00083b4:	89 f8                	mov    eax,edi
c00083b6:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083bb:	89 ea                	mov    edx,ebp
c00083bd:	29 c2                	sub    edx,eax
c00083bf:	85 c0                	test   eax,eax
c00083c1:	74 0b                	je     c00083ce <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083c3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083c6:	89 c1                	mov    ecx,eax
c00083c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ce:	85 d2                	test   edx,edx
c00083d0:	74 0d                	je     c00083df <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d6:	89 d1                	mov    ecx,edx
c00083d8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083db:	89 c7                	mov    edi,eax
c00083dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083e8:	99                   	cdq    
c00083e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083ed:	89 f7                	mov    edi,esi
c00083ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00083f3:	c1 ff 1f             	sar    edi,0x1f
c00083f6:	57                   	push   edi
c00083f7:	56                   	push   esi
c00083f8:	52                   	push   edx
c00083f9:	50                   	push   eax
c00083fa:	e8 71 66 01 00       	call   c001ea70 <__umoddi3>
c00083ff:	83 c4 10             	add    esp,0x10
c0008402:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008407:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000840a:	75 10                	jne    c000841c <Pipe::read(unsigned long long, void*, int*)+0xde>
c000840c:	83 ec 0c             	sub    esp,0xc
c000840f:	68 46 00 02 c0       	push   0xc0020046
c0008414:	e8 04 87 00 00       	call   c0010b1d <KePanic(char const*)>
c0008419:	83 c4 10             	add    esp,0x10
c000841c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008424:	89 10                	mov    DWORD PTR [eax],edx
c0008426:	83 c4 1c             	add    esp,0x1c
c0008429:	31 c0                	xor    eax,eax
c000842b:	5b                   	pop    ebx
c000842c:	5e                   	pop    esi
c000842d:	5f                   	pop    edi
c000842e:	5d                   	pop    ebp
c000842f:	c3                   	ret    

c0008430 <Pipe::Pipe(int)>:
c0008430:	83 ec 0c             	sub    esp,0xc
c0008433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008437:	83 ec 08             	sub    esp,0x8
c000843a:	6a 00                	push   0x0
c000843c:	50                   	push   eax
c000843d:	e8 58 0d 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008442:	83 c4 10             	add    esp,0x10
c0008445:	ba 6c 00 02 c0       	mov    edx,0xc002006c
c000844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844e:	89 10                	mov    DWORD PTR [eax],edx
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008458:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008471:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008475:	83 ec 0c             	sub    esp,0xc
c0008478:	50                   	push   eax
c0008479:	e8 4d f6 ff ff       	call   c0007acb <malloc>
c000847e:	83 c4 10             	add    esp,0x10
c0008481:	89 c2                	mov    edx,eax
c0008483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008487:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008492:	90                   	nop
c0008493:	83 c4 0c             	add    esp,0xc
c0008496:	c3                   	ret    
c0008497:	90                   	nop

c0008498 <VgaText::isAtty()>:
c0008498:	b0 01                	mov    al,0x1
c000849a:	c3                   	ret    
c000849b:	90                   	nop

c000849c <VgaText::~VgaText()>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	ba b4 00 02 c0       	mov    edx,0xc00200b4
c00084a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a8:	89 10                	mov    DWORD PTR [eax],edx
c00084aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ae:	83 ec 0c             	sub    esp,0xc
c00084b1:	50                   	push   eax
c00084b2:	e8 c9 0e 00 00       	call   c0009380 <UnixFile::~UnixFile()>
c00084b7:	83 c4 10             	add    esp,0x10
c00084ba:	90                   	nop
c00084bb:	83 c4 0c             	add    esp,0xc
c00084be:	c3                   	ret    
c00084bf:	90                   	nop

c00084c0 <VgaText::~VgaText()>:
c00084c0:	83 ec 0c             	sub    esp,0xc
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ca:	e8 cd ff ff ff       	call   c000849c <VgaText::~VgaText()>
c00084cf:	83 c4 10             	add    esp,0x10
c00084d2:	83 ec 08             	sub    esp,0x8
c00084d5:	68 84 01 00 00       	push   0x184
c00084da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084de:	e8 1d 23 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c00084e3:	83 c4 10             	add    esp,0x10
c00084e6:	83 c4 0c             	add    esp,0xc
c00084e9:	c3                   	ret    

c00084ea <VgaText::read(unsigned long long, void*, int*)>:
c00084ea:	83 ec 10             	sub    esp,0x10
c00084ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f9:	e8 18 4a 00 00       	call   c000cf16 <readKeyboard(VgaText*, char*, unsigned long)>
c00084fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008502:	89 02                	mov    DWORD PTR [edx],eax
c0008504:	31 c0                	xor    eax,eax
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <setTerminalScrollLock(bool)>:
c000850a:	c3                   	ret    

c000850b <doTerminalCycle()>:
c000850b:	c3                   	ret    

c000850c <addToTerminalCycle(VgaText*)>:
c000850c:	c3                   	ret    

c000850d <scrollTerminalScrollLock(int)>:
c000850d:	c3                   	ret    

c000850e <VgaText::updateTitle()>:
c000850e:	c3                   	ret    
c000850f:	90                   	nop

c0008510 <VgaText::load()>:
c0008510:	c3                   	ret    
c0008511:	90                   	nop

c0008512 <VgaText::updateCursor()>:
c0008512:	83 ec 14             	sub    esp,0x14
c0008515:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008519:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000851c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000851f:	e8 a0 fb 00 00       	call   c00180c4 <HalConsoleCursorUpdate(int, int)>
c0008524:	83 c4 1c             	add    esp,0x1c
c0008527:	c3                   	ret    

c0008528 <VgaText::doANSI_SGR(int)>:
c0008528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000852c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008530:	85 d2                	test   edx,edx
c0008532:	75 0b                	jne    c000853f <VgaText::doANSI_SGR(int)+0x17>
c0008534:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008537:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000853a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000853d:	eb 59                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c000853f:	83 fa 07             	cmp    edx,0x7
c0008542:	75 0b                	jne    c000854f <VgaText::doANSI_SGR(int)+0x27>
c0008544:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008547:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000854a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000854d:	eb 49                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c000854f:	83 fa 1b             	cmp    edx,0x1b
c0008552:	74 e0                	je     c0008534 <VgaText::doANSI_SGR(int)+0xc>
c0008554:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008557:	83 f9 07             	cmp    ecx,0x7
c000855a:	77 09                	ja     c0008565 <VgaText::doANSI_SGR(int)+0x3d>
c000855c:	8b 14 8d 60 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd9a0]
c0008563:	eb 20                	jmp    c0008585 <VgaText::doANSI_SGR(int)+0x5d>
c0008565:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008568:	83 f9 07             	cmp    ecx,0x7
c000856b:	77 09                	ja     c0008576 <VgaText::doANSI_SGR(int)+0x4e>
c000856d:	8b 14 8d 60 26 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd9a0]
c0008574:	eb 22                	jmp    c0008598 <VgaText::doANSI_SGR(int)+0x70>
c0008576:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008579:	83 f9 07             	cmp    ecx,0x7
c000857c:	77 0b                	ja     c0008589 <VgaText::doANSI_SGR(int)+0x61>
c000857e:	8b 14 95 18 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddae8]
c0008585:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008588:	c3                   	ret    
c0008589:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000858c:	83 f9 07             	cmp    ecx,0x7
c000858f:	77 0a                	ja     c000859b <VgaText::doANSI_SGR(int)+0x73>
c0008591:	8b 14 95 f0 24 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddb10]
c0008598:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000859b:	c3                   	ret    

c000859c <VgaText::setDefaultBgColour(VgaColour)>:
c000859c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085a7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085aa:	c3                   	ret    
c00085ab:	90                   	nop

c00085ac <VgaText::setDefaultFgColour(VgaColour)>:
c00085ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085ba:	c3                   	ret    
c00085bb:	90                   	nop

c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085bc:	53                   	push   ebx
c00085bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c9:	51                   	push   ecx
c00085ca:	e8 cd ff ff ff       	call   c000859c <VgaText::setDefaultBgColour(VgaColour)>
c00085cf:	58                   	pop    eax
c00085d0:	5a                   	pop    edx
c00085d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d9:	5b                   	pop    ebx
c00085da:	eb d0                	jmp    c00085ac <VgaText::setDefaultFgColour(VgaColour)>

c00085dc <VgaText::setTitleTextColour(VgaColour)>:
c00085dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085e7:	c3                   	ret    

c00085e8 <VgaText::setTitleColour(VgaColour)>:
c00085e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085f3:	c3                   	ret    

c00085f4 <VgaText::setTitle(char*)>:
c00085f4:	c3                   	ret    
c00085f5:	90                   	nop

c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085ff:	83 e0 0f             	and    eax,0xf
c0008602:	c1 e2 04             	shl    edx,0x4
c0008605:	09 d0                	or     eax,edx
c0008607:	c3                   	ret    

c0008608 <VgaText::scrollScreen()>:
c0008608:	55                   	push   ebp
c0008609:	57                   	push   edi
c000860a:	56                   	push   esi
c000860b:	be 01 00 00 00       	mov    esi,0x1
c0008610:	53                   	push   ebx
c0008611:	83 ec 0c             	sub    esp,0xc
c0008614:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008618:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000861b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008621:	31 ff                	xor    edi,edi
c0008623:	01 e9                	add    ecx,ebp
c0008625:	8a 01                	mov    al,BYTE PTR [ecx]
c0008627:	83 fe 18             	cmp    esi,0x18
c000862a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008630:	75 20                	jne    c0008652 <VgaText::scrollScreen()+0x4a>
c0008632:	f7 c7 01 00 00 00    	test   edi,0x1
c0008638:	74 15                	je     c000864f <VgaText::scrollScreen()+0x47>
c000863a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000863e:	50                   	push   eax
c000863f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008643:	50                   	push   eax
c0008644:	e8 ad ff ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008649:	5a                   	pop    edx
c000864a:	5a                   	pop    edx
c000864b:	88 01                	mov    BYTE PTR [ecx],al
c000864d:	eb 03                	jmp    c0008652 <VgaText::scrollScreen()+0x4a>
c000864f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008652:	47                   	inc    edi
c0008653:	41                   	inc    ecx
c0008654:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000865a:	75 c9                	jne    c0008625 <VgaText::scrollScreen()+0x1d>
c000865c:	46                   	inc    esi
c000865d:	83 fe 19             	cmp    esi,0x19
c0008660:	75 b9                	jne    c000861b <VgaText::scrollScreen()+0x13>
c0008662:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008668:	75 1f                	jne    c0008689 <VgaText::scrollScreen()+0x81>
c000866a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000866e:	74 05                	je     c0008675 <VgaText::scrollScreen()+0x6d>
c0008670:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008673:	eb 14                	jmp    c0008689 <VgaText::scrollScreen()+0x81>
c0008675:	50                   	push   eax
c0008676:	50                   	push   eax
c0008677:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000867b:	50                   	push   eax
c000867c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008680:	50                   	push   eax
c0008681:	e8 d2 f8 00 00       	call   c0017f58 <HalConsoleScroll(int, int)>
c0008686:	83 c4 10             	add    esp,0x10
c0008689:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000868d:	83 c4 0c             	add    esp,0xc
c0008690:	5b                   	pop    ebx
c0008691:	5e                   	pop    esi
c0008692:	5f                   	pop    edi
c0008693:	5d                   	pop    ebp
c0008694:	e9 79 fe ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c0008699:	90                   	nop

c000869a <VgaText::combineCharAndColour(char, unsigned char)>:
c000869a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000869f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086a4:	c1 e0 08             	shl    eax,0x8
c00086a7:	09 d0                	or     eax,edx
c00086a9:	c3                   	ret    

c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086aa:	55                   	push   ebp
c00086ab:	57                   	push   edi
c00086ac:	56                   	push   esi
c00086ad:	53                   	push   ebx
c00086ae:	83 ec 1c             	sub    esp,0x1c
c00086b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086c5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c9:	0f b6 c3             	movzx  eax,bl
c00086cc:	50                   	push   eax
c00086cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086d2:	50                   	push   eax
c00086d3:	e8 1e ff ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c00086d8:	5a                   	pop    edx
c00086d9:	59                   	pop    ecx
c00086da:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086e6:	50                   	push   eax
c00086e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086eb:	e8 aa ff ff ff       	call   c000869a <VgaText::combineCharAndColour(char, unsigned char)>
c00086f0:	5a                   	pop    edx
c00086f1:	6b d7 50             	imul   edx,edi,0x50
c00086f4:	59                   	pop    ecx
c00086f5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f8:	01 f2                	add    edx,esi
c00086fa:	0f b7 d2             	movzx  edx,dx
c00086fd:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008701:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008707:	75 28                	jne    c0008731 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008709:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000870d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008711:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008715:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008719:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000871d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008721:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008725:	83 c4 1c             	add    esp,0x1c
c0008728:	5b                   	pop    ebx
c0008729:	5e                   	pop    esi
c000872a:	5f                   	pop    edi
c000872b:	5d                   	pop    ebp
c000872c:	e9 2f f9 00 00       	jmp    c0018060 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008731:	83 c4 1c             	add    esp,0x1c
c0008734:	5b                   	pop    ebx
c0008735:	5e                   	pop    esi
c0008736:	5f                   	pop    edi
c0008737:	5d                   	pop    ebp
c0008738:	c3                   	ret    
c0008739:	90                   	nop

c000873a <VgaText::getCursorX()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008741:	c3                   	ret    

c0008742 <VgaText::getCursorY()>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008749:	c3                   	ret    

c000874a <VgaText::setCursor(int, int)>:
c000874a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008752:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008759:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000875c:	e9 b1 fd ff ff       	jmp    c0008512 <VgaText::updateCursor()>

c0008761 <setActiveTerminal(VgaText*)>:
c0008761:	53                   	push   ebx
c0008762:	83 ec 08             	sub    esp,0x8
c0008765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008769:	85 db                	test   ebx,ebx
c000876b:	75 11                	jne    c000877e <setActiveTerminal(VgaText*)+0x1d>
c000876d:	c7 44 24 10 80 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020080
c0008775:	83 c4 08             	add    esp,0x8
c0008778:	5b                   	pop    ebx
c0008779:	e9 9f 83 00 00       	jmp    c0010b1d <KePanic(char const*)>
c000877e:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008783:	85 c0                	test   eax,eax
c0008785:	74 0c                	je     c0008793 <setActiveTerminal(VgaText*)+0x32>
c0008787:	83 ec 0c             	sub    esp,0xc
c000878a:	50                   	push   eax
c000878b:	e8 82 fd ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	50                   	push   eax
c0008794:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008797:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000879d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087a0:	53                   	push   ebx
c00087a1:	e8 a4 ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c00087a6:	83 c4 18             	add    esp,0x18
c00087a9:	5b                   	pop    ebx
c00087aa:	c3                   	ret    
c00087ab:	90                   	nop

c00087ac <VgaText::clearScreen()>:
c00087ac:	57                   	push   edi
c00087ad:	56                   	push   esi
c00087ae:	31 f6                	xor    esi,esi
c00087b0:	53                   	push   ebx
c00087b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087b5:	52                   	push   edx
c00087b6:	6a 00                	push   0x0
c00087b8:	6a 00                	push   0x0
c00087ba:	53                   	push   ebx
c00087bb:	e8 8a ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c00087c0:	83 c4 10             	add    esp,0x10
c00087c3:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087ca:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087cd:	7e 20                	jle    c00087ef <VgaText::clearScreen()+0x43>
c00087cf:	31 ff                	xor    edi,edi
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	56                   	push   esi
c00087d4:	57                   	push   edi
c00087d5:	47                   	inc    edi
c00087d6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087dc:	6a 20                	push   0x20
c00087de:	53                   	push   ebx
c00087df:	e8 c6 fe ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087e4:	83 c4 20             	add    esp,0x20
c00087e7:	83 ff 50             	cmp    edi,0x50
c00087ea:	75 e5                	jne    c00087d1 <VgaText::clearScreen()+0x25>
c00087ec:	46                   	inc    esi
c00087ed:	eb db                	jmp    c00087ca <VgaText::clearScreen()+0x1e>
c00087ef:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087f6:	5b                   	pop    ebx
c00087f7:	5e                   	pop    esi
c00087f8:	5f                   	pop    edi
c00087f9:	c3                   	ret    

c00087fa <VgaText::setCursorX(int)>:
c00087fa:	83 ec 10             	sub    esp,0x10
c00087fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008801:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008808:	50                   	push   eax
c0008809:	e8 3c ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c000880e:	83 c4 1c             	add    esp,0x1c
c0008811:	c3                   	ret    

c0008812 <VgaText::setCursorY(int)>:
c0008812:	83 ec 10             	sub    esp,0x10
c0008815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008820:	50                   	push   eax
c0008821:	e8 24 ff ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008826:	83 c4 1c             	add    esp,0x1c
c0008829:	c3                   	ret    

c000882a <VgaText::incrementCursor(bool)>:
c000882a:	56                   	push   esi
c000882b:	53                   	push   ebx
c000882c:	51                   	push   ecx
c000882d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008835:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008838:	40                   	inc    eax
c0008839:	83 f8 50             	cmp    eax,0x50
c000883c:	74 05                	je     c0008843 <VgaText::incrementCursor(bool)+0x19>
c000883e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008841:	eb 24                	jmp    c0008867 <VgaText::incrementCursor(bool)+0x3d>
c0008843:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000884a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000884d:	8d 50 01             	lea    edx,[eax+0x1]
c0008850:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008853:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008856:	75 0f                	jne    c0008867 <VgaText::incrementCursor(bool)+0x3d>
c0008858:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	53                   	push   ebx
c000885f:	e8 a4 fd ff ff       	call   c0008608 <VgaText::scrollScreen()>
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	89 f0                	mov    eax,esi
c0008869:	84 c0                	test   al,al
c000886b:	74 0c                	je     c0008879 <VgaText::incrementCursor(bool)+0x4f>
c000886d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008871:	5a                   	pop    edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	e9 99 fc ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c0008879:	58                   	pop    eax
c000887a:	5b                   	pop    ebx
c000887b:	5e                   	pop    esi
c000887c:	c3                   	ret    
c000887d:	90                   	nop

c000887e <VgaText::decrementCursor(bool)>:
c000887e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008886:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008889:	85 c0                	test   eax,eax
c000888b:	74 04                	je     c0008891 <VgaText::decrementCursor(bool)+0x13>
c000888d:	48                   	dec    eax
c000888e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008891:	84 c9                	test   cl,cl
c0008893:	74 09                	je     c000889e <VgaText::decrementCursor(bool)+0x20>
c0008895:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008899:	e9 74 fc ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c000889e:	c3                   	ret    
c000889f:	90                   	nop

c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088a0:	53                   	push   ebx
c00088a1:	83 ec 08             	sub    esp,0x8
c00088a4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088b5:	83 f8 07             	cmp    eax,0x7
c00088b8:	75 21                	jne    c00088db <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088c2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ca:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088d2:	83 c4 08             	add    esp,0x8
c00088d5:	5b                   	pop    ebx
c00088d6:	e9 78 31 00 00       	jmp    c000ba53 <Krnl::beep(int, int, bool)>
c00088db:	83 f8 0d             	cmp    eax,0xd
c00088de:	75 09                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e7:	eb 2d                	jmp    c0008916 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e9:	83 f8 0a             	cmp    eax,0xa
c00088ec:	75 31                	jne    c000891f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088f8:	8d 50 01             	lea    edx,[eax+0x1]
c00088fb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088fe:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008901:	75 0f                	jne    c0008912 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008903:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008906:	83 ec 0c             	sub    esp,0xc
c0008909:	53                   	push   ebx
c000890a:	e8 f9 fc ff ff       	call   c0008608 <VgaText::scrollScreen()>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008916:	83 c4 08             	add    esp,0x8
c0008919:	5b                   	pop    ebx
c000891a:	e9 f3 fb ff ff       	jmp    c0008512 <VgaText::updateCursor()>
c000891f:	83 f8 08             	cmp    eax,0x8
c0008922:	75 25                	jne    c0008949 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008924:	50                   	push   eax
c0008925:	50                   	push   eax
c0008926:	6a 01                	push   0x1
c0008928:	53                   	push   ebx
c0008929:	e8 50 ff ff ff       	call   c000887e <VgaText::decrementCursor(bool)>
c000892e:	5a                   	pop    edx
c000892f:	59                   	pop    ecx
c0008930:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008933:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008936:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008939:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000893c:	6a 20                	push   0x20
c000893e:	53                   	push   ebx
c000893f:	e8 66 fd ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008944:	83 c4 28             	add    esp,0x28
c0008947:	5b                   	pop    ebx
c0008948:	c3                   	ret    
c0008949:	83 ec 08             	sub    esp,0x8
c000894c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000894f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008952:	51                   	push   ecx
c0008953:	52                   	push   edx
c0008954:	50                   	push   eax
c0008955:	53                   	push   ebx
c0008956:	e8 4f fd ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000895b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000895f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008967:	83 c4 28             	add    esp,0x28
c000896a:	5b                   	pop    ebx
c000896b:	e9 ba fe ff ff       	jmp    c000882a <VgaText::incrementCursor(bool)>

c0008970 <VgaText::putchar(char)>:
c0008970:	57                   	push   edi
c0008971:	56                   	push   esi
c0008972:	53                   	push   ebx
c0008973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000897b:	0f be c2             	movsx  eax,dl
c000897e:	83 f8 5b             	cmp    eax,0x5b
c0008981:	75 18                	jne    c000899b <VgaText::putchar(char)+0x2b>
c0008983:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008987:	74 20                	je     c00089a9 <VgaText::putchar(char)+0x39>
c0008989:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008996:	e9 b8 00 00 00       	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c000899b:	83 f8 1b             	cmp    eax,0x1b
c000899e:	75 09                	jne    c00089a9 <VgaText::putchar(char)+0x39>
c00089a0:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a4:	e9 aa 00 00 00       	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c00089a9:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089ad:	89 f9                	mov    ecx,edi
c00089af:	84 c9                	test   cl,cl
c00089b1:	0f 84 8c 00 00 00    	je     c0008a43 <VgaText::putchar(char)+0xd3>
c00089b7:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089ba:	80 f9 3e             	cmp    cl,0x3e
c00089bd:	77 70                	ja     c0008a2f <VgaText::putchar(char)+0xbf>
c00089bf:	83 f8 6d             	cmp    eax,0x6d
c00089c2:	75 3f                	jne    c0008a03 <VgaText::putchar(char)+0x93>
c00089c4:	31 f6                	xor    esi,esi
c00089c6:	31 d2                	xor    edx,edx
c00089c8:	31 c0                	xor    eax,eax
c00089ca:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089cd:	7e 25                	jle    c00089f4 <VgaText::putchar(char)+0x84>
c00089cf:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d4:	83 fa 3b             	cmp    edx,0x3b
c00089d7:	75 0f                	jne    c00089e8 <VgaText::putchar(char)+0x78>
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 48 fb ff ff       	call   c0008528 <VgaText::doANSI_SGR(int)>
c00089e0:	31 d2                	xor    edx,edx
c00089e2:	59                   	pop    ecx
c00089e3:	58                   	pop    eax
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	eb 09                	jmp    c00089f1 <VgaText::putchar(char)+0x81>
c00089e8:	6b c0 0a             	imul   eax,eax,0xa
c00089eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089ef:	89 fa                	mov    edx,edi
c00089f1:	46                   	inc    esi
c00089f2:	eb d6                	jmp    c00089ca <VgaText::putchar(char)+0x5a>
c00089f4:	84 d2                	test   dl,dl
c00089f6:	74 2f                	je     c0008a27 <VgaText::putchar(char)+0xb7>
c00089f8:	50                   	push   eax
c00089f9:	53                   	push   ebx
c00089fa:	e8 29 fb ff ff       	call   c0008528 <VgaText::doANSI_SGR(int)>
c00089ff:	58                   	pop    eax
c0008a00:	5a                   	pop    edx
c0008a01:	eb 24                	jmp    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a03:	83 f8 4a             	cmp    eax,0x4a
c0008a06:	75 1f                	jne    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a08:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a0c:	75 19                	jne    c0008a27 <VgaText::putchar(char)+0xb7>
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	53                   	push   ebx
c0008a12:	e8 95 fd ff ff       	call   c00087ac <VgaText::clearScreen()>
c0008a17:	83 c4 0c             	add    esp,0xc
c0008a1a:	6a 00                	push   0x0
c0008a1c:	6a 00                	push   0x0
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 26 fd ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008a24:	83 c4 10             	add    esp,0x10
c0008a27:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a2d:	eb 24                	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c0008a2f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a32:	83 f8 0e             	cmp    eax,0xe
c0008a35:	7f 1c                	jg     c0008a53 <VgaText::putchar(char)+0xe3>
c0008a37:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a3d:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a41:	eb 10                	jmp    c0008a53 <VgaText::putchar(char)+0xe3>
c0008a43:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a46:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a49:	50                   	push   eax
c0008a4a:	53                   	push   ebx
c0008a4b:	e8 50 fe ff ff       	call   c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a50:	83 c4 10             	add    esp,0x10
c0008a53:	5b                   	pop    ebx
c0008a54:	5e                   	pop    esi
c0008a55:	5f                   	pop    edi
c0008a56:	c3                   	ret    
c0008a57:	90                   	nop

c0008a58 <VgaText::putx(unsigned int)>:
c0008a58:	57                   	push   edi
c0008a59:	b9 11 00 00 00       	mov    ecx,0x11
c0008a5e:	56                   	push   esi
c0008a5f:	be 8e 00 02 c0       	mov    esi,0xc002008e
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 20             	sub    esp,0x20
c0008a68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a6c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a70:	fc                   	cld    
c0008a71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a73:	be 08 00 00 00       	mov    esi,0x8
c0008a78:	50                   	push   eax
c0008a79:	50                   	push   eax
c0008a7a:	89 d8                	mov    eax,ebx
c0008a7c:	c1 e8 1c             	shr    eax,0x1c
c0008a7f:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	50                   	push   eax
c0008a88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a8c:	e8 df fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008a91:	83 c4 10             	add    esp,0x10
c0008a94:	4e                   	dec    esi
c0008a95:	75 e1                	jne    c0008a78 <VgaText::putx(unsigned int)+0x20>
c0008a97:	83 c4 20             	add    esp,0x20
c0008a9a:	5b                   	pop    ebx
c0008a9b:	5e                   	pop    esi
c0008a9c:	5f                   	pop    edi
c0008a9d:	c3                   	ret    

c0008a9e <VgaText::puts(char const*)>:
c0008a9e:	53                   	push   ebx
c0008a9f:	83 ec 08             	sub    esp,0x8
c0008aa2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa9:	85 c0                	test   eax,eax
c0008aab:	74 12                	je     c0008abf <VgaText::puts(char const*)+0x21>
c0008aad:	51                   	push   ecx
c0008aae:	43                   	inc    ebx
c0008aaf:	51                   	push   ecx
c0008ab0:	50                   	push   eax
c0008ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab5:	e8 b6 fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	eb e7                	jmp    c0008aa6 <VgaText::puts(char const*)+0x8>
c0008abf:	83 c4 08             	add    esp,0x8
c0008ac2:	5b                   	pop    ebx
c0008ac3:	c3                   	ret    

c0008ac4 <VgaText::write(unsigned long long, void*, int*)>:
c0008ac4:	55                   	push   ebp
c0008ac5:	57                   	push   edi
c0008ac6:	56                   	push   esi
c0008ac7:	53                   	push   ebx
c0008ac8:	83 ec 0c             	sub    esp,0xc
c0008acb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008acf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ad3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ade:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae1:	39 eb                	cmp    ebx,ebp
c0008ae3:	74 13                	je     c0008af8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ae5:	50                   	push   eax
c0008ae6:	43                   	inc    ebx
c0008ae7:	50                   	push   eax
c0008ae8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008aec:	50                   	push   eax
c0008aed:	56                   	push   esi
c0008aee:	e8 7d fe ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008af3:	83 c4 10             	add    esp,0x10
c0008af6:	eb e9                	jmp    c0008ae1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af8:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b03:	89 38                	mov    DWORD PTR [eax],edi
c0008b05:	83 c4 0c             	add    esp,0xc
c0008b08:	31 c0                	xor    eax,eax
c0008b0a:	5b                   	pop    ebx
c0008b0b:	5e                   	pop    esi
c0008b0c:	5f                   	pop    edi
c0008b0d:	5d                   	pop    ebp
c0008b0e:	c3                   	ret    
c0008b0f:	90                   	nop

c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b10:	55                   	push   ebp
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	53                   	push   ebx
c0008b14:	83 ec 0c             	sub    esp,0xc
c0008b17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b20:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b27:	50                   	push   eax
c0008b28:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2d:	50                   	push   eax
c0008b2e:	e8 c3 fa ff ff       	call   c00085f6 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b33:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b37:	5a                   	pop    edx
c0008b38:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b3b:	59                   	pop    ecx
c0008b3c:	0f b6 f8             	movzx  edi,al
c0008b3f:	0f b7 db             	movzx  ebx,bx
c0008b42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b46:	01 db                	add    ebx,ebx
c0008b48:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b4b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b4e:	85 c0                	test   eax,eax
c0008b50:	0f 84 ef 00 00 00    	je     c0008c45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b56:	83 f8 0d             	cmp    eax,0xd
c0008b59:	75 0c                	jne    c0008b67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b5b:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b62:	e9 d8 00 00 00       	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b67:	83 f8 0a             	cmp    eax,0xa
c0008b6a:	75 44                	jne    c0008bb0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b6c:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b73:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b76:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b79:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b7c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b7f:	75 0f                	jne    c0008b90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b81:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b84:	83 ec 0c             	sub    esp,0xc
c0008b87:	55                   	push   ebp
c0008b88:	e8 7b fa ff ff       	call   c0008608 <VgaText::scrollScreen()>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	83 ec 0c             	sub    esp,0xc
c0008b93:	55                   	push   ebp
c0008b94:	e8 79 f9 ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008ba0:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008ba3:	0f b7 db             	movzx  ebx,bx
c0008ba6:	01 db                	add    ebx,ebx
c0008ba8:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bab:	e9 8f 00 00 00       	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb0:	83 f8 08             	cmp    eax,0x8
c0008bb3:	75 34                	jne    c0008be9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bb5:	51                   	push   ecx
c0008bb6:	51                   	push   ecx
c0008bb7:	6a 01                	push   0x1
c0008bb9:	55                   	push   ebp
c0008bba:	e8 bf fc ff ff       	call   c000887e <VgaText::decrementCursor(bool)>
c0008bbf:	5b                   	pop    ebx
c0008bc0:	58                   	pop    eax
c0008bc1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bc4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bc7:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bca:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bcd:	6a 20                	push   0x20
c0008bcf:	55                   	push   ebp
c0008bd0:	e8 d5 fa ff ff       	call   c00086aa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bd5:	83 c4 20             	add    esp,0x20
c0008bd8:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bdc:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bdf:	0f b7 db             	movzx  ebx,bx
c0008be2:	01 db                	add    ebx,ebx
c0008be4:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008be7:	eb 56                	jmp    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be9:	52                   	push   edx
c0008bea:	52                   	push   edx
c0008beb:	57                   	push   edi
c0008bec:	50                   	push   eax
c0008bed:	e8 a8 fa ff ff       	call   c000869a <VgaText::combineCharAndColour(char, unsigned char)>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	66 89 03             	mov    WORD PTR [ebx],ax
c0008bf8:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008bfe:	75 1d                	jne    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c00:	83 ec 0c             	sub    esp,0xc
c0008c03:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c06:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c09:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c11:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c14:	50                   	push   eax
c0008c15:	e8 46 f4 00 00       	call   c0018060 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c1a:	83 c4 20             	add    esp,0x20
c0008c1d:	50                   	push   eax
c0008c1e:	83 c3 02             	add    ebx,0x2
c0008c21:	50                   	push   eax
c0008c22:	6a 00                	push   0x0
c0008c24:	55                   	push   ebp
c0008c25:	e8 00 fc ff ff       	call   c000882a <VgaText::incrementCursor(bool)>
c0008c2a:	83 c4 10             	add    esp,0x10
c0008c2d:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c31:	75 0c                	jne    c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c33:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c37:	0f b7 db             	movzx  ebx,bx
c0008c3a:	01 db                	add    ebx,ebx
c0008c3c:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c3f:	46                   	inc    esi
c0008c40:	e9 06 ff ff ff       	jmp    c0008b4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c45:	83 ec 0c             	sub    esp,0xc
c0008c48:	55                   	push   ebp
c0008c49:	e8 c4 f8 ff ff       	call   c0008512 <VgaText::updateCursor()>
c0008c4e:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c55:	83 c4 1c             	add    esp,0x1c
c0008c58:	5b                   	pop    ebx
c0008c59:	5e                   	pop    esi
c0008c5a:	5f                   	pop    edi
c0008c5b:	5d                   	pop    ebp
c0008c5c:	c3                   	ret    
c0008c5d:	90                   	nop

c0008c5e <VgaText::VgaText(char const*)>:
c0008c5e:	56                   	push   esi
c0008c5f:	53                   	push   ebx
c0008c60:	83 ec 04             	sub    esp,0x4
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	83 ec 08             	sub    esp,0x8
c0008c6a:	6a 00                	push   0x0
c0008c6c:	50                   	push   eax
c0008c6d:	e8 28 05 00 00       	call   c000919a <UnixFile::UnixFile(int)>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	ba b4 00 02 c0       	mov    edx,0xc00200b4
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	89 10                	mov    DWORD PTR [eax],edx
c0008c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c84:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cdd:	83 ec 0c             	sub    esp,0xc
c0008ce0:	6a 01                	push   0x1
c0008ce2:	e8 02 09 00 00       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0008ce7:	83 c4 10             	add    esp,0x10
c0008cea:	89 c2                	mov    edx,eax
c0008cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cf3:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d00:	89 c6                	mov    esi,eax
c0008d02:	e8 ce f0 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0008d07:	68 05 0c 00 00       	push   0xc05
c0008d0c:	56                   	push   esi
c0008d0d:	50                   	push   eax
c0008d0e:	53                   	push   ebx
c0008d0f:	e8 de 0f 00 00       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d1e:	83 ec 04             	sub    esp,0x4
c0008d21:	68 a0 0f 00 00       	push   0xfa0
c0008d26:	6a 00                	push   0x0
c0008d28:	50                   	push   eax
c0008d29:	e8 c2 77 ff ff       	call   c00004f0 <memset>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	83 ec 04             	sub    esp,0x4
c0008d34:	6a 00                	push   0x0
c0008d36:	6a 07                	push   0x7
c0008d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d3c:	e8 7b f8 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d41:	83 c4 10             	add    esp,0x10
c0008d44:	83 ec 04             	sub    esp,0x4
c0008d47:	6a 00                	push   0x0
c0008d49:	6a 00                	push   0x0
c0008d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4f:	e8 f6 f9 ff ff       	call   c000874a <VgaText::setCursor(int, int)>
c0008d54:	83 c4 10             	add    esp,0x10
c0008d57:	83 ec 0c             	sub    esp,0xc
c0008d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5e:	e8 49 fa ff ff       	call   c00087ac <VgaText::clearScreen()>
c0008d63:	83 c4 10             	add    esp,0x10
c0008d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	05 82 00 00 00       	add    eax,0x82
c0008d77:	83 ec 04             	sub    esp,0x4
c0008d7a:	68 80 00 00 00       	push   0x80
c0008d7f:	6a 00                	push   0x0
c0008d81:	50                   	push   eax
c0008d82:	e8 69 77 ff ff       	call   c00004f0 <memset>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d8e:	05 02 01 00 00       	add    eax,0x102
c0008d93:	83 ec 04             	sub    esp,0x4
c0008d96:	68 80 00 00 00       	push   0x80
c0008d9b:	6a 00                	push   0x0
c0008d9d:	50                   	push   eax
c0008d9e:	e8 4d 77 ff ff       	call   c00004f0 <memset>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	90                   	nop
c0008da7:	83 c4 04             	add    esp,0x4
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    
c0008dad:	90                   	nop

c0008dae <VgaText::receiveKey(unsigned char)>:
c0008dae:	55                   	push   ebp
c0008daf:	57                   	push   edi
c0008db0:	56                   	push   esi
c0008db1:	53                   	push   ebx
c0008db2:	83 ec 2c             	sub    esp,0x2c
c0008db5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008db9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dbd:	89 fd                	mov    ebp,edi
c0008dbf:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dc5:	0f 84 48 01 00 00    	je     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008dcb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd1:	83 fd 08             	cmp    ebp,0x8
c0008dd4:	75 6a                	jne    c0008e40 <VgaText::receiveKey(unsigned char)+0x92>
c0008dd6:	83 ec 0c             	sub    esp,0xc
c0008dd9:	56                   	push   esi
c0008dda:	e8 a1 77 ff ff       	call   c0000580 <strlen>
c0008ddf:	83 c4 10             	add    esp,0x10
c0008de2:	85 c0                	test   eax,eax
c0008de4:	0f 84 ef 00 00 00    	je     c0008ed9 <VgaText::receiveKey(unsigned char)+0x12b>
c0008dea:	50                   	push   eax
c0008deb:	50                   	push   eax
c0008dec:	6a 08                	push   0x8
c0008dee:	53                   	push   ebx
c0008def:	e8 7c fb ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008df4:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df7:	e8 84 77 ff ff       	call   c0000580 <strlen>
c0008dfc:	83 c4 10             	add    esp,0x10
c0008dff:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e07:	83 fa 1f             	cmp    edx,0x1f
c0008e0a:	89 d0                	mov    eax,edx
c0008e0c:	7f 1c                	jg     c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 15                	jbe    c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e15:	83 fa 0d             	cmp    edx,0xd
c0008e18:	74 10                	je     c0008e2a <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1a:	57                   	push   edi
c0008e1b:	57                   	push   edi
c0008e1c:	68 9f 00 02 c0       	push   0xc002009f
c0008e21:	53                   	push   ebx
c0008e22:	e8 77 fc ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	83 ec 0c             	sub    esp,0xc
c0008e2d:	56                   	push   esi
c0008e2e:	e8 4d 77 ff ff       	call   c0000580 <strlen>
c0008e33:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3b:	e9 96 00 00 00       	jmp    c0008ed6 <VgaText::receiveKey(unsigned char)+0x128>
c0008e40:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e46:	83 ec 0c             	sub    esp,0xc
c0008e49:	50                   	push   eax
c0008e4a:	e8 31 77 ff ff       	call   c0000580 <strlen>
c0008e4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e56:	e8 25 77 ff ff       	call   c0000580 <strlen>
c0008e5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e66:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6b:	0f 87 a2 00 00 00    	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008e71:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e74:	3c 1e                	cmp    al,0x1e
c0008e76:	77 35                	ja     c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e78:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e7b:	3c 01                	cmp    al,0x1
c0008e7d:	76 2e                	jbe    c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e7f:	83 fd 0d             	cmp    ebp,0xd
c0008e82:	74 29                	je     c0008ead <VgaText::receiveKey(unsigned char)+0xff>
c0008e84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e87:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8a:	68 a5 00 02 c0       	push   0xc00200a5
c0008e8f:	53                   	push   ebx
c0008e90:	e8 7b fc ff ff       	call   c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e95:	8d 47 40             	lea    eax,[edi+0x40]
c0008e98:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9b:	0f b6 c0             	movzx  eax,al
c0008e9e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea1:	50                   	push   eax
c0008ea2:	53                   	push   ebx
c0008ea3:	e8 f8 f9 ff ff       	call   c00088a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ea8:	83 c4 20             	add    esp,0x20
c0008eab:	eb 11                	jmp    c0008ebe <VgaText::receiveKey(unsigned char)+0x110>
c0008ead:	51                   	push   ecx
c0008eae:	89 f8                	mov    eax,edi
c0008eb0:	51                   	push   ecx
c0008eb1:	0f be c0             	movsx  eax,al
c0008eb4:	50                   	push   eax
c0008eb5:	53                   	push   ebx
c0008eb6:	e8 b5 fa ff ff       	call   c0008970 <VgaText::putchar(char)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec3:	89 f8                	mov    eax,edi
c0008ec5:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ec9:	52                   	push   edx
c0008eca:	52                   	push   edx
c0008ecb:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ecf:	50                   	push   eax
c0008ed0:	56                   	push   esi
c0008ed1:	e8 9a 79 ff ff       	call   c0000870 <strcat>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ee0:	75 0f                	jne    c0008ef1 <VgaText::receiveKey(unsigned char)+0x143>
c0008ee2:	83 fd 1c             	cmp    ebp,0x1c
c0008ee5:	77 2c                	ja     c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008ee7:	b8 08 04 00 10       	mov    eax,0x10000408
c0008eec:	0f a3 e8             	bt     eax,ebp
c0008eef:	73 22                	jae    c0008f13 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef1:	50                   	push   eax
c0008ef2:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef8:	50                   	push   eax
c0008ef9:	56                   	push   esi
c0008efa:	53                   	push   ebx
c0008efb:	e8 70 79 ff ff       	call   c0000870 <strcat>
c0008f00:	83 c4 0c             	add    esp,0xc
c0008f03:	68 80 00 00 00       	push   0x80
c0008f08:	6a 00                	push   0x0
c0008f0a:	56                   	push   esi
c0008f0b:	e8 e0 75 ff ff       	call   c00004f0 <memset>
c0008f10:	83 c4 10             	add    esp,0x10
c0008f13:	83 c4 2c             	add    esp,0x2c
c0008f16:	5b                   	pop    ebx
c0008f17:	5e                   	pop    esi
c0008f18:	5f                   	pop    edi
c0008f19:	5d                   	pop    ebp
c0008f1a:	c3                   	ret    
c0008f1b:	90                   	nop

c0008f1c <VgaText::doUpdate()>:
c0008f1c:	c3                   	ret    
c0008f1d:	66 90                	xchg   ax,ax
c0008f1f:	90                   	nop

c0008f20 <TSS::TSS()>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f2b:	90                   	nop
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop
c0008f2e:	66 90                	xchg   ax,ax

c0008f30 <TSS::setESP(unsigned long)>:
c0008f30:	55                   	push   ebp
c0008f31:	89 e5                	mov    ebp,esp
c0008f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f3f:	90                   	nop
c0008f40:	5d                   	pop    ebp
c0008f41:	c3                   	ret    
c0008f42:	66 90                	xchg   ax,ax

c0008f44 <TSS::flush()>:
c0008f44:	55                   	push   ebp
c0008f45:	89 e5                	mov    ebp,esp
c0008f47:	83 ec 10             	sub    esp,0x10
c0008f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f4f:	83 c8 03             	or     eax,0x3
c0008f52:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f56:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f5a:	66 89 d0             	mov    ax,dx
c0008f5d:	0f 00 d8             	ltr    ax
c0008f60:	90                   	nop
c0008f61:	c9                   	leave  
c0008f62:	c3                   	ret    
c0008f63:	90                   	nop

c0008f64 <TSS::setup(unsigned long, unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	83 ec 18             	sub    esp,0x18
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	6a 68                	push   0x68
c0008f6f:	e8 57 eb ff ff       	call   c0007acb <malloc>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	89 c2                	mov    edx,eax
c0008f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f85:	83 ec 04             	sub    esp,0x4
c0008f88:	6a 68                	push   0x68
c0008f8a:	6a 00                	push   0x0
c0008f8c:	50                   	push   eax
c0008f8d:	e8 5e 75 ff ff       	call   c00004f0 <memset>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000900a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009016:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009029:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902c:	0f 20 da             	mov    edx,cr3
c000902f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009032:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009035:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903e:	83 ec 08             	sub    esp,0x8
c0009041:	50                   	push   eax
c0009042:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009045:	50                   	push   eax
c0009046:	e8 ef e2 ff ff       	call   c000733a <GDTEntry::setBase(unsigned int)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	83 ec 08             	sub    esp,0x8
c0009051:	6a 68                	push   0x68
c0009053:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009056:	50                   	push   eax
c0009057:	e8 fa e2 ff ff       	call   c0007356 <GDTEntry::setLimit(unsigned int)>
c000905c:	83 c4 10             	add    esp,0x10
c000905f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009063:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009066:	83 e0 0f             	and    eax,0xf
c0009069:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000906c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000906f:	83 c8 40             	or     eax,0x40
c0009072:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009075:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000907a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009080:	05 78 01 00 00       	add    eax,0x178
c0009085:	83 ec 04             	sub    esp,0x4
c0009088:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000908b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000908e:	50                   	push   eax
c000908f:	e8 f6 e2 ff ff       	call   c000738a <GDT::addEntry(GDTEntry)>
c0009094:	83 c4 10             	add    esp,0x10
c0009097:	89 c2                	mov    edx,eax
c0009099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000909c:	89 10                	mov    DWORD PTR [eax],edx
c000909e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a9:	05 78 01 00 00       	add    eax,0x178
c00090ae:	83 ec 0c             	sub    esp,0xc
c00090b1:	50                   	push   eax
c00090b2:	e8 fd e2 ff ff       	call   c00073b4 <GDT::flush()>
c00090b7:	83 c4 10             	add    esp,0x10
c00090ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00090bf:	c9                   	leave  
c00090c0:	c3                   	ret    
c00090c1:	90                   	nop

c00090c2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090cd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090d2:	75 08                	jne    c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090d4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090da:	eb 38                	jmp    c0009114 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090e1:	75 17                	jne    c00090fa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00090fa:	89 c1                	mov    ecx,eax
c00090fc:	83 e1 fd             	and    ecx,0xfffffffd
c00090ff:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009105:	74 cd                	je     c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009107:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000910c:	83 e0 ef             	and    eax,0xffffffef
c000910f:	83 f8 08             	cmp    eax,0x8
c0009112:	76 c0                	jbe    c00090d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009114:	31 c0                	xor    eax,eax
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::isAtty()>:
c0009118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000911f:	31 c0                	xor    eax,eax
c0009121:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009127:	74 09                	je     c0009132 <ReservedFilename::isAtty()+0x1a>
c0009129:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000912f:	0f 94 c0             	sete   al
c0009132:	c3                   	ret    
c0009133:	90                   	nop

c0009134 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000913c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009143:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009148:	75 08                	jne    c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000914a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009150:	eb 3d                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009152:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009157:	75 17                	jne    c0009170 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000915e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009161:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009167:	8b 10                	mov    edx,DWORD PTR [eax]
c0009169:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000916d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009170:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009175:	75 04                	jne    c000917b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009177:	89 0a                	mov    DWORD PTR [edx],ecx
c0009179:	eb 14                	jmp    c000918f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000917b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009180:	74 c8                	je     c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009182:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009187:	83 e0 ef             	and    eax,0xffffffef
c000918a:	83 f8 08             	cmp    eax,0x8
c000918d:	76 bb                	jbe    c000914a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918f:	31 c0                	xor    eax,eax
c0009191:	c3                   	ret    

c0009192 <UnixFile::getFileDescriptor()>:
c0009192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009199:	c3                   	ret    

c000919a <UnixFile::UnixFile(int)>:
c000919a:	53                   	push   ebx
c000919b:	83 ec 28             	sub    esp,0x28
c000919e:	ba 7c 01 02 c0       	mov    edx,0xc002017c
c00091a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091a7:	89 10                	mov    DWORD PTR [eax],edx
c00091a9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091b1:	0f 8f 90 01 00 00    	jg     c0009347 <UnixFile::UnixFile(int)+0x1ad>
c00091b7:	a1 a0 26 02 c0       	mov    eax,ds:0xc00226a0
c00091bc:	8d 50 01             	lea    edx,[eax+0x1]
c00091bf:	89 15 a0 26 02 c0    	mov    DWORD PTR ds:0xc00226a0,edx
c00091c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091cc:	83 ec 08             	sub    esp,0x8
c00091cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091d3:	68 98 4f 02 c0       	push   0xc0024f98
c00091d8:	e8 7b 5a 01 00       	call   c001ec58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c00091e5:	83 f0 01             	xor    eax,0x1
c00091e8:	0f b6 c0             	movzx  eax,al
c00091eb:	85 c0                	test   eax,eax
c00091ed:	0f 84 55 01 00 00    	je     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00091f3:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c00091fa:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009202:	83 ec 0c             	sub    esp,0xc
c0009205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009209:	e8 bd e8 ff ff       	call   c0007acb <malloc>
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	89 c3                	mov    ebx,eax
c0009213:	83 ec 08             	sub    esp,0x8
c0009216:	68 03 ff ff 0f       	push   0xfffff03
c000921b:	53                   	push   ebx
c000921c:	e8 2d 01 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000922a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009232:	83 ec 0c             	sub    esp,0xc
c0009235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009239:	e8 8d e8 ff ff       	call   c0007acb <malloc>
c000923e:	83 c4 10             	add    esp,0x10
c0009241:	89 c3                	mov    ebx,eax
c0009243:	83 ec 08             	sub    esp,0x8
c0009246:	68 01 ff ff 0f       	push   0xfffff01
c000924b:	53                   	push   ebx
c000924c:	e8 fd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000925a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009262:	83 ec 0c             	sub    esp,0xc
c0009265:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009269:	e8 5d e8 ff ff       	call   c0007acb <malloc>
c000926e:	83 c4 10             	add    esp,0x10
c0009271:	89 c3                	mov    ebx,eax
c0009273:	83 ec 08             	sub    esp,0x8
c0009276:	68 00 ff ff 0f       	push   0xfffff00
c000927b:	53                   	push   ebx
c000927c:	e8 cd 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c0009281:	83 c4 10             	add    esp,0x10
c0009284:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c000928a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009292:	83 ec 0c             	sub    esp,0xc
c0009295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009299:	e8 2d e8 ff ff       	call   c0007acb <malloc>
c000929e:	83 c4 10             	add    esp,0x10
c00092a1:	89 c3                	mov    ebx,eax
c00092a3:	83 ec 08             	sub    esp,0x8
c00092a6:	68 02 ff ff 0f       	push   0xfffff02
c00092ab:	53                   	push   ebx
c00092ac:	e8 9d 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092b1:	83 c4 10             	add    esp,0x10
c00092b4:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ba:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092c2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092c7:	7f 7f                	jg     c0009348 <UnixFile::UnixFile(int)+0x1ae>
c00092c9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092d1:	83 ec 0c             	sub    esp,0xc
c00092d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092d8:	e8 ee e7 ff ff       	call   c0007acb <malloc>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	89 c3                	mov    ebx,eax
c00092e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092e6:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092eb:	83 ec 08             	sub    esp,0x8
c00092ee:	50                   	push   eax
c00092ef:	53                   	push   ebx
c00092f0:	e8 59 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fc:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009303:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000930b:	83 ec 0c             	sub    esp,0xc
c000930e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009312:	e8 b4 e7 ff ff       	call   c0007acb <malloc>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 c3                	mov    ebx,eax
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009325:	83 ec 08             	sub    esp,0x8
c0009328:	50                   	push   eax
c0009329:	53                   	push   ebx
c000932a:	e8 1f 00 00 00       	call   c000934e <ReservedFilename::ReservedFilename(int)>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009336:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c000933d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009342:	e9 7b ff ff ff       	jmp    c00092c2 <UnixFile::UnixFile(int)+0x128>
c0009347:	90                   	nop
c0009348:	83 c4 28             	add    esp,0x28
c000934b:	5b                   	pop    ebx
c000934c:	c3                   	ret    
c000934d:	90                   	nop

c000934e <ReservedFilename::ReservedFilename(int)>:
c000934e:	83 ec 0c             	sub    esp,0xc
c0009351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009355:	83 ec 08             	sub    esp,0x8
c0009358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000935c:	50                   	push   eax
c000935d:	e8 38 fe ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c0009362:	83 c4 10             	add    esp,0x10
c0009365:	ba 98 01 02 c0       	mov    edx,0xc0020198
c000936a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936e:	89 10                	mov    DWORD PTR [eax],edx
c0009370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009374:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000937b:	90                   	nop
c000937c:	83 c4 0c             	add    esp,0xc
c000937f:	c3                   	ret    

c0009380 <UnixFile::~UnixFile()>:
c0009380:	83 ec 1c             	sub    esp,0x1c
c0009383:	ba 7c 01 02 c0       	mov    edx,0xc002017c
c0009388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000938c:	89 10                	mov    DWORD PTR [eax],edx
c000938e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009395:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000939a:	7f 76                	jg     c0009412 <UnixFile::~UnixFile()+0x92>
c000939c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	68 98 4f 02 c0       	push   0xc0024f98
c00093ac:	e8 7b 59 01 00       	call   c001ed2c <LinkedList<UnixFile>::getFirstElement()>
c00093b1:	83 c4 10             	add    esp,0x10
c00093b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b8:	83 ec 0c             	sub    esp,0xc
c00093bb:	68 98 4f 02 c0       	push   0xc0024f98
c00093c0:	e8 6f 59 01 00       	call   c001ed34 <LinkedList<UnixFile>::removeFirst()>
c00093c5:	83 c4 10             	add    esp,0x10
c00093c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093cc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093d0:	74 43                	je     c0009415 <UnixFile::~UnixFile()+0x95>
c00093d2:	83 ec 08             	sub    esp,0x8
c00093d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093d9:	68 98 4f 02 c0       	push   0xc0024f98
c00093de:	e8 75 58 01 00       	call   c001ec58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093ea:	8d 50 01             	lea    edx,[eax+0x1]
c00093ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093f1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00093f6:	0f 94 c0             	sete   al
c00093f9:	0f b6 c0             	movzx  eax,al
c00093fc:	85 c0                	test   eax,eax
c00093fe:	74 a4                	je     c00093a4 <UnixFile::~UnixFile()+0x24>
c0009400:	83 ec 0c             	sub    esp,0xc
c0009403:	68 54 01 02 c0       	push   0xc0020154
c0009408:	e8 10 77 00 00       	call   c0010b1d <KePanic(char const*)>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	eb 92                	jmp    c00093a4 <UnixFile::~UnixFile()+0x24>
c0009412:	90                   	nop
c0009413:	eb 01                	jmp    c0009416 <UnixFile::~UnixFile()+0x96>
c0009415:	90                   	nop
c0009416:	90                   	nop
c0009417:	83 c4 1c             	add    esp,0x1c
c000941a:	c3                   	ret    
c000941b:	90                   	nop

c000941c <UnixFile::~UnixFile()>:
c000941c:	83 ec 0c             	sub    esp,0xc
c000941f:	83 ec 0c             	sub    esp,0xc
c0009422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009426:	e8 55 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	6a 0c                	push   0xc
c0009433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009437:	e8 c4 13 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	83 c4 0c             	add    esp,0xc
c0009442:	c3                   	ret    
c0009443:	90                   	nop

c0009444 <ReservedFilename::~ReservedFilename()>:
c0009444:	83 ec 0c             	sub    esp,0xc
c0009447:	ba 98 01 02 c0       	mov    edx,0xc0020198
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	89 10                	mov    DWORD PTR [eax],edx
c0009452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009456:	83 ec 0c             	sub    esp,0xc
c0009459:	50                   	push   eax
c000945a:	e8 21 ff ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	90                   	nop
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	83 ec 0c             	sub    esp,0xc
c000946e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009472:	e8 cd ff ff ff       	call   c0009444 <ReservedFilename::~ReservedFilename()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	83 ec 08             	sub    esp,0x8
c000947d:	6a 0c                	push   0xc
c000947f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009483:	e8 78 13 00 00       	call   c000a800 <operator delete(void*, unsigned long)>
c0009488:	83 c4 10             	add    esp,0x10
c000948b:	83 c4 0c             	add    esp,0xc
c000948e:	c3                   	ret    

c000948f <KeGetFileFromDescriptor(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 08             	sub    esp,0x8
c0009493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009497:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000949d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094a3:	7f 2c                	jg     c00094d1 <KeGetFileFromDescriptor(int)+0x42>
c00094a5:	83 ec 0c             	sub    esp,0xc
c00094a8:	68 98 4f 02 c0       	push   0xc0024f98
c00094ad:	e8 7a 58 01 00       	call   c001ed2c <LinkedList<UnixFile>::getFirstElement()>
c00094b2:	83 c4 10             	add    esp,0x10
c00094b5:	85 c0                	test   eax,eax
c00094b7:	75 04                	jne    c00094bd <KeGetFileFromDescriptor(int)+0x2e>
c00094b9:	31 c0                	xor    eax,eax
c00094bb:	eb 6e                	jmp    c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094c0:	74 69                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094c2:	52                   	push   edx
c00094c3:	52                   	push   edx
c00094c4:	50                   	push   eax
c00094c5:	68 98 4f 02 c0       	push   0xc0024f98
c00094ca:	e8 07 59 01 00       	call   c001edd6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094cf:	eb e1                	jmp    c00094b2 <KeGetFileFromDescriptor(int)+0x23>
c00094d1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094d7:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094dc:	74 4d                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094de:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094e4:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c00094e9:	74 40                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094eb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094f1:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c00094f6:	74 33                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c00094f8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00094fe:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009503:	74 26                	je     c000952b <KeGetFileFromDescriptor(int)+0x9c>
c0009505:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000950b:	83 f8 08             	cmp    eax,0x8
c000950e:	77 09                	ja     c0009519 <KeGetFileFromDescriptor(int)+0x8a>
c0009510:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009517:	eb 12                	jmp    c000952b <KeGetFileFromDescriptor(int)+0x9c>
c0009519:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000951f:	83 fb 08             	cmp    ebx,0x8
c0009522:	77 95                	ja     c00094b9 <KeGetFileFromDescriptor(int)+0x2a>
c0009524:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000952b:	83 c4 08             	add    esp,0x8
c000952e:	5b                   	pop    ebx
c000952f:	c3                   	ret    

c0009530 <__static_initialization_and_destruction_0(int, int)>:
c0009530:	83 ec 0c             	sub    esp,0xc
c0009533:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009538:	75 34                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000953a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009542:	75 2a                	jne    c000956e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	68 98 4f 02 c0       	push   0xc0024f98
c000954c:	e8 c5 56 01 00       	call   c001ec16 <LinkedList<UnixFile>::LinkedList()>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	83 ec 04             	sub    esp,0x4
c0009557:	68 24 26 02 c0       	push   0xc0022624
c000955c:	68 98 4f 02 c0       	push   0xc0024f98
c0009561:	68 14 ec 01 c0       	push   0xc001ec14
c0009566:	e8 45 12 00 00       	call   c000a7b0 <__cxa_atexit>
c000956b:	83 c4 10             	add    esp,0x10
c000956e:	90                   	nop
c000956f:	83 c4 0c             	add    esp,0xc
c0009572:	c3                   	ret    

c0009573 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009573:	83 ec 0c             	sub    esp,0xc
c0009576:	83 ec 08             	sub    esp,0x8
c0009579:	68 ff ff 00 00       	push   0xffff
c000957e:	6a 01                	push   0x1
c0009580:	e8 ab ff ff ff       	call   c0009530 <__static_initialization_and_destruction_0(int, int)>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 c4 0c             	add    esp,0xc
c000958b:	c3                   	ret    

c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000958c:	53                   	push   ebx
c000958d:	8b 15 a8 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226a8
c0009593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000959b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095a1:	89 d8                	mov    eax,ebx
c00095a3:	d1 e8                	shr    eax,1
c00095a5:	01 d0                	add    eax,edx
c00095a7:	80 e3 01             	and    bl,0x1
c00095aa:	8a 10                	mov    dl,BYTE PTR [eax]
c00095ac:	75 09                	jne    c00095b7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ae:	83 e2 f0             	and    edx,0xfffffff0
c00095b1:	09 ca                	or     edx,ecx
c00095b3:	88 10                	mov    BYTE PTR [eax],dl
c00095b5:	5b                   	pop    ebx
c00095b6:	c3                   	ret    
c00095b7:	0f b6 c9             	movzx  ecx,cl
c00095ba:	83 e2 0f             	and    edx,0xf
c00095bd:	c1 e1 04             	shl    ecx,0x4
c00095c0:	09 ca                	or     edx,ecx
c00095c2:	88 10                	mov    BYTE PTR [eax],dl
c00095c4:	5b                   	pop    ebx
c00095c5:	c3                   	ret    

c00095c6 <Virt::getPageState(unsigned long)>:
c00095c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ca:	8b 0d a8 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226a8
c00095d0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095d6:	89 d0                	mov    eax,edx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	80 e2 01             	and    dl,0x1
c00095dd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095e0:	74 03                	je     c00095e5 <Virt::getPageState(unsigned long)+0x1f>
c00095e2:	c1 e8 04             	shr    eax,0x4
c00095e5:	83 e0 0f             	and    eax,0xf
c00095e8:	c3                   	ret    

c00095e9 <Virt::allocateKernelVirtualPages(int)>:
c00095e9:	55                   	push   ebp
c00095ea:	57                   	push   edi
c00095eb:	56                   	push   esi
c00095ec:	31 f6                	xor    esi,esi
c00095ee:	53                   	push   ebx
c00095ef:	31 db                	xor    ebx,ebx
c00095f1:	83 ec 1c             	sub    esp,0x1c
c00095f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00095f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00095fd:	8b 2d a4 26 02 c0    	mov    ebp,DWORD PTR ds:0xc00226a4
c0009603:	55                   	push   ebp
c0009604:	e8 bd ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009609:	5a                   	pop    edx
c000960a:	84 c0                	test   al,al
c000960c:	75 3d                	jne    c000964b <Virt::allocateKernelVirtualPages(int)+0x62>
c000960e:	85 db                	test   ebx,ebx
c0009610:	0f 44 f5             	cmove  esi,ebp
c0009613:	83 c3 01             	add    ebx,0x1
c0009616:	39 fb                	cmp    ebx,edi
c0009618:	74 5e                	je     c0009678 <Virt::allocateKernelVirtualPages(int)+0x8f>
c000961a:	83 c5 01             	add    ebp,0x1
c000961d:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009623:	76 33                	jbe    c0009658 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009625:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c000962a:	c7 05 a4 26 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00226a4,0xc8000
c0009634:	75 2a                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x77>
c0009636:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000963b:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009640:	55                   	push   ebp
c0009641:	e8 80 ff ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009646:	5a                   	pop    edx
c0009647:	84 c0                	test   al,al
c0009649:	74 c3                	je     c000960e <Virt::allocateKernelVirtualPages(int)+0x25>
c000964b:	83 c5 01             	add    ebp,0x1
c000964e:	31 db                	xor    ebx,ebx
c0009650:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009656:	77 cd                	ja     c0009625 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009658:	89 2d a4 26 02 c0    	mov    DWORD PTR ds:0xc00226a4,ebp
c000965e:	eb a3                	jmp    c0009603 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009660:	83 ec 0c             	sub    esp,0xc
c0009663:	68 ac 01 02 c0       	push   0xc00201ac
c0009668:	e8 b0 74 00 00       	call   c0010b1d <KePanic(char const*)>
c000966d:	8b 2d a4 26 02 c0    	mov    ebp,DWORD PTR ds:0xc00226a4
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	eb 8b                	jmp    c0009603 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009678:	89 35 a4 26 02 c0    	mov    DWORD PTR ds:0xc00226a4,esi
c000967e:	83 fb 01             	cmp    ebx,0x1
c0009681:	74 63                	je     c00096e6 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0009683:	85 ff                	test   edi,edi
c0009685:	74 41                	je     c00096c8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009687:	89 f0                	mov    eax,esi
c0009689:	31 db                	xor    ebx,ebx
c000968b:	8d 6f ff             	lea    ebp,[edi-0x1]
c000968e:	eb 16                	jmp    c00096a6 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0009690:	6a 01                	push   0x1
c0009692:	83 c3 01             	add    ebx,0x1
c0009695:	50                   	push   eax
c0009696:	e8 f1 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000969b:	39 fb                	cmp    ebx,edi
c000969d:	58                   	pop    eax
c000969e:	5a                   	pop    edx
c000969f:	74 27                	je     c00096c8 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096a1:	a1 a4 26 02 c0       	mov    eax,ds:0xc00226a4
c00096a6:	8d 50 01             	lea    edx,[eax+0x1]
c00096a9:	85 db                	test   ebx,ebx
c00096ab:	89 15 a4 26 02 c0    	mov    DWORD PTR ds:0xc00226a4,edx
c00096b1:	74 22                	je     c00096d5 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096b3:	39 dd                	cmp    ebp,ebx
c00096b5:	75 d9                	jne    c0009690 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096b7:	6a 03                	push   0x3
c00096b9:	83 c3 01             	add    ebx,0x1
c00096bc:	50                   	push   eax
c00096bd:	e8 ca fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c2:	39 fb                	cmp    ebx,edi
c00096c4:	59                   	pop    ecx
c00096c5:	58                   	pop    eax
c00096c6:	75 d9                	jne    c00096a1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096c8:	83 c4 1c             	add    esp,0x1c
c00096cb:	89 f0                	mov    eax,esi
c00096cd:	5b                   	pop    ebx
c00096ce:	c1 e0 0c             	shl    eax,0xc
c00096d1:	5e                   	pop    esi
c00096d2:	5f                   	pop    edi
c00096d3:	5d                   	pop    ebp
c00096d4:	c3                   	ret    
c00096d5:	6a 02                	push   0x2
c00096d7:	bb 01 00 00 00       	mov    ebx,0x1
c00096dc:	50                   	push   eax
c00096dd:	e8 aa fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e2:	58                   	pop    eax
c00096e3:	5a                   	pop    edx
c00096e4:	eb bb                	jmp    c00096a1 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096e6:	6a 04                	push   0x4
c00096e8:	56                   	push   esi
c00096e9:	8d 46 01             	lea    eax,[esi+0x1]
c00096ec:	a3 a4 26 02 c0       	mov    ds:0xc00226a4,eax
c00096f1:	e8 96 fe ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f6:	89 f0                	mov    eax,esi
c00096f8:	59                   	pop    ecx
c00096f9:	c1 e0 0c             	shl    eax,0xc
c00096fc:	5b                   	pop    ebx
c00096fd:	83 c4 1c             	add    esp,0x1c
c0009700:	5b                   	pop    ebx
c0009701:	5e                   	pop    esi
c0009702:	5f                   	pop    edi
c0009703:	5d                   	pop    ebp
c0009704:	c3                   	ret    

c0009705 <Virt::freeSwapfilePage(unsigned long)>:
c0009705:	53                   	push   ebx
c0009706:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c000970c:	b8 01 00 00 00       	mov    eax,0x1
c0009711:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009715:	d3 e0                	shl    eax,cl
c0009717:	89 cb                	mov    ebx,ecx
c0009719:	c1 eb 05             	shr    ebx,0x5
c000971c:	f7 d0                	not    eax
c000971e:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009721:	21 c1                	and    ecx,eax
c0009723:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009726:	5b                   	pop    ebx
c0009727:	c3                   	ret    

c0009728 <Virt::swapIDToSector(unsigned long)>:
c0009728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000972c:	8b 15 ac 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226ac
c0009732:	8b 0d b4 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226b4
c0009738:	0f af c2             	imul   eax,edx
c000973b:	01 c8                	add    eax,ecx
c000973d:	c3                   	ret    

c000973e <Virt::allocateSwapfilePage()>:
c000973e:	55                   	push   ebp
c000973f:	31 d2                	xor    edx,edx
c0009741:	57                   	push   edi
c0009742:	56                   	push   esi
c0009743:	53                   	push   ebx
c0009744:	83 ec 0c             	sub    esp,0xc
c0009747:	8b 1d b0 26 02 c0    	mov    ebx,DWORD PTR ds:0xc00226b0
c000974d:	8b 0d ac 26 02 c0    	mov    ecx,DWORD PTR ds:0xc00226ac
c0009753:	89 d8                	mov    eax,ebx
c0009755:	f7 f1                	div    ecx
c0009757:	39 cb                	cmp    ebx,ecx
c0009759:	72 2f                	jb     c000978a <Virt::allocateSwapfilePage()+0x4c>
c000975b:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009761:	8b 16                	mov    edx,DWORD PTR [esi]
c0009763:	f6 c2 01             	test   dl,0x1
c0009766:	74 3e                	je     c00097a6 <Virt::allocateSwapfilePage()+0x68>
c0009768:	31 c9                	xor    ecx,ecx
c000976a:	bf 01 00 00 00       	mov    edi,0x1
c000976f:	eb 12                	jmp    c0009783 <Virt::allocateSwapfilePage()+0x45>
c0009771:	89 ca                	mov    edx,ecx
c0009773:	89 fd                	mov    ebp,edi
c0009775:	c1 ea 05             	shr    edx,0x5
c0009778:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000977b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000977d:	d3 e5                	shl    ebp,cl
c000977f:	85 ea                	test   edx,ebp
c0009781:	74 2c                	je     c00097af <Virt::allocateSwapfilePage()+0x71>
c0009783:	83 c1 01             	add    ecx,0x1
c0009786:	39 c8                	cmp    eax,ecx
c0009788:	77 e7                	ja     c0009771 <Virt::allocateSwapfilePage()+0x33>
c000978a:	83 ec 0c             	sub    esp,0xc
c000978d:	68 40 04 02 c0       	push   0xc0020440
c0009792:	e8 86 73 00 00       	call   c0010b1d <KePanic(char const*)>
c0009797:	83 c4 10             	add    esp,0x10
c000979a:	31 c9                	xor    ecx,ecx
c000979c:	83 c4 0c             	add    esp,0xc
c000979f:	89 c8                	mov    eax,ecx
c00097a1:	5b                   	pop    ebx
c00097a2:	5e                   	pop    esi
c00097a3:	5f                   	pop    edi
c00097a4:	5d                   	pop    ebp
c00097a5:	c3                   	ret    
c00097a6:	89 f3                	mov    ebx,esi
c00097a8:	bd 01 00 00 00       	mov    ebp,0x1
c00097ad:	31 c9                	xor    ecx,ecx
c00097af:	09 ea                	or     edx,ebp
c00097b1:	89 c8                	mov    eax,ecx
c00097b3:	89 13                	mov    DWORD PTR [ebx],edx
c00097b5:	83 c4 0c             	add    esp,0xc
c00097b8:	5b                   	pop    ebx
c00097b9:	5e                   	pop    esi
c00097ba:	5f                   	pop    edi
c00097bb:	5d                   	pop    ebp
c00097bc:	c3                   	ret    

c00097bd <Virt::virtualMemorySetup()>:
c00097bd:	53                   	push   ebx
c00097be:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097c3:	6a 0f                	push   0xf
c00097c5:	53                   	push   ebx
c00097c6:	83 c3 01             	add    ebx,0x1
c00097c9:	e8 be fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ce:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097d4:	58                   	pop    eax
c00097d5:	5a                   	pop    edx
c00097d6:	75 eb                	jne    c00097c3 <Virt::virtualMemorySetup()+0x6>
c00097d8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097dd:	6a 00                	push   0x0
c00097df:	53                   	push   ebx
c00097e0:	83 c3 01             	add    ebx,0x1
c00097e3:	e8 a4 fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097ee:	59                   	pop    ecx
c00097ef:	58                   	pop    eax
c00097f0:	75 eb                	jne    c00097dd <Virt::virtualMemorySetup()+0x20>
c00097f2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00097f7:	6a 0f                	push   0xf
c00097f9:	53                   	push   ebx
c00097fa:	83 c3 01             	add    ebx,0x1
c00097fd:	e8 8a fd ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009802:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009808:	58                   	pop    eax
c0009809:	5a                   	pop    edx
c000980a:	75 eb                	jne    c00097f7 <Virt::virtualMemorySetup()+0x3a>
c000980c:	5b                   	pop    ebx
c000980d:	c3                   	ret    

c000980e <Virt::setupPageSwapping(int)>:
c000980e:	53                   	push   ebx
c000980f:	83 ec 0c             	sub    esp,0xc
c0009812:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009817:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000981b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009821:	8b 10                	mov    edx,DWORD PTR [eax]
c0009823:	53                   	push   ebx
c0009824:	68 57 04 02 c0       	push   0xc0020457
c0009829:	50                   	push   eax
c000982a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000982d:	c1 e3 0b             	shl    ebx,0xb
c0009830:	89 1d b0 26 02 c0    	mov    DWORD PTR ds:0xc00226b0,ebx
c0009836:	c1 eb 08             	shr    ebx,0x8
c0009839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000983c:	c6 05 b8 26 02 c0 43 	mov    BYTE PTR ds:0xc00226b8,0x43
c0009843:	c7 05 ac 26 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00226ac,0x8
c000984d:	a3 b4 26 02 c0       	mov    ds:0xc00226b4,eax
c0009852:	e8 74 e2 ff ff       	call   c0007acb <malloc>
c0009857:	31 d2                	xor    edx,edx
c0009859:	83 c4 0c             	add    esp,0xc
c000985c:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009861:	89 c1                	mov    ecx,eax
c0009863:	a1 b0 26 02 c0       	mov    eax,ds:0xc00226b0
c0009868:	f7 35 ac 26 02 c0    	div    DWORD PTR ds:0xc00226ac
c000986e:	c1 e8 05             	shr    eax,0x5
c0009871:	50                   	push   eax
c0009872:	6a 00                	push   0x0
c0009874:	51                   	push   ecx
c0009875:	e8 76 6c ff ff       	call   c00004f0 <memset>
c000987a:	83 c4 18             	add    esp,0x18
c000987d:	5b                   	pop    ebx
c000987e:	c3                   	ret    
c000987f:	90                   	nop

c0009880 <VAS::setCPUSpecific(unsigned long)>:
c0009880:	c3                   	ret    
c0009881:	90                   	nop

c0009882 <VAS::VAS(VAS*)>:
c0009882:	83 ec 0c             	sub    esp,0xc
c0009885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009889:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009894:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	68 cc 01 02 c0       	push   0xc00201cc
c00098a3:	e8 75 72 00 00       	call   c0010b1d <KePanic(char const*)>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	90                   	nop
c00098ac:	83 c4 0c             	add    esp,0xc
c00098af:	c3                   	ret    

c00098b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b4:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098b9:	89 c2                	mov    edx,eax
c00098bb:	c1 ea 16             	shr    edx,0x16
c00098be:	c1 e8 0a             	shr    eax,0xa
c00098c1:	83 f9 01             	cmp    ecx,0x1
c00098c4:	19 c9                	sbb    ecx,ecx
c00098c6:	25 fc 0f 00 00       	and    eax,0xffc
c00098cb:	c1 e2 0c             	shl    edx,0xc
c00098ce:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098d4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098db:	01 d0                	add    eax,edx
c00098dd:	c3                   	ret    

c00098de <VAS::getPageTableEntry(unsigned long)>:
c00098de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098e2:	89 ca                	mov    edx,ecx
c00098e4:	c1 ea 16             	shr    edx,0x16
c00098e7:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098ed:	c1 e9 0a             	shr    ecx,0xa
c00098f0:	c1 e0 0c             	shl    eax,0xc
c00098f3:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00098f9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00098fc:	c3                   	ret    

c00098fd <Virt::freeKernelVirtualPages(unsigned long)>:
c00098fd:	55                   	push   ebp
c00098fe:	57                   	push   edi
c00098ff:	bf 01 00 00 00       	mov    edi,0x1
c0009904:	56                   	push   esi
c0009905:	53                   	push   ebx
c0009906:	83 ec 1c             	sub    esp,0x1c
c0009909:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000990d:	c1 ee 0c             	shr    esi,0xc
c0009910:	eb 48                	jmp    c000995a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009912:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009917:	83 ec 08             	sub    esp,0x8
c000991a:	55                   	push   ebp
c000991b:	50                   	push   eax
c000991c:	e8 bd ff ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009921:	83 c4 10             	add    esp,0x10
c0009924:	8b 10                	mov    edx,DWORD PTR [eax]
c0009926:	f6 c6 04             	test   dh,0x4
c0009929:	75 70                	jne    c000999b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000992b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009931:	83 fb 04             	cmp    ebx,0x4
c0009934:	0f 84 8a 00 00 00    	je     c00099c4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000993a:	83 fb 02             	cmp    ebx,0x2
c000993d:	0f 84 9a 00 00 00    	je     c00099dd <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009943:	83 fb 03             	cmp    ebx,0x3
c0009946:	0f 84 be 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000994c:	83 fb 01             	cmp    ebx,0x1
c000994f:	0f 84 a2 00 00 00    	je     c00099f7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009955:	83 c6 01             	add    esi,0x1
c0009958:	31 ff                	xor    edi,edi
c000995a:	56                   	push   esi
c000995b:	89 f5                	mov    ebp,esi
c000995d:	e8 64 fc ff ff       	call   c00095c6 <Virt::getPageState(unsigned long)>
c0009962:	c1 e5 0c             	shl    ebp,0xc
c0009965:	5a                   	pop    edx
c0009966:	0f b6 d8             	movzx  ebx,al
c0009969:	85 db                	test   ebx,ebx
c000996b:	75 a5                	jne    c0009912 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000996d:	83 ec 0c             	sub    esp,0xc
c0009970:	68 6e 04 02 c0       	push   0xc002046e
c0009975:	e8 a3 71 00 00       	call   c0010b1d <KePanic(char const*)>
c000997a:	5a                   	pop    edx
c000997b:	59                   	pop    ecx
c000997c:	55                   	push   ebp
c000997d:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c0009983:	55                   	push   ebp
c0009984:	e8 55 ff ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009989:	83 c4 10             	add    esp,0x10
c000998c:	8b 10                	mov    edx,DWORD PTR [eax]
c000998e:	f6 c6 04             	test   dh,0x4
c0009991:	75 08                	jne    c000999b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009993:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009999:	eb ba                	jmp    c0009955 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c000999b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000999f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099a5:	83 ec 0c             	sub    esp,0xc
c00099a8:	52                   	push   edx
c00099a9:	e8 be e3 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	83 fb 04             	cmp    ebx,0x4
c00099b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099be:	0f 85 76 ff ff ff    	jne    c000993a <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099c4:	83 e7 01             	and    edi,0x1
c00099c7:	75 46                	jne    c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099c9:	c7 44 24 30 f0 01 02 c0 	mov    DWORD PTR [esp+0x30],0xc00201f0
c00099d1:	83 c4 1c             	add    esp,0x1c
c00099d4:	5b                   	pop    ebx
c00099d5:	5e                   	pop    esi
c00099d6:	5f                   	pop    edi
c00099d7:	5d                   	pop    ebp
c00099d8:	e9 40 71 00 00       	jmp    c0010b1d <KePanic(char const*)>
c00099dd:	83 e7 01             	and    edi,0x1
c00099e0:	75 15                	jne    c00099f7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099e2:	83 ec 0c             	sub    esp,0xc
c00099e5:	68 8a 04 02 c0       	push   0xc002048a
c00099ea:	e8 2e 71 00 00       	call   c0010b1d <KePanic(char const*)>
c00099ef:	83 c4 10             	add    esp,0x10
c00099f2:	e9 5e ff ff ff       	jmp    c0009955 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	6a 00                	push   0x0
c00099fc:	56                   	push   esi
c00099fd:	e8 8a fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 4b ff ff ff       	jmp    c0009955 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a0a:	83 e7 01             	and    edi,0x1
c0009a0d:	75 16                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a0f:	83 ec 08             	sub    esp,0x8
c0009a12:	6a 00                	push   0x0
c0009a14:	56                   	push   esi
c0009a15:	e8 72 fb ff ff       	call   c000958c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	83 c4 1c             	add    esp,0x1c
c0009a20:	5b                   	pop    ebx
c0009a21:	5e                   	pop    esi
c0009a22:	5f                   	pop    edi
c0009a23:	5d                   	pop    ebp
c0009a24:	c3                   	ret    
c0009a25:	c7 44 24 30 a6 04 02 c0 	mov    DWORD PTR [esp+0x30],0xc00204a6
c0009a2d:	83 c4 1c             	add    esp,0x1c
c0009a30:	5b                   	pop    ebx
c0009a31:	5e                   	pop    esi
c0009a32:	5f                   	pop    edi
c0009a33:	5d                   	pop    ebp
c0009a34:	e9 e4 70 00 00       	jmp    c0010b1d <KePanic(char const*)>
c0009a39:	90                   	nop

c0009a3a <VAS::freeAllocatedPages(unsigned long)>:
c0009a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a42:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a46:	74 09                	je     c0009a51 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a48:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a4c:	e9 ac fe ff ff       	jmp    c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0009a51:	c7 44 24 04 14 02 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020214
c0009a59:	e9 a0 0e 00 00       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>

c0009a5e <VAS::virtualToPhysical(unsigned long)>:
c0009a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a62:	50                   	push   eax
c0009a63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a67:	52                   	push   edx
c0009a68:	e8 71 fe ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009a6d:	59                   	pop    ecx
c0009a6e:	5a                   	pop    edx
c0009a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a71:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a76:	c3                   	ret    
c0009a77:	90                   	nop

c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a78:	55                   	push   ebp
c0009a79:	57                   	push   edi
c0009a7a:	56                   	push   esi
c0009a7b:	53                   	push   ebx
c0009a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a80:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a88:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a8c:	85 db                	test   ebx,ebx
c0009a8e:	7e 24                	jle    c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a90:	c1 e3 0c             	shl    ebx,0xc
c0009a93:	01 f3                	add    ebx,esi
c0009a95:	56                   	push   esi
c0009a96:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a9c:	55                   	push   ebp
c0009a9d:	e8 3c fe ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0009aa2:	5a                   	pop    edx
c0009aa3:	59                   	pop    ecx
c0009aa4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009aa6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009aaa:	21 f9                	and    ecx,edi
c0009aac:	09 d1                	or     ecx,edx
c0009aae:	39 f3                	cmp    ebx,esi
c0009ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0009ab2:	75 e1                	jne    c0009a95 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ab4:	5b                   	pop    ebx
c0009ab5:	5e                   	pop    esi
c0009ab6:	5f                   	pop    edi
c0009ab7:	5d                   	pop    ebp
c0009ab8:	c3                   	ret    
c0009ab9:	90                   	nop

c0009aba <VAS::VAS()>:
c0009aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad4:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009add:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009af3:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009af8:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009afd:	29 c2                	sub    edx,eax
c0009aff:	89 d0                	mov    eax,edx
c0009b01:	05 ff 0f 00 00       	add    eax,0xfff
c0009b06:	c1 e8 0c             	shr    eax,0xc
c0009b09:	89 c2                	mov    edx,eax
c0009b0b:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b10:	6a 04                	push   0x4
c0009b12:	6a ff                	push   0xffffffff
c0009b14:	52                   	push   edx
c0009b15:	50                   	push   eax
c0009b16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b1a:	e8 59 ff ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b1f:	83 c4 14             	add    esp,0x14
c0009b22:	90                   	nop
c0009b23:	c3                   	ret    

c0009b24 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b24:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b36:	75 01                	jne    c0009b39 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b38:	c3                   	ret    
c0009b39:	68 80 00 00 00       	push   0x80
c0009b3e:	6a ff                	push   0xffffffff
c0009b40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b44:	50                   	push   eax
c0009b45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b49:	52                   	push   edx
c0009b4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b4e:	51                   	push   ecx
c0009b4f:	e8 24 ff ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b54:	83 c4 14             	add    esp,0x14
c0009b57:	c3                   	ret    

c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b5c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b63:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b6b:	83 f8 01             	cmp    eax,0x1
c0009b6e:	19 c0                	sbb    eax,eax
c0009b70:	83 ca 03             	or     edx,0x3
c0009b73:	83 e0 fc             	and    eax,0xfffffffc
c0009b76:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b7d:	0f 20 d8             	mov    eax,cr3
c0009b80:	0f 22 d8             	mov    cr3,eax
c0009b83:	c3                   	ret    

c0009b84 <VAS::~VAS()>:
c0009b84:	83 ec 2c             	sub    esp,0x2c
c0009b87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b8f:	fa                   	cli    
c0009b90:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b95:	83 c0 01             	add    eax,0x1
c0009b98:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b9d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ba4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ba7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bb1:	6a 01                	push   0x1
c0009bb3:	50                   	push   eax
c0009bb4:	e8 9f ff ff ff       	call   c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bb9:	83 c4 0c             	add    esp,0xc
c0009bbc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bc4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bcc:	0f 8f d8 00 00 00    	jg     c0009caa <VAS::~VAS()+0x126>
c0009bd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bd6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bdd:	c1 e2 02             	shl    edx,0x2
c0009be0:	01 d0                	add    eax,edx
c0009be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bec:	83 e0 01             	and    eax,0x1
c0009bef:	0f 84 ab 00 00 00    	je     c0009ca0 <VAS::~VAS()+0x11c>
c0009bf5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bfd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c05:	7f 74                	jg     c0009c7b <VAS::~VAS()+0xf7>
c0009c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c0b:	c1 e0 0a             	shl    eax,0xa
c0009c0e:	89 c2                	mov    edx,eax
c0009c10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c14:	01 d0                	add    eax,edx
c0009c16:	c1 e0 0c             	shl    eax,0xc
c0009c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c27:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c31:	6a 01                	push   0x1
c0009c33:	50                   	push   eax
c0009c34:	e8 77 fc ff ff       	call   c00098b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c39:	83 c4 0c             	add    esp,0xc
c0009c3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4e:	25 01 04 00 00       	and    eax,0x401
c0009c53:	3d 01 04 00 00       	cmp    eax,0x401
c0009c58:	75 1a                	jne    c0009c74 <VAS::~VAS()+0xf0>
c0009c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c63:	83 ec 0c             	sub    esp,0xc
c0009c66:	50                   	push   eax
c0009c67:	e8 00 e1 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009c6c:	83 c4 10             	add    esp,0x10
c0009c6f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c74:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c79:	eb 82                	jmp    c0009bfd <VAS::~VAS()+0x79>
c0009c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7f:	25 00 04 00 00       	and    eax,0x400
c0009c84:	74 1a                	je     c0009ca0 <VAS::~VAS()+0x11c>
c0009c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c8f:	83 ec 0c             	sub    esp,0xc
c0009c92:	50                   	push   eax
c0009c93:	e8 d4 e0 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009ca5:	e9 1a ff ff ff       	jmp    c0009bc4 <VAS::~VAS()+0x40>
c0009caa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 43 fc ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cc4:	83 ec 0c             	sub    esp,0xc
c0009cc7:	50                   	push   eax
c0009cc8:	e8 9f e0 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cda:	83 e8 01             	sub    eax,0x1
c0009cdd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009ce2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ce7:	85 c0                	test   eax,eax
c0009ce9:	75 01                	jne    c0009cec <VAS::~VAS()+0x168>
c0009ceb:	fb                   	sti    
c0009cec:	90                   	nop
c0009ced:	83 c4 2c             	add    esp,0x2c
c0009cf0:	c3                   	ret    
c0009cf1:	90                   	nop

c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cf2:	55                   	push   ebp
c0009cf3:	57                   	push   edi
c0009cf4:	56                   	push   esi
c0009cf5:	53                   	push   ebx
c0009cf6:	83 ec 1c             	sub    esp,0x1c
c0009cf9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cfd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d05:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d0b:	77 08                	ja     c0009d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d0d:	0f 20 d8             	mov    eax,cr3
c0009d10:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d13:	75 43                	jne    c0009d58 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d15:	89 d8                	mov    eax,ebx
c0009d17:	09 f8                	or     eax,edi
c0009d19:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d1e:	75 53                	jne    c0009d73 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d23:	89 de                	mov    esi,ebx
c0009d25:	c1 ee 16             	shr    esi,0x16
c0009d28:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d2f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d33:	74 50                	je     c0009d85 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d39:	c1 eb 0a             	shr    ebx,0xa
c0009d3c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d42:	c1 e6 0c             	shl    esi,0xc
c0009d45:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d4b:	09 c7                	or     edi,eax
c0009d4d:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d50:	83 c4 1c             	add    esp,0x1c
c0009d53:	5b                   	pop    ebx
c0009d54:	5e                   	pop    esi
c0009d55:	5f                   	pop    edi
c0009d56:	5d                   	pop    ebp
c0009d57:	c3                   	ret    
c0009d58:	83 ec 0c             	sub    esp,0xc
c0009d5b:	68 38 02 02 c0       	push   0xc0020238
c0009d60:	e8 99 0b 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0009d65:	89 d8                	mov    eax,ebx
c0009d67:	83 c4 10             	add    esp,0x10
c0009d6a:	09 f8                	or     eax,edi
c0009d6c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d71:	74 ad                	je     c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d73:	83 ec 0c             	sub    esp,0xc
c0009d76:	68 a0 02 02 c0       	push   0xc00202a0
c0009d7b:	e8 9d 6d 00 00       	call   c0010b1d <KePanic(char const*)>
c0009d80:	83 c4 10             	add    esp,0x10
c0009d83:	eb 9b                	jmp    c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d89:	e8 47 e0 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009d8e:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d94:	83 ec 0c             	sub    esp,0xc
c0009d97:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d9f:	6a 01                	push   0x1
c0009da1:	e8 43 f8 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009da6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dad:	6a 01                	push   0x1
c0009daf:	50                   	push   eax
c0009db0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009db4:	52                   	push   edx
c0009db5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009db9:	51                   	push   ecx
c0009dba:	e8 3d 01 00 00       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dbf:	83 c4 1c             	add    esp,0x1c
c0009dc2:	68 00 10 00 00       	push   0x1000
c0009dc7:	6a 00                	push   0x0
c0009dc9:	50                   	push   eax
c0009dca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dce:	e8 1d 67 ff ff       	call   c00004f0 <memset>
c0009dd3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dd7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dda:	e8 1e fb ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0009ddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009de3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009ded:	0d 07 04 00 00       	or     eax,0x407
c0009df2:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009df5:	e9 3b ff ff ff       	jmp    c0009d35 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009dfa <VAS::allocatePages(int, int)>:
c0009dfa:	55                   	push   ebp
c0009dfb:	57                   	push   edi
c0009dfc:	56                   	push   esi
c0009dfd:	53                   	push   ebx
c0009dfe:	83 ec 1c             	sub    esp,0x1c
c0009e01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e09:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e0d:	75 75                	jne    c0009e84 <VAS::allocatePages(int, int)+0x8a>
c0009e0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e16:	85 c0                	test   eax,eax
c0009e18:	74 49                	je     c0009e63 <VAS::allocatePages(int, int)+0x69>
c0009e1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e1e:	89 d5                	mov    ebp,edx
c0009e20:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e24:	c1 e5 0c             	shl    ebp,0xc
c0009e27:	01 dd                	add    ebp,ebx
c0009e29:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e2c:	81 cf 00 04 00 00    	or     edi,0x400
c0009e32:	85 d2                	test   edx,edx
c0009e34:	7e 1b                	jle    c0009e51 <VAS::allocatePages(int, int)+0x57>
c0009e36:	e8 9a df ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009e3b:	57                   	push   edi
c0009e3c:	53                   	push   ebx
c0009e3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e43:	50                   	push   eax
c0009e44:	56                   	push   esi
c0009e45:	e8 a8 fe ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	39 dd                	cmp    ebp,ebx
c0009e4f:	75 e5                	jne    c0009e36 <VAS::allocatePages(int, int)+0x3c>
c0009e51:	0f 20 d8             	mov    eax,cr3
c0009e54:	0f 22 d8             	mov    cr3,eax
c0009e57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e5b:	83 c4 1c             	add    esp,0x1c
c0009e5e:	5b                   	pop    ebx
c0009e5f:	5e                   	pop    esi
c0009e60:	5f                   	pop    edi
c0009e61:	5d                   	pop    ebp
c0009e62:	c3                   	ret    
c0009e63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e67:	83 ec 0c             	sub    esp,0xc
c0009e6a:	68 c4 02 02 c0       	push   0xc00202c4
c0009e6f:	e8 a9 6c 00 00       	call   c0010b1d <KePanic(char const*)>
c0009e74:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e82:	eb 96                	jmp    c0009e1a <VAS::allocatePages(int, int)+0x20>
c0009e84:	83 ec 0c             	sub    esp,0xc
c0009e87:	52                   	push   edx
c0009e88:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e8c:	e8 58 f7 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009e91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e95:	83 c4 10             	add    esp,0x10
c0009e98:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009e9d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ea1:	77 38                	ja     c0009edb <VAS::allocatePages(int, int)+0xe1>
c0009ea3:	85 d2                	test   edx,edx
c0009ea5:	7e aa                	jle    c0009e51 <VAS::allocatePages(int, int)+0x57>
c0009ea7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eab:	c1 e2 0c             	shl    edx,0xc
c0009eae:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009eb2:	81 cf 00 04 00 00    	or     edi,0x400
c0009eb8:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ebb:	e8 15 df ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009ec0:	57                   	push   edi
c0009ec1:	53                   	push   ebx
c0009ec2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec8:	50                   	push   eax
c0009ec9:	56                   	push   esi
c0009eca:	e8 23 fe ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ecf:	83 c4 10             	add    esp,0x10
c0009ed2:	39 dd                	cmp    ebp,ebx
c0009ed4:	75 e5                	jne    c0009ebb <VAS::allocatePages(int, int)+0xc1>
c0009ed6:	e9 76 ff ff ff       	jmp    c0009e51 <VAS::allocatePages(int, int)+0x57>
c0009edb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ee0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ee6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009eed:	74 b4                	je     c0009ea3 <VAS::allocatePages(int, int)+0xa9>
c0009eef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ef3:	80 cc 01             	or     ah,0x1
c0009ef6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009efa:	eb a7                	jmp    c0009ea3 <VAS::allocatePages(int, int)+0xa9>

c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009efc:	55                   	push   ebp
c0009efd:	57                   	push   edi
c0009efe:	56                   	push   esi
c0009eff:	53                   	push   ebx
c0009f00:	83 ec 1c             	sub    esp,0x1c
c0009f03:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f0f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f13:	85 db                	test   ebx,ebx
c0009f15:	7e 2c                	jle    c0009f43 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f17:	c1 e3 0c             	shl    ebx,0xc
c0009f1a:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f1d:	89 f3                	mov    ebx,esi
c0009f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f23:	55                   	push   ebp
c0009f24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f28:	29 f2                	sub    edx,esi
c0009f2a:	01 da                	add    edx,ebx
c0009f2c:	52                   	push   edx
c0009f2d:	53                   	push   ebx
c0009f2e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f34:	57                   	push   edi
c0009f35:	e8 b8 fd ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f3a:	83 c4 10             	add    esp,0x10
c0009f3d:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f41:	75 e0                	jne    c0009f23 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f43:	0f 20 d8             	mov    eax,cr3
c0009f46:	0f 22 d8             	mov    cr3,eax
c0009f49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f4d:	83 c4 1c             	add    esp,0x1c
c0009f50:	5b                   	pop    ebx
c0009f51:	5e                   	pop    esi
c0009f52:	5f                   	pop    edi
c0009f53:	5d                   	pop    ebp
c0009f54:	c3                   	ret    
c0009f55:	90                   	nop

c0009f56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	53                   	push   ebx
c0009f5a:	83 ec 1c             	sub    esp,0x1c
c0009f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f65:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f71:	09 d8                	or     eax,ebx
c0009f73:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f78:	75 4b                	jne    c0009fc5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f7a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f7d:	89 de                	mov    esi,ebx
c0009f7f:	c1 ee 16             	shr    esi,0x16
c0009f82:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f89:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f8d:	74 48                	je     c0009fd7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f8f:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009f94:	c1 eb 0a             	shr    ebx,0xa
c0009f97:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f9b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009f9f:	83 ff 01             	cmp    edi,0x1
c0009fa2:	19 c0                	sbb    eax,eax
c0009fa4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009faa:	c1 e6 0c             	shl    esi,0xc
c0009fad:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fb2:	01 f3                	add    ebx,esi
c0009fb4:	09 ca                	or     edx,ecx
c0009fb6:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fbd:	83 c4 1c             	add    esp,0x1c
c0009fc0:	5b                   	pop    ebx
c0009fc1:	5e                   	pop    esi
c0009fc2:	5f                   	pop    edi
c0009fc3:	5d                   	pop    ebp
c0009fc4:	c3                   	ret    
c0009fc5:	83 ec 0c             	sub    esp,0xc
c0009fc8:	68 f0 02 02 c0       	push   0xc00202f0
c0009fcd:	e8 4b 6b 00 00       	call   c0010b1d <KePanic(char const*)>
c0009fd2:	83 c4 10             	add    esp,0x10
c0009fd5:	eb a3                	jmp    c0009f7a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fd7:	e8 f9 dd ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0009fdc:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009fe2:	83 ec 0c             	sub    esp,0xc
c0009fe5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009fe9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009fed:	6a 01                	push   0x1
c0009fef:	e8 f5 f5 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0009ff4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ffb:	6a 01                	push   0x1
c0009ffd:	50                   	push   eax
c0009ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a002:	50                   	push   eax
c000a003:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a007:	51                   	push   ecx
c000a008:	e8 ef fe ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a00d:	83 c4 1c             	add    esp,0x1c
c000a010:	68 00 10 00 00       	push   0x1000
c000a015:	6a 00                	push   0x0
c000a017:	50                   	push   eax
c000a018:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a01c:	e8 cf 64 ff ff       	call   c00004f0 <memset>
c000a021:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a025:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a028:	e8 d0 f8 ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c000a02d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a031:	83 c4 10             	add    esp,0x10
c000a034:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a037:	81 ca 07 04 00 00    	or     edx,0x407
c000a03d:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a040:	e9 4a ff ff ff       	jmp    c0009f8f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a045:	90                   	nop

c000a046 <VAS::VAS(bool)>:
c000a046:	53                   	push   ebx
c000a047:	83 ec 28             	sub    esp,0x28
c000a04a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a04e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a056:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a05d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a061:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a070:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a073:	e8 5d dd ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a078:	89 c2                	mov    edx,eax
c000a07a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a07e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a081:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a087:	83 ec 0c             	sub    esp,0xc
c000a08a:	6a 01                	push   0x1
c000a08c:	e8 58 f5 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a091:	83 c4 10             	add    esp,0x10
c000a094:	89 c2                	mov    edx,eax
c000a096:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a09d:	83 ec 0c             	sub    esp,0xc
c000a0a0:	6a 03                	push   0x3
c000a0a2:	6a 01                	push   0x1
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	53                   	push   ebx
c000a0a7:	e8 50 fe ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ac:	83 c4 20             	add    esp,0x20
c000a0af:	89 c2                	mov    edx,eax
c000a0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0b8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0c0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0c8:	7f 1d                	jg     c000a0e7 <VAS::VAS(bool)+0xa1>
c000a0ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0d5:	c1 e2 02             	shl    edx,0x2
c000a0d8:	01 d0                	add    eax,edx
c000a0da:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0e0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0e5:	eb d9                	jmp    c000a0c0 <VAS::VAS(bool)+0x7a>
c000a0e7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0ef:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a0f7:	7f 7e                	jg     c000a177 <VAS::VAS(bool)+0x131>
c000a0f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fd:	2d 00 02 00 00       	sub    eax,0x200
c000a102:	c1 e0 0c             	shl    eax,0xc
c000a105:	83 c8 05             	or     eax,0x5
c000a108:	89 c2                	mov    edx,eax
c000a10a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a10f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a115:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a11b:	83 e0 10             	and    eax,0x10
c000a11e:	0f b6 c0             	movzx  eax,al
c000a121:	85 c0                	test   eax,eax
c000a123:	74 07                	je     c000a12c <VAS::VAS(bool)+0xe6>
c000a125:	b8 00 01 00 00       	mov    eax,0x100
c000a12a:	eb 05                	jmp    c000a131 <VAS::VAS(bool)+0xeb>
c000a12c:	b8 00 00 00 00       	mov    eax,0x0
c000a131:	09 d0                	or     eax,edx
c000a133:	89 c1                	mov    ecx,eax
c000a135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a139:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a13c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a140:	c1 e2 02             	shl    edx,0x2
c000a143:	01 d0                	add    eax,edx
c000a145:	89 ca                	mov    edx,ecx
c000a147:	89 10                	mov    DWORD PTR [eax],edx
c000a149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a14d:	2d 40 03 00 00       	sub    eax,0x340
c000a152:	83 f8 7f             	cmp    eax,0x7f
c000a155:	77 16                	ja     c000a16d <VAS::VAS(bool)+0x127>
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a16d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a172:	e9 78 ff ff ff       	jmp    c000a0ef <VAS::VAS(bool)+0xa9>
c000a177:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a17c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a182:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a188:	83 e0 10             	and    eax,0x10
c000a18b:	0f b6 c0             	movzx  eax,al
c000a18e:	85 c0                	test   eax,eax
c000a190:	74 07                	je     c000a199 <VAS::VAS(bool)+0x153>
c000a192:	b8 03 41 00 00       	mov    eax,0x4103
c000a197:	eb 05                	jmp    c000a19e <VAS::VAS(bool)+0x158>
c000a199:	b8 03 40 00 00       	mov    eax,0x4003
c000a19e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1a2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1a5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1ab:	89 02                	mov    DWORD PTR [edx],eax
c000a1ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1b1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1b4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a1b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1bf:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1c5:	83 e0 10             	and    eax,0x10
c000a1c8:	0f b6 c0             	movzx  eax,al
c000a1cb:	85 c0                	test   eax,eax
c000a1cd:	74 07                	je     c000a1d6 <VAS::VAS(bool)+0x190>
c000a1cf:	b8 00 01 00 00       	mov    eax,0x100
c000a1d4:	eb 05                	jmp    c000a1db <VAS::VAS(bool)+0x195>
c000a1d6:	b8 00 00 00 00       	mov    eax,0x0
c000a1db:	09 c2                	or     edx,eax
c000a1dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1e4:	05 fc 0f 00 00       	add    eax,0xffc
c000a1e9:	83 ca 03             	or     edx,0x3
c000a1ec:	89 10                	mov    DWORD PTR [eax],edx
c000a1ee:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a1f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1f9:	83 ec 0c             	sub    esp,0xc
c000a1fc:	50                   	push   eax
c000a1fd:	e8 c6 20 00 00       	call   c000c2c8 <Device::getName()>
c000a202:	83 c4 10             	add    esp,0x10
c000a205:	83 ec 08             	sub    esp,0x8
c000a208:	68 c0 04 02 c0       	push   0xc00204c0
c000a20d:	50                   	push   eax
c000a20e:	e8 6d 65 ff ff       	call   c0000780 <strcmp>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	85 c0                	test   eax,eax
c000a218:	0f 94 c0             	sete   al
c000a21b:	0f b6 c0             	movzx  eax,al
c000a21e:	85 c0                	test   eax,eax
c000a220:	74 68                	je     c000a28a <VAS::VAS(bool)+0x244>
c000a222:	fa                   	cli    
c000a223:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a228:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a22e:	05 7c 09 00 00       	add    eax,0x97c
c000a233:	83 ec 0c             	sub    esp,0xc
c000a236:	50                   	push   eax
c000a237:	e8 8a d3 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a244:	89 c3                	mov    ebx,eax
c000a246:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a24b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a251:	05 7c 09 00 00       	add    eax,0x97c
c000a256:	83 ec 0c             	sub    esp,0xc
c000a259:	50                   	push   eax
c000a25a:	e8 67 d3 ff ff       	call   c00075c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25f:	83 c4 10             	add    esp,0x10
c000a262:	83 ec 08             	sub    esp,0x8
c000a265:	50                   	push   eax
c000a266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a26a:	e8 6f f6 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a26f:	83 c4 10             	add    esp,0x10
c000a272:	8b 00                	mov    eax,DWORD PTR [eax]
c000a274:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a279:	6a 11                	push   0x11
c000a27b:	53                   	push   ebx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a281:	e8 6c fa ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a286:	83 c4 10             	add    esp,0x10
c000a289:	fb                   	sti    
c000a28a:	90                   	nop
c000a28b:	83 c4 28             	add    esp,0x28
c000a28e:	5b                   	pop    ebx
c000a28f:	c3                   	ret    

c000a290 <VAS::evict(unsigned long)>:
c000a290:	55                   	push   ebp
c000a291:	57                   	push   edi
c000a292:	56                   	push   esi
c000a293:	53                   	push   ebx
c000a294:	83 ec 1c             	sub    esp,0x1c
c000a297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a29b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a29f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2a3:	e8 96 f4 ff ff       	call   c000973e <Virt::allocateSwapfilePage()>
c000a2a8:	89 c7                	mov    edi,eax
c000a2aa:	a1 ac 26 02 c0       	mov    eax,ds:0xc00226ac
c000a2af:	85 c0                	test   eax,eax
c000a2b1:	7e 40                	jle    c000a2f3 <VAS::evict(unsigned long)+0x63>
c000a2b3:	89 ee                	mov    esi,ebp
c000a2b5:	31 db                	xor    ebx,ebx
c000a2b7:	83 ec 0c             	sub    esp,0xc
c000a2ba:	57                   	push   edi
c000a2bb:	e8 68 f4 ff ff       	call   c0009728 <Virt::swapIDToSector(unsigned long)>
c000a2c0:	31 d2                	xor    edx,edx
c000a2c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2c5:	81 c6 00 02 00 00    	add    esi,0x200
c000a2cb:	6a 01                	push   0x1
c000a2cd:	52                   	push   edx
c000a2ce:	01 d8                	add    eax,ebx
c000a2d0:	83 c3 01             	add    ebx,0x1
c000a2d3:	50                   	push   eax
c000a2d4:	0f be 05 b8 26 02 c0 	movsx  eax,BYTE PTR ds:0xc00226b8
c000a2db:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a2e2:	50                   	push   eax
c000a2e3:	e8 a2 31 00 00       	call   c000d48a <LogicalDisk::write(unsigned long long, int, void*)>
c000a2e8:	83 c4 20             	add    esp,0x20
c000a2eb:	39 1d ac 26 02 c0    	cmp    DWORD PTR ds:0xc00226ac,ebx
c000a2f1:	7f c4                	jg     c000a2b7 <VAS::evict(unsigned long)+0x27>
c000a2f3:	c1 e7 0c             	shl    edi,0xc
c000a2f6:	83 ec 08             	sub    esp,0x8
c000a2f9:	55                   	push   ebp
c000a2fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2fe:	50                   	push   eax
c000a2ff:	e8 da f5 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a304:	8b 10                	mov    edx,DWORD PTR [eax]
c000a306:	89 d3                	mov    ebx,edx
c000a308:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a30e:	09 d7                	or     edi,edx
c000a310:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a316:	89 38                	mov    DWORD PTR [eax],edi
c000a318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a31b:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a321:	83 c2 01             	add    edx,0x1
c000a324:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a32a:	e8 3d da ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c000a32f:	0f 20 d8             	mov    eax,cr3
c000a332:	0f 22 d8             	mov    cr3,eax
c000a335:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a33b:	51                   	push   ecx
c000a33c:	55                   	push   ebp
c000a33d:	53                   	push   ebx
c000a33e:	68 14 03 02 c0       	push   0xc0020314
c000a343:	e8 b6 05 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a348:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a34d:	c7 44 24 50 ce 04 02 c0 	mov    DWORD PTR [esp+0x50],0xc00204ce
c000a355:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a359:	8d 50 01             	lea    edx,[eax+0x1]
c000a35c:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a362:	83 c4 3c             	add    esp,0x3c
c000a365:	5b                   	pop    ebx
c000a366:	5e                   	pop    esi
c000a367:	5f                   	pop    edi
c000a368:	5d                   	pop    ebp
c000a369:	e9 90 05 00 00       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>

c000a36e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a36e:	55                   	push   ebp
c000a36f:	57                   	push   edi
c000a370:	56                   	push   esi
c000a371:	53                   	push   ebx
c000a372:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a378:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a37f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a385:	77 78                	ja     c000a3ff <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a387:	83 ec 08             	sub    esp,0x8
c000a38a:	53                   	push   ebx
c000a38b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a391:	68 f1 04 02 c0       	push   0xc00204f1
c000a396:	e8 63 05 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a39b:	58                   	pop    eax
c000a39c:	5a                   	pop    edx
c000a39d:	53                   	push   ebx
c000a39e:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3a5:	51                   	push   ecx
c000a3a6:	e8 33 f5 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a3ab:	83 c4 10             	add    esp,0x10
c000a3ae:	85 c0                	test   eax,eax
c000a3b0:	89 c5                	mov    ebp,eax
c000a3b2:	0f 95 c0             	setne  al
c000a3b5:	85 db                	test   ebx,ebx
c000a3b7:	0f 95 c2             	setne  dl
c000a3ba:	21 d0                	and    eax,edx
c000a3bc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3c0:	a8 01                	test   al,0x1
c000a3c2:	75 0f                	jne    c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3c4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3d6:	f6 c4 02             	test   ah,0x2
c000a3d9:	75 39                	jne    c000a414 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3db:	89 c2                	mov    edx,eax
c000a3dd:	81 e2 01 04 00 00    	and    edx,0x401
c000a3e3:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3e9:	74 73                	je     c000a45e <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3eb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3f0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3f4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3fa:	5b                   	pop    ebx
c000a3fb:	5e                   	pop    esi
c000a3fc:	5f                   	pop    edi
c000a3fd:	5d                   	pop    ebp
c000a3fe:	c3                   	ret    
c000a3ff:	83 ec 0c             	sub    esp,0xc
c000a402:	68 df 04 02 c0       	push   0xc00204df
c000a407:	e8 11 67 00 00       	call   c0010b1d <KePanic(char const*)>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	e9 73 ff ff ff       	jmp    c000a387 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a414:	83 ec 0c             	sub    esp,0xc
c000a417:	89 de                	mov    esi,ebx
c000a419:	68 44 03 02 c0       	push   0xc0020344
c000a41e:	e8 db 04 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a423:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a427:	e8 a9 d9 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a42c:	ba 00 10 00 00       	mov    edx,0x1000
c000a431:	89 d1                	mov    ecx,edx
c000a433:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a435:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a438:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a43e:	09 c8                	or     eax,ecx
c000a440:	83 c8 02             	or     eax,0x2
c000a443:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a446:	0f 20 d8             	mov    eax,cr3
c000a449:	0f 22 d8             	mov    cr3,eax
c000a44c:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a450:	89 df                	mov    edi,ebx
c000a452:	89 d1                	mov    ecx,edx
c000a454:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	e9 66 ff ff ff       	jmp    c000a3c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a45e:	c1 e8 0c             	shr    eax,0xc
c000a461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a465:	e8 6b d9 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a46a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a46d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a473:	09 c2                	or     edx,eax
c000a475:	81 ca 01 08 00 00    	or     edx,0x801
c000a47b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a47e:	a1 ac 26 02 c0       	mov    eax,ds:0xc00226ac
c000a483:	85 c0                	test   eax,eax
c000a485:	7e 44                	jle    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a487:	89 df                	mov    edi,ebx
c000a489:	31 f6                	xor    esi,esi
c000a48b:	83 ec 0c             	sub    esp,0xc
c000a48e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a492:	51                   	push   ecx
c000a493:	e8 90 f2 ff ff       	call   c0009728 <Virt::swapIDToSector(unsigned long)>
c000a498:	31 d2                	xor    edx,edx
c000a49a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a49d:	81 c7 00 02 00 00    	add    edi,0x200
c000a4a3:	6a 01                	push   0x1
c000a4a5:	52                   	push   edx
c000a4a6:	01 f0                	add    eax,esi
c000a4a8:	83 c6 01             	add    esi,0x1
c000a4ab:	50                   	push   eax
c000a4ac:	0f be 05 b8 26 02 c0 	movsx  eax,BYTE PTR ds:0xc00226b8
c000a4b3:	8b 2c 85 1c 73 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4ba:	55                   	push   ebp
c000a4bb:	e8 5e 2f 00 00       	call   c000d41e <LogicalDisk::read(unsigned long long, int, void*)>
c000a4c0:	83 c4 20             	add    esp,0x20
c000a4c3:	39 35 ac 26 02 c0    	cmp    DWORD PTR ds:0xc00226ac,esi
c000a4c9:	7f c0                	jg     c000a48b <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4cb:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a4d0:	83 ec 04             	sub    esp,0x4
c000a4d3:	83 e8 01             	sub    eax,0x1
c000a4d6:	50                   	push   eax
c000a4d7:	53                   	push   ebx
c000a4d8:	68 04 05 02 c0       	push   0xc0020504
c000a4dd:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a4e2:	e8 17 04 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a4e7:	58                   	pop    eax
c000a4e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4ec:	52                   	push   edx
c000a4ed:	e8 13 f2 ff ff       	call   c0009705 <Virt::freeSwapfilePage(unsigned long)>
c000a4f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4f7:	83 c4 10             	add    esp,0x10
c000a4fa:	83 e8 01             	sub    eax,0x1
c000a4fd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a502:	85 c0                	test   eax,eax
c000a504:	75 01                	jne    c000a507 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a506:	fb                   	sti    
c000a507:	0f 20 d8             	mov    eax,cr3
c000a50a:	0f 22 d8             	mov    cr3,eax
c000a50d:	e9 b2 fe ff ff       	jmp    c000a3c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a512 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a512:	55                   	push   ebp
c000a513:	57                   	push   edi
c000a514:	56                   	push   esi
c000a515:	53                   	push   ebx
c000a516:	83 ec 28             	sub    esp,0x28
c000a519:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a51d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a521:	50                   	push   eax
c000a522:	e8 c2 f0 ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000a527:	83 c4 0c             	add    esp,0xc
c000a52a:	6a 07                	push   0x7
c000a52c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a530:	52                   	push   edx
c000a531:	89 c5                	mov    ebp,eax
c000a533:	53                   	push   ebx
c000a534:	e8 c1 f8 ff ff       	call   c0009dfa <VAS::allocatePages(int, int)>
c000a539:	83 c4 10             	add    esp,0x10
c000a53c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a540:	89 c7                	mov    edi,eax
c000a542:	85 c9                	test   ecx,ecx
c000a544:	74 2f                	je     c000a575 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a546:	31 f6                	xor    esi,esi
c000a548:	e8 88 d8 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a54d:	83 c6 01             	add    esi,0x1
c000a550:	6a 03                	push   0x3
c000a552:	55                   	push   ebp
c000a553:	50                   	push   eax
c000a554:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a558:	53                   	push   ebx
c000a559:	e8 94 f7 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a55e:	6a 07                	push   0x7
c000a560:	57                   	push   edi
c000a561:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a565:	50                   	push   eax
c000a566:	53                   	push   ebx
c000a567:	e8 86 f7 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56c:	83 c4 20             	add    esp,0x20
c000a56f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a573:	75 d3                	jne    c000a548 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a575:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a579:	89 28                	mov    DWORD PTR [eax],ebp
c000a57b:	83 c4 1c             	add    esp,0x1c
c000a57e:	89 f8                	mov    eax,edi
c000a580:	5b                   	pop    ebx
c000a581:	5e                   	pop    esi
c000a582:	5f                   	pop    edi
c000a583:	5d                   	pop    ebp
c000a584:	c3                   	ret    
c000a585:	90                   	nop

c000a586 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a586:	53                   	push   ebx
c000a587:	83 ec 14             	sub    esp,0x14
c000a58a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a58e:	68 64 03 02 c0       	push   0xc0020364
c000a593:	e8 66 03 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a598:	c7 04 24 c4 03 02 c0 	mov    DWORD PTR [esp],0xc00203c4
c000a59f:	e8 5a 03 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a5a4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5a8:	83 c4 18             	add    esp,0x18
c000a5ab:	5b                   	pop    ebx
c000a5ac:	e9 4c f3 ff ff       	jmp    c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c000a5b1:	90                   	nop

c000a5b2 <VAS::scanForEviction()>:
c000a5b2:	57                   	push   edi
c000a5b3:	56                   	push   esi
c000a5b4:	31 f6                	xor    esi,esi
c000a5b6:	53                   	push   ebx
c000a5b7:	83 ec 10             	sub    esp,0x10
c000a5ba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5be:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5c1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5c7:	75 0e                	jne    c000a5d7 <VAS::scanForEviction()+0x25>
c000a5c9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5cc:	89 da                	mov    edx,ebx
c000a5ce:	c1 ea 16             	shr    edx,0x16
c000a5d1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5d5:	74 57                	je     c000a62e <VAS::scanForEviction()+0x7c>
c000a5d7:	53                   	push   ebx
c000a5d8:	57                   	push   edi
c000a5d9:	e8 00 f3 ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c000a5de:	5a                   	pop    edx
c000a5df:	59                   	pop    ecx
c000a5e0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5e2:	89 d1                	mov    ecx,edx
c000a5e4:	c1 e9 0c             	shr    ecx,0xc
c000a5e7:	74 10                	je     c000a5f9 <VAS::scanForEviction()+0x47>
c000a5e9:	89 d1                	mov    ecx,edx
c000a5eb:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5f1:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a5f7:	74 40                	je     c000a639 <VAS::scanForEviction()+0x87>
c000a5f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a5ff:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a605:	76 2d                	jbe    c000a634 <VAS::scanForEviction()+0x82>
c000a607:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a60e:	83 c6 01             	add    esi,0x1
c000a611:	83 fe 03             	cmp    esi,0x3
c000a614:	74 32                	je     c000a648 <VAS::scanForEviction()+0x96>
c000a616:	31 db                	xor    ebx,ebx
c000a618:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a61e:	75 b7                	jne    c000a5d7 <VAS::scanForEviction()+0x25>
c000a620:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a623:	89 da                	mov    edx,ebx
c000a625:	c1 ea 16             	shr    edx,0x16
c000a628:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a62c:	75 a9                	jne    c000a5d7 <VAS::scanForEviction()+0x25>
c000a62e:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a634:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a637:	eb 88                	jmp    c000a5c1 <VAS::scanForEviction()+0xf>
c000a639:	f6 c2 20             	test   dl,0x20
c000a63c:	74 13                	je     c000a651 <VAS::scanForEviction()+0x9f>
c000a63e:	83 e2 df             	and    edx,0xffffffdf
c000a641:	89 10                	mov    DWORD PTR [eax],edx
c000a643:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a646:	eb b1                	jmp    c000a5f9 <VAS::scanForEviction()+0x47>
c000a648:	83 c4 10             	add    esp,0x10
c000a64b:	31 c0                	xor    eax,eax
c000a64d:	5b                   	pop    ebx
c000a64e:	5e                   	pop    esi
c000a64f:	5f                   	pop    edi
c000a650:	c3                   	ret    
c000a651:	89 d0                	mov    eax,edx
c000a653:	83 ec 08             	sub    esp,0x8
c000a656:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a65b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a65f:	53                   	push   ebx
c000a660:	68 19 05 02 c0       	push   0xc0020519
c000a665:	e8 94 02 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a66a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a66d:	58                   	pop    eax
c000a66e:	5a                   	pop    edx
c000a66f:	51                   	push   ecx
c000a670:	57                   	push   edi
c000a671:	e8 1a fc ff ff       	call   c000a290 <VAS::evict(unsigned long)>
c000a676:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a679:	5b                   	pop    ebx
c000a67a:	5e                   	pop    esi
c000a67b:	50                   	push   eax
c000a67c:	68 2d 05 02 c0       	push   0xc002052d
c000a681:	e8 78 02 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a686:	58                   	pop    eax
c000a687:	5a                   	pop    edx
c000a688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a68c:	50                   	push   eax
c000a68d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a691:	68 40 05 02 c0       	push   0xc0020540
c000a696:	e8 63 02 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a69b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a69e:	83 c4 10             	add    esp,0x10
c000a6a1:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6a7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	5b                   	pop    ebx
c000a6b2:	5e                   	pop    esi
c000a6b3:	5f                   	pop    edi
c000a6b4:	c3                   	ret    

c000a6b5 <mapVASFirstTime>:
c000a6b5:	55                   	push   ebp
c000a6b6:	57                   	push   edi
c000a6b7:	56                   	push   esi
c000a6b8:	53                   	push   ebx
c000a6b9:	83 ec 0c             	sub    esp,0xc
c000a6bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6c1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6c4:	83 fa 01             	cmp    edx,0x1
c000a6c7:	0f 84 cb 00 00 00    	je     c000a798 <mapVASFirstTime+0xe3>
c000a6cd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6d0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6d5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6da:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6dd:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6e3:	c1 e5 15             	shl    ebp,0x15
c000a6e6:	29 eb                	sub    ebx,ebp
c000a6e8:	29 ef                	sub    edi,ebp
c000a6ea:	e8 e6 d6 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a6ef:	83 ec 0c             	sub    esp,0xc
c000a6f2:	68 03 04 00 00       	push   0x403
c000a6f7:	6a 01                	push   0x1
c000a6f9:	53                   	push   ebx
c000a6fa:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a700:	50                   	push   eax
c000a701:	56                   	push   esi
c000a702:	e8 f5 f7 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a707:	83 c4 20             	add    esp,0x20
c000a70a:	39 fb                	cmp    ebx,edi
c000a70c:	75 dc                	jne    c000a6ea <mapVASFirstTime+0x35>
c000a70e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a713:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a718:	29 eb                	sub    ebx,ebp
c000a71a:	29 ef                	sub    edi,ebp
c000a71c:	e8 b4 d6 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c000a721:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a725:	83 fa 01             	cmp    edx,0x1
c000a728:	19 d2                	sbb    edx,edx
c000a72a:	83 ec 0c             	sub    esp,0xc
c000a72d:	83 e2 04             	and    edx,0x4
c000a730:	81 c2 03 04 00 00    	add    edx,0x403
c000a736:	52                   	push   edx
c000a737:	6a 01                	push   0x1
c000a739:	53                   	push   ebx
c000a73a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a740:	50                   	push   eax
c000a741:	56                   	push   esi
c000a742:	e8 b5 f7 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a747:	83 c4 20             	add    esp,0x20
c000a74a:	39 df                	cmp    edi,ebx
c000a74c:	75 ce                	jne    c000a71c <mapVASFirstTime+0x67>
c000a74e:	83 ec 0c             	sub    esp,0xc
c000a751:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a756:	6a 04                	push   0x4
c000a758:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a75e:	6a ff                	push   0xffffffff
c000a760:	c1 eb 0c             	shr    ebx,0xc
c000a763:	53                   	push   ebx
c000a764:	68 00 30 02 c0       	push   0xc0023000
c000a769:	56                   	push   esi
c000a76a:	e8 09 f3 ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a76f:	83 c4 14             	add    esp,0x14
c000a772:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a777:	6a 04                	push   0x4
c000a779:	6a ff                	push   0xffffffff
c000a77b:	53                   	push   ebx
c000a77c:	68 00 30 02 c0       	push   0xc0023000
c000a781:	50                   	push   eax
c000a782:	e8 f1 f2 ff ff       	call   c0009a78 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	0f 20 d8             	mov    eax,cr3
c000a78a:	0f 22 d8             	mov    cr3,eax
c000a78d:	83 c4 20             	add    esp,0x20
c000a790:	83 c4 0c             	add    esp,0xc
c000a793:	5b                   	pop    ebx
c000a794:	5e                   	pop    esi
c000a795:	5f                   	pop    edi
c000a796:	5d                   	pop    ebp
c000a797:	c3                   	ret    
c000a798:	83 ec 0c             	sub    esp,0xc
c000a79b:	68 4d 05 02 c0       	push   0xc002054d
c000a7a0:	e8 59 01 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    

c000a7b0 <__cxa_atexit>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	c3                   	ret    

c000a7b3 <__cxa_finalize>:
c000a7b3:	c3                   	ret    

c000a7b4 <__stack_chk_fail>:
c000a7b4:	55                   	push   ebp
c000a7b5:	89 e5                	mov    ebp,esp
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7bd:	68 66 05 02 c0       	push   0xc0020566
c000a7c2:	e8 37 01 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a7c7:	58                   	pop    eax
c000a7c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7cb:	5a                   	pop    edx
c000a7cc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7cf:	68 66 05 02 c0       	push   0xc0020566
c000a7d4:	e8 25 01 00 00       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000a7d9:	c7 04 24 6e 05 02 c0 	mov    DWORD PTR [esp],0xc002056e
c000a7e0:	e8 38 63 00 00       	call   c0010b1d <KePanic(char const*)>
c000a7e5:	83 c4 10             	add    esp,0x10
c000a7e8:	c9                   	leave  
c000a7e9:	c3                   	ret    

c000a7ea <__cxa_pure_virtual>:
c000a7ea:	83 ec 18             	sub    esp,0x18
c000a7ed:	68 86 05 02 c0       	push   0xc0020586
c000a7f2:	e8 26 63 00 00       	call   c0010b1d <KePanic(char const*)>
c000a7f7:	83 c4 1c             	add    esp,0x1c
c000a7fa:	c3                   	ret    

c000a7fb <operator new[](unsigned long)>:
c000a7fb:	e9 cb d2 ff ff       	jmp    c0007acb <malloc>

c000a800 <operator delete(void*, unsigned long)>:
c000a800:	e9 e6 d2 ff ff       	jmp    c0007aeb <rfree>

c000a805 <operator delete[](void*)>:
c000a805:	e9 e1 d2 ff ff       	jmp    c0007aeb <rfree>

c000a80a <operator delete[](void*, unsigned long)>:
c000a80a:	e9 dc d2 ff ff       	jmp    c0007aeb <rfree>

c000a80f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a80f:	55                   	push   ebp
c000a810:	57                   	push   edi
c000a811:	56                   	push   esi
c000a812:	53                   	push   ebx
c000a813:	83 ec 20             	sub    esp,0x20
c000a816:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a81a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a822:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a826:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a82e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a832:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a83a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a842:	89 f7                	mov    edi,esi
c000a844:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a849:	89 eb                	mov    ebx,ebp
c000a84b:	eb 02                	jmp    c000a84f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a84d:	89 c7                	mov    edi,eax
c000a84f:	31 d2                	xor    edx,edx
c000a851:	89 f8                	mov    eax,edi
c000a853:	f7 f1                	div    ecx
c000a855:	83 c3 01             	add    ebx,0x1
c000a858:	39 cf                	cmp    edi,ecx
c000a85a:	73 f1                	jae    c000a84d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a85c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a85f:	eb 02                	jmp    c000a863 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a861:	89 c6                	mov    esi,eax
c000a863:	31 d2                	xor    edx,edx
c000a865:	89 f0                	mov    eax,esi
c000a867:	f7 f1                	div    ecx
c000a869:	83 eb 01             	sub    ebx,0x1
c000a86c:	39 ce                	cmp    esi,ecx
c000a86e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a872:	88 13                	mov    BYTE PTR [ebx],dl
c000a874:	73 eb                	jae    c000a861 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a876:	83 c4 20             	add    esp,0x20
c000a879:	89 e8                	mov    eax,ebp
c000a87b:	5b                   	pop    ebx
c000a87c:	5e                   	pop    esi
c000a87d:	5f                   	pop    edi
c000a87e:	5d                   	pop    ebp
c000a87f:	c3                   	ret    

c000a880 <Dbg::logc(char)>:
c000a880:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a887:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a88b:	75 12                	jne    c000a89f <Dbg::logc(char)+0x1f>
c000a88d:	ba fd 03 00 00       	mov    edx,0x3fd
c000a892:	ec                   	in     al,dx
c000a893:	a8 20                	test   al,0x20
c000a895:	74 fb                	je     c000a892 <Dbg::logc(char)+0x12>
c000a897:	ba f8 03 00 00       	mov    edx,0x3f8
c000a89c:	88 c8                	mov    al,cl
c000a89e:	ee                   	out    dx,al
c000a89f:	c3                   	ret    

c000a8a0 <Dbg::logs(char*)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8a8:	85 c0                	test   eax,eax
c000a8aa:	74 11                	je     c000a8bd <Dbg::logs(char*)+0x1d>
c000a8ac:	50                   	push   eax
c000a8ad:	83 c3 01             	add    ebx,0x1
c000a8b0:	e8 cb ff ff ff       	call   c000a880 <Dbg::logc(char)>
c000a8b5:	58                   	pop    eax
c000a8b6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b9:	85 c0                	test   eax,eax
c000a8bb:	75 ef                	jne    c000a8ac <Dbg::logs(char*)+0xc>
c000a8bd:	5b                   	pop    ebx
c000a8be:	c3                   	ret    

c000a8bf <Dbg::logWriteInt(unsigned int)>:
c000a8bf:	83 ec 10             	sub    esp,0x10
c000a8c2:	6a 0a                	push   0xa
c000a8c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8c8:	50                   	push   eax
c000a8c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8cd:	50                   	push   eax
c000a8ce:	e8 3c ff ff ff       	call   c000a80f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8d3:	50                   	push   eax
c000a8d4:	e8 c7 ff ff ff       	call   c000a8a0 <Dbg::logs(char*)>
c000a8d9:	83 c4 20             	add    esp,0x20
c000a8dc:	c3                   	ret    

c000a8dd <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8dd:	83 ec 10             	sub    esp,0x10
c000a8e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8e4:	50                   	push   eax
c000a8e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8e9:	50                   	push   eax
c000a8ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8ee:	52                   	push   edx
c000a8ef:	e8 1b ff ff ff       	call   c000a80f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8f4:	50                   	push   eax
c000a8f5:	e8 a6 ff ff ff       	call   c000a8a0 <Dbg::logs(char*)>
c000a8fa:	83 c4 20             	add    esp,0x20
c000a8fd:	c3                   	ret    

c000a8fe <Dbg::kprintf(char const*, ...)>:
c000a8fe:	55                   	push   ebp
c000a8ff:	57                   	push   edi
c000a900:	56                   	push   esi
c000a901:	53                   	push   ebx
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a90c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a910:	74 08                	je     c000a91a <Dbg::kprintf(char const*, ...)+0x1c>
c000a912:	83 c4 0c             	add    esp,0xc
c000a915:	5b                   	pop    ebx
c000a916:	5e                   	pop    esi
c000a917:	5f                   	pop    edi
c000a918:	5d                   	pop    ebp
c000a919:	c3                   	ret    
c000a91a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a91e:	31 ff                	xor    edi,edi
c000a920:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a924:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a927:	85 c0                	test   eax,eax
c000a929:	74 e7                	je     c000a912 <Dbg::kprintf(char const*, ...)+0x14>
c000a92b:	8d 77 01             	lea    esi,[edi+0x1]
c000a92e:	83 f8 25             	cmp    eax,0x25
c000a931:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a934:	75 47                	jne    c000a97d <Dbg::kprintf(char const*, ...)+0x7f>
c000a936:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a939:	83 c7 02             	add    edi,0x2
c000a93c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a93f:	83 e8 25             	sub    eax,0x25
c000a942:	0f b6 c0             	movzx  eax,al
c000a945:	83 f8 53             	cmp    eax,0x53
c000a948:	0f 87 ce 00 00 00    	ja     c000aa1c <Dbg::kprintf(char const*, ...)+0x11e>
c000a94e:	ff 24 85 9c 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa64]
c000a955:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a959:	89 c8                	mov    eax,ecx
c000a95b:	83 c1 04             	add    ecx,0x4
c000a95e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a962:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a964:	55                   	push   ebp
c000a965:	e8 55 ff ff ff       	call   c000a8bf <Dbg::logWriteInt(unsigned int)>
c000a96a:	58                   	pop    eax
c000a96b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 a0                	je     c000a912 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	74 b9                	je     c000a936 <Dbg::kprintf(char const*, ...)+0x38>
c000a97d:	50                   	push   eax
c000a97e:	89 f7                	mov    edi,esi
c000a980:	e8 fb fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000a985:	89 ee                	mov    esi,ebp
c000a987:	58                   	pop    eax
c000a988:	eb e1                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a98a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a98e:	89 c8                	mov    eax,ecx
c000a990:	83 c1 04             	add    ecx,0x4
c000a993:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a997:	8b 00                	mov    eax,DWORD PTR [eax]
c000a999:	50                   	push   eax
c000a99a:	e8 01 ff ff ff       	call   c000a8a0 <Dbg::logs(char*)>
c000a99f:	58                   	pop    eax
c000a9a0:	eb c9                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9a6:	89 d0                	mov    eax,edx
c000a9a8:	83 c2 04             	add    edx,0x4
c000a9ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9af:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9b1:	50                   	push   eax
c000a9b2:	e8 08 ff ff ff       	call   c000a8bf <Dbg::logWriteInt(unsigned int)>
c000a9b7:	58                   	pop    eax
c000a9b8:	eb b1                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9be:	89 d0                	mov    eax,edx
c000a9c0:	83 c2 04             	add    edx,0x4
c000a9c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9ca:	50                   	push   eax
c000a9cb:	e8 b0 fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000a9d0:	58                   	pop    eax
c000a9d1:	eb 98                	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d7:	89 c8                	mov    eax,ecx
c000a9d9:	83 c1 04             	add    ecx,0x4
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	6a 10                	push   0x10
c000a9e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9e4:	51                   	push   ecx
c000a9e5:	e8 f3 fe ff ff       	call   c000a8dd <Dbg::logWriteIntBase(unsigned int, int)>
c000a9ea:	5d                   	pop    ebp
c000a9eb:	58                   	pop    eax
c000a9ec:	e9 7a ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f5:	89 d0                	mov    eax,edx
c000a9f7:	83 c2 08             	add    edx,0x8
c000a9fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9fe:	6a 10                	push   0x10
c000aa00:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa02:	50                   	push   eax
c000aa03:	e8 d5 fe ff ff       	call   c000a8dd <Dbg::logWriteIntBase(unsigned int, int)>
c000aa08:	58                   	pop    eax
c000aa09:	5a                   	pop    edx
c000aa0a:	e9 5c ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0f:	6a 25                	push   0x25
c000aa11:	e8 6a fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000aa16:	5a                   	pop    edx
c000aa17:	e9 4f ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1c:	6a 25                	push   0x25
c000aa1e:	e8 5d fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000aa23:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa27:	50                   	push   eax
c000aa28:	e8 53 fe ff ff       	call   c000a880 <Dbg::logc(char)>
c000aa2d:	5a                   	pop    edx
c000aa2e:	59                   	pop    ecx
c000aa2f:	e9 37 ff ff ff       	jmp    c000a96b <Dbg::kprintf(char const*, ...)+0x6d>

c000aa34 <KiUbsanPrintDetails(char const*, void*)>:
c000aa34:	83 ec 1c             	sub    esp,0x1c
c000aa37:	83 ec 08             	sub    esp,0x8
c000aa3a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa3e:	68 ec 06 02 c0       	push   0xc00206ec
c000aa43:	e8 b6 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa48:	83 c4 10             	add    esp,0x10
c000aa4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa57:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa59:	83 ec 08             	sub    esp,0x8
c000aa5c:	50                   	push   eax
c000aa5d:	68 00 07 02 c0       	push   0xc0020700
c000aa62:	e8 97 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa67:	83 c4 10             	add    esp,0x10
c000aa6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa71:	83 ec 08             	sub    esp,0x8
c000aa74:	50                   	push   eax
c000aa75:	68 0a 07 02 c0       	push   0xc002070a
c000aa7a:	e8 7f fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa7f:	83 c4 10             	add    esp,0x10
c000aa82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa89:	83 ec 08             	sub    esp,0x8
c000aa8c:	50                   	push   eax
c000aa8d:	68 14 07 02 c0       	push   0xc0020714
c000aa92:	e8 67 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	90                   	nop
c000aa9b:	83 c4 1c             	add    esp,0x1c
c000aa9e:	c3                   	ret    
c000aa9f:	90                   	nop

c000aaa0 <__ubsan_handle_type_mismatch_v1>:
c000aaa0:	83 ec 0c             	sub    esp,0xc
c000aaa3:	83 ec 08             	sub    esp,0x8
c000aaa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaaa:	68 58 08 02 c0       	push   0xc0020858
c000aaaf:	e8 80 ff ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000aab4:	83 c4 10             	add    esp,0x10
c000aab7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aabc:	75 16                	jne    c000aad4 <__ubsan_handle_type_mismatch_v1+0x34>
c000aabe:	83 ec 0c             	sub    esp,0xc
c000aac1:	68 1e 07 02 c0       	push   0xc002071e
c000aac6:	e8 33 fe ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000aacb:	83 c4 10             	add    esp,0x10
c000aace:	e9 91 00 00 00       	jmp    c000ab64 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aad3:	90                   	nop
c000aad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aadb:	85 c0                	test   eax,eax
c000aadd:	74 29                	je     c000ab08 <__ubsan_handle_type_mismatch_v1+0x68>
c000aadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae6:	83 e8 01             	sub    eax,0x1
c000aae9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaed:	75 19                	jne    c000ab08 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaef:	83 ec 08             	sub    esp,0x8
c000aaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf6:	68 78 08 02 c0       	push   0xc0020878
c000aafb:	e8 fe fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	eb 5f                	jmp    c000ab64 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab05:	8d 76 00             	lea    esi,[esi+0x0]
c000ab08:	83 ec 0c             	sub    esp,0xc
c000ab0b:	68 33 07 02 c0       	push   0xc0020733
c000ab10:	e8 e9 fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab1f:	0f b6 c0             	movzx  eax,al
c000ab22:	83 ec 08             	sub    esp,0x8
c000ab25:	50                   	push   eax
c000ab26:	68 4d 07 02 c0       	push   0xc002074d
c000ab2b:	e8 ce fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab3a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab45:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab48:	0f b6 c0             	movzx  eax,al
c000ab4b:	8b 04 85 c0 26 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd940]
c000ab52:	51                   	push   ecx
c000ab53:	52                   	push   edx
c000ab54:	50                   	push   eax
c000ab55:	68 a0 08 02 c0       	push   0xc00208a0
c000ab5a:	e8 9f fd ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	66 90                	xchg   ax,ax
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	68 58 08 02 c0       	push   0xc0020858
c000ab6c:	e8 ac 5f 00 00       	call   c0010b1d <KePanic(char const*)>
c000ab71:	83 c4 10             	add    esp,0x10
c000ab74:	90                   	nop
c000ab75:	83 c4 0c             	add    esp,0xc
c000ab78:	c3                   	ret    
c000ab79:	8d 76 00             	lea    esi,[esi+0x0]

c000ab7c <__ubsan_handle_pointer_overflow>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	83 ec 08             	sub    esp,0x8
c000ab82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab86:	68 e8 08 02 c0       	push   0xc00208e8
c000ab8b:	e8 a4 fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ab90:	83 c4 10             	add    esp,0x10
c000ab93:	83 ec 0c             	sub    esp,0xc
c000ab96:	68 e8 08 02 c0       	push   0xc00208e8
c000ab9b:	e8 7d 5f 00 00       	call   c0010b1d <KePanic(char const*)>
c000aba0:	83 c4 10             	add    esp,0x10
c000aba3:	90                   	nop
c000aba4:	83 c4 0c             	add    esp,0xc
c000aba7:	c3                   	ret    

c000aba8 <__ubsan_handle_out_of_bounds>:
c000aba8:	83 ec 0c             	sub    esp,0xc
c000abab:	83 ec 08             	sub    esp,0x8
c000abae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abb2:	68 58 07 02 c0       	push   0xc0020758
c000abb7:	e8 78 fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	83 ec 0c             	sub    esp,0xc
c000abc2:	68 58 07 02 c0       	push   0xc0020758
c000abc7:	e8 51 5f 00 00       	call   c0010b1d <KePanic(char const*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	90                   	nop
c000abd0:	83 c4 0c             	add    esp,0xc
c000abd3:	c3                   	ret    

c000abd4 <__ubsan_handle_add_overflow>:
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	83 ec 08             	sub    esp,0x8
c000abda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abde:	68 75 07 02 c0       	push   0xc0020775
c000abe3:	e8 4c fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	83 ec 0c             	sub    esp,0xc
c000abee:	68 75 07 02 c0       	push   0xc0020775
c000abf3:	e8 25 5f 00 00       	call   c0010b1d <KePanic(char const*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	90                   	nop
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	c3                   	ret    

c000ac00 <__ubsan_handle_load_invalid_value>:
c000ac00:	83 ec 0c             	sub    esp,0xc
c000ac03:	83 ec 08             	sub    esp,0x8
c000ac06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac0a:	68 08 09 02 c0       	push   0xc0020908
c000ac0f:	e8 20 fe ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	68 08 09 02 c0       	push   0xc0020908
c000ac1f:	e8 f9 5e 00 00       	call   c0010b1d <KePanic(char const*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	90                   	nop
c000ac28:	83 c4 0c             	add    esp,0xc
c000ac2b:	c3                   	ret    

c000ac2c <__ubsan_handle_divrem_overflow>:
c000ac2c:	83 ec 0c             	sub    esp,0xc
c000ac2f:	83 ec 08             	sub    esp,0x8
c000ac32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac36:	68 2c 09 02 c0       	push   0xc002092c
c000ac3b:	e8 f4 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	83 ec 0c             	sub    esp,0xc
c000ac46:	68 2c 09 02 c0       	push   0xc002092c
c000ac4b:	e8 cd 5e 00 00       	call   c0010b1d <KePanic(char const*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	90                   	nop
c000ac54:	83 c4 0c             	add    esp,0xc
c000ac57:	c3                   	ret    

c000ac58 <__ubsan_handle_mul_overflow>:
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	83 ec 08             	sub    esp,0x8
c000ac5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac62:	68 91 07 02 c0       	push   0xc0020791
c000ac67:	e8 c8 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	68 91 07 02 c0       	push   0xc0020791
c000ac77:	e8 a1 5e 00 00       	call   c0010b1d <KePanic(char const*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	90                   	nop
c000ac80:	83 c4 0c             	add    esp,0xc
c000ac83:	c3                   	ret    

c000ac84 <__ubsan_handle_sub_overflow>:
c000ac84:	83 ec 0c             	sub    esp,0xc
c000ac87:	83 ec 08             	sub    esp,0x8
c000ac8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac8e:	68 ad 07 02 c0       	push   0xc00207ad
c000ac93:	e8 9c fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	83 ec 0c             	sub    esp,0xc
c000ac9e:	68 ad 07 02 c0       	push   0xc00207ad
c000aca3:	e8 75 5e 00 00       	call   c0010b1d <KePanic(char const*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	90                   	nop
c000acac:	83 c4 0c             	add    esp,0xc
c000acaf:	c3                   	ret    

c000acb0 <__ubsan_handle_shift_out_of_bounds>:
c000acb0:	83 ec 0c             	sub    esp,0xc
c000acb3:	83 ec 08             	sub    esp,0x8
c000acb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acba:	68 4c 09 02 c0       	push   0xc002094c
c000acbf:	e8 70 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	83 ec 0c             	sub    esp,0xc
c000acca:	68 4c 09 02 c0       	push   0xc002094c
c000accf:	e8 49 5e 00 00       	call   c0010b1d <KePanic(char const*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	90                   	nop
c000acd8:	83 c4 0c             	add    esp,0xc
c000acdb:	c3                   	ret    

c000acdc <__ubsan_handle_negate_overflow>:
c000acdc:	83 ec 0c             	sub    esp,0xc
c000acdf:	83 ec 08             	sub    esp,0x8
c000ace2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace6:	68 70 09 02 c0       	push   0xc0020970
c000aceb:	e8 44 fd ff ff       	call   c000aa34 <KiUbsanPrintDetails(char const*, void*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	68 70 09 02 c0       	push   0xc0020970
c000acfb:	e8 1d 5e 00 00       	call   c0010b1d <KePanic(char const*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	90                   	nop
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	c3                   	ret    

c000ad08 <File::read(unsigned long long, void*, int*)>:
c000ad08:	53                   	push   ebx
c000ad09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad0d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad11:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad18:	83 f8 19             	cmp    eax,0x19
c000ad1b:	77 35                	ja     c000ad52 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad1d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ad24:	85 c0                	test   eax,eax
c000ad26:	74 2a                	je     c000ad52 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad28:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad2e:	85 c0                	test   eax,eax
c000ad30:	74 20                	je     c000ad52 <File::read(unsigned long long, void*, int*)+0x4a>
c000ad32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad36:	74 21                	je     c000ad59 <File::read(unsigned long long, void*, int*)+0x51>
c000ad38:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad3e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad4c:	5b                   	pop    ebx
c000ad4d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad50:	ff e0                	jmp    eax
c000ad52:	b8 0b 00 00 00       	mov    eax,0xb
c000ad57:	eb 05                	jmp    c000ad5e <File::read(unsigned long long, void*, int*)+0x56>
c000ad59:	b8 05 00 00 00       	mov    eax,0x5
c000ad5e:	5b                   	pop    ebx
c000ad5f:	c3                   	ret    

c000ad60 <File::write(unsigned long long, void*, int*)>:
c000ad60:	53                   	push   ebx
c000ad61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad69:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad70:	83 f8 19             	cmp    eax,0x19
c000ad73:	77 35                	ja     c000adaa <File::write(unsigned long long, void*, int*)+0x4a>
c000ad75:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ad7c:	85 c0                	test   eax,eax
c000ad7e:	74 2a                	je     c000adaa <File::write(unsigned long long, void*, int*)+0x4a>
c000ad80:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad86:	85 c0                	test   eax,eax
c000ad88:	74 20                	je     c000adaa <File::write(unsigned long long, void*, int*)+0x4a>
c000ad8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad8e:	74 21                	je     c000adb1 <File::write(unsigned long long, void*, int*)+0x51>
c000ad90:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad92:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad96:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ada4:	5b                   	pop    ebx
c000ada5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ada8:	ff e0                	jmp    eax
c000adaa:	b8 0b 00 00 00       	mov    eax,0xb
c000adaf:	eb 05                	jmp    c000adb6 <File::write(unsigned long long, void*, int*)+0x56>
c000adb1:	b8 05 00 00 00       	mov    eax,0x5
c000adb6:	5b                   	pop    ebx
c000adb7:	c3                   	ret    

c000adb8 <Directory::read(unsigned long long, void*, int*)>:
c000adb8:	53                   	push   ebx
c000adb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adbd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adc1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adc8:	83 f8 19             	cmp    eax,0x19
c000adcb:	77 35                	ja     c000ae02 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000adcd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000add4:	85 c0                	test   eax,eax
c000add6:	74 2a                	je     c000ae02 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000add8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adde:	85 c0                	test   eax,eax
c000ade0:	74 20                	je     c000ae02 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ade2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ade6:	74 21                	je     c000ae09 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ade8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adee:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adfc:	5b                   	pop    ebx
c000adfd:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae00:	ff e0                	jmp    eax
c000ae02:	b8 0b 00 00 00       	mov    eax,0xb
c000ae07:	eb 05                	jmp    c000ae0e <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae09:	b8 05 00 00 00       	mov    eax,0x5
c000ae0e:	5b                   	pop    ebx
c000ae0f:	c3                   	ret    

c000ae10 <Directory::write(unsigned long long, void*, int*)>:
c000ae10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae14:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae20:	83 fa 19             	cmp    edx,0x19
c000ae23:	77 18                	ja     c000ae3d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae25:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ae2c:	85 d2                	test   edx,edx
c000ae2e:	74 0d                	je     c000ae3d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae30:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ae37:	19 c0                	sbb    eax,eax
c000ae39:	83 e0 0a             	and    eax,0xa
c000ae3c:	40                   	inc    eax
c000ae3d:	c3                   	ret    

c000ae3e <File::isAtty()>:
c000ae3e:	31 c0                	xor    eax,eax
c000ae40:	c3                   	ret    
c000ae41:	90                   	nop

c000ae42 <Directory::isAtty()>:
c000ae42:	31 c0                	xor    eax,eax
c000ae44:	c3                   	ret    
c000ae45:	90                   	nop

c000ae46 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae46:	b8 0a 00 00 00       	mov    eax,0xa
c000ae4b:	c3                   	ret    

c000ae4c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae4c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae51:	c3                   	ret    

c000ae52 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae52:	31 c0                	xor    eax,eax
c000ae54:	31 d2                	xor    edx,edx
c000ae56:	c3                   	ret    
c000ae57:	90                   	nop

c000ae58 <File::~File()>:
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	ba 00 0a 02 c0       	mov    edx,0xc0020a00
c000ae60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae64:	89 10                	mov    DWORD PTR [eax],edx
c000ae66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6a:	83 ec 0c             	sub    esp,0xc
c000ae6d:	50                   	push   eax
c000ae6e:	e8 0d e5 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	90                   	nop
c000ae77:	83 c4 0c             	add    esp,0xc
c000ae7a:	c3                   	ret    
c000ae7b:	90                   	nop

c000ae7c <File::~File()>:
c000ae7c:	83 ec 0c             	sub    esp,0xc
c000ae7f:	83 ec 0c             	sub    esp,0xc
c000ae82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae86:	e8 cd ff ff ff       	call   c000ae58 <File::~File()>
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	83 ec 08             	sub    esp,0x8
c000ae91:	68 14 01 00 00       	push   0x114
c000ae96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9a:	e8 61 f9 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000ae9f:	83 c4 10             	add    esp,0x10
c000aea2:	83 c4 0c             	add    esp,0xc
c000aea5:	c3                   	ret    

c000aea6 <Directory::~Directory()>:
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	ba 1c 0a 02 c0       	mov    edx,0xc0020a1c
c000aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb2:	89 10                	mov    DWORD PTR [eax],edx
c000aeb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb8:	83 ec 0c             	sub    esp,0xc
c000aebb:	50                   	push   eax
c000aebc:	e8 bf e4 ff ff       	call   c0009380 <UnixFile::~UnixFile()>
c000aec1:	83 c4 10             	add    esp,0x10
c000aec4:	90                   	nop
c000aec5:	83 c4 0c             	add    esp,0xc
c000aec8:	c3                   	ret    
c000aec9:	90                   	nop

c000aeca <Directory::~Directory()>:
c000aeca:	83 ec 0c             	sub    esp,0xc
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed4:	e8 cd ff ff ff       	call   c000aea6 <Directory::~Directory()>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	83 ec 08             	sub    esp,0x8
c000aedf:	68 14 01 00 00       	push   0x114
c000aee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee8:	e8 13 f9 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000aeed:	83 c4 10             	add    esp,0x10
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	c3                   	ret    

c000aef4 <Filesystem::Filesystem()>:
c000aef4:	ba 98 09 02 c0       	mov    edx,0xc0020998
c000aef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aefd:	89 10                	mov    DWORD PTR [eax],edx
c000aeff:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000af05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af09:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af10:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000af15:	90                   	nop
c000af16:	c3                   	ret    
c000af17:	90                   	nop

c000af18 <Filesystem::~Filesystem()>:
c000af18:	ba 98 09 02 c0       	mov    edx,0xc0020998
c000af1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af21:	89 10                	mov    DWORD PTR [eax],edx
c000af23:	90                   	nop
c000af24:	c3                   	ret    
c000af25:	90                   	nop

c000af26 <Filesystem::~Filesystem()>:
c000af26:	83 ec 0c             	sub    esp,0xc
c000af29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af2d:	e8 e6 ff ff ff       	call   c000af18 <Filesystem::~Filesystem()>
c000af32:	83 c4 04             	add    esp,0x4
c000af35:	83 ec 08             	sub    esp,0x8
c000af38:	6a 08                	push   0x8
c000af3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af3e:	e8 bd f8 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	83 c4 0c             	add    esp,0xc
c000af49:	c3                   	ret    

c000af4a <Fs::getcwd(Process*, char*, int)>:
c000af4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af4e:	31 c0                	xor    eax,eax
c000af50:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af54:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af57:	7d 15                	jge    c000af6e <Fs::getcwd(Process*, char*, int)+0x24>
c000af59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af5d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af64:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af67:	84 c9                	test   cl,cl
c000af69:	74 06                	je     c000af71 <Fs::getcwd(Process*, char*, int)+0x27>
c000af6b:	40                   	inc    eax
c000af6c:	eb e2                	jmp    c000af50 <Fs::getcwd(Process*, char*, int)+0x6>
c000af6e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af71:	31 c0                	xor    eax,eax
c000af73:	c3                   	ret    

c000af74 <Fs::initVFS()>:
c000af74:	83 ec 18             	sub    esp,0x18
c000af77:	6a 08                	push   0x8
c000af79:	e8 4d cb ff ff       	call   c0007acb <malloc>
c000af7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000af81:	e8 a6 de 00 00       	call   c0018e2c <FAT::FAT()>
c000af86:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000af8d:	e8 39 cb ff ff       	call   c0007acb <malloc>
c000af92:	89 04 24             	mov    DWORD PTR [esp],eax
c000af95:	e8 ba ed 00 00       	call   c0019d54 <ISO9660::ISO9660()>
c000af9a:	83 c4 1c             	add    esp,0x1c
c000af9d:	c3                   	ret    

c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000af9e:	55                   	push   ebp
c000af9f:	57                   	push   edi
c000afa0:	56                   	push   esi
c000afa1:	53                   	push   ebx
c000afa2:	81 ec 20 04 00 00    	sub    esp,0x420
c000afa8:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000afaf:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000afb6:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000afbd:	68 00 04 00 00       	push   0x400
c000afc2:	6a 00                	push   0x0
c000afc4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000afc8:	56                   	push   esi
c000afc9:	e8 22 55 ff ff       	call   c00004f0 <memset>
c000afce:	83 c4 10             	add    esp,0x10
c000afd1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afd5:	75 0b                	jne    c000afe2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afd7:	50                   	push   eax
c000afd8:	50                   	push   eax
c000afd9:	57                   	push   edi
c000afda:	56                   	push   esi
c000afdb:	e8 70 56 ff ff       	call   c0000650 <strcpy>
c000afe0:	eb 45                	jmp    c000b027 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000afe2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000afe5:	83 f8 2f             	cmp    eax,0x2f
c000afe8:	74 05                	je     c000afef <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000afea:	83 f8 5c             	cmp    eax,0x5c
c000afed:	75 19                	jne    c000b008 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000afef:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aff2:	3c 60                	cmp    al,0x60
c000aff4:	7e 03                	jle    c000aff9 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000aff6:	83 e8 20             	sub    eax,0x20
c000aff9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000affd:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b004:	50                   	push   eax
c000b005:	50                   	push   eax
c000b006:	eb 18                	jmp    c000b020 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b008:	50                   	push   eax
c000b009:	50                   	push   eax
c000b00a:	55                   	push   ebp
c000b00b:	56                   	push   esi
c000b00c:	e8 3f 56 ff ff       	call   c0000650 <strcpy>
c000b011:	5a                   	pop    edx
c000b012:	59                   	pop    ecx
c000b013:	68 1f 19 02 c0       	push   0xc002191f
c000b018:	56                   	push   esi
c000b019:	e8 52 58 ff ff       	call   c0000870 <strcat>
c000b01e:	5d                   	pop    ebp
c000b01f:	58                   	pop    eax
c000b020:	57                   	push   edi
c000b021:	56                   	push   esi
c000b022:	e8 49 58 ff ff       	call   c0000870 <strcat>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b02e:	3c 60                	cmp    al,0x60
c000b030:	7e 03                	jle    c000b035 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b032:	83 e8 20             	sub    eax,0x20
c000b035:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b039:	88 03                	mov    BYTE PTR [ebx],al
c000b03b:	b8 03 00 00 00       	mov    eax,0x3
c000b040:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b047:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b04d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b051:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b059:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b05d:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b062:	89 fa                	mov    edx,edi
c000b064:	0f be ea             	movsx  ebp,dl
c000b067:	85 ed                	test   ebp,ebp
c000b069:	0f 84 af 00 00 00    	je     c000b11e <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b06f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b073:	42                   	inc    edx
c000b074:	83 fd 2f             	cmp    ebp,0x2f
c000b077:	74 05                	je     c000b07e <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b079:	83 fd 5c             	cmp    ebp,0x5c
c000b07c:	75 14                	jne    c000b092 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b07e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b083:	89 c5                	mov    ebp,eax
c000b085:	74 0b                	je     c000b092 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b087:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b08b:	40                   	inc    eax
c000b08c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b090:	eb c7                	jmp    c000b059 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b096:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b09b:	89 f9                	mov    ecx,edi
c000b09d:	0f be e9             	movsx  ebp,cl
c000b0a0:	75 63                	jne    c000b105 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b0a2:	83 fd 2e             	cmp    ebp,0x2e
c000b0a5:	75 5e                	jne    c000b105 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b0a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b0ab:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b0b0:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b0b5:	74 18                	je     c000b0cf <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b0b7:	83 fd 2e             	cmp    ebp,0x2e
c000b0ba:	74 57                	je     c000b113 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b0bc:	89 ca                	mov    edx,ecx
c000b0be:	42                   	inc    edx
c000b0bf:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b0c3:	83 f9 2f             	cmp    ecx,0x2f
c000b0c6:	74 f6                	je     c000b0be <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b0c8:	83 f9 5c             	cmp    ecx,0x5c
c000b0cb:	74 f1                	je     c000b0be <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b0cd:	eb bd                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b0cf:	83 fd 2e             	cmp    ebp,0x2e
c000b0d2:	74 3f                	je     c000b113 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b0d4:	83 f8 03             	cmp    eax,0x3
c000b0d7:	74 b3                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b0d9:	42                   	inc    edx
c000b0da:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b0de:	83 f9 2f             	cmp    ecx,0x2f
c000b0e1:	74 f6                	je     c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e3:	83 f9 5c             	cmp    ecx,0x5c
c000b0e6:	74 f1                	je     c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e8:	48                   	dec    eax
c000b0e9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0ed:	75 06                	jne    c000b0f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b0ef:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0f3:	eb f3                	jmp    c000b0e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0f5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0f9:	74 07                	je     c000b102 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b0fb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0ff:	48                   	dec    eax
c000b100:	eb f3                	jmp    c000b0f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b102:	40                   	inc    eax
c000b103:	eb 87                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b105:	83 fd 2f             	cmp    ebp,0x2f
c000b108:	74 82                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b10a:	83 fd 5c             	cmp    ebp,0x5c
c000b10d:	0f 84 79 ff ff ff    	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b113:	89 f9                	mov    ecx,edi
c000b115:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b118:	40                   	inc    eax
c000b119:	e9 6e ff ff ff       	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b11e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b122:	83 ec 0c             	sub    esp,0xc
c000b125:	53                   	push   ebx
c000b126:	e8 55 54 ff ff       	call   c0000580 <strlen>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b133:	75 26                	jne    c000b15b <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b135:	83 ec 0c             	sub    esp,0xc
c000b138:	53                   	push   ebx
c000b139:	e8 42 54 ff ff       	call   c0000580 <strlen>
c000b13e:	83 c4 10             	add    esp,0x10
c000b141:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b146:	74 26                	je     c000b16e <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	53                   	push   ebx
c000b14c:	e8 2f 54 ff ff       	call   c0000580 <strlen>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b159:	eb c7                	jmp    c000b122 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b15b:	83 ec 0c             	sub    esp,0xc
c000b15e:	53                   	push   ebx
c000b15f:	e8 1c 54 ff ff       	call   c0000580 <strlen>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b16c:	74 c7                	je     c000b135 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b16e:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b174:	5b                   	pop    ebx
c000b175:	5e                   	pop    esi
c000b176:	5f                   	pop    edi
c000b177:	5d                   	pop    ebp
c000b178:	c3                   	ret    
c000b179:	90                   	nop

c000b17a <File::File(char const*, Process*)>:
c000b17a:	83 ec 0c             	sub    esp,0xc
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	83 ec 08             	sub    esp,0x8
c000b184:	6a 00                	push   0x0
c000b186:	50                   	push   eax
c000b187:	e8 0e e0 ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b18c:	83 c4 10             	add    esp,0x10
c000b18f:	ba 00 0a 02 c0       	mov    edx,0xc0020a00
c000b194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b198:	89 10                	mov    DWORD PTR [eax],edx
c000b19a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b19e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a8:	83 c0 0d             	add    eax,0xd
c000b1ab:	83 ec 04             	sub    esp,0x4
c000b1ae:	52                   	push   edx
c000b1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1b3:	50                   	push   eax
c000b1b4:	e8 e5 fd ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1c3:	83 e8 41             	sub    eax,0x41
c000b1c6:	88 c2                	mov    dl,al
c000b1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1de:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e4:	0f b6 c0             	movzx  eax,al
c000b1e7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b1ee:	85 c0                	test   eax,eax
c000b1f0:	74 3e                	je     c000b230 <File::File(char const*, Process*)+0xb6>
c000b1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1fc:	0f b6 c0             	movzx  eax,al
c000b1ff:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b206:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b20c:	85 c0                	test   eax,eax
c000b20e:	75 20                	jne    c000b230 <File::File(char const*, Process*)+0xb6>
c000b210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b214:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b21a:	0f b6 c0             	movzx  eax,al
c000b21d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b224:	83 ec 0c             	sub    esp,0xc
c000b227:	50                   	push   eax
c000b228:	e8 2f 21 00 00       	call   c000d35c <LogicalDisk::mount()>
c000b22d:	83 c4 10             	add    esp,0x10
c000b230:	90                   	nop
c000b231:	83 c4 0c             	add    esp,0xc
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <File::open(FileOpenMode)>:
c000b236:	53                   	push   ebx
c000b237:	b8 0b 00 00 00       	mov    eax,0xb
c000b23c:	83 ec 08             	sub    esp,0x8
c000b23f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b243:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b24a:	83 fa 19             	cmp    edx,0x19
c000b24d:	77 40                	ja     c000b28f <File::open(FileOpenMode)+0x59>
c000b24f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b256:	85 d2                	test   edx,edx
c000b258:	74 35                	je     c000b28f <File::open(FileOpenMode)+0x59>
c000b25a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b260:	85 d2                	test   edx,edx
c000b262:	74 2b                	je     c000b28f <File::open(FileOpenMode)+0x59>
c000b264:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b268:	b8 06 00 00 00       	mov    eax,0x6
c000b26d:	75 20                	jne    c000b28f <File::open(FileOpenMode)+0x59>
c000b26f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b271:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b277:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b27b:	51                   	push   ecx
c000b27c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b27f:	51                   	push   ecx
c000b280:	52                   	push   edx
c000b281:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b284:	83 c4 10             	add    esp,0x10
c000b287:	85 c0                	test   eax,eax
c000b289:	75 04                	jne    c000b28f <File::open(FileOpenMode)+0x59>
c000b28b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b28f:	83 c4 08             	add    esp,0x8
c000b292:	5b                   	pop    ebx
c000b293:	c3                   	ret    

c000b294 <File::close()>:
c000b294:	53                   	push   ebx
c000b295:	b8 0b 00 00 00       	mov    eax,0xb
c000b29a:	83 ec 08             	sub    esp,0x8
c000b29d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2a8:	83 f9 19             	cmp    ecx,0x19
c000b2ab:	77 41                	ja     c000b2ee <File::close()+0x5a>
c000b2ad:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2b4:	85 db                	test   ebx,ebx
c000b2b6:	74 36                	je     c000b2ee <File::close()+0x5a>
c000b2b8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b2bf:	74 2d                	je     c000b2ee <File::close()+0x5a>
c000b2c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2c5:	b8 05 00 00 00       	mov    eax,0x5
c000b2ca:	74 22                	je     c000b2ee <File::close()+0x5a>
c000b2cc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b2d0:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2d7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2dd:	53                   	push   ebx
c000b2de:	53                   	push   ebx
c000b2df:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2e7:	50                   	push   eax
c000b2e8:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	83 c4 08             	add    esp,0x8
c000b2f1:	5b                   	pop    ebx
c000b2f2:	c3                   	ret    
c000b2f3:	90                   	nop

c000b2f4 <File::seek(unsigned long long)>:
c000b2f4:	56                   	push   esi
c000b2f5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2fa:	53                   	push   ebx
c000b2fb:	51                   	push   ecx
c000b2fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b300:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b304:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b308:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b30f:	83 fa 19             	cmp    edx,0x19
c000b312:	77 31                	ja     c000b345 <File::seek(unsigned long long)+0x51>
c000b314:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b31b:	85 d2                	test   edx,edx
c000b31d:	74 26                	je     c000b345 <File::seek(unsigned long long)+0x51>
c000b31f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b325:	85 d2                	test   edx,edx
c000b327:	74 1c                	je     c000b345 <File::seek(unsigned long long)+0x51>
c000b329:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b32d:	b8 05 00 00 00       	mov    eax,0x5
c000b332:	74 11                	je     c000b345 <File::seek(unsigned long long)+0x51>
c000b334:	8b 02                	mov    eax,DWORD PTR [edx]
c000b336:	53                   	push   ebx
c000b337:	51                   	push   ecx
c000b338:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b33e:	52                   	push   edx
c000b33f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	5a                   	pop    edx
c000b346:	5b                   	pop    ebx
c000b347:	5e                   	pop    esi
c000b348:	c3                   	ret    
c000b349:	90                   	nop

c000b34a <File::tell(unsigned long long*)>:
c000b34a:	83 ec 0c             	sub    esp,0xc
c000b34d:	b8 0b 00 00 00       	mov    eax,0xb
c000b352:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b356:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b35d:	83 fa 19             	cmp    edx,0x19
c000b360:	77 34                	ja     c000b396 <File::tell(unsigned long long*)+0x4c>
c000b362:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b369:	85 d2                	test   edx,edx
c000b36b:	74 29                	je     c000b396 <File::tell(unsigned long long*)+0x4c>
c000b36d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b373:	85 d2                	test   edx,edx
c000b375:	74 1f                	je     c000b396 <File::tell(unsigned long long*)+0x4c>
c000b377:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b37b:	b8 05 00 00 00       	mov    eax,0x5
c000b380:	74 14                	je     c000b396 <File::tell(unsigned long long*)+0x4c>
c000b382:	50                   	push   eax
c000b383:	8b 02                	mov    eax,DWORD PTR [edx]
c000b385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b389:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b38f:	52                   	push   edx
c000b390:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	83 c4 0c             	add    esp,0xc
c000b399:	c3                   	ret    

c000b39a <File::rewind()>:
c000b39a:	83 ec 10             	sub    esp,0x10
c000b39d:	6a 00                	push   0x0
c000b39f:	6a 00                	push   0x0
c000b3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a5:	e8 4a ff ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c000b3aa:	83 c4 1c             	add    esp,0x1c
c000b3ad:	c3                   	ret    

c000b3ae <File::unlink()>:
c000b3ae:	83 ec 0c             	sub    esp,0xc
c000b3b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3c1:	83 f9 19             	cmp    ecx,0x19
c000b3c4:	77 2f                	ja     c000b3f5 <File::unlink()+0x47>
c000b3c6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b3cd:	85 c9                	test   ecx,ecx
c000b3cf:	74 24                	je     c000b3f5 <File::unlink()+0x47>
c000b3d1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b3d7:	85 c9                	test   ecx,ecx
c000b3d9:	74 1a                	je     c000b3f5 <File::unlink()+0x47>
c000b3db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3df:	b8 06 00 00 00       	mov    eax,0x6
c000b3e4:	75 0f                	jne    c000b3f5 <File::unlink()+0x47>
c000b3e6:	50                   	push   eax
c000b3e7:	83 c2 0d             	add    edx,0xd
c000b3ea:	50                   	push   eax
c000b3eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3ed:	52                   	push   edx
c000b3ee:	51                   	push   ecx
c000b3ef:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	83 c4 0c             	add    esp,0xc
c000b3f8:	c3                   	ret    
c000b3f9:	90                   	nop

c000b3fa <File::rename(char const*)>:
c000b3fa:	83 ec 0c             	sub    esp,0xc
c000b3fd:	b8 0b 00 00 00       	mov    eax,0xb
c000b402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b406:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b40d:	83 f9 19             	cmp    ecx,0x19
c000b410:	77 32                	ja     c000b444 <File::rename(char const*)+0x4a>
c000b412:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b419:	85 c9                	test   ecx,ecx
c000b41b:	74 27                	je     c000b444 <File::rename(char const*)+0x4a>
c000b41d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b423:	85 c9                	test   ecx,ecx
c000b425:	74 1d                	je     c000b444 <File::rename(char const*)+0x4a>
c000b427:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b42b:	b8 06 00 00 00       	mov    eax,0x6
c000b430:	75 12                	jne    c000b444 <File::rename(char const*)+0x4a>
c000b432:	50                   	push   eax
c000b433:	83 c2 0d             	add    edx,0xd
c000b436:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b43c:	52                   	push   edx
c000b43d:	51                   	push   ecx
c000b43e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	83 c4 0c             	add    esp,0xc
c000b447:	c3                   	ret    

c000b448 <File::chfatattr(unsigned char, unsigned char)>:
c000b448:	57                   	push   edi
c000b449:	b8 0b 00 00 00       	mov    eax,0xb
c000b44e:	56                   	push   esi
c000b44f:	53                   	push   ebx
c000b450:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b454:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b458:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b45c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b463:	83 f9 19             	cmp    ecx,0x19
c000b466:	77 37                	ja     c000b49f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b468:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b46f:	85 c9                	test   ecx,ecx
c000b471:	74 2c                	je     c000b49f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b473:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b479:	85 c9                	test   ecx,ecx
c000b47b:	74 22                	je     c000b49f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b47d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b481:	b8 06 00 00 00       	mov    eax,0x6
c000b486:	75 17                	jne    c000b49f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b488:	89 f0                	mov    eax,esi
c000b48a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b48c:	0f b6 db             	movzx  ebx,bl
c000b48f:	0f b6 f0             	movzx  esi,al
c000b492:	83 c2 0d             	add    edx,0xd
c000b495:	56                   	push   esi
c000b496:	53                   	push   ebx
c000b497:	52                   	push   edx
c000b498:	51                   	push   ecx
c000b499:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	5b                   	pop    ebx
c000b4a0:	5e                   	pop    esi
c000b4a1:	5f                   	pop    edi
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <File::exists()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	31 c0                	xor    eax,eax
c000b4a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4ad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4b4:	83 f9 19             	cmp    ecx,0x19
c000b4b7:	77 24                	ja     c000b4dd <File::exists()+0x39>
c000b4b9:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b4c0:	85 c9                	test   ecx,ecx
c000b4c2:	74 19                	je     c000b4dd <File::exists()+0x39>
c000b4c4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4ca:	85 c9                	test   ecx,ecx
c000b4cc:	74 0f                	je     c000b4dd <File::exists()+0x39>
c000b4ce:	50                   	push   eax
c000b4cf:	83 c2 0d             	add    edx,0xd
c000b4d2:	50                   	push   eax
c000b4d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4d5:	52                   	push   edx
c000b4d6:	51                   	push   ecx
c000b4d7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	83 c4 0c             	add    esp,0xc
c000b4e0:	c3                   	ret    
c000b4e1:	90                   	nop

c000b4e2 <File::stat(unsigned long long*, bool*)>:
c000b4e2:	56                   	push   esi
c000b4e3:	53                   	push   ebx
c000b4e4:	50                   	push   eax
c000b4e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b4ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4fd:	83 f9 19             	cmp    ecx,0x19
c000b500:	77 3d                	ja     c000b53f <File::stat(unsigned long long*, bool*)+0x5d>
c000b502:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b509:	85 c9                	test   ecx,ecx
c000b50b:	74 32                	je     c000b53f <File::stat(unsigned long long*, bool*)+0x5d>
c000b50d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b513:	85 c9                	test   ecx,ecx
c000b515:	74 28                	je     c000b53f <File::stat(unsigned long long*, bool*)+0x5d>
c000b517:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b51b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b51d:	74 13                	je     c000b532 <File::stat(unsigned long long*, bool*)+0x50>
c000b51f:	83 ec 04             	sub    esp,0x4
c000b522:	56                   	push   esi
c000b523:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b529:	51                   	push   ecx
c000b52a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b52d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b530:	eb 0a                	jmp    c000b53c <File::stat(unsigned long long*, bool*)+0x5a>
c000b532:	53                   	push   ebx
c000b533:	83 c2 0d             	add    edx,0xd
c000b536:	56                   	push   esi
c000b537:	52                   	push   edx
c000b538:	51                   	push   ecx
c000b539:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	5a                   	pop    edx
c000b540:	5b                   	pop    ebx
c000b541:	5e                   	pop    esi
c000b542:	c3                   	ret    

c000b543 <Fs::setcwd(Process*, char*)>:
c000b543:	55                   	push   ebp
c000b544:	57                   	push   edi
c000b545:	56                   	push   esi
c000b546:	53                   	push   ebx
c000b547:	81 ec 20 02 00 00    	sub    esp,0x220
c000b54d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b554:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b55a:	57                   	push   edi
c000b55b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b562:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b566:	56                   	push   esi
c000b567:	e8 32 fa ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b56c:	89 34 24             	mov    DWORD PTR [esp],esi
c000b56f:	e8 0c 50 ff ff       	call   c0000580 <strlen>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	83 f8 02             	cmp    eax,0x2
c000b57a:	77 15                	ja     c000b591 <Fs::setcwd(Process*, char*)+0x4e>
c000b57c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b581:	83 eb 41             	sub    ebx,0x41
c000b584:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b58b:	85 c0                	test   eax,eax
c000b58d:	75 1c                	jne    c000b5ab <Fs::setcwd(Process*, char*)+0x68>
c000b58f:	eb 2f                	jmp    c000b5c0 <Fs::setcwd(Process*, char*)+0x7d>
c000b591:	83 ec 0c             	sub    esp,0xc
c000b594:	56                   	push   esi
c000b595:	e8 e6 4f ff ff       	call   c0000580 <strlen>
c000b59a:	83 c4 10             	add    esp,0x10
c000b59d:	83 f8 03             	cmp    eax,0x3
c000b5a0:	75 57                	jne    c000b5f9 <Fs::setcwd(Process*, char*)+0xb6>
c000b5a2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5a7:	75 50                	jne    c000b5f9 <Fs::setcwd(Process*, char*)+0xb6>
c000b5a9:	eb d1                	jmp    c000b57c <Fs::setcwd(Process*, char*)+0x39>
c000b5ab:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b5b2:	75 0c                	jne    c000b5c0 <Fs::setcwd(Process*, char*)+0x7d>
c000b5b4:	83 ec 0c             	sub    esp,0xc
c000b5b7:	50                   	push   eax
c000b5b8:	e8 9f 1d 00 00       	call   c000d35c <LogicalDisk::mount()>
c000b5bd:	83 c4 10             	add    esp,0x10
c000b5c0:	83 fb 19             	cmp    ebx,0x19
c000b5c3:	b8 03 00 00 00       	mov    eax,0x3
c000b5c8:	0f 87 c6 00 00 00    	ja     c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b5ce:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b5d5:	b8 05 00 00 00       	mov    eax,0x5
c000b5da:	85 d2                	test   edx,edx
c000b5dc:	0f 84 b2 00 00 00    	je     c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b5e2:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b5e9:	b8 06 00 00 00       	mov    eax,0x6
c000b5ee:	0f 85 92 00 00 00    	jne    c000b686 <Fs::setcwd(Process*, char*)+0x143>
c000b5f4:	e9 9b 00 00 00       	jmp    c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b5f9:	83 ec 0c             	sub    esp,0xc
c000b5fc:	68 14 01 00 00       	push   0x114
c000b601:	e8 c5 c4 ff ff       	call   c0007acb <malloc>
c000b606:	83 c4 0c             	add    esp,0xc
c000b609:	55                   	push   ebp
c000b60a:	56                   	push   esi
c000b60b:	50                   	push   eax
c000b60c:	89 c3                	mov    ebx,eax
c000b60e:	e8 67 fb ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000b613:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b618:	83 c4 0c             	add    esp,0xc
c000b61b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b61f:	50                   	push   eax
c000b620:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b624:	50                   	push   eax
c000b625:	53                   	push   ebx
c000b626:	e8 b7 fe ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c000b62b:	83 c4 10             	add    esp,0x10
c000b62e:	83 f8 02             	cmp    eax,0x2
c000b631:	74 27                	je     c000b65a <Fs::setcwd(Process*, char*)+0x117>
c000b633:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b638:	75 1c                	jne    c000b656 <Fs::setcwd(Process*, char*)+0x113>
c000b63a:	85 db                	test   ebx,ebx
c000b63c:	b8 02 00 00 00       	mov    eax,0x2
c000b641:	74 51                	je     c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b643:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b645:	83 ec 0c             	sub    esp,0xc
c000b648:	53                   	push   ebx
c000b649:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b64c:	83 c4 10             	add    esp,0x10
c000b64f:	b8 02 00 00 00       	mov    eax,0x2
c000b654:	eb 3e                	jmp    c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b656:	85 c0                	test   eax,eax
c000b658:	74 1c                	je     c000b676 <Fs::setcwd(Process*, char*)+0x133>
c000b65a:	85 db                	test   ebx,ebx
c000b65c:	b8 01 00 00 00       	mov    eax,0x1
c000b661:	74 31                	je     c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b663:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b665:	83 ec 0c             	sub    esp,0xc
c000b668:	53                   	push   ebx
c000b669:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b66c:	83 c4 10             	add    esp,0x10
c000b66f:	b8 01 00 00 00       	mov    eax,0x1
c000b674:	eb 1e                	jmp    c000b694 <Fs::setcwd(Process*, char*)+0x151>
c000b676:	85 db                	test   ebx,ebx
c000b678:	74 0c                	je     c000b686 <Fs::setcwd(Process*, char*)+0x143>
c000b67a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b67c:	83 ec 0c             	sub    esp,0xc
c000b67f:	53                   	push   ebx
c000b680:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b683:	83 c4 10             	add    esp,0x10
c000b686:	50                   	push   eax
c000b687:	50                   	push   eax
c000b688:	56                   	push   esi
c000b689:	57                   	push   edi
c000b68a:	e8 c1 4f ff ff       	call   c0000650 <strcpy>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	31 c0                	xor    eax,eax
c000b694:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b69a:	5b                   	pop    ebx
c000b69b:	5e                   	pop    esi
c000b69c:	5f                   	pop    edi
c000b69d:	5d                   	pop    ebp
c000b69e:	c3                   	ret    
c000b69f:	90                   	nop

c000b6a0 <Directory::Directory(char const*, Process*)>:
c000b6a0:	83 ec 0c             	sub    esp,0xc
c000b6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a7:	83 ec 08             	sub    esp,0x8
c000b6aa:	6a 00                	push   0x0
c000b6ac:	50                   	push   eax
c000b6ad:	e8 e8 da ff ff       	call   c000919a <UnixFile::UnixFile(int)>
c000b6b2:	83 c4 10             	add    esp,0x10
c000b6b5:	ba 1c 0a 02 c0       	mov    edx,0xc0020a1c
c000b6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6be:	89 10                	mov    DWORD PTR [eax],edx
c000b6c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ce:	83 c0 0d             	add    eax,0xd
c000b6d1:	83 ec 04             	sub    esp,0x4
c000b6d4:	52                   	push   edx
c000b6d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d9:	50                   	push   eax
c000b6da:	e8 bf f8 ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6df:	83 c4 10             	add    esp,0x10
c000b6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6e9:	83 e8 41             	sub    eax,0x41
c000b6ec:	88 c2                	mov    dl,al
c000b6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b704:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b70a:	0f b6 c0             	movzx  eax,al
c000b70d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b714:	85 c0                	test   eax,eax
c000b716:	74 3e                	je     c000b756 <Directory::Directory(char const*, Process*)+0xb6>
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b722:	0f b6 c0             	movzx  eax,al
c000b725:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b72c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b732:	85 c0                	test   eax,eax
c000b734:	75 20                	jne    c000b756 <Directory::Directory(char const*, Process*)+0xb6>
c000b736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b740:	0f b6 c0             	movzx  eax,al
c000b743:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b74a:	83 ec 0c             	sub    esp,0xc
c000b74d:	50                   	push   eax
c000b74e:	e8 09 1c 00 00       	call   c000d35c <LogicalDisk::mount()>
c000b753:	83 c4 10             	add    esp,0x10
c000b756:	90                   	nop
c000b757:	83 c4 0c             	add    esp,0xc
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Directory::open()>:
c000b75c:	53                   	push   ebx
c000b75d:	b8 0b 00 00 00       	mov    eax,0xb
c000b762:	83 ec 08             	sub    esp,0x8
c000b765:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b769:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b770:	83 fa 19             	cmp    edx,0x19
c000b773:	77 3d                	ja     c000b7b2 <Directory::open()+0x56>
c000b775:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b77c:	85 d2                	test   edx,edx
c000b77e:	74 32                	je     c000b7b2 <Directory::open()+0x56>
c000b780:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b786:	85 d2                	test   edx,edx
c000b788:	74 28                	je     c000b7b2 <Directory::open()+0x56>
c000b78a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b78e:	b8 06 00 00 00       	mov    eax,0x6
c000b793:	75 1d                	jne    c000b7b2 <Directory::open()+0x56>
c000b795:	50                   	push   eax
c000b796:	8b 02                	mov    eax,DWORD PTR [edx]
c000b798:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b79e:	51                   	push   ecx
c000b79f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7a2:	51                   	push   ecx
c000b7a3:	52                   	push   edx
c000b7a4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	85 c0                	test   eax,eax
c000b7ac:	75 04                	jne    c000b7b2 <Directory::open()+0x56>
c000b7ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7b2:	83 c4 08             	add    esp,0x8
c000b7b5:	5b                   	pop    ebx
c000b7b6:	c3                   	ret    
c000b7b7:	90                   	nop

c000b7b8 <Directory::close()>:
c000b7b8:	53                   	push   ebx
c000b7b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b7be:	83 ec 08             	sub    esp,0x8
c000b7c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7cc:	83 f9 19             	cmp    ecx,0x19
c000b7cf:	77 41                	ja     c000b812 <Directory::close()+0x5a>
c000b7d1:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7d8:	85 db                	test   ebx,ebx
c000b7da:	74 36                	je     c000b812 <Directory::close()+0x5a>
c000b7dc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b7e3:	74 2d                	je     c000b812 <Directory::close()+0x5a>
c000b7e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7e9:	b8 05 00 00 00       	mov    eax,0x5
c000b7ee:	74 22                	je     c000b812 <Directory::close()+0x5a>
c000b7f0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b7f4:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7fb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b801:	53                   	push   ebx
c000b802:	53                   	push   ebx
c000b803:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b805:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b80b:	50                   	push   eax
c000b80c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 c4 08             	add    esp,0x8
c000b815:	5b                   	pop    ebx
c000b816:	c3                   	ret    
c000b817:	90                   	nop

c000b818 <Directory::unlink()>:
c000b818:	83 ec 0c             	sub    esp,0xc
c000b81b:	b8 0b 00 00 00       	mov    eax,0xb
c000b820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b824:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b82b:	83 f9 19             	cmp    ecx,0x19
c000b82e:	77 2f                	ja     c000b85f <Directory::unlink()+0x47>
c000b830:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b837:	85 c9                	test   ecx,ecx
c000b839:	74 24                	je     c000b85f <Directory::unlink()+0x47>
c000b83b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b841:	85 c9                	test   ecx,ecx
c000b843:	74 1a                	je     c000b85f <Directory::unlink()+0x47>
c000b845:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b849:	b8 06 00 00 00       	mov    eax,0x6
c000b84e:	75 0f                	jne    c000b85f <Directory::unlink()+0x47>
c000b850:	50                   	push   eax
c000b851:	83 c2 0d             	add    edx,0xd
c000b854:	50                   	push   eax
c000b855:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b857:	52                   	push   edx
c000b858:	51                   	push   ecx
c000b859:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b85c:	83 c4 10             	add    esp,0x10
c000b85f:	83 c4 0c             	add    esp,0xc
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <Directory::rename(char const*)>:
c000b864:	83 ec 0c             	sub    esp,0xc
c000b867:	b8 0b 00 00 00       	mov    eax,0xb
c000b86c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b870:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b877:	83 f9 19             	cmp    ecx,0x19
c000b87a:	77 32                	ja     c000b8ae <Directory::rename(char const*)+0x4a>
c000b87c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b883:	85 c9                	test   ecx,ecx
c000b885:	74 27                	je     c000b8ae <Directory::rename(char const*)+0x4a>
c000b887:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b88d:	85 c9                	test   ecx,ecx
c000b88f:	74 1d                	je     c000b8ae <Directory::rename(char const*)+0x4a>
c000b891:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b895:	b8 06 00 00 00       	mov    eax,0x6
c000b89a:	75 12                	jne    c000b8ae <Directory::rename(char const*)+0x4a>
c000b89c:	50                   	push   eax
c000b89d:	83 c2 0d             	add    edx,0xd
c000b8a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8a6:	52                   	push   edx
c000b8a7:	51                   	push   ecx
c000b8a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b8ab:	83 c4 10             	add    esp,0x10
c000b8ae:	83 c4 0c             	add    esp,0xc
c000b8b1:	c3                   	ret    

c000b8b2 <Directory::exists()>:
c000b8b2:	83 ec 0c             	sub    esp,0xc
c000b8b5:	31 c0                	xor    eax,eax
c000b8b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8c2:	83 f9 19             	cmp    ecx,0x19
c000b8c5:	77 24                	ja     c000b8eb <Directory::exists()+0x39>
c000b8c7:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b8ce:	85 c9                	test   ecx,ecx
c000b8d0:	74 19                	je     c000b8eb <Directory::exists()+0x39>
c000b8d2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8d8:	85 c9                	test   ecx,ecx
c000b8da:	74 0f                	je     c000b8eb <Directory::exists()+0x39>
c000b8dc:	50                   	push   eax
c000b8dd:	83 c2 0d             	add    edx,0xd
c000b8e0:	50                   	push   eax
c000b8e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8e3:	52                   	push   edx
c000b8e4:	51                   	push   ecx
c000b8e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8e8:	83 c4 10             	add    esp,0x10
c000b8eb:	83 c4 0c             	add    esp,0xc
c000b8ee:	c3                   	ret    
c000b8ef:	90                   	nop

c000b8f0 <Directory::read(dirent*)>:
c000b8f0:	83 ec 1c             	sub    esp,0x1c
c000b8f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b8fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b903:	83 f9 19             	cmp    ecx,0x19
c000b906:	77 30                	ja     c000b938 <Directory::read(dirent*)+0x48>
c000b908:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b90f:	85 c9                	test   ecx,ecx
c000b911:	74 25                	je     c000b938 <Directory::read(dirent*)+0x48>
c000b913:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b91a:	74 1c                	je     c000b938 <Directory::read(dirent*)+0x48>
c000b91c:	83 ec 0c             	sub    esp,0xc
c000b91f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b921:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b925:	51                   	push   ecx
c000b926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b92a:	6a 00                	push   0x0
c000b92c:	68 10 01 00 00       	push   0x110
c000b931:	52                   	push   edx
c000b932:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b935:	83 c4 20             	add    esp,0x20
c000b938:	83 c4 1c             	add    esp,0x1c
c000b93b:	c3                   	ret    

c000b93c <Directory::create()>:
c000b93c:	83 ec 0c             	sub    esp,0xc
c000b93f:	b8 0b 00 00 00       	mov    eax,0xb
c000b944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b94f:	83 f9 19             	cmp    ecx,0x19
c000b952:	77 2f                	ja     c000b983 <Directory::create()+0x47>
c000b954:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b95b:	85 c9                	test   ecx,ecx
c000b95d:	74 24                	je     c000b983 <Directory::create()+0x47>
c000b95f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b965:	85 c9                	test   ecx,ecx
c000b967:	74 1a                	je     c000b983 <Directory::create()+0x47>
c000b969:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b96d:	b8 06 00 00 00       	mov    eax,0x6
c000b972:	75 0f                	jne    c000b983 <Directory::create()+0x47>
c000b974:	50                   	push   eax
c000b975:	83 c2 0d             	add    edx,0xd
c000b978:	50                   	push   eax
c000b979:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b97b:	52                   	push   edx
c000b97c:	51                   	push   ecx
c000b97d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b980:	83 c4 10             	add    esp,0x10
c000b983:	83 c4 0c             	add    esp,0xc
c000b986:	c3                   	ret    
c000b987:	90                   	nop

c000b988 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b988:	b8 0a 00 00 00       	mov    eax,0xa
c000b98d:	c3                   	ret    
c000b98e:	66 90                	xchg   ax,ax

c000b990 <Bus::Bus(char const*)>:
c000b990:	83 ec 0c             	sub    esp,0xc
c000b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b997:	83 ec 08             	sub    esp,0x8
c000b99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b99e:	50                   	push   eax
c000b99f:	e8 28 08 00 00       	call   c000c1cc <Device::Device(char const*)>
c000b9a4:	83 c4 10             	add    esp,0x10
c000b9a7:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c000b9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b0:	89 10                	mov    DWORD PTR [eax],edx
c000b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9c0:	90                   	nop
c000b9c1:	83 c4 0c             	add    esp,0xc
c000b9c4:	c3                   	ret    
c000b9c5:	90                   	nop
c000b9c6:	66 90                	xchg   ax,ax

c000b9c8 <Bus::~Bus()>:
c000b9c8:	83 ec 0c             	sub    esp,0xc
c000b9cb:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c000b9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d4:	89 10                	mov    DWORD PTR [eax],edx
c000b9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9da:	83 ec 0c             	sub    esp,0xc
c000b9dd:	50                   	push   eax
c000b9de:	e8 53 05 00 00       	call   c000bf36 <Device::~Device()>
c000b9e3:	83 c4 10             	add    esp,0x10
c000b9e6:	90                   	nop
c000b9e7:	83 c4 0c             	add    esp,0xc
c000b9ea:	c3                   	ret    
c000b9eb:	90                   	nop

c000b9ec <Bus::~Bus()>:
c000b9ec:	83 ec 0c             	sub    esp,0xc
c000b9ef:	83 ec 0c             	sub    esp,0xc
c000b9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f6:	e8 cd ff ff ff       	call   c000b9c8 <Bus::~Bus()>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	83 ec 08             	sub    esp,0x8
c000ba01:	68 58 01 00 00       	push   0x158
c000ba06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba0a:	e8 f1 ed ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	c3                   	ret    

c000ba16 <beepThread(void*)>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ba1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba22:	48                   	dec    eax
c000ba23:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ba28:	75 01                	jne    c000ba2b <beepThread(void*)+0x15>
c000ba2a:	fb                   	sti    
c000ba2b:	6b c2 0a             	imul   eax,edx,0xa
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	50                   	push   eax
c000ba32:	e8 09 9c 00 00       	call   c0015640 <milliTenthSleep(unsigned int)>
c000ba37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba3e:	e8 56 bb 00 00       	call   c0017599 <HalMakeBeep(int)>
c000ba43:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba4b:	83 c4 1c             	add    esp,0x1c
c000ba4e:	e9 d1 9a 00 00       	jmp    c0015524 <blockTask(TaskState)>

c000ba53 <Krnl::beep(int, int, bool)>:
c000ba53:	56                   	push   esi
c000ba54:	53                   	push   ebx
c000ba55:	83 ec 10             	sub    esp,0x10
c000ba58:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba64:	e8 30 bb 00 00       	call   c0017599 <HalMakeBeep(int)>
c000ba69:	89 f0                	mov    eax,esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	84 c0                	test   al,al
c000ba70:	74 1e                	je     c000ba90 <Krnl::beep(int, int, bool)+0x3d>
c000ba72:	6b db 0a             	imul   ebx,ebx,0xa
c000ba75:	83 ec 0c             	sub    esp,0xc
c000ba78:	53                   	push   ebx
c000ba79:	e8 c2 9b 00 00       	call   c0015640 <milliTenthSleep(unsigned int)>
c000ba7e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba86:	83 c4 14             	add    esp,0x14
c000ba89:	5b                   	pop    ebx
c000ba8a:	5e                   	pop    esi
c000ba8b:	e9 09 bb 00 00       	jmp    c0017599 <HalMakeBeep(int)>
c000ba90:	68 e6 00 00 00       	push   0xe6
c000ba95:	53                   	push   ebx
c000ba96:	68 16 ba 00 c0       	push   0xc000ba16
c000ba9b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000baa1:	e8 32 96 00 00       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c000baa6:	83 c4 14             	add    esp,0x14
c000baa9:	5b                   	pop    ebx
c000baaa:	5e                   	pop    esi
c000baab:	c3                   	ret    

c000baac <User::loadClockSettings(int)>:
c000baac:	53                   	push   ebx
c000baad:	83 ec 14             	sub    esp,0x14
c000bab0:	68 14 01 00 00       	push   0x114
c000bab5:	e8 11 c0 ff ff       	call   c0007acb <malloc>
c000baba:	83 c4 0c             	add    esp,0xc
c000babd:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000bac3:	68 5c 0a 02 c0       	push   0xc0020a5c
c000bac8:	50                   	push   eax
c000bac9:	89 c3                	mov    ebx,eax
c000bacb:	e8 aa f6 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000bad0:	58                   	pop    eax
c000bad1:	5a                   	pop    edx
c000bad2:	6a 01                	push   0x1
c000bad4:	53                   	push   ebx
c000bad5:	e8 5c f7 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c000bada:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000badd:	e8 b2 f7 ff ff       	call   c000b294 <File::close()>
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	85 db                	test   ebx,ebx
c000bae7:	74 0f                	je     c000baf8 <User::loadClockSettings(int)+0x4c>
c000bae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baeb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000baef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf2:	83 c4 08             	add    esp,0x8
c000baf5:	5b                   	pop    ebx
c000baf6:	ff e0                	jmp    eax
c000baf8:	83 c4 08             	add    esp,0x8
c000bafb:	5b                   	pop    ebx
c000bafc:	c3                   	ret    
c000bafd:	90                   	nop

c000bafe <Clock::Clock(char const*)>:
c000bafe:	83 ec 0c             	sub    esp,0xc
c000bb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb05:	83 ec 08             	sub    esp,0x8
c000bb08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0c:	50                   	push   eax
c000bb0d:	e8 ba 06 00 00       	call   c000c1cc <Device::Device(char const*)>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	ba 84 0a 02 c0       	mov    edx,0xc0020a84
c000bb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1e:	89 10                	mov    DWORD PTR [eax],edx
c000bb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb24:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb2e:	90                   	nop
c000bb2f:	83 c4 0c             	add    esp,0xc
c000bb32:	c3                   	ret    
c000bb33:	90                   	nop

c000bb34 <Clock::~Clock()>:
c000bb34:	83 ec 0c             	sub    esp,0xc
c000bb37:	ba 84 0a 02 c0       	mov    edx,0xc0020a84
c000bb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb40:	89 10                	mov    DWORD PTR [eax],edx
c000bb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb46:	83 ec 0c             	sub    esp,0xc
c000bb49:	50                   	push   eax
c000bb4a:	e8 e7 03 00 00       	call   c000bf36 <Device::~Device()>
c000bb4f:	83 c4 10             	add    esp,0x10
c000bb52:	90                   	nop
c000bb53:	83 c4 0c             	add    esp,0xc
c000bb56:	c3                   	ret    
c000bb57:	90                   	nop

c000bb58 <Clock::~Clock()>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	83 ec 0c             	sub    esp,0xc
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 cd ff ff ff       	call   c000bb34 <Clock::~Clock()>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 ec 08             	sub    esp,0x8
c000bb6d:	68 58 01 00 00       	push   0x158
c000bb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb76:	e8 85 ec ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	83 c4 0c             	add    esp,0xc
c000bb81:	c3                   	ret    

c000bb82 <Clock::timeInSecondsLocal()>:
c000bb82:	53                   	push   ebx
c000bb83:	83 ec 14             	sub    esp,0x14
c000bb86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb8a:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb8c:	50                   	push   eax
c000bb8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb90:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb97:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb9d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bba3:	89 cb                	mov    ebx,ecx
c000bba5:	c1 fb 1f             	sar    ebx,0x1f
c000bba8:	01 c8                	add    eax,ecx
c000bbaa:	11 da                	adc    edx,ebx
c000bbac:	83 c4 10             	add    esp,0x10
c000bbaf:	31 c9                	xor    ecx,ecx
c000bbb1:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bbb8:	74 05                	je     c000bbbf <Clock::timeInSecondsLocal()+0x3d>
c000bbba:	b9 08 07 00 00       	mov    ecx,0x708
c000bbbf:	31 db                	xor    ebx,ebx
c000bbc1:	01 c8                	add    eax,ecx
c000bbc3:	11 da                	adc    edx,ebx
c000bbc5:	83 c4 08             	add    esp,0x8
c000bbc8:	5b                   	pop    ebx
c000bbc9:	c3                   	ret    

c000bbca <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbca:	57                   	push   edi
c000bbcb:	56                   	push   esi
c000bbcc:	53                   	push   ebx
c000bbcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbd5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbdb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbde:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000bbe5:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000bbeb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbf1:	99                   	cdq    
c000bbf2:	29 c6                	sub    esi,eax
c000bbf4:	19 d7                	sbb    edi,edx
c000bbf6:	89 f0                	mov    eax,esi
c000bbf8:	31 f6                	xor    esi,esi
c000bbfa:	89 fa                	mov    edx,edi
c000bbfc:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bc03:	74 05                	je     c000bc0a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc05:	be 08 07 00 00       	mov    esi,0x708
c000bc0a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc0e:	31 ff                	xor    edi,edi
c000bc10:	29 f0                	sub    eax,esi
c000bc12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc16:	19 fa                	sbb    edx,edi
c000bc18:	89 d8                	mov    eax,ebx
c000bc1a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc1e:	5b                   	pop    ebx
c000bc1f:	5e                   	pop    esi
c000bc20:	5f                   	pop    edi
c000bc21:	ff e0                	jmp    eax

c000bc23 <datetimeToSeconds(datetime_t)>:
c000bc23:	55                   	push   ebp
c000bc24:	57                   	push   edi
c000bc25:	56                   	push   esi
c000bc26:	53                   	push   ebx
c000bc27:	83 ec 0c             	sub    esp,0xc
c000bc2a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bc2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc32:	89 f7                	mov    edi,esi
c000bc34:	89 f0                	mov    eax,esi
c000bc36:	0f b6 cf             	movzx  ecx,bh
c000bc39:	0f b6 c4             	movzx  eax,ah
c000bc3c:	c1 ef 10             	shr    edi,0x10
c000bc3f:	89 da                	mov    edx,ebx
c000bc41:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000bc44:	89 f9                	mov    ecx,edi
c000bc46:	0f b6 f9             	movzx  edi,cl
c000bc49:	89 f1                	mov    ecx,esi
c000bc4b:	6b c0 3c             	imul   eax,eax,0x3c
c000bc4e:	0f b6 f1             	movzx  esi,cl
c000bc51:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000bc57:	0f b6 db             	movzx  ebx,bl
c000bc5a:	c1 ea 10             	shr    edx,0x10
c000bc5d:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000bc63:	01 f8                	add    eax,edi
c000bc65:	01 f0                	add    eax,esi
c000bc67:	89 04 24             	mov    DWORD PTR [esp],eax
c000bc6a:	c1 f8 1f             	sar    eax,0x1f
c000bc6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc71:	89 e8                	mov    eax,ebp
c000bc73:	0f b6 c0             	movzx  eax,al
c000bc76:	8b 0c 85 c0 0a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf540]
c000bc7d:	83 f8 01             	cmp    eax,0x1
c000bc80:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000bc84:	0f b7 da             	movzx  ebx,dx
c000bc87:	76 27                	jbe    c000bcb0 <datetimeToSeconds(datetime_t)+0x8d>
c000bc89:	80 e2 03             	and    dl,0x3
c000bc8c:	75 22                	jne    c000bcb0 <datetimeToSeconds(datetime_t)+0x8d>
c000bc8e:	31 d2                	xor    edx,edx
c000bc90:	be 64 00 00 00       	mov    esi,0x64
c000bc95:	89 d8                	mov    eax,ebx
c000bc97:	f7 f6                	div    esi
c000bc99:	85 d2                	test   edx,edx
c000bc9b:	75 12                	jne    c000bcaf <datetimeToSeconds(datetime_t)+0x8c>
c000bc9d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bca3:	be 90 01 00 00       	mov    esi,0x190
c000bca8:	99                   	cdq    
c000bca9:	f7 fe                	idiv   esi
c000bcab:	85 d2                	test   edx,edx
c000bcad:	75 01                	jne    c000bcb0 <datetimeToSeconds(datetime_t)+0x8d>
c000bcaf:	41                   	inc    ecx
c000bcb0:	83 fb 46             	cmp    ebx,0x46
c000bcb3:	76 48                	jbe    c000bcfd <datetimeToSeconds(datetime_t)+0xda>
c000bcb5:	be 46 00 00 00       	mov    esi,0x46
c000bcba:	bf 64 00 00 00       	mov    edi,0x64
c000bcbf:	bd 90 01 00 00       	mov    ebp,0x190
c000bcc4:	f7 c6 03 00 00 00    	test   esi,0x3
c000bcca:	b8 6d 01 00 00       	mov    eax,0x16d
c000bccf:	75 23                	jne    c000bcf4 <datetimeToSeconds(datetime_t)+0xd1>
c000bcd1:	89 f0                	mov    eax,esi
c000bcd3:	99                   	cdq    
c000bcd4:	f7 ff                	idiv   edi
c000bcd6:	b8 6e 01 00 00       	mov    eax,0x16e
c000bcdb:	85 d2                	test   edx,edx
c000bcdd:	75 15                	jne    c000bcf4 <datetimeToSeconds(datetime_t)+0xd1>
c000bcdf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bce5:	99                   	cdq    
c000bce6:	f7 fd                	idiv   ebp
c000bce8:	83 fa 01             	cmp    edx,0x1
c000bceb:	19 c0                	sbb    eax,eax
c000bced:	f7 d0                	not    eax
c000bcef:	05 6e 01 00 00       	add    eax,0x16e
c000bcf4:	46                   	inc    esi
c000bcf5:	01 c1                	add    ecx,eax
c000bcf7:	39 de                	cmp    esi,ebx
c000bcf9:	7c c9                	jl     c000bcc4 <datetimeToSeconds(datetime_t)+0xa1>
c000bcfb:	eb 34                	jmp    c000bd31 <datetimeToSeconds(datetime_t)+0x10e>
c000bcfd:	74 32                	je     c000bd31 <datetimeToSeconds(datetime_t)+0x10e>
c000bcff:	b8 45 00 00 00       	mov    eax,0x45
c000bd04:	89 c2                	mov    edx,eax
c000bd06:	83 e2 03             	and    edx,0x3
c000bd09:	39 d8                	cmp    eax,ebx
c000bd0b:	7e 0f                	jle    c000bd1c <datetimeToSeconds(datetime_t)+0xf9>
c000bd0d:	83 fa 01             	cmp    edx,0x1
c000bd10:	19 d2                	sbb    edx,edx
c000bd12:	48                   	dec    eax
c000bd13:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd1a:	eb e8                	jmp    c000bd04 <datetimeToSeconds(datetime_t)+0xe1>
c000bd1c:	85 d2                	test   edx,edx
c000bd1e:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd23:	75 0a                	jne    c000bd2f <datetimeToSeconds(datetime_t)+0x10c>
c000bd25:	83 fb 01             	cmp    ebx,0x1
c000bd28:	19 c0                	sbb    eax,eax
c000bd2a:	05 6e 01 00 00       	add    eax,0x16e
c000bd2f:	29 c1                	sub    ecx,eax
c000bd31:	b8 80 51 01 00       	mov    eax,0x15180
c000bd36:	f7 e9                	imul   ecx
c000bd38:	03 04 24             	add    eax,DWORD PTR [esp]
c000bd3b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bd3f:	83 c4 0c             	add    esp,0xc
c000bd42:	5b                   	pop    ebx
c000bd43:	5e                   	pop    esi
c000bd44:	5f                   	pop    edi
c000bd45:	5d                   	pop    ebp
c000bd46:	c3                   	ret    
c000bd47:	90                   	nop

c000bd48 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd48:	57                   	push   edi
c000bd49:	56                   	push   esi
c000bd4a:	53                   	push   ebx
c000bd4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd4f:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd51:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd5c:	e8 c2 fe ff ff       	call   c000bc23 <datetimeToSeconds(datetime_t)>
c000bd61:	59                   	pop    ecx
c000bd62:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bd69:	5b                   	pop    ebx
c000bd6a:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bd70:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd76:	89 cb                	mov    ebx,ecx
c000bd78:	c1 fb 1f             	sar    ebx,0x1f
c000bd7b:	29 c8                	sub    eax,ecx
c000bd7d:	19 da                	sbb    edx,ebx
c000bd7f:	31 c9                	xor    ecx,ecx
c000bd81:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bd88:	74 05                	je     c000bd8f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd8a:	b9 08 07 00 00       	mov    ecx,0x708
c000bd8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd93:	31 db                	xor    ebx,ebx
c000bd95:	29 c8                	sub    eax,ecx
c000bd97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd9b:	19 da                	sbb    edx,ebx
c000bd9d:	89 f8                	mov    eax,edi
c000bd9f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bda3:	5b                   	pop    ebx
c000bda4:	5e                   	pop    esi
c000bda5:	5f                   	pop    edi
c000bda6:	ff e0                	jmp    eax

c000bda8 <secondsToDatetime(unsigned long long)>:
c000bda8:	55                   	push   ebp
c000bda9:	57                   	push   edi
c000bdaa:	56                   	push   esi
c000bdab:	53                   	push   ebx
c000bdac:	83 ec 1c             	sub    esp,0x1c
c000bdaf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdb3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdbb:	6a 00                	push   0x0
c000bdbd:	68 80 51 01 00       	push   0x15180
c000bdc2:	55                   	push   ebp
c000bdc3:	57                   	push   edi
c000bdc4:	e8 a7 2b 01 00       	call   c001e970 <__udivdi3>
c000bdc9:	83 c4 10             	add    esp,0x10
c000bdcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdd0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdd6:	6a 00                	push   0x0
c000bdd8:	68 80 51 01 00       	push   0x15180
c000bddd:	55                   	push   ebp
c000bdde:	57                   	push   edi
c000bddf:	bf 10 0e 00 00       	mov    edi,0xe10
c000bde4:	e8 87 2c 01 00       	call   c001ea70 <__umoddi3>
c000bde9:	83 c4 10             	add    esp,0x10
c000bdec:	99                   	cdq    
c000bded:	f7 ff                	idiv   edi
c000bdef:	bf 3c 00 00 00       	mov    edi,0x3c
c000bdf4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdf7:	89 d0                	mov    eax,edx
c000bdf9:	99                   	cdq    
c000bdfa:	f7 ff                	idiv   edi
c000bdfc:	85 db                	test   ebx,ebx
c000bdfe:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be01:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be04:	79 11                	jns    c000be17 <secondsToDatetime(unsigned long long)+0x6f>
c000be06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be0a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be10:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be15:	eb 07                	jmp    c000be1e <secondsToDatetime(unsigned long long)+0x76>
c000be17:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be1c:	89 d8                	mov    eax,ebx
c000be1e:	99                   	cdq    
c000be1f:	bf b4 05 00 00       	mov    edi,0x5b4
c000be24:	f7 f9                	idiv   ecx
c000be26:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be2b:	31 d2                	xor    edx,edx
c000be2d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be36:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be3e:	01 c3                	add    ebx,eax
c000be40:	89 d8                	mov    eax,ebx
c000be42:	f7 f1                	div    ecx
c000be44:	31 d2                	xor    edx,edx
c000be46:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be49:	89 d8                	mov    eax,ebx
c000be4b:	f7 f7                	div    edi
c000be4d:	31 d2                	xor    edx,edx
c000be4f:	29 c1                	sub    ecx,eax
c000be51:	89 d8                	mov    eax,ebx
c000be53:	f7 f5                	div    ebp
c000be55:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be5a:	31 d2                	xor    edx,edx
c000be5c:	29 c1                	sub    ecx,eax
c000be5e:	89 c8                	mov    eax,ecx
c000be60:	f7 f5                	div    ebp
c000be62:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be67:	31 d2                	xor    edx,edx
c000be69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be6d:	89 c8                	mov    eax,ecx
c000be6f:	f7 f5                	div    ebp
c000be71:	31 d2                	xor    edx,edx
c000be73:	01 c3                	add    ebx,eax
c000be75:	89 c8                	mov    eax,ecx
c000be77:	f7 f7                	div    edi
c000be79:	bf 99 00 00 00       	mov    edi,0x99
c000be7e:	31 d2                	xor    edx,edx
c000be80:	29 c3                	sub    ebx,eax
c000be82:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be8a:	29 c3                	sub    ebx,eax
c000be8c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be8f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be92:	83 c1 02             	add    ecx,0x2
c000be95:	89 c8                	mov    eax,ecx
c000be97:	bb 05 00 00 00       	mov    ebx,0x5
c000be9c:	f7 f7                	div    edi
c000be9e:	31 d2                	xor    edx,edx
c000bea0:	89 c7                	mov    edi,eax
c000bea2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bea8:	83 c0 02             	add    eax,0x2
c000beab:	f7 f3                	div    ebx
c000bead:	89 eb                	mov    ebx,ebp
c000beaf:	29 c3                	sub    ebx,eax
c000beb1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beb7:	88 1e                	mov    BYTE PTR [esi],bl
c000beb9:	19 c0                	sbb    eax,eax
c000bebb:	31 d2                	xor    edx,edx
c000bebd:	83 e0 0c             	and    eax,0xc
c000bec0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bec4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000becc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bed0:	83 f9 01             	cmp    ecx,0x1
c000bed3:	0f 96 c2             	setbe  dl
c000bed6:	41                   	inc    ecx
c000bed7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000beda:	01 d0                	add    eax,edx
c000bedc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bee0:	83 c4 1c             	add    esp,0x1c
c000bee3:	89 f0                	mov    eax,esi
c000bee5:	5b                   	pop    ebx
c000bee6:	5e                   	pop    esi
c000bee7:	5f                   	pop    edi
c000bee8:	5d                   	pop    ebp
c000bee9:	c2 04 00             	ret    0x4

c000beec <Clock::timeInDatetimeLocal()>:
c000beec:	53                   	push   ebx
c000beed:	83 ec 14             	sub    esp,0x14
c000bef0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bef4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bef8:	e8 85 fc ff ff       	call   c000bb82 <Clock::timeInSecondsLocal()>
c000befd:	83 c4 0c             	add    esp,0xc
c000bf00:	52                   	push   edx
c000bf01:	50                   	push   eax
c000bf02:	53                   	push   ebx
c000bf03:	e8 a0 fe ff ff       	call   c000bda8 <secondsToDatetime(unsigned long long)>
c000bf08:	89 d8                	mov    eax,ebx
c000bf0a:	83 c4 14             	add    esp,0x14
c000bf0d:	5b                   	pop    ebx
c000bf0e:	c2 04 00             	ret    0x4
c000bf11:	90                   	nop

c000bf12 <Device::hibernate()>:
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <Device::wake()>:
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <Device::detect()>:
c000bf16:	c3                   	ret    
c000bf17:	90                   	nop

c000bf18 <Device::disableLegacy()>:
c000bf18:	c3                   	ret    
c000bf19:	90                   	nop

c000bf1a <Device::powerSaving(PowerSavingLevel)>:
c000bf1a:	c3                   	ret    
c000bf1b:	90                   	nop

c000bf1c <DriverlessDevice::close(int, int, void*)>:
c000bf1c:	31 c0                	xor    eax,eax
c000bf1e:	c3                   	ret    
c000bf1f:	90                   	nop

c000bf20 <DriverlessDevice::detect()>:
c000bf20:	c3                   	ret    
c000bf21:	90                   	nop

c000bf22 <DriverlessDevice::open(int, int, void*)>:
c000bf22:	83 ec 18             	sub    esp,0x18
c000bf25:	68 f0 0a 02 c0       	push   0xc0020af0
c000bf2a:	e8 ee 4b 00 00       	call   c0010b1d <KePanic(char const*)>
c000bf2f:	83 c8 ff             	or     eax,0xffffffff
c000bf32:	83 c4 1c             	add    esp,0x1c
c000bf35:	c3                   	ret    

c000bf36 <Device::~Device()>:
c000bf36:	ba 50 0b 02 c0       	mov    edx,0xc0020b50
c000bf3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf3f:	89 10                	mov    DWORD PTR [eax],edx
c000bf41:	90                   	nop
c000bf42:	c3                   	ret    
c000bf43:	90                   	nop

c000bf44 <Device::~Device()>:
c000bf44:	83 ec 0c             	sub    esp,0xc
c000bf47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf4b:	e8 e6 ff ff ff       	call   c000bf36 <Device::~Device()>
c000bf50:	83 c4 04             	add    esp,0x4
c000bf53:	83 ec 08             	sub    esp,0x8
c000bf56:	68 58 01 00 00       	push   0x158
c000bf5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5f:	e8 9c e8 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000bf64:	83 c4 10             	add    esp,0x10
c000bf67:	83 c4 0c             	add    esp,0xc
c000bf6a:	c3                   	ret    
c000bf6b:	90                   	nop

c000bf6c <Device::findAndLoadDriver()>:
c000bf6c:	c7 44 24 04 0e 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b0e
c000bf74:	e9 85 e9 ff ff       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>
c000bf79:	90                   	nop

c000bf7a <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf7a:	57                   	push   edi
c000bf7b:	b9 09 00 00 00       	mov    ecx,0x9
c000bf80:	56                   	push   esi
c000bf81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf85:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf89:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf93:	81 c7 18 01 00 00    	add    edi,0x118
c000bf99:	fc                   	cld    
c000bf9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf9c:	5e                   	pop    esi
c000bf9d:	5f                   	pop    edi
c000bf9e:	c3                   	ret    
c000bf9f:	90                   	nop

c000bfa0 <Device::preOpenACPI(void*, char*, char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bfa6:	56                   	push   esi
c000bfa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfb3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfbd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfc3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfcb:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfd1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfd5:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfdc:	5e                   	pop    esi
c000bfdd:	5f                   	pop    edi
c000bfde:	c3                   	ret    
c000bfdf:	90                   	nop

c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfe0:	53                   	push   ebx
c000bfe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfe9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bff1:	0f b6 c0             	movzx  eax,al
c000bff4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bffc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c000:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c004:	5b                   	pop    ebx
c000c005:	e9 aa 05 00 00       	jmp    c000c5b4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c00a <Device::getParent()>:
c000c00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c00e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c014:	c3                   	ret    
c000c015:	90                   	nop

c000c016 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c01a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c01e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c027:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c02b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c02f:	e9 f7 06 00 00       	jmp    c000c72b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c034 <Device::addChild(Device*)>:
c000c034:	53                   	push   ebx
c000c035:	83 ec 08             	sub    esp,0x8
c000c038:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c03c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c040:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c046:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c04c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c04e:	85 d2                	test   edx,edx
c000c050:	74 04                	je     c000c056 <Device::addChild(Device*)+0x22>
c000c052:	89 d3                	mov    ebx,edx
c000c054:	eb f6                	jmp    c000c04c <Device::addChild(Device*)+0x18>
c000c056:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c059:	83 ec 0c             	sub    esp,0xc
c000c05c:	6a 08                	push   0x8
c000c05e:	e8 68 ba ff ff       	call   c0007acb <malloc>
c000c063:	89 03                	mov    DWORD PTR [ebx],eax
c000c065:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c06b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c072:	83 c4 18             	add    esp,0x18
c000c075:	5b                   	pop    ebx
c000c076:	c3                   	ret    
c000c077:	90                   	nop

c000c078 <Device::removeAllChildren()>:
c000c078:	56                   	push   esi
c000c079:	53                   	push   ebx
c000c07a:	52                   	push   edx
c000c07b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c07f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c085:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c088:	74 17                	je     c000c0a1 <Device::removeAllChildren()+0x29>
c000c08a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c08d:	85 c0                	test   eax,eax
c000c08f:	74 0c                	je     c000c09d <Device::removeAllChildren()+0x25>
c000c091:	8b 10                	mov    edx,DWORD PTR [eax]
c000c093:	83 ec 0c             	sub    esp,0xc
c000c096:	50                   	push   eax
c000c097:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c09a:	83 c4 10             	add    esp,0x10
c000c09d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c09f:	eb e4                	jmp    c000c085 <Device::removeAllChildren()+0xd>
c000c0a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0ad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0ba:	58                   	pop    eax
c000c0bb:	5b                   	pop    ebx
c000c0bc:	5e                   	pop    esi
c000c0bd:	c3                   	ret    

c000c0be <Device::hibernateAll()>:
c000c0be:	53                   	push   ebx
c000c0bf:	83 ec 14             	sub    esp,0x14
c000c0c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0c8:	53                   	push   ebx
c000c0c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d8:	74 0f                	je     c000c0e9 <Device::hibernateAll()+0x2b>
c000c0da:	83 ec 0c             	sub    esp,0xc
c000c0dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0e0:	e8 d9 ff ff ff       	call   c000c0be <Device::hibernateAll()>
c000c0e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0e7:	eb e9                	jmp    c000c0d2 <Device::hibernateAll()+0x14>
c000c0e9:	83 c4 08             	add    esp,0x8
c000c0ec:	5b                   	pop    ebx
c000c0ed:	c3                   	ret    

c000c0ee <Device::wakeAll()>:
c000c0ee:	53                   	push   ebx
c000c0ef:	83 ec 14             	sub    esp,0x14
c000c0f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0f8:	53                   	push   ebx
c000c0f9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c102:	83 c4 10             	add    esp,0x10
c000c105:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c108:	74 0f                	je     c000c119 <Device::wakeAll()+0x2b>
c000c10a:	83 ec 0c             	sub    esp,0xc
c000c10d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c110:	e8 d9 ff ff ff       	call   c000c0ee <Device::wakeAll()>
c000c115:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c117:	eb e9                	jmp    c000c102 <Device::wakeAll()+0x14>
c000c119:	83 c4 08             	add    esp,0x8
c000c11c:	5b                   	pop    ebx
c000c11d:	c3                   	ret    

c000c11e <Device::detectAll()>:
c000c11e:	53                   	push   ebx
c000c11f:	83 ec 14             	sub    esp,0x14
c000c122:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c126:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c128:	53                   	push   ebx
c000c129:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c12c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c132:	83 c4 10             	add    esp,0x10
c000c135:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c138:	74 0f                	je     c000c149 <Device::detectAll()+0x2b>
c000c13a:	83 ec 0c             	sub    esp,0xc
c000c13d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c140:	e8 d9 ff ff ff       	call   c000c11e <Device::detectAll()>
c000c145:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c147:	eb e9                	jmp    c000c132 <Device::detectAll()+0x14>
c000c149:	83 c4 08             	add    esp,0x8
c000c14c:	5b                   	pop    ebx
c000c14d:	c3                   	ret    

c000c14e <Device::disableLegacyAll()>:
c000c14e:	c3                   	ret    
c000c14f:	90                   	nop

c000c150 <Device::loadDriversForAll()>:
c000c150:	c3                   	ret    
c000c151:	90                   	nop

c000c152 <Device::closeAll()>:
c000c152:	53                   	push   ebx
c000c153:	83 ec 08             	sub    esp,0x8
c000c156:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c15a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c15c:	6a 00                	push   0x0
c000c15e:	6a 00                	push   0x0
c000c160:	6a 00                	push   0x0
c000c162:	53                   	push   ebx
c000c163:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c166:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c16c:	83 c4 10             	add    esp,0x10
c000c16f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c172:	74 0f                	je     c000c183 <Device::closeAll()+0x31>
c000c174:	83 ec 0c             	sub    esp,0xc
c000c177:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c17a:	e8 d3 ff ff ff       	call   c000c152 <Device::closeAll()>
c000c17f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c181:	eb e9                	jmp    c000c16c <Device::closeAll()+0x1a>
c000c183:	83 c4 08             	add    esp,0x8
c000c186:	5b                   	pop    ebx
c000c187:	c3                   	ret    

c000c188 <Device::powerSavingAll(PowerSavingLevel)>:
c000c188:	56                   	push   esi
c000c189:	53                   	push   ebx
c000c18a:	83 ec 0c             	sub    esp,0xc
c000c18d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c191:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c195:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c197:	56                   	push   esi
c000c198:	53                   	push   ebx
c000c199:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c19c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1a8:	74 0f                	je     c000c1b9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1aa:	52                   	push   edx
c000c1ab:	52                   	push   edx
c000c1ac:	56                   	push   esi
c000c1ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1b0:	e8 d3 ff ff ff       	call   c000c188 <Device::powerSavingAll(PowerSavingLevel)>
c000c1b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1b7:	eb e9                	jmp    c000c1a2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1b9:	58                   	pop    eax
c000c1ba:	5b                   	pop    ebx
c000c1bb:	5e                   	pop    esi
c000c1bc:	c3                   	ret    
c000c1bd:	90                   	nop

c000c1be <Device::setName(char const*)>:
c000c1be:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1c6:	e9 85 44 ff ff       	jmp    c0000650 <strcpy>
c000c1cb:	90                   	nop

c000c1cc <Device::Device(char const*)>:
c000c1cc:	83 ec 1c             	sub    esp,0x1c
c000c1cf:	ba 50 0b 02 c0       	mov    edx,0xc0020b50
c000c1d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d8:	89 10                	mov    DWORD PTR [eax],edx
c000c1da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1de:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ec:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c208:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c212:	83 ec 08             	sub    esp,0x8
c000c215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c21d:	e8 9c ff ff ff       	call   c000c1be <Device::setName(char const*)>
c000c222:	83 c4 10             	add    esp,0x10
c000c225:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c22d:	83 ec 0c             	sub    esp,0xc
c000c230:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c234:	e8 92 b8 ff ff       	call   c0007acb <malloc>
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c242:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c249:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c24d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c257:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c25d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c267:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c26d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c278:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c283:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c28e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2aa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c2c2:	90                   	nop
c000c2c3:	83 c4 1c             	add    esp,0x1c
c000c2c6:	c3                   	ret    
c000c2c7:	90                   	nop

c000c2c8 <Device::getName()>:
c000c2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2cc:	05 d0 00 00 00       	add    eax,0xd0
c000c2d1:	c3                   	ret    

c000c2d2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2d2:	83 ec 0c             	sub    esp,0xc
c000c2d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2d9:	83 ec 08             	sub    esp,0x8
c000c2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2e0:	50                   	push   eax
c000c2e1:	e8 e6 fe ff ff       	call   c000c1cc <Device::Device(char const*)>
c000c2e6:	83 c4 10             	add    esp,0x10
c000c2e9:	ba 7c 0b 02 c0       	mov    edx,0xc0020b7c
c000c2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f2:	89 10                	mov    DWORD PTR [eax],edx
c000c2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c302:	90                   	nop
c000c303:	83 c4 0c             	add    esp,0xc
c000c306:	c3                   	ret    
c000c307:	90                   	nop

c000c308 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c308:	57                   	push   edi
c000c309:	56                   	push   esi
c000c30a:	53                   	push   ebx
c000c30b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c30f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c313:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c317:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c31d:	75 0c                	jne    c000c32b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c31f:	52                   	push   edx
c000c320:	52                   	push   edx
c000c321:	53                   	push   ebx
c000c322:	56                   	push   esi
c000c323:	e8 fa 2a 01 00       	call   c001ee22 <LinkedList<Device>::addElement(Device*)>
c000c328:	83 c4 10             	add    esp,0x10
c000c32b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c331:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c334:	74 12                	je     c000c348 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c336:	50                   	push   eax
c000c337:	57                   	push   edi
c000c338:	56                   	push   esi
c000c339:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c33c:	e8 c7 ff ff ff       	call   c000c308 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c341:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	eb e9                	jmp    c000c331 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c348:	5b                   	pop    ebx
c000c349:	5e                   	pop    esi
c000c34a:	5f                   	pop    edi
c000c34b:	c3                   	ret    

c000c34c <getDevicesOfType(DeviceType)>:
c000c34c:	53                   	push   ebx
c000c34d:	83 ec 14             	sub    esp,0x14
c000c350:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c354:	53                   	push   ebx
c000c355:	e8 a4 2b 01 00       	call   c001eefe <LinkedList<Device>::LinkedList()>
c000c35a:	83 c4 0c             	add    esp,0xc
c000c35d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c361:	53                   	push   ebx
c000c362:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c368:	e8 9b ff ff ff       	call   c000c308 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c36d:	83 c4 18             	add    esp,0x18
c000c370:	89 d8                	mov    eax,ebx
c000c372:	5b                   	pop    ebx
c000c373:	c2 04 00             	ret    0x4
c000c376:	66 90                	xchg   ax,ax

c000c378 <HardDiskController::HardDiskController(char const*)>:
c000c378:	83 ec 0c             	sub    esp,0xc
c000c37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37f:	83 ec 08             	sub    esp,0x8
c000c382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c386:	50                   	push   eax
c000c387:	e8 40 fe ff ff       	call   c000c1cc <Device::Device(char const*)>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	ba a8 0b 02 c0       	mov    edx,0xc0020ba8
c000c394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c398:	89 10                	mov    DWORD PTR [eax],edx
c000c39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c39e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3a8:	90                   	nop
c000c3a9:	83 c4 0c             	add    esp,0xc
c000c3ac:	c3                   	ret    
c000c3ad:	90                   	nop
c000c3ae:	66 90                	xchg   ax,ax

c000c3b0 <HardDiskController::~HardDiskController()>:
c000c3b0:	83 ec 0c             	sub    esp,0xc
c000c3b3:	ba a8 0b 02 c0       	mov    edx,0xc0020ba8
c000c3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3bc:	89 10                	mov    DWORD PTR [eax],edx
c000c3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c2:	83 ec 0c             	sub    esp,0xc
c000c3c5:	50                   	push   eax
c000c3c6:	e8 6b fb ff ff       	call   c000bf36 <Device::~Device()>
c000c3cb:	83 c4 10             	add    esp,0x10
c000c3ce:	90                   	nop
c000c3cf:	83 c4 0c             	add    esp,0xc
c000c3d2:	c3                   	ret    
c000c3d3:	90                   	nop

c000c3d4 <HardDiskController::~HardDiskController()>:
c000c3d4:	83 ec 0c             	sub    esp,0xc
c000c3d7:	83 ec 0c             	sub    esp,0xc
c000c3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3de:	e8 cd ff ff ff       	call   c000c3b0 <HardDiskController::~HardDiskController()>
c000c3e3:	83 c4 10             	add    esp,0x10
c000c3e6:	83 ec 08             	sub    esp,0x8
c000c3e9:	68 58 01 00 00       	push   0x158
c000c3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f2:	e8 09 e4 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000c3f7:	83 c4 10             	add    esp,0x10
c000c3fa:	83 c4 0c             	add    esp,0xc
c000c3fd:	c3                   	ret    

c000c3fe <PhysicalDisk::eject()>:
c000c3fe:	83 c8 ff             	or     eax,0xffffffff
c000c401:	c3                   	ret    

c000c402 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c402:	83 ec 0c             	sub    esp,0xc
c000c405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c409:	83 ec 08             	sub    esp,0x8
c000c40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c410:	50                   	push   eax
c000c411:	e8 b6 fd ff ff       	call   c000c1cc <Device::Device(char const*)>
c000c416:	83 c4 10             	add    esp,0x10
c000c419:	ba d4 0b 02 c0       	mov    edx,0xc0020bd4
c000c41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c422:	89 10                	mov    DWORD PTR [eax],edx
c000c424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c428:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c433:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c450:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c464:	90                   	nop
c000c465:	83 c4 0c             	add    esp,0xc
c000c468:	c3                   	ret    
c000c469:	90                   	nop

c000c46a <PhysicalDisk::startCache()>:
c000c46a:	56                   	push   esi
c000c46b:	53                   	push   ebx
c000c46c:	83 ec 10             	sub    esp,0x10
c000c46f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c473:	6a 44                	push   0x44
c000c475:	e8 51 b6 ff ff       	call   c0007acb <malloc>
c000c47a:	89 c6                	mov    esi,eax
c000c47c:	58                   	pop    eax
c000c47d:	5a                   	pop    edx
c000c47e:	53                   	push   ebx
c000c47f:	56                   	push   esi
c000c480:	e8 83 17 00 00       	call   c000dc08 <VCache::VCache(PhysicalDisk*)>
c000c485:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c48b:	83 c4 14             	add    esp,0x14
c000c48e:	5b                   	pop    ebx
c000c48f:	5e                   	pop    esi
c000c490:	c3                   	ret    
c000c491:	90                   	nop

c000c492 <PhysicalDisk::~PhysicalDisk()>:
c000c492:	83 ec 0c             	sub    esp,0xc
c000c495:	ba d4 0b 02 c0       	mov    edx,0xc0020bd4
c000c49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49e:	89 10                	mov    DWORD PTR [eax],edx
c000c4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	50                   	push   eax
c000c4a8:	e8 89 fa ff ff       	call   c000bf36 <Device::~Device()>
c000c4ad:	83 c4 10             	add    esp,0x10
c000c4b0:	90                   	nop
c000c4b1:	83 c4 0c             	add    esp,0xc
c000c4b4:	c3                   	ret    
c000c4b5:	90                   	nop

c000c4b6 <PhysicalDisk::~PhysicalDisk()>:
c000c4b6:	83 ec 0c             	sub    esp,0xc
c000c4b9:	83 ec 0c             	sub    esp,0xc
c000c4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c0:	e8 cd ff ff ff       	call   c000c492 <PhysicalDisk::~PhysicalDisk()>
c000c4c5:	83 c4 10             	add    esp,0x10
c000c4c8:	83 ec 08             	sub    esp,0x8
c000c4cb:	68 6c 01 00 00       	push   0x16c
c000c4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d4:	e8 27 e3 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000c4d9:	83 c4 10             	add    esp,0x10
c000c4dc:	83 c4 0c             	add    esp,0xc
c000c4df:	c3                   	ret    

c000c4e0 <int_handler>:
c000c4e0:	55                   	push   ebp
c000c4e1:	57                   	push   edi
c000c4e2:	56                   	push   esi
c000c4e3:	53                   	push   ebx
c000c4e4:	83 ec 0c             	sub    esp,0xc
c000c4e7:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c4ee:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4f2:	74 0b                	je     c000c4ff <int_handler+0x1f>
c000c4f4:	fa                   	cli    
c000c4f5:	f4                   	hlt    
c000c4f6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c4fd:	75 f5                	jne    c000c4f4 <int_handler+0x14>
c000c4ff:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c502:	8d 46 e0             	lea    eax,[esi-0x20]
c000c505:	83 f8 17             	cmp    eax,0x17
c000c508:	76 40                	jbe    c000c54a <int_handler+0x6a>
c000c50a:	c1 e6 04             	shl    esi,0x4
c000c50d:	31 db                	xor    ebx,ebx
c000c50f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c515:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c51b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c51f:	85 c0                	test   eax,eax
c000c521:	74 13                	je     c000c536 <int_handler+0x56>
c000c523:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c527:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c52a:	74 2c                	je     c000c558 <int_handler+0x78>
c000c52c:	83 ec 08             	sub    esp,0x8
c000c52f:	52                   	push   edx
c000c530:	57                   	push   edi
c000c531:	ff d0                	call   eax
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	83 c3 01             	add    ebx,0x1
c000c539:	83 fb 04             	cmp    ebx,0x4
c000c53c:	75 dd                	jne    c000c51b <int_handler+0x3b>
c000c53e:	83 c4 0c             	add    esp,0xc
c000c541:	31 c0                	xor    eax,eax
c000c543:	5b                   	pop    ebx
c000c544:	31 d2                	xor    edx,edx
c000c546:	5e                   	pop    esi
c000c547:	5f                   	pop    edi
c000c548:	5d                   	pop    ebp
c000c549:	c3                   	ret    
c000c54a:	83 ec 0c             	sub    esp,0xc
c000c54d:	50                   	push   eax
c000c54e:	e8 83 b0 00 00       	call   c00175d6 <HalEndOfInterrupt(int)>
c000c553:	83 c4 10             	add    esp,0x10
c000c556:	eb b2                	jmp    c000c50a <int_handler+0x2a>
c000c558:	83 ec 08             	sub    esp,0x8
c000c55b:	52                   	push   edx
c000c55c:	57                   	push   edi
c000c55d:	ff d0                	call   eax
c000c55f:	83 c4 10             	add    esp,0x10
c000c562:	83 c4 0c             	add    esp,0xc
c000c565:	5b                   	pop    ebx
c000c566:	5e                   	pop    esi
c000c567:	5f                   	pop    edi
c000c568:	5d                   	pop    ebp
c000c569:	c3                   	ret    

c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c56a:	56                   	push   esi
c000c56b:	31 c0                	xor    eax,eax
c000c56d:	53                   	push   ebx
c000c56e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c572:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c576:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c57a:	89 ca                	mov    edx,ecx
c000c57c:	c1 e2 04             	shl    edx,0x4
c000c57f:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c587:	74 17                	je     c000c5a0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c589:	83 c0 01             	add    eax,0x1
c000c58c:	83 f8 04             	cmp    eax,0x4
c000c58f:	75 ee                	jne    c000c57f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c591:	c7 44 24 0c 04 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020c04
c000c599:	5b                   	pop    ebx
c000c59a:	5e                   	pop    esi
c000c59b:	e9 7d 45 00 00       	jmp    c0010b1d <KePanic(char const*)>
c000c5a0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5a3:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c5aa:	5b                   	pop    ebx
c000c5ab:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c5b2:	5e                   	pop    esi
c000c5b3:	c3                   	ret    

c000c5b4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5b4:	55                   	push   ebp
c000c5b5:	57                   	push   edi
c000c5b6:	56                   	push   esi
c000c5b7:	53                   	push   ebx
c000c5b8:	83 ec 0c             	sub    esp,0xc
c000c5bb:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c5c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5c9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5d0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c5d3:	74 57                	je     c000c62c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c5d5:	84 c0                	test   al,al
c000c5d7:	89 c7                	mov    edi,eax
c000c5d9:	74 1d                	je     c000c5f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5db:	83 fe 0f             	cmp    esi,0xf
c000c5de:	0f 8f d9 00 00 00    	jg     c000c6bd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c5e4:	0f b6 b6 e8 26 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd918]
c000c5eb:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c5f3:	d1 ef                	shr    edi,1
c000c5f5:	83 e7 01             	and    edi,0x1
c000c5f8:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c5fd:	83 ec 08             	sub    esp,0x8
c000c600:	31 db                	xor    ebx,ebx
c000c602:	50                   	push   eax
c000c603:	68 11 0c 02 c0       	push   0xc0020c11
c000c608:	e8 f1 e2 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000c60d:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	85 c0                	test   eax,eax
c000c617:	7f 59                	jg     c000c672 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c619:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c61c:	83 ec 0c             	sub    esp,0xc
c000c61f:	68 28 0c 02 c0       	push   0xc0020c28
c000c624:	e8 f4 44 00 00       	call   c0010b1d <KePanic(char const*)>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	89 e8                	mov    eax,ebp
c000c62e:	31 d2                	xor    edx,edx
c000c630:	c1 e0 04             	shl    eax,0x4
c000c633:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c63a:	85 c9                	test   ecx,ecx
c000c63c:	0f 84 92 00 00 00    	je     c000c6d4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c642:	83 c2 01             	add    edx,0x1
c000c645:	83 fa 04             	cmp    edx,0x4
c000c648:	75 e9                	jne    c000c633 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c64a:	83 ec 0c             	sub    esp,0xc
c000c64d:	68 7c 0c 02 c0       	push   0xc0020c7c
c000c652:	e8 c6 44 00 00       	call   c0010b1d <KePanic(char const*)>
c000c657:	83 c4 10             	add    esp,0x10
c000c65a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c65f:	83 c4 0c             	add    esp,0xc
c000c662:	5b                   	pop    ebx
c000c663:	5e                   	pop    esi
c000c664:	5f                   	pop    edi
c000c665:	5d                   	pop    ebp
c000c666:	c3                   	ret    
c000c667:	83 c3 01             	add    ebx,0x1
c000c66a:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c670:	7e a7                	jle    c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c672:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c679:	83 ec 08             	sub    esp,0x8
c000c67c:	56                   	push   esi
c000c67d:	55                   	push   ebp
c000c67e:	e8 c9 16 01 00       	call   c001dd4c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c683:	83 c4 10             	add    esp,0x10
c000c686:	84 c0                	test   al,al
c000c688:	74 dd                	je     c000c667 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c68a:	89 f8                	mov    eax,edi
c000c68c:	83 ec 04             	sub    esp,0x4
c000c68f:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c696:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c699:	0f b6 f8             	movzx  edi,al
c000c69c:	57                   	push   edi
c000c69d:	89 e8                	mov    eax,ebp
c000c69f:	6a 00                	push   0x0
c000c6a1:	0f b6 c0             	movzx  eax,al
c000c6a4:	50                   	push   eax
c000c6a5:	89 f0                	mov    eax,esi
c000c6a7:	6a 00                	push   0x0
c000c6a9:	0f b6 c0             	movzx  eax,al
c000c6ac:	6a 00                	push   0x0
c000c6ae:	50                   	push   eax
c000c6af:	53                   	push   ebx
c000c6b0:	e8 03 18 01 00       	call   c001deb8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6b5:	83 c4 20             	add    esp,0x20
c000c6b8:	e9 6f ff ff ff       	jmp    c000c62c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c6bd:	83 ec 0c             	sub    esp,0xc
c000c6c0:	31 ff                	xor    edi,edi
c000c6c2:	68 44 0c 02 c0       	push   0xc0020c44
c000c6c7:	e8 51 44 00 00       	call   c0010b1d <KePanic(char const*)>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	e9 24 ff ff ff       	jmp    c000c5f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6d4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c6d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c6db:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c6e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c6e6:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c6ed:	83 c4 0c             	add    esp,0xc
c000c6f0:	89 f0                	mov    eax,esi
c000c6f2:	5b                   	pop    ebx
c000c6f3:	5e                   	pop    esi
c000c6f4:	5f                   	pop    edi
c000c6f5:	5d                   	pop    ebp
c000c6f6:	c3                   	ret    

c000c6f7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6ff:	c1 e0 04             	shl    eax,0x4
c000c702:	8d 50 10             	lea    edx,[eax+0x10]
c000c705:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c70b:	74 08                	je     c000c715 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c70d:	83 c0 04             	add    eax,0x4
c000c710:	39 d0                	cmp    eax,edx
c000c712:	75 f1                	jne    c000c705 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c714:	c3                   	ret    
c000c715:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c71f:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c729:	eb e2                	jmp    c000c70d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c72b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c72b:	56                   	push   esi
c000c72c:	53                   	push   ebx
c000c72d:	83 ec 04             	sub    esp,0x4
c000c730:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c735:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c739:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c73d:	74 0e                	je     c000c74d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c73f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c744:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c74b:	75 34                	jne    c000c781 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c74d:	8d 43 20             	lea    eax,[ebx+0x20]
c000c750:	c1 e0 04             	shl    eax,0x4
c000c753:	8d 50 10             	lea    edx,[eax+0x10]
c000c756:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c75c:	74 0d                	je     c000c76b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c75e:	83 c0 04             	add    eax,0x4
c000c761:	39 d0                	cmp    eax,edx
c000c763:	75 f1                	jne    c000c756 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c765:	83 c4 04             	add    esp,0x4
c000c768:	5b                   	pop    ebx
c000c769:	5e                   	pop    esi
c000c76a:	c3                   	ret    
c000c76b:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c775:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c77f:	eb dd                	jmp    c000c75e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c781:	83 fb 0f             	cmp    ebx,0xf
c000c784:	7f 09                	jg     c000c78f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c786:	0f b6 9b e8 26 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd918]
c000c78d:	eb be                	jmp    c000c74d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c78f:	83 ec 0c             	sub    esp,0xc
c000c792:	68 35 0c 02 c0       	push   0xc0020c35
c000c797:	e8 81 43 00 00       	call   c0010b1d <KePanic(char const*)>
c000c79c:	83 c4 10             	add    esp,0x10
c000c79f:	eb ac                	jmp    c000c74d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c7a1 <setupINTS()>:
c000c7a1:	31 c0                	xor    eax,eax
c000c7a3:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7ad:	83 c0 10             	add    eax,0x10
c000c7b0:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c7ba:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c7c4:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c7ce:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c7d8:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c7e2:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c7ec:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c7f6:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7fb:	75 a6                	jne    c000c7a3 <setupINTS()+0x2>
c000c7fd:	c3                   	ret    

c000c7fe <convertLegacyIRQNumber(int)>:
c000c7fe:	83 ec 0c             	sub    esp,0xc
c000c801:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c80b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c812:	74 0c                	je     c000c820 <convertLegacyIRQNumber(int)+0x22>
c000c814:	83 f8 0f             	cmp    eax,0xf
c000c817:	7f 0b                	jg     c000c824 <convertLegacyIRQNumber(int)+0x26>
c000c819:	0f b6 80 e8 26 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd918]
c000c820:	83 c4 0c             	add    esp,0xc
c000c823:	c3                   	ret    
c000c824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c828:	83 ec 0c             	sub    esp,0xc
c000c82b:	68 44 0c 02 c0       	push   0xc0020c44
c000c830:	e8 e8 42 00 00       	call   c0010b1d <KePanic(char const*)>
c000c835:	83 c4 10             	add    esp,0x10
c000c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83c:	83 c4 0c             	add    esp,0xc
c000c83f:	c3                   	ret    

c000c840 <startGUI(void*)>:
c000c840:	55                   	push   ebp
c000c841:	89 e5                	mov    ebp,esp
c000c843:	53                   	push   ebx
c000c844:	83 ec 04             	sub    esp,0x4
c000c847:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c84c:	83 e8 01             	sub    eax,0x1
c000c84f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c854:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c859:	85 c0                	test   eax,eax
c000c85b:	75 01                	jne    c000c85e <startGUI(void*)+0x1e>
c000c85d:	fb                   	sti    
c000c85e:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c864:	83 ec 08             	sub    esp,0x8
c000c867:	6a 01                	push   0x1
c000c869:	68 a1 0c 02 c0       	push   0xc0020ca1
c000c86e:	e8 45 80 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000c873:	83 c4 10             	add    esp,0x10
c000c876:	83 ec 08             	sub    esp,0x8
c000c879:	53                   	push   ebx
c000c87a:	50                   	push   eax
c000c87b:	e8 78 82 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000c880:	83 c4 10             	add    esp,0x10
c000c883:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c889:	83 ec 08             	sub    esp,0x8
c000c88c:	6a 01                	push   0x1
c000c88e:	68 bb 0c 02 c0       	push   0xc0020cbb
c000c893:	e8 20 80 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000c898:	83 c4 10             	add    esp,0x10
c000c89b:	83 ec 08             	sub    esp,0x8
c000c89e:	53                   	push   ebx
c000c89f:	50                   	push   eax
c000c8a0:	e8 53 82 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000c8a5:	83 c4 10             	add    esp,0x10
c000c8a8:	90                   	nop
c000c8a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8ac:	c9                   	leave  
c000c8ad:	c3                   	ret    

c000c8ae <startGUIVESA(void*)>:
c000c8ae:	55                   	push   ebp
c000c8af:	89 e5                	mov    ebp,esp
c000c8b1:	53                   	push   ebx
c000c8b2:	83 ec 04             	sub    esp,0x4
c000c8b5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c8ba:	83 e8 01             	sub    eax,0x1
c000c8bd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c8c2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c8c7:	85 c0                	test   eax,eax
c000c8c9:	75 01                	jne    c000c8cc <startGUIVESA(void*)+0x1e>
c000c8cb:	fb                   	sti    
c000c8cc:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c8d2:	83 ec 08             	sub    esp,0x8
c000c8d5:	6a 01                	push   0x1
c000c8d7:	68 d9 0c 02 c0       	push   0xc0020cd9
c000c8dc:	e8 d7 7f 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000c8e1:	83 c4 10             	add    esp,0x10
c000c8e4:	83 ec 08             	sub    esp,0x8
c000c8e7:	53                   	push   ebx
c000c8e8:	50                   	push   eax
c000c8e9:	e8 0a 82 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c8f7:	83 ec 08             	sub    esp,0x8
c000c8fa:	6a 01                	push   0x1
c000c8fc:	68 bb 0c 02 c0       	push   0xc0020cbb
c000c901:	e8 b2 7f 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000c906:	83 c4 10             	add    esp,0x10
c000c909:	83 ec 08             	sub    esp,0x8
c000c90c:	53                   	push   ebx
c000c90d:	50                   	push   eax
c000c90e:	e8 e5 81 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	90                   	nop
c000c917:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c91a:	c9                   	leave  
c000c91b:	c3                   	ret    

c000c91c <sendKeyToTerminal(unsigned char)>:
c000c91c:	55                   	push   ebp
c000c91d:	89 e5                	mov    ebp,esp
c000c91f:	83 ec 28             	sub    esp,0x28
c000c922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c925:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c928:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c92d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c931:	83 ec 08             	sub    esp,0x8
c000c934:	52                   	push   edx
c000c935:	50                   	push   eax
c000c936:	e8 73 c4 ff ff       	call   c0008dae <VgaText::receiveKey(unsigned char)>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c942:	83 f8 0a             	cmp    eax,0xa
c000c945:	74 16                	je     c000c95d <sendKeyToTerminal(unsigned char)+0x41>
c000c947:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c94b:	83 f8 03             	cmp    eax,0x3
c000c94e:	74 0d                	je     c000c95d <sendKeyToTerminal(unsigned char)+0x41>
c000c950:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c954:	83 f8 1c             	cmp    eax,0x1c
c000c957:	0f 85 97 00 00 00    	jne    c000c9f4 <sendKeyToTerminal(unsigned char)+0xd8>
c000c95d:	fa                   	cli    
c000c95e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c963:	83 c0 01             	add    eax,0x1
c000c966:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c96b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c970:	83 c0 01             	add    eax,0x1
c000c973:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c978:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c97d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c980:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c98a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c98e:	74 1f                	je     c000c9af <sendKeyToTerminal(unsigned char)+0x93>
c000c990:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c993:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c996:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c999:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c99c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c99f:	83 ec 0c             	sub    esp,0xc
c000c9a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c9a5:	e8 72 8e 00 00       	call   c001581c <unblockTask(ThreadControlBlock*)>
c000c9aa:	83 c4 10             	add    esp,0x10
c000c9ad:	eb db                	jmp    c000c98a <sendKeyToTerminal(unsigned char)+0x6e>
c000c9af:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c9b4:	83 e8 01             	sub    eax,0x1
c000c9b7:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c9bc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c9c1:	85 c0                	test   eax,eax
c000c9c3:	75 18                	jne    c000c9dd <sendKeyToTerminal(unsigned char)+0xc1>
c000c9c5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c9ca:	85 c0                	test   eax,eax
c000c9cc:	74 0f                	je     c000c9dd <sendKeyToTerminal(unsigned char)+0xc1>
c000c9ce:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c9d8:	e8 47 89 00 00       	call   c0015324 <schedule()>
c000c9dd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c9e2:	83 e8 01             	sub    eax,0x1
c000c9e5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c9ea:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c9ef:	85 c0                	test   eax,eax
c000c9f1:	75 01                	jne    c000c9f4 <sendKeyToTerminal(unsigned char)+0xd8>
c000c9f3:	fb                   	sti    
c000c9f4:	90                   	nop
c000c9f5:	c9                   	leave  
c000c9f6:	c3                   	ret    

c000c9f7 <sendKeyboardToken(KeyboardToken)>:
c000c9f7:	55                   	push   ebp
c000c9f8:	89 e5                	mov    ebp,esp
c000c9fa:	83 ec 18             	sub    esp,0x18
c000c9fd:	e8 6b 41 00 00       	call   c0010b6d <KeUserIOReceived()>
c000ca02:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca08:	0f b7 c0             	movzx  eax,ax
c000ca0b:	83 f2 01             	xor    edx,0x1
c000ca0e:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000ca14:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ca19:	85 c0                	test   eax,eax
c000ca1b:	74 24                	je     c000ca41 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca1d:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000ca23:	83 ec 04             	sub    esp,0x4
c000ca26:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ca2b:	83 ec 08             	sub    esp,0x8
c000ca2e:	89 e0                	mov    eax,esp
c000ca30:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000ca33:	89 08                	mov    DWORD PTR [eax],ecx
c000ca35:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000ca38:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ca3c:	ff d2                	call   edx
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca45:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca48:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000ca4d:	0f b6 d2             	movzx  edx,dl
c000ca50:	0f b6 c0             	movzx  eax,al
c000ca53:	39 c2                	cmp    edx,eax
c000ca55:	74 1c                	je     c000ca73 <sendKeyboardToken(KeyboardToken)+0x7c>
c000ca57:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca5a:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000ca5f:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000ca64:	0f b6 c0             	movzx  eax,al
c000ca67:	83 ec 0c             	sub    esp,0xc
c000ca6a:	50                   	push   eax
c000ca6b:	e8 9a ba ff ff       	call   c000850a <setTerminalScrollLock(bool)>
c000ca70:	83 c4 10             	add    esp,0x10
c000ca73:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca76:	0f b6 c0             	movzx  eax,al
c000ca79:	85 c0                	test   eax,eax
c000ca7b:	0f 84 da 00 00 00    	je     c000cb5b <sendKeyboardToken(KeyboardToken)+0x164>
c000ca81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca84:	0f b7 c0             	movzx  eax,ax
c000ca87:	3d 18 03 00 00       	cmp    eax,0x318
c000ca8c:	75 06                	jne    c000ca94 <sendKeyboardToken(KeyboardToken)+0x9d>
c000ca8e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca97:	0f b7 c0             	movzx  eax,ax
c000ca9a:	3d 19 03 00 00       	cmp    eax,0x319
c000ca9f:	75 06                	jne    c000caa7 <sendKeyboardToken(KeyboardToken)+0xb0>
c000caa1:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000caa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caaa:	0f b7 c0             	movzx  eax,ax
c000caad:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cab2:	75 06                	jne    c000caba <sendKeyboardToken(KeyboardToken)+0xc3>
c000cab4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000caba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabd:	0f b7 c0             	movzx  eax,ax
c000cac0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cac5:	75 06                	jne    c000cacd <sendKeyboardToken(KeyboardToken)+0xd6>
c000cac7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cacd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad0:	0f b7 c0             	movzx  eax,ax
c000cad3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cad8:	75 06                	jne    c000cae0 <sendKeyboardToken(KeyboardToken)+0xe9>
c000cada:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae3:	0f b7 c0             	movzx  eax,ax
c000cae6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000caeb:	75 06                	jne    c000caf3 <sendKeyboardToken(KeyboardToken)+0xfc>
c000caed:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf6:	0f b7 c0             	movzx  eax,ax
c000caf9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cafe:	75 06                	jne    c000cb06 <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb00:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb09:	0f b7 c0             	movzx  eax,ax
c000cb0c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb11:	75 06                	jne    c000cb19 <sendKeyboardToken(KeyboardToken)+0x122>
c000cb13:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb1c:	0f b7 c0             	movzx  eax,ax
c000cb1f:	3d 20 03 00 00       	cmp    eax,0x320
c000cb24:	75 06                	jne    c000cb2c <sendKeyboardToken(KeyboardToken)+0x135>
c000cb26:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb2f:	0f b7 c0             	movzx  eax,ax
c000cb32:	3d 21 03 00 00       	cmp    eax,0x321
c000cb37:	75 06                	jne    c000cb3f <sendKeyboardToken(KeyboardToken)+0x148>
c000cb39:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb42:	0f b7 c0             	movzx  eax,ax
c000cb45:	3d 22 03 00 00       	cmp    eax,0x322
c000cb4a:	0f 85 f1 00 00 00    	jne    c000cc41 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb50:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb56:	e9 e6 00 00 00       	jmp    c000cc41 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5e:	0f b7 c0             	movzx  eax,ax
c000cb61:	3d 18 03 00 00       	cmp    eax,0x318
c000cb66:	75 0a                	jne    c000cb72 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cb68:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb75:	0f b7 c0             	movzx  eax,ax
c000cb78:	3d 19 03 00 00       	cmp    eax,0x319
c000cb7d:	75 0a                	jne    c000cb89 <sendKeyboardToken(KeyboardToken)+0x192>
c000cb7f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb85:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb8c:	0f b7 c0             	movzx  eax,ax
c000cb8f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cb94:	75 0a                	jne    c000cba0 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cb96:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb9c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba3:	0f b7 c0             	movzx  eax,ax
c000cba6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cbab:	75 0a                	jne    c000cbb7 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cbad:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cbb3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbba:	0f b7 c0             	movzx  eax,ax
c000cbbd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cbc2:	75 0a                	jne    c000cbce <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cbc4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cbca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd1:	0f b7 c0             	movzx  eax,ax
c000cbd4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cbd9:	75 0a                	jne    c000cbe5 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cbdb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cbe1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe8:	0f b7 c0             	movzx  eax,ax
c000cbeb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cbf0:	75 0a                	jne    c000cbfc <sendKeyboardToken(KeyboardToken)+0x205>
c000cbf2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cbf8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbff:	0f b7 c0             	movzx  eax,ax
c000cc02:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc07:	75 0a                	jne    c000cc13 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc09:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc16:	0f b7 c0             	movzx  eax,ax
c000cc19:	3d 20 03 00 00       	cmp    eax,0x320
c000cc1e:	75 0a                	jne    c000cc2a <sendKeyboardToken(KeyboardToken)+0x233>
c000cc20:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc26:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2d:	0f b7 c0             	movzx  eax,ax
c000cc30:	3d 21 03 00 00       	cmp    eax,0x321
c000cc35:	75 0a                	jne    c000cc41 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc37:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc3d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc44:	0f b7 c0             	movzx  eax,ax
c000cc47:	3d 00 02 00 00       	cmp    eax,0x200
c000cc4c:	75 2f                	jne    c000cc7d <sendKeyboardToken(KeyboardToken)+0x286>
c000cc4e:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000cc53:	83 f0 01             	xor    eax,0x1
c000cc56:	0f b6 c0             	movzx  eax,al
c000cc59:	85 c0                	test   eax,eax
c000cc5b:	74 20                	je     c000cc7d <sendKeyboardToken(KeyboardToken)+0x286>
c000cc5d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cc62:	6a 01                	push   0x1
c000cc64:	6a 00                	push   0x0
c000cc66:	68 40 c8 00 c0       	push   0xc000c840
c000cc6b:	50                   	push   eax
c000cc6c:	e8 67 84 00 00       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c000cc71:	83 c4 10             	add    esp,0x10
c000cc74:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000cc7b:	eb 3a                	jmp    c000ccb7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc80:	0f b7 c0             	movzx  eax,ax
c000cc83:	3d 01 02 00 00       	cmp    eax,0x201
c000cc88:	75 2d                	jne    c000ccb7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc8a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000cc8f:	83 f0 01             	xor    eax,0x1
c000cc92:	0f b6 c0             	movzx  eax,al
c000cc95:	85 c0                	test   eax,eax
c000cc97:	74 1e                	je     c000ccb7 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cc99:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cc9e:	6a 01                	push   0x1
c000cca0:	6a 00                	push   0x0
c000cca2:	68 ae c8 00 c0       	push   0xc000c8ae
c000cca7:	50                   	push   eax
c000cca8:	e8 2b 84 00 00       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c000ccad:	83 c4 10             	add    esp,0x10
c000ccb0:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ccb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccba:	0f b7 c0             	movzx  eax,ax
c000ccbd:	3d 25 03 00 00       	cmp    eax,0x325
c000ccc2:	75 06                	jne    c000ccca <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ccc4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ccca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	3d 24 03 00 00       	cmp    eax,0x324
c000ccd5:	75 06                	jne    c000ccdd <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ccd7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ccdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cce0:	0f b7 c0             	movzx  eax,ax
c000cce3:	3d 23 03 00 00       	cmp    eax,0x323
c000cce8:	75 06                	jne    c000ccf0 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ccea:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ccf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccf3:	0f b7 c0             	movzx  eax,ax
c000ccf6:	3d 26 03 00 00       	cmp    eax,0x326
c000ccfb:	75 06                	jne    c000cd03 <sendKeyboardToken(KeyboardToken)+0x30c>
c000ccfd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd06:	0f b7 c0             	movzx  eax,ax
c000cd09:	3d 27 03 00 00       	cmp    eax,0x327
c000cd0e:	75 06                	jne    c000cd16 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd10:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd19:	0f b7 c0             	movzx  eax,ax
c000cd1c:	3d 22 03 00 00       	cmp    eax,0x322
c000cd21:	75 06                	jne    c000cd29 <sendKeyboardToken(KeyboardToken)+0x332>
c000cd23:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd29:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd2d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd30:	83 f0 01             	xor    eax,0x1
c000cd33:	0f b6 c0             	movzx  eax,al
c000cd36:	85 c0                	test   eax,eax
c000cd38:	74 7c                	je     c000cdb6 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd3a:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cd3f:	0f b6 c0             	movzx  eax,al
c000cd42:	85 c0                	test   eax,eax
c000cd44:	74 43                	je     c000cd89 <sendKeyboardToken(KeyboardToken)+0x392>
c000cd46:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd4a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cd4e:	85 c0                	test   eax,eax
c000cd50:	74 2b                	je     c000cd7d <sendKeyboardToken(KeyboardToken)+0x386>
c000cd52:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cd58:	89 d0                	mov    eax,edx
c000cd5a:	c1 e0 02             	shl    eax,0x2
c000cd5d:	01 d0                	add    eax,edx
c000cd5f:	d1 e0                	shl    eax,1
c000cd61:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cd66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd69:	0f b7 c0             	movzx  eax,ax
c000cd6c:	8d 50 d0             	lea    edx,[eax-0x30]
c000cd6f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cd74:	01 d0                	add    eax,edx
c000cd76:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cd7b:	eb 71                	jmp    c000cdee <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cd7d:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cd87:	eb 65                	jmp    c000cdee <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cd89:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cd8e:	85 c0                	test   eax,eax
c000cd90:	74 18                	je     c000cdaa <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cd92:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cd97:	0f b6 c0             	movzx  eax,al
c000cd9a:	83 ec 0c             	sub    esp,0xc
c000cd9d:	50                   	push   eax
c000cd9e:	e8 79 fb ff ff       	call   c000c91c <sendKeyToTerminal(unsigned char)>
c000cda3:	83 c4 10             	add    esp,0x10
c000cda6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdaa:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cdb4:	eb 38                	jmp    c000cdee <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb9:	0f b7 c0             	movzx  eax,ax
c000cdbc:	3d 01 01 00 00       	cmp    eax,0x101
c000cdc1:	75 2b                	jne    c000cdee <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdc3:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdc8:	85 c0                	test   eax,eax
c000cdca:	74 18                	je     c000cde4 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cdcc:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cdd1:	0f b6 c0             	movzx  eax,al
c000cdd4:	83 ec 0c             	sub    esp,0xc
c000cdd7:	50                   	push   eax
c000cdd8:	e8 3f fb ff ff       	call   c000c91c <sendKeyToTerminal(unsigned char)>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cde4:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cdee:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cdf1:	83 f0 01             	xor    eax,0x1
c000cdf4:	0f b6 c0             	movzx  eax,al
c000cdf7:	85 c0                	test   eax,eax
c000cdf9:	74 5a                	je     c000ce55 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cdfb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdfe:	83 f0 01             	xor    eax,0x1
c000ce01:	0f b6 c0             	movzx  eax,al
c000ce04:	85 c0                	test   eax,eax
c000ce06:	74 4d                	je     c000ce55 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce08:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000ce0d:	83 f0 01             	xor    eax,0x1
c000ce10:	0f b6 c0             	movzx  eax,al
c000ce13:	85 c0                	test   eax,eax
c000ce15:	74 3e                	je     c000ce55 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce1a:	0f b7 c0             	movzx  eax,ax
c000ce1d:	83 f8 1f             	cmp    eax,0x1f
c000ce20:	76 0b                	jbe    c000ce2d <sendKeyboardToken(KeyboardToken)+0x436>
c000ce22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce25:	0f b7 c0             	movzx  eax,ax
c000ce28:	83 f8 7e             	cmp    eax,0x7e
c000ce2b:	76 16                	jbe    c000ce43 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce30:	0f b7 c0             	movzx  eax,ax
c000ce33:	83 f8 0a             	cmp    eax,0xa
c000ce36:	74 0b                	je     c000ce43 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce3b:	0f b7 c0             	movzx  eax,ax
c000ce3e:	83 f8 08             	cmp    eax,0x8
c000ce41:	75 12                	jne    c000ce55 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce46:	0f b6 c0             	movzx  eax,al
c000ce49:	83 ec 0c             	sub    esp,0xc
c000ce4c:	50                   	push   eax
c000ce4d:	e8 ca fa ff ff       	call   c000c91c <sendKeyToTerminal(unsigned char)>
c000ce52:	83 c4 10             	add    esp,0x10
c000ce55:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce58:	83 f0 01             	xor    eax,0x1
c000ce5b:	0f b6 c0             	movzx  eax,al
c000ce5e:	85 c0                	test   eax,eax
c000ce60:	74 5d                	je     c000cebf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce62:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce65:	83 f0 01             	xor    eax,0x1
c000ce68:	0f b6 c0             	movzx  eax,al
c000ce6b:	85 c0                	test   eax,eax
c000ce6d:	74 50                	je     c000cebf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce6f:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000ce74:	0f b6 c0             	movzx  eax,al
c000ce77:	85 c0                	test   eax,eax
c000ce79:	74 44                	je     c000cebf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce7e:	0f b7 c0             	movzx  eax,ax
c000ce81:	83 f8 3f             	cmp    eax,0x3f
c000ce84:	76 39                	jbe    c000cebf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce89:	0f b7 c0             	movzx  eax,ax
c000ce8c:	83 f8 7f             	cmp    eax,0x7f
c000ce8f:	77 2e                	ja     c000cebf <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ce91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce94:	88 c2                	mov    dl,al
c000ce96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce99:	0f b7 c0             	movzx  eax,ax
c000ce9c:	83 f8 5f             	cmp    eax,0x5f
c000ce9f:	76 04                	jbe    c000cea5 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cea1:	b0 20                	mov    al,0x20
c000cea3:	eb 02                	jmp    c000cea7 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cea5:	b0 00                	mov    al,0x0
c000cea7:	89 d1                	mov    ecx,edx
c000cea9:	29 c1                	sub    ecx,eax
c000ceab:	89 c8                	mov    eax,ecx
c000cead:	83 e8 40             	sub    eax,0x40
c000ceb0:	0f b6 c0             	movzx  eax,al
c000ceb3:	83 ec 0c             	sub    esp,0xc
c000ceb6:	50                   	push   eax
c000ceb7:	e8 60 fa ff ff       	call   c000c91c <sendKeyToTerminal(unsigned char)>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cec2:	0f b7 c0             	movzx  eax,ax
c000cec5:	3d 00 03 00 00       	cmp    eax,0x300
c000ceca:	75 12                	jne    c000cede <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cecc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cecf:	83 f0 01             	xor    eax,0x1
c000ced2:	0f b6 c0             	movzx  eax,al
c000ced5:	85 c0                	test   eax,eax
c000ced7:	74 05                	je     c000cede <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ced9:	e8 2d b6 ff ff       	call   c000850b <doTerminalCycle()>
c000cede:	90                   	nop
c000cedf:	c9                   	leave  
c000cee0:	c3                   	ret    

c000cee1 <clearInternalKeybuffer(VgaText*)>:
c000cee1:	55                   	push   ebp
c000cee2:	89 e5                	mov    ebp,esp
c000cee4:	83 ec 08             	sub    esp,0x8
c000cee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ceea:	05 02 01 00 00       	add    eax,0x102
c000ceef:	83 ec 0c             	sub    esp,0xc
c000cef2:	50                   	push   eax
c000cef3:	e8 88 36 ff ff       	call   c0000580 <strlen>
c000cef8:	83 c4 10             	add    esp,0x10
c000cefb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cefe:	81 c2 02 01 00 00    	add    edx,0x102
c000cf04:	83 ec 04             	sub    esp,0x4
c000cf07:	50                   	push   eax
c000cf08:	6a 00                	push   0x0
c000cf0a:	52                   	push   edx
c000cf0b:	e8 e0 35 ff ff       	call   c00004f0 <memset>
c000cf10:	83 c4 10             	add    esp,0x10
c000cf13:	90                   	nop
c000cf14:	c9                   	leave  
c000cf15:	c3                   	ret    

c000cf16 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf16:	55                   	push   ebp
c000cf17:	89 e5                	mov    ebp,esp
c000cf19:	83 ec 18             	sub    esp,0x18
c000cf1c:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cf21:	85 c0                	test   eax,eax
c000cf23:	74 2a                	je     c000cf4f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf25:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf2b:	8b 15 c8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fc8
c000cf31:	83 ec 04             	sub    esp,0x4
c000cf34:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cf39:	83 ec 08             	sub    esp,0x8
c000cf3c:	89 e0                	mov    eax,esp
c000cf3e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000cf41:	89 08                	mov    DWORD PTR [eax],ecx
c000cf43:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cf46:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000cf4a:	ff d2                	call   edx
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	fb                   	sti    
c000cf50:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cf57:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cf5b:	0f 84 0d 01 00 00    	je     c000d06e <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cf61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf64:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cf6a:	0f be c0             	movsx  eax,al
c000cf6d:	85 c0                	test   eax,eax
c000cf6f:	75 2c                	jne    c000cf9d <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cf71:	fa                   	cli    
c000cf72:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cf77:	83 c0 01             	add    eax,0x1
c000cf7a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cf7f:	e8 a0 83 00 00       	call   c0015324 <schedule()>
c000cf84:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cf89:	83 e8 01             	sub    eax,0x1
c000cf8c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cf91:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cf96:	85 c0                	test   eax,eax
c000cf98:	75 c7                	jne    c000cf61 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cf9a:	fb                   	sti    
c000cf9b:	eb c4                	jmp    c000cf61 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cf9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfa0:	8d 50 01             	lea    edx,[eax+0x1]
c000cfa3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfa6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cfa9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cfaf:	88 10                	mov    BYTE PTR [eax],dl
c000cfb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfb4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfba:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cfbd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cfc1:	83 f8 03             	cmp    eax,0x3
c000cfc4:	75 1e                	jne    c000cfe4 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cfc6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cfcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cfd0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cfd6:	83 ec 08             	sub    esp,0x8
c000cfd9:	6a 02                	push   0x2
c000cfdb:	50                   	push   eax
c000cfdc:	e8 da 3f 00 00       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cfe8:	83 f8 1c             	cmp    eax,0x1c
c000cfeb:	75 1e                	jne    c000d00b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cfed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cff2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cff7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cffd:	83 ec 08             	sub    esp,0x8
c000d000:	6a 09                	push   0x9
c000d002:	50                   	push   eax
c000d003:	e8 b3 3f 00 00       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d008:	83 c4 10             	add    esp,0x10
c000d00b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d00e:	05 02 01 00 00       	add    eax,0x102
c000d013:	83 ec 0c             	sub    esp,0xc
c000d016:	50                   	push   eax
c000d017:	e8 64 35 ff ff       	call   c0000580 <strlen>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d022:	81 c2 02 01 00 00    	add    edx,0x102
c000d028:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d02b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d02e:	81 c2 02 01 00 00    	add    edx,0x102
c000d034:	83 ec 04             	sub    esp,0x4
c000d037:	50                   	push   eax
c000d038:	51                   	push   ecx
c000d039:	52                   	push   edx
c000d03a:	e8 91 33 ff ff       	call   c00003d0 <memmove>
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d046:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d04a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d04e:	83 f8 0a             	cmp    eax,0xa
c000d051:	74 16                	je     c000d069 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d053:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d057:	83 f8 03             	cmp    eax,0x3
c000d05a:	74 0d                	je     c000d069 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d05c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d060:	83 f8 1c             	cmp    eax,0x1c
c000d063:	0f 85 ee fe ff ff    	jne    c000cf57 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d069:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d06c:	eb 03                	jmp    c000d071 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d06e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d071:	c9                   	leave  
c000d072:	c3                   	ret    
c000d073:	90                   	nop

c000d074 <Keyboard::Keyboard(char const*)>:
c000d074:	83 ec 0c             	sub    esp,0xc
c000d077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07b:	83 ec 08             	sub    esp,0x8
c000d07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d082:	50                   	push   eax
c000d083:	e8 44 f1 ff ff       	call   c000c1cc <Device::Device(char const*)>
c000d088:	83 c4 10             	add    esp,0x10
c000d08b:	ba fc 0c 02 c0       	mov    edx,0xc0020cfc
c000d090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d094:	89 10                	mov    DWORD PTR [eax],edx
c000d096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d0a4:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000d0ab:	90                   	nop
c000d0ac:	83 c4 0c             	add    esp,0xc
c000d0af:	c3                   	ret    

c000d0b0 <Keyboard::~Keyboard()>:
c000d0b0:	83 ec 0c             	sub    esp,0xc
c000d0b3:	ba fc 0c 02 c0       	mov    edx,0xc0020cfc
c000d0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0bc:	89 10                	mov    DWORD PTR [eax],edx
c000d0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c2:	83 ec 0c             	sub    esp,0xc
c000d0c5:	50                   	push   eax
c000d0c6:	e8 6b ee ff ff       	call   c000bf36 <Device::~Device()>
c000d0cb:	83 c4 10             	add    esp,0x10
c000d0ce:	90                   	nop
c000d0cf:	83 c4 0c             	add    esp,0xc
c000d0d2:	c3                   	ret    
c000d0d3:	90                   	nop

c000d0d4 <Keyboard::~Keyboard()>:
c000d0d4:	83 ec 0c             	sub    esp,0xc
c000d0d7:	83 ec 0c             	sub    esp,0xc
c000d0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0de:	e8 cd ff ff ff       	call   c000d0b0 <Keyboard::~Keyboard()>
c000d0e3:	83 c4 10             	add    esp,0x10
c000d0e6:	83 ec 08             	sub    esp,0x8
c000d0e9:	68 5c 01 00 00       	push   0x15c
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	e8 09 d7 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	83 c4 0c             	add    esp,0xc
c000d0fd:	c3                   	ret    

c000d0fe <LogicalDisk::close(int, int, void*)>:
c000d0fe:	83 c8 ff             	or     eax,0xffffffff
c000d101:	c3                   	ret    

c000d102 <LogicalDisk::~LogicalDisk()>:
c000d102:	83 ec 0c             	sub    esp,0xc
c000d105:	ba 74 0d 02 c0       	mov    edx,0xc0020d74
c000d10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10e:	89 10                	mov    DWORD PTR [eax],edx
c000d110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	50                   	push   eax
c000d118:	e8 19 ee ff ff       	call   c000bf36 <Device::~Device()>
c000d11d:	83 c4 10             	add    esp,0x10
c000d120:	90                   	nop
c000d121:	83 c4 0c             	add    esp,0xc
c000d124:	c3                   	ret    
c000d125:	90                   	nop

c000d126 <LogicalDisk::~LogicalDisk()>:
c000d126:	83 ec 0c             	sub    esp,0xc
c000d129:	83 ec 0c             	sub    esp,0xc
c000d12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d130:	e8 cd ff ff ff       	call   c000d102 <LogicalDisk::~LogicalDisk()>
c000d135:	83 c4 10             	add    esp,0x10
c000d138:	83 ec 08             	sub    esp,0x8
c000d13b:	68 78 01 00 00       	push   0x178
c000d140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d144:	e8 b7 d6 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d149:	83 c4 10             	add    esp,0x10
c000d14c:	83 c4 0c             	add    esp,0xc
c000d14f:	c3                   	ret    

c000d150 <LogicalDisk::open(int, int, void*)>:
c000d150:	83 ec 18             	sub    esp,0x18
c000d153:	68 28 0d 02 c0       	push   0xc0020d28
c000d158:	e8 c0 39 00 00       	call   c0010b1d <KePanic(char const*)>
c000d15d:	83 c8 ff             	or     eax,0xffffffff
c000d160:	83 c4 1c             	add    esp,0x1c
c000d163:	c3                   	ret    

c000d164 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d164:	53                   	push   ebx
c000d165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d16d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d171:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d177:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d17d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d183:	77 10                	ja     c000d195 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d185:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d18b:	89 d3                	mov    ebx,edx
c000d18d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d193:	72 05                	jb     c000d19a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d195:	83 c8 ff             	or     eax,0xffffffff
c000d198:	89 c2                	mov    edx,eax
c000d19a:	5b                   	pop    ebx
c000d19b:	c3                   	ret    

c000d19c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d19c:	56                   	push   esi
c000d19d:	83 c8 ff             	or     eax,0xffffffff
c000d1a0:	53                   	push   ebx
c000d1a1:	89 c2                	mov    edx,eax
c000d1a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1a7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1af:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1b5:	77 27                	ja     c000d1de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1b7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d1bd:	89 d8                	mov    eax,ebx
c000d1bf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d1c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d1ca:	89 c2                	mov    edx,eax
c000d1cc:	73 10                	jae    c000d1de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1ce:	89 c8                	mov    eax,ecx
c000d1d0:	89 da                	mov    edx,ebx
c000d1d2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d1d8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d1de:	5b                   	pop    ebx
c000d1df:	5e                   	pop    esi
c000d1e0:	c3                   	ret    
c000d1e1:	90                   	nop

c000d1e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d1e2:	83 ec 1c             	sub    esp,0x1c
c000d1e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d1f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d1f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d200:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d208:	83 ec 08             	sub    esp,0x8
c000d20b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20f:	50                   	push   eax
c000d210:	e8 b7 ef ff ff       	call   c000c1cc <Device::Device(char const*)>
c000d215:	83 c4 10             	add    esp,0x10
c000d218:	ba 74 0d 02 c0       	mov    edx,0xc0020d74
c000d21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d221:	89 10                	mov    DWORD PTR [eax],edx
c000d223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d227:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d232:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d23d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d248:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d252:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d256:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d25a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d25e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d264:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d26a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d26e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d271:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d275:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d27b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d285:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d289:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d293:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d29d:	90                   	nop
c000d29e:	83 c4 1c             	add    esp,0x1c
c000d2a1:	c3                   	ret    

c000d2a2 <LogicalDisk::assignDriveLetter()>:
c000d2a2:	55                   	push   ebp
c000d2a3:	57                   	push   edi
c000d2a4:	56                   	push   esi
c000d2a5:	53                   	push   ebx
c000d2a6:	83 ec 14             	sub    esp,0x14
c000d2a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d2ad:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d2b3:	b0 41                	mov    al,0x41
c000d2b5:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d2bb:	84 d2                	test   dl,dl
c000d2bd:	75 02                	jne    c000d2c1 <LogicalDisk::assignDriveLetter()+0x1f>
c000d2bf:	b0 43                	mov    al,0x43
c000d2c1:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d2c7:	0f b6 ca             	movzx  ecx,dl
c000d2ca:	0f be e8             	movsx  ebp,al
c000d2cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d2d1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d2d5:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d2db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d2df:	3c 43                	cmp    al,0x43
c000d2e1:	75 10                	jne    c000d2f3 <LogicalDisk::assignDriveLetter()+0x51>
c000d2e3:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d2ea:	75 5a                	jne    c000d346 <LogicalDisk::assignDriveLetter()+0xa4>
c000d2ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d2f1:	75 53                	jne    c000d346 <LogicalDisk::assignDriveLetter()+0xa4>
c000d2f3:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d2f6:	ba 01 00 00 00       	mov    edx,0x1
c000d2fb:	89 34 24             	mov    DWORD PTR [esp],esi
c000d2fe:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d301:	d3 e2                	shl    edx,cl
c000d303:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d307:	89 d7                	mov    edi,edx
c000d309:	89 d6                	mov    esi,edx
c000d30b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d30f:	c1 ff 1f             	sar    edi,0x1f
c000d312:	21 f9                	and    ecx,edi
c000d314:	09 d1                	or     ecx,edx
c000d316:	75 2e                	jne    c000d346 <LogicalDisk::assignDriveLetter()+0xa4>
c000d318:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d31c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d320:	09 f2                	or     edx,esi
c000d322:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d325:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d32b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d32f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d335:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d33c:	09 fa                	or     edx,edi
c000d33e:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d344:	eb 0d                	jmp    c000d353 <LogicalDisk::assignDriveLetter()+0xb1>
c000d346:	8d 50 01             	lea    edx,[eax+0x1]
c000d349:	45                   	inc    ebp
c000d34a:	80 fa 5b             	cmp    dl,0x5b
c000d34d:	88 d0                	mov    al,dl
c000d34f:	75 8e                	jne    c000d2df <LogicalDisk::assignDriveLetter()+0x3d>
c000d351:	31 c0                	xor    eax,eax
c000d353:	83 c4 14             	add    esp,0x14
c000d356:	5b                   	pop    ebx
c000d357:	5e                   	pop    esi
c000d358:	5f                   	pop    edi
c000d359:	5d                   	pop    ebp
c000d35a:	c3                   	ret    
c000d35b:	90                   	nop

c000d35c <LogicalDisk::mount()>:
c000d35c:	56                   	push   esi
c000d35d:	53                   	push   ebx
c000d35e:	53                   	push   ebx
c000d35f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d363:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d369:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d373:	85 db                	test   ebx,ebx
c000d375:	74 27                	je     c000d39e <LogicalDisk::mount()+0x42>
c000d377:	51                   	push   ecx
c000d378:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d37f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d381:	83 e8 41             	sub    eax,0x41
c000d384:	50                   	push   eax
c000d385:	56                   	push   esi
c000d386:	53                   	push   ebx
c000d387:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	84 c0                	test   al,al
c000d38f:	74 08                	je     c000d399 <LogicalDisk::mount()+0x3d>
c000d391:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d397:	eb 07                	jmp    c000d3a0 <LogicalDisk::mount()+0x44>
c000d399:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d39c:	eb d5                	jmp    c000d373 <LogicalDisk::mount()+0x17>
c000d39e:	31 c0                	xor    eax,eax
c000d3a0:	5a                   	pop    edx
c000d3a1:	5b                   	pop    ebx
c000d3a2:	5e                   	pop    esi
c000d3a3:	c3                   	ret    

c000d3a4 <LogicalDisk::unmount()>:
c000d3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3a8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d3b2:	c3                   	ret    
c000d3b3:	90                   	nop

c000d3b4 <LogicalDisk::eject()>:
c000d3b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3b8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d3be:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3c4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d3c7:	90                   	nop

c000d3c8 <LogicalDisk::unassignDriveLetter()>:
c000d3c8:	57                   	push   edi
c000d3c9:	56                   	push   esi
c000d3ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3ce:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d3d5:	85 c9                	test   ecx,ecx
c000d3d7:	75 0f                	jne    c000d3e8 <LogicalDisk::unassignDriveLetter()+0x20>
c000d3d9:	c7 44 24 0c 4c 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d4c
c000d3e1:	5e                   	pop    esi
c000d3e2:	5f                   	pop    edi
c000d3e3:	e9 35 37 00 00       	jmp    c0010b1d <KePanic(char const*)>
c000d3e8:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d3ef:	83 e9 41             	sub    ecx,0x41
c000d3f2:	b8 01 00 00 00       	mov    eax,0x1
c000d3f7:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d402:	d3 e0                	shl    eax,cl
c000d404:	89 c7                	mov    edi,eax
c000d406:	f7 d0                	not    eax
c000d408:	c1 ff 1f             	sar    edi,0x1f
c000d40b:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d411:	89 fe                	mov    esi,edi
c000d413:	f7 d6                	not    esi
c000d415:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d41b:	5e                   	pop    esi
c000d41c:	5f                   	pop    edi
c000d41d:	c3                   	ret    

c000d41e <LogicalDisk::read(unsigned long long, int, void*)>:
c000d41e:	57                   	push   edi
c000d41f:	56                   	push   esi
c000d420:	53                   	push   ebx
c000d421:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d425:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d429:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d42d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d431:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d437:	77 41                	ja     c000d47a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d439:	99                   	cdq    
c000d43a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d440:	01 c8                	add    eax,ecx
c000d442:	11 da                	adc    edx,ebx
c000d444:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d44a:	19 d7                	sbb    edi,edx
c000d44c:	72 33                	jb     c000d481 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d44e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d454:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d45a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d45e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d462:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d468:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d46e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d472:	5b                   	pop    ebx
c000d473:	5e                   	pop    esi
c000d474:	5f                   	pop    edi
c000d475:	e9 d4 0a 00 00       	jmp    c000df4e <VCache::read(unsigned long long, int, void*)>
c000d47a:	b8 05 00 00 00       	mov    eax,0x5
c000d47f:	eb 05                	jmp    c000d486 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d481:	b8 07 00 00 00       	mov    eax,0x7
c000d486:	5b                   	pop    ebx
c000d487:	5e                   	pop    esi
c000d488:	5f                   	pop    edi
c000d489:	c3                   	ret    

c000d48a <LogicalDisk::write(unsigned long long, int, void*)>:
c000d48a:	57                   	push   edi
c000d48b:	56                   	push   esi
c000d48c:	53                   	push   ebx
c000d48d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d491:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d495:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d499:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d49d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d4a3:	77 41                	ja     c000d4e6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d4a5:	99                   	cdq    
c000d4a6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d4ac:	01 c8                	add    eax,ecx
c000d4ae:	11 da                	adc    edx,ebx
c000d4b0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d4b6:	19 d7                	sbb    edi,edx
c000d4b8:	72 33                	jb     c000d4ed <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d4ba:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d4c0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d4c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d4ca:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4ce:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4de:	5b                   	pop    ebx
c000d4df:	5e                   	pop    esi
c000d4e0:	5f                   	pop    edi
c000d4e1:	e9 6e 09 00 00       	jmp    c000de54 <VCache::write(unsigned long long, int, void*)>
c000d4e6:	b8 05 00 00 00       	mov    eax,0x5
c000d4eb:	eb 05                	jmp    c000d4f2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d4ed:	b8 07 00 00 00       	mov    eax,0x7
c000d4f2:	5b                   	pop    ebx
c000d4f3:	5e                   	pop    esi
c000d4f4:	5f                   	pop    edi
c000d4f5:	c3                   	ret    
c000d4f6:	66 90                	xchg   ax,ax

c000d4f8 <Mouse::Mouse(char const*)>:
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ff:	83 ec 08             	sub    esp,0x8
c000d502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d506:	50                   	push   eax
c000d507:	e8 c0 ec ff ff       	call   c000c1cc <Device::Device(char const*)>
c000d50c:	83 c4 10             	add    esp,0x10
c000d50f:	ba a0 0d 02 c0       	mov    edx,0xc0020da0
c000d514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d518:	89 10                	mov    DWORD PTR [eax],edx
c000d51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d528:	90                   	nop
c000d529:	83 c4 0c             	add    esp,0xc
c000d52c:	c3                   	ret    
c000d52d:	90                   	nop
c000d52e:	66 90                	xchg   ax,ax

c000d530 <Mouse::~Mouse()>:
c000d530:	83 ec 0c             	sub    esp,0xc
c000d533:	ba a0 0d 02 c0       	mov    edx,0xc0020da0
c000d538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53c:	89 10                	mov    DWORD PTR [eax],edx
c000d53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d542:	83 ec 0c             	sub    esp,0xc
c000d545:	50                   	push   eax
c000d546:	e8 eb e9 ff ff       	call   c000bf36 <Device::~Device()>
c000d54b:	83 c4 10             	add    esp,0x10
c000d54e:	90                   	nop
c000d54f:	83 c4 0c             	add    esp,0xc
c000d552:	c3                   	ret    
c000d553:	90                   	nop

c000d554 <Mouse::~Mouse()>:
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55e:	e8 cd ff ff ff       	call   c000d530 <Mouse::~Mouse()>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	83 ec 08             	sub    esp,0x8
c000d569:	68 58 01 00 00       	push   0x158
c000d56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d572:	e8 89 d2 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d577:	83 c4 10             	add    esp,0x10
c000d57a:	83 c4 0c             	add    esp,0xc
c000d57d:	c3                   	ret    

c000d57e <NIC::getMAC()>:
c000d57e:	31 c0                	xor    eax,eax
c000d580:	31 d2                	xor    edx,edx
c000d582:	c3                   	ret    
c000d583:	90                   	nop

c000d584 <NIC::write(int, unsigned char*, int*)>:
c000d584:	b8 01 00 00 00       	mov    eax,0x1
c000d589:	c3                   	ret    

c000d58a <NIC::NIC(char const*)>:
c000d58a:	83 ec 0c             	sub    esp,0xc
c000d58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d591:	83 ec 08             	sub    esp,0x8
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	50                   	push   eax
c000d599:	e8 2e ec ff ff       	call   c000c1cc <Device::Device(char const*)>
c000d59e:	83 c4 10             	add    esp,0x10
c000d5a1:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c000d5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5aa:	89 10                	mov    DWORD PTR [eax],edx
c000d5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d5ba:	90                   	nop
c000d5bb:	83 c4 0c             	add    esp,0xc
c000d5be:	c3                   	ret    
c000d5bf:	90                   	nop

c000d5c0 <NIC::~NIC()>:
c000d5c0:	83 ec 0c             	sub    esp,0xc
c000d5c3:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c000d5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5cc:	89 10                	mov    DWORD PTR [eax],edx
c000d5ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d2:	83 ec 0c             	sub    esp,0xc
c000d5d5:	50                   	push   eax
c000d5d6:	e8 5b e9 ff ff       	call   c000bf36 <Device::~Device()>
c000d5db:	83 c4 10             	add    esp,0x10
c000d5de:	90                   	nop
c000d5df:	83 c4 0c             	add    esp,0xc
c000d5e2:	c3                   	ret    
c000d5e3:	90                   	nop

c000d5e4 <NIC::~NIC()>:
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	83 ec 0c             	sub    esp,0xc
c000d5ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ee:	e8 cd ff ff ff       	call   c000d5c0 <NIC::~NIC()>
c000d5f3:	83 c4 10             	add    esp,0x10
c000d5f6:	83 ec 08             	sub    esp,0x8
c000d5f9:	68 58 01 00 00       	push   0x158
c000d5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d602:	e8 f9 d1 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d607:	83 c4 10             	add    esp,0x10
c000d60a:	83 c4 0c             	add    esp,0xc
c000d60d:	c3                   	ret    

c000d60e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d60e:	55                   	push   ebp
c000d60f:	57                   	push   edi
c000d610:	56                   	push   esi
c000d611:	53                   	push   ebx
c000d612:	81 ec 28 01 00 00    	sub    esp,0x128
c000d618:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d61f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d626:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d62d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d634:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d638:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d63c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d643:	e8 80 ec ff ff       	call   c000c2c8 <Device::getName()>
c000d648:	5a                   	pop    edx
c000d649:	59                   	pop    ecx
c000d64a:	50                   	push   eax
c000d64b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d64f:	55                   	push   ebp
c000d650:	e8 fb 2f ff ff       	call   c0000650 <strcpy>
c000d655:	5b                   	pop    ebx
c000d656:	58                   	pop    eax
c000d657:	68 f8 0d 02 c0       	push   0xc0020df8
c000d65c:	55                   	push   ebp
c000d65d:	e8 0e 32 ff ff       	call   c0000870 <strcat>
c000d662:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d669:	e8 5d a4 ff ff       	call   c0007acb <malloc>
c000d66e:	83 c4 0c             	add    esp,0xc
c000d671:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d675:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d679:	89 c3                	mov    ebx,eax
c000d67b:	57                   	push   edi
c000d67c:	56                   	push   esi
c000d67d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d684:	55                   	push   ebp
c000d685:	50                   	push   eax
c000d686:	e8 57 fb ff ff       	call   c000d1e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d68b:	83 c4 14             	add    esp,0x14
c000d68e:	53                   	push   ebx
c000d68f:	e8 0e fc ff ff       	call   c000d2a2 <LogicalDisk::assignDriveLetter()>
c000d694:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d697:	e8 c0 fc ff ff       	call   c000d35c <LogicalDisk::mount()>
c000d69c:	58                   	pop    eax
c000d69d:	5a                   	pop    edx
c000d69e:	53                   	push   ebx
c000d69f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d6a6:	e8 89 e9 ff ff       	call   c000c034 <Device::addChild(Device*)>
c000d6ab:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d6b1:	5b                   	pop    ebx
c000d6b2:	5e                   	pop    esi
c000d6b3:	5f                   	pop    edi
c000d6b4:	5d                   	pop    ebp
c000d6b5:	c3                   	ret    

c000d6b6 <createPartitionsForDisk(PhysicalDisk*)>:
c000d6b6:	55                   	push   ebp
c000d6b7:	57                   	push   edi
c000d6b8:	56                   	push   esi
c000d6b9:	53                   	push   ebx
c000d6ba:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d6c0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d6c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d6cd:	3d 00 02 00 00       	cmp    eax,0x200
c000d6d2:	74 27                	je     c000d6fb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d6d4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d6da:	83 ec 10             	sub    esp,0x10
c000d6dd:	99                   	cdq    
c000d6de:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d6e4:	52                   	push   edx
c000d6e5:	50                   	push   eax
c000d6e6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d6ea:	c1 e6 0a             	shl    esi,0xa
c000d6ed:	89 fd                	mov    ebp,edi
c000d6ef:	55                   	push   ebp
c000d6f0:	56                   	push   esi
c000d6f1:	e8 7a 12 01 00       	call   c001e970 <__udivdi3>
c000d6f6:	e9 b9 00 00 00       	jmp    c000d7b4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d6fb:	83 ec 0c             	sub    esp,0xc
c000d6fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d700:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d704:	56                   	push   esi
c000d705:	6a 01                	push   0x1
c000d707:	6a 00                	push   0x0
c000d709:	6a 00                	push   0x0
c000d70b:	53                   	push   ebx
c000d70c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d70f:	83 c4 20             	add    esp,0x20
c000d712:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d71a:	75 0a                	jne    c000d726 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d71c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d724:	74 2c                	je     c000d752 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d726:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d735:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d73b:	89 f7                	mov    edi,esi
c000d73d:	c1 ff 1f             	sar    edi,0x1f
c000d740:	57                   	push   edi
c000d741:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d745:	56                   	push   esi
c000d746:	c1 e0 0a             	shl    eax,0xa
c000d749:	52                   	push   edx
c000d74a:	50                   	push   eax
c000d74b:	e8 20 12 01 00       	call   c001e970 <__udivdi3>
c000d750:	eb 62                	jmp    c000d7b4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d752:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d759:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d760:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d767:	89 cf                	mov    edi,ecx
c000d769:	83 e2 7f             	and    edx,0x7f
c000d76c:	83 e7 7f             	and    edi,0x7f
c000d76f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d772:	83 e0 7f             	and    eax,0x7f
c000d775:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d778:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d77f:	83 e0 7f             	and    eax,0x7f
c000d782:	01 d0                	add    eax,edx
c000d784:	84 c0                	test   al,al
c000d786:	89 c5                	mov    ebp,eax
c000d788:	74 41                	je     c000d7cb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d78a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d790:	83 ec 10             	sub    esp,0x10
c000d793:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d799:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d79f:	89 f7                	mov    edi,esi
c000d7a1:	c1 ff 1f             	sar    edi,0x1f
c000d7a4:	57                   	push   edi
c000d7a5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7a9:	56                   	push   esi
c000d7aa:	c1 e0 0a             	shl    eax,0xa
c000d7ad:	52                   	push   edx
c000d7ae:	50                   	push   eax
c000d7af:	e8 bc 11 01 00       	call   c001e970 <__udivdi3>
c000d7b4:	83 c4 14             	add    esp,0x14
c000d7b7:	52                   	push   edx
c000d7b8:	50                   	push   eax
c000d7b9:	6a 00                	push   0x0
c000d7bb:	6a 00                	push   0x0
c000d7bd:	53                   	push   ebx
c000d7be:	e8 4b fe ff ff       	call   c000d60e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d7c3:	83 c4 20             	add    esp,0x20
c000d7c6:	e9 73 01 00 00       	jmp    c000d93e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d7cb:	89 f0                	mov    eax,esi
c000d7cd:	31 c9                	xor    ecx,ecx
c000d7cf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d7d6:	75 02                	jne    c000d7da <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d7d8:	89 cd                	mov    ebp,ecx
c000d7da:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d7e2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d7e9:	83 c0 10             	add    eax,0x10
c000d7ec:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d7f4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d7fb:	c1 e2 08             	shl    edx,0x8
c000d7fe:	c1 e6 10             	shl    esi,0x10
c000d801:	09 f2                	or     edx,esi
c000d803:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d80a:	09 f2                	or     edx,esi
c000d80c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d813:	c1 e6 18             	shl    esi,0x18
c000d816:	09 f2                	or     edx,esi
c000d818:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d81f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d823:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d82a:	c1 e6 10             	shl    esi,0x10
c000d82d:	c1 e2 08             	shl    edx,0x8
c000d830:	09 f2                	or     edx,esi
c000d832:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d839:	09 f2                	or     edx,esi
c000d83b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d842:	c1 e6 18             	shl    esi,0x18
c000d845:	09 f2                	or     edx,esi
c000d847:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d84b:	41                   	inc    ecx
c000d84c:	83 f9 04             	cmp    ecx,0x4
c000d84f:	0f 85 7a ff ff ff    	jne    c000d7cf <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d859:	83 f0 01             	xor    eax,0x1
c000d85c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d860:	75 4f                	jne    c000d8b1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d862:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d866:	83 f0 01             	xor    eax,0x1
c000d869:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d86d:	75 42                	jne    c000d8b1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d86f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d875:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d87d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d883:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d88b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d891:	89 f7                	mov    edi,esi
c000d893:	c1 ff 1f             	sar    edi,0x1f
c000d896:	57                   	push   edi
c000d897:	56                   	push   esi
c000d898:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d89c:	52                   	push   edx
c000d89d:	c1 e0 0a             	shl    eax,0xa
c000d8a0:	50                   	push   eax
c000d8a1:	e8 ca 10 01 00       	call   c001e970 <__udivdi3>
c000d8a6:	83 c4 10             	add    esp,0x10
c000d8a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8b1:	89 e8                	mov    eax,ebp
c000d8b3:	0f b6 e8             	movzx  ebp,al
c000d8b6:	85 ed                	test   ebp,ebp
c000d8b8:	74 50                	je     c000d90a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d8ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d8ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d8d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8d6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d8da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d8e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8ea:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d8ee:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d8f2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d8f6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d8fa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d8fe:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d902:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d906:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d90a:	31 ed                	xor    ebp,ebp
c000d90c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d910:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d914:	89 f8                	mov    eax,edi
c000d916:	09 f0                	or     eax,esi
c000d918:	74 1e                	je     c000d938 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d91a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d91e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d922:	89 d1                	mov    ecx,edx
c000d924:	09 c1                	or     ecx,eax
c000d926:	74 10                	je     c000d938 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d928:	83 ec 0c             	sub    esp,0xc
c000d92b:	57                   	push   edi
c000d92c:	56                   	push   esi
c000d92d:	52                   	push   edx
c000d92e:	50                   	push   eax
c000d92f:	53                   	push   ebx
c000d930:	e8 d9 fc ff ff       	call   c000d60e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d935:	83 c4 20             	add    esp,0x20
c000d938:	45                   	inc    ebp
c000d939:	83 fd 04             	cmp    ebp,0x4
c000d93c:	75 ce                	jne    c000d90c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d93e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d944:	5b                   	pop    ebx
c000d945:	5e                   	pop    esi
c000d946:	5f                   	pop    edi
c000d947:	5d                   	pop    ebp
c000d948:	c3                   	ret    
c000d949:	66 90                	xchg   ax,ax
c000d94b:	90                   	nop

c000d94c <Serial::Serial(char const*)>:
c000d94c:	83 ec 0c             	sub    esp,0xc
c000d94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d953:	83 ec 08             	sub    esp,0x8
c000d956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d95a:	50                   	push   eax
c000d95b:	e8 6c e8 ff ff       	call   c000c1cc <Device::Device(char const*)>
c000d960:	83 c4 10             	add    esp,0x10
c000d963:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c000d968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96c:	89 10                	mov    DWORD PTR [eax],edx
c000d96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d972:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d97c:	90                   	nop
c000d97d:	83 c4 0c             	add    esp,0xc
c000d980:	c3                   	ret    
c000d981:	90                   	nop
c000d982:	66 90                	xchg   ax,ax

c000d984 <Serial::~Serial()>:
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c000d98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d990:	89 10                	mov    DWORD PTR [eax],edx
c000d992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d996:	83 ec 0c             	sub    esp,0xc
c000d999:	50                   	push   eax
c000d99a:	e8 97 e5 ff ff       	call   c000bf36 <Device::~Device()>
c000d99f:	83 c4 10             	add    esp,0x10
c000d9a2:	90                   	nop
c000d9a3:	83 c4 0c             	add    esp,0xc
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <Serial::~Serial()>:
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	83 ec 0c             	sub    esp,0xc
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	e8 cd ff ff ff       	call   c000d984 <Serial::~Serial()>
c000d9b7:	83 c4 10             	add    esp,0x10
c000d9ba:	83 ec 08             	sub    esp,0x8
c000d9bd:	68 58 01 00 00       	push   0x158
c000d9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c6:	e8 35 ce ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	83 c4 0c             	add    esp,0xc
c000d9d1:	c3                   	ret    
c000d9d2:	66 90                	xchg   ax,ax

c000d9d4 <Timer::Timer(char const*)>:
c000d9d4:	83 ec 0c             	sub    esp,0xc
c000d9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9db:	83 ec 08             	sub    esp,0x8
c000d9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e2:	50                   	push   eax
c000d9e3:	e8 e4 e7 ff ff       	call   c000c1cc <Device::Device(char const*)>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	ba 50 0e 02 c0       	mov    edx,0xc0020e50
c000d9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f4:	89 10                	mov    DWORD PTR [eax],edx
c000d9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da04:	90                   	nop
c000da05:	83 c4 0c             	add    esp,0xc
c000da08:	c3                   	ret    
c000da09:	90                   	nop
c000da0a:	66 90                	xchg   ax,ax

c000da0c <Timer::~Timer()>:
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	ba 50 0e 02 c0       	mov    edx,0xc0020e50
c000da14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da18:	89 10                	mov    DWORD PTR [eax],edx
c000da1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	50                   	push   eax
c000da22:	e8 0f e5 ff ff       	call   c000bf36 <Device::~Device()>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	90                   	nop
c000da2b:	83 c4 0c             	add    esp,0xc
c000da2e:	c3                   	ret    
c000da2f:	90                   	nop

c000da30 <Timer::~Timer()>:
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	83 ec 0c             	sub    esp,0xc
c000da36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3a:	e8 cd ff ff ff       	call   c000da0c <Timer::~Timer()>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	83 ec 08             	sub    esp,0x8
c000da45:	68 5c 01 00 00       	push   0x15c
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	e8 ad cd ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000da53:	83 c4 10             	add    esp,0x10
c000da56:	83 c4 0c             	add    esp,0xc
c000da59:	c3                   	ret    

c000da5a <Timer::read()>:
c000da5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da64:	c3                   	ret    

c000da65 <setupTimer(int)>:
c000da65:	53                   	push   ebx
c000da66:	83 ec 14             	sub    esp,0x14
c000da69:	68 5c 01 00 00       	push   0x15c
c000da6e:	e8 58 a0 ff ff       	call   c0007acb <malloc>
c000da73:	89 04 24             	mov    DWORD PTR [esp],eax
c000da76:	89 c3                	mov    ebx,eax
c000da78:	e8 57 07 01 00       	call   c001e1d4 <PIT::PIT()>
c000da7d:	58                   	pop    eax
c000da7e:	5a                   	pop    edx
c000da7f:	53                   	push   ebx
c000da80:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000da86:	e8 a9 e5 ff ff       	call   c000c034 <Device::addChild(Device*)>
c000da8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da8d:	6a 00                	push   0x0
c000da8f:	6a 00                	push   0x0
c000da91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da95:	53                   	push   ebx
c000da96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da99:	83 c4 28             	add    esp,0x28
c000da9c:	89 d8                	mov    eax,ebx
c000da9e:	5b                   	pop    ebx
c000da9f:	c3                   	ret    

c000daa0 <timerHandler(unsigned int)>:
c000daa0:	56                   	push   esi
c000daa1:	53                   	push   ebx
c000daa2:	51                   	push   ecx
c000daa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa7:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000daad:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000dab4:	0f 84 4a 01 00 00    	je     c000dc04 <timerHandler(unsigned int)+0x164>
c000daba:	fa                   	cli    
c000dabb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000dac1:	83 ec 0c             	sub    esp,0xc
c000dac4:	68 78 81 02 c0       	push   0xc0028178
c000dac9:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000dacf:	e8 6c 14 01 00       	call   c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dad4:	83 c4 10             	add    esp,0x10
c000dad7:	84 c0                	test   al,al
c000dad9:	0f 85 a1 00 00 00    	jne    c000db80 <timerHandler(unsigned int)+0xe0>
c000dadf:	83 ec 0c             	sub    esp,0xc
c000dae2:	68 78 81 02 c0       	push   0xc0028178
c000dae7:	e8 70 14 01 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000daec:	83 c4 10             	add    esp,0x10
c000daef:	89 c6                	mov    esi,eax
c000daf1:	8d 76 00             	lea    esi,[esi+0x0]
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	68 78 81 02 c0       	push   0xc0028178
c000dafc:	e8 5b 14 01 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db01:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000db08:	89 c3                	mov    ebx,eax
c000db0a:	e8 55 14 01 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db12:	83 c4 10             	add    esp,0x10
c000db15:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000db1b:	77 23                	ja     c000db40 <timerHandler(unsigned int)+0xa0>
c000db1d:	83 ec 0c             	sub    esp,0xc
c000db20:	53                   	push   ebx
c000db21:	e8 f6 7c 00 00       	call   c001581c <unblockTask(ThreadControlBlock*)>
c000db26:	83 c4 10             	add    esp,0x10
c000db29:	39 de                	cmp    esi,ebx
c000db2b:	75 27                	jne    c000db54 <timerHandler(unsigned int)+0xb4>
c000db2d:	83 ec 0c             	sub    esp,0xc
c000db30:	68 78 81 02 c0       	push   0xc0028178
c000db35:	e8 22 14 01 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db3a:	89 c6                	mov    esi,eax
c000db3c:	eb 12                	jmp    c000db50 <timerHandler(unsigned int)+0xb0>
c000db3e:	66 90                	xchg   ax,ax
c000db40:	52                   	push   edx
c000db41:	52                   	push   edx
c000db42:	53                   	push   ebx
c000db43:	68 78 81 02 c0       	push   0xc0028178
c000db48:	e8 d3 14 01 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000db4d:	8d 76 00             	lea    esi,[esi+0x0]
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	68 78 81 02 c0       	push   0xc0028178
c000db5c:	e8 df 13 01 00       	call   c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	84 c0                	test   al,al
c000db66:	75 18                	jne    c000db80 <timerHandler(unsigned int)+0xe0>
c000db68:	83 ec 0c             	sub    esp,0xc
c000db6b:	68 78 81 02 c0       	push   0xc0028178
c000db70:	e8 e7 13 01 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db75:	83 c4 10             	add    esp,0x10
c000db78:	39 f0                	cmp    eax,esi
c000db7a:	0f 85 74 ff ff ff    	jne    c000daf4 <timerHandler(unsigned int)+0x54>
c000db80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000db85:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000db89:	74 41                	je     c000dbcc <timerHandler(unsigned int)+0x12c>
c000db8b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000db92:	74 38                	je     c000dbcc <timerHandler(unsigned int)+0x12c>
c000db94:	fa                   	cli    
c000db95:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000db9b:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000dba0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dba6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dba9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbaf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dbb2:	72 08                	jb     c000dbbc <timerHandler(unsigned int)+0x11c>
c000dbb4:	e8 6b 77 00 00       	call   c0015324 <schedule()>
c000dbb9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbbc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dbc1:	48                   	dec    eax
c000dbc2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dbc7:	75 03                	jne    c000dbcc <timerHandler(unsigned int)+0x12c>
c000dbc9:	fb                   	sti    
c000dbca:	66 90                	xchg   ax,ax
c000dbcc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000dbd1:	48                   	dec    eax
c000dbd2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000dbd7:	75 1b                	jne    c000dbf4 <timerHandler(unsigned int)+0x154>
c000dbd9:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000dbe0:	74 12                	je     c000dbf4 <timerHandler(unsigned int)+0x154>
c000dbe2:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000dbec:	e8 33 77 00 00       	call   c0015324 <schedule()>
c000dbf1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000dbf9:	48                   	dec    eax
c000dbfa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000dbff:	75 03                	jne    c000dc04 <timerHandler(unsigned int)+0x164>
c000dc01:	fb                   	sti    
c000dc02:	66 90                	xchg   ax,ax
c000dc04:	58                   	pop    eax
c000dc05:	5b                   	pop    ebx
c000dc06:	5e                   	pop    esi
c000dc07:	c3                   	ret    

c000dc08 <VCache::VCache(PhysicalDisk*)>:
c000dc08:	53                   	push   ebx
c000dc09:	83 ec 18             	sub    esp,0x18
c000dc0c:	ba 80 0e 02 c0       	mov    edx,0xc0020e80
c000dc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc15:	89 10                	mov    DWORD PTR [eax],edx
c000dc17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc26:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc38:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc43:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dc4a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dc51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc55:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc60:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dc64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc68:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dc6f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dc7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc82:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc92:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dc99:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dca1:	83 ec 0c             	sub    esp,0xc
c000dca4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dca8:	e8 1e 9e ff ff       	call   c0007acb <malloc>
c000dcad:	83 c4 10             	add    esp,0x10
c000dcb0:	89 c3                	mov    ebx,eax
c000dcb2:	83 ec 0c             	sub    esp,0xc
c000dcb5:	53                   	push   ebx
c000dcb6:	e8 09 74 00 00       	call   c00150c4 <Mutex::Mutex()>
c000dcbb:	83 c4 10             	add    esp,0x10
c000dcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dcc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dccd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dcd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dcdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dcdf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dcf0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dcf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dcfc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd00:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd03:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd0a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd12:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd18:	05 00 02 00 00       	add    eax,0x200
c000dd1d:	c1 e0 03             	shl    eax,0x3
c000dd20:	83 ec 0c             	sub    esp,0xc
c000dd23:	50                   	push   eax
c000dd24:	e8 a2 9d ff ff       	call   c0007acb <malloc>
c000dd29:	83 c4 10             	add    esp,0x10
c000dd2c:	89 c2                	mov    edx,eax
c000dd2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd32:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd39:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd44:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dd48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd4c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd52:	89 d0                	mov    eax,edx
c000dd54:	c1 e0 02             	shl    eax,0x2
c000dd57:	01 d0                	add    eax,edx
c000dd59:	c1 e0 04             	shl    eax,0x4
c000dd5c:	83 ec 0c             	sub    esp,0xc
c000dd5f:	50                   	push   eax
c000dd60:	e8 66 9d ff ff       	call   c0007acb <malloc>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	89 c2                	mov    edx,eax
c000dd6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dd71:	90                   	nop
c000dd72:	83 c4 18             	add    esp,0x18
c000dd75:	5b                   	pop    ebx
c000dd76:	c3                   	ret    
c000dd77:	90                   	nop

c000dd78 <VCache::invalidateReadBuffer()>:
c000dd78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd7c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dd82:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dd86:	c3                   	ret    
c000dd87:	90                   	nop

c000dd88 <VCache::writeWriteBuffer()>:
c000dd88:	53                   	push   ebx
c000dd89:	83 ec 08             	sub    esp,0x8
c000dd8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd90:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd94:	74 1e                	je     c000ddb4 <VCache::writeWriteBuffer()+0x2c>
c000dd96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd99:	83 ec 0c             	sub    esp,0xc
c000dd9c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd9e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dda1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dda4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dda7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ddaa:	50                   	push   eax
c000ddab:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ddae:	83 c4 20             	add    esp,0x20
c000ddb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ddbb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ddc2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ddc6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ddcd:	83 c4 08             	add    esp,0x8
c000ddd0:	5b                   	pop    ebx
c000ddd1:	c3                   	ret    
c000ddd2:	66 90                	xchg   ax,ax

c000ddd4 <VCache::~VCache()>:
c000ddd4:	83 ec 0c             	sub    esp,0xc
c000ddd7:	ba 80 0e 02 c0       	mov    edx,0xc0020e80
c000dddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde0:	89 10                	mov    DWORD PTR [eax],edx
c000dde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dde9:	0f b6 c0             	movzx  eax,al
c000ddec:	85 c0                	test   eax,eax
c000ddee:	74 10                	je     c000de00 <VCache::~VCache()+0x2c>
c000ddf0:	83 ec 0c             	sub    esp,0xc
c000ddf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf7:	e8 8c ff ff ff       	call   c000dd88 <VCache::writeWriteBuffer()>
c000ddfc:	83 c4 10             	add    esp,0x10
c000ddff:	90                   	nop
c000de00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de04:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de07:	83 ec 0c             	sub    esp,0xc
c000de0a:	50                   	push   eax
c000de0b:	e8 cb 9c ff ff       	call   c0007adb <free>
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de1a:	83 ec 0c             	sub    esp,0xc
c000de1d:	50                   	push   eax
c000de1e:	e8 b8 9c ff ff       	call   c0007adb <free>
c000de23:	83 c4 10             	add    esp,0x10
c000de26:	90                   	nop
c000de27:	83 c4 0c             	add    esp,0xc
c000de2a:	c3                   	ret    
c000de2b:	90                   	nop

c000de2c <VCache::~VCache()>:
c000de2c:	83 ec 0c             	sub    esp,0xc
c000de2f:	83 ec 0c             	sub    esp,0xc
c000de32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de36:	e8 99 ff ff ff       	call   c000ddd4 <VCache::~VCache()>
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	83 ec 08             	sub    esp,0x8
c000de41:	6a 44                	push   0x44
c000de43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de47:	e8 b4 c9 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000de4c:	83 c4 10             	add    esp,0x10
c000de4f:	83 c4 0c             	add    esp,0xc
c000de52:	c3                   	ret    
c000de53:	90                   	nop

c000de54 <VCache::write(unsigned long long, int, void*)>:
c000de54:	55                   	push   ebp
c000de55:	57                   	push   edi
c000de56:	56                   	push   esi
c000de57:	53                   	push   ebx
c000de58:	83 ec 1c             	sub    esp,0x1c
c000de5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000de5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de63:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000de67:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de6b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000de6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de73:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000de77:	74 0f                	je     c000de88 <VCache::write(unsigned long long, int, void*)+0x34>
c000de79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000de7d:	53                   	push   ebx
c000de7e:	e8 f5 fe ff ff       	call   c000dd78 <VCache::invalidateReadBuffer()>
c000de83:	58                   	pop    eax
c000de84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de88:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000de8c:	74 66                	je     c000def4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000de8e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000de91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de95:	99                   	cdq    
c000de96:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000de99:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000de9c:	89 c6                	mov    esi,eax
c000de9e:	31 ce                	xor    esi,ecx
c000dea0:	89 d0                	mov    eax,edx
c000dea2:	31 e8                	xor    eax,ebp
c000dea4:	09 c6                	or     esi,eax
c000dea6:	75 38                	jne    c000dee0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dea8:	83 ff 01             	cmp    edi,0x1
c000deab:	75 33                	jne    c000dee0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dead:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000deb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000deb4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000deb8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000debe:	0f af f9             	imul   edi,ecx
c000dec1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dec4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dec6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dec9:	40                   	inc    eax
c000deca:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000decd:	83 f8 50             	cmp    eax,0x50
c000ded0:	75 72                	jne    c000df44 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ded2:	83 ec 0c             	sub    esp,0xc
c000ded5:	53                   	push   ebx
c000ded6:	e8 ad fe ff ff       	call   c000dd88 <VCache::writeWriteBuffer()>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	eb 64                	jmp    c000df44 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dee0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dee4:	83 ec 0c             	sub    esp,0xc
c000dee7:	53                   	push   ebx
c000dee8:	e8 9b fe ff ff       	call   c000dd88 <VCache::writeWriteBuffer()>
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000def4:	83 ff 4f             	cmp    edi,0x4f
c000def7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000defa:	7f 20                	jg     c000df1c <VCache::write(unsigned long long, int, void*)+0xc8>
c000defc:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000deff:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df03:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000df06:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df09:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000df0c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df10:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df18:	eb 2a                	jmp    c000df44 <VCache::write(unsigned long long, int, void*)+0xf0>
c000df1a:	66 90                	xchg   ax,ax
c000df1c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df20:	8b 10                	mov    edx,DWORD PTR [eax]
c000df22:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df26:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df2e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000df32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df36:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df39:	83 c4 1c             	add    esp,0x1c
c000df3c:	5b                   	pop    ebx
c000df3d:	5e                   	pop    esi
c000df3e:	5f                   	pop    edi
c000df3f:	5d                   	pop    ebp
c000df40:	ff e0                	jmp    eax
c000df42:	66 90                	xchg   ax,ax
c000df44:	83 c4 1c             	add    esp,0x1c
c000df47:	31 c0                	xor    eax,eax
c000df49:	5b                   	pop    ebx
c000df4a:	5e                   	pop    esi
c000df4b:	5f                   	pop    edi
c000df4c:	5d                   	pop    ebp
c000df4d:	c3                   	ret    

c000df4e <VCache::read(unsigned long long, int, void*)>:
c000df4e:	55                   	push   ebp
c000df4f:	57                   	push   edi
c000df50:	56                   	push   esi
c000df51:	53                   	push   ebx
c000df52:	83 ec 1c             	sub    esp,0x1c
c000df55:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000df59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df5d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000df61:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000df65:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000df69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df6d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000df71:	74 0d                	je     c000df80 <VCache::read(unsigned long long, int, void*)+0x32>
c000df73:	83 ec 0c             	sub    esp,0xc
c000df76:	57                   	push   edi
c000df77:	e8 0c fe ff ff       	call   c000dd88 <VCache::writeWriteBuffer()>
c000df7c:	83 c4 10             	add    esp,0x10
c000df7f:	90                   	nop
c000df80:	83 fd 01             	cmp    ebp,0x1
c000df83:	0f 85 93 00 00 00    	jne    c000e01c <VCache::read(unsigned long long, int, void*)+0xce>
c000df89:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000df8c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000df93:	89 04 24             	mov    DWORD PTR [esp],eax
c000df96:	0f 85 80 00 00 00    	jne    c000e01c <VCache::read(unsigned long long, int, void*)+0xce>
c000df9c:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000df9f:	89 cd                	mov    ebp,ecx
c000dfa1:	f7 dd                	neg    ebp
c000dfa3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dfa7:	89 e8                	mov    eax,ebp
c000dfa9:	21 dd                	and    ebp,ebx
c000dfab:	c1 f8 1f             	sar    eax,0x1f
c000dfae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dfb2:	89 e8                	mov    eax,ebp
c000dfb4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dfb8:	21 f5                	and    ebp,esi
c000dfba:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dfbe:	89 ea                	mov    edx,ebp
c000dfc0:	74 2e                	je     c000dff0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfc2:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dfc5:	75 29                	jne    c000dff0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfc7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dfca:	75 24                	jne    c000dff0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfcc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfcf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dfd5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dfd8:	8d 70 ff             	lea    esi,[eax-0x1]
c000dfdb:	21 f3                	and    ebx,esi
c000dfdd:	0f af d9             	imul   ebx,ecx
c000dfe0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dfe3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dfe7:	89 de                	mov    esi,ebx
c000dfe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfeb:	31 c0                	xor    eax,eax
c000dfed:	eb 61                	jmp    c000e050 <VCache::read(unsigned long long, int, void*)+0x102>
c000dfef:	90                   	nop
c000dff0:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dffa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dffe:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e001:	8b 36                	mov    esi,DWORD PTR [esi]
c000e003:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e006:	51                   	push   ecx
c000e007:	52                   	push   edx
c000e008:	50                   	push   eax
c000e009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e010:	83 c4 20             	add    esp,0x20
c000e013:	85 c0                	test   eax,eax
c000e015:	75 39                	jne    c000e050 <VCache::read(unsigned long long, int, void*)+0x102>
c000e017:	eb b3                	jmp    c000dfcc <VCache::read(unsigned long long, int, void*)+0x7e>
c000e019:	8d 76 00             	lea    esi,[esi+0x0]
c000e01c:	83 ec 0c             	sub    esp,0xc
c000e01f:	57                   	push   edi
c000e020:	e8 53 fd ff ff       	call   c000dd78 <VCache::invalidateReadBuffer()>
c000e025:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e028:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e02c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e02e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e032:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e036:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e03a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e03e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e042:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e045:	83 c4 2c             	add    esp,0x2c
c000e048:	5b                   	pop    ebx
c000e049:	5e                   	pop    esi
c000e04a:	5f                   	pop    edi
c000e04b:	5d                   	pop    ebp
c000e04c:	ff e0                	jmp    eax
c000e04e:	66 90                	xchg   ax,ax
c000e050:	83 c4 1c             	add    esp,0x1c
c000e053:	5b                   	pop    ebx
c000e054:	5e                   	pop    esi
c000e055:	5f                   	pop    edi
c000e056:	5d                   	pop    ebp
c000e057:	c3                   	ret    

c000e058 <Video::putrect(int, int, int, int, unsigned int)>:
c000e058:	55                   	push   ebp
c000e059:	57                   	push   edi
c000e05a:	56                   	push   esi
c000e05b:	53                   	push   ebx
c000e05c:	83 ec 1c             	sub    esp,0x1c
c000e05f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e063:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e067:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e06b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e06f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e073:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e077:	01 df                	add    edi,ebx
c000e079:	39 fb                	cmp    ebx,edi
c000e07b:	7d 1f                	jge    c000e09c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e07d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e081:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e085:	7d 12                	jge    c000e099 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e087:	8b 16                	mov    edx,DWORD PTR [esi]
c000e089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e08d:	53                   	push   ebx
c000e08e:	55                   	push   ebp
c000e08f:	45                   	inc    ebp
c000e090:	56                   	push   esi
c000e091:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e094:	83 c4 10             	add    esp,0x10
c000e097:	eb e8                	jmp    c000e081 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e099:	43                   	inc    ebx
c000e09a:	eb dd                	jmp    c000e079 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e09c:	83 c4 1c             	add    esp,0x1c
c000e09f:	5b                   	pop    ebx
c000e0a0:	5e                   	pop    esi
c000e0a1:	5f                   	pop    edi
c000e0a2:	5d                   	pop    ebp
c000e0a3:	c3                   	ret    

c000e0a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e0a4:	55                   	push   ebp
c000e0a5:	57                   	push   edi
c000e0a6:	31 ff                	xor    edi,edi
c000e0a8:	56                   	push   esi
c000e0a9:	53                   	push   ebx
c000e0aa:	83 ec 1c             	sub    esp,0x1c
c000e0ad:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e0b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e0b5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e0bc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e0c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e0c9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e0cd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e0d0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e0d4:	01 f9                	add    ecx,edi
c000e0d6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e0da:	7d 2f                	jge    c000e10b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e0dc:	31 f6                	xor    esi,esi
c000e0de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e0e2:	01 f2                	add    edx,esi
c000e0e4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e0e8:	7d 1a                	jge    c000e104 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e0ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e0ed:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e0f0:	46                   	inc    esi
c000e0f1:	51                   	push   ecx
c000e0f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e0f6:	52                   	push   edx
c000e0f7:	55                   	push   ebp
c000e0f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0fb:	83 c4 10             	add    esp,0x10
c000e0fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e102:	eb da                	jmp    c000e0de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e104:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e108:	47                   	inc    edi
c000e109:	eb c5                	jmp    c000e0d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e10b:	83 c4 1c             	add    esp,0x1c
c000e10e:	5b                   	pop    ebx
c000e10f:	5e                   	pop    esi
c000e110:	5f                   	pop    edi
c000e111:	5d                   	pop    ebp
c000e112:	c3                   	ret    
c000e113:	90                   	nop

c000e114 <Video::blit(unsigned int*, int, int, int, int)>:
c000e114:	55                   	push   ebp
c000e115:	ba 00 00 00 00       	mov    edx,0x0
c000e11a:	57                   	push   edi
c000e11b:	56                   	push   esi
c000e11c:	53                   	push   ebx
c000e11d:	83 ec 1c             	sub    esp,0x1c
c000e120:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e124:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e128:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e12c:	85 c0                	test   eax,eax
c000e12e:	0f 49 d0             	cmovns edx,eax
c000e131:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e138:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e13c:	89 eb                	mov    ebx,ebp
c000e13e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e142:	01 ea                	add    edx,ebp
c000e144:	39 da                	cmp    edx,ebx
c000e146:	7e 54                	jle    c000e19c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e148:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e14e:	7c 4c                	jl     c000e19c <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e150:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e154:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e158:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e15c:	01 c1                	add    ecx,eax
c000e15e:	39 f9                	cmp    ecx,edi
c000e160:	7e 2f                	jle    c000e191 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e162:	83 c2 04             	add    edx,0x4
c000e165:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e16b:	7c 21                	jl     c000e18e <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e16d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e171:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e173:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e176:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e17a:	55                   	push   ebp
c000e17b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e17f:	56                   	push   esi
c000e180:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e183:	83 c4 10             	add    esp,0x10
c000e186:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e18a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e18e:	47                   	inc    edi
c000e18f:	eb c7                	jmp    c000e158 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e191:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e195:	43                   	inc    ebx
c000e196:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e19a:	eb a2                	jmp    c000e13e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e19c:	83 c4 1c             	add    esp,0x1c
c000e19f:	5b                   	pop    ebx
c000e1a0:	5e                   	pop    esi
c000e1a1:	5f                   	pop    edi
c000e1a2:	5d                   	pop    ebp
c000e1a3:	c3                   	ret    

c000e1a4 <Video::clearScreen(unsigned int)>:
c000e1a4:	57                   	push   edi
c000e1a5:	56                   	push   esi
c000e1a6:	53                   	push   ebx
c000e1a7:	31 db                	xor    ebx,ebx
c000e1a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1ad:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e1b3:	7e 1f                	jle    c000e1d4 <Video::clearScreen(unsigned int)+0x30>
c000e1b5:	31 ff                	xor    edi,edi
c000e1b7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1bd:	7e 12                	jle    c000e1d1 <Video::clearScreen(unsigned int)+0x2d>
c000e1bf:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1c5:	53                   	push   ebx
c000e1c6:	57                   	push   edi
c000e1c7:	47                   	inc    edi
c000e1c8:	56                   	push   esi
c000e1c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	eb e6                	jmp    c000e1b7 <Video::clearScreen(unsigned int)+0x13>
c000e1d1:	43                   	inc    ebx
c000e1d2:	eb d9                	jmp    c000e1ad <Video::clearScreen(unsigned int)+0x9>
c000e1d4:	5b                   	pop    ebx
c000e1d5:	5e                   	pop    esi
c000e1d6:	5f                   	pop    edi
c000e1d7:	c3                   	ret    

c000e1d8 <Video::putpixel(int, int, unsigned int)>:
c000e1d8:	c7 44 24 04 88 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020e88
c000e1e0:	e9 38 29 00 00       	jmp    c0010b1d <KePanic(char const*)>
c000e1e5:	90                   	nop

c000e1e6 <Video::readPixelApprox(int, int)>:
c000e1e6:	83 ec 18             	sub    esp,0x18
c000e1e9:	68 a9 0e 02 c0       	push   0xc0020ea9
c000e1ee:	e8 2a 29 00 00       	call   c0010b1d <KePanic(char const*)>
c000e1f3:	31 c0                	xor    eax,eax
c000e1f5:	83 c4 1c             	add    esp,0x1c
c000e1f8:	c3                   	ret    
c000e1f9:	90                   	nop

c000e1fa <Video::Video(char const*)>:
c000e1fa:	83 ec 0c             	sub    esp,0xc
c000e1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	50                   	push   eax
c000e209:	e8 be df ff ff       	call   c000c1cc <Device::Device(char const*)>
c000e20e:	83 c4 10             	add    esp,0x10
c000e211:	ba 24 0f 02 c0       	mov    edx,0xc0020f24
c000e216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e21a:	89 10                	mov    DWORD PTR [eax],edx
c000e21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e220:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e22a:	90                   	nop
c000e22b:	83 c4 0c             	add    esp,0xc
c000e22e:	c3                   	ret    
c000e22f:	90                   	nop

c000e230 <Video::~Video()>:
c000e230:	83 ec 0c             	sub    esp,0xc
c000e233:	ba 24 0f 02 c0       	mov    edx,0xc0020f24
c000e238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e23c:	89 10                	mov    DWORD PTR [eax],edx
c000e23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e242:	83 ec 0c             	sub    esp,0xc
c000e245:	50                   	push   eax
c000e246:	e8 eb dc ff ff       	call   c000bf36 <Device::~Device()>
c000e24b:	83 c4 10             	add    esp,0x10
c000e24e:	90                   	nop
c000e24f:	83 c4 0c             	add    esp,0xc
c000e252:	c3                   	ret    
c000e253:	90                   	nop

c000e254 <Video::~Video()>:
c000e254:	83 ec 0c             	sub    esp,0xc
c000e257:	83 ec 0c             	sub    esp,0xc
c000e25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25e:	e8 cd ff ff ff       	call   c000e230 <Video::~Video()>
c000e263:	83 c4 10             	add    esp,0x10
c000e266:	83 ec 08             	sub    esp,0x8
c000e269:	68 64 01 00 00       	push   0x164
c000e26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e272:	e8 89 c5 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c000e277:	83 c4 10             	add    esp,0x10
c000e27a:	83 c4 0c             	add    esp,0xc
c000e27d:	c3                   	ret    

c000e27e <Video::isMonochrome()>:
c000e27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e282:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e288:	c3                   	ret    
c000e289:	90                   	nop

c000e28a <Video::getWidth()>:
c000e28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e28e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <Video::getHeight()>:
c000e296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e29a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2a0:	c3                   	ret    
c000e2a1:	90                   	nop

c000e2a2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e2a2:	55                   	push   ebp
c000e2a3:	57                   	push   edi
c000e2a4:	56                   	push   esi
c000e2a5:	53                   	push   ebx
c000e2a6:	83 ec 2c             	sub    esp,0x2c
c000e2a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e2ad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e2b1:	83 f8 01             	cmp    eax,0x1
c000e2b4:	19 c9                	sbb    ecx,ecx
c000e2b6:	31 db                	xor    ebx,ebx
c000e2b8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e2bc:	89 ce                	mov    esi,ecx
c000e2be:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e2c6:	f7 d6                	not    esi
c000e2c8:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e2ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e2d2:	01 d8                	add    eax,ebx
c000e2d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2d8:	57                   	push   edi
c000e2d9:	e8 b8 ff ff ff       	call   c000e296 <Video::getHeight()>
c000e2de:	59                   	pop    ecx
c000e2df:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e2e3:	7e 70                	jle    c000e355 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e2e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e2e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e2ed:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e2f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e2f8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e2ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e303:	89 e8                	mov    eax,ebp
c000e305:	83 c0 20             	add    eax,0x20
c000e308:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e30c:	57                   	push   edi
c000e30d:	e8 78 ff ff ff       	call   c000e28a <Video::getWidth()>
c000e312:	5a                   	pop    edx
c000e313:	39 c5                	cmp    ebp,eax
c000e315:	7d 34                	jge    c000e34b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e317:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e31c:	74 05                	je     c000e323 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e31e:	8b 07                	mov    eax,DWORD PTR [edi]
c000e320:	56                   	push   esi
c000e321:	eb 0d                	jmp    c000e330 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e323:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e328:	74 12                	je     c000e33c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e32a:	8b 07                	mov    eax,DWORD PTR [edi]
c000e32c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e330:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e334:	55                   	push   ebp
c000e335:	57                   	push   edi
c000e336:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e340:	45                   	inc    ebp
c000e341:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e345:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e349:	75 c1                	jne    c000e30c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e34b:	43                   	inc    ebx
c000e34c:	83 fb 20             	cmp    ebx,0x20
c000e34f:	0f 85 79 ff ff ff    	jne    c000e2ce <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e355:	83 c4 2c             	add    esp,0x2c
c000e358:	5b                   	pop    ebx
c000e359:	5e                   	pop    esi
c000e35a:	5f                   	pop    edi
c000e35b:	5d                   	pop    ebp
c000e35c:	c3                   	ret    
c000e35d:	90                   	nop

c000e35e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e35e:	55                   	push   ebp
c000e35f:	57                   	push   edi
c000e360:	56                   	push   esi
c000e361:	53                   	push   ebx
c000e362:	83 ec 28             	sub    esp,0x28
c000e365:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e369:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e36d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e371:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e375:	c1 e7 08             	shl    edi,0x8
c000e378:	01 c7                	add    edi,eax
c000e37a:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e37e:	c1 e6 08             	shl    esi,0x8
c000e381:	01 f0                	add    eax,esi
c000e383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e387:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e38b:	0f af c7             	imul   eax,edi
c000e38e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e395:	50                   	push   eax
c000e396:	e8 30 97 ff ff       	call   c0007acb <malloc>
c000e39b:	83 c4 10             	add    esp,0x10
c000e39e:	85 c0                	test   eax,eax
c000e3a0:	89 c5                	mov    ebp,eax
c000e3a2:	75 10                	jne    c000e3b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	68 d4 0e 02 c0       	push   0xc0020ed4
c000e3ac:	e8 6c 27 00 00       	call   c0010b1d <KePanic(char const*)>
c000e3b1:	83 c4 10             	add    esp,0x10
c000e3b4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e3b8:	ba 12 00 00 00       	mov    edx,0x12
c000e3bd:	85 c0                	test   eax,eax
c000e3bf:	74 11                	je     c000e3d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e3c1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e3c5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e3c9:	c1 fa 03             	sar    edx,0x3
c000e3cc:	0f af d1             	imul   edx,ecx
c000e3cf:	83 c2 12             	add    edx,0x12
c000e3d2:	85 ff                	test   edi,edi
c000e3d4:	74 06                	je     c000e3dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e3d6:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e3da:	75 12                	jne    c000e3ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e3dc:	83 ec 0c             	sub    esp,0xc
c000e3df:	68 e4 0e 02 c0       	push   0xc0020ee4
c000e3e4:	e8 15 c5 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000e3e9:	e9 b8 00 00 00       	jmp    c000e4a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e3ee:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e3f2:	83 f9 02             	cmp    ecx,0x2
c000e3f5:	0f 85 96 00 00 00    	jne    c000e491 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e3fb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e400:	75 0e                	jne    c000e410 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e402:	85 c0                	test   eax,eax
c000e404:	75 0a                	jne    c000e410 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e406:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e409:	83 e8 18             	sub    eax,0x18
c000e40c:	a8 f7                	test   al,0xf7
c000e40e:	74 0a                	je     c000e41a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e410:	83 ec 0c             	sub    esp,0xc
c000e413:	68 f9 0e 02 c0       	push   0xc0020ef9
c000e418:	eb 7f                	jmp    c000e499 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e41a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e422:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e42a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000e42e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e432:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e43a:	75 0c                	jne    c000e448 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e43c:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000e441:	c1 e1 18             	shl    ecx,0x18
c000e444:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e448:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e44d:	46                   	inc    esi
c000e44e:	89 c8                	mov    eax,ecx
c000e450:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e455:	c1 e0 10             	shl    eax,0x10
c000e458:	c1 e1 08             	shl    ecx,0x8
c000e45b:	09 c1                	or     ecx,eax
c000e45d:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e461:	09 c1                	or     ecx,eax
c000e463:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e467:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000e46b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e46f:	c1 f8 03             	sar    eax,0x3
c000e472:	01 c2                	add    edx,eax
c000e474:	89 f0                	mov    eax,esi
c000e476:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e47a:	39 c7                	cmp    edi,eax
c000e47c:	7f b0                	jg     c000e42e <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e47e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e486:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e489:	7e 22                	jle    c000e4ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e48b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000e48f:	eb 99                	jmp    c000e42a <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e491:	50                   	push   eax
c000e492:	50                   	push   eax
c000e493:	51                   	push   ecx
c000e494:	68 07 0f 02 c0       	push   0xc0020f07
c000e499:	e8 60 c4 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c000e49e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e4a1:	e8 35 96 ff ff       	call   c0007adb <free>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	31 ed                	xor    ebp,ebp
c000e4ab:	eb 0f                	jmp    c000e4bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e4ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4b1:	89 38                	mov    DWORD PTR [eax],edi
c000e4b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000e4ba:	89 38                	mov    DWORD PTR [eax],edi
c000e4bc:	83 c4 1c             	add    esp,0x1c
c000e4bf:	89 e8                	mov    eax,ebp
c000e4c1:	5b                   	pop    ebx
c000e4c2:	5e                   	pop    esi
c000e4c3:	5f                   	pop    edi
c000e4c4:	5d                   	pop    ebp
c000e4c5:	c3                   	ret    

c000e4c6 <Video::putTGA(int, int, unsigned char*, int)>:
c000e4c6:	55                   	push   ebp
c000e4c7:	57                   	push   edi
c000e4c8:	56                   	push   esi
c000e4c9:	53                   	push   ebx
c000e4ca:	83 ec 28             	sub    esp,0x28
c000e4cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4d1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e4d5:	50                   	push   eax
c000e4d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4da:	50                   	push   eax
c000e4db:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4e3:	57                   	push   edi
c000e4e4:	e8 75 fe ff ff       	call   c000e35e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e4e9:	83 c4 20             	add    esp,0x20
c000e4ec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e4f0:	85 c0                	test   eax,eax
c000e4f2:	74 35                	je     c000e529 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e4f4:	89 c6                	mov    esi,eax
c000e4f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4fa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4fe:	39 d8                	cmp    eax,ebx
c000e500:	7e 27                	jle    c000e529 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e502:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e506:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e50a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e50e:	39 e9                	cmp    ecx,ebp
c000e510:	7e 14                	jle    c000e526 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e512:	83 c6 04             	add    esi,0x4
c000e515:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e517:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e51a:	53                   	push   ebx
c000e51b:	55                   	push   ebp
c000e51c:	45                   	inc    ebp
c000e51d:	57                   	push   edi
c000e51e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e521:	83 c4 10             	add    esp,0x10
c000e524:	eb e0                	jmp    c000e506 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e526:	43                   	inc    ebx
c000e527:	eb cd                	jmp    c000e4f6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e529:	83 c4 1c             	add    esp,0x1c
c000e52c:	5b                   	pop    ebx
c000e52d:	5e                   	pop    esi
c000e52e:	5f                   	pop    edi
c000e52f:	5d                   	pop    ebp
c000e530:	c3                   	ret    
c000e531:	66 90                	xchg   ax,ax
c000e533:	90                   	nop

c000e534 <ACPI::close(int, int, void*)>:
c000e534:	83 ec 1c             	sub    esp,0x1c
c000e537:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e53f:	74 0b                	je     c000e54c <ACPI::close(int, int, void*)+0x18>
c000e541:	b8 00 00 00 00       	mov    eax,0x0
c000e546:	e9 99 00 00 00       	jmp    c000e5e4 <ACPI::close(int, int, void*)+0xb0>
c000e54b:	90                   	nop
c000e54c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e551:	75 29                	jne    c000e57c <ACPI::close(int, int, void*)+0x48>
c000e553:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e558:	85 c0                	test   eax,eax
c000e55a:	74 08                	je     c000e564 <ACPI::close(int, int, void*)+0x30>
c000e55c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e561:	ff d0                	call   eax
c000e563:	90                   	nop
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	68 68 0f 02 c0       	push   0xc0020f68
c000e56c:	e8 ac 25 00 00       	call   c0010b1d <KePanic(char const*)>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e579:	eb 69                	jmp    c000e5e4 <ACPI::close(int, int, void*)+0xb0>
c000e57b:	90                   	nop
c000e57c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e581:	75 59                	jne    c000e5dc <ACPI::close(int, int, void*)+0xa8>
c000e583:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e588:	85 c0                	test   eax,eax
c000e58a:	74 08                	je     c000e594 <ACPI::close(int, int, void*)+0x60>
c000e58c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e591:	ff d0                	call   eax
c000e593:	90                   	nop
c000e594:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e599:	8d 76 00             	lea    esi,[esi+0x0]
c000e59c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e5a1:	83 e0 02             	and    eax,0x2
c000e5a4:	74 1e                	je     c000e5c4 <ACPI::close(int, int, void*)+0x90>
c000e5a6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e5ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b1:	89 c2                	mov    edx,eax
c000e5b3:	ec                   	in     al,dx
c000e5b4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e5b8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e5bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5c0:	eb da                	jmp    c000e59c <ACPI::close(int, int, void*)+0x68>
c000e5c2:	66 90                	xchg   ax,ax
c000e5c4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e5cb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e5d0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e5d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d8:	ee                   	out    dx,al
c000e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5e4:	83 c4 1c             	add    esp,0x1c
c000e5e7:	c3                   	ret    

c000e5e8 <findRSDP()>:
c000e5e8:	83 ec 1c             	sub    esp,0x1c
c000e5eb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e5f0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e5f6:	83 e0 04             	and    eax,0x4
c000e5f9:	0f b6 c0             	movzx  eax,al
c000e5fc:	85 c0                	test   eax,eax
c000e5fe:	75 08                	jne    c000e608 <findRSDP()+0x20>
c000e600:	b8 00 00 00 00       	mov    eax,0x0
c000e605:	eb 75                	jmp    c000e67c <findRSDP()+0x94>
c000e607:	90                   	nop
c000e608:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e60d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e612:	7f 1c                	jg     c000e630 <findRSDP()+0x48>
c000e614:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e619:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e61f:	83 e2 fb             	and    edx,0xfffffffb
c000e622:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e628:	b8 00 00 00 00       	mov    eax,0x0
c000e62d:	eb 4d                	jmp    c000e67c <findRSDP()+0x94>
c000e62f:	90                   	nop
c000e630:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e638:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e640:	77 32                	ja     c000e674 <findRSDP()+0x8c>
c000e642:	83 ec 04             	sub    esp,0x4
c000e645:	6a 08                	push   0x8
c000e647:	68 03 10 02 c0       	push   0xc0021003
c000e64c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e650:	e8 2b 1d ff ff       	call   c0000380 <memcmp>
c000e655:	83 c4 10             	add    esp,0x10
c000e658:	85 c0                	test   eax,eax
c000e65a:	0f 94 c0             	sete   al
c000e65d:	0f b6 c0             	movzx  eax,al
c000e660:	85 c0                	test   eax,eax
c000e662:	74 08                	je     c000e66c <findRSDP()+0x84>
c000e664:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e668:	eb 12                	jmp    c000e67c <findRSDP()+0x94>
c000e66a:	66 90                	xchg   ax,ax
c000e66c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e671:	eb c5                	jmp    c000e638 <findRSDP()+0x50>
c000e673:	90                   	nop
c000e674:	b8 00 00 00 00       	mov    eax,0x0
c000e679:	8d 76 00             	lea    esi,[esi+0x0]
c000e67c:	83 c4 1c             	add    esp,0x1c
c000e67f:	c3                   	ret    

c000e680 <loadACPITables(unsigned char*)>:
c000e680:	57                   	push   edi
c000e681:	56                   	push   esi
c000e682:	53                   	push   ebx
c000e683:	83 ec 60             	sub    esp,0x60
c000e686:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e68b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e691:	83 e0 04             	and    eax,0x4
c000e694:	0f b6 c0             	movzx  eax,al
c000e697:	85 c0                	test   eax,eax
c000e699:	0f 84 41 02 00 00    	je     c000e8e0 <loadACPITables(unsigned char*)+0x260>
c000e69f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e6a4:	0f b6 c0             	movzx  eax,al
c000e6a7:	85 c0                	test   eax,eax
c000e6a9:	74 79                	je     c000e724 <loadACPITables(unsigned char*)+0xa4>
c000e6ab:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6af:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e6b3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6ba:	83 e8 24             	sub    eax,0x24
c000e6bd:	c1 e8 03             	shr    eax,0x3
c000e6c0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6c4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e6cc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6d0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e6d4:	0f 8d ba 00 00 00    	jge    c000e794 <loadACPITables(unsigned char*)+0x114>
c000e6da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6de:	83 c0 24             	add    eax,0x24
c000e6e1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e6e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e6e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6ed:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6f1:	c1 e0 03             	shl    eax,0x3
c000e6f4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e6f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e6ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000e701:	89 c1                	mov    ecx,eax
c000e703:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e708:	8d 50 01             	lea    edx,[eax+0x1]
c000e70b:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e711:	89 ca                	mov    edx,ecx
c000e713:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e71a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e71f:	eb ab                	jmp    c000e6cc <loadACPITables(unsigned char*)+0x4c>
c000e721:	8d 76 00             	lea    esi,[esi+0x0]
c000e724:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e728:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e72c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e733:	83 e8 24             	sub    eax,0x24
c000e736:	c1 e8 02             	shr    eax,0x2
c000e739:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e73d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e745:	8d 76 00             	lea    esi,[esi+0x0]
c000e748:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e74c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e750:	7d 42                	jge    c000e794 <loadACPITables(unsigned char*)+0x114>
c000e752:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e756:	83 c0 24             	add    eax,0x24
c000e759:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e75d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e761:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e765:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e769:	c1 e0 02             	shl    eax,0x2
c000e76c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e770:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e774:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e776:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e77b:	8d 50 01             	lea    edx,[eax+0x1]
c000e77e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e784:	89 ca                	mov    edx,ecx
c000e786:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e78d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e792:	eb b4                	jmp    c000e748 <loadACPITables(unsigned char*)+0xc8>
c000e794:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e79c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7a1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e7a5:	0f 8d 39 01 00 00    	jge    c000e8e4 <loadACPITables(unsigned char*)+0x264>
c000e7ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e7af:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e7ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7be:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c6:	25 ff 0f 00 00       	and    eax,0xfff
c000e7cb:	89 c6                	mov    esi,eax
c000e7cd:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e7d3:	83 ec 0c             	sub    esp,0xc
c000e7d6:	6a 01                	push   0x1
c000e7d8:	e8 0c ae ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e7dd:	83 c4 10             	add    esp,0x10
c000e7e0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ea:	83 ec 0c             	sub    esp,0xc
c000e7ed:	6a 01                	push   0x1
c000e7ef:	6a 01                	push   0x1
c000e7f1:	50                   	push   eax
c000e7f2:	52                   	push   edx
c000e7f3:	53                   	push   ebx
c000e7f4:	e8 03 b7 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7f9:	83 c4 20             	add    esp,0x20
c000e7fc:	09 f0                	or     eax,esi
c000e7fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e802:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e806:	c1 e0 03             	shl    eax,0x3
c000e809:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e80e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e812:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e816:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e81a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e82a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e82e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e832:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e836:	89 c6                	mov    esi,eax
c000e838:	89 d7                	mov    edi,edx
c000e83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e83c:	89 c8                	mov    eax,ecx
c000e83e:	89 fa                	mov    edx,edi
c000e840:	89 f3                	mov    ebx,esi
c000e842:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e846:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e84a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e84e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e852:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e855:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e85d:	05 00 10 00 00       	add    eax,0x1000
c000e862:	c1 e8 0c             	shr    eax,0xc
c000e865:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e86d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e871:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e875:	25 ff 0f 00 00       	and    eax,0xfff
c000e87a:	89 c6                	mov    esi,eax
c000e87c:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e882:	83 ec 0c             	sub    esp,0xc
c000e885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e889:	e8 5b ad ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e88e:	83 c4 10             	add    esp,0x10
c000e891:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e895:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e89b:	83 ec 0c             	sub    esp,0xc
c000e89e:	6a 01                	push   0x1
c000e8a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e8a4:	50                   	push   eax
c000e8a5:	52                   	push   edx
c000e8a6:	53                   	push   ebx
c000e8a7:	e8 50 b6 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8ac:	83 c4 20             	add    esp,0x20
c000e8af:	09 f0                	or     eax,esi
c000e8b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8b9:	83 ec 0c             	sub    esp,0xc
c000e8bc:	50                   	push   eax
c000e8bd:	e8 3b b0 ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c000e8c2:	83 c4 10             	add    esp,0x10
c000e8c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e8c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8cd:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e8d4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e8d9:	e9 be fe ff ff       	jmp    c000e79c <loadACPITables(unsigned char*)+0x11c>
c000e8de:	66 90                	xchg   ax,ax
c000e8e0:	90                   	nop
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	83 c4 60             	add    esp,0x60
c000e8e7:	5b                   	pop    ebx
c000e8e8:	5e                   	pop    esi
c000e8e9:	5f                   	pop    edi
c000e8ea:	c3                   	ret    
c000e8eb:	90                   	nop

c000e8ec <findRSDT(unsigned char*)>:
c000e8ec:	57                   	push   edi
c000e8ed:	56                   	push   esi
c000e8ee:	53                   	push   ebx
c000e8ef:	83 ec 50             	sub    esp,0x50
c000e8f2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8f7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8fd:	83 e0 04             	and    eax,0x4
c000e900:	0f b6 c0             	movzx  eax,al
c000e903:	85 c0                	test   eax,eax
c000e905:	75 0d                	jne    c000e914 <findRSDT(unsigned char*)+0x28>
c000e907:	b8 00 00 00 00       	mov    eax,0x0
c000e90c:	e9 2b 01 00 00       	jmp    c000ea3c <findRSDT(unsigned char*)+0x150>
c000e911:	8d 76 00             	lea    esi,[esi+0x0]
c000e914:	89 e0                	mov    eax,esp
c000e916:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e91a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e91e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e922:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e92a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e92e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e936:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e93a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e93e:	89 c6                	mov    esi,eax
c000e940:	89 d7                	mov    edi,edx
c000e942:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e944:	89 c8                	mov    eax,ecx
c000e946:	89 fa                	mov    edx,edi
c000e948:	89 f3                	mov    ebx,esi
c000e94a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e94e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e952:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e956:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e95a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e95e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e96a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e96e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e976:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e97a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e97e:	25 ff 0f 00 00       	and    eax,0xfff
c000e983:	89 c6                	mov    esi,eax
c000e985:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e98b:	83 ec 0c             	sub    esp,0xc
c000e98e:	6a 02                	push   0x2
c000e990:	e8 54 ac ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e995:	83 c4 10             	add    esp,0x10
c000e998:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e99c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9a2:	83 ec 0c             	sub    esp,0xc
c000e9a5:	6a 01                	push   0x1
c000e9a7:	6a 02                	push   0x2
c000e9a9:	50                   	push   eax
c000e9aa:	52                   	push   edx
c000e9ab:	53                   	push   ebx
c000e9ac:	e8 4b b5 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9b1:	83 c4 20             	add    esp,0x20
c000e9b4:	09 f0                	or     eax,esi
c000e9b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9be:	25 ff 0f 00 00       	and    eax,0xfff
c000e9c3:	89 c6                	mov    esi,eax
c000e9c5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e9cb:	83 ec 0c             	sub    esp,0xc
c000e9ce:	6a 02                	push   0x2
c000e9d0:	e8 14 ac ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e9dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9e2:	83 ec 0c             	sub    esp,0xc
c000e9e5:	6a 01                	push   0x1
c000e9e7:	6a 02                	push   0x2
c000e9e9:	50                   	push   eax
c000e9ea:	52                   	push   edx
c000e9eb:	53                   	push   ebx
c000e9ec:	e8 0b b5 ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9f1:	83 c4 20             	add    esp,0x20
c000e9f4:	09 f0                	or     eax,esi
c000e9f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9fa:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e9ff:	85 c0                	test   eax,eax
c000ea01:	75 11                	jne    c000ea14 <findRSDT(unsigned char*)+0x128>
c000ea03:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000ea0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea0e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea12:	eb 24                	jmp    c000ea38 <findRSDT(unsigned char*)+0x14c>
c000ea14:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea19:	83 f8 02             	cmp    eax,0x2
c000ea1c:	75 12                	jne    c000ea30 <findRSDT(unsigned char*)+0x144>
c000ea1e:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000ea25:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea2d:	eb 09                	jmp    c000ea38 <findRSDT(unsigned char*)+0x14c>
c000ea2f:	90                   	nop
c000ea30:	b8 00 00 00 00       	mov    eax,0x0
c000ea35:	eb 05                	jmp    c000ea3c <findRSDT(unsigned char*)+0x150>
c000ea37:	90                   	nop
c000ea38:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea3c:	83 c4 50             	add    esp,0x50
c000ea3f:	5b                   	pop    ebx
c000ea40:	5e                   	pop    esi
c000ea41:	5f                   	pop    edi
c000ea42:	c3                   	ret    
c000ea43:	90                   	nop

c000ea44 <findDataTable(unsigned char*, char*)>:
c000ea44:	83 ec 1c             	sub    esp,0x1c
c000ea47:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ea4c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea52:	83 e0 04             	and    eax,0x4
c000ea55:	0f b6 c0             	movzx  eax,al
c000ea58:	85 c0                	test   eax,eax
c000ea5a:	75 08                	jne    c000ea64 <findDataTable(unsigned char*, char*)+0x20>
c000ea5c:	b8 00 00 00 00       	mov    eax,0x0
c000ea61:	eb 5d                	jmp    c000eac0 <findDataTable(unsigned char*, char*)+0x7c>
c000ea63:	90                   	nop
c000ea64:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea6c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000ea71:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000ea75:	7d 41                	jge    c000eab8 <findDataTable(unsigned char*, char*)+0x74>
c000ea77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7b:	c1 e0 03             	shl    eax,0x3
c000ea7e:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000ea83:	83 ec 04             	sub    esp,0x4
c000ea86:	6a 04                	push   0x4
c000ea88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea8c:	50                   	push   eax
c000ea8d:	e8 ee 18 ff ff       	call   c0000380 <memcmp>
c000ea92:	83 c4 10             	add    esp,0x10
c000ea95:	85 c0                	test   eax,eax
c000ea97:	0f 94 c0             	sete   al
c000ea9a:	0f b6 c0             	movzx  eax,al
c000ea9d:	85 c0                	test   eax,eax
c000ea9f:	74 0f                	je     c000eab0 <findDataTable(unsigned char*, char*)+0x6c>
c000eaa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa5:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000eaac:	eb 12                	jmp    c000eac0 <findDataTable(unsigned char*, char*)+0x7c>
c000eaae:	66 90                	xchg   ax,ax
c000eab0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000eab5:	eb b5                	jmp    c000ea6c <findDataTable(unsigned char*, char*)+0x28>
c000eab7:	90                   	nop
c000eab8:	b8 00 00 00 00       	mov    eax,0x0
c000eabd:	8d 76 00             	lea    esi,[esi+0x0]
c000eac0:	83 c4 1c             	add    esp,0x1c
c000eac3:	c3                   	ret    

c000eac4 <scanMADT()>:
c000eac4:	53                   	push   ebx
c000eac5:	83 ec 38             	sub    esp,0x38
c000eac8:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000eacd:	25 00 04 00 00       	and    eax,0x400
c000ead2:	74 14                	je     c000eae8 <scanMADT()+0x24>
c000ead4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ead9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eadf:	83 e2 fb             	and    edx,0xfffffffb
c000eae2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eae8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eaed:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eaf3:	83 e0 04             	and    eax,0x4
c000eaf6:	0f b6 c0             	movzx  eax,al
c000eaf9:	85 c0                	test   eax,eax
c000eafb:	0f 84 6b 04 00 00    	je     c000ef6c <scanMADT()+0x4a8>
c000eb01:	e8 e2 fa ff ff       	call   c000e5e8 <findRSDP()>
c000eb06:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000eb0b:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eb10:	85 c0                	test   eax,eax
c000eb12:	75 1c                	jne    c000eb30 <scanMADT()+0x6c>
c000eb14:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb19:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb1f:	83 e2 fb             	and    edx,0xfffffffb
c000eb22:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb28:	e9 47 04 00 00       	jmp    c000ef74 <scanMADT()+0x4b0>
c000eb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb30:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000eb35:	83 ec 0c             	sub    esp,0xc
c000eb38:	50                   	push   eax
c000eb39:	e8 ae fd ff ff       	call   c000e8ec <findRSDT(unsigned char*)>
c000eb3e:	83 c4 10             	add    esp,0x10
c000eb41:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000eb46:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb4b:	85 c0                	test   eax,eax
c000eb4d:	75 19                	jne    c000eb68 <scanMADT()+0xa4>
c000eb4f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb54:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb5a:	83 e2 fb             	and    edx,0xfffffffb
c000eb5d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb63:	e9 0c 04 00 00       	jmp    c000ef74 <scanMADT()+0x4b0>
c000eb68:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb6d:	83 ec 0c             	sub    esp,0xc
c000eb70:	50                   	push   eax
c000eb71:	e8 0a fb ff ff       	call   c000e680 <loadACPITables(unsigned char*)>
c000eb76:	83 c4 10             	add    esp,0x10
c000eb79:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000eb7e:	83 ec 08             	sub    esp,0x8
c000eb81:	68 0c 10 02 c0       	push   0xc002100c
c000eb86:	50                   	push   eax
c000eb87:	e8 b8 fe ff ff       	call   c000ea44 <findDataTable(unsigned char*, char*)>
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eb93:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000eb98:	75 1a                	jne    c000ebb4 <scanMADT()+0xf0>
c000eb9a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eb9f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eba5:	83 e2 fe             	and    edx,0xfffffffe
c000eba8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebae:	e9 c1 03 00 00       	jmp    c000ef74 <scanMADT()+0x4b0>
c000ebb3:	90                   	nop
c000ebb4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ebbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebc3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ebc7:	0f 87 a7 03 00 00    	ja     c000ef74 <scanMADT()+0x4b0>
c000ebcd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ebd5:	0f 87 99 03 00 00    	ja     c000ef74 <scanMADT()+0x4b0>
c000ebdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ebe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe7:	8d 50 01             	lea    edx,[eax+0x1]
c000ebea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebf2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebf6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ebfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebfe:	8d 50 01             	lea    edx,[eax+0x1]
c000ec01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec09:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec0d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ec11:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ec16:	83 f8 02             	cmp    eax,0x2
c000ec19:	0f 86 51 03 00 00    	jbe    c000ef70 <scanMADT()+0x4ac>
c000ec1f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec24:	85 c0                	test   eax,eax
c000ec26:	75 58                	jne    c000ec80 <scanMADT()+0x1bc>
c000ec28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec2f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec33:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ec39:	0f b6 d2             	movzx  edx,dl
c000ec3c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec40:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec44:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ec4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec51:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec55:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ec5b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec5e:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ec64:	0f b6 d2             	movzx  edx,dl
c000ec67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec6b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec6f:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ec75:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec7a:	e9 d9 02 00 00       	jmp    c000ef58 <scanMADT()+0x494>
c000ec7f:	90                   	nop
c000ec80:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec85:	83 f8 01             	cmp    eax,0x1
c000ec88:	0f 85 1a 01 00 00    	jne    c000eda8 <scanMADT()+0x2e4>
c000ec8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec92:	8d 50 01             	lea    edx,[eax+0x1]
c000ec95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec99:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ec9f:	0f b6 d2             	movzx  edx,dl
c000eca2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eca6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecaa:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ecb0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ecb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecbd:	01 d0                	add    eax,edx
c000ecbf:	83 c0 2c             	add    eax,0x2c
c000ecc2:	8a 00                	mov    al,BYTE PTR [eax]
c000ecc4:	0f b6 d0             	movzx  edx,al
c000ecc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eccb:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecd2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecd6:	0f b6 c0             	movzx  eax,al
c000ecd9:	c1 e0 08             	shl    eax,0x8
c000ecdc:	89 d1                	mov    ecx,edx
c000ecde:	09 c1                	or     ecx,eax
c000ece0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ece4:	8d 50 02             	lea    edx,[eax+0x2]
c000ece7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eceb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ecef:	0f b6 c0             	movzx  eax,al
c000ecf2:	c1 e0 10             	shl    eax,0x10
c000ecf5:	09 c1                	or     ecx,eax
c000ecf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecfb:	8d 50 03             	lea    edx,[eax+0x3]
c000ecfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed02:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed06:	0f b6 c0             	movzx  eax,al
c000ed09:	c1 e0 18             	shl    eax,0x18
c000ed0c:	09 c1                	or     ecx,eax
c000ed0e:	89 ca                	mov    edx,ecx
c000ed10:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ed15:	0f b6 c0             	movzx  eax,al
c000ed18:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ed1f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed2c:	01 d0                	add    eax,edx
c000ed2e:	83 c0 2c             	add    eax,0x2c
c000ed31:	8a 00                	mov    al,BYTE PTR [eax]
c000ed33:	0f b6 d0             	movzx  edx,al
c000ed36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed3a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed45:	0f b6 c0             	movzx  eax,al
c000ed48:	c1 e0 08             	shl    eax,0x8
c000ed4b:	89 d1                	mov    ecx,edx
c000ed4d:	09 c1                	or     ecx,eax
c000ed4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed53:	8d 50 02             	lea    edx,[eax+0x2]
c000ed56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed5e:	0f b6 c0             	movzx  eax,al
c000ed61:	c1 e0 10             	shl    eax,0x10
c000ed64:	09 c1                	or     ecx,eax
c000ed66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed6a:	8d 50 03             	lea    edx,[eax+0x3]
c000ed6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed71:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed75:	0f b6 c0             	movzx  eax,al
c000ed78:	c1 e0 18             	shl    eax,0x18
c000ed7b:	09 c1                	or     ecx,eax
c000ed7d:	89 ca                	mov    edx,ecx
c000ed7f:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ed84:	0f b6 c0             	movzx  eax,al
c000ed87:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000ed8e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed93:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ed98:	83 c0 01             	add    eax,0x1
c000ed9b:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eda0:	e9 b3 01 00 00       	jmp    c000ef58 <scanMADT()+0x494>
c000eda5:	8d 76 00             	lea    esi,[esi+0x0]
c000eda8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000edad:	83 f8 02             	cmp    eax,0x2
c000edb0:	0f 85 ea 00 00 00    	jne    c000eea0 <scanMADT()+0x3dc>
c000edb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edba:	8d 50 01             	lea    edx,[eax+0x1]
c000edbd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000edc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edc5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000edc9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000edcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edd1:	8d 50 01             	lea    edx,[eax+0x1]
c000edd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000edd8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eddc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ede0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ede4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ede8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edec:	01 d0                	add    eax,edx
c000edee:	83 c0 2c             	add    eax,0x2c
c000edf1:	8a 00                	mov    al,BYTE PTR [eax]
c000edf3:	0f b6 d0             	movzx  edx,al
c000edf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edfa:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ee05:	0f b6 c0             	movzx  eax,al
c000ee08:	c1 e0 08             	shl    eax,0x8
c000ee0b:	89 d1                	mov    ecx,edx
c000ee0d:	09 c1                	or     ecx,eax
c000ee0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee13:	8d 50 02             	lea    edx,[eax+0x2]
c000ee16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee1a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee1e:	0f b6 c0             	movzx  eax,al
c000ee21:	c1 e0 10             	shl    eax,0x10
c000ee24:	09 c1                	or     ecx,eax
c000ee26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee2a:	8d 50 03             	lea    edx,[eax+0x3]
c000ee2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee35:	0f b6 c0             	movzx  eax,al
c000ee38:	c1 e0 18             	shl    eax,0x18
c000ee3b:	09 c8                	or     eax,ecx
c000ee3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee41:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee4e:	01 d0                	add    eax,edx
c000ee50:	83 c0 2c             	add    eax,0x2c
c000ee53:	8a 00                	mov    al,BYTE PTR [eax]
c000ee55:	0f b6 d0             	movzx  edx,al
c000ee58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee5c:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee63:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ee67:	0f b6 c0             	movzx  eax,al
c000ee6a:	c1 e0 08             	shl    eax,0x8
c000ee6d:	09 d0                	or     eax,edx
c000ee6f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ee74:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ee79:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ee7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee82:	88 90 e8 26 02 c0    	mov    BYTE PTR [eax-0x3ffdd918],dl
c000ee88:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ee8d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000ee92:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ee9a:	e9 b9 00 00 00       	jmp    c000ef58 <scanMADT()+0x494>
c000ee9f:	90                   	nop
c000eea0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eea5:	83 f8 04             	cmp    eax,0x4
c000eea8:	0f 85 9a 00 00 00    	jne    c000ef48 <scanMADT()+0x484>
c000eeae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eeb2:	8d 50 01             	lea    edx,[eax+0x1]
c000eeb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eeb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eebd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eec1:	0f b6 c0             	movzx  eax,al
c000eec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eec8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eecc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eed0:	01 d0                	add    eax,edx
c000eed2:	83 c0 2c             	add    eax,0x2c
c000eed5:	8a 00                	mov    al,BYTE PTR [eax]
c000eed7:	0f b6 d0             	movzx  edx,al
c000eeda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eede:	8d 48 01             	lea    ecx,[eax+0x1]
c000eee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eee5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eee9:	0f b6 c0             	movzx  eax,al
c000eeec:	c1 e0 08             	shl    eax,0x8
c000eeef:	09 d0                	or     eax,edx
c000eef1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eef5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eefa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eefe:	8d 50 01             	lea    edx,[eax+0x1]
c000ef01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ef05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef09:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef0d:	0f b6 c0             	movzx  eax,al
c000ef10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef18:	c1 e0 08             	shl    eax,0x8
c000ef1b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef1f:	89 c1                	mov    ecx,eax
c000ef21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef25:	c1 e0 18             	shl    eax,0x18
c000ef28:	89 c3                	mov    ebx,eax
c000ef2a:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ef2f:	8d 50 01             	lea    edx,[eax+0x1]
c000ef32:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ef38:	09 d9                	or     ecx,ebx
c000ef3a:	89 ca                	mov    edx,ecx
c000ef3c:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ef43:	eb 13                	jmp    c000ef58 <scanMADT()+0x494>
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ef4d:	83 f8 05             	cmp    eax,0x5
c000ef50:	75 06                	jne    c000ef58 <scanMADT()+0x494>
c000ef52:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ef57:	90                   	nop
c000ef58:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ef5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef61:	01 d0                	add    eax,edx
c000ef63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ef67:	e9 50 fc ff ff       	jmp    c000ebbc <scanMADT()+0xf8>
c000ef6c:	90                   	nop
c000ef6d:	eb 05                	jmp    c000ef74 <scanMADT()+0x4b0>
c000ef6f:	90                   	nop
c000ef70:	90                   	nop
c000ef71:	8d 76 00             	lea    esi,[esi+0x0]
c000ef74:	83 c4 38             	add    esp,0x38
c000ef77:	5b                   	pop    ebx
c000ef78:	c3                   	ret    
c000ef79:	90                   	nop
c000ef7a:	66 90                	xchg   ax,ax

c000ef7c <ACPI::ACPI()>:
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef83:	83 ec 08             	sub    esp,0x8
c000ef86:	68 11 10 02 c0       	push   0xc0021011
c000ef8b:	50                   	push   eax
c000ef8c:	e8 3b d2 ff ff       	call   c000c1cc <Device::Device(char const*)>
c000ef91:	83 c4 10             	add    esp,0x10
c000ef94:	ba 80 11 02 c0       	mov    edx,0xc0021180
c000ef99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef9d:	89 10                	mov    DWORD PTR [eax],edx
c000ef9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000efaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efae:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000efb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efbc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000efc6:	e8 f9 fa ff ff       	call   c000eac4 <scanMADT()>
c000efcb:	90                   	nop
c000efcc:	83 c4 0c             	add    esp,0xc
c000efcf:	c3                   	ret    

c000efd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000efd0:	83 ec 2c             	sub    esp,0x2c
c000efd3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000efd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efdb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000efdf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000efe3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000efe8:	88 c8                	mov    al,cl
c000efea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000efee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eff3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000effb:	90                   	nop
c000effc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f000:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f006:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f00a:	0f 8d b0 00 00 00    	jge    c000f0c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f010:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f014:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f018:	83 c2 2a             	add    edx,0x2a
c000f01b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f01f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f024:	0f b7 c0             	movzx  eax,ax
c000f027:	39 c2                	cmp    edx,eax
c000f029:	0f 85 85 00 00 00    	jne    c000f0b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f02f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f033:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f037:	83 c2 2a             	add    edx,0x2a
c000f03a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f03e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f043:	0f b6 c0             	movzx  eax,al
c000f046:	39 c2                	cmp    edx,eax
c000f048:	75 6a                	jne    c000f0b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f04a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f04f:	85 c0                	test   eax,eax
c000f051:	74 3d                	je     c000f090 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f053:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f057:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f05b:	83 c2 2a             	add    edx,0x2a
c000f05e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f062:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f066:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f069:	39 c2                	cmp    edx,eax
c000f06b:	74 13                	je     c000f080 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f06d:	83 ec 0c             	sub    esp,0xc
c000f070:	68 8c 0f 02 c0       	push   0xc0020f8c
c000f075:	e8 a3 1a 00 00       	call   c0010b1d <KePanic(char const*)>
c000f07a:	83 c4 10             	add    esp,0x10
c000f07d:	8d 76 00             	lea    esi,[esi+0x0]
c000f080:	83 ec 0c             	sub    esp,0xc
c000f083:	68 16 10 02 c0       	push   0xc0021016
c000f088:	e8 90 1a 00 00       	call   c0010b1d <KePanic(char const*)>
c000f08d:	83 c4 10             	add    esp,0x10
c000f090:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f094:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f098:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f09c:	83 c2 2a             	add    edx,0x2a
c000f09f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f0a3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0a5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f0a8:	89 01                	mov    DWORD PTR [ecx],eax
c000f0aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0ad:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f0b2:	66 90                	xchg   ax,ax
c000f0b4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f0b9:	e9 3e ff ff ff       	jmp    c000effc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f0be:	66 90                	xchg   ax,ax
c000f0c0:	90                   	nop
c000f0c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0c5:	83 c4 2c             	add    esp,0x2c
c000f0c8:	c2 04 00             	ret    0x4
c000f0cb:	90                   	nop

c000f0cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f0cc:	83 ec 1c             	sub    esp,0x1c
c000f0cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0d3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f0db:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0e0:	88 c8                	mov    al,cl
c000f0e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f0e6:	88 d0                	mov    al,dl
c000f0e8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f0ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0f0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0fa:	83 c2 2a             	add    edx,0x2a
c000f0fd:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f101:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f105:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f109:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f10f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f113:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f116:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f11a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f11f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f123:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f129:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f12d:	83 c0 01             	add    eax,0x1
c000f130:	88 c1                	mov    cl,al
c000f132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f136:	83 c2 2a             	add    edx,0x2a
c000f139:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f13d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f141:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f14b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f14e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f152:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f15a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f160:	8d 50 01             	lea    edx,[eax+0x1]
c000f163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f167:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f16d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f171:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f177:	3d 00 02 00 00       	cmp    eax,0x200
c000f17c:	75 12                	jne    c000f190 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f17e:	83 ec 0c             	sub    esp,0xc
c000f181:	68 25 10 02 c0       	push   0xc0021025
c000f186:	e8 92 19 00 00       	call   c0010b1d <KePanic(char const*)>
c000f18b:	83 c4 10             	add    esp,0x10
c000f18e:	66 90                	xchg   ax,ax
c000f190:	90                   	nop
c000f191:	83 c4 1c             	add    esp,0x1c
c000f194:	c3                   	ret    
c000f195:	90                   	nop
c000f196:	66 90                	xchg   ax,ax

c000f198 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f198:	b8 00 00 00 00       	mov    eax,0x0
c000f19d:	c3                   	ret    
c000f19e:	66 90                	xchg   ax,ax

c000f1a0 <ACPI::detectPCI()>:
c000f1a0:	53                   	push   ebx
c000f1a1:	83 ec 28             	sub    esp,0x28
c000f1a4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f1a9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f1ae:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1b3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1b9:	83 e0 04             	and    eax,0x4
c000f1bc:	0f b6 c0             	movzx  eax,al
c000f1bf:	85 c0                	test   eax,eax
c000f1c1:	74 2d                	je     c000f1f0 <ACPI::detectPCI()+0x50>
c000f1c3:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f1c8:	83 ec 08             	sub    esp,0x8
c000f1cb:	68 42 10 02 c0       	push   0xc0021042
c000f1d0:	50                   	push   eax
c000f1d1:	e8 6e f8 ff ff       	call   c000ea44 <findDataTable(unsigned char*, char*)>
c000f1d6:	83 c4 10             	add    esp,0x10
c000f1d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1dd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f1e2:	74 0c                	je     c000f1f0 <ACPI::detectPCI()+0x50>
c000f1e4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f1e9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f1ee:	66 90                	xchg   ax,ax
c000f1f0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f1f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1fc:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fe:	0f b6 c0             	movzx  eax,al
c000f201:	83 f8 01             	cmp    eax,0x1
c000f204:	75 0e                	jne    c000f214 <ACPI::detectPCI()+0x74>
c000f206:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f20b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f210:	eb 2e                	jmp    c000f240 <ACPI::detectPCI()+0xa0>
c000f212:	66 90                	xchg   ax,ax
c000f214:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f218:	8a 00                	mov    al,BYTE PTR [eax]
c000f21a:	0f b6 c0             	movzx  eax,al
c000f21d:	83 f8 02             	cmp    eax,0x2
c000f220:	75 1e                	jne    c000f240 <ACPI::detectPCI()+0xa0>
c000f222:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f227:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f22c:	85 c0                	test   eax,eax
c000f22e:	74 10                	je     c000f240 <ACPI::detectPCI()+0xa0>
c000f230:	83 ec 0c             	sub    esp,0xc
c000f233:	68 bc 0f 02 c0       	push   0xc0020fbc
c000f238:	e8 e0 18 00 00       	call   c0010b1d <KePanic(char const*)>
c000f23d:	83 c4 10             	add    esp,0x10
c000f240:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f244:	83 f0 01             	xor    eax,0x1
c000f247:	0f b6 c0             	movzx  eax,al
c000f24a:	85 c0                	test   eax,eax
c000f24c:	74 46                	je     c000f294 <ACPI::detectPCI()+0xf4>
c000f24e:	e8 dd 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f253:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f257:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f25c:	75 0e                	jne    c000f26c <ACPI::detectPCI()+0xcc>
c000f25e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f263:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f268:	eb 2a                	jmp    c000f294 <ACPI::detectPCI()+0xf4>
c000f26a:	66 90                	xchg   ax,ax
c000f26c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f271:	75 21                	jne    c000f294 <ACPI::detectPCI()+0xf4>
c000f273:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f278:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f27d:	85 c0                	test   eax,eax
c000f27f:	74 13                	je     c000f294 <ACPI::detectPCI()+0xf4>
c000f281:	83 ec 0c             	sub    esp,0xc
c000f284:	68 bc 0f 02 c0       	push   0xc0020fbc
c000f289:	e8 8f 18 00 00       	call   c0010b1d <KePanic(char const*)>
c000f28e:	83 c4 10             	add    esp,0x10
c000f291:	8d 76 00             	lea    esi,[esi+0x0]
c000f294:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f299:	85 c0                	test   eax,eax
c000f29b:	0f 84 87 00 00 00    	je     c000f328 <ACPI::detectPCI()+0x188>
c000f2a1:	83 ec 0c             	sub    esp,0xc
c000f2a4:	68 47 10 02 c0       	push   0xc0021047
c000f2a9:	e8 99 11 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000f2ae:	83 c4 10             	add    esp,0x10
c000f2b1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f2b9:	83 ec 0c             	sub    esp,0xc
c000f2bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2c0:	e8 06 88 ff ff       	call   c0007acb <malloc>
c000f2c5:	83 c4 10             	add    esp,0x10
c000f2c8:	89 c3                	mov    ebx,eax
c000f2ca:	83 ec 0c             	sub    esp,0xc
c000f2cd:	53                   	push   ebx
c000f2ce:	e8 cb b0 00 00       	call   c001a39e <PCI::PCI()>
c000f2d3:	83 c4 10             	add    esp,0x10
c000f2d6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f2da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2de:	83 ec 08             	sub    esp,0x8
c000f2e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f2e5:	50                   	push   eax
c000f2e6:	e8 49 cd ff ff       	call   c000c034 <Device::addChild(Device*)>
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f4:	83 c0 08             	add    eax,0x8
c000f2f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f2fe:	85 d2                	test   edx,edx
c000f300:	74 0a                	je     c000f30c <ACPI::detectPCI()+0x16c>
c000f302:	ba 01 00 00 00       	mov    edx,0x1
c000f307:	eb 0b                	jmp    c000f314 <ACPI::detectPCI()+0x174>
c000f309:	8d 76 00             	lea    esi,[esi+0x0]
c000f30c:	ba 02 00 00 00       	mov    edx,0x2
c000f311:	8d 76 00             	lea    esi,[esi+0x0]
c000f314:	6a 00                	push   0x0
c000f316:	6a 00                	push   0x0
c000f318:	52                   	push   edx
c000f319:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f31d:	ff d0                	call   eax
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	e9 91 00 00 00       	jmp    c000f3b8 <ACPI::detectPCI()+0x218>
c000f327:	90                   	nop
c000f328:	83 ec 0c             	sub    esp,0xc
c000f32b:	68 5f 10 02 c0       	push   0xc002105f
c000f330:	e8 12 11 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000f335:	83 c4 10             	add    esp,0x10
c000f338:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f33f:	83 ec 0c             	sub    esp,0xc
c000f342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f346:	e8 80 87 ff ff       	call   c0007acb <malloc>
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	89 c3                	mov    ebx,eax
c000f350:	83 ec 0c             	sub    esp,0xc
c000f353:	53                   	push   ebx
c000f354:	e8 ed bb 00 00       	call   c001af46 <IDE::IDE()>
c000f359:	83 c4 10             	add    esp,0x10
c000f35c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f364:	83 ec 08             	sub    esp,0x8
c000f367:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f36b:	50                   	push   eax
c000f36c:	e8 c3 cc ff ff       	call   c000c034 <Device::addChild(Device*)>
c000f371:	83 c4 10             	add    esp,0x10
c000f374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f378:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f386:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f38f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f393:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f39c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a2:	83 c0 08             	add    eax,0x8
c000f3a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a7:	6a 00                	push   0x0
c000f3a9:	6a 00                	push   0x0
c000f3ab:	6a 00                	push   0x0
c000f3ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3b1:	ff d0                	call   eax
c000f3b3:	83 c4 10             	add    esp,0x10
c000f3b6:	66 90                	xchg   ax,ax
c000f3b8:	90                   	nop
c000f3b9:	83 c4 28             	add    esp,0x28
c000f3bc:	5b                   	pop    ebx
c000f3bd:	c3                   	ret    
c000f3be:	66 90                	xchg   ax,ax

c000f3c0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f3c0:	83 ec 1c             	sub    esp,0x1c
c000f3c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3c7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f3ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f3ce:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f3d3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3d8:	83 ec 08             	sub    esp,0x8
c000f3db:	52                   	push   edx
c000f3dc:	50                   	push   eax
c000f3dd:	e8 b0 7d ff ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c000f3e2:	83 c4 10             	add    esp,0x10
c000f3e5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f3e9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f3ee:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3f3:	83 ec 04             	sub    esp,0x4
c000f3f6:	6a 01                	push   0x1
c000f3f8:	52                   	push   edx
c000f3f9:	50                   	push   eax
c000f3fa:	e8 ab 7e ff ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c000f3ff:	83 c4 10             	add    esp,0x10
c000f402:	90                   	nop
c000f403:	83 c4 1c             	add    esp,0x1c
c000f406:	c3                   	ret    
c000f407:	90                   	nop

c000f408 <ACPI::sleep()>:
c000f408:	83 ec 0c             	sub    esp,0xc
c000f40b:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f410:	85 c0                	test   eax,eax
c000f412:	74 08                	je     c000f41c <ACPI::sleep()+0x14>
c000f414:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f419:	ff d0                	call   eax
c000f41b:	90                   	nop
c000f41c:	90                   	nop
c000f41d:	83 c4 0c             	add    esp,0xc
c000f420:	c3                   	ret    
c000f421:	90                   	nop
c000f422:	66 90                	xchg   ax,ax

c000f424 <ACPI::open(int, int, void*)>:
c000f424:	55                   	push   ebp
c000f425:	89 e5                	mov    ebp,esp
c000f427:	53                   	push   ebx
c000f428:	81 ec 74 01 00 00    	sub    esp,0x174
c000f42e:	83 ec 0c             	sub    esp,0xc
c000f431:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f434:	e8 67 fd ff ff       	call   c000f1a0 <ACPI::detectPCI()>
c000f439:	83 c4 10             	add    esp,0x10
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	68 e4 0f 02 c0       	push   0xc0020fe4
c000f444:	e8 fe 0f 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000f449:	83 c4 10             	add    esp,0x10
c000f44c:	b8 4c 05 00 00       	mov    eax,0x54c
c000f451:	8a 00                	mov    al,BYTE PTR [eax]
c000f453:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000f456:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f45a:	83 f8 01             	cmp    eax,0x1
c000f45d:	75 15                	jne    c000f474 <ACPI::open(int, int, void*)+0x50>
c000f45f:	83 ec 0c             	sub    esp,0xc
c000f462:	68 74 10 02 c0       	push   0xc0021074
c000f467:	e8 ca 49 00 00       	call   c0013e36 <Thr::loadKernelSymbolTable(char const*)>
c000f46c:	83 c4 10             	add    esp,0x10
c000f46f:	eb 33                	jmp    c000f4a4 <ACPI::open(int, int, void*)+0x80>
c000f471:	8d 76 00             	lea    esi,[esi+0x0]
c000f474:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000f478:	3d bb 00 00 00       	cmp    eax,0xbb
c000f47d:	75 15                	jne    c000f494 <ACPI::open(int, int, void*)+0x70>
c000f47f:	83 ec 0c             	sub    esp,0xc
c000f482:	68 92 10 02 c0       	push   0xc0021092
c000f487:	e8 aa 49 00 00       	call   c0013e36 <Thr::loadKernelSymbolTable(char const*)>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	eb 13                	jmp    c000f4a4 <ACPI::open(int, int, void*)+0x80>
c000f491:	8d 76 00             	lea    esi,[esi+0x0]
c000f494:	83 ec 0c             	sub    esp,0xc
c000f497:	68 b0 10 02 c0       	push   0xc00210b0
c000f49c:	e8 7c 16 00 00       	call   c0010b1d <KePanic(char const*)>
c000f4a1:	83 c4 10             	add    esp,0x10
c000f4a4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f4a8:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000f4af:	83 ec 0c             	sub    esp,0xc
c000f4b2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000f4b5:	e8 11 86 ff ff       	call   c0007acb <malloc>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	89 c3                	mov    ebx,eax
c000f4bf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4c4:	83 ec 04             	sub    esp,0x4
c000f4c7:	50                   	push   eax
c000f4c8:	68 ca 10 02 c0       	push   0xc00210ca
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 a7 bc ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000f4d3:	83 c4 10             	add    esp,0x10
c000f4d6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f4d9:	83 ec 08             	sub    esp,0x8
c000f4dc:	6a 01                	push   0x1
c000f4de:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f4e1:	e8 50 bd ff ff       	call   c000b236 <File::open(FileOpenMode)>
c000f4e6:	83 c4 10             	add    esp,0x10
c000f4e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f4ec:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000f4f0:	75 12                	jne    c000f504 <ACPI::open(int, int, void*)+0xe0>
c000f4f2:	83 ec 0c             	sub    esp,0xc
c000f4f5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f4f8:	e8 97 bd ff ff       	call   c000b294 <File::close()>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	eb 06                	jmp    c000f508 <ACPI::open(int, int, void*)+0xe4>
c000f502:	66 90                	xchg   ax,ax
c000f504:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f508:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000f50c:	74 16                	je     c000f524 <ACPI::open(int, int, void*)+0x100>
c000f50e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f511:	8b 00                	mov    eax,DWORD PTR [eax]
c000f513:	83 c0 08             	add    eax,0x8
c000f516:	8b 00                	mov    eax,DWORD PTR [eax]
c000f518:	83 ec 0c             	sub    esp,0xc
c000f51b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f51e:	ff d0                	call   eax
c000f520:	83 c4 10             	add    esp,0x10
c000f523:	90                   	nop
c000f524:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000f527:	83 f0 01             	xor    eax,0x1
c000f52a:	0f b6 c0             	movzx  eax,al
c000f52d:	85 c0                	test   eax,eax
c000f52f:	74 3b                	je     c000f56c <ACPI::open(int, int, void*)+0x148>
c000f531:	83 ec 0c             	sub    esp,0xc
c000f534:	68 e8 10 02 c0       	push   0xc00210e8
c000f539:	e8 09 0f 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000f53e:	83 c4 10             	add    esp,0x10
c000f541:	83 ec 04             	sub    esp,0x4
c000f544:	6a 0c                	push   0xc
c000f546:	68 03 11 02 c0       	push   0xc0021103
c000f54b:	68 14 11 02 c0       	push   0xc0021114
c000f550:	e8 89 3c 00 00       	call   c00131de <Reg::readIntWithDefault(char*, char*, int)>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f55b:	83 ec 0c             	sub    esp,0xc
c000f55e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f561:	e8 a8 a2 ff ff       	call   c000980e <Virt::setupPageSwapping(int)>
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	8d 76 00             	lea    esi,[esi+0x0]
c000f56c:	83 ec 0c             	sub    esp,0xc
c000f56f:	68 55 fd 01 c0       	push   0xc001fd55
c000f574:	e8 ce 0e 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f57f:	83 ec 08             	sub    esp,0x8
c000f582:	6a 13                	push   0x13
c000f584:	50                   	push   eax
c000f585:	e8 c2 cd ff ff       	call   c000c34c <getDevicesOfType(DeviceType)>
c000f58a:	83 c4 0c             	add    esp,0xc
c000f58d:	8d 76 00             	lea    esi,[esi+0x0]
c000f590:	83 ec 0c             	sub    esp,0xc
c000f593:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f596:	50                   	push   eax
c000f597:	e8 b4 fb 00 00       	call   c001f150 <LinkedList<Device>::isEmpty()>
c000f59c:	83 c4 10             	add    esp,0x10
c000f59f:	83 f0 01             	xor    eax,0x1
c000f5a2:	0f b6 c0             	movzx  eax,al
c000f5a5:	85 c0                	test   eax,eax
c000f5a7:	0f 84 1f 01 00 00    	je     c000f6cc <ACPI::open(int, int, void*)+0x2a8>
c000f5ad:	83 ec 0c             	sub    esp,0xc
c000f5b0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5b3:	50                   	push   eax
c000f5b4:	e8 b3 fb 00 00       	call   c001f16c <LinkedList<Device>::getFirstElement()>
c000f5b9:	83 c4 10             	add    esp,0x10
c000f5bc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000f5bf:	83 ec 0c             	sub    esp,0xc
c000f5c2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f5c5:	50                   	push   eax
c000f5c6:	e8 a9 fb 00 00       	call   c001f174 <LinkedList<Device>::removeFirst()>
c000f5cb:	83 c4 10             	add    esp,0x10
c000f5ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000f5d1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f5d4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000f5d7:	b8 24 00 00 00       	mov    eax,0x24
c000f5dc:	83 e0 fc             	and    eax,0xfffffffc
c000f5df:	89 c3                	mov    ebx,eax
c000f5e1:	b8 00 00 00 00       	mov    eax,0x0
c000f5e6:	66 90                	xchg   ax,ax
c000f5e8:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f5ef:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000f5f6:	83 c0 04             	add    eax,0x4
c000f5f9:	39 d8                	cmp    eax,ebx
c000f5fb:	72 eb                	jb     c000f5e8 <ACPI::open(int, int, void*)+0x1c4>
c000f5fd:	83 ec 08             	sub    esp,0x8
c000f600:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000f606:	50                   	push   eax
c000f607:	83 ec 24             	sub    esp,0x24
c000f60a:	89 e1                	mov    ecx,esp
c000f60c:	b8 24 00 00 00       	mov    eax,0x24
c000f611:	83 e0 fc             	and    eax,0xfffffffc
c000f614:	89 c3                	mov    ebx,eax
c000f616:	b8 00 00 00 00       	mov    eax,0x0
c000f61b:	90                   	nop
c000f61c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000f623:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000f626:	83 c0 04             	add    eax,0x4
c000f629:	39 d8                	cmp    eax,ebx
c000f62b:	72 ef                	jb     c000f61c <ACPI::open(int, int, void*)+0x1f8>
c000f62d:	e8 54 b2 00 00       	call   c001a886 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f632:	83 c4 30             	add    esp,0x30
c000f635:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000f638:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000f63c:	0f 84 4e ff ff ff    	je     c000f590 <ACPI::open(int, int, void*)+0x16c>
c000f642:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000f649:	83 ec 0c             	sub    esp,0xc
c000f64c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000f64f:	e8 77 84 ff ff       	call   c0007acb <malloc>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	89 c3                	mov    ebx,eax
c000f659:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f65e:	83 ec 04             	sub    esp,0x4
c000f661:	50                   	push   eax
c000f662:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f665:	53                   	push   ebx
c000f666:	e8 0f bb ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000f66b:	83 c4 10             	add    esp,0x10
c000f66e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f677:	e8 28 be ff ff       	call   c000b4a4 <File::exists()>
c000f67c:	83 c4 10             	add    esp,0x10
c000f67f:	0f b6 c0             	movzx  eax,al
c000f682:	85 c0                	test   eax,eax
c000f684:	74 22                	je     c000f6a8 <ACPI::open(int, int, void*)+0x284>
c000f686:	83 ec 08             	sub    esp,0x8
c000f689:	6a 01                	push   0x1
c000f68b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000f68e:	e8 25 52 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000f693:	83 c4 10             	add    esp,0x10
c000f696:	83 ec 08             	sub    esp,0x8
c000f699:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f69c:	50                   	push   eax
c000f69d:	e8 56 54 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000f6a2:	83 c4 10             	add    esp,0x10
c000f6a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6a8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000f6ac:	0f 84 de fe ff ff    	je     c000f590 <ACPI::open(int, int, void*)+0x16c>
c000f6b2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f6b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6b7:	83 c0 08             	add    eax,0x8
c000f6ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6bc:	83 ec 0c             	sub    esp,0xc
c000f6bf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000f6c2:	ff d0                	call   eax
c000f6c4:	83 c4 10             	add    esp,0x10
c000f6c7:	e9 c4 fe ff ff       	jmp    c000f590 <ACPI::open(int, int, void*)+0x16c>
c000f6cc:	83 ec 0c             	sub    esp,0xc
c000f6cf:	8d 45 b8             	lea    eax,[ebp-0x48]
c000f6d2:	50                   	push   eax
c000f6d3:	e8 74 fa 00 00       	call   c001f14c <LinkedList<Device>::~LinkedList()>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f6e1:	83 ec 08             	sub    esp,0x8
c000f6e4:	6a 01                	push   0x1
c000f6e6:	68 1b 11 02 c0       	push   0xc002111b
c000f6eb:	e8 c8 51 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000f6f0:	83 c4 10             	add    esp,0x10
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	53                   	push   ebx
c000f6f7:	50                   	push   eax
c000f6f8:	e8 fb 53 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000f6fd:	83 c4 10             	add    esp,0x10
c000f700:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f705:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f70b:	83 e0 04             	and    eax,0x4
c000f70e:	0f b6 c0             	movzx  eax,al
c000f711:	85 c0                	test   eax,eax
c000f713:	0f 84 e3 00 00 00    	je     c000f7fc <ACPI::open(int, int, void*)+0x3d8>
c000f719:	83 ec 0c             	sub    esp,0xc
c000f71c:	68 38 11 02 c0       	push   0xc0021138
c000f721:	e8 21 0d 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c000f726:	83 c4 10             	add    esp,0x10
c000f729:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000f730:	83 ec 0c             	sub    esp,0xc
c000f733:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000f736:	e8 90 83 ff ff       	call   c0007acb <malloc>
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	89 c3                	mov    ebx,eax
c000f740:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f745:	83 ec 04             	sub    esp,0x4
c000f748:	50                   	push   eax
c000f749:	68 55 11 02 c0       	push   0xc0021155
c000f74e:	53                   	push   ebx
c000f74f:	e8 26 ba ff ff       	call   c000b17a <File::File(char const*, Process*)>
c000f754:	83 c4 10             	add    esp,0x10
c000f757:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000f75a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f75e:	74 1c                	je     c000f77c <ACPI::open(int, int, void*)+0x358>
c000f760:	83 ec 0c             	sub    esp,0xc
c000f763:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f766:	e8 39 bd ff ff       	call   c000b4a4 <File::exists()>
c000f76b:	83 c4 10             	add    esp,0x10
c000f76e:	0f b6 c0             	movzx  eax,al
c000f771:	85 c0                	test   eax,eax
c000f773:	74 07                	je     c000f77c <ACPI::open(int, int, void*)+0x358>
c000f775:	b0 01                	mov    al,0x1
c000f777:	eb 07                	jmp    c000f780 <ACPI::open(int, int, void*)+0x35c>
c000f779:	8d 76 00             	lea    esi,[esi+0x0]
c000f77c:	b0 00                	mov    al,0x0
c000f77e:	66 90                	xchg   ax,ax
c000f780:	0f b6 c0             	movzx  eax,al
c000f783:	85 c0                	test   eax,eax
c000f785:	74 21                	je     c000f7a8 <ACPI::open(int, int, void*)+0x384>
c000f787:	83 ec 08             	sub    esp,0x8
c000f78a:	6a 01                	push   0x1
c000f78c:	68 55 11 02 c0       	push   0xc0021155
c000f791:	e8 22 51 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c000f796:	83 c4 10             	add    esp,0x10
c000f799:	83 ec 08             	sub    esp,0x8
c000f79c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f79f:	50                   	push   eax
c000f7a0:	e8 53 53 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f7ac:	74 1e                	je     c000f7cc <ACPI::open(int, int, void*)+0x3a8>
c000f7ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000f7b2:	74 18                	je     c000f7cc <ACPI::open(int, int, void*)+0x3a8>
c000f7b4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000f7b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7b9:	83 c0 08             	add    eax,0x8
c000f7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7be:	83 ec 0c             	sub    esp,0xc
c000f7c1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000f7c4:	ff d0                	call   eax
c000f7c6:	83 c4 10             	add    esp,0x10
c000f7c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7cc:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f7d1:	83 ec 08             	sub    esp,0x8
c000f7d4:	68 72 11 02 c0       	push   0xc0021172
c000f7d9:	50                   	push   eax
c000f7da:	e8 65 f2 ff ff       	call   c000ea44 <findDataTable(unsigned char*, char*)>
c000f7df:	83 c4 10             	add    esp,0x10
c000f7e2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000f7e5:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000f7e9:	74 11                	je     c000f7fc <ACPI::open(int, int, void*)+0x3d8>
c000f7eb:	83 ec 08             	sub    esp,0x8
c000f7ee:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000f7f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f7f4:	e8 c7 fb ff ff       	call   c000f3c0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f7f9:	83 c4 10             	add    esp,0x10
c000f7fc:	b8 00 00 00 00       	mov    eax,0x0
c000f801:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f804:	c9                   	leave  
c000f805:	c3                   	ret    

c000f806 <CPU::close(int, int, void*)>:
c000f806:	31 c0                	xor    eax,eax
c000f808:	c3                   	ret    
c000f809:	90                   	nop

c000f80a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f80a:	60                   	pusha  
c000f80b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f80f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f817:	9c                   	pushf  
c000f818:	fa                   	cli    
c000f819:	0f 09                	wbinvd 
c000f81b:	0f 30                	wrmsr  
c000f81d:	9d                   	popf   
c000f81e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f822:	89 02                	mov    DWORD PTR [edx],eax
c000f824:	61                   	popa   
c000f825:	c3                   	ret    

c000f826 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f826:	60                   	pusha  
c000f827:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f82b:	9c                   	pushf  
c000f82c:	fa                   	cli    
c000f82d:	0f 09                	wbinvd 
c000f82f:	31 c0                	xor    eax,eax
c000f831:	31 d2                	xor    edx,edx
c000f833:	0f 32                	rdmsr  
c000f835:	9d                   	popf   
c000f836:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f83a:	89 02                	mov    DWORD PTR [edx],eax
c000f83c:	61                   	popa   
c000f83d:	c3                   	ret    

c000f83e <CPU::AMD_K6_writeback(int, int, int)>:
c000f83e:	56                   	push   esi
c000f83f:	53                   	push   ebx
c000f840:	83 ec 10             	sub    esp,0x10
c000f843:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84c:	75 5d                	jne    c000f8ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f84e:	83 f8 08             	cmp    eax,0x8
c000f851:	75 09                	jne    c000f85c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f853:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f858:	7e 13                	jle    c000f86d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f85a:	eb 30                	jmp    c000f88c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f85c:	83 f8 06             	cmp    eax,0x6
c000f85f:	7c 4a                	jl     c000f8ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f861:	83 f8 07             	cmp    eax,0x7
c000f864:	7e 07                	jle    c000f86d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f866:	83 f8 09             	cmp    eax,0x9
c000f869:	74 21                	je     c000f88c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f86b:	eb 3e                	jmp    c000f8ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f86d:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f873:	89 e6                	mov    esi,esp
c000f875:	56                   	push   esi
c000f876:	68 82 00 00 c0       	push   0xc0000082
c000f87b:	e8 a6 ff ff ff       	call   c000f826 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f880:	c1 eb 15             	shr    ebx,0x15
c000f883:	56                   	push   esi
c000f884:	83 e3 7e             	and    ebx,0x7e
c000f887:	6a 00                	push   0x0
c000f889:	53                   	push   ebx
c000f88a:	eb 12                	jmp    c000f89e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f88c:	89 e3                	mov    ebx,esp
c000f88e:	53                   	push   ebx
c000f88f:	68 82 00 00 c0       	push   0xc0000082
c000f894:	e8 8d ff ff ff       	call   c000f826 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f899:	53                   	push   ebx
c000f89a:	6a 00                	push   0x0
c000f89c:	6a 00                	push   0x0
c000f89e:	68 82 00 00 c0       	push   0xc0000082
c000f8a3:	e8 62 ff ff ff       	call   c000f80a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f8a8:	83 c4 18             	add    esp,0x18
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	5b                   	pop    ebx
c000f8af:	5e                   	pop    esi
c000f8b0:	c3                   	ret    
c000f8b1:	90                   	nop

c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f8b2:	55                   	push   ebp
c000f8b3:	57                   	push   edi
c000f8b4:	56                   	push   esi
c000f8b5:	53                   	push   ebx
c000f8b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8ba:	39 05 f8 26 02 c0    	cmp    DWORD PTR ds:0xc00226f8,eax
c000f8c0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8c4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f8c8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f8cc:	75 23                	jne    c000f8f1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f8ce:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f8d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f8d7:	89 06                	mov    DWORD PTR [esi],eax
c000f8d9:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f8de:	89 07                	mov    DWORD PTR [edi],eax
c000f8e0:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f8e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f8e8:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f8ed:	89 02                	mov    DWORD PTR [edx],eax
c000f8ef:	eb 3f                	jmp    c000f930 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f8f1:	31 c9                	xor    ecx,ecx
c000f8f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8f7:	0f a2                	cpuid  
c000f8f9:	89 06                	mov    DWORD PTR [esi],eax
c000f8fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8ff:	89 1f                	mov    DWORD PTR [edi],ebx
c000f901:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f904:	89 10                	mov    DWORD PTR [eax],edx
c000f906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f90a:	a3 f8 26 02 c0       	mov    ds:0xc00226f8,eax
c000f90f:	8b 06                	mov    eax,DWORD PTR [esi]
c000f911:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f916:	8b 07                	mov    eax,DWORD PTR [edi]
c000f918:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f91d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f920:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f925:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f929:	8b 00                	mov    eax,DWORD PTR [eax]
c000f92b:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f930:	5b                   	pop    ebx
c000f931:	5e                   	pop    esi
c000f932:	5f                   	pop    edi
c000f933:	5d                   	pop    ebp
c000f934:	c3                   	ret    
c000f935:	90                   	nop

c000f936 <CPU::cpuidCheckEDX(unsigned int)>:
c000f936:	83 ec 10             	sub    esp,0x10
c000f939:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f93d:	50                   	push   eax
c000f93e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f942:	50                   	push   eax
c000f943:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f947:	50                   	push   eax
c000f948:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f94c:	50                   	push   eax
c000f94d:	6a 01                	push   0x1
c000f94f:	e8 5e ff ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f954:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f958:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f95c:	0f 95 c0             	setne  al
c000f95f:	83 c4 24             	add    esp,0x24
c000f962:	c3                   	ret    
c000f963:	90                   	nop

c000f964 <CPU::cpuidCheckECX(unsigned int)>:
c000f964:	83 ec 10             	sub    esp,0x10
c000f967:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f96b:	50                   	push   eax
c000f96c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f970:	50                   	push   eax
c000f971:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f975:	50                   	push   eax
c000f976:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f97a:	50                   	push   eax
c000f97b:	6a 01                	push   0x1
c000f97d:	e8 30 ff ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f982:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f986:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f98a:	0f 95 c0             	setne  al
c000f98d:	83 c4 24             	add    esp,0x24
c000f990:	c3                   	ret    
c000f991:	90                   	nop

c000f992 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f992:	83 ec 10             	sub    esp,0x10
c000f995:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f999:	50                   	push   eax
c000f99a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f99e:	50                   	push   eax
c000f99f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9a3:	50                   	push   eax
c000f9a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9a8:	50                   	push   eax
c000f9a9:	6a 07                	push   0x7
c000f9ab:	e8 02 ff ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9b4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f9b8:	0f 95 c0             	setne  al
c000f9bb:	83 c4 24             	add    esp,0x24
c000f9be:	c3                   	ret    
c000f9bf:	90                   	nop

c000f9c0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f9c0:	83 ec 10             	sub    esp,0x10
c000f9c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9c7:	50                   	push   eax
c000f9c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9cc:	50                   	push   eax
c000f9cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9d1:	50                   	push   eax
c000f9d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f9d6:	50                   	push   eax
c000f9d7:	6a 07                	push   0x7
c000f9d9:	e8 d4 fe ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9e2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f9e6:	0f 95 c0             	setne  al
c000f9e9:	83 c4 24             	add    esp,0x24
c000f9ec:	c3                   	ret    
c000f9ed:	90                   	nop

c000f9ee <CPU::CPU()>:
c000f9ee:	83 ec 0c             	sub    esp,0xc
c000f9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f5:	83 ec 08             	sub    esp,0x8
c000f9f8:	68 95 12 02 c0       	push   0xc0021295
c000f9fd:	50                   	push   eax
c000f9fe:	e8 c9 c7 ff ff       	call   c000c1cc <Device::Device(char const*)>
c000fa03:	83 c4 10             	add    esp,0x10
c000fa06:	ba 28 13 02 c0       	mov    edx,0xc0021328
c000fa0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0f:	89 10                	mov    DWORD PTR [eax],edx
c000fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa15:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fa1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa23:	05 78 01 00 00       	add    eax,0x178
c000fa28:	83 ec 0c             	sub    esp,0xc
c000fa2b:	50                   	push   eax
c000fa2c:	e8 43 79 ff ff       	call   c0007374 <GDT::GDT()>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa38:	05 7c 09 00 00       	add    eax,0x97c
c000fa3d:	83 ec 0c             	sub    esp,0xc
c000fa40:	50                   	push   eax
c000fa41:	e8 7e 7b ff ff       	call   c00075c4 <IDT::IDT()>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa4d:	05 7c 11 00 00       	add    eax,0x117c
c000fa52:	83 ec 0c             	sub    esp,0xc
c000fa55:	50                   	push   eax
c000fa56:	e8 c5 94 ff ff       	call   c0008f20 <TSS::TSS()>
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa62:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fa69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fa77:	90                   	nop
c000fa78:	83 c4 0c             	add    esp,0xc
c000fa7b:	c3                   	ret    

c000fa7c <CPU::displayFeatures()>:
c000fa7c:	c3                   	ret    
c000fa7d:	90                   	nop

c000fa7e <CPU::detectFeatures()>:
c000fa7e:	55                   	push   ebp
c000fa7f:	57                   	push   edi
c000fa80:	56                   	push   esi
c000fa81:	53                   	push   ebx
c000fa82:	83 ec 30             	sub    esp,0x30
c000fa85:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fa89:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fa93:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fa99:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000faa0:	6a 0d                	push   0xd
c000faa2:	6a 00                	push   0x0
c000faa4:	55                   	push   ebp
c000faa5:	e8 46 0a ff ff       	call   c00004f0 <memset>
c000faaa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fab9:	0f 84 db 05 00 00    	je     c001009a <CPU::detectFeatures()+0x61c>
c000fabf:	83 ec 0c             	sub    esp,0xc
c000fac2:	89 ef                	mov    edi,ebp
c000fac4:	6a 10                	push   0x10
c000fac6:	e8 6b fe ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000facb:	83 e0 01             	and    eax,0x1
c000face:	8d 14 00             	lea    edx,[eax+eax*1]
c000fad1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fad7:	83 e0 fd             	and    eax,0xfffffffd
c000fada:	09 d0                	or     eax,edx
c000fadc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fae2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fae9:	e8 48 fe ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000faee:	83 e0 01             	and    eax,0x1
c000faf1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000faf8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fafe:	83 e0 fb             	and    eax,0xfffffffb
c000fb01:	09 d0                	or     eax,edx
c000fb03:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb09:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fb10:	e8 21 fe ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000fb15:	83 e0 01             	and    eax,0x1
c000fb18:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fb1f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb25:	83 e0 f7             	and    eax,0xfffffff7
c000fb28:	09 d0                	or     eax,edx
c000fb2a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb30:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fb37:	e8 fa fd ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000fb3c:	83 e0 01             	and    eax,0x1
c000fb3f:	c1 e0 04             	shl    eax,0x4
c000fb42:	89 c2                	mov    edx,eax
c000fb44:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb4a:	83 e0 ef             	and    eax,0xffffffef
c000fb4d:	09 d0                	or     eax,edx
c000fb4f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb55:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fb5c:	e8 d5 fd ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000fb61:	83 e0 01             	and    eax,0x1
c000fb64:	c1 e0 05             	shl    eax,0x5
c000fb67:	89 c2                	mov    edx,eax
c000fb69:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb6f:	83 e0 df             	and    eax,0xffffffdf
c000fb72:	09 d0                	or     eax,edx
c000fb74:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb7a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fb81:	e8 b0 fd ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000fb86:	83 e0 01             	and    eax,0x1
c000fb89:	8d 14 00             	lea    edx,[eax+eax*1]
c000fb8c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fb92:	83 e0 fd             	and    eax,0xfffffffd
c000fb95:	09 d0                	or     eax,edx
c000fb97:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fb9d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fba4:	e8 8d fd ff ff       	call   c000f936 <CPU::cpuidCheckEDX(unsigned int)>
c000fba9:	83 e0 01             	and    eax,0x1
c000fbac:	c1 e0 06             	shl    eax,0x6
c000fbaf:	89 c2                	mov    edx,eax
c000fbb1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbb7:	83 e0 bf             	and    eax,0xffffffbf
c000fbba:	09 d0                	or     eax,edx
c000fbbc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fbc2:	58                   	pop    eax
c000fbc3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbc7:	50                   	push   eax
c000fbc8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbcc:	50                   	push   eax
c000fbcd:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fbd1:	56                   	push   esi
c000fbd2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbd6:	50                   	push   eax
c000fbd7:	6a 00                	push   0x0
c000fbd9:	e8 d4 fc ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fbde:	b8 04 00 00 00       	mov    eax,0x4
c000fbe3:	89 c1                	mov    ecx,eax
c000fbe5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fbed:	89 c1                	mov    ecx,eax
c000fbef:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fbf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbf5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fbfb:	89 c1                	mov    ecx,eax
c000fbfd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fc01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc03:	83 c4 18             	add    esp,0x18
c000fc06:	68 a4 11 02 c0       	push   0xc00211a4
c000fc0b:	55                   	push   ebp
c000fc0c:	e8 6f 0b ff ff       	call   c0000780 <strcmp>
c000fc11:	83 c4 10             	add    esp,0x10
c000fc14:	85 c0                	test   eax,eax
c000fc16:	75 0f                	jne    c000fc27 <CPU::detectFeatures()+0x1a9>
c000fc18:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fc22:	e9 22 02 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fc27:	50                   	push   eax
c000fc28:	50                   	push   eax
c000fc29:	68 b1 11 02 c0       	push   0xc00211b1
c000fc2e:	55                   	push   ebp
c000fc2f:	e8 4c 0b ff ff       	call   c0000780 <strcmp>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	85 c0                	test   eax,eax
c000fc39:	74 dd                	je     c000fc18 <CPU::detectFeatures()+0x19a>
c000fc3b:	50                   	push   eax
c000fc3c:	50                   	push   eax
c000fc3d:	68 be 11 02 c0       	push   0xc00211be
c000fc42:	55                   	push   ebp
c000fc43:	e8 38 0b ff ff       	call   c0000780 <strcmp>
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	85 c0                	test   eax,eax
c000fc4d:	74 2a                	je     c000fc79 <CPU::detectFeatures()+0x1fb>
c000fc4f:	50                   	push   eax
c000fc50:	50                   	push   eax
c000fc51:	68 cb 11 02 c0       	push   0xc00211cb
c000fc56:	55                   	push   ebp
c000fc57:	e8 24 0b ff ff       	call   c0000780 <strcmp>
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	85 c0                	test   eax,eax
c000fc61:	74 16                	je     c000fc79 <CPU::detectFeatures()+0x1fb>
c000fc63:	50                   	push   eax
c000fc64:	50                   	push   eax
c000fc65:	68 d8 11 02 c0       	push   0xc00211d8
c000fc6a:	55                   	push   ebp
c000fc6b:	e8 10 0b ff ff       	call   c0000780 <strcmp>
c000fc70:	83 c4 10             	add    esp,0x10
c000fc73:	85 c0                	test   eax,eax
c000fc75:	74 48                	je     c000fcbf <CPU::detectFeatures()+0x241>
c000fc77:	eb 0f                	jmp    c000fc88 <CPU::detectFeatures()+0x20a>
c000fc79:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fc83:	e9 c1 01 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fc88:	50                   	push   eax
c000fc89:	50                   	push   eax
c000fc8a:	68 e5 11 02 c0       	push   0xc00211e5
c000fc8f:	55                   	push   ebp
c000fc90:	e8 eb 0a ff ff       	call   c0000780 <strcmp>
c000fc95:	83 c4 10             	add    esp,0x10
c000fc98:	85 c0                	test   eax,eax
c000fc9a:	74 23                	je     c000fcbf <CPU::detectFeatures()+0x241>
c000fc9c:	57                   	push   edi
c000fc9d:	57                   	push   edi
c000fc9e:	68 f2 11 02 c0       	push   0xc00211f2
c000fca3:	55                   	push   ebp
c000fca4:	e8 d7 0a ff ff       	call   c0000780 <strcmp>
c000fca9:	83 c4 10             	add    esp,0x10
c000fcac:	85 c0                	test   eax,eax
c000fcae:	75 1e                	jne    c000fcce <CPU::detectFeatures()+0x250>
c000fcb0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fcba:	e9 8a 01 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fcbf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fcc9:	e9 7b 01 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fcce:	56                   	push   esi
c000fccf:	56                   	push   esi
c000fcd0:	68 ff 11 02 c0       	push   0xc00211ff
c000fcd5:	55                   	push   ebp
c000fcd6:	e8 a5 0a ff ff       	call   c0000780 <strcmp>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	85 c0                	test   eax,eax
c000fce0:	75 0f                	jne    c000fcf1 <CPU::detectFeatures()+0x273>
c000fce2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fcec:	e9 58 01 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fcf1:	51                   	push   ecx
c000fcf2:	51                   	push   ecx
c000fcf3:	68 be 11 02 c0       	push   0xc00211be
c000fcf8:	55                   	push   ebp
c000fcf9:	e8 82 0a ff ff       	call   c0000780 <strcmp>
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	85 c0                	test   eax,eax
c000fd03:	75 0f                	jne    c000fd14 <CPU::detectFeatures()+0x296>
c000fd05:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fd0f:	e9 35 01 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fd14:	52                   	push   edx
c000fd15:	52                   	push   edx
c000fd16:	68 0c 12 02 c0       	push   0xc002120c
c000fd1b:	55                   	push   ebp
c000fd1c:	e8 5f 0a ff ff       	call   c0000780 <strcmp>
c000fd21:	83 c4 10             	add    esp,0x10
c000fd24:	85 c0                	test   eax,eax
c000fd26:	75 0f                	jne    c000fd37 <CPU::detectFeatures()+0x2b9>
c000fd28:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fd32:	e9 12 01 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fd37:	50                   	push   eax
c000fd38:	50                   	push   eax
c000fd39:	68 19 12 02 c0       	push   0xc0021219
c000fd3e:	55                   	push   ebp
c000fd3f:	e8 3c 0a ff ff       	call   c0000780 <strcmp>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	85 c0                	test   eax,eax
c000fd49:	75 0f                	jne    c000fd5a <CPU::detectFeatures()+0x2dc>
c000fd4b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fd55:	e9 ef 00 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fd5a:	50                   	push   eax
c000fd5b:	50                   	push   eax
c000fd5c:	68 26 12 02 c0       	push   0xc0021226
c000fd61:	55                   	push   ebp
c000fd62:	e8 19 0a ff ff       	call   c0000780 <strcmp>
c000fd67:	83 c4 10             	add    esp,0x10
c000fd6a:	85 c0                	test   eax,eax
c000fd6c:	75 0f                	jne    c000fd7d <CPU::detectFeatures()+0x2ff>
c000fd6e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fd78:	e9 cc 00 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fd7d:	50                   	push   eax
c000fd7e:	50                   	push   eax
c000fd7f:	68 33 12 02 c0       	push   0xc0021233
c000fd84:	55                   	push   ebp
c000fd85:	e8 f6 09 ff ff       	call   c0000780 <strcmp>
c000fd8a:	83 c4 10             	add    esp,0x10
c000fd8d:	85 c0                	test   eax,eax
c000fd8f:	75 0f                	jne    c000fda0 <CPU::detectFeatures()+0x322>
c000fd91:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fd9b:	e9 a9 00 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fda0:	50                   	push   eax
c000fda1:	50                   	push   eax
c000fda2:	68 40 12 02 c0       	push   0xc0021240
c000fda7:	55                   	push   ebp
c000fda8:	e8 d3 09 ff ff       	call   c0000780 <strcmp>
c000fdad:	83 c4 10             	add    esp,0x10
c000fdb0:	85 c0                	test   eax,eax
c000fdb2:	75 0f                	jne    c000fdc3 <CPU::detectFeatures()+0x345>
c000fdb4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fdbe:	e9 86 00 00 00       	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fdc3:	50                   	push   eax
c000fdc4:	50                   	push   eax
c000fdc5:	68 4d 12 02 c0       	push   0xc002124d
c000fdca:	55                   	push   ebp
c000fdcb:	e8 b0 09 ff ff       	call   c0000780 <strcmp>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	85 c0                	test   eax,eax
c000fdd5:	75 0c                	jne    c000fde3 <CPU::detectFeatures()+0x365>
c000fdd7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fde1:	eb 66                	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fde3:	50                   	push   eax
c000fde4:	50                   	push   eax
c000fde5:	68 5a 12 02 c0       	push   0xc002125a
c000fdea:	55                   	push   ebp
c000fdeb:	e8 90 09 ff ff       	call   c0000780 <strcmp>
c000fdf0:	83 c4 10             	add    esp,0x10
c000fdf3:	85 c0                	test   eax,eax
c000fdf5:	75 0c                	jne    c000fe03 <CPU::detectFeatures()+0x385>
c000fdf7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fe01:	eb 46                	jmp    c000fe49 <CPU::detectFeatures()+0x3cb>
c000fe03:	57                   	push   edi
c000fe04:	57                   	push   edi
c000fe05:	68 67 12 02 c0       	push   0xc0021267
c000fe0a:	55                   	push   ebp
c000fe0b:	e8 70 09 ff ff       	call   c0000780 <strcmp>
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	85 c0                	test   eax,eax
c000fe15:	74 e0                	je     c000fdf7 <CPU::detectFeatures()+0x379>
c000fe17:	56                   	push   esi
c000fe18:	56                   	push   esi
c000fe19:	68 74 12 02 c0       	push   0xc0021274
c000fe1e:	55                   	push   ebp
c000fe1f:	e8 5c 09 ff ff       	call   c0000780 <strcmp>
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	85 c0                	test   eax,eax
c000fe29:	74 cc                	je     c000fdf7 <CPU::detectFeatures()+0x379>
c000fe2b:	51                   	push   ecx
c000fe2c:	51                   	push   ecx
c000fe2d:	68 81 12 02 c0       	push   0xc0021281
c000fe32:	55                   	push   ebp
c000fe33:	e8 48 09 ff ff       	call   c0000780 <strcmp>
c000fe38:	83 c4 10             	add    esp,0x10
c000fe3b:	85 c0                	test   eax,eax
c000fe3d:	74 b8                	je     c000fdf7 <CPU::detectFeatures()+0x379>
c000fe3f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fe49:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fe4e:	0f 86 be 00 00 00    	jbe    c000ff12 <CPU::detectFeatures()+0x494>
c000fe54:	83 ec 0c             	sub    esp,0xc
c000fe57:	68 80 00 00 00       	push   0x80
c000fe5c:	e8 31 fb ff ff       	call   c000f992 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fe61:	83 e0 01             	and    eax,0x1
c000fe64:	c1 e0 06             	shl    eax,0x6
c000fe67:	89 c2                	mov    edx,eax
c000fe69:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fe6f:	83 e0 bf             	and    eax,0xffffffbf
c000fe72:	09 d0                	or     eax,edx
c000fe74:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fe7a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fe81:	e8 0c fb ff ff       	call   c000f992 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fe86:	83 e0 01             	and    eax,0x1
c000fe89:	c1 e0 04             	shl    eax,0x4
c000fe8c:	89 c2                	mov    edx,eax
c000fe8e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe94:	83 e0 ef             	and    eax,0xffffffef
c000fe97:	09 d0                	or     eax,edx
c000fe99:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe9f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fea6:	e8 e7 fa ff ff       	call   c000f992 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000feab:	89 c2                	mov    edx,eax
c000fead:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000feb3:	c1 e2 07             	shl    edx,0x7
c000feb6:	83 e0 7f             	and    eax,0x7f
c000feb9:	09 d0                	or     eax,edx
c000febb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fec1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fec8:	e8 f3 fa ff ff       	call   c000f9c0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fecd:	83 e0 01             	and    eax,0x1
c000fed0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fed7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fedd:	83 e0 f7             	and    eax,0xfffffff7
c000fee0:	09 d0                	or     eax,edx
c000fee2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fee8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000feef:	e8 cc fa ff ff       	call   c000f9c0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fef4:	83 c4 10             	add    esp,0x10
c000fef7:	83 e0 01             	and    eax,0x1
c000fefa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff01:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff07:	83 e0 fb             	and    eax,0xfffffffb
c000ff0a:	09 d0                	or     eax,edx
c000ff0c:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff19:	50                   	push   eax
c000ff1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ff1e:	50                   	push   eax
c000ff1f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000ff23:	57                   	push   edi
c000ff24:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ff28:	56                   	push   esi
c000ff29:	6a 01                	push   0x1
c000ff2b:	e8 82 f9 ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff34:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000ff3a:	89 c1                	mov    ecx,eax
c000ff3c:	83 e1 0f             	and    ecx,0xf
c000ff3f:	83 e2 f0             	and    edx,0xfffffff0
c000ff42:	09 ca                	or     edx,ecx
c000ff44:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000ff4a:	89 c2                	mov    edx,eax
c000ff4c:	c1 ea 04             	shr    edx,0x4
c000ff4f:	83 e2 0f             	and    edx,0xf
c000ff52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ff56:	89 d1                	mov    ecx,edx
c000ff58:	83 c4 20             	add    esp,0x20
c000ff5b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000ff61:	c1 e1 06             	shl    ecx,0x6
c000ff64:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000ff6a:	09 ca                	or     edx,ecx
c000ff6c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000ff73:	89 c2                	mov    edx,eax
c000ff75:	c1 ea 08             	shr    edx,0x8
c000ff78:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000ff7e:	83 e2 0f             	and    edx,0xf
c000ff81:	89 d5                	mov    ebp,edx
c000ff83:	83 e5 03             	and    ebp,0x3
c000ff86:	c1 e5 06             	shl    ebp,0x6
c000ff89:	83 e1 3f             	and    ecx,0x3f
c000ff8c:	09 e9                	or     ecx,ebp
c000ff8e:	89 d5                	mov    ebp,edx
c000ff90:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000ff96:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000ff9c:	c1 ed 02             	shr    ebp,0x2
c000ff9f:	83 e1 c0             	and    ecx,0xffffffc0
c000ffa2:	09 e9                	or     ecx,ebp
c000ffa4:	89 c5                	mov    ebp,eax
c000ffa6:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000ffac:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000ffb2:	c1 ed 08             	shr    ebp,0x8
c000ffb5:	83 e5 30             	and    ebp,0x30
c000ffb8:	83 e1 cf             	and    ecx,0xffffffcf
c000ffbb:	09 e9                	or     ecx,ebp
c000ffbd:	83 fa 06             	cmp    edx,0x6
c000ffc0:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000ffc6:	74 05                	je     c000ffcd <CPU::detectFeatures()+0x54f>
c000ffc8:	83 fa 0f             	cmp    edx,0xf
c000ffcb:	75 64                	jne    c0010031 <CPU::detectFeatures()+0x5b3>
c000ffcd:	89 c1                	mov    ecx,eax
c000ffcf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000ffd5:	c1 e9 10             	shr    ecx,0x10
c000ffd8:	c1 e1 04             	shl    ecx,0x4
c000ffdb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000ffdf:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000ffe5:	0f b6 c9             	movzx  ecx,cl
c000ffe8:	c1 e1 06             	shl    ecx,0x6
c000ffeb:	09 e9                	or     ecx,ebp
c000ffed:	83 fa 0f             	cmp    edx,0xf
c000fff0:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fff7:	75 38                	jne    c0010031 <CPU::detectFeatures()+0x5b3>
c000fff9:	c1 e8 14             	shr    eax,0x14
c000fffc:	83 c0 0f             	add    eax,0xf
c000ffff:	0f b6 c0             	movzx  eax,al
c0010002:	89 c2                	mov    edx,eax
c0010004:	c1 e8 02             	shr    eax,0x2
c0010007:	83 e2 03             	and    edx,0x3
c001000a:	89 d1                	mov    ecx,edx
c001000c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010012:	c1 e1 06             	shl    ecx,0x6
c0010015:	83 e2 3f             	and    edx,0x3f
c0010018:	09 ca                	or     edx,ecx
c001001a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010020:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010026:	83 e2 c0             	and    edx,0xffffffc0
c0010029:	09 d0                	or     eax,edx
c001002b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010031:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010037:	83 ec 0c             	sub    esp,0xc
c001003a:	83 c8 07             	or     eax,0x7
c001003d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010043:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010047:	50                   	push   eax
c0010048:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001004c:	55                   	push   ebp
c001004d:	57                   	push   edi
c001004e:	56                   	push   esi
c001004f:	68 00 00 00 80       	push   0x80000000
c0010054:	e8 59 f8 ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010059:	83 c4 20             	add    esp,0x20
c001005c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010064:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010068:	76 1e                	jbe    c0010088 <CPU::detectFeatures()+0x60a>
c001006a:	83 ec 0c             	sub    esp,0xc
c001006d:	50                   	push   eax
c001006e:	55                   	push   ebp
c001006f:	57                   	push   edi
c0010070:	56                   	push   esi
c0010071:	68 01 00 00 80       	push   0x80000001
c0010076:	e8 37 f8 ff ff       	call   c000f8b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001007b:	83 c4 20             	add    esp,0x20
c001007e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010088:	52                   	push   edx
c0010089:	52                   	push   edx
c001008a:	68 8d 12 02 c0       	push   0xc002128d
c001008f:	53                   	push   ebx
c0010090:	e8 29 c1 ff ff       	call   c000c1be <Device::setName(char const*)>
c0010095:	83 c4 10             	add    esp,0x10
c0010098:	eb 69                	jmp    c0010103 <CPU::detectFeatures()+0x685>
c001009a:	50                   	push   eax
c001009b:	50                   	push   eax
c001009c:	68 f2 11 02 c0       	push   0xc00211f2
c00100a1:	55                   	push   ebp
c00100a2:	e8 a9 05 ff ff       	call   c0000650 <strcpy>
c00100a7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00100b1:	e8 0d 01 ff ff       	call   c00001c3 <is486>
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	85 c0                	test   eax,eax
c00100bb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00100c1:	74 1f                	je     c00100e2 <CPU::detectFeatures()+0x664>
c00100c3:	83 c8 07             	or     eax,0x7
c00100c6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00100cc:	0f 20 c0             	mov    eax,cr0
c00100cf:	83 e0 14             	and    eax,0x14
c00100d2:	83 f8 04             	cmp    eax,0x4
c00100d5:	75 10                	jne    c00100e7 <CPU::detectFeatures()+0x669>
c00100d7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00100dd:	83 e0 fd             	and    eax,0xfffffffd
c00100e0:	eb 1b                	jmp    c00100fd <CPU::detectFeatures()+0x67f>
c00100e2:	83 e0 f8             	and    eax,0xfffffff8
c00100e5:	eb df                	jmp    c00100c6 <CPU::detectFeatures()+0x648>
c00100e7:	e8 b2 00 ff ff       	call   c000019e <hasLegacyFPU>
c00100ec:	83 e0 01             	and    eax,0x1
c00100ef:	8d 14 00             	lea    edx,[eax+eax*1]
c00100f2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00100f8:	83 e0 fd             	and    eax,0xfffffffd
c00100fb:	09 d0                	or     eax,edx
c00100fd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010103:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001010a:	74 17                	je     c0010123 <CPU::detectFeatures()+0x6a5>
c001010c:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c0010112:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010118:	83 c8 10             	or     eax,0x10
c001011b:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010121:	eb 20                	jmp    c0010143 <CPU::detectFeatures()+0x6c5>
c0010123:	e8 76 00 ff ff       	call   c000019e <hasLegacyFPU>
c0010128:	83 e0 01             	and    eax,0x1
c001012b:	8d 14 00             	lea    edx,[eax+eax*1]
c001012e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010134:	83 e0 fd             	and    eax,0xfffffffd
c0010137:	09 d0                	or     eax,edx
c0010139:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001013f:	a8 02                	test   al,0x2
c0010141:	75 c9                	jne    c001010c <CPU::detectFeatures()+0x68e>
c0010143:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001014a:	83 c4 2c             	add    esp,0x2c
c001014d:	5b                   	pop    ebx
c001014e:	5e                   	pop    esi
c001014f:	5f                   	pop    edi
c0010150:	5d                   	pop    ebp
c0010151:	c3                   	ret    

c0010152 <CPU::setupSMEP()>:
c0010152:	0f 20 e0             	mov    eax,cr4
c0010155:	0d 00 00 10 00       	or     eax,0x100000
c001015a:	0f 22 e0             	mov    cr4,eax
c001015d:	c3                   	ret    

c001015e <CPU::setupUMIP()>:
c001015e:	0f 20 e0             	mov    eax,cr4
c0010161:	80 cc 08             	or     ah,0x8
c0010164:	0f 22 e0             	mov    cr4,eax
c0010167:	c3                   	ret    

c0010168 <CPU::setupTSC()>:
c0010168:	0f 20 e0             	mov    eax,cr4
c001016b:	83 c8 04             	or     eax,0x4
c001016e:	0f 22 e0             	mov    cr4,eax
c0010171:	c3                   	ret    

c0010172 <CPU::setupLargePages()>:
c0010172:	0f 20 e0             	mov    eax,cr4
c0010175:	83 c8 10             	or     eax,0x10
c0010178:	0f 22 e0             	mov    cr4,eax
c001017b:	c3                   	ret    

c001017c <CPU::setupPAT()>:
c001017c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010181:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010188:	74 2c                	je     c00101b6 <CPU::setupPAT()+0x3a>
c001018a:	53                   	push   ebx
c001018b:	83 ec 10             	sub    esp,0x10
c001018e:	68 77 02 00 00       	push   0x277
c0010193:	50                   	push   eax
c0010194:	e8 41 6f ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0010199:	83 e2 f8             	and    edx,0xfffffff8
c001019c:	83 ca 01             	or     edx,0x1
c001019f:	52                   	push   edx
c00101a0:	50                   	push   eax
c00101a1:	68 77 02 00 00       	push   0x277
c00101a6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00101ac:	e8 55 6f ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c00101b1:	83 c4 28             	add    esp,0x28
c00101b4:	5b                   	pop    ebx
c00101b5:	c3                   	ret    
c00101b6:	c3                   	ret    
c00101b7:	90                   	nop

c00101b8 <CPU::setupMTRR()>:
c00101b8:	c3                   	ret    
c00101b9:	90                   	nop

c00101ba <CPU::setupGlobalPages()>:
c00101ba:	0f 20 e0             	mov    eax,cr4
c00101bd:	0c 80                	or     al,0x80
c00101bf:	0f 22 e0             	mov    cr4,eax
c00101c2:	c3                   	ret    
c00101c3:	90                   	nop

c00101c4 <CPU::allowUsermodeDataAccess()>:
c00101c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00101cf:	74 03                	je     c00101d4 <CPU::allowUsermodeDataAccess()+0x10>
c00101d1:	0f 01 cb             	stac   
c00101d4:	c3                   	ret    
c00101d5:	90                   	nop

c00101d6 <CPU::prohibitUsermodeDataAccess()>:
c00101d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101da:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00101e1:	74 03                	je     c00101e6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00101e3:	0f 01 ca             	clac   
c00101e6:	c3                   	ret    
c00101e7:	90                   	nop

c00101e8 <CPU::setupSMAP()>:
c00101e8:	0f 20 e0             	mov    eax,cr4
c00101eb:	0d 00 00 20 00       	or     eax,0x200000
c00101f0:	0f 22 e0             	mov    cr4,eax
c00101f3:	eb e1                	jmp    c00101d6 <CPU::prohibitUsermodeDataAccess()>
c00101f5:	90                   	nop

c00101f6 <CPU::setupFeatures()>:
c00101f6:	53                   	push   ebx
c00101f7:	83 ec 08             	sub    esp,0x8
c00101fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101fe:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010205:	74 18                	je     c001021f <CPU::setupFeatures()+0x29>
c0010207:	83 ec 0c             	sub    esp,0xc
c001020a:	68 99 12 02 c0       	push   0xc0021299
c001020f:	e8 ea a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010217:	e8 42 ff ff ff       	call   c001015e <CPU::setupUMIP()>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010226:	74 18                	je     c0010240 <CPU::setupFeatures()+0x4a>
c0010228:	83 ec 0c             	sub    esp,0xc
c001022b:	68 a3 12 02 c0       	push   0xc00212a3
c0010230:	e8 c9 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010235:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010238:	e8 2b ff ff ff       	call   c0010168 <CPU::setupTSC()>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010247:	74 18                	je     c0010261 <CPU::setupFeatures()+0x6b>
c0010249:	83 ec 0c             	sub    esp,0xc
c001024c:	68 ac 12 02 c0       	push   0xc00212ac
c0010251:	e8 a8 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010259:	e8 14 ff ff ff       	call   c0010172 <CPU::setupLargePages()>
c001025e:	83 c4 10             	add    esp,0x10
c0010261:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010268:	74 18                	je     c0010282 <CPU::setupFeatures()+0x8c>
c001026a:	83 ec 0c             	sub    esp,0xc
c001026d:	68 b5 12 02 c0       	push   0xc00212b5
c0010272:	e8 87 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010277:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001027a:	e8 3b ff ff ff       	call   c00101ba <CPU::setupGlobalPages()>
c001027f:	83 c4 10             	add    esp,0x10
c0010282:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010289:	74 18                	je     c00102a3 <CPU::setupFeatures()+0xad>
c001028b:	83 ec 0c             	sub    esp,0xc
c001028e:	68 c7 12 02 c0       	push   0xc00212c7
c0010293:	e8 66 a6 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010298:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001029b:	e8 dc fe ff ff       	call   c001017c <CPU::setupPAT()>
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00102aa:	74 11                	je     c00102bd <CPU::setupFeatures()+0xc7>
c00102ac:	c7 44 24 10 d0 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc00212d0
c00102b4:	83 c4 08             	add    esp,0x8
c00102b7:	5b                   	pop    ebx
c00102b8:	e9 41 a6 ff ff       	jmp    c000a8fe <Dbg::kprintf(char const*, ...)>
c00102bd:	83 c4 08             	add    esp,0x8
c00102c0:	5b                   	pop    ebx
c00102c1:	c3                   	ret    

c00102c2 <CPU::open(int, int, void*)>:
c00102c2:	55                   	push   ebp
c00102c3:	57                   	push   edi
c00102c4:	56                   	push   esi
c00102c5:	53                   	push   ebx
c00102c6:	83 ec 18             	sub    esp,0x18
c00102c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00102cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00102d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102d5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00102db:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00102e1:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00102e7:	50                   	push   eax
c00102e8:	e8 e9 70 ff ff       	call   c00073d6 <GDT::setup()>
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	6a 00                	push   0x0
c00102f2:	68 ef be ad de       	push   0xdeadbeef
c00102f7:	55                   	push   ebp
c00102f8:	e8 67 8c ff ff       	call   c0008f64 <TSS::setup(unsigned long, unsigned long)>
c00102fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010300:	e8 3f 8c ff ff       	call   c0008f44 <TSS::flush()>
c0010305:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001030b:	89 04 24             	mov    DWORD PTR [esp],eax
c001030e:	e8 27 73 ff ff       	call   c000763a <IDT::setup()>
c0010313:	b8 00 04 00 00       	mov    eax,0x400
c0010318:	0f 23 f8             	mov    db7,eax
c001031b:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010325:	e8 ab 7a ff ff       	call   c0007dd5 <Phys::allocatePage()>
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	85 f6                	test   esi,esi
c001032f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010335:	89 38                	mov    DWORD PTR [eax],edi
c0010337:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001033d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010340:	74 10                	je     c0010352 <CPU::open(int, int, void*)+0x90>
c0010342:	50                   	push   eax
c0010343:	50                   	push   eax
c0010344:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001034a:	56                   	push   esi
c001034b:	e8 30 95 ff ff       	call   c0009880 <VAS::setCPUSpecific(unsigned long)>
c0010350:	eb 0d                	jmp    c001035f <CPU::open(int, int, void*)+0x9d>
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	68 da 12 02 c0       	push   0xc00212da
c001035a:	e8 be 07 00 00       	call   c0010b1d <KePanic(char const*)>
c001035f:	83 c4 10             	add    esp,0x10
c0010362:	83 ec 0c             	sub    esp,0xc
c0010365:	68 e8 12 02 c0       	push   0xc00212e8
c001036a:	e8 d8 00 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c001036f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010372:	e8 07 f7 ff ff       	call   c000fa7e <CPU::detectFeatures()>
c0010377:	c7 04 24 0b 13 02 c0 	mov    DWORD PTR [esp],0xc002130b
c001037e:	e8 c4 00 00 00       	call   c0010447 <KeSetBootMessage(char const*)>
c0010383:	e8 5b 70 00 00       	call   c00173e3 <HalInitialise()>
c0010388:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c001038d:	83 e0 10             	and    eax,0x10
c0010390:	83 f8 01             	cmp    eax,0x1
c0010393:	19 c0                	sbb    eax,eax
c0010395:	83 e0 46             	and    eax,0x46
c0010398:	83 c0 1e             	add    eax,0x1e
c001039b:	89 04 24             	mov    DWORD PTR [esp],eax
c001039e:	e8 c2 d6 ff ff       	call   c000da65 <setupTimer(int)>
c00103a3:	83 c4 10             	add    esp,0x10
c00103a6:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00103ad:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00103b3:	74 0c                	je     c00103c1 <CPU::open(int, int, void*)+0xff>
c00103b5:	83 ec 0c             	sub    esp,0xc
c00103b8:	53                   	push   ebx
c00103b9:	e8 38 fe ff ff       	call   c00101f6 <CPU::setupFeatures()>
c00103be:	83 c4 10             	add    esp,0x10
c00103c1:	83 c4 0c             	add    esp,0xc
c00103c4:	31 c0                	xor    eax,eax
c00103c6:	5b                   	pop    ebx
c00103c7:	5e                   	pop    esi
c00103c8:	5f                   	pop    edi
c00103c9:	5d                   	pop    ebp
c00103ca:	c3                   	ret    

c00103cb <KeDisplaySplashScreen()>:
c00103cb:	55                   	push   ebp
c00103cc:	bd 05 00 00 00       	mov    ebp,0x5
c00103d1:	57                   	push   edi
c00103d2:	bf 0a 00 00 00       	mov    edi,0xa
c00103d7:	56                   	push   esi
c00103d8:	31 f6                	xor    esi,esi
c00103da:	53                   	push   ebx
c00103db:	31 db                	xor    ebx,ebx
c00103dd:	83 ec 0c             	sub    esp,0xc
c00103e0:	0f b6 96 00 27 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd900]
c00103e7:	85 d2                	test   edx,edx
c00103e9:	89 d0                	mov    eax,edx
c00103eb:	74 52                	je     c001043f <KeDisplaySplashScreen()+0x74>
c00103ed:	80 bb 36 27 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd8ca],0xdb
c00103f4:	75 13                	jne    c0010409 <KeDisplaySplashScreen()+0x3e>
c00103f6:	0f b6 8b 35 27 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd8cb]
c00103fd:	83 e1 fe             	and    ecx,0xfffffffe
c0010400:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010406:	75 01                	jne    c0010409 <KeDisplaySplashScreen()+0x3e>
c0010408:	47                   	inc    edi
c0010409:	83 fa 0d             	cmp    edx,0xd
c001040c:	74 28                	je     c0010436 <KeDisplaySplashScreen()+0x6b>
c001040e:	83 fa 0a             	cmp    edx,0xa
c0010411:	75 0a                	jne    c001041d <KeDisplaySplashScreen()+0x52>
c0010413:	45                   	inc    ebp
c0010414:	bf 0a 00 00 00       	mov    edi,0xa
c0010419:	31 db                	xor    ebx,ebx
c001041b:	eb 19                	jmp    c0010436 <KeDisplaySplashScreen()+0x6b>
c001041d:	83 ec 0c             	sub    esp,0xc
c0010420:	0f be c0             	movsx  eax,al
c0010423:	55                   	push   ebp
c0010424:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010427:	43                   	inc    ebx
c0010428:	52                   	push   edx
c0010429:	6a 00                	push   0x0
c001042b:	6a 0e                	push   0xe
c001042d:	50                   	push   eax
c001042e:	e8 2d 7c 00 00       	call   c0018060 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010433:	83 c4 20             	add    esp,0x20
c0010436:	46                   	inc    esi
c0010437:	81 fe 42 01 00 00    	cmp    esi,0x142
c001043d:	75 a1                	jne    c00103e0 <KeDisplaySplashScreen()+0x15>
c001043f:	83 c4 0c             	add    esp,0xc
c0010442:	5b                   	pop    ebx
c0010443:	5e                   	pop    esi
c0010444:	5f                   	pop    edi
c0010445:	5d                   	pop    ebp
c0010446:	c3                   	ret    

c0010447 <KeSetBootMessage(char const*)>:
c0010447:	57                   	push   edi
c0010448:	56                   	push   esi
c0010449:	53                   	push   ebx
c001044a:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010450:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010457:	68 9e 00 00 00       	push   0x9e
c001045c:	6a 00                	push   0x0
c001045e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010462:	56                   	push   esi
c0010463:	e8 88 00 ff ff       	call   c00004f0 <memset>
c0010468:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001046b:	e8 10 01 ff ff       	call   c0000580 <strlen>
c0010470:	ba 50 00 00 00       	mov    edx,0x50
c0010475:	83 c4 10             	add    esp,0x10
c0010478:	31 c9                	xor    ecx,ecx
c001047a:	29 c2                	sub    edx,eax
c001047c:	83 e2 fe             	and    edx,0xfffffffe
c001047f:	01 f2                	add    edx,esi
c0010481:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010486:	84 c0                	test   al,al
c0010488:	74 0a                	je     c0010494 <KeSetBootMessage(char const*)+0x4d>
c001048a:	80 cc 0f             	or     ah,0xf
c001048d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010491:	41                   	inc    ecx
c0010492:	eb ed                	jmp    c0010481 <KeSetBootMessage(char const*)+0x3a>
c0010494:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010499:	b9 9e 00 00 00       	mov    ecx,0x9e
c001049e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104a0:	81 c4 a0 00 00 00    	add    esp,0xa0
c00104a6:	5b                   	pop    ebx
c00104a7:	5e                   	pop    esi
c00104a8:	5f                   	pop    edi
c00104a9:	c3                   	ret    
c00104aa:	66 90                	xchg   ax,ax

c00104ac <Krnl::handlePowerButton()>:
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	e8 c4 06 00 00       	call   c0010b78 <KeHandlePowerButton()>
c00104b4:	90                   	nop
c00104b5:	83 c4 0c             	add    esp,0xc
c00104b8:	c3                   	ret    
c00104b9:	8d 76 00             	lea    esi,[esi+0x0]

c00104bc <Krnl::handleSleepButton()>:
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	e8 e9 06 00 00       	call   c0010bad <KeHandleSleepButton()>
c00104c4:	90                   	nop
c00104c5:	83 c4 0c             	add    esp,0xc
c00104c8:	c3                   	ret    
c00104c9:	90                   	nop

c00104ca <EnvVarContainer::getEnv(char const*)>:
c00104ca:	57                   	push   edi
c00104cb:	56                   	push   esi
c00104cc:	53                   	push   ebx
c00104cd:	31 db                	xor    ebx,ebx
c00104cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00104d3:	39 1e                	cmp    DWORD PTR [esi],ebx
c00104d5:	7e 2b                	jle    c0010502 <EnvVarContainer::getEnv(char const*)+0x38>
c00104d7:	50                   	push   eax
c00104d8:	50                   	push   eax
c00104d9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00104dc:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00104e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00104e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00104ea:	e8 91 02 ff ff       	call   c0000780 <strcmp>
c00104ef:	83 c4 10             	add    esp,0x10
c00104f2:	85 c0                	test   eax,eax
c00104f4:	75 09                	jne    c00104ff <EnvVarContainer::getEnv(char const*)+0x35>
c00104f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00104f9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00104fd:	eb 05                	jmp    c0010504 <EnvVarContainer::getEnv(char const*)+0x3a>
c00104ff:	43                   	inc    ebx
c0010500:	eb d1                	jmp    c00104d3 <EnvVarContainer::getEnv(char const*)+0x9>
c0010502:	31 c0                	xor    eax,eax
c0010504:	5b                   	pop    ebx
c0010505:	5e                   	pop    esi
c0010506:	5f                   	pop    edi
c0010507:	c3                   	ret    

c0010508 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010508:	55                   	push   ebp
c0010509:	57                   	push   edi
c001050a:	56                   	push   esi
c001050b:	53                   	push   ebx
c001050c:	83 ec 28             	sub    esp,0x28
c001050f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010513:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010517:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001051b:	56                   	push   esi
c001051c:	e8 5f 00 ff ff       	call   c0000580 <strlen>
c0010521:	40                   	inc    eax
c0010522:	89 04 24             	mov    DWORD PTR [esp],eax
c0010525:	e8 a1 75 ff ff       	call   c0007acb <malloc>
c001052a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001052d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010531:	e8 4a 00 ff ff       	call   c0000580 <strlen>
c0010536:	40                   	inc    eax
c0010537:	89 04 24             	mov    DWORD PTR [esp],eax
c001053a:	e8 8c 75 ff ff       	call   c0007acb <malloc>
c001053f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010542:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010546:	e8 35 00 ff ff       	call   c0000580 <strlen>
c001054b:	83 c4 0c             	add    esp,0xc
c001054e:	40                   	inc    eax
c001054f:	50                   	push   eax
c0010550:	6a 00                	push   0x0
c0010552:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010556:	e8 95 ff fe ff       	call   c00004f0 <memset>
c001055b:	89 34 24             	mov    DWORD PTR [esp],esi
c001055e:	e8 1d 00 ff ff       	call   c0000580 <strlen>
c0010563:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010567:	8d 48 01             	lea    ecx,[eax+0x1]
c001056a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001056c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001056f:	89 de                	mov    esi,ebx
c0010571:	e8 0a 00 ff ff       	call   c0000580 <strlen>
c0010576:	83 c4 0c             	add    esp,0xc
c0010579:	40                   	inc    eax
c001057a:	50                   	push   eax
c001057b:	6a 00                	push   0x0
c001057d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010581:	e8 6a ff fe ff       	call   c00004f0 <memset>
c0010586:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010589:	e8 f2 ff fe ff       	call   c0000580 <strlen>
c001058e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010592:	8d 48 01             	lea    ecx,[eax+0x1]
c0010595:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010597:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001059a:	40                   	inc    eax
c001059b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001059e:	c1 e0 03             	shl    eax,0x3
c00105a1:	5a                   	pop    edx
c00105a2:	59                   	pop    ecx
c00105a3:	50                   	push   eax
c00105a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00105a7:	e8 0b 75 ff ff       	call   c0007ab7 <realloc>
c00105ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00105af:	8d 74 24 18          	lea    esi,[esp+0x18]
c00105b3:	b9 08 00 00 00       	mov    ecx,0x8
c00105b8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00105bb:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00105bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c1:	83 c4 2c             	add    esp,0x2c
c00105c4:	5b                   	pop    ebx
c00105c5:	5e                   	pop    esi
c00105c6:	5f                   	pop    edi
c00105c7:	5d                   	pop    ebp
c00105c8:	c3                   	ret    
c00105c9:	90                   	nop

c00105ca <EnvVarContainer::deleteEnv(char const*)>:
c00105ca:	c3                   	ret    
c00105cb:	90                   	nop

c00105cc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00105cc:	55                   	push   ebp
c00105cd:	57                   	push   edi
c00105ce:	56                   	push   esi
c00105cf:	53                   	push   ebx
c00105d0:	81 ec 38 01 00 00    	sub    esp,0x138
c00105d6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00105dd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00105e4:	68 14 01 00 00       	push   0x114
c00105e9:	e8 dd 74 ff ff       	call   c0007acb <malloc>
c00105ee:	83 c4 0c             	add    esp,0xc
c00105f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00105f4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00105fb:	89 c3                	mov    ebx,eax
c00105fd:	50                   	push   eax
c00105fe:	e8 77 ab ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0010603:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010606:	e8 99 ae ff ff       	call   c000b4a4 <File::exists()>
c001060b:	83 c4 10             	add    esp,0x10
c001060e:	84 c0                	test   al,al
c0010610:	75 31                	jne    c0010643 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010612:	50                   	push   eax
c0010613:	50                   	push   eax
c0010614:	6a 12                	push   0x12
c0010616:	53                   	push   ebx
c0010617:	e8 1a ac ff ff       	call   c000b236 <File::open(FileOpenMode)>
c001061c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001061e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010621:	89 34 24             	mov    DWORD PTR [esp],esi
c0010624:	e8 57 ff fe ff       	call   c0000580 <strlen>
c0010629:	5a                   	pop    edx
c001062a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001062e:	52                   	push   edx
c001062f:	31 d2                	xor    edx,edx
c0010631:	56                   	push   esi
c0010632:	52                   	push   edx
c0010633:	50                   	push   eax
c0010634:	53                   	push   ebx
c0010635:	ff d7                	call   edi
c0010637:	83 c4 14             	add    esp,0x14
c001063a:	53                   	push   ebx
c001063b:	e8 54 ac ff ff       	call   c000b294 <File::close()>
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	56                   	push   esi
c0010644:	31 f6                	xor    esi,esi
c0010646:	68 00 01 00 00       	push   0x100
c001064b:	6a 00                	push   0x0
c001064d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010651:	50                   	push   eax
c0010652:	e8 99 fe fe ff       	call   c00004f0 <memset>
c0010657:	5f                   	pop    edi
c0010658:	58                   	pop    eax
c0010659:	6a 01                	push   0x1
c001065b:	53                   	push   ebx
c001065c:	e8 d5 ab ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001066c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	8d 54 24 20          	lea    edx,[esp+0x20]
c001067b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001067d:	52                   	push   edx
c001067e:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010682:	51                   	push   ecx
c0010683:	6a 00                	push   0x0
c0010685:	6a 01                	push   0x1
c0010687:	53                   	push   ebx
c0010688:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001068b:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010690:	83 c4 20             	add    esp,0x20
c0010693:	85 c0                	test   eax,eax
c0010695:	89 c1                	mov    ecx,eax
c0010697:	0f 84 36 01 00 00    	je     c00107d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001069d:	83 f8 0d             	cmp    eax,0xd
c00106a0:	0f 84 22 01 00 00    	je     c00107c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00106a6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00106ab:	0f 84 f0 00 00 00    	je     c00107a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00106b1:	83 f8 0a             	cmp    eax,0xa
c00106b4:	74 13                	je     c00106c9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00106b6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00106bb:	74 0c                	je     c00106c9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00106bd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00106c3:	0f 8e f6 00 00 00    	jle    c00107bf <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00106c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106cd:	83 ec 0c             	sub    esp,0xc
c00106d0:	8d 78 01             	lea    edi,[eax+0x1]
c00106d3:	57                   	push   edi
c00106d4:	e8 f2 73 ff ff       	call   c0007acb <malloc>
c00106d9:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00106dd:	8d 56 04             	lea    edx,[esi+0x4]
c00106e0:	89 14 24             	mov    DWORD PTR [esp],edx
c00106e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00106e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00106eb:	e8 db 73 ff ff       	call   c0007acb <malloc>
c00106f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00106f4:	83 c4 0c             	add    esp,0xc
c00106f7:	57                   	push   edi
c00106f8:	6a 00                	push   0x0
c00106fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00106fe:	e8 ed fd fe ff       	call   c00004f0 <memset>
c0010703:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010707:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001070b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001070f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010711:	83 c4 0c             	add    esp,0xc
c0010714:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010718:	52                   	push   edx
c0010719:	6a 00                	push   0x0
c001071b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001071f:	e8 cc fd fe ff       	call   c00004f0 <memset>
c0010724:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010728:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001072c:	89 34 24             	mov    DWORD PTR [esp],esi
c001072f:	e8 4c fe fe ff       	call   c0000580 <strlen>
c0010734:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010738:	89 c1                	mov    ecx,eax
c001073a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001073c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001073f:	83 c4 10             	add    esp,0x10
c0010742:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010745:	40                   	inc    eax
c0010746:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010749:	85 d2                	test   edx,edx
c001074b:	75 0c                	jne    c0010759 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001074d:	83 ec 0c             	sub    esp,0xc
c0010750:	6a 08                	push   0x8
c0010752:	e8 74 73 ff ff       	call   c0007acb <malloc>
c0010757:	eb 0c                	jmp    c0010765 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010759:	51                   	push   ecx
c001075a:	51                   	push   ecx
c001075b:	c1 e0 03             	shl    eax,0x3
c001075e:	50                   	push   eax
c001075f:	52                   	push   edx
c0010760:	e8 52 73 ff ff       	call   c0007ab7 <realloc>
c0010765:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010768:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010771:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010775:	b9 08 00 00 00       	mov    ecx,0x8
c001077a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001077e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010780:	50                   	push   eax
c0010781:	31 f6                	xor    esi,esi
c0010783:	68 00 01 00 00       	push   0x100
c0010788:	6a 00                	push   0x0
c001078a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001078e:	50                   	push   eax
c001078f:	e8 5c fd fe ff       	call   c00004f0 <memset>
c0010794:	83 c4 10             	add    esp,0x10
c0010797:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001079f:	eb 27                	jmp    c00107c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107a1:	83 f8 3d             	cmp    eax,0x3d
c00107a4:	74 1e                	je     c00107c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00107a6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00107ac:	7f 07                	jg     c00107b5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00107ae:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00107b2:	46                   	inc    esi
c00107b3:	eb 13                	jmp    c00107c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107b5:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00107bd:	eb 09                	jmp    c00107c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00107bf:	83 f8 3d             	cmp    eax,0x3d
c00107c2:	75 ea                	jne    c00107ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00107c4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00107c8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00107cd:	0f 85 99 fe ff ff    	jne    c001066c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00107d3:	83 ec 0c             	sub    esp,0xc
c00107d6:	53                   	push   ebx
c00107d7:	e8 b8 aa ff ff       	call   c000b294 <File::close()>
c00107dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107e4:	81 c4 3c 01 00 00    	add    esp,0x13c
c00107ea:	5b                   	pop    ebx
c00107eb:	5e                   	pop    esi
c00107ec:	5f                   	pop    edi
c00107ed:	5d                   	pop    ebp
c00107ee:	c3                   	ret    
c00107ef:	90                   	nop

c00107f0 <EnvVarContainer::__loadSystem()>:
c00107f0:	83 ec 10             	sub    esp,0x10
c00107f3:	68 60 28 02 c0       	push   0xc0022860
c00107f8:	68 4c 13 02 c0       	push   0xc002134c
c00107fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010801:	e8 c6 fd ff ff       	call   c00105cc <EnvVarContainer::loadFrom(char const*, char const*)>
c0010806:	83 c4 1c             	add    esp,0x1c
c0010809:	c3                   	ret    

c001080a <EnvVarContainer::__loadUser()>:
c001080a:	c3                   	ret    
c001080b:	90                   	nop

c001080c <EnvVarContainer::EnvVarContainer(Process*)>:
c001080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001081a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001081e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010825:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001082c:	90                   	nop
c001082d:	c3                   	ret    

c001082e <EnvVarContainer::~EnvVarContainer()>:
c001082e:	83 ec 0c             	sub    esp,0xc
c0010831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010835:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010838:	85 c0                	test   eax,eax
c001083a:	74 1d                	je     c0010859 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	8b 00                	mov    eax,DWORD PTR [eax]
c0010842:	85 c0                	test   eax,eax
c0010844:	74 13                	je     c0010859 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001084d:	83 ec 0c             	sub    esp,0xc
c0010850:	50                   	push   eax
c0010851:	e8 85 72 ff ff       	call   c0007adb <free>
c0010856:	83 c4 10             	add    esp,0x10
c0010859:	90                   	nop
c001085a:	83 c4 0c             	add    esp,0xc
c001085d:	c3                   	ret    

c001085e <KeGetEnv(Process*, char const*)>:
c001085e:	53                   	push   ebx
c001085f:	83 ec 08             	sub    esp,0x8
c0010862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010866:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001086c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010870:	74 04                	je     c0010876 <KeGetEnv(Process*, char const*)+0x18>
c0010872:	85 c0                	test   eax,eax
c0010874:	75 0b                	jne    c0010881 <KeGetEnv(Process*, char const*)+0x23>
c0010876:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001087b:	85 c0                	test   eax,eax
c001087d:	75 19                	jne    c0010898 <KeGetEnv(Process*, char const*)+0x3a>
c001087f:	eb 27                	jmp    c00108a8 <KeGetEnv(Process*, char const*)+0x4a>
c0010881:	52                   	push   edx
c0010882:	52                   	push   edx
c0010883:	53                   	push   ebx
c0010884:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001088a:	e8 3b fc ff ff       	call   c00104ca <EnvVarContainer::getEnv(char const*)>
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	85 c0                	test   eax,eax
c0010894:	75 28                	jne    c00108be <KeGetEnv(Process*, char const*)+0x60>
c0010896:	eb de                	jmp    c0010876 <KeGetEnv(Process*, char const*)+0x18>
c0010898:	52                   	push   edx
c0010899:	52                   	push   edx
c001089a:	53                   	push   ebx
c001089b:	50                   	push   eax
c001089c:	e8 29 fc ff ff       	call   c00104ca <EnvVarContainer::getEnv(char const*)>
c00108a1:	83 c4 10             	add    esp,0x10
c00108a4:	85 c0                	test   eax,eax
c00108a6:	75 16                	jne    c00108be <KeGetEnv(Process*, char const*)+0x60>
c00108a8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108ac:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00108b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108b5:	83 c4 08             	add    esp,0x8
c00108b8:	5b                   	pop    ebx
c00108b9:	e9 0c fc ff ff       	jmp    c00104ca <EnvVarContainer::getEnv(char const*)>
c00108be:	83 c4 08             	add    esp,0x8
c00108c1:	5b                   	pop    ebx
c00108c2:	c3                   	ret    

c00108c3 <KeSetEnvSystem(char const*, char const*)>:
c00108c3:	83 ec 10             	sub    esp,0x10
c00108c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ce:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00108d4:	e8 2f fc ff ff       	call   c0010508 <EnvVarContainer::setEnv(char const*, char const*)>
c00108d9:	83 c4 1c             	add    esp,0x1c
c00108dc:	c3                   	ret    

c00108dd <KeSetEnvUser(char const*, char const*)>:
c00108dd:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00108e2:	85 c0                	test   eax,eax
c00108e4:	74 15                	je     c00108fb <KeSetEnvUser(char const*, char const*)+0x1e>
c00108e6:	83 ec 10             	sub    esp,0x10
c00108e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f1:	50                   	push   eax
c00108f2:	e8 11 fc ff ff       	call   c0010508 <EnvVarContainer::setEnv(char const*, char const*)>
c00108f7:	83 c4 1c             	add    esp,0x1c
c00108fa:	c3                   	ret    
c00108fb:	c3                   	ret    

c00108fc <KeSetEnvProcess(Process*, char const*, char const*)>:
c00108fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010900:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010906:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001090a:	e9 f9 fb ff ff       	jmp    c0010508 <EnvVarContainer::setEnv(char const*, char const*)>

c001090f <KeDeleteEnvSystem(char const*)>:
c001090f:	c3                   	ret    

c0010910 <KeDeleteEnvUser(char const*)>:
c0010910:	c3                   	ret    

c0010911 <KeDeleteEnvProcess(Process*, char const*)>:
c0010911:	c3                   	ret    

c0010912 <KeNewProcessEnv(Process*)>:
c0010912:	83 ec 28             	sub    esp,0x28
c0010915:	6a 0c                	push   0xc
c0010917:	e8 af 71 ff ff       	call   c0007acb <malloc>
c001091c:	5a                   	pop    edx
c001091d:	59                   	pop    ecx
c001091e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010922:	50                   	push   eax
c0010923:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010927:	e8 e0 fe ff ff       	call   c001080c <EnvVarContainer::EnvVarContainer(Process*)>
c001092c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010930:	83 c4 2c             	add    esp,0x2c
c0010933:	c3                   	ret    

c0010934 <KeCopyProcessEnv(Process*, Process*)>:
c0010934:	57                   	push   edi
c0010935:	56                   	push   esi
c0010936:	53                   	push   ebx
c0010937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093b:	83 ec 0c             	sub    esp,0xc
c001093e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010944:	6a 0c                	push   0xc
c0010946:	e8 80 71 ff ff       	call   c0007acb <malloc>
c001094b:	89 c3                	mov    ebx,eax
c001094d:	58                   	pop    eax
c001094e:	5a                   	pop    edx
c001094f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010953:	53                   	push   ebx
c0010954:	e8 b3 fe ff ff       	call   c001080c <EnvVarContainer::EnvVarContainer(Process*)>
c0010959:	8b 07                	mov    eax,DWORD PTR [edi]
c001095b:	89 03                	mov    DWORD PTR [ebx],eax
c001095d:	c1 e0 03             	shl    eax,0x3
c0010960:	89 04 24             	mov    DWORD PTR [esp],eax
c0010963:	e8 63 71 ff ff       	call   c0007acb <malloc>
c0010968:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001096b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001096d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010970:	89 c7                	mov    edi,eax
c0010972:	c1 e1 03             	shl    ecx,0x3
c0010975:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 d8                	mov    eax,ebx
c001097c:	5b                   	pop    ebx
c001097d:	5e                   	pop    esi
c001097e:	5f                   	pop    edi
c001097f:	c3                   	ret    

c0010980 <KeLoadSystemEnv()>:
c0010980:	53                   	push   ebx
c0010981:	83 ec 14             	sub    esp,0x14
c0010984:	6a 0c                	push   0xc
c0010986:	e8 40 71 ff ff       	call   c0007acb <malloc>
c001098b:	89 c3                	mov    ebx,eax
c001098d:	58                   	pop    eax
c001098e:	5a                   	pop    edx
c001098f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010995:	53                   	push   ebx
c0010996:	e8 71 fe ff ff       	call   c001080c <EnvVarContainer::EnvVarContainer(Process*)>
c001099b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001099e:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00109a4:	e8 47 fe ff ff       	call   c00107f0 <EnvVarContainer::__loadSystem()>
c00109a9:	83 c4 18             	add    esp,0x18
c00109ac:	5b                   	pop    ebx
c00109ad:	c3                   	ret    

c00109ae <KeLoadUserEnv()>:
c00109ae:	53                   	push   ebx
c00109af:	83 ec 14             	sub    esp,0x14
c00109b2:	6a 0c                	push   0xc
c00109b4:	e8 12 71 ff ff       	call   c0007acb <malloc>
c00109b9:	89 c3                	mov    ebx,eax
c00109bb:	58                   	pop    eax
c00109bc:	5a                   	pop    edx
c00109bd:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00109c3:	53                   	push   ebx
c00109c4:	e8 43 fe ff ff       	call   c001080c <EnvVarContainer::EnvVarContainer(Process*)>
c00109c9:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00109cf:	83 c4 18             	add    esp,0x18
c00109d2:	5b                   	pop    ebx
c00109d3:	c3                   	ret    

c00109d4 <KeFlushEnv()>:
c00109d4:	c3                   	ret    

c00109d5 <KeGetProcessTotalEnvCount(Process*)>:
c00109d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109d9:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00109df:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00109e5:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00109ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00109ec:	03 01                	add    eax,DWORD PTR [ecx]
c00109ee:	85 d2                	test   edx,edx
c00109f0:	74 02                	je     c00109f4 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00109f2:	03 02                	add    eax,DWORD PTR [edx]
c00109f4:	c3                   	ret    

c00109f5 <KeGetProcessEnvPair(Process*, int)>:
c00109f5:	57                   	push   edi
c00109f6:	56                   	push   esi
c00109f7:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00109fd:	53                   	push   ebx
c00109fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a06:	85 f6                	test   esi,esi
c0010a08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a0c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010a12:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010a14:	75 16                	jne    c0010a2c <KeGetProcessEnvPair(Process*, int)+0x37>
c0010a16:	39 c2                	cmp    edx,eax
c0010a18:	7c 16                	jl     c0010a30 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a1a:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010a20:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010a22:	01 c6                	add    esi,eax
c0010a24:	39 d6                	cmp    esi,edx
c0010a26:	7e 3c                	jle    c0010a64 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010a28:	29 c2                	sub    edx,eax
c0010a2a:	eb 04                	jmp    c0010a30 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010a2c:	39 c2                	cmp    edx,eax
c0010a2e:	7d 05                	jge    c0010a35 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010a30:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010a33:	eb 20                	jmp    c0010a55 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010a35:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010a37:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010a3a:	39 d1                	cmp    ecx,edx
c0010a3c:	7e 04                	jle    c0010a42 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010a3e:	29 c2                	sub    edx,eax
c0010a40:	eb 10                	jmp    c0010a52 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010a42:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010a48:	03 0e                	add    ecx,DWORD PTR [esi]
c0010a4a:	39 d1                	cmp    ecx,edx
c0010a4c:	7e 16                	jle    c0010a64 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010a4e:	29 c2                	sub    edx,eax
c0010a50:	29 fa                	sub    edx,edi
c0010a52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010a55:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010a58:	8b 02                	mov    eax,DWORD PTR [edx]
c0010a5a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010a5d:	89 03                	mov    DWORD PTR [ebx],eax
c0010a5f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010a62:	eb 1d                	jmp    c0010a81 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010a64:	83 ec 0c             	sub    esp,0xc
c0010a67:	68 6e 13 02 c0       	push   0xc002136e
c0010a6c:	e8 ac 00 00 00       	call   c0010b1d <KePanic(char const*)>
c0010a71:	83 c4 10             	add    esp,0x10
c0010a74:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010a7a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010a81:	89 d8                	mov    eax,ebx
c0010a83:	5b                   	pop    ebx
c0010a84:	5e                   	pop    esi
c0010a85:	5f                   	pop    edi
c0010a86:	c2 04 00             	ret    0x4

c0010a89 <CPU::current()>:
c0010a89:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010a8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a94:	c3                   	ret    

c0010a95 <operator new(unsigned long)>:
c0010a95:	e9 31 70 ff ff       	jmp    c0007acb <malloc>

c0010a9a <operator delete(void*)>:
c0010a9a:	e9 4c 70 ff ff       	jmp    c0007aeb <rfree>

c0010a9f <disableIRQs()>:
c0010a9f:	fa                   	cli    
c0010aa0:	c3                   	ret    

c0010aa1 <enableIRQs()>:
c0010aa1:	fb                   	sti    
c0010aa2:	c3                   	ret    

c0010aa3 <lockScheduler()>:
c0010aa3:	fa                   	cli    
c0010aa4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010aaa:	c3                   	ret    

c0010aab <unlockScheduler()>:
c0010aab:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010ab0:	48                   	dec    eax
c0010ab1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010ab6:	75 01                	jne    c0010ab9 <unlockScheduler()+0xe>
c0010ab8:	fb                   	sti    
c0010ab9:	c3                   	ret    

c0010aba <lockStuff()>:
c0010aba:	fa                   	cli    
c0010abb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010ac1:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010ac7:	c3                   	ret    

c0010ac8 <unlockStuff()>:
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010ad0:	48                   	dec    eax
c0010ad1:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010ad6:	75 18                	jne    c0010af0 <unlockStuff()+0x28>
c0010ad8:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010adf:	74 0f                	je     c0010af0 <unlockStuff()+0x28>
c0010ae1:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010aeb:	e8 34 48 00 00       	call   c0015324 <schedule()>
c0010af0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010af5:	48                   	dec    eax
c0010af6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010afb:	75 01                	jne    c0010afe <unlockStuff()+0x36>
c0010afd:	fb                   	sti    
c0010afe:	83 c4 0c             	add    esp,0xc
c0010b01:	c3                   	ret    

c0010b02 <Virt::getAKernelVAS()>:
c0010b02:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010b07:	c3                   	ret    

c0010b08 <__not_memcpy>:
c0010b08:	57                   	push   edi
c0010b09:	56                   	push   esi
c0010b0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b16:	89 c7                	mov    edi,eax
c0010b18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b1a:	5e                   	pop    esi
c0010b1b:	5f                   	pop    edi
c0010b1c:	c3                   	ret    

c0010b1d <KePanic(char const*)>:
c0010b1d:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010b24:	e9 8b 67 00 00       	jmp    c00172b4 <HalPanic(char const*)>

c0010b29 <KePowerThread(void*)>:
c0010b29:	83 ec 0c             	sub    esp,0xc
c0010b2c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010b31:	48                   	dec    eax
c0010b32:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010b37:	75 01                	jne    c0010b3a <KePowerThread(void*)+0x11>
c0010b39:	fb                   	sti    
c0010b3a:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010b41:	83 ec 0c             	sub    esp,0xc
c0010b44:	6a 0a                	push   0xa
c0010b46:	e8 09 4b 00 00       	call   c0015654 <sleep(unsigned int)>
c0010b4b:	83 c4 10             	add    esp,0x10
c0010b4e:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010b55:	eb e3                	jmp    c0010b3a <KePowerThread(void*)+0x11>

c0010b57 <KeChangePowerSettings(PowerSettings)>:
c0010b57:	57                   	push   edi
c0010b58:	b9 09 00 00 00       	mov    ecx,0x9
c0010b5d:	56                   	push   esi
c0010b5e:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010b63:	fc                   	cld    
c0010b64:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b6a:	5e                   	pop    esi
c0010b6b:	5f                   	pop    edi
c0010b6c:	c3                   	ret    

c0010b6d <KeUserIOReceived()>:
c0010b6d:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010b77:	c3                   	ret    

c0010b78 <KeHandlePowerButton()>:
c0010b78:	83 ec 0c             	sub    esp,0xc
c0010b7b:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010b80:	83 f8 02             	cmp    eax,0x2
c0010b83:	75 10                	jne    c0010b95 <KeHandlePowerButton()+0x1d>
c0010b85:	83 ec 0c             	sub    esp,0xc
c0010b88:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010b8e:	e8 af 65 ff ff       	call   c0007142 <Computer::shutdown()>
c0010b93:	eb 11                	jmp    c0010ba6 <KeHandlePowerButton()+0x2e>
c0010b95:	48                   	dec    eax
c0010b96:	75 11                	jne    c0010ba9 <KeHandlePowerButton()+0x31>
c0010b98:	83 ec 0c             	sub    esp,0xc
c0010b9b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010ba1:	e8 cc 65 ff ff       	call   c0007172 <Computer::sleep()>
c0010ba6:	83 c4 10             	add    esp,0x10
c0010ba9:	83 c4 0c             	add    esp,0xc
c0010bac:	c3                   	ret    

c0010bad <KeHandleSleepButton()>:
c0010bad:	83 ec 0c             	sub    esp,0xc
c0010bb0:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0010bb5:	83 f8 02             	cmp    eax,0x2
c0010bb8:	75 10                	jne    c0010bca <KeHandleSleepButton()+0x1d>
c0010bba:	83 ec 0c             	sub    esp,0xc
c0010bbd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010bc3:	e8 7a 65 ff ff       	call   c0007142 <Computer::shutdown()>
c0010bc8:	eb 11                	jmp    c0010bdb <KeHandleSleepButton()+0x2e>
c0010bca:	48                   	dec    eax
c0010bcb:	75 11                	jne    c0010bde <KeHandleSleepButton()+0x31>
c0010bcd:	83 ec 0c             	sub    esp,0xc
c0010bd0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010bd6:	e8 97 65 ff ff       	call   c0007172 <Computer::sleep()>
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	83 c4 0c             	add    esp,0xc
c0010be1:	c3                   	ret    

c0010be2 <KeSetupPowerManager()>:
c0010be2:	83 ec 0c             	sub    esp,0xc
c0010be5:	68 f0 00 00 00       	push   0xf0
c0010bea:	6a 00                	push   0x0
c0010bec:	68 29 0b 01 c0       	push   0xc0010b29
c0010bf1:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010bf7:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010c01:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010c08:	e8 cb 44 00 00       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c0010c0d:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010c17:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010c21:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010c2b:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010c35:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010c3f:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010c49:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010c53:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010c5d:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010c67:	83 c4 1c             	add    esp,0x1c
c0010c6a:	c3                   	ret    

c0010c6b <KeRand()>:
c0010c6b:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010c75:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010c7f:	53                   	push   ebx
c0010c80:	01 c1                	add    ecx,eax
c0010c82:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010c87:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010c8d:	01 ca                	add    edx,ecx
c0010c8f:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010c94:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010c99:	83 d2 00             	adc    edx,0x0
c0010c9c:	0f b7 da             	movzx  ebx,dx
c0010c9f:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010ca5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010ca9:	5b                   	pop    ebx
c0010caa:	c3                   	ret    

c0010cab <KeSeedRand(unsigned int)>:
c0010cab:	53                   	push   ebx
c0010cac:	83 ec 08             	sub    esp,0x8
c0010caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb3:	e8 1b 69 00 00       	call   c00175d3 <HalGetRand()>
c0010cb8:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010cc2:	31 d8                	xor    eax,ebx
c0010cc4:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010cc9:	e8 9d ff ff ff       	call   c0010c6b <KeRand()>
c0010cce:	83 c4 08             	add    esp,0x8
c0010cd1:	5b                   	pop    ebx
c0010cd2:	eb 97                	jmp    c0010c6b <KeRand()>

c0010cd4 <KeInitRand()>:
c0010cd4:	83 ec 0c             	sub    esp,0xc
c0010cd7:	e8 ec 66 00 00       	call   c00173c8 <HalQueryPerformanceCounter()>
c0010cdc:	0f 20 da             	mov    edx,cr3
c0010cdf:	0f 22 da             	mov    cr3,edx
c0010ce2:	0f 20 da             	mov    edx,cr3
c0010ce5:	0f 22 da             	mov    cr3,edx
c0010ce8:	0f 20 da             	mov    edx,cr3
c0010ceb:	0f 22 da             	mov    cr3,edx
c0010cee:	0f 20 da             	mov    edx,cr3
c0010cf1:	0f 22 da             	mov    cr3,edx
c0010cf4:	83 ec 0c             	sub    esp,0xc
c0010cf7:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010cfc:	50                   	push   eax
c0010cfd:	e8 a9 ff ff ff       	call   c0010cab <KeSeedRand(unsigned int)>
c0010d02:	83 c4 1c             	add    esp,0x1c
c0010d05:	c3                   	ret    
c0010d06:	66 90                	xchg   ax,ax

c0010d08 <KeResolveCompatibilitySymbol(char*)>:
c0010d08:	83 ec 0c             	sub    esp,0xc
c0010d0b:	83 ec 08             	sub    esp,0x8
c0010d0e:	68 88 13 02 c0       	push   0xc0021388
c0010d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d17:	e8 64 fa fe ff       	call   c0000780 <strcmp>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	85 c0                	test   eax,eax
c0010d21:	0f 94 c0             	sete   al
c0010d24:	0f b6 c0             	movzx  eax,al
c0010d27:	85 c0                	test   eax,eax
c0010d29:	74 0d                	je     c0010d38 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010d2b:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010d30:	e9 8b 01 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010d35:	8d 76 00             	lea    esi,[esi+0x0]
c0010d38:	83 ec 08             	sub    esp,0x8
c0010d3b:	68 91 13 02 c0       	push   0xc0021391
c0010d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d44:	e8 37 fa fe ff       	call   c0000780 <strcmp>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	85 c0                	test   eax,eax
c0010d4e:	0f 94 c0             	sete   al
c0010d51:	0f b6 c0             	movzx  eax,al
c0010d54:	85 c0                	test   eax,eax
c0010d56:	74 0c                	je     c0010d64 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010d58:	b8 70 e9 01 c0       	mov    eax,0xc001e970
c0010d5d:	e9 5e 01 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010d62:	66 90                	xchg   ax,ax
c0010d64:	83 ec 08             	sub    esp,0x8
c0010d67:	68 9b 13 02 c0       	push   0xc002139b
c0010d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d70:	e8 0b fa fe ff       	call   c0000780 <strcmp>
c0010d75:	83 c4 10             	add    esp,0x10
c0010d78:	85 c0                	test   eax,eax
c0010d7a:	0f 94 c0             	sete   al
c0010d7d:	0f b6 c0             	movzx  eax,al
c0010d80:	85 c0                	test   eax,eax
c0010d82:	74 0c                	je     c0010d90 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010d84:	b8 a4 e6 01 c0       	mov    eax,0xc001e6a4
c0010d89:	e9 32 01 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010d8e:	66 90                	xchg   ax,ax
c0010d90:	83 ec 08             	sub    esp,0x8
c0010d93:	68 a4 13 02 c0       	push   0xc00213a4
c0010d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d9c:	e8 df f9 fe ff       	call   c0000780 <strcmp>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	85 c0                	test   eax,eax
c0010da6:	0f 94 c0             	sete   al
c0010da9:	0f b6 c0             	movzx  eax,al
c0010dac:	85 c0                	test   eax,eax
c0010dae:	74 0c                	je     c0010dbc <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010db0:	b8 1d 0b 01 c0       	mov    eax,0xc0010b1d
c0010db5:	e9 06 01 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010dba:	66 90                	xchg   ax,ax
c0010dbc:	83 ec 08             	sub    esp,0x8
c0010dbf:	68 b7 13 02 c0       	push   0xc00213b7
c0010dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc8:	e8 b3 f9 fe ff       	call   c0000780 <strcmp>
c0010dcd:	83 c4 10             	add    esp,0x10
c0010dd0:	85 c0                	test   eax,eax
c0010dd2:	0f 94 c0             	sete   al
c0010dd5:	0f b6 c0             	movzx  eax,al
c0010dd8:	85 c0                	test   eax,eax
c0010dda:	74 0c                	je     c0010de8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010ddc:	b8 47 04 01 c0       	mov    eax,0xc0010447
c0010de1:	e9 da 00 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010de6:	66 90                	xchg   ax,ax
c0010de8:	83 ec 08             	sub    esp,0x8
c0010deb:	68 d4 13 02 c0       	push   0xc00213d4
c0010df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df4:	e8 87 f9 fe ff       	call   c0000780 <strcmp>
c0010df9:	83 c4 10             	add    esp,0x10
c0010dfc:	85 c0                	test   eax,eax
c0010dfe:	0f 94 c0             	sete   al
c0010e01:	0f b6 c0             	movzx  eax,al
c0010e04:	85 c0                	test   eax,eax
c0010e06:	74 0c                	je     c0010e14 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010e08:	b8 70 ea 01 c0       	mov    eax,0xc001ea70
c0010e0d:	e9 ae 00 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e12:	66 90                	xchg   ax,ax
c0010e14:	83 ec 08             	sub    esp,0x8
c0010e17:	68 de 13 02 c0       	push   0xc00213de
c0010e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e20:	e8 5b f9 fe ff       	call   c0000780 <strcmp>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	85 c0                	test   eax,eax
c0010e2a:	0f 94 c0             	sete   al
c0010e2d:	0f b6 c0             	movzx  eax,al
c0010e30:	85 c0                	test   eax,eax
c0010e32:	74 0c                	je     c0010e40 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010e34:	b8 f0 e7 01 c0       	mov    eax,0xc001e7f0
c0010e39:	e9 82 00 00 00       	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e3e:	66 90                	xchg   ax,ax
c0010e40:	83 ec 08             	sub    esp,0x8
c0010e43:	68 e7 13 02 c0       	push   0xc00213e7
c0010e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e4c:	e8 2f f9 fe ff       	call   c0000780 <strcmp>
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	85 c0                	test   eax,eax
c0010e56:	0f 94 c0             	sete   al
c0010e59:	0f b6 c0             	movzx  eax,al
c0010e5c:	85 c0                	test   eax,eax
c0010e5e:	74 08                	je     c0010e68 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010e60:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010e65:	eb 59                	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e67:	90                   	nop
c0010e68:	83 ec 08             	sub    esp,0x8
c0010e6b:	68 ff 13 02 c0       	push   0xc00213ff
c0010e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e74:	e8 07 f9 fe ff       	call   c0000780 <strcmp>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	85 c0                	test   eax,eax
c0010e7e:	0f 94 c0             	sete   al
c0010e81:	0f b6 c0             	movzx  eax,al
c0010e84:	85 c0                	test   eax,eax
c0010e86:	74 08                	je     c0010e90 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010e88:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010e8d:	eb 31                	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e8f:	90                   	nop
c0010e90:	83 ec 08             	sub    esp,0x8
c0010e93:	68 0c 14 02 c0       	push   0xc002140c
c0010e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e9c:	e8 df f8 fe ff       	call   c0000780 <strcmp>
c0010ea1:	83 c4 10             	add    esp,0x10
c0010ea4:	85 c0                	test   eax,eax
c0010ea6:	0f 94 c0             	sete   al
c0010ea9:	0f b6 c0             	movzx  eax,al
c0010eac:	85 c0                	test   eax,eax
c0010eae:	74 08                	je     c0010eb8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010eb0:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010eb5:	eb 09                	jmp    c0010ec0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010eb7:	90                   	nop
c0010eb8:	b8 00 00 00 00       	mov    eax,0x0
c0010ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ec0:	83 c4 0c             	add    esp,0xc
c0010ec3:	c3                   	ret    

c0010ec4 <KiSigKill(int)>:
c0010ec4:	83 ec 0c             	sub    esp,0xc
c0010ec7:	6a 00                	push   0x0
c0010ec9:	6a 00                	push   0x0
c0010ecb:	6a ff                	push   0xffffffff
c0010ecd:	6a 01                	push   0x1
c0010ecf:	e8 7e 21 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ed4:	83 c4 1c             	add    esp,0x1c
c0010ed7:	c3                   	ret    

c0010ed8 <KiDefaultSignalHandlerIgnore(int)>:
c0010ed8:	c3                   	ret    

c0010ed9 <KiDefaultSignalHandlerPause(int)>:
c0010ed9:	57                   	push   edi
c0010eda:	b9 07 00 00 00       	mov    ecx,0x7
c0010edf:	56                   	push   esi
c0010ee0:	be 55 14 02 c0       	mov    esi,0xc0021455
c0010ee5:	83 ec 24             	sub    esp,0x24
c0010ee8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010eec:	fc                   	cld    
c0010eed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010eef:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010ef3:	50                   	push   eax
c0010ef4:	6a 00                	push   0x0
c0010ef6:	6a 00                	push   0x0
c0010ef8:	6a 27                	push   0x27
c0010efa:	e8 53 21 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010eff:	83 c4 34             	add    esp,0x34
c0010f02:	5e                   	pop    esi
c0010f03:	5f                   	pop    edi
c0010f04:	c3                   	ret    

c0010f05 <KiDefaultSignalHandlerResume(int)>:
c0010f05:	57                   	push   edi
c0010f06:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010f0b:	56                   	push   esi
c0010f0c:	be 71 14 02 c0       	mov    esi,0xc0021471
c0010f11:	83 ec 24             	sub    esp,0x24
c0010f14:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010f18:	fc                   	cld    
c0010f19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f1b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010f1f:	50                   	push   eax
c0010f20:	6a 00                	push   0x0
c0010f22:	6a 00                	push   0x0
c0010f24:	6a 27                	push   0x27
c0010f26:	e8 27 21 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f2b:	83 c4 34             	add    esp,0x34
c0010f2e:	5e                   	pop    esi
c0010f2f:	5f                   	pop    edi
c0010f30:	c3                   	ret    

c0010f31 <KeDeinitSignals(SigHandlerBlock*)>:
c0010f31:	e9 a5 6b ff ff       	jmp    c0007adb <free>

c0010f36 <KeInitSignals()>:
c0010f36:	53                   	push   ebx
c0010f37:	83 ec 14             	sub    esp,0x14
c0010f3a:	68 c8 00 00 00       	push   0xc8
c0010f3f:	e8 87 6b ff ff       	call   c0007acb <malloc>
c0010f44:	83 c4 0c             	add    esp,0xc
c0010f47:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010f51:	89 c3                	mov    ebx,eax
c0010f53:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010f5d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010f63:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0010f67:	6a 20                	push   0x20
c0010f69:	6a 00                	push   0x0
c0010f6b:	50                   	push   eax
c0010f6c:	e8 7f f5 fe ff       	call   c00004f0 <memset>
c0010f71:	83 c4 0c             	add    esp,0xc
c0010f74:	6a 44                	push   0x44
c0010f76:	6a 00                	push   0x0
c0010f78:	53                   	push   ebx
c0010f79:	e8 72 f5 fe ff       	call   c00004f0 <memset>
c0010f7e:	83 c4 18             	add    esp,0x18
c0010f81:	89 d8                	mov    eax,ebx
c0010f83:	5b                   	pop    ebx
c0010f84:	c3                   	ret    

c0010f85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010f85:	53                   	push   ebx
c0010f86:	b8 01 00 00 00       	mov    eax,0x1
c0010f8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f93:	83 f9 10             	cmp    ecx,0x10
c0010f96:	7f 21                	jg     c0010fb9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010f9f:	89 03                	mov    DWORD PTR [ebx],eax
c0010fa1:	b8 01 00 00 00       	mov    eax,0x1
c0010fa6:	d3 e0                	shl    eax,cl
c0010fa8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010fac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010faf:	31 c0                	xor    eax,eax
c0010fb1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010fb9:	5b                   	pop    ebx
c0010fba:	c3                   	ret    

c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010fbb:	55                   	push   ebp
c0010fbc:	57                   	push   edi
c0010fbd:	bf 08 00 00 00       	mov    edi,0x8
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	83 ec 18             	sub    esp,0x18
c0010fc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010fcb:	68 8e 14 02 c0       	push   0xc002148e
c0010fd0:	e8 29 99 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0010fd5:	83 c4 10             	add    esp,0x10
c0010fd8:	31 c9                	xor    ecx,ecx
c0010fda:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fe1:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010fe7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010feb:	99                   	cdq    
c0010fec:	f7 ff                	idiv   edi
c0010fee:	8d 42 24             	lea    eax,[edx+0x24]
c0010ff1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010ff5:	85 f6                	test   esi,esi
c0010ff7:	75 1a                	jne    c0011013 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010ff9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010ffd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011001:	50                   	push   eax
c0011002:	50                   	push   eax
c0011003:	52                   	push   edx
c0011004:	68 9f 14 02 c0       	push   0xc002149f
c0011009:	e8 f0 98 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001100e:	83 c4 10             	add    esp,0x10
c0011011:	eb 1b                	jmp    c001102e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011013:	41                   	inc    ecx
c0011014:	83 f9 08             	cmp    ecx,0x8
c0011017:	75 ce                	jne    c0010fe7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011019:	83 ec 0c             	sub    esp,0xc
c001101c:	be 01 00 00 00       	mov    esi,0x1
c0011021:	68 c0 14 02 c0       	push   0xc00214c0
c0011026:	e8 d3 98 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	83 c4 0c             	add    esp,0xc
c0011031:	89 f0                	mov    eax,esi
c0011033:	5b                   	pop    ebx
c0011034:	5e                   	pop    esi
c0011035:	5f                   	pop    edi
c0011036:	5d                   	pop    ebp
c0011037:	c3                   	ret    

c0011038 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011038:	55                   	push   ebp
c0011039:	57                   	push   edi
c001103a:	56                   	push   esi
c001103b:	53                   	push   ebx
c001103c:	51                   	push   ecx
c001103d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011041:	85 db                	test   ebx,ebx
c0011043:	0f 84 bc 00 00 00    	je     c0011105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011049:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011050:	0f 84 af 00 00 00    	je     c0011105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011056:	31 c9                	xor    ecx,ecx
c0011058:	bf 08 00 00 00       	mov    edi,0x8
c001105d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011063:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011066:	99                   	cdq    
c0011067:	f7 ff                	idiv   edi
c0011069:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011070:	85 ed                	test   ebp,ebp
c0011072:	0f 84 9e 00 00 00    	je     c0011116 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011078:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001107e:	89 e9                	mov    ecx,ebp
c0011080:	bf 01 00 00 00       	mov    edi,0x1
c0011085:	d3 e7                	shl    edi,cl
c0011087:	31 c9                	xor    ecx,ecx
c0011089:	89 04 24             	mov    DWORD PTR [esp],eax
c001108c:	b8 01 00 00 00       	mov    eax,0x1
c0011091:	d3 e0                	shl    eax,cl
c0011093:	85 04 24             	test   DWORD PTR [esp],eax
c0011096:	74 06                	je     c001109e <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011098:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001109c:	75 67                	jne    c0011105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001109e:	41                   	inc    ecx
c001109f:	83 f9 11             	cmp    ecx,0x11
c00110a2:	75 e8                	jne    c001108c <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00110a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00110a7:	46                   	inc    esi
c00110a8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110ae:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00110b9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110c0:	09 f8                	or     eax,edi
c00110c2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00110c8:	31 c0                	xor    eax,eax
c00110ca:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00110d2:	74 09                	je     c00110dd <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00110d4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110db:	eb 06                	jmp    c00110e3 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00110dd:	40                   	inc    eax
c00110de:	83 f8 08             	cmp    eax,0x8
c00110e1:	75 e7                	jne    c00110ca <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00110e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00110e7:	83 fd 09             	cmp    ebp,0x9
c00110ea:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00110ed:	89 2a                	mov    DWORD PTR [edx],ebp
c00110ef:	75 07                	jne    c00110f8 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00110f1:	b8 c4 0e 01 c0       	mov    eax,0xc0010ec4
c00110f6:	eb 31                	jmp    c0011129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00110f8:	83 f8 01             	cmp    eax,0x1
c00110fb:	75 0c                	jne    c0011109 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00110fd:	f7 d7                	not    edi
c00110ff:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011105:	31 c0                	xor    eax,eax
c0011107:	eb 20                	jmp    c0011129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011109:	85 c0                	test   eax,eax
c001110b:	75 1c                	jne    c0011129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001110d:	8b 04 ad c0 28 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd740]
c0011114:	eb 13                	jmp    c0011129 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011116:	41                   	inc    ecx
c0011117:	46                   	inc    esi
c0011118:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001111e:	83 f9 08             	cmp    ecx,0x8
c0011121:	0f 85 36 ff ff ff    	jne    c001105d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011127:	eb dc                	jmp    c0011105 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011129:	5a                   	pop    edx
c001112a:	5b                   	pop    ebx
c001112b:	5e                   	pop    esi
c001112c:	5f                   	pop    edi
c001112d:	5d                   	pop    ebp
c001112e:	c3                   	ret    

c001112f <KiCheckSignalZ>:
c001112f:	83 ec 10             	sub    esp,0x10
c0011132:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011136:	50                   	push   eax
c0011137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001113c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001113f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011145:	e8 ee fe ff ff       	call   c0011038 <KeCheckSignal(SigHandlerBlock*, int*)>
c001114a:	5a                   	pop    edx
c001114b:	31 d2                	xor    edx,edx
c001114d:	59                   	pop    ecx
c001114e:	85 c0                	test   eax,eax
c0011150:	74 19                	je     c001116b <KiCheckSignalZ+0x3c>
c0011152:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011158:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001115b:	89 02                	mov    DWORD PTR [edx],eax
c001115d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011168:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001116b:	89 d0                	mov    eax,edx
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	c3                   	ret    

c0011171 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011171:	56                   	push   esi
c0011172:	53                   	push   ebx
c0011173:	bb 01 00 00 00       	mov    ebx,0x1
c0011178:	52                   	push   edx
c0011179:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001117d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011181:	d3 e3                	shl    ebx,cl
c0011183:	83 f9 10             	cmp    ecx,0x10
c0011186:	7f 08                	jg     c0011190 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011188:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001118e:	75 10                	jne    c00111a0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011190:	83 ec 0c             	sub    esp,0xc
c0011193:	68 d1 14 02 c0       	push   0xc00214d1
c0011198:	e8 80 f9 ff ff       	call   c0010b1d <KePanic(char const*)>
c001119d:	83 c4 10             	add    esp,0x10
c00111a0:	f7 d3                	not    ebx
c00111a2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111a8:	58                   	pop    eax
c00111a9:	5b                   	pop    ebx
c00111aa:	5e                   	pop    esi
c00111ab:	c3                   	ret    

c00111ac <KiFinishSignalZ>:
c00111ac:	53                   	push   ebx
c00111ad:	83 ec 10             	sub    esp,0x10
c00111b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00111b4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00111b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111bf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00111c5:	e8 a7 ff ff ff       	call   c0011171 <KeCompleteSignal(SigHandlerBlock*, int)>
c00111ca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111d0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111d7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00111de:	83 c4 18             	add    esp,0x18
c00111e1:	5b                   	pop    ebx
c00111e2:	c3                   	ret    

c00111e3 <SysSeekDir(regs*)>:
c00111e3:	31 c0                	xor    eax,eax
c00111e5:	31 d2                	xor    edx,edx
c00111e7:	c3                   	ret    

c00111e8 <SysTellDir(regs*)>:
c00111e8:	31 c0                	xor    eax,eax
c00111ea:	31 d2                	xor    edx,edx
c00111ec:	c3                   	ret    

c00111ed <SysVerify(regs*)>:
c00111ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f1:	31 d2                	xor    edx,edx
c00111f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111f6:	c3                   	ret    

c00111f7 <SysGetArgc(regs*)>:
c00111f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ff:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011205:	89 c2                	mov    edx,eax
c0011207:	c1 fa 1f             	sar    edx,0x1f
c001120a:	c3                   	ret    

c001120b <SysTTYName(regs*)>:
c001120b:	b8 01 00 00 00       	mov    eax,0x1
c0011210:	31 d2                	xor    edx,edx
c0011212:	c3                   	ret    

c0011213 <SysFormatDisk(regs*)>:
c0011213:	56                   	push   esi
c0011214:	53                   	push   ebx
c0011215:	83 ec 04             	sub    esp,0x4
c0011218:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001121c:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0011222:	eb 2a                	jmp    c001124e <SysFormatDisk(regs*)+0x3b>
c0011224:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011227:	83 ec 0c             	sub    esp,0xc
c001122a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001122d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001122f:	51                   	push   ecx
c0011230:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011233:	51                   	push   ecx
c0011234:	50                   	push   eax
c0011235:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001123c:	50                   	push   eax
c001123d:	53                   	push   ebx
c001123e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011241:	83 c4 20             	add    esp,0x20
c0011244:	83 f8 08             	cmp    eax,0x8
c0011247:	89 c1                	mov    ecx,eax
c0011249:	75 14                	jne    c001125f <SysFormatDisk(regs*)+0x4c>
c001124b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001124e:	85 db                	test   ebx,ebx
c0011250:	75 d2                	jne    c0011224 <SysFormatDisk(regs*)+0x11>
c0011252:	b8 03 00 00 00       	mov    eax,0x3
c0011257:	31 d2                	xor    edx,edx
c0011259:	83 c4 04             	add    esp,0x4
c001125c:	5b                   	pop    ebx
c001125d:	5e                   	pop    esi
c001125e:	c3                   	ret    
c001125f:	85 c0                	test   eax,eax
c0011261:	74 13                	je     c0011276 <SysFormatDisk(regs*)+0x63>
c0011263:	31 d2                	xor    edx,edx
c0011265:	83 f9 09             	cmp    ecx,0x9
c0011268:	b8 01 00 00 00       	mov    eax,0x1
c001126d:	74 ea                	je     c0011259 <SysFormatDisk(regs*)+0x46>
c001126f:	b8 02 00 00 00       	mov    eax,0x2
c0011274:	eb e1                	jmp    c0011257 <SysFormatDisk(regs*)+0x44>
c0011276:	31 c0                	xor    eax,eax
c0011278:	eb dd                	jmp    c0011257 <SysFormatDisk(regs*)+0x44>

c001127a <SysSetDiskVolumeLabel(regs*)>:
c001127a:	56                   	push   esi
c001127b:	53                   	push   ebx
c001127c:	83 ec 04             	sub    esp,0x4
c001127f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011283:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011286:	83 f8 19             	cmp    eax,0x19
c0011289:	77 33                	ja     c00112be <SysSetDiskVolumeLabel(regs*)+0x44>
c001128b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0011292:	85 c9                	test   ecx,ecx
c0011294:	74 28                	je     c00112be <SysSetDiskVolumeLabel(regs*)+0x44>
c0011296:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011299:	85 db                	test   ebx,ebx
c001129b:	74 21                	je     c00112be <SysSetDiskVolumeLabel(regs*)+0x44>
c001129d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00112a3:	85 d2                	test   edx,edx
c00112a5:	74 17                	je     c00112be <SysSetDiskVolumeLabel(regs*)+0x44>
c00112a7:	8b 32                	mov    esi,DWORD PTR [edx]
c00112a9:	53                   	push   ebx
c00112aa:	50                   	push   eax
c00112ab:	51                   	push   ecx
c00112ac:	52                   	push   edx
c00112ad:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	83 c4 04             	add    esp,0x4
c00112b6:	5b                   	pop    ebx
c00112b7:	5e                   	pop    esi
c00112b8:	89 c2                	mov    edx,eax
c00112ba:	c1 fa 1f             	sar    edx,0x1f
c00112bd:	c3                   	ret    
c00112be:	83 c4 04             	add    esp,0x4
c00112c1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00112c6:	5b                   	pop    ebx
c00112c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112cc:	5e                   	pop    esi
c00112cd:	c3                   	ret    

c00112ce <SysGetDiskVolumeLabel(regs*)>:
c00112ce:	57                   	push   edi
c00112cf:	56                   	push   esi
c00112d0:	53                   	push   ebx
c00112d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00112d8:	83 fa 19             	cmp    edx,0x19
c00112db:	77 3c                	ja     c0011319 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112dd:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c00112e4:	85 c9                	test   ecx,ecx
c00112e6:	74 31                	je     c0011319 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112e8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00112eb:	85 db                	test   ebx,ebx
c00112ed:	74 2a                	je     c0011319 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112ef:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00112f2:	85 f6                	test   esi,esi
c00112f4:	74 23                	je     c0011319 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00112f6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00112fc:	85 c0                	test   eax,eax
c00112fe:	74 19                	je     c0011319 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011300:	83 ec 0c             	sub    esp,0xc
c0011303:	8b 38                	mov    edi,DWORD PTR [eax]
c0011305:	56                   	push   esi
c0011306:	53                   	push   ebx
c0011307:	52                   	push   edx
c0011308:	51                   	push   ecx
c0011309:	50                   	push   eax
c001130a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001130d:	83 c4 20             	add    esp,0x20
c0011310:	5b                   	pop    ebx
c0011311:	5e                   	pop    esi
c0011312:	89 c2                	mov    edx,eax
c0011314:	c1 fa 1f             	sar    edx,0x1f
c0011317:	5f                   	pop    edi
c0011318:	c3                   	ret    
c0011319:	5b                   	pop    ebx
c001131a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001131f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011324:	5e                   	pop    esi
c0011325:	5f                   	pop    edi
c0011326:	c3                   	ret    

c0011327 <SysShutdown(regs*)>:
c0011327:	57                   	push   edi
c0011328:	56                   	push   esi
c0011329:	83 ec 04             	sub    esp,0x4
c001132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011330:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011333:	85 c0                	test   eax,eax
c0011335:	74 1e                	je     c0011355 <SysShutdown(regs*)+0x2e>
c0011337:	83 f8 01             	cmp    eax,0x1
c001133a:	74 5f                	je     c001139b <SysShutdown(regs*)+0x74>
c001133c:	83 f8 02             	cmp    eax,0x2
c001133f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011344:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011349:	74 32                	je     c001137d <SysShutdown(regs*)+0x56>
c001134b:	83 c4 04             	add    esp,0x4
c001134e:	89 f0                	mov    eax,esi
c0011350:	5e                   	pop    esi
c0011351:	89 fa                	mov    edx,edi
c0011353:	5f                   	pop    edi
c0011354:	c3                   	ret    
c0011355:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001135a:	be ff ff ff ff       	mov    esi,0xffffffff
c001135f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011364:	8b 10                	mov    edx,DWORD PTR [eax]
c0011366:	6a 00                	push   0x0
c0011368:	6a 00                	push   0x0
c001136a:	6a 00                	push   0x0
c001136c:	50                   	push   eax
c001136d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	89 f0                	mov    eax,esi
c0011375:	83 c4 04             	add    esp,0x4
c0011378:	89 fa                	mov    edx,edi
c001137a:	5e                   	pop    esi
c001137b:	5f                   	pop    edi
c001137c:	c3                   	ret    
c001137d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011382:	8b 10                	mov    edx,DWORD PTR [eax]
c0011384:	6a 00                	push   0x0
c0011386:	6a 00                	push   0x0
c0011388:	6a 01                	push   0x1
c001138a:	50                   	push   eax
c001138b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	89 f0                	mov    eax,esi
c0011393:	83 c4 04             	add    esp,0x4
c0011396:	89 fa                	mov    edx,edi
c0011398:	5e                   	pop    esi
c0011399:	5f                   	pop    edi
c001139a:	c3                   	ret    
c001139b:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00113a0:	85 c0                	test   eax,eax
c00113a2:	74 02                	je     c00113a6 <SysShutdown(regs*)+0x7f>
c00113a4:	ff d0                	call   eax
c00113a6:	31 f6                	xor    esi,esi
c00113a8:	83 c4 04             	add    esp,0x4
c00113ab:	89 f0                	mov    eax,esi
c00113ad:	31 ff                	xor    edi,edi
c00113af:	5e                   	pop    esi
c00113b0:	89 fa                	mov    edx,edi
c00113b2:	5f                   	pop    edi
c00113b3:	c3                   	ret    

c00113b4 <SysRealpath(regs*)>:
c00113b4:	53                   	push   ebx
c00113b5:	83 ec 08             	sub    esp,0x8
c00113b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113bc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00113bf:	85 c9                	test   ecx,ecx
c00113c1:	74 37                	je     c00113fa <SysRealpath(regs*)+0x46>
c00113c3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113c6:	31 d2                	xor    edx,edx
c00113c8:	b8 01 00 00 00       	mov    eax,0x1
c00113cd:	85 db                	test   ebx,ebx
c00113cf:	75 05                	jne    c00113d6 <SysRealpath(regs*)+0x22>
c00113d1:	83 c4 08             	add    esp,0x8
c00113d4:	5b                   	pop    ebx
c00113d5:	c3                   	ret    
c00113d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113db:	83 ec 04             	sub    esp,0x4
c00113de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113e1:	05 0c 01 00 00       	add    eax,0x10c
c00113e6:	50                   	push   eax
c00113e7:	51                   	push   ecx
c00113e8:	53                   	push   ebx
c00113e9:	e8 b0 9b ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	31 c0                	xor    eax,eax
c00113f3:	31 d2                	xor    edx,edx
c00113f5:	83 c4 08             	add    esp,0x8
c00113f8:	5b                   	pop    ebx
c00113f9:	c3                   	ret    
c00113fa:	b8 01 00 00 00       	mov    eax,0x1
c00113ff:	31 d2                	xor    edx,edx
c0011401:	eb f2                	jmp    c00113f5 <SysRealpath(regs*)+0x41>

c0011403 <SysReadDir(regs*)>:
c0011403:	53                   	push   ebx
c0011404:	83 ec 18             	sub    esp,0x18
c0011407:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001140b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001140e:	83 f8 02             	cmp    eax,0x2
c0011411:	76 4f                	jbe    c0011462 <SysReadDir(regs*)+0x5f>
c0011413:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001141a:	77 52                	ja     c001146e <SysReadDir(regs*)+0x6b>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	50                   	push   eax
c0011420:	e8 6a 80 ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	85 c0                	test   eax,eax
c001142a:	74 42                	je     c001146e <SysReadDir(regs*)+0x6b>
c001142c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011434:	83 ec 0c             	sub    esp,0xc
c0011437:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001143b:	8b 10                	mov    edx,DWORD PTR [eax]
c001143d:	51                   	push   ecx
c001143e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011441:	51                   	push   ecx
c0011442:	6a 00                	push   0x0
c0011444:	68 10 01 00 00       	push   0x110
c0011449:	50                   	push   eax
c001144a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001144d:	83 c4 20             	add    esp,0x20
c0011450:	85 c0                	test   eax,eax
c0011452:	89 c1                	mov    ecx,eax
c0011454:	74 27                	je     c001147d <SysReadDir(regs*)+0x7a>
c0011456:	31 d2                	xor    edx,edx
c0011458:	83 f9 07             	cmp    ecx,0x7
c001145b:	b8 02 00 00 00       	mov    eax,0x2
c0011460:	75 16                	jne    c0011478 <SysReadDir(regs*)+0x75>
c0011462:	b8 01 00 00 00       	mov    eax,0x1
c0011467:	31 d2                	xor    edx,edx
c0011469:	83 c4 18             	add    esp,0x18
c001146c:	5b                   	pop    ebx
c001146d:	c3                   	ret    
c001146e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011473:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011478:	83 c4 18             	add    esp,0x18
c001147b:	5b                   	pop    ebx
c001147c:	c3                   	ret    
c001147d:	31 c0                	xor    eax,eax
c001147f:	31 d2                	xor    edx,edx
c0011481:	eb e6                	jmp    c0011469 <SysReadDir(regs*)+0x66>

c0011483 <SysIsATTY(regs*)>:
c0011483:	83 ec 0c             	sub    esp,0xc
c0011486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001148a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001148d:	83 f8 02             	cmp    eax,0x2
c0011490:	76 07                	jbe    c0011499 <SysIsATTY(regs*)+0x16>
c0011492:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011497:	75 26                	jne    c00114bf <SysIsATTY(regs*)+0x3c>
c0011499:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001149e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00114a7:	85 c0                	test   eax,eax
c00114a9:	74 24                	je     c00114cf <SysIsATTY(regs*)+0x4c>
c00114ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00114ad:	83 ec 0c             	sub    esp,0xc
c00114b0:	50                   	push   eax
c00114b1:	ff 12                	call   DWORD PTR [edx]
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	31 d2                	xor    edx,edx
c00114b8:	83 c4 0c             	add    esp,0xc
c00114bb:	0f b6 c0             	movzx  eax,al
c00114be:	c3                   	ret    
c00114bf:	83 ec 0c             	sub    esp,0xc
c00114c2:	50                   	push   eax
c00114c3:	e8 c7 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00114c8:	83 c4 10             	add    esp,0x10
c00114cb:	85 c0                	test   eax,eax
c00114cd:	75 dc                	jne    c00114ab <SysIsATTY(regs*)+0x28>
c00114cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114d9:	83 c4 0c             	add    esp,0xc
c00114dc:	c3                   	ret    

c00114dd <SysSeek(regs*)>:
c00114dd:	56                   	push   esi
c00114de:	53                   	push   ebx
c00114df:	83 ec 04             	sub    esp,0x4
c00114e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114e6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00114e9:	8d 71 fd             	lea    esi,[ecx-0x3]
c00114ec:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00114f2:	77 33                	ja     c0011527 <SysSeek(regs*)+0x4a>
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	51                   	push   ecx
c00114f8:	e8 92 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00114fd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011500:	83 c4 0c             	add    esp,0xc
c0011503:	31 db                	xor    ebx,ebx
c0011505:	53                   	push   ebx
c0011506:	51                   	push   ecx
c0011507:	50                   	push   eax
c0011508:	e8 e7 9d ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001150d:	83 c4 10             	add    esp,0x10
c0011510:	85 c0                	test   eax,eax
c0011512:	0f 95 c0             	setne  al
c0011515:	31 d2                	xor    edx,edx
c0011517:	0f b6 c0             	movzx  eax,al
c001151a:	f7 d8                	neg    eax
c001151c:	83 d2 00             	adc    edx,0x0
c001151f:	83 c4 04             	add    esp,0x4
c0011522:	5b                   	pop    ebx
c0011523:	f7 da                	neg    edx
c0011525:	5e                   	pop    esi
c0011526:	c3                   	ret    
c0011527:	83 c4 04             	add    esp,0x4
c001152a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001152f:	5b                   	pop    ebx
c0011530:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011535:	5e                   	pop    esi
c0011536:	c3                   	ret    

c0011537 <SysTell(regs*)>:
c0011537:	53                   	push   ebx
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001153f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011542:	83 f8 02             	cmp    eax,0x2
c0011545:	76 4e                	jbe    c0011595 <SysTell(regs*)+0x5e>
c0011547:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001154c:	76 19                	jbe    c0011567 <SysTell(regs*)+0x30>
c001154e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011551:	31 d2                	xor    edx,edx
c0011553:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011559:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011560:	83 c4 08             	add    esp,0x8
c0011563:	31 c0                	xor    eax,eax
c0011565:	5b                   	pop    ebx
c0011566:	c3                   	ret    
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	50                   	push   eax
c001156b:	e8 1f 7f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011570:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011573:	5a                   	pop    edx
c0011574:	59                   	pop    ecx
c0011575:	53                   	push   ebx
c0011576:	50                   	push   eax
c0011577:	e8 ce 9d ff ff       	call   c000b34a <File::tell(unsigned long long*)>
c001157c:	83 c4 10             	add    esp,0x10
c001157f:	85 c0                	test   eax,eax
c0011581:	0f 95 c0             	setne  al
c0011584:	31 d2                	xor    edx,edx
c0011586:	0f b6 c0             	movzx  eax,al
c0011589:	f7 d8                	neg    eax
c001158b:	83 d2 00             	adc    edx,0x0
c001158e:	83 c4 08             	add    esp,0x8
c0011591:	5b                   	pop    ebx
c0011592:	f7 da                	neg    edx
c0011594:	c3                   	ret    
c0011595:	83 c4 08             	add    esp,0x8
c0011598:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001159d:	5b                   	pop    ebx
c001159e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a3:	c3                   	ret    

c00115a4 <SysSize(regs*)>:
c00115a4:	53                   	push   ebx
c00115a5:	83 ec 18             	sub    esp,0x18
c00115a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115af:	83 f8 02             	cmp    eax,0x2
c00115b2:	76 54                	jbe    c0011608 <SysSize(regs*)+0x64>
c00115b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115b9:	76 19                	jbe    c00115d4 <SysSize(regs*)+0x30>
c00115bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115be:	31 d2                	xor    edx,edx
c00115c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115cd:	83 c4 18             	add    esp,0x18
c00115d0:	31 c0                	xor    eax,eax
c00115d2:	5b                   	pop    ebx
c00115d3:	c3                   	ret    
c00115d4:	83 ec 0c             	sub    esp,0xc
c00115d7:	50                   	push   eax
c00115d8:	e8 b2 7e ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00115dd:	83 c4 0c             	add    esp,0xc
c00115e0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00115e4:	52                   	push   edx
c00115e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00115e8:	52                   	push   edx
c00115e9:	50                   	push   eax
c00115ea:	e8 f3 9e ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	85 c0                	test   eax,eax
c00115f4:	0f 95 c0             	setne  al
c00115f7:	31 d2                	xor    edx,edx
c00115f9:	0f b6 c0             	movzx  eax,al
c00115fc:	f7 d8                	neg    eax
c00115fe:	83 d2 00             	adc    edx,0x0
c0011601:	83 c4 18             	add    esp,0x18
c0011604:	5b                   	pop    ebx
c0011605:	f7 da                	neg    edx
c0011607:	c3                   	ret    
c0011608:	83 c4 18             	add    esp,0x18
c001160b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011610:	5b                   	pop    ebx
c0011611:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011616:	c3                   	ret    

c0011617 <SysSizeFromFilename(regs*)>:
c0011617:	57                   	push   edi
c0011618:	56                   	push   esi
c0011619:	53                   	push   ebx
c001161a:	83 ec 10             	sub    esp,0x10
c001161d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011621:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011624:	83 fb 02             	cmp    ebx,0x2
c0011627:	0f 86 83 00 00 00    	jbe    c00116b0 <SysSizeFromFilename(regs*)+0x99>
c001162d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011633:	76 1b                	jbe    c0011650 <SysSizeFromFilename(regs*)+0x39>
c0011635:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011638:	31 d2                	xor    edx,edx
c001163a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011640:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011647:	83 c4 10             	add    esp,0x10
c001164a:	31 c0                	xor    eax,eax
c001164c:	5b                   	pop    ebx
c001164d:	5e                   	pop    esi
c001164e:	5f                   	pop    edi
c001164f:	c3                   	ret    
c0011650:	83 ec 0c             	sub    esp,0xc
c0011653:	68 14 01 00 00       	push   0x114
c0011658:	e8 6e 64 ff ff       	call   c0007acb <malloc>
c001165d:	83 c4 0c             	add    esp,0xc
c0011660:	89 c7                	mov    edi,eax
c0011662:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011667:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001166a:	50                   	push   eax
c001166b:	53                   	push   ebx
c001166c:	57                   	push   edi
c001166d:	e8 08 9b ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011672:	83 c4 0c             	add    esp,0xc
c0011675:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011679:	50                   	push   eax
c001167a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001167d:	52                   	push   edx
c001167e:	57                   	push   edi
c001167f:	e8 5e 9e ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	85 ff                	test   edi,edi
c0011689:	89 c3                	mov    ebx,eax
c001168b:	74 0c                	je     c0011699 <SysSizeFromFilename(regs*)+0x82>
c001168d:	8b 07                	mov    eax,DWORD PTR [edi]
c001168f:	83 ec 0c             	sub    esp,0xc
c0011692:	57                   	push   edi
c0011693:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	31 c0                	xor    eax,eax
c001169b:	85 db                	test   ebx,ebx
c001169d:	0f 95 c0             	setne  al
c00116a0:	31 d2                	xor    edx,edx
c00116a2:	f7 d8                	neg    eax
c00116a4:	83 d2 00             	adc    edx,0x0
c00116a7:	83 c4 10             	add    esp,0x10
c00116aa:	5b                   	pop    ebx
c00116ab:	f7 da                	neg    edx
c00116ad:	5e                   	pop    esi
c00116ae:	5f                   	pop    edi
c00116af:	c3                   	ret    
c00116b0:	83 c4 10             	add    esp,0x10
c00116b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116b8:	5b                   	pop    ebx
c00116b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116be:	5e                   	pop    esi
c00116bf:	5f                   	pop    edi
c00116c0:	c3                   	ret    

c00116c1 <SysClose(regs*)>:
c00116c1:	53                   	push   ebx
c00116c2:	83 ec 08             	sub    esp,0x8
c00116c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116cc:	83 f8 02             	cmp    eax,0x2
c00116cf:	76 41                	jbe    c0011712 <SysClose(regs*)+0x51>
c00116d1:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00116d7:	83 fa 01             	cmp    edx,0x1
c00116da:	76 2d                	jbe    c0011709 <SysClose(regs*)+0x48>
c00116dc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116e1:	77 2f                	ja     c0011712 <SysClose(regs*)+0x51>
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	50                   	push   eax
c00116e7:	e8 a3 7d ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00116ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00116ef:	89 c3                	mov    ebx,eax
c00116f1:	e8 9e 9b ff ff       	call   c000b294 <File::close()>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	85 db                	test   ebx,ebx
c00116fb:	74 0c                	je     c0011709 <SysClose(regs*)+0x48>
c00116fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116ff:	83 ec 0c             	sub    esp,0xc
c0011702:	53                   	push   ebx
c0011703:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	83 c4 08             	add    esp,0x8
c001170c:	31 c0                	xor    eax,eax
c001170e:	5b                   	pop    ebx
c001170f:	31 d2                	xor    edx,edx
c0011711:	c3                   	ret    
c0011712:	83 c4 08             	add    esp,0x8
c0011715:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001171a:	5b                   	pop    ebx
c001171b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011720:	c3                   	ret    

c0011721 <SysOpenDir(regs*)>:
c0011721:	56                   	push   esi
c0011722:	53                   	push   ebx
c0011723:	83 ec 04             	sub    esp,0x4
c0011726:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001172a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001172d:	85 c9                	test   ecx,ecx
c001172f:	74 5d                	je     c001178e <SysOpenDir(regs*)+0x6d>
c0011731:	83 ec 0c             	sub    esp,0xc
c0011734:	68 14 01 00 00       	push   0x114
c0011739:	e8 8d 63 ff ff       	call   c0007acb <malloc>
c001173e:	83 c4 0c             	add    esp,0xc
c0011741:	89 c6                	mov    esi,eax
c0011743:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011748:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001174b:	50                   	push   eax
c001174c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001174f:	52                   	push   edx
c0011750:	56                   	push   esi
c0011751:	e8 4a 9f ff ff       	call   c000b6a0 <Directory::Directory(char const*, Process*)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	85 f6                	test   esi,esi
c001175b:	74 31                	je     c001178e <SysOpenDir(regs*)+0x6d>
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	56                   	push   esi
c0011761:	e8 f6 9f ff ff       	call   c000b75c <Directory::open()>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	85 c0                	test   eax,eax
c001176b:	75 21                	jne    c001178e <SysOpenDir(regs*)+0x6d>
c001176d:	83 ec 0c             	sub    esp,0xc
c0011770:	56                   	push   esi
c0011771:	e8 1c 7a ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011776:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	89 02                	mov    DWORD PTR [edx],eax
c001177e:	c1 f8 1f             	sar    eax,0x1f
c0011781:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011784:	83 c4 04             	add    esp,0x4
c0011787:	31 c0                	xor    eax,eax
c0011789:	5b                   	pop    ebx
c001178a:	31 d2                	xor    edx,edx
c001178c:	5e                   	pop    esi
c001178d:	c3                   	ret    
c001178e:	83 c4 04             	add    esp,0x4
c0011791:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011796:	5b                   	pop    ebx
c0011797:	ba ff ff ff ff       	mov    edx,0xffffffff
c001179c:	5e                   	pop    esi
c001179d:	c3                   	ret    

c001179e <SysMakeDir(regs*)>:
c001179e:	56                   	push   esi
c001179f:	53                   	push   ebx
c00117a0:	83 ec 10             	sub    esp,0x10
c00117a3:	68 14 01 00 00       	push   0x114
c00117a8:	e8 1e 63 ff ff       	call   c0007acb <malloc>
c00117ad:	83 c4 0c             	add    esp,0xc
c00117b0:	89 c3                	mov    ebx,eax
c00117b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117ba:	50                   	push   eax
c00117bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117bf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00117c2:	52                   	push   edx
c00117c3:	53                   	push   ebx
c00117c4:	e8 d7 9e ff ff       	call   c000b6a0 <Directory::Directory(char const*, Process*)>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	85 db                	test   ebx,ebx
c00117ce:	74 2c                	je     c00117fc <SysMakeDir(regs*)+0x5e>
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	53                   	push   ebx
c00117d4:	e8 63 a1 ff ff       	call   c000b93c <Directory::create()>
c00117d9:	89 c6                	mov    esi,eax
c00117db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	31 c0                	xor    eax,eax
c00117e8:	85 f6                	test   esi,esi
c00117ea:	0f 95 c0             	setne  al
c00117ed:	31 d2                	xor    edx,edx
c00117ef:	f7 d8                	neg    eax
c00117f1:	83 d2 00             	adc    edx,0x0
c00117f4:	83 c4 04             	add    esp,0x4
c00117f7:	5b                   	pop    ebx
c00117f8:	f7 da                	neg    edx
c00117fa:	5e                   	pop    esi
c00117fb:	c3                   	ret    
c00117fc:	83 c4 04             	add    esp,0x4
c00117ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011804:	5b                   	pop    ebx
c0011805:	ba ff ff ff ff       	mov    edx,0xffffffff
c001180a:	5e                   	pop    esi
c001180b:	c3                   	ret    

c001180c <SysCloseDir(regs*)>:
c001180c:	53                   	push   ebx
c001180d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011812:	83 ec 08             	sub    esp,0x8
c0011815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011819:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001181c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011821:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011824:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001182a:	77 2a                	ja     c0011856 <SysCloseDir(regs*)+0x4a>
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	51                   	push   ecx
c0011830:	e8 5a 7c ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c0011835:	89 04 24             	mov    DWORD PTR [esp],eax
c0011838:	89 c3                	mov    ebx,eax
c001183a:	e8 79 9f ff ff       	call   c000b7b8 <Directory::close()>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	85 db                	test   ebx,ebx
c0011844:	74 0c                	je     c0011852 <SysCloseDir(regs*)+0x46>
c0011846:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011848:	83 ec 0c             	sub    esp,0xc
c001184b:	53                   	push   ebx
c001184c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001184f:	83 c4 10             	add    esp,0x10
c0011852:	31 c0                	xor    eax,eax
c0011854:	31 d2                	xor    edx,edx
c0011856:	83 c4 08             	add    esp,0x8
c0011859:	5b                   	pop    ebx
c001185a:	c3                   	ret    

c001185b <SysWait(regs*)>:
c001185b:	83 ec 10             	sub    esp,0x10
c001185e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011862:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011865:	52                   	push   edx
c0011866:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011869:	51                   	push   ecx
c001186a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001186d:	50                   	push   eax
c001186e:	e8 e9 3c 00 00       	call   c001555c <waitTask(int, int*, int)>
c0011873:	83 c4 1c             	add    esp,0x1c
c0011876:	89 c2                	mov    edx,eax
c0011878:	c1 fa 1f             	sar    edx,0x1f
c001187b:	c3                   	ret    

c001187c <SysNotImpl(regs*)>:
c001187c:	83 ec 18             	sub    esp,0x18
c001187f:	68 e2 14 02 c0       	push   0xc00214e2
c0011884:	e8 94 f2 ff ff       	call   c0010b1d <KePanic(char const*)>
c0011889:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001188e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011893:	83 c4 1c             	add    esp,0x1c
c0011896:	c3                   	ret    

c0011897 <SysPanic(regs*)>:
c0011897:	83 ec 18             	sub    esp,0x18
c001189a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118a1:	50                   	push   eax
c00118a2:	e8 76 f2 ff ff       	call   c0010b1d <KePanic(char const*)>
c00118a7:	b8 01 00 00 00       	mov    eax,0x1
c00118ac:	31 d2                	xor    edx,edx
c00118ae:	83 c4 1c             	add    esp,0x1c
c00118b1:	c3                   	ret    

c00118b2 <SysRmdir(regs*)>:
c00118b2:	56                   	push   esi
c00118b3:	53                   	push   ebx
c00118b4:	83 ec 10             	sub    esp,0x10
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00118be:	68 14 01 00 00       	push   0x114
c00118c3:	e8 03 62 ff ff       	call   c0007acb <malloc>
c00118c8:	83 c4 0c             	add    esp,0xc
c00118cb:	89 c3                	mov    ebx,eax
c00118cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118d5:	50                   	push   eax
c00118d6:	56                   	push   esi
c00118d7:	53                   	push   ebx
c00118d8:	e8 9d 98 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00118dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118e0:	e8 c9 9a ff ff       	call   c000b3ae <File::unlink()>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	85 db                	test   ebx,ebx
c00118ea:	89 c6                	mov    esi,eax
c00118ec:	74 0c                	je     c00118fa <SysRmdir(regs*)+0x48>
c00118ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118f0:	83 ec 0c             	sub    esp,0xc
c00118f3:	53                   	push   ebx
c00118f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	31 c0                	xor    eax,eax
c00118fc:	85 f6                	test   esi,esi
c00118fe:	0f 95 c0             	setne  al
c0011901:	31 d2                	xor    edx,edx
c0011903:	f7 d8                	neg    eax
c0011905:	83 d2 00             	adc    edx,0x0
c0011908:	83 c4 04             	add    esp,0x4
c001190b:	5b                   	pop    ebx
c001190c:	f7 da                	neg    edx
c001190e:	5e                   	pop    esi
c001190f:	c3                   	ret    

c0011910 <SysUnlink(regs*)>:
c0011910:	56                   	push   esi
c0011911:	53                   	push   ebx
c0011912:	83 ec 10             	sub    esp,0x10
c0011915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011919:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001191c:	68 14 01 00 00       	push   0x114
c0011921:	e8 a5 61 ff ff       	call   c0007acb <malloc>
c0011926:	83 c4 0c             	add    esp,0xc
c0011929:	89 c3                	mov    ebx,eax
c001192b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011930:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011933:	50                   	push   eax
c0011934:	56                   	push   esi
c0011935:	53                   	push   ebx
c0011936:	e8 3f 98 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001193b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001193e:	e8 6b 9a ff ff       	call   c000b3ae <File::unlink()>
c0011943:	83 c4 10             	add    esp,0x10
c0011946:	85 db                	test   ebx,ebx
c0011948:	89 c6                	mov    esi,eax
c001194a:	74 0c                	je     c0011958 <SysUnlink(regs*)+0x48>
c001194c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	53                   	push   ebx
c0011952:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	31 c0                	xor    eax,eax
c001195a:	85 f6                	test   esi,esi
c001195c:	0f 95 c0             	setne  al
c001195f:	31 d2                	xor    edx,edx
c0011961:	f7 d8                	neg    eax
c0011963:	83 d2 00             	adc    edx,0x0
c0011966:	83 c4 04             	add    esp,0x4
c0011969:	5b                   	pop    ebx
c001196a:	f7 da                	neg    edx
c001196c:	5e                   	pop    esi
c001196d:	c3                   	ret    

c001196e <SysGetArgv(regs*)>:
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011975:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011978:	85 c0                	test   eax,eax
c001197a:	78 2c                	js     c00119a8 <SysGetArgv(regs*)+0x3a>
c001197c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011982:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011985:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001198b:	7d 1b                	jge    c00119a8 <SysGetArgv(regs*)+0x3a>
c001198d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011994:	85 c0                	test   eax,eax
c0011996:	74 18                	je     c00119b0 <SysGetArgv(regs*)+0x42>
c0011998:	83 ec 08             	sub    esp,0x8
c001199b:	50                   	push   eax
c001199c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001199f:	50                   	push   eax
c00119a0:	e8 ab ec fe ff       	call   c0000650 <strcpy>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	31 c0                	xor    eax,eax
c00119aa:	31 d2                	xor    edx,edx
c00119ac:	83 c4 0c             	add    esp,0xc
c00119af:	c3                   	ret    
c00119b0:	b8 01 00 00 00       	mov    eax,0x1
c00119b5:	31 d2                	xor    edx,edx
c00119b7:	83 c4 0c             	add    esp,0xc
c00119ba:	c3                   	ret    

c00119bb <SysUSleep(regs*)>:
c00119bb:	83 ec 1c             	sub    esp,0x1c
c00119be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00119c2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00119c5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00119c8:	6a 00                	push   0x0
c00119ca:	6a 64                	push   0x64
c00119cc:	52                   	push   edx
c00119cd:	50                   	push   eax
c00119ce:	e8 9d cf 00 00       	call   c001e970 <__udivdi3>
c00119d3:	83 c4 14             	add    esp,0x14
c00119d6:	50                   	push   eax
c00119d7:	e8 64 3c 00 00       	call   c0015640 <milliTenthSleep(unsigned int)>
c00119dc:	31 c0                	xor    eax,eax
c00119de:	31 d2                	xor    edx,edx
c00119e0:	83 c4 1c             	add    esp,0x1c
c00119e3:	c3                   	ret    

c00119e4 <SysSpawn(regs*)>:
c00119e4:	56                   	push   esi
c00119e5:	53                   	push   ebx
c00119e6:	83 ec 04             	sub    esp,0x4
c00119e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119ed:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00119f0:	85 f6                	test   esi,esi
c00119f2:	75 0a                	jne    c00119fe <SysSpawn(regs*)+0x1a>
c00119f4:	83 c4 04             	add    esp,0x4
c00119f7:	31 c0                	xor    eax,eax
c00119f9:	5b                   	pop    ebx
c00119fa:	31 d2                	xor    edx,edx
c00119fc:	5e                   	pop    esi
c00119fd:	c3                   	ret    
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	68 24 07 00 00       	push   0x724
c0011a06:	e8 c0 60 ff ff       	call   c0007acb <malloc>
c0011a0b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a0e:	83 c4 10             	add    esp,0x10
c0011a11:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a14:	89 c6                	mov    esi,eax
c0011a16:	31 c0                	xor    eax,eax
c0011a18:	85 c9                	test   ecx,ecx
c0011a1a:	75 08                	jne    c0011a24 <SysSpawn(regs*)+0x40>
c0011a1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a24:	52                   	push   edx
c0011a25:	50                   	push   eax
c0011a26:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a29:	50                   	push   eax
c0011a2a:	56                   	push   esi
c0011a2b:	e8 78 32 00 00       	call   c0014ca8 <Process::Process(char const*, Process*, char**)>
c0011a30:	83 c4 10             	add    esp,0x10
c0011a33:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011a3a:	75 b8                	jne    c00119f4 <SysSpawn(regs*)+0x10>
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	56                   	push   esi
c0011a40:	e8 9b 37 00 00       	call   c00151e0 <Process::createUserThread()>
c0011a45:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	83 c4 04             	add    esp,0x4
c0011a4d:	5b                   	pop    ebx
c0011a4e:	89 c2                	mov    edx,eax
c0011a50:	c1 fa 1f             	sar    edx,0x1f
c0011a53:	5e                   	pop    esi
c0011a54:	c3                   	ret    

c0011a55 <SysGetEnv(regs*)>:
c0011a55:	57                   	push   edi
c0011a56:	56                   	push   esi
c0011a57:	53                   	push   ebx
c0011a58:	83 ec 1c             	sub    esp,0x1c
c0011a5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a64:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011a67:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a6a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a6d:	51                   	push   ecx
c0011a6e:	e8 62 ef ff ff       	call   c00109d5 <KeGetProcessTotalEnvCount(Process*)>
c0011a73:	83 c4 10             	add    esp,0x10
c0011a76:	39 c7                	cmp    edi,eax
c0011a78:	7c 12                	jl     c0011a8c <SysGetEnv(regs*)+0x37>
c0011a7a:	31 c0                	xor    eax,eax
c0011a7c:	31 d2                	xor    edx,edx
c0011a7e:	85 f6                	test   esi,esi
c0011a80:	74 03                	je     c0011a85 <SysGetEnv(regs*)+0x30>
c0011a82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	5b                   	pop    ebx
c0011a89:	5e                   	pop    esi
c0011a8a:	5f                   	pop    edi
c0011a8b:	c3                   	ret    
c0011a8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011a90:	83 ec 04             	sub    esp,0x4
c0011a93:	57                   	push   edi
c0011a94:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011a9a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011a9d:	57                   	push   edi
c0011a9e:	50                   	push   eax
c0011a9f:	e8 51 ef ff ff       	call   c00109f5 <KeGetProcessEnvPair(Process*, int)>
c0011aa4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011aab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011aaf:	83 c4 0c             	add    esp,0xc
c0011ab2:	85 d2                	test   edx,edx
c0011ab4:	75 23                	jne    c0011ad9 <SysGetEnv(regs*)+0x84>
c0011ab6:	83 ec 0c             	sub    esp,0xc
c0011ab9:	50                   	push   eax
c0011aba:	e8 c1 ea fe ff       	call   c0000580 <strlen>
c0011abf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ac2:	89 c3                	mov    ebx,eax
c0011ac4:	e8 b7 ea fe ff       	call   c0000580 <strlen>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	31 d2                	xor    edx,edx
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011ad5:	5b                   	pop    ebx
c0011ad6:	5e                   	pop    esi
c0011ad7:	5f                   	pop    edi
c0011ad8:	c3                   	ret    
c0011ad9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	50                   	push   eax
c0011ae0:	56                   	push   esi
c0011ae1:	e8 6a eb fe ff       	call   c0000650 <strcpy>
c0011ae6:	58                   	pop    eax
c0011ae7:	5a                   	pop    edx
c0011ae8:	68 fc 14 02 c0       	push   0xc00214fc
c0011aed:	56                   	push   esi
c0011aee:	e8 7d ed fe ff       	call   c0000870 <strcat>
c0011af3:	59                   	pop    ecx
c0011af4:	5b                   	pop    ebx
c0011af5:	57                   	push   edi
c0011af6:	56                   	push   esi
c0011af7:	e8 74 ed fe ff       	call   c0000870 <strcat>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	31 c0                	xor    eax,eax
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	31 d2                	xor    edx,edx
c0011b06:	5b                   	pop    ebx
c0011b07:	5e                   	pop    esi
c0011b08:	5f                   	pop    edi
c0011b09:	c3                   	ret    

c0011b0a <SysSetFatAttrib(regs*)>:
c0011b0a:	57                   	push   edi
c0011b0b:	56                   	push   esi
c0011b0c:	53                   	push   ebx
c0011b0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b17:	68 14 01 00 00       	push   0x114
c0011b1c:	e8 aa 5f ff ff       	call   c0007acb <malloc>
c0011b21:	83 c4 0c             	add    esp,0xc
c0011b24:	89 c3                	mov    ebx,eax
c0011b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b2b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b2e:	50                   	push   eax
c0011b2f:	57                   	push   edi
c0011b30:	53                   	push   ebx
c0011b31:	e8 44 96 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011b36:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011b39:	83 c4 0c             	add    esp,0xc
c0011b3c:	0f b6 d4             	movzx  edx,ah
c0011b3f:	0f b6 c0             	movzx  eax,al
c0011b42:	52                   	push   edx
c0011b43:	50                   	push   eax
c0011b44:	53                   	push   ebx
c0011b45:	e8 fe 98 ff ff       	call   c000b448 <File::chfatattr(unsigned char, unsigned char)>
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	85 db                	test   ebx,ebx
c0011b4f:	89 c6                	mov    esi,eax
c0011b51:	74 0c                	je     c0011b5f <SysSetFatAttrib(regs*)+0x55>
c0011b53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	53                   	push   ebx
c0011b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b5c:	83 c4 10             	add    esp,0x10
c0011b5f:	5b                   	pop    ebx
c0011b60:	31 c0                	xor    eax,eax
c0011b62:	85 f6                	test   esi,esi
c0011b64:	0f 95 c0             	setne  al
c0011b67:	31 d2                	xor    edx,edx
c0011b69:	5e                   	pop    esi
c0011b6a:	f7 d8                	neg    eax
c0011b6c:	83 d2 00             	adc    edx,0x0
c0011b6f:	f7 da                	neg    edx
c0011b71:	5f                   	pop    edi
c0011b72:	c3                   	ret    

c0011b73 <SysPipe(regs*)>:
c0011b73:	57                   	push   edi
c0011b74:	56                   	push   esi
c0011b75:	53                   	push   ebx
c0011b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b7a:	83 ec 0c             	sub    esp,0xc
c0011b7d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011b80:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b83:	6a 20                	push   0x20
c0011b85:	e8 41 5f ff ff       	call   c0007acb <malloc>
c0011b8a:	89 c3                	mov    ebx,eax
c0011b8c:	58                   	pop    eax
c0011b8d:	5a                   	pop    edx
c0011b8e:	68 00 50 00 00       	push   0x5000
c0011b93:	53                   	push   ebx
c0011b94:	e8 97 68 ff ff       	call   c0008430 <Pipe::Pipe(int)>
c0011b99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b9c:	e8 f1 75 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011ba1:	89 07                	mov    DWORD PTR [edi],eax
c0011ba3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ba6:	e8 e7 75 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011bab:	83 c4 10             	add    esp,0x10
c0011bae:	31 d2                	xor    edx,edx
c0011bb0:	89 06                	mov    DWORD PTR [esi],eax
c0011bb2:	31 c0                	xor    eax,eax
c0011bb4:	5b                   	pop    ebx
c0011bb5:	5e                   	pop    esi
c0011bb6:	5f                   	pop    edi
c0011bb7:	c3                   	ret    

c0011bb8 <SysGetUnixTime(regs*)>:
c0011bb8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011bbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011bc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bc7:	e9 b6 9f ff ff       	jmp    c000bb82 <Clock::timeInSecondsLocal()>

c0011bcc <string_ends_with(char const*, char const*)>:
c0011bcc:	57                   	push   edi
c0011bcd:	56                   	push   esi
c0011bce:	53                   	push   ebx
c0011bcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bd3:	83 ec 0c             	sub    esp,0xc
c0011bd6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011bda:	53                   	push   ebx
c0011bdb:	e8 a0 e9 fe ff       	call   c0000580 <strlen>
c0011be0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011be3:	89 c6                	mov    esi,eax
c0011be5:	e8 96 e9 fe ff       	call   c0000580 <strlen>
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	31 d2                	xor    edx,edx
c0011bef:	39 c6                	cmp    esi,eax
c0011bf1:	7d 06                	jge    c0011bf9 <string_ends_with(char const*, char const*)+0x2d>
c0011bf3:	5b                   	pop    ebx
c0011bf4:	89 d0                	mov    eax,edx
c0011bf6:	5e                   	pop    esi
c0011bf7:	5f                   	pop    edi
c0011bf8:	c3                   	ret    
c0011bf9:	83 ec 08             	sub    esp,0x8
c0011bfc:	29 c6                	sub    esi,eax
c0011bfe:	57                   	push   edi
c0011bff:	01 f3                	add    ebx,esi
c0011c01:	53                   	push   ebx
c0011c02:	e8 79 eb fe ff       	call   c0000780 <strcmp>
c0011c07:	83 c4 10             	add    esp,0x10
c0011c0a:	31 d2                	xor    edx,edx
c0011c0c:	5b                   	pop    ebx
c0011c0d:	5e                   	pop    esi
c0011c0e:	85 c0                	test   eax,eax
c0011c10:	5f                   	pop    edi
c0011c11:	0f 94 c2             	sete   dl
c0011c14:	89 d0                	mov    eax,edx
c0011c16:	c3                   	ret    

c0011c17 <SysOpen(regs*)>:
c0011c17:	56                   	push   esi
c0011c18:	53                   	push   ebx
c0011c19:	81 ec 04 01 00 00    	sub    esp,0x104
c0011c1f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011c26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c29:	85 c0                	test   eax,eax
c0011c2b:	0f 84 c5 01 00 00    	je     c0011df6 <SysOpen(regs*)+0x1df>
c0011c31:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c34:	85 c0                	test   eax,eax
c0011c36:	0f 84 ba 01 00 00    	je     c0011df6 <SysOpen(regs*)+0x1df>
c0011c3c:	83 ec 04             	sub    esp,0x4
c0011c3f:	68 fe 14 02 c0       	push   0xc00214fe
c0011c44:	50                   	push   eax
c0011c45:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011c49:	56                   	push   esi
c0011c4a:	e8 4f 93 ff ff       	call   c000af9e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011c4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c52:	e8 29 e9 fe ff       	call   c0000580 <strlen>
c0011c57:	83 c4 10             	add    esp,0x10
c0011c5a:	83 e8 01             	sub    eax,0x1
c0011c5d:	74 29                	je     c0011c88 <SysOpen(regs*)+0x71>
c0011c5f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011c63:	83 fa 2e             	cmp    edx,0x2e
c0011c66:	74 1c                	je     c0011c84 <SysOpen(regs*)+0x6d>
c0011c68:	83 fa 3a             	cmp    edx,0x3a
c0011c6b:	74 17                	je     c0011c84 <SysOpen(regs*)+0x6d>
c0011c6d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011c71:	83 e8 01             	sub    eax,0x1
c0011c74:	74 12                	je     c0011c88 <SysOpen(regs*)+0x71>
c0011c76:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011c7a:	83 fa 3a             	cmp    edx,0x3a
c0011c7d:	74 05                	je     c0011c84 <SysOpen(regs*)+0x6d>
c0011c7f:	83 fa 2e             	cmp    edx,0x2e
c0011c82:	75 e9                	jne    c0011c6d <SysOpen(regs*)+0x56>
c0011c84:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011c88:	83 ec 08             	sub    esp,0x8
c0011c8b:	68 02 15 02 c0       	push   0xc0021502
c0011c90:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c93:	50                   	push   eax
c0011c94:	e8 33 ff ff ff       	call   c0011bcc <string_ends_with(char const*, char const*)>
c0011c99:	83 c4 10             	add    esp,0x10
c0011c9c:	85 c0                	test   eax,eax
c0011c9e:	74 1d                	je     c0011cbd <SysOpen(regs*)+0xa6>
c0011ca0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ca3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011ca9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cb0:	81 c4 04 01 00 00    	add    esp,0x104
c0011cb6:	31 c0                	xor    eax,eax
c0011cb8:	5b                   	pop    ebx
c0011cb9:	31 d2                	xor    edx,edx
c0011cbb:	5e                   	pop    esi
c0011cbc:	c3                   	ret    
c0011cbd:	83 ec 08             	sub    esp,0x8
c0011cc0:	68 07 15 02 c0       	push   0xc0021507
c0011cc5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cc8:	50                   	push   eax
c0011cc9:	e8 fe fe ff ff       	call   c0011bcc <string_ends_with(char const*, char const*)>
c0011cce:	83 c4 10             	add    esp,0x10
c0011cd1:	85 c0                	test   eax,eax
c0011cd3:	75 cb                	jne    c0011ca0 <SysOpen(regs*)+0x89>
c0011cd5:	83 ec 08             	sub    esp,0x8
c0011cd8:	68 03 15 02 c0       	push   0xc0021503
c0011cdd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ce0:	50                   	push   eax
c0011ce1:	e8 9a ea fe ff       	call   c0000780 <strcmp>
c0011ce6:	83 c4 10             	add    esp,0x10
c0011ce9:	85 c0                	test   eax,eax
c0011ceb:	74 b3                	je     c0011ca0 <SysOpen(regs*)+0x89>
c0011ced:	83 ec 08             	sub    esp,0x8
c0011cf0:	68 02 15 02 c0       	push   0xc0021502
c0011cf5:	56                   	push   esi
c0011cf6:	e8 d1 fe ff ff       	call   c0011bcc <string_ends_with(char const*, char const*)>
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	85 c0                	test   eax,eax
c0011d00:	75 9e                	jne    c0011ca0 <SysOpen(regs*)+0x89>
c0011d02:	83 ec 08             	sub    esp,0x8
c0011d05:	68 0c 15 02 c0       	push   0xc002150c
c0011d0a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d0d:	50                   	push   eax
c0011d0e:	e8 b9 fe ff ff       	call   c0011bcc <string_ends_with(char const*, char const*)>
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	85 c0                	test   eax,eax
c0011d18:	0f 85 eb 00 00 00    	jne    c0011e09 <SysOpen(regs*)+0x1f2>
c0011d1e:	83 ec 08             	sub    esp,0x8
c0011d21:	68 11 15 02 c0       	push   0xc0021511
c0011d26:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d29:	50                   	push   eax
c0011d2a:	e8 9d fe ff ff       	call   c0011bcc <string_ends_with(char const*, char const*)>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	85 c0                	test   eax,eax
c0011d34:	0f 85 cf 00 00 00    	jne    c0011e09 <SysOpen(regs*)+0x1f2>
c0011d3a:	83 ec 08             	sub    esp,0x8
c0011d3d:	68 0d 15 02 c0       	push   0xc002150d
c0011d42:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011d45:	51                   	push   ecx
c0011d46:	e8 35 ea fe ff       	call   c0000780 <strcmp>
c0011d4b:	83 c4 10             	add    esp,0x10
c0011d4e:	85 c0                	test   eax,eax
c0011d50:	0f 84 b3 00 00 00    	je     c0011e09 <SysOpen(regs*)+0x1f2>
c0011d56:	83 ec 08             	sub    esp,0x8
c0011d59:	68 0c 15 02 c0       	push   0xc002150c
c0011d5e:	56                   	push   esi
c0011d5f:	e8 68 fe ff ff       	call   c0011bcc <string_ends_with(char const*, char const*)>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	85 c0                	test   eax,eax
c0011d69:	0f 85 9a 00 00 00    	jne    c0011e09 <SysOpen(regs*)+0x1f2>
c0011d6f:	83 ec 0c             	sub    esp,0xc
c0011d72:	68 14 01 00 00       	push   0x114
c0011d77:	e8 4f 5d ff ff       	call   c0007acb <malloc>
c0011d7c:	83 c4 0c             	add    esp,0xc
c0011d7f:	89 c6                	mov    esi,eax
c0011d81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d89:	50                   	push   eax
c0011d8a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011d8d:	52                   	push   edx
c0011d8e:	56                   	push   esi
c0011d8f:	e8 e6 93 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011d94:	83 c4 10             	add    esp,0x10
c0011d97:	85 f6                	test   esi,esi
c0011d99:	74 5b                	je     c0011df6 <SysOpen(regs*)+0x1df>
c0011d9b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d9e:	0f b6 c2             	movzx  eax,dl
c0011da1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011da4:	89 d0                	mov    eax,edx
c0011da6:	83 e0 01             	and    eax,0x1
c0011da9:	f6 c2 02             	test   dl,0x2
c0011dac:	74 03                	je     c0011db1 <SysOpen(regs*)+0x19a>
c0011dae:	83 c8 02             	or     eax,0x2
c0011db1:	f6 c2 04             	test   dl,0x4
c0011db4:	74 03                	je     c0011db9 <SysOpen(regs*)+0x1a2>
c0011db6:	83 c8 04             	or     eax,0x4
c0011db9:	f6 c2 08             	test   dl,0x8
c0011dbc:	74 03                	je     c0011dc1 <SysOpen(regs*)+0x1aa>
c0011dbe:	83 c8 0a             	or     eax,0xa
c0011dc1:	80 e2 10             	and    dl,0x10
c0011dc4:	74 03                	je     c0011dc9 <SysOpen(regs*)+0x1b2>
c0011dc6:	83 c8 12             	or     eax,0x12
c0011dc9:	83 ec 08             	sub    esp,0x8
c0011dcc:	50                   	push   eax
c0011dcd:	56                   	push   esi
c0011dce:	e8 63 94 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	85 c0                	test   eax,eax
c0011dd8:	75 1c                	jne    c0011df6 <SysOpen(regs*)+0x1df>
c0011dda:	83 ec 0c             	sub    esp,0xc
c0011ddd:	56                   	push   esi
c0011dde:	e8 af 73 ff ff       	call   c0009192 <UnixFile::getFileDescriptor()>
c0011de3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	89 02                	mov    DWORD PTR [edx],eax
c0011deb:	c1 f8 1f             	sar    eax,0x1f
c0011dee:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011df1:	e9 ba fe ff ff       	jmp    c0011cb0 <SysOpen(regs*)+0x99>
c0011df6:	81 c4 04 01 00 00    	add    esp,0x104
c0011dfc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e01:	5b                   	pop    ebx
c0011e02:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e07:	5e                   	pop    esi
c0011e08:	c3                   	ret    
c0011e09:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e0c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e12:	e9 92 fe ff ff       	jmp    c0011ca9 <SysOpen(regs*)+0x92>

c0011e17 <KeSystemCall(regs*, void*)>:
c0011e17:	53                   	push   ebx
c0011e18:	83 ec 08             	sub    esp,0x8
c0011e1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e1f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011e22:	83 f8 3b             	cmp    eax,0x3b
c0011e25:	77 16                	ja     c0011e3d <KeSystemCall(regs*, void*)+0x26>
c0011e27:	8b 14 85 20 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd6e0]
c0011e2e:	85 d2                	test   edx,edx
c0011e30:	74 0b                	je     c0011e3d <KeSystemCall(regs*, void*)+0x26>
c0011e32:	83 ec 0c             	sub    esp,0xc
c0011e35:	53                   	push   ebx
c0011e36:	ff d2                	call   edx
c0011e38:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011e3b:	eb 0d                	jmp    c0011e4a <KeSystemCall(regs*, void*)+0x33>
c0011e3d:	52                   	push   edx
c0011e3e:	52                   	push   edx
c0011e3f:	50                   	push   eax
c0011e40:	68 16 15 02 c0       	push   0xc0021516
c0011e45:	e8 b4 8a ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e52:	83 c4 08             	add    esp,0x8
c0011e55:	31 d2                	xor    edx,edx
c0011e57:	5b                   	pop    ebx
c0011e58:	c3                   	ret    
c0011e59:	66 90                	xchg   ax,ax
c0011e5b:	90                   	nop

c0011e5c <KeSwitchEndian16(unsigned short)>:
c0011e5c:	83 ec 04             	sub    esp,0x4
c0011e5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e63:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011e67:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011e6b:	c1 f8 08             	sar    eax,0x8
c0011e6e:	89 c2                	mov    edx,eax
c0011e70:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011e74:	c1 e0 08             	shl    eax,0x8
c0011e77:	09 d0                	or     eax,edx
c0011e79:	83 c4 04             	add    esp,0x4
c0011e7c:	c3                   	ret    
c0011e7d:	8d 76 00             	lea    esi,[esi+0x0]

c0011e80 <KeSwitchEndian32(unsigned int)>:
c0011e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e84:	c1 e8 18             	shr    eax,0x18
c0011e87:	89 c2                	mov    edx,eax
c0011e89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e8d:	c1 e0 08             	shl    eax,0x8
c0011e90:	25 00 00 ff 00       	and    eax,0xff0000
c0011e95:	09 c2                	or     edx,eax
c0011e97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e9b:	c1 e8 08             	shr    eax,0x8
c0011e9e:	25 00 ff 00 00       	and    eax,0xff00
c0011ea3:	09 c2                	or     edx,eax
c0011ea5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea9:	c1 e0 18             	shl    eax,0x18
c0011eac:	09 d0                	or     eax,edx
c0011eae:	c3                   	ret    
c0011eaf:	90                   	nop

c0011eb0 <EthernetCRC32(unsigned char*, int)>:
c0011eb0:	83 ec 10             	sub    esp,0x10
c0011eb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011eb8:	75 0a                	jne    c0011ec4 <EthernetCRC32(unsigned char*, int)+0x14>
c0011eba:	b8 00 00 00 00       	mov    eax,0x0
c0011ebf:	e9 8c 00 00 00       	jmp    c0011f50 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011ec4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011ec9:	7f 09                	jg     c0011ed4 <EthernetCRC32(unsigned char*, int)+0x24>
c0011ecb:	b8 00 00 00 00       	mov    eax,0x0
c0011ed0:	eb 7e                	jmp    c0011f50 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011ed2:	66 90                	xchg   ax,ax
c0011ed4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011edc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ee8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011eec:	7d 5a                	jge    c0011f48 <EthernetCRC32(unsigned char*, int)+0x98>
c0011eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ef2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ef6:	01 d0                	add    eax,edx
c0011ef8:	8a 00                	mov    al,BYTE PTR [eax]
c0011efa:	0f b6 c0             	movzx  eax,al
c0011efd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011f01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f09:	8d 76 00             	lea    esi,[esi+0x0]
c0011f0c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011f11:	7f 2d                	jg     c0011f40 <EthernetCRC32(unsigned char*, int)+0x90>
c0011f13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f17:	83 e0 01             	and    eax,0x1
c0011f1a:	74 10                	je     c0011f2c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f20:	d1 e8                	shr    eax,1
c0011f22:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011f27:	eb 0b                	jmp    c0011f34 <EthernetCRC32(unsigned char*, int)+0x84>
c0011f29:	8d 76 00             	lea    esi,[esi+0x0]
c0011f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f30:	d1 e8                	shr    eax,1
c0011f32:	66 90                	xchg   ax,ax
c0011f34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011f3d:	eb cd                	jmp    c0011f0c <EthernetCRC32(unsigned char*, int)+0x5c>
c0011f3f:	90                   	nop
c0011f40:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011f45:	eb 9d                	jmp    c0011ee4 <EthernetCRC32(unsigned char*, int)+0x34>
c0011f47:	90                   	nop
c0011f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f4c:	f7 d0                	not    eax
c0011f4e:	66 90                	xchg   ax,ax
c0011f50:	83 c4 10             	add    esp,0x10
c0011f53:	c3                   	ret    

c0011f54 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011f54:	83 ec 2c             	sub    esp,0x2c
c0011f57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f6f:	0f b7 c0             	movzx  eax,ax
c0011f72:	3d 06 08 00 00       	cmp    eax,0x806
c0011f77:	75 13                	jne    c0011f8c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011f79:	83 ec 0c             	sub    esp,0xc
c0011f7c:	68 2a 15 02 c0       	push   0xc002152a
c0011f81:	e8 78 89 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	eb 25                	jmp    c0011fb0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011f8b:	90                   	nop
c0011f8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f93:	0f b7 c0             	movzx  eax,ax
c0011f96:	3d 00 08 00 00       	cmp    eax,0x800
c0011f9b:	75 13                	jne    c0011fb0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011f9d:	83 ec 0c             	sub    esp,0xc
c0011fa0:	68 40 15 02 c0       	push   0xc0021540
c0011fa5:	e8 54 89 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb0:	90                   	nop
c0011fb1:	83 c4 2c             	add    esp,0x2c
c0011fb4:	c3                   	ret    

c0011fb5 <CmOpen(char const*)>:
c0011fb5:	57                   	push   edi
c0011fb6:	56                   	push   esi
c0011fb7:	53                   	push   ebx
c0011fb8:	83 ec 1c             	sub    esp,0x1c
c0011fbb:	6a 30                	push   0x30
c0011fbd:	e8 09 5b ff ff       	call   c0007acb <malloc>
c0011fc2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011fc9:	89 c3                	mov    ebx,eax
c0011fcb:	e8 fb 5a ff ff       	call   c0007acb <malloc>
c0011fd0:	83 c4 0c             	add    esp,0xc
c0011fd3:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011fd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011fdd:	89 c6                	mov    esi,eax
c0011fdf:	50                   	push   eax
c0011fe0:	e8 95 91 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0011fe5:	83 c4 0c             	add    esp,0xc
c0011fe8:	89 33                	mov    DWORD PTR [ebx],esi
c0011fea:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011fee:	50                   	push   eax
c0011fef:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011ff3:	50                   	push   eax
c0011ff4:	56                   	push   esi
c0011ff5:	e8 e8 94 ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c0011ffa:	5a                   	pop    edx
c0011ffb:	59                   	pop    ecx
c0011ffc:	6a 01                	push   0x1
c0011ffe:	ff 33                	push   DWORD PTR [ebx]
c0012000:	e8 31 92 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0012005:	5e                   	pop    esi
c0012006:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001200a:	e8 bc 5a ff ff       	call   c0007acb <malloc>
c001200f:	5a                   	pop    edx
c0012010:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012014:	89 c7                	mov    edi,eax
c0012016:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012018:	8b 10                	mov    edx,DWORD PTR [eax]
c001201a:	56                   	push   esi
c001201b:	57                   	push   edi
c001201c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012024:	50                   	push   eax
c0012025:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012028:	83 c4 14             	add    esp,0x14
c001202b:	ff 33                	push   DWORD PTR [ebx]
c001202d:	e8 62 92 ff ff       	call   c000b294 <File::close()>
c0012032:	59                   	pop    ecx
c0012033:	58                   	pop    eax
c0012034:	6a 13                	push   0x13
c0012036:	ff 33                	push   DWORD PTR [ebx]
c0012038:	e8 f9 91 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c001203d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001203f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012041:	89 34 24             	mov    DWORD PTR [esp],esi
c0012044:	57                   	push   edi
c0012045:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012049:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001204d:	50                   	push   eax
c001204e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012051:	83 c4 14             	add    esp,0x14
c0012054:	57                   	push   edi
c0012055:	e8 81 5a ff ff       	call   c0007adb <free>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012060:	75 10                	jne    c0012072 <CmOpen(char const*)+0xbd>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 55 15 02 c0       	push   0xc0021555
c001206a:	e8 ae ea ff ff       	call   c0010b1d <KePanic(char const*)>
c001206f:	83 c4 10             	add    esp,0x10
c0012072:	50                   	push   eax
c0012073:	6a 00                	push   0x0
c0012075:	6a 00                	push   0x0
c0012077:	ff 33                	push   DWORD PTR [ebx]
c0012079:	8d 7b 05             	lea    edi,[ebx+0x5]
c001207c:	e8 73 92 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0012081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012083:	8b 10                	mov    edx,DWORD PTR [eax]
c0012085:	89 34 24             	mov    DWORD PTR [esp],esi
c0012088:	57                   	push   edi
c0012089:	6a 00                	push   0x0
c001208b:	6a 2b                	push   0x2b
c001208d:	50                   	push   eax
c001208e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012091:	83 c4 1c             	add    esp,0x1c
c0012094:	6a 00                	push   0x0
c0012096:	6a 00                	push   0x0
c0012098:	ff 33                	push   DWORD PTR [ebx]
c001209a:	e8 55 92 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001209f:	83 c4 0c             	add    esp,0xc
c00120a2:	6a 08                	push   0x8
c00120a4:	68 66 15 02 c0       	push   0xc0021566
c00120a9:	57                   	push   edi
c00120aa:	e8 d1 e2 fe ff       	call   c0000380 <memcmp>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	85 c0                	test   eax,eax
c00120b4:	74 10                	je     c00120c6 <CmOpen(char const*)+0x111>
c00120b6:	83 ec 0c             	sub    esp,0xc
c00120b9:	68 6f 15 02 c0       	push   0xc002156f
c00120be:	e8 5a ea ff ff       	call   c0010b1d <KePanic(char const*)>
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	89 d8                	mov    eax,ebx
c00120cf:	5b                   	pop    ebx
c00120d0:	5e                   	pop    esi
c00120d1:	5f                   	pop    edi
c00120d2:	c3                   	ret    

c00120d3 <CmClose(Reghive_Tag*)>:
c00120d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120d7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00120db:	74 0b                	je     c00120e8 <CmClose(Reghive_Tag*)+0x15>
c00120dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00120df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120e3:	e9 ac 91 ff ff       	jmp    c000b294 <File::close()>
c00120e8:	c3                   	ret    

c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00120e9:	53                   	push   ebx
c00120ea:	83 ec 18             	sub    esp,0x18
c00120ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120f1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00120f5:	74 29                	je     c0012120 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00120f7:	50                   	push   eax
c00120f8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00120fd:	99                   	cdq    
c00120fe:	52                   	push   edx
c00120ff:	50                   	push   eax
c0012100:	ff 33                	push   DWORD PTR [ebx]
c0012102:	e8 ed 91 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0012107:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012109:	5a                   	pop    edx
c001210a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001210e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012110:	51                   	push   ecx
c0012111:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012115:	6a 00                	push   0x0
c0012117:	6a 2b                	push   0x2b
c0012119:	50                   	push   eax
c001211a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001211d:	83 c4 20             	add    esp,0x20
c0012120:	83 c4 18             	add    esp,0x18
c0012123:	5b                   	pop    ebx
c0012124:	c3                   	ret    

c0012125 <CmGetString(Reghive_Tag*, int, char*)>:
c0012125:	55                   	push   ebp
c0012126:	57                   	push   edi
c0012127:	56                   	push   esi
c0012128:	53                   	push   ebx
c0012129:	31 db                	xor    ebx,ebx
c001212b:	83 ec 70             	sub    esp,0x70
c001212e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012132:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012139:	50                   	push   eax
c001213a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012141:	55                   	push   ebp
c0012142:	e8 a2 ff ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012147:	83 c4 10             	add    esp,0x10
c001214a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001214f:	c1 e0 08             	shl    eax,0x8
c0012152:	89 c2                	mov    edx,eax
c0012154:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012159:	09 d0                	or     eax,edx
c001215b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012160:	c1 e0 08             	shl    eax,0x8
c0012163:	09 d0                	or     eax,edx
c0012165:	74 25                	je     c001218c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012167:	52                   	push   edx
c0012168:	8d 54 24 39          	lea    edx,[esp+0x39]
c001216c:	52                   	push   edx
c001216d:	6b fb 0d             	imul   edi,ebx,0xd
c0012170:	50                   	push   eax
c0012171:	55                   	push   ebp
c0012172:	e8 72 ff ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012177:	8d 74 24 49          	lea    esi,[esp+0x49]
c001217b:	b9 27 00 00 00       	mov    ecx,0x27
c0012180:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	83 c3 03             	add    ebx,0x3
c001218f:	83 fb 15             	cmp    ebx,0x15
c0012192:	75 b6                	jne    c001214a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012194:	83 c4 6c             	add    esp,0x6c
c0012197:	5b                   	pop    ebx
c0012198:	5e                   	pop    esi
c0012199:	5f                   	pop    edi
c001219a:	5d                   	pop    ebp
c001219b:	c3                   	ret    

c001219c <CmEnterDirectory(Reghive_Tag*, int)>:
c001219c:	83 ec 40             	sub    esp,0x40
c001219f:	8d 44 24 09          	lea    eax,[esp+0x9]
c00121a3:	50                   	push   eax
c00121a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121ac:	e8 38 ff ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121b1:	83 c4 10             	add    esp,0x10
c00121b4:	83 c8 ff             	or     eax,0xffffffff
c00121b7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00121bc:	75 19                	jne    c00121d7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00121be:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00121c3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00121c8:	c1 e0 08             	shl    eax,0x8
c00121cb:	09 c2                	or     edx,eax
c00121cd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00121d2:	c1 e0 10             	shl    eax,0x10
c00121d5:	09 d0                	or     eax,edx
c00121d7:	83 c4 3c             	add    esp,0x3c
c00121da:	c3                   	ret    

c00121db <CmGetNext(Reghive_Tag*, int)>:
c00121db:	83 ec 40             	sub    esp,0x40
c00121de:	8d 44 24 09          	lea    eax,[esp+0x9]
c00121e2:	50                   	push   eax
c00121e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00121eb:	e8 f9 fe ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121f0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00121f5:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00121fa:	c1 e0 08             	shl    eax,0x8
c00121fd:	09 c2                	or     edx,eax
c00121ff:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012204:	83 c4 4c             	add    esp,0x4c
c0012207:	c1 e0 10             	shl    eax,0x10
c001220a:	09 d0                	or     eax,edx
c001220c:	c3                   	ret    

c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001220d:	53                   	push   ebx
c001220e:	83 ec 18             	sub    esp,0x18
c0012211:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012215:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012219:	74 29                	je     c0012244 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001221b:	50                   	push   eax
c001221c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012221:	99                   	cdq    
c0012222:	52                   	push   edx
c0012223:	50                   	push   eax
c0012224:	ff 33                	push   DWORD PTR [ebx]
c0012226:	e8 c9 90 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001222b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001222d:	5a                   	pop    edx
c001222e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012232:	8b 10                	mov    edx,DWORD PTR [eax]
c0012234:	51                   	push   ecx
c0012235:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012239:	6a 00                	push   0x0
c001223b:	6a 2b                	push   0x2b
c001223d:	50                   	push   eax
c001223e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012241:	83 c4 20             	add    esp,0x20
c0012244:	83 c4 18             	add    esp,0x18
c0012247:	5b                   	pop    ebx
c0012248:	c3                   	ret    

c0012249 <CmFreeExtent(Reghive_Tag*, int)>:
c0012249:	53                   	push   ebx
c001224a:	83 ec 3c             	sub    esp,0x3c
c001224d:	6a 2b                	push   0x2b
c001224f:	6a 00                	push   0x0
c0012251:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012255:	53                   	push   ebx
c0012256:	e8 95 e2 fe ff       	call   c00004f0 <memset>
c001225b:	83 c4 0c             	add    esp,0xc
c001225e:	53                   	push   ebx
c001225f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012263:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012267:	e8 a1 ff ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001226c:	83 c4 48             	add    esp,0x48
c001226f:	5b                   	pop    ebx
c0012270:	c3                   	ret    

c0012271 <CmUpdateHeader(Reghive_Tag*)>:
c0012271:	83 ec 0c             	sub    esp,0xc
c0012274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012278:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001227c:	74 10                	je     c001228e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001227e:	52                   	push   edx
c001227f:	8d 50 05             	lea    edx,[eax+0x5]
c0012282:	52                   	push   edx
c0012283:	6a 00                	push   0x0
c0012285:	50                   	push   eax
c0012286:	e8 82 ff ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	83 c4 0c             	add    esp,0xc
c0012291:	c3                   	ret    

c0012292 <CmExpand(Reghive_Tag*, int)>:
c0012292:	55                   	push   ebp
c0012293:	57                   	push   edi
c0012294:	83 cf ff             	or     edi,0xffffffff
c0012297:	56                   	push   esi
c0012298:	53                   	push   ebx
c0012299:	83 ec 3c             	sub    esp,0x3c
c001229c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00122a0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00122a4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00122a8:	74 59                	je     c0012303 <CmExpand(Reghive_Tag*, int)+0x71>
c00122aa:	50                   	push   eax
c00122ab:	31 d2                	xor    edx,edx
c00122ad:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00122b1:	31 ff                	xor    edi,edi
c00122b3:	52                   	push   edx
c00122b4:	50                   	push   eax
c00122b5:	ff 33                	push   DWORD PTR [ebx]
c00122b7:	e8 38 90 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00122bc:	83 c4 0c             	add    esp,0xc
c00122bf:	6a 2b                	push   0x2b
c00122c1:	6a 00                	push   0x0
c00122c3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00122c7:	55                   	push   ebp
c00122c8:	e8 23 e2 fe ff       	call   c00004f0 <memset>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	39 f7                	cmp    edi,esi
c00122d2:	7d 1b                	jge    c00122ef <CmExpand(Reghive_Tag*, int)+0x5d>
c00122d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122d6:	83 ec 0c             	sub    esp,0xc
c00122d9:	47                   	inc    edi
c00122da:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00122de:	8b 10                	mov    edx,DWORD PTR [eax]
c00122e0:	51                   	push   ecx
c00122e1:	55                   	push   ebp
c00122e2:	6a 00                	push   0x0
c00122e4:	6a 2b                	push   0x2b
c00122e6:	50                   	push   eax
c00122e7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00122ea:	83 c4 20             	add    esp,0x20
c00122ed:	eb e1                	jmp    c00122d0 <CmExpand(Reghive_Tag*, int)+0x3e>
c00122ef:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c00122f2:	83 ec 0c             	sub    esp,0xc
c00122f5:	01 fe                	add    esi,edi
c00122f7:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c00122fa:	53                   	push   ebx
c00122fb:	e8 71 ff ff ff       	call   c0012271 <CmUpdateHeader(Reghive_Tag*)>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	83 c4 3c             	add    esp,0x3c
c0012306:	89 f8                	mov    eax,edi
c0012308:	5b                   	pop    ebx
c0012309:	5e                   	pop    esi
c001230a:	5f                   	pop    edi
c001230b:	5d                   	pop    ebp
c001230c:	c3                   	ret    

c001230d <CmFindUnusedExtent(Reghive_Tag*)>:
c001230d:	55                   	push   ebp
c001230e:	57                   	push   edi
c001230f:	56                   	push   esi
c0012310:	53                   	push   ebx
c0012311:	83 cb ff             	or     ebx,0xffffffff
c0012314:	83 ec 1c             	sub    esp,0x1c
c0012317:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001231b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001231f:	74 68                	je     c0012389 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012321:	51                   	push   ecx
c0012322:	be 2b 00 00 00       	mov    esi,0x2b
c0012327:	6a 00                	push   0x0
c0012329:	31 ff                	xor    edi,edi
c001232b:	6a 00                	push   0x0
c001232d:	31 db                	xor    ebx,ebx
c001232f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012332:	e8 bd 8f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001233d:	76 3b                	jbe    c001237a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001233f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012342:	83 ec 0c             	sub    esp,0xc
c0012345:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012349:	8b 10                	mov    edx,DWORD PTR [eax]
c001234b:	51                   	push   ecx
c001234c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012350:	51                   	push   ecx
c0012351:	6a 00                	push   0x0
c0012353:	6a 01                	push   0x1
c0012355:	50                   	push   eax
c0012356:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012359:	83 c4 20             	add    esp,0x20
c001235c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012361:	74 26                	je     c0012389 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012363:	52                   	push   edx
c0012364:	43                   	inc    ebx
c0012365:	57                   	push   edi
c0012366:	56                   	push   esi
c0012367:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001236a:	e8 85 8f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001236f:	83 c6 2b             	add    esi,0x2b
c0012372:	83 d7 00             	adc    edi,0x0
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	eb c0                	jmp    c001233a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001237a:	50                   	push   eax
c001237b:	50                   	push   eax
c001237c:	6a 40                	push   0x40
c001237e:	55                   	push   ebp
c001237f:	e8 0e ff ff ff       	call   c0012292 <CmExpand(Reghive_Tag*, int)>
c0012384:	83 c4 10             	add    esp,0x10
c0012387:	89 c3                	mov    ebx,eax
c0012389:	83 c4 1c             	add    esp,0x1c
c001238c:	89 d8                	mov    eax,ebx
c001238e:	5b                   	pop    ebx
c001238f:	5e                   	pop    esi
c0012390:	5f                   	pop    edi
c0012391:	5d                   	pop    ebp
c0012392:	c3                   	ret    

c0012393 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012393:	55                   	push   ebp
c0012394:	57                   	push   edi
c0012395:	56                   	push   esi
c0012396:	53                   	push   ebx
c0012397:	81 ec 88 00 00 00    	sub    esp,0x88
c001239d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00123a4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123ab:	e8 5d ff ff ff       	call   c001230d <CmFindUnusedExtent(Reghive_Tag*)>
c00123b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123b4:	83 c4 0c             	add    esp,0xc
c00123b7:	6a 2b                	push   0x2b
c00123b9:	6a 00                	push   0x0
c00123bb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00123bf:	55                   	push   ebp
c00123c0:	e8 2b e1 fe ff       	call   c00004f0 <memset>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	85 db                	test   ebx,ebx
c00123ca:	74 12                	je     c00123de <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00123cc:	51                   	push   ecx
c00123cd:	55                   	push   ebp
c00123ce:	53                   	push   ebx
c00123cf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123d6:	e8 0e fd ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00123e2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00123e9:	b9 2b 00 00 00       	mov    ecx,0x2b
c00123ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00123f0:	85 db                	test   ebx,ebx
c00123f2:	74 49                	je     c001243d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00123f4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00123f9:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00123fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012402:	c1 e0 08             	shl    eax,0x8
c0012405:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001240b:	09 c8                	or     eax,ecx
c001240d:	74 11                	je     c0012420 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001240f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012413:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012417:	c1 e8 10             	shr    eax,0x10
c001241a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001241e:	eb 0f                	jmp    c001242f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012420:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012425:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001242a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001242f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012433:	c1 ea 08             	shr    edx,0x8
c0012436:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001243b:	eb 0f                	jmp    c001244c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001243d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012442:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012447:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001244c:	52                   	push   edx
c001244d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012451:	50                   	push   eax
c0012452:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012456:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001245d:	e8 ab fd ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	85 db                	test   ebx,ebx
c0012467:	74 12                	je     c001247b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012469:	50                   	push   eax
c001246a:	55                   	push   ebp
c001246b:	53                   	push   ebx
c001246c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012473:	e8 95 fd ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001247f:	83 c4 7c             	add    esp,0x7c
c0012482:	5b                   	pop    ebx
c0012483:	5e                   	pop    esi
c0012484:	5f                   	pop    edi
c0012485:	5d                   	pop    ebp
c0012486:	c3                   	ret    

c0012487 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012487:	55                   	push   ebp
c0012488:	57                   	push   edi
c0012489:	56                   	push   esi
c001248a:	53                   	push   ebx
c001248b:	bb 27 00 00 00       	mov    ebx,0x27
c0012490:	81 ec 88 00 00 00    	sub    esp,0x88
c0012496:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c001249d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00124a4:	e8 d7 e0 fe ff       	call   c0000580 <strlen>
c00124a9:	8d 48 26             	lea    ecx,[eax+0x26]
c00124ac:	89 c8                	mov    eax,ecx
c00124ae:	99                   	cdq    
c00124af:	f7 fb                	idiv   ebx
c00124b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124b5:	83 c4 10             	add    esp,0x10
c00124b8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00124be:	7e 10                	jle    c00124d0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	68 80 15 02 c0       	push   0xc0021580
c00124c8:	e8 50 e6 ff ff       	call   c0010b1d <KePanic(char const*)>
c00124cd:	83 c4 10             	add    esp,0x10
c00124d0:	53                   	push   ebx
c00124d1:	31 ed                	xor    ebp,ebp
c00124d3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00124d7:	53                   	push   ebx
c00124d8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124df:	57                   	push   edi
c00124e0:	e8 04 fc ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00124ec:	89 f0                	mov    eax,esi
c00124ee:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00124f2:	c1 e0 08             	shl    eax,0x8
c00124f5:	09 c6                	or     esi,eax
c00124f7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00124fb:	c1 e6 08             	shl    esi,0x8
c00124fe:	09 c6                	or     esi,eax
c0012500:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012504:	7e 72                	jle    c0012578 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012506:	85 f6                	test   esi,esi
c0012508:	75 25                	jne    c001252f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001250a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001250f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012513:	50                   	push   eax
c0012514:	6a 00                	push   0x0
c0012516:	6a 00                	push   0x0
c0012518:	57                   	push   edi
c0012519:	e8 75 fe ff ff       	call   c0012393 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001251e:	83 c4 10             	add    esp,0x10
c0012521:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012524:	89 c6                	mov    esi,eax
c0012526:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012529:	c1 f8 10             	sar    eax,0x10
c001252c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001252f:	51                   	push   ecx
c0012530:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012534:	52                   	push   edx
c0012535:	56                   	push   esi
c0012536:	57                   	push   edi
c0012537:	e8 ad fb ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001253c:	83 c4 0c             	add    esp,0xc
c001253f:	6a 27                	push   0x27
c0012541:	6a 00                	push   0x0
c0012543:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012547:	51                   	push   ecx
c0012548:	e8 a3 df fe ff       	call   c00004f0 <memset>
c001254d:	6b c5 27             	imul   eax,ebp,0x27
c0012550:	83 c4 0c             	add    esp,0xc
c0012553:	6a 27                	push   0x27
c0012555:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001255c:	50                   	push   eax
c001255d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012561:	51                   	push   ecx
c0012562:	e8 29 e1 fe ff       	call   c0000690 <strncpy>
c0012567:	83 c4 0c             	add    esp,0xc
c001256a:	8d 54 24 49          	lea    edx,[esp+0x49]
c001256e:	52                   	push   edx
c001256f:	56                   	push   esi
c0012570:	57                   	push   edi
c0012571:	e8 97 fc ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012576:	eb 19                	jmp    c0012591 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012578:	85 f6                	test   esi,esi
c001257a:	74 18                	je     c0012594 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c001257c:	52                   	push   edx
c001257d:	52                   	push   edx
c001257e:	56                   	push   esi
c001257f:	57                   	push   edi
c0012580:	e8 c4 fc ff ff       	call   c0012249 <CmFreeExtent(Reghive_Tag*, int)>
c0012585:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012589:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c001258d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	45                   	inc    ebp
c0012595:	83 c3 03             	add    ebx,0x3
c0012598:	83 fd 07             	cmp    ebp,0x7
c001259b:	0f 85 47 ff ff ff    	jne    c00124e8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00125a1:	50                   	push   eax
c00125a2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00125a6:	50                   	push   eax
c00125a7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00125ae:	57                   	push   edi
c00125af:	e8 59 fc ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00125b4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00125ba:	5b                   	pop    ebx
c00125bb:	5e                   	pop    esi
c00125bc:	5f                   	pop    edi
c00125bd:	5d                   	pop    ebp
c00125be:	c3                   	ret    

c00125bf <CmGetMatch(char*, char*, bool, bool*)>:
c00125bf:	56                   	push   esi
c00125c0:	53                   	push   ebx
c00125c1:	50                   	push   eax
c00125c2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00125c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00125cb:	74 25                	je     c00125f2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00125cd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00125d0:	31 db                	xor    ebx,ebx
c00125d2:	50                   	push   eax
c00125d3:	50                   	push   eax
c00125d4:	8d 04 9d 20 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd5e0]
c00125db:	50                   	push   eax
c00125dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e0:	e8 9b e1 fe ff       	call   c0000780 <strcmp>
c00125e5:	83 c4 10             	add    esp,0x10
c00125e8:	85 c0                	test   eax,eax
c00125ea:	74 2e                	je     c001261a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00125ec:	43                   	inc    ebx
c00125ed:	83 fb 3f             	cmp    ebx,0x3f
c00125f0:	75 e0                	jne    c00125d2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00125f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125f5:	31 db                	xor    ebx,ebx
c00125f7:	51                   	push   ecx
c00125f8:	51                   	push   ecx
c00125f9:	8d 04 9d 20 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd5e0]
c0012600:	50                   	push   eax
c0012601:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012605:	e8 76 e1 fe ff       	call   c0000780 <strcmp>
c001260a:	83 c4 10             	add    esp,0x10
c001260d:	85 c0                	test   eax,eax
c001260f:	74 09                	je     c001261a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012611:	43                   	inc    ebx
c0012612:	83 fb 3f             	cmp    ebx,0x3f
c0012615:	75 e0                	jne    c00125f7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012617:	83 cb ff             	or     ebx,0xffffffff
c001261a:	5a                   	pop    edx
c001261b:	89 d8                	mov    eax,ebx
c001261d:	5b                   	pop    ebx
c001261e:	5e                   	pop    esi
c001261f:	c3                   	ret    

c0012620 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012620:	55                   	push   ebp
c0012621:	31 c0                	xor    eax,eax
c0012623:	57                   	push   edi
c0012624:	56                   	push   esi
c0012625:	53                   	push   ebx
c0012626:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001262a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001262e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012632:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012636:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012638:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001263b:	83 fd 1f             	cmp    ebp,0x1f
c001263e:	7f 0b                	jg     c001264b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012640:	0f b6 c2             	movzx  eax,dl
c0012643:	d3 e0                	shl    eax,cl
c0012645:	09 07                	or     DWORD PTR [edi],eax
c0012647:	b0 01                	mov    al,0x1
c0012649:	01 33                	add    DWORD PTR [ebx],esi
c001264b:	5b                   	pop    ebx
c001264c:	5e                   	pop    esi
c001264d:	5f                   	pop    edi
c001264e:	5d                   	pop    ebp
c001264f:	c3                   	ret    

c0012650 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012650:	57                   	push   edi
c0012651:	56                   	push   esi
c0012652:	53                   	push   ebx
c0012653:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012657:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001265b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001265f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012663:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012665:	7c 17                	jl     c001267e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012667:	8b 17                	mov    edx,DWORD PTR [edi]
c0012669:	b8 01 00 00 00       	mov    eax,0x1
c001266e:	d3 e0                	shl    eax,cl
c0012670:	48                   	dec    eax
c0012671:	21 d0                	and    eax,edx
c0012673:	d3 ea                	shr    edx,cl
c0012675:	89 17                	mov    DWORD PTR [edi],edx
c0012677:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012679:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001267c:	eb 05                	jmp    c0012683 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001267e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012681:	31 c0                	xor    eax,eax
c0012683:	5b                   	pop    ebx
c0012684:	5e                   	pop    esi
c0012685:	5f                   	pop    edi
c0012686:	c3                   	ret    

c0012687 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012687:	83 ec 40             	sub    esp,0x40
c001268a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001268e:	50                   	push   eax
c001268f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012693:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012697:	e8 4d fa ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001269c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00126a0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00126a4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00126a8:	89 10                	mov    DWORD PTR [eax],edx
c00126aa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00126ad:	83 c4 4c             	add    esp,0x4c
c00126b0:	c3                   	ret    

c00126b1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00126b1:	55                   	push   ebp
c00126b2:	57                   	push   edi
c00126b3:	56                   	push   esi
c00126b4:	53                   	push   ebx
c00126b5:	83 ec 40             	sub    esp,0x40
c00126b8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00126bc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00126c0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00126c4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00126c8:	53                   	push   ebx
c00126c9:	56                   	push   esi
c00126ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126ce:	e8 16 fa ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126d3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00126d7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00126db:	83 c4 0c             	add    esp,0xc
c00126de:	53                   	push   ebx
c00126df:	56                   	push   esi
c00126e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126e4:	e8 24 fb ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00126e9:	83 c4 4c             	add    esp,0x4c
c00126ec:	5b                   	pop    ebx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	5d                   	pop    ebp
c00126f0:	c3                   	ret    

c00126f1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00126f1:	55                   	push   ebp
c00126f2:	57                   	push   edi
c00126f3:	56                   	push   esi
c00126f4:	31 f6                	xor    esi,esi
c00126f6:	53                   	push   ebx
c00126f7:	31 db                	xor    ebx,ebx
c00126f9:	83 ec 40             	sub    esp,0x40
c00126fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012704:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001270c:	6a 12                	push   0x12
c001270e:	68 ee 00 00 00       	push   0xee
c0012713:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012717:	e8 d4 dd fe ff       	call   c00004f0 <memset>
c001271c:	83 c4 10             	add    esp,0x10
c001271f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012723:	6a 08                	push   0x8
c0012725:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012729:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001272d:	50                   	push   eax
c001272e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012732:	55                   	push   ebp
c0012733:	57                   	push   edi
c0012734:	e8 e7 fe ff ff       	call   c0012620 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012739:	83 c4 10             	add    esp,0x10
c001273c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012740:	50                   	push   eax
c0012741:	6a 06                	push   0x6
c0012743:	55                   	push   ebp
c0012744:	57                   	push   edi
c0012745:	e8 06 ff ff ff       	call   c0012650 <CmGetShift(unsigned int*, int*, int, bool*)>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012752:	74 07                	je     c001275b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012754:	46                   	inc    esi
c0012755:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012759:	eb e1                	jmp    c001273c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001275b:	43                   	inc    ebx
c001275c:	83 fb 12             	cmp    ebx,0x12
c001275f:	75 c2                	jne    c0012723 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012761:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012765:	31 f6                	xor    esi,esi
c0012767:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001276a:	50                   	push   eax
c001276b:	50                   	push   eax
c001276c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012771:	46                   	inc    esi
c0012772:	8d 04 85 20 2a 02 c0 	lea    eax,[eax*4-0x3ffdd5e0]
c0012779:	50                   	push   eax
c001277a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001277e:	e8 ed e0 fe ff       	call   c0000870 <strcat>
c0012783:	83 c4 10             	add    esp,0x10
c0012786:	83 fe 18             	cmp    esi,0x18
c0012789:	75 df                	jne    c001276a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001278b:	83 c4 3c             	add    esp,0x3c
c001278e:	31 c0                	xor    eax,eax
c0012790:	5b                   	pop    ebx
c0012791:	5e                   	pop    esi
c0012792:	5f                   	pop    edi
c0012793:	5d                   	pop    ebp
c0012794:	c3                   	ret    

c0012795 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012795:	83 ec 40             	sub    esp,0x40
c0012798:	8d 44 24 09          	lea    eax,[esp+0x9]
c001279c:	50                   	push   eax
c001279d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00127a5:	e8 3f f9 ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127aa:	58                   	pop    eax
c00127ab:	5a                   	pop    edx
c00127ac:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00127b0:	8d 44 24 15          	lea    eax,[esp+0x15]
c00127b4:	50                   	push   eax
c00127b5:	e8 37 ff ff ff       	call   c00126f1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00127ba:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00127bf:	83 c4 4c             	add    esp,0x4c
c00127c2:	c3                   	ret    

c00127c3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00127c3:	55                   	push   ebp
c00127c4:	57                   	push   edi
c00127c5:	56                   	push   esi
c00127c6:	53                   	push   ebx
c00127c7:	31 db                	xor    ebx,ebx
c00127c9:	83 ec 70             	sub    esp,0x70
c00127cc:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00127d3:	6a 30                	push   0x30
c00127d5:	6a 00                	push   0x0
c00127d7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00127db:	56                   	push   esi
c00127dc:	e8 0f dd fe ff       	call   c00004f0 <memset>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	83 ec 0c             	sub    esp,0xc
c00127e7:	57                   	push   edi
c00127e8:	e8 93 dd fe ff       	call   c0000580 <strlen>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	39 d8                	cmp    eax,ebx
c00127f2:	76 16                	jbe    c001280a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00127f4:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00127f8:	83 ec 0c             	sub    esp,0xc
c00127fb:	50                   	push   eax
c00127fc:	e8 5f e1 fe ff       	call   c0000960 <toupper>
c0012801:	83 c4 10             	add    esp,0x10
c0012804:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012807:	43                   	inc    ebx
c0012808:	eb da                	jmp    c00127e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001280a:	52                   	push   edx
c001280b:	31 db                	xor    ebx,ebx
c001280d:	6a 18                	push   0x18
c001280f:	31 ff                	xor    edi,edi
c0012811:	6a 3f                	push   0x3f
c0012813:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012817:	50                   	push   eax
c0012818:	e8 d3 dc fe ff       	call   c00004f0 <memset>
c001281d:	83 c4 10             	add    esp,0x10
c0012820:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012824:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012828:	84 c0                	test   al,al
c001282a:	0f 84 af 00 00 00    	je     c00128df <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012830:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012834:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012837:	83 ec 0c             	sub    esp,0xc
c001283a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001283f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012843:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012847:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001284c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012850:	56                   	push   esi
c0012851:	e8 2a dd fe ff       	call   c0000580 <strlen>
c0012856:	83 c4 10             	add    esp,0x10
c0012859:	85 c0                	test   eax,eax
c001285b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001285f:	74 0b                	je     c001286c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012861:	50                   	push   eax
c0012862:	6a 01                	push   0x1
c0012864:	56                   	push   esi
c0012865:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012869:	50                   	push   eax
c001286a:	eb 0a                	jmp    c0012876 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001286c:	50                   	push   eax
c001286d:	6a 00                	push   0x0
c001286f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012873:	50                   	push   eax
c0012874:	6a 00                	push   0x0
c0012876:	e8 44 fd ff ff       	call   c00125bf <CmGetMatch(char*, char*, bool, bool*)>
c001287b:	83 c4 10             	add    esp,0x10
c001287e:	83 f8 ff             	cmp    eax,0xffffffff
c0012881:	75 1a                	jne    c001289d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012883:	83 ec 0c             	sub    esp,0xc
c0012886:	68 95 15 02 c0       	push   0xc0021595
c001288b:	e8 8d e2 ff ff       	call   c0010b1d <KePanic(char const*)>
c0012890:	83 c4 10             	add    esp,0x10
c0012893:	b8 02 00 00 00       	mov    eax,0x2
c0012898:	e9 bb 00 00 00       	jmp    c0012958 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001289d:	83 ff 18             	cmp    edi,0x18
c00128a0:	75 1a                	jne    c00128bc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	68 aa 15 02 c0       	push   0xc00215aa
c00128aa:	e8 6e e2 ff ff       	call   c0010b1d <KePanic(char const*)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	b8 01 00 00 00       	mov    eax,0x1
c00128b7:	e9 9c 00 00 00       	jmp    c0012958 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00128bc:	47                   	inc    edi
c00128bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00128c2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00128c6:	0f 45 dd             	cmovne ebx,ebp
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	56                   	push   esi
c00128cd:	e8 ae dc fe ff       	call   c0000580 <strlen>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	85 c0                	test   eax,eax
c00128d7:	74 06                	je     c00128df <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00128d9:	43                   	inc    ebx
c00128da:	e9 41 ff ff ff       	jmp    c0012820 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00128df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00128e7:	31 db                	xor    ebx,ebx
c00128e9:	31 ff                	xor    edi,edi
c00128eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00128f3:	50                   	push   eax
c00128f4:	6a 12                	push   0x12
c00128f6:	68 ee 00 00 00       	push   0xee
c00128fb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012902:	e8 e9 db fe ff       	call   c00004f0 <memset>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001290e:	83 fb 17             	cmp    ebx,0x17
c0012911:	7e 26                	jle    c0012939 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012913:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012917:	50                   	push   eax
c0012918:	6a 08                	push   0x8
c001291a:	55                   	push   ebp
c001291b:	56                   	push   esi
c001291c:	e8 2f fd ff ff       	call   c0012650 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012929:	74 26                	je     c0012951 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001292b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012932:	4b                   	dec    ebx
c0012933:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012936:	47                   	inc    edi
c0012937:	eb 1c                	jmp    c0012955 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012939:	6a 06                	push   0x6
c001293b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012940:	50                   	push   eax
c0012941:	55                   	push   ebp
c0012942:	56                   	push   esi
c0012943:	e8 d8 fc ff ff       	call   c0012620 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	84 c0                	test   al,al
c001294d:	75 06                	jne    c0012955 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001294f:	eb c2                	jmp    c0012913 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012951:	31 c0                	xor    eax,eax
c0012953:	eb 03                	jmp    c0012958 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012955:	43                   	inc    ebx
c0012956:	eb b2                	jmp    c001290a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012958:	83 c4 6c             	add    esp,0x6c
c001295b:	5b                   	pop    ebx
c001295c:	5e                   	pop    esi
c001295d:	5f                   	pop    edi
c001295e:	5d                   	pop    ebp
c001295f:	c3                   	ret    

c0012960 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012960:	53                   	push   ebx
c0012961:	83 ec 3c             	sub    esp,0x3c
c0012964:	6a 2b                	push   0x2b
c0012966:	6a 00                	push   0x0
c0012968:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001296c:	53                   	push   ebx
c001296d:	e8 7e db fe ff       	call   c00004f0 <memset>
c0012972:	58                   	pop    eax
c0012973:	5a                   	pop    edx
c0012974:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012978:	50                   	push   eax
c0012979:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001297d:	e8 41 fe ff ff       	call   c00127c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012982:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012987:	83 c4 0c             	add    esp,0xc
c001298a:	6a 15                	push   0x15
c001298c:	6a 00                	push   0x0
c001298e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012992:	50                   	push   eax
c0012993:	e8 58 db fe ff       	call   c00004f0 <memset>
c0012998:	53                   	push   ebx
c0012999:	6a 00                	push   0x0
c001299b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001299f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00129a3:	e8 eb f9 ff ff       	call   c0012393 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00129a8:	83 c4 58             	add    esp,0x58
c00129ab:	5b                   	pop    ebx
c00129ac:	c3                   	ret    

c00129ad <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00129ad:	56                   	push   esi
c00129ae:	53                   	push   ebx
c00129af:	83 ec 48             	sub    esp,0x48
c00129b2:	6a 12                	push   0x12
c00129b4:	68 ff 00 00 00       	push   0xff
c00129b9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00129bd:	56                   	push   esi
c00129be:	e8 2d db fe ff       	call   c00004f0 <memset>
c00129c3:	5a                   	pop    edx
c00129c4:	59                   	pop    ecx
c00129c5:	56                   	push   esi
c00129c6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00129ca:	e8 f4 fd ff ff       	call   c00127c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00129cf:	83 c4 10             	add    esp,0x10
c00129d2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00129d6:	85 db                	test   ebx,ebx
c00129d8:	74 42                	je     c0012a1c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00129da:	50                   	push   eax
c00129db:	8d 44 24 19          	lea    eax,[esp+0x19]
c00129df:	50                   	push   eax
c00129e0:	53                   	push   ebx
c00129e1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00129e5:	e8 ff f6 ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129ea:	83 c4 0c             	add    esp,0xc
c00129ed:	6a 12                	push   0x12
c00129ef:	8d 44 24 21          	lea    eax,[esp+0x21]
c00129f3:	50                   	push   eax
c00129f4:	56                   	push   esi
c00129f5:	e8 86 d9 fe ff       	call   c0000380 <memcmp>
c00129fa:	83 c4 10             	add    esp,0x10
c00129fd:	85 c0                	test   eax,eax
c00129ff:	74 1e                	je     c0012a1f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012a01:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012a06:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012a0b:	c1 e3 08             	shl    ebx,0x8
c0012a0e:	09 d8                	or     eax,ebx
c0012a10:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012a15:	c1 e3 10             	shl    ebx,0x10
c0012a18:	09 c3                	or     ebx,eax
c0012a1a:	eb ba                	jmp    c00129d6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012a1c:	83 cb ff             	or     ebx,0xffffffff
c0012a1f:	83 c4 44             	add    esp,0x44
c0012a22:	89 d8                	mov    eax,ebx
c0012a24:	5b                   	pop    ebx
c0012a25:	5e                   	pop    esi
c0012a26:	c3                   	ret    

c0012a27 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012a27:	57                   	push   edi
c0012a28:	56                   	push   esi
c0012a29:	53                   	push   ebx
c0012a2a:	83 ec 34             	sub    esp,0x34
c0012a2d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012a31:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012a35:	6a 2b                	push   0x2b
c0012a37:	6a 00                	push   0x0
c0012a39:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a3d:	53                   	push   ebx
c0012a3e:	e8 ad da fe ff       	call   c00004f0 <memset>
c0012a43:	58                   	pop    eax
c0012a44:	5a                   	pop    edx
c0012a45:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a49:	50                   	push   eax
c0012a4a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a4e:	e8 70 fd ff ff       	call   c00127c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a53:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012a57:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012a5b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012a5f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012a63:	53                   	push   ebx
c0012a64:	6a 00                	push   0x0
c0012a66:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a6a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a6e:	e8 20 f9 ff ff       	call   c0012393 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012a73:	83 c4 50             	add    esp,0x50
c0012a76:	5b                   	pop    ebx
c0012a77:	5e                   	pop    esi
c0012a78:	5f                   	pop    edi
c0012a79:	c3                   	ret    

c0012a7a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 40             	sub    esp,0x40
c0012a81:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012a85:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012a89:	6a 2b                	push   0x2b
c0012a8b:	6a 00                	push   0x0
c0012a8d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012a91:	56                   	push   esi
c0012a92:	e8 59 da fe ff       	call   c00004f0 <memset>
c0012a97:	5f                   	pop    edi
c0012a98:	89 ef                	mov    edi,ebp
c0012a9a:	58                   	pop    eax
c0012a9b:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a9f:	50                   	push   eax
c0012aa0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012aa4:	e8 1a fd ff ff       	call   c00127c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012aa9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012aae:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012ab3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012ab8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012abd:	83 c4 10             	add    esp,0x10
c0012ac0:	85 ed                	test   ebp,ebp
c0012ac2:	74 14                	je     c0012ad8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012ac4:	51                   	push   ecx
c0012ac5:	51                   	push   ecx
c0012ac6:	57                   	push   edi
c0012ac7:	53                   	push   ebx
c0012ac8:	e8 0e f7 ff ff       	call   c00121db <CmGetNext(Reghive_Tag*, int)>
c0012acd:	83 c4 10             	add    esp,0x10
c0012ad0:	85 c0                	test   eax,eax
c0012ad2:	74 04                	je     c0012ad8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012ad4:	89 c7                	mov    edi,eax
c0012ad6:	eb e8                	jmp    c0012ac0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012ad8:	56                   	push   esi
c0012ad9:	6a 00                	push   0x0
c0012adb:	57                   	push   edi
c0012adc:	53                   	push   ebx
c0012add:	e8 b1 f8 ff ff       	call   c0012393 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012ae2:	83 c4 0c             	add    esp,0xc
c0012ae5:	56                   	push   esi
c0012ae6:	50                   	push   eax
c0012ae7:	89 c7                	mov    edi,eax
c0012ae9:	53                   	push   ebx
c0012aea:	e8 fa f5 ff ff       	call   c00120e9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012aef:	58                   	pop    eax
c0012af0:	5a                   	pop    edx
c0012af1:	6a 6c                	push   0x6c
c0012af3:	6a 00                	push   0x0
c0012af5:	6a 00                	push   0x0
c0012af7:	68 bb 15 02 c0       	push   0xc00215bb
c0012afc:	57                   	push   edi
c0012afd:	53                   	push   ebx
c0012afe:	e8 24 ff ff ff       	call   c0012a27 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012b03:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012b07:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012b0b:	c1 e8 10             	shr    eax,0x10
c0012b0e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012b12:	83 c4 1c             	add    esp,0x1c
c0012b15:	56                   	push   esi
c0012b16:	57                   	push   edi
c0012b17:	53                   	push   ebx
c0012b18:	e8 f0 f6 ff ff       	call   c001220d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012b22:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012b27:	c1 e0 08             	shl    eax,0x8
c0012b2a:	09 c2                	or     edx,eax
c0012b2c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012b31:	83 c4 4c             	add    esp,0x4c
c0012b34:	5b                   	pop    ebx
c0012b35:	5e                   	pop    esi
c0012b36:	c1 e0 10             	shl    eax,0x10
c0012b39:	09 d0                	or     eax,edx
c0012b3b:	5f                   	pop    edi
c0012b3c:	5d                   	pop    ebp
c0012b3d:	c3                   	ret    

c0012b3e <zStrtok(char*, char const*)>:
c0012b3e:	55                   	push   ebp
c0012b3f:	57                   	push   edi
c0012b40:	56                   	push   esi
c0012b41:	53                   	push   ebx
c0012b42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012b46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b4a:	85 db                	test   ebx,ebx
c0012b4c:	74 2f                	je     c0012b7d <zStrtok(char*, char const*)+0x3f>
c0012b4e:	85 c0                	test   eax,eax
c0012b50:	75 09                	jne    c0012b5b <zStrtok(char*, char const*)+0x1d>
c0012b52:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012b57:	85 c0                	test   eax,eax
c0012b59:	74 50                	je     c0012bab <zStrtok(char*, char const*)+0x6d>
c0012b5b:	31 c9                	xor    ecx,ecx
c0012b5d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012b61:	74 03                	je     c0012b66 <zStrtok(char*, char const*)+0x28>
c0012b63:	41                   	inc    ecx
c0012b64:	eb f7                	jmp    c0012b5d <zStrtok(char*, char const*)+0x1f>
c0012b66:	31 d2                	xor    edx,edx
c0012b68:	39 ca                	cmp    edx,ecx
c0012b6a:	74 15                	je     c0012b81 <zStrtok(char*, char const*)+0x43>
c0012b6c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012b70:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012b73:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012b76:	39 ee                	cmp    esi,ebp
c0012b78:	74 13                	je     c0012b8d <zStrtok(char*, char const*)+0x4f>
c0012b7a:	42                   	inc    edx
c0012b7b:	eb eb                	jmp    c0012b68 <zStrtok(char*, char const*)+0x2a>
c0012b7d:	31 c0                	xor    eax,eax
c0012b7f:	eb 2a                	jmp    c0012bab <zStrtok(char*, char const*)+0x6d>
c0012b81:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012b8b:	eb 1e                	jmp    c0012bab <zStrtok(char*, char const*)+0x6d>
c0012b8d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012b90:	39 ce                	cmp    esi,ecx
c0012b92:	75 0a                	jne    c0012b9e <zStrtok(char*, char const*)+0x60>
c0012b94:	40                   	inc    eax
c0012b95:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012b9a:	89 d8                	mov    eax,ebx
c0012b9c:	eb 0d                	jmp    c0012bab <zStrtok(char*, char const*)+0x6d>
c0012b9e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012ba1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012ba5:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012bab:	5b                   	pop    ebx
c0012bac:	5e                   	pop    esi
c0012bad:	5f                   	pop    edi
c0012bae:	5d                   	pop    ebp
c0012baf:	c3                   	ret    

c0012bb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012bb0:	57                   	push   edi
c0012bb1:	56                   	push   esi
c0012bb2:	53                   	push   ebx
c0012bb3:	81 ec 08 01 00 00    	sub    esp,0x108
c0012bb9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012bc0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012bc7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012bcb:	53                   	push   ebx
c0012bcc:	e8 7f da fe ff       	call   c0000650 <strcpy>
c0012bd1:	59                   	pop    ecx
c0012bd2:	5e                   	pop    esi
c0012bd3:	68 1f 19 02 c0       	push   0xc002191f
c0012bd8:	53                   	push   ebx
c0012bd9:	bb 01 00 00 00       	mov    ebx,0x1
c0012bde:	e8 5b ff ff ff       	call   c0012b3e <zStrtok(char*, char const*)>
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	85 c0                	test   eax,eax
c0012be8:	74 3b                	je     c0012c25 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012bea:	52                   	push   edx
c0012beb:	50                   	push   eax
c0012bec:	6a 01                	push   0x1
c0012bee:	57                   	push   edi
c0012bef:	e8 b9 fd ff ff       	call   c00129ad <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012bf4:	59                   	pop    ecx
c0012bf5:	5e                   	pop    esi
c0012bf6:	89 c3                	mov    ebx,eax
c0012bf8:	68 1f 19 02 c0       	push   0xc002191f
c0012bfd:	6a 00                	push   0x0
c0012bff:	e8 3a ff ff ff       	call   c0012b3e <zStrtok(char*, char const*)>
c0012c04:	83 c4 10             	add    esp,0x10
c0012c07:	85 c0                	test   eax,eax
c0012c09:	89 c6                	mov    esi,eax
c0012c0b:	74 18                	je     c0012c25 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c0d:	52                   	push   edx
c0012c0e:	52                   	push   edx
c0012c0f:	53                   	push   ebx
c0012c10:	57                   	push   edi
c0012c11:	e8 86 f5 ff ff       	call   c001219c <CmEnterDirectory(Reghive_Tag*, int)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	83 f8 ff             	cmp    eax,0xffffffff
c0012c1c:	89 c3                	mov    ebx,eax
c0012c1e:	74 05                	je     c0012c25 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c20:	50                   	push   eax
c0012c21:	56                   	push   esi
c0012c22:	53                   	push   ebx
c0012c23:	eb c9                	jmp    c0012bee <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012c25:	81 c4 00 01 00 00    	add    esp,0x100
c0012c2b:	89 d8                	mov    eax,ebx
c0012c2d:	5b                   	pop    ebx
c0012c2e:	5e                   	pop    esi
c0012c2f:	5f                   	pop    edi
c0012c30:	c3                   	ret    

c0012c31 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012c31:	55                   	push   ebp
c0012c32:	57                   	push   edi
c0012c33:	56                   	push   esi
c0012c34:	53                   	push   ebx
c0012c35:	83 ec 5c             	sub    esp,0x5c
c0012c38:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012c3c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012c40:	85 db                	test   ebx,ebx
c0012c42:	0f 8e 84 00 00 00    	jle    c0012ccc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012c48:	57                   	push   edi
c0012c49:	31 ed                	xor    ebp,ebp
c0012c4b:	6a 32                	push   0x32
c0012c4d:	6a 00                	push   0x0
c0012c4f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012c53:	57                   	push   edi
c0012c54:	e8 97 d8 fe ff       	call   c00004f0 <memset>
c0012c59:	83 c4 0c             	add    esp,0xc
c0012c5c:	57                   	push   edi
c0012c5d:	53                   	push   ebx
c0012c5e:	56                   	push   esi
c0012c5f:	e8 31 fb ff ff       	call   c0012795 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012c6f:	7d 13                	jge    c0012c84 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012c71:	83 ec 0c             	sub    esp,0xc
c0012c74:	45                   	inc    ebp
c0012c75:	68 c3 1c 02 c0       	push   0xc0021cc3
c0012c7a:	e8 7f 7c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	eb e7                	jmp    c0012c6b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012c84:	51                   	push   ecx
c0012c85:	57                   	push   edi
c0012c86:	53                   	push   ebx
c0012c87:	68 c1 15 02 c0       	push   0xc00215c1
c0012c8c:	e8 6d 7c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012c99:	75 1e                	jne    c0012cb9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012c9b:	52                   	push   edx
c0012c9c:	52                   	push   edx
c0012c9d:	53                   	push   ebx
c0012c9e:	56                   	push   esi
c0012c9f:	e8 f8 f4 ff ff       	call   c001219c <CmEnterDirectory(Reghive_Tag*, int)>
c0012ca4:	83 c4 0c             	add    esp,0xc
c0012ca7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012cab:	8d 51 04             	lea    edx,[ecx+0x4]
c0012cae:	52                   	push   edx
c0012caf:	50                   	push   eax
c0012cb0:	56                   	push   esi
c0012cb1:	e8 7b ff ff ff       	call   c0012c31 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012cb6:	83 c4 10             	add    esp,0x10
c0012cb9:	50                   	push   eax
c0012cba:	50                   	push   eax
c0012cbb:	53                   	push   ebx
c0012cbc:	56                   	push   esi
c0012cbd:	e8 19 f5 ff ff       	call   c00121db <CmGetNext(Reghive_Tag*, int)>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	89 c3                	mov    ebx,eax
c0012cc7:	e9 74 ff ff ff       	jmp    c0012c40 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012ccc:	83 c4 5c             	add    esp,0x5c
c0012ccf:	5b                   	pop    ebx
c0012cd0:	5e                   	pop    esi
c0012cd1:	5f                   	pop    edi
c0012cd2:	5d                   	pop    ebp
c0012cd3:	c3                   	ret    

c0012cd4 <CmSplitFinalSlashInPlace(char*)>:
c0012cd4:	53                   	push   ebx
c0012cd5:	83 ec 14             	sub    esp,0x14
c0012cd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012cdc:	53                   	push   ebx
c0012cdd:	e8 9e d8 fe ff       	call   c0000580 <strlen>
c0012ce2:	83 c4 10             	add    esp,0x10
c0012ce5:	48                   	dec    eax
c0012ce6:	85 c0                	test   eax,eax
c0012ce8:	74 15                	je     c0012cff <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012cea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012cee:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012cf1:	75 09                	jne    c0012cfc <CmSplitFinalSlashInPlace(char*)+0x28>
c0012cf3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012cf6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012cfa:	eb 05                	jmp    c0012d01 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012cfc:	48                   	dec    eax
c0012cfd:	eb e7                	jmp    c0012ce6 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012cff:	31 c0                	xor    eax,eax
c0012d01:	83 c4 08             	add    esp,0x8
c0012d04:	5b                   	pop    ebx
c0012d05:	c3                   	ret    

c0012d06 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012d06:	55                   	push   ebp
c0012d07:	57                   	push   edi
c0012d08:	56                   	push   esi
c0012d09:	53                   	push   ebx
c0012d0a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012d10:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012d17:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0012d1a:	8d 43 01             	lea    eax,[ebx+0x1]
c0012d1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d21:	89 f0                	mov    eax,esi
c0012d23:	3c 40                	cmp    al,0x40
c0012d25:	75 1b                	jne    c0012d42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0012d27:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d2a:	85 c0                	test   eax,eax
c0012d2c:	74 08                	je     c0012d36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012d2e:	83 f8 3a             	cmp    eax,0x3a
c0012d31:	74 03                	je     c0012d36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0012d33:	43                   	inc    ebx
c0012d34:	eb f1                	jmp    c0012d27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0012d36:	85 c0                	test   eax,eax
c0012d38:	0f 84 45 01 00 00    	je     c0012e83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d3e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012d41:	43                   	inc    ebx
c0012d42:	50                   	push   eax
c0012d43:	6a 40                	push   0x40
c0012d45:	6a 00                	push   0x0
c0012d47:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012d4b:	50                   	push   eax
c0012d4c:	e8 9f d7 fe ff       	call   c00004f0 <memset>
c0012d51:	89 f1                	mov    ecx,esi
c0012d53:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012d5a:	31 c0                	xor    eax,eax
c0012d5c:	83 c4 10             	add    esp,0x10
c0012d5f:	0f be f1             	movsx  esi,cl
c0012d62:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012d65:	85 d2                	test   edx,edx
c0012d67:	89 d1                	mov    ecx,edx
c0012d69:	0f 84 14 01 00 00    	je     c0012e83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d6f:	3d c7 00 00 00       	cmp    eax,0xc7
c0012d74:	0f 8f 09 01 00 00    	jg     c0012e83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012d7a:	83 fa 0a             	cmp    edx,0xa
c0012d7d:	0f 85 f1 00 00 00    	jne    c0012e74 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012d83:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012d88:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012d8d:	89 c8                	mov    eax,ecx
c0012d8f:	a8 df                	test   al,0xdf
c0012d91:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012d96:	83 f9 23             	cmp    ecx,0x23
c0012d99:	0f 94 c2             	sete   dl
c0012d9c:	89 d5                	mov    ebp,edx
c0012d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012da2:	09 ea                	or     edx,ebp
c0012da4:	80 e2 01             	and    dl,0x1
c0012da7:	75 47                	jne    c0012df0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012da9:	83 e8 09             	sub    eax,0x9
c0012dac:	3c 01                	cmp    al,0x1
c0012dae:	76 40                	jbe    c0012df0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012db0:	83 f9 5b             	cmp    ecx,0x5b
c0012db3:	75 42                	jne    c0012df7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012db5:	83 fe 40             	cmp    esi,0x40
c0012db8:	75 36                	jne    c0012df0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012dc1:	55                   	push   ebp
c0012dc2:	e8 b9 d7 fe ff       	call   c0000580 <strlen>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	83 f8 3f             	cmp    eax,0x3f
c0012dcd:	0f 87 b0 00 00 00    	ja     c0012e83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012dd3:	50                   	push   eax
c0012dd4:	50                   	push   eax
c0012dd5:	55                   	push   ebp
c0012dd6:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012dda:	55                   	push   ebp
c0012ddb:	e8 70 d8 fe ff       	call   c0000650 <strcpy>
c0012de0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012de3:	e8 98 d7 fe ff       	call   c0000580 <strlen>
c0012de8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ded:	83 c4 10             	add    esp,0x10
c0012df0:	31 d2                	xor    edx,edx
c0012df2:	e9 84 00 00 00       	jmp    c0012e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012df7:	83 fe 40             	cmp    esi,0x40
c0012dfa:	74 06                	je     c0012e02 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012dfc:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012e00:	eb 19                	jmp    c0012e1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012e02:	51                   	push   ecx
c0012e03:	51                   	push   ecx
c0012e04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e0c:	50                   	push   eax
c0012e0d:	e8 6e d9 fe ff       	call   c0000780 <strcmp>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	85 c0                	test   eax,eax
c0012e17:	75 d7                	jne    c0012df0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e19:	eb e1                	jmp    c0012dfc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012e1b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012e1e:	85 c9                	test   ecx,ecx
c0012e20:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e25:	83 f9 3d             	cmp    ecx,0x3d
c0012e28:	0f 94 c0             	sete   al
c0012e2b:	89 c5                	mov    ebp,eax
c0012e2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e31:	09 e8                	or     eax,ebp
c0012e33:	a8 01                	test   al,0x1
c0012e35:	89 c5                	mov    ebp,eax
c0012e37:	75 03                	jne    c0012e3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012e39:	42                   	inc    edx
c0012e3a:	eb df                	jmp    c0012e1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012e3c:	85 c9                	test   ecx,ecx
c0012e3e:	74 43                	je     c0012e83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012e40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012e44:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012e47:	52                   	push   edx
c0012e48:	52                   	push   edx
c0012e49:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012e4d:	50                   	push   eax
c0012e4e:	53                   	push   ebx
c0012e4f:	e8 2c d9 fe ff       	call   c0000780 <strcmp>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e5b:	85 c0                	test   eax,eax
c0012e5d:	75 91                	jne    c0012df0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012e5f:	50                   	push   eax
c0012e60:	42                   	inc    edx
c0012e61:	50                   	push   eax
c0012e62:	52                   	push   edx
c0012e63:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012e6a:	e8 e1 d7 fe ff       	call   c0000650 <strcpy>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	eb 11                	jmp    c0012e85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012e74:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012e78:	8d 50 01             	lea    edx,[eax+0x1]
c0012e7b:	47                   	inc    edi
c0012e7c:	89 d0                	mov    eax,edx
c0012e7e:	e9 df fe ff ff       	jmp    c0012d62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012e83:	31 ed                	xor    ebp,ebp
c0012e85:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012e8b:	89 e8                	mov    eax,ebp
c0012e8d:	5b                   	pop    ebx
c0012e8e:	5e                   	pop    esi
c0012e8f:	5f                   	pop    edi
c0012e90:	5d                   	pop    ebp
c0012e91:	c3                   	ret    

c0012e92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012e92:	57                   	push   edi
c0012e93:	56                   	push   esi
c0012e94:	53                   	push   ebx
c0012e95:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012e9b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012ea2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012ea9:	53                   	push   ebx
c0012eaa:	e8 d1 d6 fe ff       	call   c0000580 <strlen>
c0012eaf:	89 34 24             	mov    DWORD PTR [esp],esi
c0012eb2:	89 c7                	mov    edi,eax
c0012eb4:	e8 c7 d6 fe ff       	call   c0000580 <strlen>
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012ec0:	3d ff 00 00 00       	cmp    eax,0xff
c0012ec5:	0f 87 d3 00 00 00    	ja     c0012f9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012ecb:	57                   	push   edi
c0012ecc:	57                   	push   edi
c0012ecd:	56                   	push   esi
c0012ece:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012ed2:	56                   	push   esi
c0012ed3:	e8 78 d7 fe ff       	call   c0000650 <strcpy>
c0012ed8:	58                   	pop    eax
c0012ed9:	5a                   	pop    edx
c0012eda:	68 1f 19 02 c0       	push   0xc002191f
c0012edf:	56                   	push   esi
c0012ee0:	e8 8b d9 fe ff       	call   c0000870 <strcat>
c0012ee5:	59                   	pop    ecx
c0012ee6:	5f                   	pop    edi
c0012ee7:	53                   	push   ebx
c0012ee8:	56                   	push   esi
c0012ee9:	e8 82 d9 fe ff       	call   c0000870 <strcat>
c0012eee:	58                   	pop    eax
c0012eef:	5a                   	pop    edx
c0012ef0:	68 cb 15 02 c0       	push   0xc00215cb
c0012ef5:	56                   	push   esi
c0012ef6:	e8 75 d9 fe ff       	call   c0000870 <strcat>
c0012efb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f02:	e8 c4 4b ff ff       	call   c0007acb <malloc>
c0012f07:	83 c4 0c             	add    esp,0xc
c0012f0a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012f10:	56                   	push   esi
c0012f11:	50                   	push   eax
c0012f12:	89 c3                	mov    ebx,eax
c0012f14:	e8 61 82 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0012f19:	83 c4 10             	add    esp,0x10
c0012f1c:	85 db                	test   ebx,ebx
c0012f1e:	74 7e                	je     c0012f9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f20:	51                   	push   ecx
c0012f21:	51                   	push   ecx
c0012f22:	6a 01                	push   0x1
c0012f24:	53                   	push   ebx
c0012f25:	e8 0c 83 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0012f2a:	83 c4 10             	add    esp,0x10
c0012f2d:	85 c0                	test   eax,eax
c0012f2f:	74 08                	je     c0012f39 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012f31:	83 ec 0c             	sub    esp,0xc
c0012f34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f36:	53                   	push   ebx
c0012f37:	eb 5f                	jmp    c0012f98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012f39:	52                   	push   edx
c0012f3a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012f3e:	50                   	push   eax
c0012f3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f43:	50                   	push   eax
c0012f44:	53                   	push   ebx
c0012f45:	e8 98 85 ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c0012f4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	89 c1                	mov    ecx,eax
c0012f53:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012f57:	74 31                	je     c0012f8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012f59:	83 ec 0c             	sub    esp,0xc
c0012f5c:	50                   	push   eax
c0012f5d:	e8 69 4b ff ff       	call   c0007acb <malloc>
c0012f62:	89 c6                	mov    esi,eax
c0012f64:	58                   	pop    eax
c0012f65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f67:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012f6b:	52                   	push   edx
c0012f6c:	56                   	push   esi
c0012f6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012f71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012f75:	53                   	push   ebx
c0012f76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f79:	83 c4 20             	add    esp,0x20
c0012f7c:	85 c0                	test   eax,eax
c0012f7e:	75 0a                	jne    c0012f8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012f80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f84:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012f88:	74 18                	je     c0012fa2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012f8a:	83 ec 0c             	sub    esp,0xc
c0012f8d:	53                   	push   ebx
c0012f8e:	e8 01 83 ff ff       	call   c000b294 <File::close()>
c0012f93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	31 c0                	xor    eax,eax
c0012fa0:	eb 3b                	jmp    c0012fdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012fa2:	83 ec 0c             	sub    esp,0xc
c0012fa5:	53                   	push   ebx
c0012fa6:	e8 e9 82 ff ff       	call   c000b294 <File::close()>
c0012fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012fb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fb3:	83 c4 0c             	add    esp,0xc
c0012fb6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012fbd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012fc4:	56                   	push   esi
c0012fc5:	e8 3c fd ff ff       	call   c0012d06 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012fca:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fcd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012fd1:	e8 05 4b ff ff       	call   c0007adb <free>
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012fdd:	81 c4 20 01 00 00    	add    esp,0x120
c0012fe3:	5b                   	pop    ebx
c0012fe4:	5e                   	pop    esi
c0012fe5:	5f                   	pop    edi
c0012fe6:	c3                   	ret    

c0012fe7 <Reg::getLine(char*, char*, char*)>:
c0012fe7:	57                   	push   edi
c0012fe8:	56                   	push   esi
c0012fe9:	53                   	push   ebx
c0012fea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ff6:	57                   	push   edi
c0012ff7:	56                   	push   esi
c0012ff8:	53                   	push   ebx
c0012ff9:	68 d0 15 02 c0       	push   0xc00215d0
c0012ffe:	e8 8f fe ff ff       	call   c0012e92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013003:	83 c4 10             	add    esp,0x10
c0013006:	84 c0                	test   al,al
c0013008:	75 10                	jne    c001301a <Reg::getLine(char*, char*, char*)+0x33>
c001300a:	57                   	push   edi
c001300b:	56                   	push   esi
c001300c:	53                   	push   ebx
c001300d:	68 f5 15 02 c0       	push   0xc00215f5
c0013012:	e8 7b fe ff ff       	call   c0012e92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	5b                   	pop    ebx
c001301b:	5e                   	pop    esi
c001301c:	5f                   	pop    edi
c001301d:	c3                   	ret    

c001301e <Reg::readInt(char*, char*, int*)>:
c001301e:	55                   	push   ebp
c001301f:	57                   	push   edi
c0013020:	56                   	push   esi
c0013021:	53                   	push   ebx
c0013022:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013028:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001302c:	55                   	push   ebp
c001302d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013034:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001303b:	e8 a7 ff ff ff       	call   c0012fe7 <Reg::getLine(char*, char*, char*)>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	84 c0                	test   al,al
c0013045:	0f 84 b6 00 00 00    	je     c0013101 <Reg::readInt(char*, char*, int*)+0xe3>
c001304b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013050:	83 fa 2b             	cmp    edx,0x2b
c0013053:	74 0c                	je     c0013061 <Reg::readInt(char*, char*, int*)+0x43>
c0013055:	83 fa 2d             	cmp    edx,0x2d
c0013058:	75 0e                	jne    c0013068 <Reg::readInt(char*, char*, int*)+0x4a>
c001305a:	ba 01 00 00 00       	mov    edx,0x1
c001305f:	eb 0b                	jmp    c001306c <Reg::readInt(char*, char*, int*)+0x4e>
c0013061:	ba 01 00 00 00       	mov    edx,0x1
c0013066:	eb 02                	jmp    c001306a <Reg::readInt(char*, char*, int*)+0x4c>
c0013068:	31 d2                	xor    edx,edx
c001306a:	31 c0                	xor    eax,eax
c001306c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013071:	be 0a 00 00 00       	mov    esi,0xa
c0013076:	75 21                	jne    c0013099 <Reg::readInt(char*, char*, int*)+0x7b>
c0013078:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c001307d:	83 f9 78             	cmp    ecx,0x78
c0013080:	75 0a                	jne    c001308c <Reg::readInt(char*, char*, int*)+0x6e>
c0013082:	83 c2 02             	add    edx,0x2
c0013085:	be 10 00 00 00       	mov    esi,0x10
c001308a:	eb 0d                	jmp    c0013099 <Reg::readInt(char*, char*, int*)+0x7b>
c001308c:	83 f9 62             	cmp    ecx,0x62
c001308f:	75 08                	jne    c0013099 <Reg::readInt(char*, char*, int*)+0x7b>
c0013091:	83 c2 02             	add    edx,0x2
c0013094:	be 02 00 00 00       	mov    esi,0x2
c0013099:	01 d5                	add    ebp,edx
c001309b:	31 d2                	xor    edx,edx
c001309d:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00130a1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00130a5:	85 c9                	test   ecx,ecx
c00130a7:	0f 94 c3             	sete   bl
c00130aa:	83 f9 0d             	cmp    ecx,0xd
c00130ad:	89 df                	mov    edi,ebx
c00130af:	0f 94 c3             	sete   bl
c00130b2:	09 df                	or     edi,ebx
c00130b4:	89 fb                	mov    ebx,edi
c00130b6:	83 e7 01             	and    edi,0x1
c00130b9:	75 35                	jne    c00130f0 <Reg::readInt(char*, char*, int*)+0xd2>
c00130bb:	0f af d6             	imul   edx,esi
c00130be:	83 fe 10             	cmp    esi,0x10
c00130c1:	75 26                	jne    c00130e9 <Reg::readInt(char*, char*, int*)+0xcb>
c00130c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00130c7:	83 ef 41             	sub    edi,0x41
c00130ca:	89 fb                	mov    ebx,edi
c00130cc:	80 fb 05             	cmp    bl,0x5
c00130cf:	77 06                	ja     c00130d7 <Reg::readInt(char*, char*, int*)+0xb9>
c00130d1:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00130d5:	eb 16                	jmp    c00130ed <Reg::readInt(char*, char*, int*)+0xcf>
c00130d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130db:	83 eb 61             	sub    ebx,0x61
c00130de:	80 fb 05             	cmp    bl,0x5
c00130e1:	77 06                	ja     c00130e9 <Reg::readInt(char*, char*, int*)+0xcb>
c00130e3:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00130e7:	eb 04                	jmp    c00130ed <Reg::readInt(char*, char*, int*)+0xcf>
c00130e9:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00130ed:	45                   	inc    ebp
c00130ee:	eb ad                	jmp    c001309d <Reg::readInt(char*, char*, int*)+0x7f>
c00130f0:	84 c0                	test   al,al
c00130f2:	74 02                	je     c00130f6 <Reg::readInt(char*, char*, int*)+0xd8>
c00130f4:	f7 da                	neg    edx
c00130f6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00130fd:	89 10                	mov    DWORD PTR [eax],edx
c00130ff:	88 d8                	mov    al,bl
c0013101:	81 c4 ec 00 00 00    	add    esp,0xec
c0013107:	5b                   	pop    ebx
c0013108:	5e                   	pop    esi
c0013109:	5f                   	pop    edi
c001310a:	5d                   	pop    ebp
c001310b:	c3                   	ret    

c001310c <Reg::readString(char*, char*, char*, int)>:
c001310c:	57                   	push   edi
c001310d:	56                   	push   esi
c001310e:	53                   	push   ebx
c001310f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013115:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013119:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013120:	57                   	push   edi
c0013121:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013128:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001312f:	e8 b3 fe ff ff       	call   c0012fe7 <Reg::getLine(char*, char*, char*)>
c0013134:	83 c4 10             	add    esp,0x10
c0013137:	84 c0                	test   al,al
c0013139:	89 c6                	mov    esi,eax
c001313b:	74 44                	je     c0013181 <Reg::readString(char*, char*, char*, int)+0x75>
c001313d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013144:	31 c0                	xor    eax,eax
c0013146:	4a                   	dec    edx
c0013147:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001314a:	84 c9                	test   cl,cl
c001314c:	74 0f                	je     c001315d <Reg::readString(char*, char*, char*, int)+0x51>
c001314e:	39 c2                	cmp    edx,eax
c0013150:	7e 0b                	jle    c001315d <Reg::readString(char*, char*, char*, int)+0x51>
c0013152:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013155:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001315a:	40                   	inc    eax
c001315b:	eb ea                	jmp    c0013147 <Reg::readString(char*, char*, char*, int)+0x3b>
c001315d:	83 ec 0c             	sub    esp,0xc
c0013160:	53                   	push   ebx
c0013161:	e8 1a d4 fe ff       	call   c0000580 <strlen>
c0013166:	83 c4 10             	add    esp,0x10
c0013169:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001316e:	75 11                	jne    c0013181 <Reg::readString(char*, char*, char*, int)+0x75>
c0013170:	83 ec 0c             	sub    esp,0xc
c0013173:	53                   	push   ebx
c0013174:	e8 07 d4 fe ff       	call   c0000580 <strlen>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013181:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013187:	89 f0                	mov    eax,esi
c0013189:	5b                   	pop    ebx
c001318a:	5e                   	pop    esi
c001318b:	5f                   	pop    edi
c001318c:	c3                   	ret    

c001318d <Reg::readBool(char*, char*, bool*)>:
c001318d:	83 ec 20             	sub    esp,0x20
c0013190:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013194:	50                   	push   eax
c0013195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001319d:	e8 7c fe ff ff       	call   c001301e <Reg::readInt(char*, char*, int*)>
c00131a2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00131a6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00131ab:	0f 95 02             	setne  BYTE PTR [edx]
c00131ae:	83 c4 2c             	add    esp,0x2c
c00131b1:	c3                   	ret    

c00131b2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00131b2:	53                   	push   ebx
c00131b3:	83 ec 1c             	sub    esp,0x1c
c00131b6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00131ba:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00131be:	50                   	push   eax
c00131bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131c7:	e8 c1 ff ff ff       	call   c001318d <Reg::readBool(char*, char*, bool*)>
c00131cc:	83 c4 10             	add    esp,0x10
c00131cf:	84 c0                	test   al,al
c00131d1:	74 04                	je     c00131d7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00131d3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00131d7:	83 c4 18             	add    esp,0x18
c00131da:	88 d8                	mov    al,bl
c00131dc:	5b                   	pop    ebx
c00131dd:	c3                   	ret    

c00131de <Reg::readIntWithDefault(char*, char*, int)>:
c00131de:	53                   	push   ebx
c00131df:	83 ec 1c             	sub    esp,0x1c
c00131e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131e6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00131ea:	50                   	push   eax
c00131eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131f3:	e8 26 fe ff ff       	call   c001301e <Reg::readInt(char*, char*, int*)>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	84 c0                	test   al,al
c00131fd:	74 04                	je     c0013203 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00131ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013203:	83 c4 18             	add    esp,0x18
c0013206:	89 d8                	mov    eax,ebx
c0013208:	5b                   	pop    ebx
c0013209:	c3                   	ret    

c001320a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001320a:	57                   	push   edi
c001320b:	56                   	push   esi
c001320c:	53                   	push   ebx
c001320d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013211:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013215:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013219:	56                   	push   esi
c001321a:	57                   	push   edi
c001321b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001321f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013223:	e8 e4 fe ff ff       	call   c001310c <Reg::readString(char*, char*, char*, int)>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	84 c0                	test   al,al
c001322d:	75 16                	jne    c0013245 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001322f:	50                   	push   eax
c0013230:	56                   	push   esi
c0013231:	6a 00                	push   0x0
c0013233:	57                   	push   edi
c0013234:	e8 b7 d2 fe ff       	call   c00004f0 <memset>
c0013239:	8d 4e ff             	lea    ecx,[esi-0x1]
c001323c:	89 de                	mov    esi,ebx
c001323e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013240:	83 c4 10             	add    esp,0x10
c0013243:	89 df                	mov    edi,ebx
c0013245:	5b                   	pop    ebx
c0013246:	89 f8                	mov    eax,edi
c0013248:	5e                   	pop    esi
c0013249:	5f                   	pop    edi
c001324a:	c3                   	ret    

c001324b <SysEject(regs*)>:
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	83 ca ff             	or     edx,0xffffffff
c0013251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013255:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013258:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001325d:	83 e9 41             	sub    ecx,0x41
c0013260:	83 f9 19             	cmp    ecx,0x19
c0013263:	77 18                	ja     c001327d <SysEject(regs*)+0x32>
c0013265:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001326c:	85 c9                	test   ecx,ecx
c001326e:	74 0d                	je     c001327d <SysEject(regs*)+0x32>
c0013270:	83 ec 0c             	sub    esp,0xc
c0013273:	51                   	push   ecx
c0013274:	e8 3b a1 ff ff       	call   c000d3b4 <LogicalDisk::eject()>
c0013279:	83 c4 10             	add    esp,0x10
c001327c:	99                   	cdq    
c001327d:	83 c4 0c             	add    esp,0xc
c0013280:	c3                   	ret    

c0013281 <SysExit(regs*)>:
c0013281:	83 ec 18             	sub    esp,0x18
c0013284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013288:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001328b:	e8 14 2a 00 00       	call   c0015ca4 <terminateTask(int)>
c0013290:	83 c8 ff             	or     eax,0xffffffff
c0013293:	83 c4 1c             	add    esp,0x1c
c0013296:	89 c2                	mov    edx,eax
c0013298:	c3                   	ret    

c0013299 <SysGetCwd(regs*)>:
c0013299:	83 ec 10             	sub    esp,0x10
c001329c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132a0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00132a3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132ab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00132ae:	e8 97 7c ff ff       	call   c000af4a <Fs::getcwd(Process*, char*, int)>
c00132b3:	83 c4 1c             	add    esp,0x1c
c00132b6:	99                   	cdq    
c00132b7:	c3                   	ret    

c00132b8 <SysGetPID(regs*)>:
c00132b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00132c2:	99                   	cdq    
c00132c3:	c3                   	ret    

c00132c4 <SysGetRAMData(regs*)>:
c00132c4:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c00132ce:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00132d4:	99                   	cdq    
c00132d5:	f7 f9                	idiv   ecx
c00132d7:	c1 e0 18             	shl    eax,0x18
c00132da:	09 c8                	or     eax,ecx
c00132dc:	99                   	cdq    
c00132dd:	c3                   	ret    

c00132de <SysGetVGAPtr(regs*)>:
c00132de:	55                   	push   ebp
c00132df:	57                   	push   edi
c00132e0:	56                   	push   esi
c00132e1:	53                   	push   ebx
c00132e2:	83 ec 18             	sub    esp,0x18
c00132e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00132e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132ec:	e8 7f 24 00 00       	call   c0015770 <Thr::processFromPID(int)>
c00132f1:	83 c4 10             	add    esp,0x10
c00132f4:	89 c1                	mov    ecx,eax
c00132f6:	b8 01 00 00 00       	mov    eax,0x1
c00132fb:	85 c9                	test   ecx,ecx
c00132fd:	74 57                	je     c0013356 <SysGetVGAPtr(regs*)+0x78>
c00132ff:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013303:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013309:	74 0c                	je     c0013317 <SysGetVGAPtr(regs*)+0x39>
c001330b:	83 ec 0c             	sub    esp,0xc
c001330e:	55                   	push   ebp
c001330f:	e8 4d 54 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c0013314:	83 c4 10             	add    esp,0x10
c0013317:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001331a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001331f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013324:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013327:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001332a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013330:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013333:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013336:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001333c:	50                   	push   eax
c001333d:	50                   	push   eax
c001333e:	68 10 16 02 c0       	push   0xc0021610
c0013343:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013346:	05 a8 0f 00 00       	add    eax,0xfa8
c001334b:	50                   	push   eax
c001334c:	e8 ff d2 fe ff       	call   c0000650 <strcpy>
c0013351:	83 c4 10             	add    esp,0x10
c0013354:	31 c0                	xor    eax,eax
c0013356:	83 c4 0c             	add    esp,0xc
c0013359:	31 d2                	xor    edx,edx
c001335b:	5b                   	pop    ebx
c001335c:	5e                   	pop    esi
c001335d:	5f                   	pop    edi
c001335e:	5d                   	pop    ebp
c001335f:	c3                   	ret    

c0013360 <SysKill(regs*)>:
c0013360:	53                   	push   ebx
c0013361:	83 ec 08             	sub    esp,0x8
c0013364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013368:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001336c:	75 16                	jne    c0013384 <SysKill(regs*)+0x24>
c001336e:	83 ec 0c             	sub    esp,0xc
c0013371:	68 1a 16 02 c0       	push   0xc002161a
c0013376:	e8 a2 d7 ff ff       	call   c0010b1d <KePanic(char const*)>
c001337b:	83 c4 10             	add    esp,0x10
c001337e:	e9 89 00 00 00       	jmp    c001340c <SysKill(regs*)+0xac>
c0013383:	90                   	nop
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	68 84 81 02 c0       	push   0xc0028184
c001338c:	e8 cb bb 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013391:	8d 76 00             	lea    esi,[esi+0x0]
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	85 c0                	test   eax,eax
c0013399:	74 19                	je     c00133b4 <SysKill(regs*)+0x54>
c001339b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001339e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133a1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133a3:	74 33                	je     c00133d8 <SysKill(regs*)+0x78>
c00133a5:	52                   	push   edx
c00133a6:	52                   	push   edx
c00133a7:	50                   	push   eax
c00133a8:	68 84 81 02 c0       	push   0xc0028184
c00133ad:	e8 ca be 00 00       	call   c001f27c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00133b2:	eb e0                	jmp    c0013394 <SysKill(regs*)+0x34>
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	68 78 81 02 c0       	push   0xc0028178
c00133bc:	e8 9b bb 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133c1:	8d 76 00             	lea    esi,[esi+0x0]
c00133c4:	83 c4 10             	add    esp,0x10
c00133c7:	85 c0                	test   eax,eax
c00133c9:	74 41                	je     c001340c <SysKill(regs*)+0xac>
c00133cb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133d1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133d3:	75 27                	jne    c00133fc <SysKill(regs*)+0x9c>
c00133d5:	8d 76 00             	lea    esi,[esi+0x0]
c00133d8:	51                   	push   ecx
c00133d9:	51                   	push   ecx
c00133da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133e5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00133eb:	e8 cb db ff ff       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	31 c0                	xor    eax,eax
c00133f5:	31 d2                	xor    edx,edx
c00133f7:	eb 1b                	jmp    c0013414 <SysKill(regs*)+0xb4>
c00133f9:	8d 76 00             	lea    esi,[esi+0x0]
c00133fc:	52                   	push   edx
c00133fd:	52                   	push   edx
c00133fe:	50                   	push   eax
c00133ff:	68 78 81 02 c0       	push   0xc0028178
c0013404:	e8 73 be 00 00       	call   c001f27c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013409:	eb b9                	jmp    c00133c4 <SysKill(regs*)+0x64>
c001340b:	90                   	nop
c001340c:	83 c8 ff             	or     eax,0xffffffff
c001340f:	89 c2                	mov    edx,eax
c0013411:	8d 76 00             	lea    esi,[esi+0x0]
c0013414:	83 c4 08             	add    esp,0x8
c0013417:	5b                   	pop    ebx
c0013418:	c3                   	ret    

c0013419 <SysLoadDLL(regs*)>:
c0013419:	56                   	push   esi
c001341a:	31 d2                	xor    edx,edx
c001341c:	53                   	push   ebx
c001341d:	b8 01 00 00 00       	mov    eax,0x1
c0013422:	51                   	push   ecx
c0013423:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013427:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001342b:	0f 84 8c 00 00 00    	je     c00134bd <SysLoadDLL(regs*)+0xa4>
c0013431:	83 ec 0c             	sub    esp,0xc
c0013434:	68 14 01 00 00       	push   0x114
c0013439:	e8 8d 46 ff ff       	call   c0007acb <malloc>
c001343e:	83 c4 0c             	add    esp,0xc
c0013441:	89 c3                	mov    ebx,eax
c0013443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013448:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001344b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001344e:	53                   	push   ebx
c001344f:	e8 26 7d ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0013454:	83 c4 10             	add    esp,0x10
c0013457:	31 d2                	xor    edx,edx
c0013459:	85 db                	test   ebx,ebx
c001345b:	b8 02 00 00 00       	mov    eax,0x2
c0013460:	74 5b                	je     c00134bd <SysLoadDLL(regs*)+0xa4>
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	53                   	push   ebx
c0013466:	e8 39 80 ff ff       	call   c000b4a4 <File::exists()>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	84 c0                	test   al,al
c0013470:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013472:	75 11                	jne    c0013485 <SysLoadDLL(regs*)+0x6c>
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	53                   	push   ebx
c0013478:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001347b:	83 c4 10             	add    esp,0x10
c001347e:	b8 03 00 00 00       	mov    eax,0x3
c0013483:	eb 36                	jmp    c00134bb <SysLoadDLL(regs*)+0xa2>
c0013485:	83 ec 0c             	sub    esp,0xc
c0013488:	53                   	push   ebx
c0013489:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001348c:	58                   	pop    eax
c001348d:	5a                   	pop    edx
c001348e:	6a 00                	push   0x0
c0013490:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013493:	e8 20 14 00 00       	call   c00148b8 <Thr::loadDLL(char const*, bool)>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	31 d2                	xor    edx,edx
c001349d:	89 c1                	mov    ecx,eax
c001349f:	b8 04 00 00 00       	mov    eax,0x4
c00134a4:	85 c9                	test   ecx,ecx
c00134a6:	74 15                	je     c00134bd <SysLoadDLL(regs*)+0xa4>
c00134a8:	53                   	push   ebx
c00134a9:	53                   	push   ebx
c00134aa:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00134b0:	51                   	push   ecx
c00134b1:	e8 42 16 00 00       	call   c0014af8 <Thr::executeDLL(unsigned long, void*)>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	31 c0                	xor    eax,eax
c00134bb:	31 d2                	xor    edx,edx
c00134bd:	59                   	pop    ecx
c00134be:	5b                   	pop    ebx
c00134bf:	5e                   	pop    esi
c00134c0:	c3                   	ret    

c00134c1 <SysRead(regs*)>:
c00134c1:	57                   	push   edi
c00134c2:	56                   	push   esi
c00134c3:	53                   	push   ebx
c00134c4:	83 ec 10             	sub    esp,0x10
c00134c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00134cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134ce:	83 f8 02             	cmp    eax,0x2
c00134d1:	77 10                	ja     c00134e3 <SysRead(regs*)+0x22>
c00134d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134db:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00134e1:	eb 0e                	jmp    c00134f1 <SysRead(regs*)+0x30>
c00134e3:	83 ec 0c             	sub    esp,0xc
c00134e6:	50                   	push   eax
c00134e7:	e8 a3 5f ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	89 c1                	mov    ecx,eax
c00134f1:	83 c8 ff             	or     eax,0xffffffff
c00134f4:	85 c9                	test   ecx,ecx
c00134f6:	89 c2                	mov    edx,eax
c00134f8:	74 28                	je     c0013522 <SysRead(regs*)+0x61>
c00134fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013502:	83 ec 0c             	sub    esp,0xc
c0013505:	31 ff                	xor    edi,edi
c0013507:	8d 54 24 18          	lea    edx,[esp+0x18]
c001350b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001350d:	52                   	push   edx
c001350e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013511:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013514:	57                   	push   edi
c0013515:	56                   	push   esi
c0013516:	51                   	push   ecx
c0013517:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001351a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001351e:	83 c4 20             	add    esp,0x20
c0013521:	99                   	cdq    
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	5b                   	pop    ebx
c0013526:	5e                   	pop    esi
c0013527:	5f                   	pop    edi
c0013528:	c3                   	ret    

c0013529 <SysRegisterSignal(regs*)>:
c0013529:	83 ec 18             	sub    esp,0x18
c001352c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013530:	6a 00                	push   0x0
c0013532:	6a 00                	push   0x0
c0013534:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013537:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001353a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001353f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013542:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013548:	e8 38 da ff ff       	call   c0010f85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001354d:	83 c4 2c             	add    esp,0x2c
c0013550:	99                   	cdq    
c0013551:	c3                   	ret    

c0013552 <SysRegistryGetTypeFromPath(regs*)>:
c0013552:	57                   	push   edi
c0013553:	56                   	push   esi
c0013554:	53                   	push   ebx
c0013555:	81 ec 38 01 00 00    	sub    esp,0x138
c001355b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013562:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013565:	68 3b 16 02 c0       	push   0xc002163b
c001356a:	e8 8f 73 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001356f:	5a                   	pop    edx
c0013570:	59                   	pop    ecx
c0013571:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013574:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013577:	e8 34 f6 ff ff       	call   c0012bb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001357c:	5f                   	pop    edi
c001357d:	5a                   	pop    edx
c001357e:	89 c6                	mov    esi,eax
c0013580:	50                   	push   eax
c0013581:	68 5b 16 02 c0       	push   0xc002165b
c0013586:	e8 73 73 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001358b:	83 c4 10             	add    esp,0x10
c001358e:	85 f6                	test   esi,esi
c0013590:	74 28                	je     c00135ba <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013592:	50                   	push   eax
c0013593:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013597:	57                   	push   edi
c0013598:	56                   	push   esi
c0013599:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001359c:	e8 f4 f1 ff ff       	call   c0012795 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00135a1:	83 c4 0c             	add    esp,0xc
c00135a4:	57                   	push   edi
c00135a5:	50                   	push   eax
c00135a6:	89 c3                	mov    ebx,eax
c00135a8:	68 63 16 02 c0       	push   0xc0021663
c00135ad:	e8 4c 73 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00135b2:	89 d8                	mov    eax,ebx
c00135b4:	83 c4 10             	add    esp,0x10
c00135b7:	99                   	cdq    
c00135b8:	eb 05                	jmp    c00135bf <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00135ba:	83 c8 ff             	or     eax,0xffffffff
c00135bd:	89 c2                	mov    edx,eax
c00135bf:	81 c4 30 01 00 00    	add    esp,0x130
c00135c5:	5b                   	pop    ebx
c00135c6:	5e                   	pop    esi
c00135c7:	5f                   	pop    edi
c00135c8:	c3                   	ret    

c00135c9 <SysRegistryReadExtent(regs*)>:
c00135c9:	83 ec 1c             	sub    esp,0x1c
c00135cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135d0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00135d3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00135d6:	85 c0                	test   eax,eax
c00135d8:	79 1f                	jns    c00135f9 <SysRegistryReadExtent(regs*)+0x30>
c00135da:	52                   	push   edx
c00135db:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00135e0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135e4:	52                   	push   edx
c00135e5:	50                   	push   eax
c00135e6:	51                   	push   ecx
c00135e7:	e8 9b f0 ff ff       	call   c0012687 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00135ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	eb 14                	jmp    c001360d <SysRegistryReadExtent(regs*)+0x44>
c00135f9:	83 ec 04             	sub    esp,0x4
c00135fc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00135ff:	50                   	push   eax
c0013600:	51                   	push   ecx
c0013601:	e8 1f eb ff ff       	call   c0012125 <CmGetString(Reghive_Tag*, int, char*)>
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	31 c0                	xor    eax,eax
c001360b:	31 d2                	xor    edx,edx
c001360d:	83 c4 1c             	add    esp,0x1c
c0013610:	c3                   	ret    

c0013611 <SysRegistryPathToExtentLookup(regs*)>:
c0013611:	53                   	push   ebx
c0013612:	83 ec 10             	sub    esp,0x10
c0013615:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013619:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001361c:	68 79 16 02 c0       	push   0xc0021679
c0013621:	e8 d8 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013626:	58                   	pop    eax
c0013627:	5a                   	pop    edx
c0013628:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001362b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001362e:	e8 7d f5 ff ff       	call   c0012bb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013633:	83 c4 18             	add    esp,0x18
c0013636:	5b                   	pop    ebx
c0013637:	99                   	cdq    
c0013638:	c3                   	ret    

c0013639 <SysRegistryEnterDirectory(regs*)>:
c0013639:	53                   	push   ebx
c001363a:	83 ec 10             	sub    esp,0x10
c001363d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013641:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013644:	68 9c 16 02 c0       	push   0xc002169c
c0013649:	e8 b0 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001364e:	58                   	pop    eax
c001364f:	5a                   	pop    edx
c0013650:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013653:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013656:	e8 41 eb ff ff       	call   c001219c <CmEnterDirectory(Reghive_Tag*, int)>
c001365b:	83 c4 18             	add    esp,0x18
c001365e:	5b                   	pop    ebx
c001365f:	99                   	cdq    
c0013660:	c3                   	ret    

c0013661 <SysRegistryGetNext(regs*)>:
c0013661:	53                   	push   ebx
c0013662:	83 ec 10             	sub    esp,0x10
c0013665:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013669:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001366c:	68 ba 16 02 c0       	push   0xc00216ba
c0013671:	e8 88 72 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013676:	58                   	pop    eax
c0013677:	5a                   	pop    edx
c0013678:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001367b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001367e:	e8 58 eb ff ff       	call   c00121db <CmGetNext(Reghive_Tag*, int)>
c0013683:	83 c4 18             	add    esp,0x18
c0013686:	5b                   	pop    ebx
c0013687:	99                   	cdq    
c0013688:	c3                   	ret    

c0013689 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013689:	57                   	push   edi
c001368a:	56                   	push   esi
c001368b:	53                   	push   ebx
c001368c:	81 ec 34 01 00 00    	sub    esp,0x134
c0013692:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013699:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001369d:	57                   	push   edi
c001369e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00136a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136a4:	e8 ec f0 ff ff       	call   c0012795 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00136a9:	89 c3                	mov    ebx,eax
c00136ab:	58                   	pop    eax
c00136ac:	5a                   	pop    edx
c00136ad:	57                   	push   edi
c00136ae:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00136b1:	e8 9a cf fe ff       	call   c0000650 <strcpy>
c00136b6:	81 c4 40 01 00 00    	add    esp,0x140
c00136bc:	89 d8                	mov    eax,ebx
c00136be:	5b                   	pop    ebx
c00136bf:	99                   	cdq    
c00136c0:	5e                   	pop    esi
c00136c1:	5f                   	pop    edi
c00136c2:	c3                   	ret    

c00136c3 <SysRegistryOpen(regs*)>:
c00136c3:	83 ec 18             	sub    esp,0x18
c00136c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136ca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136cd:	e8 e3 e8 ff ff       	call   c0011fb5 <CmOpen(char const*)>
c00136d2:	83 c4 1c             	add    esp,0x1c
c00136d5:	99                   	cdq    
c00136d6:	c3                   	ret    

c00136d7 <SysRegistryClose(regs*)>:
c00136d7:	83 ec 18             	sub    esp,0x18
c00136da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136de:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136e1:	e8 ed e9 ff ff       	call   c00120d3 <CmClose(Reghive_Tag*)>
c00136e6:	31 c0                	xor    eax,eax
c00136e8:	31 d2                	xor    edx,edx
c00136ea:	83 c4 1c             	add    esp,0x1c
c00136ed:	c3                   	ret    

c00136ee <SysSbrk(regs*)>:
c00136ee:	56                   	push   esi
c00136ef:	53                   	push   ebx
c00136f0:	50                   	push   eax
c00136f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136fd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013700:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013706:	85 db                	test   ebx,ebx
c0013708:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001370b:	74 02                	je     c001370f <SysSbrk(regs*)+0x21>
c001370d:	79 06                	jns    c0013715 <SysSbrk(regs*)+0x27>
c001370f:	89 f0                	mov    eax,esi
c0013711:	31 d2                	xor    edx,edx
c0013713:	eb 2a                	jmp    c001373f <SysSbrk(regs*)+0x51>
c0013715:	83 c8 ff             	or     eax,0xffffffff
c0013718:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001371e:	89 c2                	mov    edx,eax
c0013720:	77 1d                	ja     c001373f <SysSbrk(regs*)+0x51>
c0013722:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013728:	50                   	push   eax
c0013729:	68 07 0c 00 00       	push   0xc07
c001372e:	c1 ea 0c             	shr    edx,0xc
c0013731:	52                   	push   edx
c0013732:	51                   	push   ecx
c0013733:	e8 c2 66 ff ff       	call   c0009dfa <VAS::allocatePages(int, int)>
c0013738:	89 f0                	mov    eax,esi
c001373a:	31 d2                	xor    edx,edx
c001373c:	83 c4 10             	add    esp,0x10
c001373f:	59                   	pop    ecx
c0013740:	5b                   	pop    ebx
c0013741:	5e                   	pop    esi
c0013742:	c3                   	ret    

c0013743 <SysSetCwd(regs*)>:
c0013743:	83 ec 14             	sub    esp,0x14
c0013746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001374a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001374d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013752:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013755:	e8 e9 7d ff ff       	call   c000b543 <Fs::setcwd(Process*, char*)>
c001375a:	83 c4 1c             	add    esp,0x1c
c001375d:	99                   	cdq    
c001375e:	c3                   	ret    

c001375f <SysSetTime(regs*)>:
c001375f:	55                   	push   ebp
c0013760:	31 c9                	xor    ecx,ecx
c0013762:	57                   	push   edi
c0013763:	bd 0c 00 00 00       	mov    ebp,0xc
c0013768:	56                   	push   esi
c0013769:	53                   	push   ebx
c001376a:	31 db                	xor    ebx,ebx
c001376c:	83 ec 10             	sub    esp,0x10
c001376f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013773:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013776:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013779:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001377c:	89 c2                	mov    edx,eax
c001377e:	c1 e8 05             	shr    eax,0x5
c0013781:	83 e2 1f             	and    edx,0x1f
c0013784:	42                   	inc    edx
c0013785:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001378b:	c1 e7 10             	shl    edi,0x10
c001378e:	88 d1                	mov    cl,dl
c0013790:	31 d2                	xor    edx,edx
c0013792:	f7 f5                	div    ebp
c0013794:	89 dd                	mov    ebp,ebx
c0013796:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001379c:	88 d5                	mov    ch,dl
c001379e:	31 d2                	xor    edx,edx
c00137a0:	0f b7 c1             	movzx  eax,cx
c00137a3:	09 f8                	or     eax,edi
c00137a5:	bf 3c 00 00 00       	mov    edi,0x3c
c00137aa:	89 c1                	mov    ecx,eax
c00137ac:	89 f0                	mov    eax,esi
c00137ae:	f7 f7                	div    edi
c00137b0:	c1 e2 10             	shl    edx,0x10
c00137b3:	09 d5                	or     ebp,edx
c00137b5:	31 d2                	xor    edx,edx
c00137b7:	f7 f7                	div    edi
c00137b9:	89 eb                	mov    ebx,ebp
c00137bb:	bf 10 0e 00 00       	mov    edi,0xe10
c00137c0:	89 f0                	mov    eax,esi
c00137c2:	88 d7                	mov    bh,dl
c00137c4:	31 d2                	xor    edx,edx
c00137c6:	f7 f7                	div    edi
c00137c8:	bf 18 00 00 00       	mov    edi,0x18
c00137cd:	31 d2                	xor    edx,edx
c00137cf:	f7 f7                	div    edi
c00137d1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00137d6:	88 d3                	mov    bl,dl
c00137d8:	53                   	push   ebx
c00137d9:	51                   	push   ecx
c00137da:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00137e0:	e8 63 85 ff ff       	call   c000bd48 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00137e5:	83 c4 1c             	add    esp,0x1c
c00137e8:	31 d2                	xor    edx,edx
c00137ea:	5b                   	pop    ebx
c00137eb:	5e                   	pop    esi
c00137ec:	83 f0 01             	xor    eax,0x1
c00137ef:	5f                   	pop    edi
c00137f0:	0f b6 c0             	movzx  eax,al
c00137f3:	5d                   	pop    ebp
c00137f4:	c3                   	ret    

c00137f5 <SysTimezone(regs*)>:
c00137f5:	53                   	push   ebx
c00137f6:	83 ec 08             	sub    esp,0x8
c00137f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137fd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013801:	75 17                	jne    c001381a <SysTimezone(regs*)+0x25>
c0013803:	83 ec 0c             	sub    esp,0xc
c0013806:	68 d1 16 02 c0       	push   0xc00216d1
c001380b:	e8 ee 70 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013810:	83 c8 ff             	or     eax,0xffffffff
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	89 c2                	mov    edx,eax
c0013818:	eb 20                	jmp    c001383a <SysTimezone(regs*)+0x45>
c001381a:	83 ec 0c             	sub    esp,0xc
c001381d:	68 e6 16 02 c0       	push   0xc00216e6
c0013822:	e8 d7 70 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013827:	58                   	pop    eax
c0013828:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001382b:	e8 7c 82 ff ff       	call   c000baac <User::loadClockSettings(int)>
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	b8 01 00 00 00       	mov    eax,0x1
c0013838:	31 d2                	xor    edx,edx
c001383a:	83 c4 08             	add    esp,0x8
c001383d:	5b                   	pop    ebx
c001383e:	c3                   	ret    

c001383f <SysWrite(regs*)>:
c001383f:	57                   	push   edi
c0013840:	56                   	push   esi
c0013841:	53                   	push   ebx
c0013842:	83 ec 10             	sub    esp,0x10
c0013845:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013849:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001384c:	83 f8 02             	cmp    eax,0x2
c001384f:	77 10                	ja     c0013861 <SysWrite(regs*)+0x22>
c0013851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013856:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013859:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001385f:	eb 0e                	jmp    c001386f <SysWrite(regs*)+0x30>
c0013861:	83 ec 0c             	sub    esp,0xc
c0013864:	50                   	push   eax
c0013865:	e8 25 5c ff ff       	call   c000948f <KeGetFileFromDescriptor(int)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	89 c1                	mov    ecx,eax
c001386f:	83 c8 ff             	or     eax,0xffffffff
c0013872:	85 c9                	test   ecx,ecx
c0013874:	89 c2                	mov    edx,eax
c0013876:	74 28                	je     c00138a0 <SysWrite(regs*)+0x61>
c0013878:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013880:	83 ec 0c             	sub    esp,0xc
c0013883:	31 ff                	xor    edi,edi
c0013885:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013889:	8b 01                	mov    eax,DWORD PTR [ecx]
c001388b:	52                   	push   edx
c001388c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001388f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013892:	57                   	push   edi
c0013893:	56                   	push   esi
c0013894:	51                   	push   ecx
c0013895:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013898:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001389c:	83 c4 20             	add    esp,0x20
c001389f:	99                   	cdq    
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	5b                   	pop    ebx
c00138a4:	5e                   	pop    esi
c00138a5:	5f                   	pop    edi
c00138a6:	c3                   	ret    

c00138a7 <SysWsbe(regs*)>:
c00138a7:	57                   	push   edi
c00138a8:	b9 0b 00 00 00       	mov    ecx,0xb
c00138ad:	56                   	push   esi
c00138ae:	be 25 17 02 c0       	mov    esi,0xc0021725
c00138b3:	53                   	push   ebx
c00138b4:	83 ec 30             	sub    esp,0x30
c00138b7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00138bb:	fc                   	cld    
c00138bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138be:	83 ec 0c             	sub    esp,0xc
c00138c1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00138c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138cd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00138d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00138d5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00138d8:	57                   	push   edi
c00138d9:	e8 a2 cc fe ff       	call   c0000580 <strlen>
c00138de:	5a                   	pop    edx
c00138df:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00138e3:	52                   	push   edx
c00138e4:	31 d2                	xor    edx,edx
c00138e6:	57                   	push   edi
c00138e7:	52                   	push   edx
c00138e8:	50                   	push   eax
c00138e9:	56                   	push   esi
c00138ea:	ff d3                	call   ebx
c00138ec:	83 c4 14             	add    esp,0x14
c00138ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00138f3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00138f6:	e8 a9 23 00 00       	call   c0015ca4 <terminateTask(int)>
c00138fb:	83 c4 40             	add    esp,0x40
c00138fe:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013903:	5b                   	pop    ebx
c0013904:	31 d2                	xor    edx,edx
c0013906:	5e                   	pop    esi
c0013907:	5f                   	pop    edi
c0013908:	c3                   	ret    

c0013909 <SysYield(regs*)>:
c0013909:	83 ec 0c             	sub    esp,0xc
c001390c:	fa                   	cli    
c001390d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013913:	e8 0c 1a 00 00       	call   c0015324 <schedule()>
c0013918:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001391d:	48                   	dec    eax
c001391e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013923:	75 01                	jne    c0013926 <SysYield(regs*)+0x1d>
c0013925:	fb                   	sti    
c0013926:	31 c0                	xor    eax,eax
c0013928:	31 d2                	xor    edx,edx
c001392a:	83 c4 0c             	add    esp,0xc
c001392d:	c3                   	ret    

c001392e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001392e:	55                   	push   ebp
c001392f:	57                   	push   edi
c0013930:	56                   	push   esi
c0013931:	53                   	push   ebx
c0013932:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013938:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013943:	74 3b                	je     c0013980 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013945:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001394d:	74 31                	je     c0013980 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001394f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013957:	75 27                	jne    c0013980 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013959:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013960:	05 00 10 00 00       	add    eax,0x1000
c0013965:	89 c2                	mov    edx,eax
c0013967:	25 00 f0 ff ff       	and    eax,0xfffff000
c001396c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013973:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0013979:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013980:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013987:	83 ec 0c             	sub    esp,0xc
c001398a:	6a 01                	push   0x1
c001398c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013992:	e8 52 5c ff ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c0013997:	83 c4 10             	add    esp,0x10
c001399a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00139a0:	89 c3                	mov    ebx,eax
c00139a2:	0f 86 26 01 00 00    	jbe    c0013ace <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00139a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139b0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00139b7:	c1 ee 0c             	shr    esi,0xc
c00139ba:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00139be:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00139c5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00139cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139d0:	29 ef                	sub    edi,ebp
c00139d2:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00139d6:	0f 83 f9 00 00 00    	jae    c0013ad5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00139dc:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00139e2:	b8 00 10 00 00       	mov    eax,0x1000
c00139e7:	0f 47 f8             	cmova  edi,eax
c00139ea:	83 ec 0c             	sub    esp,0xc
c00139ed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00139f4:	31 d2                	xor    edx,edx
c00139f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139fc:	50                   	push   eax
c00139fd:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a01:	56                   	push   esi
c0013a02:	52                   	push   edx
c0013a03:	57                   	push   edi
c0013a04:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a0e:	83 c4 20             	add    esp,0x20
c0013a11:	85 c0                	test   eax,eax
c0013a13:	75 06                	jne    c0013a1b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013a15:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a19:	74 13                	je     c0013a2e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013a1b:	83 ec 0c             	sub    esp,0xc
c0013a1e:	53                   	push   ebx
c0013a1f:	e8 d9 5e ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	31 c0                	xor    eax,eax
c0013a29:	e9 7c 01 00 00       	jmp    c0013baa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013a2e:	fa                   	cli    
c0013a2f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013a35:	e8 9b 43 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0013a3a:	6a 07                	push   0x7
c0013a3c:	53                   	push   ebx
c0013a3d:	50                   	push   eax
c0013a3e:	89 c7                	mov    edi,eax
c0013a40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a48:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a4e:	e8 9f 62 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a53:	83 c4 0c             	add    esp,0xc
c0013a56:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013a5d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a63:	6a 00                	push   0x0
c0013a65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a6d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a73:	e8 e0 60 ff ff       	call   c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>
c0013a78:	58                   	pop    eax
c0013a79:	5a                   	pop    edx
c0013a7a:	68 07 0c 00 00       	push   0xc07
c0013a7f:	55                   	push   ebp
c0013a80:	57                   	push   edi
c0013a81:	89 df                	mov    edi,ebx
c0013a83:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013a8a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a90:	6a 00                	push   0x0
c0013a92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a9a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aa0:	e8 b1 64 ff ff       	call   c0009f56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013aa5:	b9 00 10 00 00       	mov    ecx,0x1000
c0013aaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013aac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013ab1:	83 c4 20             	add    esp,0x20
c0013ab4:	48                   	dec    eax
c0013ab5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013aba:	85 c0                	test   eax,eax
c0013abc:	75 01                	jne    c0013abf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013abe:	fb                   	sti    
c0013abf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013ac3:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013ac9:	e9 f0 fe ff ff       	jmp    c00139be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013ace:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ad5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013adc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013ae2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013ae8:	0f 86 ae 00 00 00    	jbe    c0013b9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013aee:	fa                   	cli    
c0013aef:	51                   	push   ecx
c0013af0:	31 ff                	xor    edi,edi
c0013af2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013af9:	c1 ee 0c             	shr    esi,0xc
c0013afc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013b02:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b08:	6a 00                	push   0x0
c0013b0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b12:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b18:	e8 3b 60 ff ff       	call   c0009b58 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b1d:	83 c4 10             	add    esp,0x10
c0013b20:	e8 b0 42 ff ff       	call   c0007dd5 <Phys::allocatePage()>
c0013b25:	47                   	inc    edi
c0013b26:	6a 07                	push   0x7
c0013b28:	53                   	push   ebx
c0013b29:	50                   	push   eax
c0013b2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b34:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b37:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b3d:	e8 b0 61 ff ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b42:	58                   	pop    eax
c0013b43:	5a                   	pop    edx
c0013b44:	68 07 0c 00 00       	push   0xc07
c0013b49:	55                   	push   ebp
c0013b4a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b54:	50                   	push   eax
c0013b55:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b5c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b62:	6a 00                	push   0x0
c0013b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b6c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b72:	e8 df 63 ff ff       	call   c0009f56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013b77:	83 c4 1c             	add    esp,0x1c
c0013b7a:	68 00 10 00 00       	push   0x1000
c0013b7f:	6a 00                	push   0x0
c0013b81:	53                   	push   ebx
c0013b82:	e8 69 c9 fe ff       	call   c00004f0 <memset>
c0013b87:	83 c4 10             	add    esp,0x10
c0013b8a:	39 fe                	cmp    esi,edi
c0013b8c:	77 92                	ja     c0013b20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013b8e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013b93:	48                   	dec    eax
c0013b94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013b99:	75 01                	jne    c0013b9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013b9b:	fb                   	sti    
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	53                   	push   ebx
c0013ba0:	e8 58 5d ff ff       	call   c00098fd <Virt::freeKernelVirtualPages(unsigned long)>
c0013ba5:	83 c4 10             	add    esp,0x10
c0013ba8:	b0 01                	mov    al,0x1
c0013baa:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013bb0:	5b                   	pop    ebx
c0013bb1:	5e                   	pop    esi
c0013bb2:	5f                   	pop    edi
c0013bb3:	5d                   	pop    ebp
c0013bb4:	c3                   	ret    

c0013bb5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013bb5:	55                   	push   ebp
c0013bb6:	57                   	push   edi
c0013bb7:	56                   	push   esi
c0013bb8:	53                   	push   ebx
c0013bb9:	83 ec 48             	sub    esp,0x48
c0013bbc:	68 14 01 00 00       	push   0x114
c0013bc1:	e8 05 3f ff ff       	call   c0007acb <malloc>
c0013bc6:	83 c4 0c             	add    esp,0xc
c0013bc9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013bcd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013bd1:	89 c7                	mov    edi,eax
c0013bd3:	50                   	push   eax
c0013bd4:	e8 a1 75 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0013bd9:	58                   	pop    eax
c0013bda:	5a                   	pop    edx
c0013bdb:	6a 01                	push   0x1
c0013bdd:	57                   	push   edi
c0013bde:	e8 53 76 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	85 c0                	test   eax,eax
c0013be8:	0f 85 4c 01 00 00    	jne    c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013bee:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	6a 34                	push   0x34
c0013bfb:	e8 cb 3e ff ff       	call   c0007acb <malloc>
c0013c00:	89 c3                	mov    ebx,eax
c0013c02:	58                   	pop    eax
c0013c03:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c05:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c09:	56                   	push   esi
c0013c0a:	53                   	push   ebx
c0013c0b:	6a 00                	push   0x0
c0013c0d:	6a 34                	push   0x34
c0013c0f:	57                   	push   edi
c0013c10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c13:	83 c4 20             	add    esp,0x20
c0013c16:	85 c0                	test   eax,eax
c0013c18:	0f 85 1c 01 00 00    	jne    c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c1e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c24:	0f 85 10 01 00 00    	jne    c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c2d:	85 c0                	test   eax,eax
c0013c2f:	0f 84 05 01 00 00    	je     c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c35:	31 d2                	xor    edx,edx
c0013c37:	55                   	push   ebp
c0013c38:	52                   	push   edx
c0013c39:	50                   	push   eax
c0013c3a:	57                   	push   edi
c0013c3b:	e8 b4 76 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013c40:	83 c4 10             	add    esp,0x10
c0013c43:	85 c0                	test   eax,eax
c0013c45:	0f 85 ef 00 00 00    	jne    c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c59:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c5d:	0f af c2             	imul   eax,edx
c0013c60:	50                   	push   eax
c0013c61:	e8 65 3e ff ff       	call   c0007acb <malloc>
c0013c66:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013c68:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013c6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c73:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c77:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c7b:	0f af c2             	imul   eax,edx
c0013c7e:	99                   	cdq    
c0013c7f:	52                   	push   edx
c0013c80:	50                   	push   eax
c0013c81:	57                   	push   edi
c0013c82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c85:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013c88:	83 c4 20             	add    esp,0x20
c0013c8b:	85 c0                	test   eax,eax
c0013c8d:	0f 84 a7 00 00 00    	je     c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c93:	31 d2                	xor    edx,edx
c0013c95:	51                   	push   ecx
c0013c96:	52                   	push   edx
c0013c97:	50                   	push   eax
c0013c98:	57                   	push   edi
c0013c99:	e8 56 76 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	85 c0                	test   eax,eax
c0013ca3:	0f 85 91 00 00 00    	jne    c0013d3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013ca9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cad:	83 ec 0c             	sub    esp,0xc
c0013cb0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cb4:	0f af c2             	imul   eax,edx
c0013cb7:	50                   	push   eax
c0013cb8:	e8 0e 3e ff ff       	call   c0007acb <malloc>
c0013cbd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013cbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cd2:	0f af c2             	imul   eax,edx
c0013cd5:	99                   	cdq    
c0013cd6:	52                   	push   edx
c0013cd7:	50                   	push   eax
c0013cd8:	57                   	push   edi
c0013cd9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cdc:	83 c4 20             	add    esp,0x20
c0013cdf:	31 c9                	xor    ecx,ecx
c0013ce1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ce9:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013ced:	0f b7 e9             	movzx  ebp,cx
c0013cf0:	0f 83 86 00 00 00    	jae    c0013d7c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013cf6:	c1 e5 05             	shl    ebp,0x5
c0013cf9:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013cfd:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013d01:	75 73                	jne    c0013d76 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013d03:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013d0a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013d0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d11:	52                   	push   edx
c0013d12:	31 d2                	xor    edx,edx
c0013d14:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013d17:	52                   	push   edx
c0013d18:	50                   	push   eax
c0013d19:	57                   	push   edi
c0013d1a:	e8 d5 75 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d26:	85 c0                	test   eax,eax
c0013d28:	74 17                	je     c0013d41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013d2a:	83 ec 0c             	sub    esp,0xc
c0013d2d:	68 51 17 02 c0       	push   0xc0021751
c0013d32:	e8 c7 6b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013d37:	83 c4 10             	add    esp,0x10
c0013d3a:	31 c0                	xor    eax,eax
c0013d3c:	e9 8b 00 00 00       	jmp    c0013dcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013d41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d45:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013d4e:	50                   	push   eax
c0013d4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013d53:	56                   	push   esi
c0013d54:	57                   	push   edi
c0013d55:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013d59:	e8 d0 fb ff ff       	call   c001392e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013d5e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013d62:	83 c4 20             	add    esp,0x20
c0013d65:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013d69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d6d:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013d72:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013d76:	41                   	inc    ecx
c0013d77:	e9 6d ff ff ff       	jmp    c0013ce9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013d7c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d8b:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013d91:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013d97:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d9c:	05 00 10 00 00       	add    eax,0x1000
c0013da1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da8:	e8 2e 3d ff ff       	call   c0007adb <free>
c0013dad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013db0:	e8 26 3d ff ff       	call   c0007adb <free>
c0013db5:	58                   	pop    eax
c0013db6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dba:	e8 1c 3d ff ff       	call   c0007adb <free>
c0013dbf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dc2:	e8 cd 74 ff ff       	call   c000b294 <File::close()>
c0013dc7:	83 c4 10             	add    esp,0x10
c0013dca:	b0 01                	mov    al,0x1
c0013dcc:	83 c4 3c             	add    esp,0x3c
c0013dcf:	5b                   	pop    ebx
c0013dd0:	5e                   	pop    esi
c0013dd1:	5f                   	pop    edi
c0013dd2:	5d                   	pop    ebp
c0013dd3:	c3                   	ret    

c0013dd4 <Thr::runtimeReferenceHelper()>:
c0013dd4:	83 ec 18             	sub    esp,0x18
c0013dd7:	68 59 17 02 c0       	push   0xc0021759
c0013ddc:	e8 1d 6b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0013de1:	fa                   	cli    
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	eb fe                	jmp    c0013de5 <Thr::runtimeReferenceHelper()+0x11>

c0013de7 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013de7:	57                   	push   edi
c0013de8:	56                   	push   esi
c0013de9:	53                   	push   ebx
c0013dea:	31 db                	xor    ebx,ebx
c0013dec:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013df2:	7e 3c                	jle    c0013e30 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013df4:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013dfb:	31 ff                	xor    edi,edi
c0013dfd:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013e04:	7e 27                	jle    c0013e2d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e06:	50                   	push   eax
c0013e07:	50                   	push   eax
c0013e08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e0c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e0e:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013e15:	50                   	push   eax
c0013e16:	e8 65 c9 fe ff       	call   c0000780 <strcmp>
c0013e1b:	83 c4 10             	add    esp,0x10
c0013e1e:	85 c0                	test   eax,eax
c0013e20:	75 05                	jne    c0013e27 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e25:	eb 0b                	jmp    c0013e32 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e27:	83 c6 10             	add    esi,0x10
c0013e2a:	47                   	inc    edi
c0013e2b:	eb d0                	jmp    c0013dfd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e2d:	43                   	inc    ebx
c0013e2e:	eb bc                	jmp    c0013dec <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e30:	31 c0                	xor    eax,eax
c0013e32:	5b                   	pop    ebx
c0013e33:	5e                   	pop    esi
c0013e34:	5f                   	pop    edi
c0013e35:	c3                   	ret    

c0013e36 <Thr::loadKernelSymbolTable(char const*)>:
c0013e36:	55                   	push   ebp
c0013e37:	57                   	push   edi
c0013e38:	56                   	push   esi
c0013e39:	53                   	push   ebx
c0013e3a:	83 ec 68             	sub    esp,0x68
c0013e3d:	68 14 01 00 00       	push   0x114
c0013e42:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013e48:	e8 7e 3c ff ff       	call   c0007acb <malloc>
c0013e4d:	83 c4 0c             	add    esp,0xc
c0013e50:	56                   	push   esi
c0013e51:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013e55:	89 c3                	mov    ebx,eax
c0013e57:	50                   	push   eax
c0013e58:	e8 1d 73 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c0013e5d:	5e                   	pop    esi
c0013e5e:	5f                   	pop    edi
c0013e5f:	6a 01                	push   0x1
c0013e61:	53                   	push   ebx
c0013e62:	e8 cf 73 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	85 c0                	test   eax,eax
c0013e6c:	74 0a                	je     c0013e78 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013e6e:	83 ec 0c             	sub    esp,0xc
c0013e71:	68 7b 17 02 c0       	push   0xc002177b
c0013e76:	eb 34                	jmp    c0013eac <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013e80:	83 ec 0c             	sub    esp,0xc
c0013e83:	6a 34                	push   0x34
c0013e85:	e8 41 3c ff ff       	call   c0007acb <malloc>
c0013e8a:	59                   	pop    ecx
c0013e8b:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013e8f:	89 c7                	mov    edi,eax
c0013e91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e93:	56                   	push   esi
c0013e94:	57                   	push   edi
c0013e95:	6a 00                	push   0x0
c0013e97:	6a 34                	push   0x34
c0013e99:	53                   	push   ebx
c0013e9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e9d:	83 c4 20             	add    esp,0x20
c0013ea0:	85 c0                	test   eax,eax
c0013ea2:	74 17                	je     c0013ebb <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013ea4:	83 ec 0c             	sub    esp,0xc
c0013ea7:	68 92 17 02 c0       	push   0xc0021792
c0013eac:	e8 6c cc ff ff       	call   c0010b1d <KePanic(char const*)>
c0013eb1:	83 c4 10             	add    esp,0x10
c0013eb4:	31 c0                	xor    eax,eax
c0013eb6:	e9 31 02 00 00       	jmp    c00140ec <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013ebb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ec1:	75 e1                	jne    c0013ea4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ec3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013ec6:	85 c0                	test   eax,eax
c0013ec8:	74 da                	je     c0013ea4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013eca:	52                   	push   edx
c0013ecb:	31 d2                	xor    edx,edx
c0013ecd:	52                   	push   edx
c0013ece:	50                   	push   eax
c0013ecf:	53                   	push   ebx
c0013ed0:	e8 1f 74 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	85 c0                	test   eax,eax
c0013eda:	75 c8                	jne    c0013ea4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013edc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	31 ed                	xor    ebp,ebp
c0013ee5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ee9:	0f af c2             	imul   eax,edx
c0013eec:	50                   	push   eax
c0013eed:	e8 d9 3b ff ff       	call   c0007acb <malloc>
c0013ef2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ef4:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ef7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013efb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eff:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f03:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f07:	0f af c2             	imul   eax,edx
c0013f0a:	99                   	cdq    
c0013f0b:	52                   	push   edx
c0013f0c:	50                   	push   eax
c0013f0d:	53                   	push   ebx
c0013f0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f11:	83 c4 20             	add    esp,0x20
c0013f14:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f1c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f24:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f34:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f38:	0f b7 f5             	movzx  esi,bp
c0013f3b:	0f 83 a7 00 00 00    	jae    c0013fe8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f41:	6b f6 28             	imul   esi,esi,0x28
c0013f44:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f48:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f4f:	50                   	push   eax
c0013f50:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013f54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f58:	8b 16                	mov    edx,DWORD PTR [esi]
c0013f5a:	6b c0 28             	imul   eax,eax,0x28
c0013f5d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013f61:	89 d0                	mov    eax,edx
c0013f63:	31 d2                	xor    edx,edx
c0013f65:	52                   	push   edx
c0013f66:	50                   	push   eax
c0013f67:	53                   	push   ebx
c0013f68:	e8 87 73 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0013f6d:	83 c4 0c             	add    esp,0xc
c0013f70:	6a 20                	push   0x20
c0013f72:	6a 00                	push   0x0
c0013f74:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013f78:	52                   	push   edx
c0013f79:	e8 72 c5 fe ff       	call   c00004f0 <memset>
c0013f7e:	58                   	pop    eax
c0013f7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f81:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013f85:	51                   	push   ecx
c0013f86:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013f8a:	52                   	push   edx
c0013f8b:	6a 00                	push   0x0
c0013f8d:	6a 1f                	push   0x1f
c0013f8f:	53                   	push   ebx
c0013f90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f93:	83 c4 18             	add    esp,0x18
c0013f96:	68 a9 17 02 c0       	push   0xc00217a9
c0013f9b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013f9f:	52                   	push   edx
c0013fa0:	e8 db c7 fe ff       	call   c0000780 <strcmp>
c0013fa5:	83 c4 10             	add    esp,0x10
c0013fa8:	85 c0                	test   eax,eax
c0013faa:	75 0f                	jne    c0013fbb <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013fac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013faf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fbb:	50                   	push   eax
c0013fbc:	50                   	push   eax
c0013fbd:	68 b1 17 02 c0       	push   0xc00217b1
c0013fc2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013fc6:	50                   	push   eax
c0013fc7:	e8 b4 c7 fe ff       	call   c0000780 <strcmp>
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	85 c0                	test   eax,eax
c0013fd1:	75 0f                	jne    c0013fe2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013fd3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013fd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013fe2:	45                   	inc    ebp
c0013fe3:	e9 4c ff ff ff       	jmp    c0013f34 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013fe8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013fed:	75 10                	jne    c0013fff <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013fef:	83 ec 0c             	sub    esp,0xc
c0013ff2:	68 b9 17 02 c0       	push   0xc00217b9
c0013ff7:	e8 21 cb ff ff       	call   c0010b1d <KePanic(char const*)>
c0013ffc:	83 c4 10             	add    esp,0x10
c0013fff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014004:	75 10                	jne    c0014016 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	68 b9 17 02 c0       	push   0xc00217b9
c001400e:	e8 0a cb ff ff       	call   c0010b1d <KePanic(char const*)>
c0014013:	83 c4 10             	add    esp,0x10
c0014016:	50                   	push   eax
c0014017:	31 d2                	xor    edx,edx
c0014019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401d:	52                   	push   edx
c001401e:	50                   	push   eax
c001401f:	53                   	push   ebx
c0014020:	e8 cf 72 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014025:	5a                   	pop    edx
c0014026:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001402a:	e8 9c 3a ff ff       	call   c0007acb <malloc>
c001402f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014033:	31 c9                	xor    ecx,ecx
c0014035:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014039:	8b 03                	mov    eax,DWORD PTR [ebx]
c001403b:	5e                   	pop    esi
c001403c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014040:	55                   	push   ebp
c0014041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014045:	51                   	push   ecx
c0014046:	52                   	push   edx
c0014047:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001404b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001404f:	53                   	push   ebx
c0014050:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014053:	83 c4 14             	add    esp,0x14
c0014056:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001405a:	e8 6c 3a ff ff       	call   c0007acb <malloc>
c001405f:	89 c6                	mov    esi,eax
c0014061:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014066:	56                   	push   esi
c0014067:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001406b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001406f:	51                   	push   ecx
c0014070:	52                   	push   edx
c0014071:	53                   	push   ebx
c0014072:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014079:	83 c4 1c             	add    esp,0x1c
c001407c:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0014082:	c1 e8 04             	shr    eax,0x4
c0014085:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c001408c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014090:	31 d2                	xor    edx,edx
c0014092:	52                   	push   edx
c0014093:	50                   	push   eax
c0014094:	53                   	push   ebx
c0014095:	e8 5a 72 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001409a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001409c:	31 d2                	xor    edx,edx
c001409e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140a1:	56                   	push   esi
c00140a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140a6:	52                   	push   edx
c00140a7:	50                   	push   eax
c00140a8:	53                   	push   ebx
c00140a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140ac:	83 c4 14             	add    esp,0x14
c00140af:	53                   	push   ebx
c00140b0:	e8 df 71 ff ff       	call   c000b294 <File::close()>
c00140b5:	5d                   	pop    ebp
c00140b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140ba:	e8 1c 3a ff ff       	call   c0007adb <free>
c00140bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140c2:	e8 14 3a ff ff       	call   c0007adb <free>
c00140c7:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c00140cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00140d0:	83 c4 10             	add    esp,0x10
c00140d3:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c00140da:	8d 50 01             	lea    edx,[eax+0x1]
c00140dd:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c00140e4:	b0 01                	mov    al,0x1
c00140e6:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c00140ec:	83 c4 5c             	add    esp,0x5c
c00140ef:	5b                   	pop    ebx
c00140f0:	5e                   	pop    esi
c00140f1:	5f                   	pop    edi
c00140f2:	5d                   	pop    ebp
c00140f3:	c3                   	ret    

c00140f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00140f4:	55                   	push   ebp
c00140f5:	57                   	push   edi
c00140f6:	56                   	push   esi
c00140f7:	53                   	push   ebx
c00140f8:	81 ec 68 03 00 00    	sub    esp,0x368
c00140fe:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014105:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c001410b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001410f:	68 14 01 00 00       	push   0x114
c0014114:	e8 b2 39 ff ff       	call   c0007acb <malloc>
c0014119:	83 c4 0c             	add    esp,0xc
c001411c:	56                   	push   esi
c001411d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014124:	50                   	push   eax
c0014125:	89 c3                	mov    ebx,eax
c0014127:	e8 4e 70 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001412c:	5f                   	pop    edi
c001412d:	5d                   	pop    ebp
c001412e:	6a 01                	push   0x1
c0014130:	53                   	push   ebx
c0014131:	e8 00 71 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0014136:	83 c4 10             	add    esp,0x10
c0014139:	85 c0                	test   eax,eax
c001413b:	0f 85 b3 06 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014141:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014149:	83 ec 0c             	sub    esp,0xc
c001414c:	6a 34                	push   0x34
c001414e:	e8 78 39 ff ff       	call   c0007acb <malloc>
c0014153:	5e                   	pop    esi
c0014154:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014158:	89 c5                	mov    ebp,eax
c001415a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001415c:	56                   	push   esi
c001415d:	55                   	push   ebp
c001415e:	6a 00                	push   0x0
c0014160:	6a 34                	push   0x34
c0014162:	53                   	push   ebx
c0014163:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014166:	83 c4 20             	add    esp,0x20
c0014169:	85 c0                	test   eax,eax
c001416b:	0f 85 83 06 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014171:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014178:	0f 85 76 06 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001417e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014181:	85 c0                	test   eax,eax
c0014183:	0f 84 6b 06 00 00    	je     c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014189:	31 d2                	xor    edx,edx
c001418b:	51                   	push   ecx
c001418c:	52                   	push   edx
c001418d:	50                   	push   eax
c001418e:	53                   	push   ebx
c001418f:	e8 60 71 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	85 c0                	test   eax,eax
c0014199:	0f 85 55 06 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001419f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00141a2:	83 ec 0c             	sub    esp,0xc
c00141a5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141ad:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141b1:	0f af c2             	imul   eax,edx
c00141b4:	50                   	push   eax
c00141b5:	e8 11 39 ff ff       	call   c0007acb <malloc>
c00141ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00141bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141c7:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141cb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141cf:	0f af c2             	imul   eax,edx
c00141d2:	99                   	cdq    
c00141d3:	52                   	push   edx
c00141d4:	50                   	push   eax
c00141d5:	53                   	push   ebx
c00141d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141d9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00141dc:	83 c4 20             	add    esp,0x20
c00141df:	85 c0                	test   eax,eax
c00141e1:	0f 84 0d 06 00 00    	je     c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141e7:	52                   	push   edx
c00141e8:	31 d2                	xor    edx,edx
c00141ea:	52                   	push   edx
c00141eb:	50                   	push   eax
c00141ec:	53                   	push   ebx
c00141ed:	e8 02 71 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00141f2:	83 c4 10             	add    esp,0x10
c00141f5:	85 c0                	test   eax,eax
c00141f7:	0f 85 f7 05 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141fd:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014201:	83 ec 0c             	sub    esp,0xc
c0014204:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014208:	0f af c2             	imul   eax,edx
c001420b:	50                   	push   eax
c001420c:	e8 ba 38 ff ff       	call   c0007acb <malloc>
c0014211:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014213:	89 34 24             	mov    DWORD PTR [esp],esi
c0014216:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001421a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001421e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014222:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014226:	0f af c2             	imul   eax,edx
c0014229:	99                   	cdq    
c001422a:	52                   	push   edx
c001422b:	50                   	push   eax
c001422c:	53                   	push   ebx
c001422d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014230:	83 c4 20             	add    esp,0x20
c0014233:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014239:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001423c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014240:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014244:	73 78                	jae    c00142be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014246:	c1 e7 05             	shl    edi,0x5
c0014249:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001424d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014250:	75 63                	jne    c00142b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014252:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014255:	31 d2                	xor    edx,edx
c0014257:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c001425a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001425e:	50                   	push   eax
c001425f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014262:	52                   	push   edx
c0014263:	50                   	push   eax
c0014264:	53                   	push   ebx
c0014265:	e8 8a 70 ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c001426a:	83 c4 10             	add    esp,0x10
c001426d:	85 c0                	test   eax,eax
c001426f:	0f 85 7f 05 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014275:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	31 d2                	xor    edx,edx
c0014281:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014285:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014287:	01 c6                	add    esi,eax
c0014289:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014290:	50                   	push   eax
c0014291:	56                   	push   esi
c0014292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014296:	52                   	push   edx
c0014297:	50                   	push   eax
c0014298:	53                   	push   ebx
c0014299:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001429c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001429f:	83 c4 1c             	add    esp,0x1c
c00142a2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00142a5:	50                   	push   eax
c00142a6:	6a 00                	push   0x0
c00142a8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00142ac:	56                   	push   esi
c00142ad:	e8 3e c2 fe ff       	call   c00004f0 <memset>
c00142b2:	83 c4 10             	add    esp,0x10
c00142b5:	66 ff 04 24          	inc    WORD PTR [esp]
c00142b9:	e9 7b ff ff ff       	jmp    c0014239 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00142be:	50                   	push   eax
c00142bf:	68 00 01 00 00       	push   0x100
c00142c4:	6a 00                	push   0x0
c00142c6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00142ca:	50                   	push   eax
c00142cb:	e8 20 c2 fe ff       	call   c00004f0 <memset>
c00142d0:	83 c4 0c             	add    esp,0xc
c00142d3:	68 00 01 00 00       	push   0x100
c00142d8:	6a 00                	push   0x0
c00142da:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00142e1:	50                   	push   eax
c00142e2:	e8 09 c2 fe ff       	call   c00004f0 <memset>
c00142e7:	83 c4 10             	add    esp,0x10
c00142ea:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00142f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00142f8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014300:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014308:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014310:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014318:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001431c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014320:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014325:	0f 83 16 01 00 00    	jae    c0014441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001432b:	6b ff 28             	imul   edi,edi,0x28
c001432e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014332:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014335:	51                   	push   ecx
c0014336:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001433a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001433e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014340:	6b d2 28             	imul   edx,edx,0x28
c0014343:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014347:	31 d2                	xor    edx,edx
c0014349:	52                   	push   edx
c001434a:	50                   	push   eax
c001434b:	53                   	push   ebx
c001434c:	e8 a3 6f ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014351:	83 c4 0c             	add    esp,0xc
c0014354:	6a 20                	push   0x20
c0014356:	6a 00                	push   0x0
c0014358:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001435f:	51                   	push   ecx
c0014360:	e8 8b c1 fe ff       	call   c00004f0 <memset>
c0014365:	58                   	pop    eax
c0014366:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014368:	8d 54 24 58          	lea    edx,[esp+0x58]
c001436c:	52                   	push   edx
c001436d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014374:	51                   	push   ecx
c0014375:	6a 00                	push   0x0
c0014377:	6a 1f                	push   0x1f
c0014379:	53                   	push   ebx
c001437a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001437d:	83 c4 1c             	add    esp,0x1c
c0014380:	6a 09                	push   0x9
c0014382:	68 d3 17 02 c0       	push   0xc00217d3
c0014387:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001438e:	51                   	push   ecx
c001438f:	e8 ec bf fe ff       	call   c0000380 <memcmp>
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	85 c0                	test   eax,eax
c0014399:	75 1a                	jne    c00143b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c001439b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001439e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143a1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143a5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143a8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00143af:	89 d0                	mov    eax,edx
c00143b1:	40                   	inc    eax
c00143b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00143b5:	52                   	push   edx
c00143b6:	6a 09                	push   0x9
c00143b8:	68 dd 17 02 c0       	push   0xc00217dd
c00143bd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143c4:	50                   	push   eax
c00143c5:	e8 b6 bf fe ff       	call   c0000380 <memcmp>
c00143ca:	83 c4 10             	add    esp,0x10
c00143cd:	85 c0                	test   eax,eax
c00143cf:	75 1a                	jne    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00143d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143d4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00143d7:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143db:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143de:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00143e5:	89 c8                	mov    eax,ecx
c00143e7:	40                   	inc    eax
c00143e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00143eb:	50                   	push   eax
c00143ec:	50                   	push   eax
c00143ed:	68 a9 17 02 c0       	push   0xc00217a9
c00143f2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143f9:	50                   	push   eax
c00143fa:	e8 81 c3 fe ff       	call   c0000780 <strcmp>
c00143ff:	83 c4 10             	add    esp,0x10
c0014402:	85 c0                	test   eax,eax
c0014404:	75 0b                	jne    c0014411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014406:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001440a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001440d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014411:	50                   	push   eax
c0014412:	50                   	push   eax
c0014413:	68 b1 17 02 c0       	push   0xc00217b1
c0014418:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001441f:	50                   	push   eax
c0014420:	e8 5b c3 fe ff       	call   c0000780 <strcmp>
c0014425:	83 c4 10             	add    esp,0x10
c0014428:	85 c0                	test   eax,eax
c001442a:	75 0b                	jne    c0014437 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001442c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014430:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014433:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014437:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001443c:	e9 d7 fe ff ff       	jmp    c0014318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014441:	50                   	push   eax
c0014442:	31 d2                	xor    edx,edx
c0014444:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014448:	52                   	push   edx
c0014449:	50                   	push   eax
c001444a:	53                   	push   ebx
c001444b:	e8 a4 6e ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014450:	58                   	pop    eax
c0014451:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014455:	e8 71 36 ff ff       	call   c0007acb <malloc>
c001445a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001445c:	31 d2                	xor    edx,edx
c001445e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014462:	58                   	pop    eax
c0014463:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014467:	56                   	push   esi
c0014468:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001446c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014470:	52                   	push   edx
c0014471:	50                   	push   eax
c0014472:	53                   	push   ebx
c0014473:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014476:	83 c4 14             	add    esp,0x14
c0014479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001447d:	e8 49 36 ff ff       	call   c0007acb <malloc>
c0014482:	31 d2                	xor    edx,edx
c0014484:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014488:	83 c4 0c             	add    esp,0xc
c001448b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448f:	52                   	push   edx
c0014490:	50                   	push   eax
c0014491:	53                   	push   ebx
c0014492:	e8 5d 6e ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c0014497:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014499:	31 d2                	xor    edx,edx
c001449b:	89 34 24             	mov    DWORD PTR [esp],esi
c001449e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144a6:	52                   	push   edx
c00144a7:	50                   	push   eax
c00144a8:	53                   	push   ebx
c00144a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144ac:	83 c4 20             	add    esp,0x20
c00144af:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00144b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00144c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00144c7:	0f 84 2b 03 00 00    	je     c00147f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00144cd:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00144d4:	31 d2                	xor    edx,edx
c00144d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00144da:	c1 e8 03             	shr    eax,0x3
c00144dd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00144e1:	51                   	push   ecx
c00144e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00144ea:	52                   	push   edx
c00144eb:	50                   	push   eax
c00144ec:	53                   	push   ebx
c00144ed:	e8 02 6e ff ff       	call   c000b2f4 <File::seek(unsigned long long)>
c00144f2:	5e                   	pop    esi
c00144f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144f7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00144fe:	e8 c8 35 ff ff       	call   c0007acb <malloc>
c0014503:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014505:	31 d2                	xor    edx,edx
c0014507:	89 c7                	mov    edi,eax
c0014509:	58                   	pop    eax
c001450a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001450e:	50                   	push   eax
c001450f:	57                   	push   edi
c0014510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014514:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001451b:	52                   	push   edx
c001451c:	50                   	push   eax
c001451d:	53                   	push   ebx
c001451e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014521:	83 c4 20             	add    esp,0x20
c0014524:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001452c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014530:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014534:	0f 8d a5 02 00 00    	jge    c00147df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001453a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001453f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014543:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014546:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001454a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001454e:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014552:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014556:	c1 e8 08             	shr    eax,0x8
c0014559:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001455d:	89 c2                	mov    edx,eax
c001455f:	c1 e2 04             	shl    edx,0x4
c0014562:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014566:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014569:	85 f6                	test   esi,esi
c001456b:	0f 85 cf 00 00 00    	jne    c0014640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457c:	03 02                	add    eax,DWORD PTR [edx]
c001457e:	50                   	push   eax
c001457f:	e8 63 f8 ff ff       	call   c0013de7 <Thr::getAddressOfKernelSymbol(char const*)>
c0014584:	83 c4 10             	add    esp,0x10
c0014587:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001458b:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014590:	85 c0                	test   eax,eax
c0014592:	89 c6                	mov    esi,eax
c0014594:	0f 85 a6 00 00 00    	jne    c0014640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001459a:	83 ec 0c             	sub    esp,0xc
c001459d:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a5:	03 02                	add    eax,DWORD PTR [edx]
c00145a7:	50                   	push   eax
c00145a8:	e8 5b c7 ff ff       	call   c0010d08 <KeResolveCompatibilitySymbol(char*)>
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145b4:	85 c0                	test   eax,eax
c00145b6:	89 c6                	mov    esi,eax
c00145b8:	0f 85 82 00 00 00    	jne    c0014640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145be:	50                   	push   eax
c00145bf:	50                   	push   eax
c00145c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145c4:	03 02                	add    eax,DWORD PTR [edx]
c00145c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00145ca:	50                   	push   eax
c00145cb:	68 e7 17 02 c0       	push   0xc00217e7
c00145d0:	e8 29 63 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00145d5:	58                   	pop    eax
c00145d6:	5a                   	pop    edx
c00145d7:	68 01 18 02 c0       	push   0xc0021801
c00145dc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00145e3:	51                   	push   ecx
c00145e4:	e8 67 c0 fe ff       	call   c0000650 <strcpy>
c00145e9:	59                   	pop    ecx
c00145ea:	58                   	pop    eax
c00145eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00145ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145f3:	03 02                	add    eax,DWORD PTR [edx]
c00145f5:	50                   	push   eax
c00145f6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00145fd:	51                   	push   ecx
c00145fe:	e8 6d c2 fe ff       	call   c0000870 <strcat>
c0014603:	58                   	pop    eax
c0014604:	5a                   	pop    edx
c0014605:	68 97 18 02 c0       	push   0xc0021897
c001460a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014611:	51                   	push   ecx
c0014612:	e8 59 c2 fe ff       	call   c0000870 <strcat>
c0014617:	83 c4 10             	add    esp,0x10
c001461a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001461f:	0f 84 77 01 00 00    	je     c001479c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014625:	83 ec 0c             	sub    esp,0xc
c0014628:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001462f:	51                   	push   ecx
c0014630:	e8 e8 c4 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014635:	83 c4 10             	add    esp,0x10
c0014638:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001463c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014640:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014645:	83 f8 01             	cmp    eax,0x1
c0014648:	0f 85 9b 00 00 00    	jne    c00146e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c001464e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014652:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014659:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001465d:	01 d0                	add    eax,edx
c001465f:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014667:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001466b:	0f 94 c0             	sete   al
c001466e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014676:	0f 94 c1             	sete   cl
c0014679:	09 c1                	or     ecx,eax
c001467b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001467f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014684:	0f b6 c9             	movzx  ecx,cl
c0014687:	8b 00                	mov    eax,DWORD PTR [eax]
c0014689:	74 41                	je     c00146cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c001468b:	8d 14 06             	lea    edx,[esi+eax*1]
c001468e:	85 c9                	test   ecx,ecx
c0014690:	75 15                	jne    c00146a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014692:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014696:	66 83 f8 0c          	cmp    ax,0xc
c001469a:	76 05                	jbe    c00146a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001469c:	b8 0c 00 00 00       	mov    eax,0xc
c00146a1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146a5:	76 37                	jbe    c00146de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146a7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146b0:	0f 84 e6 00 00 00    	je     c001479c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	68 18 18 02 c0       	push   0xc0021818
c00146be:	e8 5a c4 ff ff       	call   c0010b1d <KePanic(char const*)>
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00146ca:	eb 12                	jmp    c00146de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146cc:	01 c2                	add    edx,eax
c00146ce:	85 c9                	test   ecx,ecx
c00146d0:	75 0c                	jne    c00146de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146d2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146d6:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146da:	77 02                	ja     c00146de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146dc:	01 f2                	add    edx,esi
c00146de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146e2:	89 10                	mov    DWORD PTR [eax],edx
c00146e4:	e9 ed 00 00 00       	jmp    c00147d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00146e9:	83 f8 02             	cmp    eax,0x2
c00146ec:	0f 85 81 00 00 00    	jne    c0014773 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00146f2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00146f9:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00146fd:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014701:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014709:	74 21                	je     c001472c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001470b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014713:	74 17                	je     c001472c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014715:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014719:	ba 0a 00 00 00       	mov    edx,0xa
c001471e:	83 f9 0e             	cmp    ecx,0xe
c0014721:	77 03                	ja     c0014726 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014723:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014726:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001472a:	76 1f                	jbe    c001474b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001472c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014731:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014735:	74 65                	je     c001479c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014737:	83 ec 0c             	sub    esp,0xc
c001473a:	68 34 18 02 c0       	push   0xc0021834
c001473f:	e8 d9 c3 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014744:	83 c4 10             	add    esp,0x10
c0014747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014750:	8b 10                	mov    edx,DWORD PTR [eax]
c0014752:	74 15                	je     c0014769 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014754:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014758:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001475f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014763:	01 d1                	add    ecx,edx
c0014765:	01 ce                	add    esi,ecx
c0014767:	eb 06                	jmp    c001476f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014769:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001476d:	01 d6                	add    esi,edx
c001476f:	89 30                	mov    DWORD PTR [eax],esi
c0014771:	eb 63                	jmp    c00147d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014773:	56                   	push   esi
c0014774:	56                   	push   esi
c0014775:	50                   	push   eax
c0014776:	68 50 18 02 c0       	push   0xc0021850
c001477b:	e8 7e 61 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014780:	83 c4 10             	add    esp,0x10
c0014783:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014788:	74 12                	je     c001479c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	68 5b 18 02 c0       	push   0xc002185b
c0014792:	e8 86 c3 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014797:	83 c4 10             	add    esp,0x10
c001479a:	eb 3a                	jmp    c00147d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	53                   	push   ebx
c00147a0:	e8 ef 6a ff ff       	call   c000b294 <File::close()>
c00147a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147b0:	e8 26 33 ff ff       	call   c0007adb <free>
c00147b5:	59                   	pop    ecx
c00147b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147ba:	e8 1c 33 ff ff       	call   c0007adb <free>
c00147bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147c2:	e8 14 33 ff ff       	call   c0007adb <free>
c00147c7:	5b                   	pop    ebx
c00147c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00147cc:	e8 0a 33 ff ff       	call   c0007adb <free>
c00147d1:	83 c4 10             	add    esp,0x10
c00147d4:	eb 1e                	jmp    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00147d6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00147da:	e9 4d fd ff ff       	jmp    c001452c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00147df:	83 ec 0c             	sub    esp,0xc
c00147e2:	57                   	push   edi
c00147e3:	e8 f3 32 ff ff       	call   c0007adb <free>
c00147e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00147ec:	83 c4 10             	add    esp,0x10
c00147ef:	e9 cc fc ff ff       	jmp    c00144c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00147f4:	31 c0                	xor    eax,eax
c00147f6:	eb 32                	jmp    c001482a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00147f8:	83 ec 0c             	sub    esp,0xc
c00147fb:	53                   	push   ebx
c00147fc:	e8 93 6a ff ff       	call   c000b294 <File::close()>
c0014801:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014803:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014806:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014809:	58                   	pop    eax
c001480a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001480e:	e8 c8 32 ff ff       	call   c0007adb <free>
c0014813:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014816:	e8 c0 32 ff ff       	call   c0007adb <free>
c001481b:	5a                   	pop    edx
c001481c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014820:	e8 b6 32 ff ff       	call   c0007adb <free>
c0014825:	83 c4 10             	add    esp,0x10
c0014828:	b0 01                	mov    al,0x1
c001482a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014830:	5b                   	pop    ebx
c0014831:	5e                   	pop    esi
c0014832:	5f                   	pop    edi
c0014833:	5d                   	pop    ebp
c0014834:	c3                   	ret    

c0014835 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014835:	56                   	push   esi
c0014836:	31 d2                	xor    edx,edx
c0014838:	53                   	push   ebx
c0014839:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001483f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014843:	39 d3                	cmp    ebx,edx
c0014845:	7e 1b                	jle    c0014862 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014847:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001484e:	39 c8                	cmp    eax,ecx
c0014850:	77 0d                	ja     c001485f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014852:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014859:	01 c6                	add    esi,eax
c001485b:	39 ce                	cmp    esi,ecx
c001485d:	77 05                	ja     c0014864 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001485f:	42                   	inc    edx
c0014860:	eb e1                	jmp    c0014843 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014862:	31 c0                	xor    eax,eax
c0014864:	5b                   	pop    ebx
c0014865:	5e                   	pop    esi
c0014866:	c3                   	ret    

c0014867 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014867:	53                   	push   ebx
c0014868:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001486e:	31 c0                	xor    eax,eax
c0014870:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014874:	39 c3                	cmp    ebx,eax
c0014876:	7e 22                	jle    c001489a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014878:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001487f:	39 ca                	cmp    edx,ecx
c0014881:	77 14                	ja     c0014897 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014883:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001488a:	39 ca                	cmp    edx,ecx
c001488c:	76 09                	jbe    c0014897 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001488e:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014895:	eb 05                	jmp    c001489c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014897:	40                   	inc    eax
c0014898:	eb da                	jmp    c0014874 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001489a:	31 c0                	xor    eax,eax
c001489c:	5b                   	pop    ebx
c001489d:	c3                   	ret    

c001489e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001489e:	53                   	push   ebx
c001489f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148a3:	53                   	push   ebx
c00148a4:	e8 8c ff ff ff       	call   c0014835 <Thr::getDriverBaseFromAddress(unsigned long)>
c00148a9:	5a                   	pop    edx
c00148aa:	31 d2                	xor    edx,edx
c00148ac:	85 c0                	test   eax,eax
c00148ae:	74 04                	je     c00148b4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00148b0:	89 da                	mov    edx,ebx
c00148b2:	29 c2                	sub    edx,eax
c00148b4:	5b                   	pop    ebx
c00148b5:	89 d0                	mov    eax,edx
c00148b7:	c3                   	ret    

c00148b8 <Thr::loadDLL(char const*, bool)>:
c00148b8:	55                   	push   ebp
c00148b9:	57                   	push   edi
c00148ba:	56                   	push   esi
c00148bb:	53                   	push   ebx
c00148bc:	81 ec 34 01 00 00    	sub    esp,0x134
c00148c2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00148c9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00148d0:	56                   	push   esi
c00148d1:	68 73 18 02 c0       	push   0xc0021873
c00148d6:	e8 23 60 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00148db:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00148e2:	e8 e4 31 ff ff       	call   c0007acb <malloc>
c00148e7:	83 c4 0c             	add    esp,0xc
c00148ea:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00148f0:	56                   	push   esi
c00148f1:	50                   	push   eax
c00148f2:	89 c3                	mov    ebx,eax
c00148f4:	e8 81 68 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00148f9:	83 c4 10             	add    esp,0x10
c00148fc:	85 db                	test   ebx,ebx
c00148fe:	75 3c                	jne    c001493c <Thr::loadDLL(char const*, bool)+0x84>
c0014900:	89 e8                	mov    eax,ebp
c0014902:	84 c0                	test   al,al
c0014904:	0f 84 e1 01 00 00    	je     c0014aeb <Thr::loadDLL(char const*, bool)+0x233>
c001490a:	50                   	push   eax
c001490b:	50                   	push   eax
c001490c:	68 84 18 02 c0       	push   0xc0021884
c0014911:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014915:	57                   	push   edi
c0014916:	e8 35 bd fe ff       	call   c0000650 <strcpy>
c001491b:	58                   	pop    eax
c001491c:	5a                   	pop    edx
c001491d:	56                   	push   esi
c001491e:	57                   	push   edi
c001491f:	e8 4c bf fe ff       	call   c0000870 <strcat>
c0014924:	59                   	pop    ecx
c0014925:	58                   	pop    eax
c0014926:	68 97 18 02 c0       	push   0xc0021897
c001492b:	57                   	push   edi
c001492c:	e8 3f bf fe ff       	call   c0000870 <strcat>
c0014931:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014934:	e8 e4 c1 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	50                   	push   eax
c001493d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014941:	50                   	push   eax
c0014942:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014946:	50                   	push   eax
c0014947:	53                   	push   ebx
c0014948:	e8 95 6b ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c001494d:	83 c4 10             	add    esp,0x10
c0014950:	85 db                	test   ebx,ebx
c0014952:	74 0c                	je     c0014960 <Thr::loadDLL(char const*, bool)+0xa8>
c0014954:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014956:	83 ec 0c             	sub    esp,0xc
c0014959:	53                   	push   ebx
c001495a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014965:	75 0a                	jne    c0014971 <Thr::loadDLL(char const*, bool)+0xb9>
c0014967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001496b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001496f:	75 3e                	jne    c00149af <Thr::loadDLL(char const*, bool)+0xf7>
c0014971:	89 e8                	mov    eax,ebp
c0014973:	31 db                	xor    ebx,ebx
c0014975:	84 c0                	test   al,al
c0014977:	0f 84 6e 01 00 00    	je     c0014aeb <Thr::loadDLL(char const*, bool)+0x233>
c001497d:	50                   	push   eax
c001497e:	50                   	push   eax
c001497f:	68 84 18 02 c0       	push   0xc0021884
c0014984:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014988:	53                   	push   ebx
c0014989:	e8 c2 bc fe ff       	call   c0000650 <strcpy>
c001498e:	58                   	pop    eax
c001498f:	5a                   	pop    edx
c0014990:	56                   	push   esi
c0014991:	53                   	push   ebx
c0014992:	e8 d9 be fe ff       	call   c0000870 <strcat>
c0014997:	59                   	pop    ecx
c0014998:	5f                   	pop    edi
c0014999:	68 97 18 02 c0       	push   0xc0021897
c001499e:	53                   	push   ebx
c001499f:	e8 cc be fe ff       	call   c0000870 <strcat>
c00149a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149a7:	e8 71 c1 ff ff       	call   c0010b1d <KePanic(char const*)>
c00149ac:	83 c4 10             	add    esp,0x10
c00149af:	53                   	push   ebx
c00149b0:	6a 03                	push   0x3
c00149b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00149ba:	05 ff 0f 00 00       	add    eax,0xfff
c00149bf:	83 d2 00             	adc    edx,0x0
c00149c2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00149c6:	50                   	push   eax
c00149c7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00149cd:	e8 28 54 ff ff       	call   c0009dfa <VAS::allocatePages(int, int)>
c00149d2:	89 c3                	mov    ebx,eax
c00149d4:	58                   	pop    eax
c00149d5:	5a                   	pop    edx
c00149d6:	53                   	push   ebx
c00149d7:	68 f2 ff 01 c0       	push   0xc001fff2
c00149dc:	e8 1d 5f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00149e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00149e4:	e8 97 bb fe ff       	call   c0000580 <strlen>
c00149e9:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c00149ef:	40                   	inc    eax
c00149f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00149f3:	e8 d3 30 ff ff       	call   c0007acb <malloc>
c00149f8:	59                   	pop    ecx
c00149f9:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014a00:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014a05:	5f                   	pop    edi
c0014a06:	56                   	push   esi
c0014a07:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014a0e:	e8 3d bc fe ff       	call   c0000650 <strcpy>
c0014a13:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014a18:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014a1f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a22:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014a28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a2c:	83 c4 0c             	add    esp,0xc
c0014a2f:	6a 01                	push   0x1
c0014a31:	53                   	push   ebx
c0014a32:	56                   	push   esi
c0014a33:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014a3a:	e8 b5 f6 ff ff       	call   c00140f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014a3f:	83 c4 10             	add    esp,0x10
c0014a42:	89 c7                	mov    edi,eax
c0014a44:	89 f8                	mov    eax,edi
c0014a46:	83 f0 01             	xor    eax,0x1
c0014a49:	84 c0                	test   al,al
c0014a4b:	74 18                	je     c0014a65 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014a4d:	89 e8                	mov    eax,ebp
c0014a4f:	84 c0                	test   al,al
c0014a51:	74 12                	je     c0014a65 <Thr::loadDLL(char const*, bool)+0x1ad>
c0014a53:	83 ec 0c             	sub    esp,0xc
c0014a56:	68 99 18 02 c0       	push   0xc0021899
c0014a5b:	e8 bd c0 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	eb 06                	jmp    c0014a6b <Thr::loadDLL(char const*, bool)+0x1b3>
c0014a65:	89 f8                	mov    eax,edi
c0014a67:	84 c0                	test   al,al
c0014a69:	75 10                	jne    c0014a7b <Thr::loadDLL(char const*, bool)+0x1c3>
c0014a6b:	83 ec 0c             	sub    esp,0xc
c0014a6e:	68 b8 18 02 c0       	push   0xc00218b8
c0014a73:	e8 a5 c0 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014a78:	83 c4 10             	add    esp,0x10
c0014a7b:	31 f6                	xor    esi,esi
c0014a7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014a85:	05 ff 0f 00 00       	add    eax,0xfff
c0014a8a:	83 d2 00             	adc    edx,0x0
c0014a8d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a95:	c1 ea 0c             	shr    edx,0xc
c0014a98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014a9c:	ba 00 00 00 00       	mov    edx,0x0
c0014aa1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014aa5:	89 d0                	mov    eax,edx
c0014aa7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014aab:	73 32                	jae    c0014adf <Thr::loadDLL(char const*, bool)+0x227>
c0014aad:	50                   	push   eax
c0014aae:	50                   	push   eax
c0014aaf:	89 f0                	mov    eax,esi
c0014ab1:	c1 e0 0c             	shl    eax,0xc
c0014ab4:	01 d8                	add    eax,ebx
c0014ab6:	50                   	push   eax
c0014ab7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014abd:	e8 1c 4e ff ff       	call   c00098de <VAS::getPageTableEntry(unsigned long)>
c0014ac2:	83 c4 10             	add    esp,0x10
c0014ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ac7:	a8 60                	test   al,0x60
c0014ac9:	75 11                	jne    c0014adc <Thr::loadDLL(char const*, bool)+0x224>
c0014acb:	83 ec 0c             	sub    esp,0xc
c0014ace:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014ad3:	50                   	push   eax
c0014ad4:	e8 93 32 ff ff       	call   c0007d6c <Phys::freePage(unsigned long)>
c0014ad9:	83 c4 10             	add    esp,0x10
c0014adc:	46                   	inc    esi
c0014add:	eb 9e                	jmp    c0014a7d <Thr::loadDLL(char const*, bool)+0x1c5>
c0014adf:	89 f8                	mov    eax,edi
c0014ae1:	84 c0                	test   al,al
c0014ae3:	b8 00 00 00 00       	mov    eax,0x0
c0014ae8:	0f 44 d8             	cmove  ebx,eax
c0014aeb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014af1:	89 d8                	mov    eax,ebx
c0014af3:	5b                   	pop    ebx
c0014af4:	5e                   	pop    esi
c0014af5:	5f                   	pop    edi
c0014af6:	5d                   	pop    ebp
c0014af7:	c3                   	ret    

c0014af8 <Thr::executeDLL(unsigned long, void*)>:
c0014af8:	56                   	push   esi
c0014af9:	53                   	push   ebx
c0014afa:	52                   	push   edx
c0014afb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b03:	85 db                	test   ebx,ebx
c0014b05:	75 10                	jne    c0014b17 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b07:	83 ec 0c             	sub    esp,0xc
c0014b0a:	68 d4 18 02 c0       	push   0xc00218d4
c0014b0f:	e8 09 c0 ff ff       	call   c0010b1d <KePanic(char const*)>
c0014b14:	83 c4 10             	add    esp,0x10
c0014b17:	50                   	push   eax
c0014b18:	50                   	push   eax
c0014b19:	53                   	push   ebx
c0014b1a:	68 fe 18 02 c0       	push   0xc00218fe
c0014b1f:	e8 da 5d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014b24:	89 d8                	mov    eax,ebx
c0014b26:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b2a:	83 c4 14             	add    esp,0x14
c0014b2d:	5b                   	pop    ebx
c0014b2e:	5e                   	pop    esi
c0014b2f:	ff e0                	jmp    eax
c0014b31:	66 90                	xchg   ax,ax
c0014b33:	90                   	nop

c0014b34 <userModeEntryPoint(void*)>:
c0014b34:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014b39:	83 e8 01             	sub    eax,0x1
c0014b3c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014b41:	75 01                	jne    c0014b44 <userModeEntryPoint(void*)+0x10>
c0014b43:	fb                   	sti    
c0014b44:	fb                   	sti    
c0014b45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b4d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014b53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b57:	e9 e3 b6 fe ff       	jmp    c000023f <goToUsermode>

c0014b5c <changeTSS>:
c0014b5c:	83 ec 14             	sub    esp,0x14
c0014b5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b64:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014b67:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014b6c:	c1 e2 15             	shl    edx,0x15
c0014b6f:	29 d0                	sub    eax,edx
c0014b71:	50                   	push   eax
c0014b72:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014b77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b7d:	05 7c 11 00 00       	add    eax,0x117c
c0014b82:	50                   	push   eax
c0014b83:	e8 a8 43 ff ff       	call   c0008f30 <TSS::setESP(unsigned long)>
c0014b88:	83 c4 1c             	add    esp,0x1c
c0014b8b:	c3                   	ret    

c0014b8c <switchToThread(ThreadControlBlock*)>:
c0014b8c:	57                   	push   edi
c0014b8d:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014b93:	56                   	push   esi
c0014b94:	53                   	push   ebx
c0014b95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b99:	85 c9                	test   ecx,ecx
c0014b9b:	0f 85 8b 00 00 00    	jne    c0014c2c <switchToThread(ThreadControlBlock*)+0xa0>
c0014ba1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014ba5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014bab:	74 7b                	je     c0014c28 <switchToThread(ThreadControlBlock*)+0x9c>
c0014bad:	b8 00 04 00 00       	mov    eax,0x400
c0014bb2:	29 d0                	sub    eax,edx
c0014bb4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014bb7:	d1 f8                	sar    eax,1
c0014bb9:	01 d0                	add    eax,edx
c0014bbb:	90                   	nop
c0014bbc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014bbf:	e8 04 28 00 00       	call   c00173c8 <HalQueryPerformanceCounter()>
c0014bc4:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c0014bc9:	89 c6                	mov    esi,eax
c0014bcb:	89 d7                	mov    edi,edx
c0014bcd:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014bd3:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014bd8:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014bde:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014be4:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014bea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014bf0:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014bf6:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014bfc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014bff:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014c02:	01 c6                	add    esi,eax
c0014c04:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014c07:	11 d7                	adc    edi,edx
c0014c09:	83 ec 0c             	sub    esp,0xc
c0014c0c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014c0f:	53                   	push   ebx
c0014c10:	e8 62 b6 fe ff       	call   c0000277 <switchToThreadASM>
c0014c15:	0f 20 c0             	mov    eax,cr0
c0014c18:	83 c8 08             	or     eax,0x8
c0014c1b:	0f 22 c0             	mov    cr0,eax
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	5b                   	pop    ebx
c0014c22:	5e                   	pop    esi
c0014c23:	5f                   	pop    edi
c0014c24:	c3                   	ret    
c0014c25:	8d 76 00             	lea    esi,[esi+0x0]
c0014c28:	31 c0                	xor    eax,eax
c0014c2a:	eb 90                	jmp    c0014bbc <switchToThread(ThreadControlBlock*)+0x30>
c0014c2c:	5b                   	pop    ebx
c0014c2d:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014c37:	5e                   	pop    esi
c0014c38:	5f                   	pop    edi
c0014c39:	c3                   	ret    
c0014c3a:	66 90                	xchg   ax,ax

c0014c3c <Process::addArgs(char**)>:
c0014c3c:	57                   	push   edi
c0014c3d:	56                   	push   esi
c0014c3e:	53                   	push   ebx
c0014c3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c43:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014c47:	85 f6                	test   esi,esi
c0014c49:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014c53:	74 4f                	je     c0014ca4 <Process::addArgs(char**)+0x68>
c0014c55:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c57:	85 c0                	test   eax,eax
c0014c59:	74 49                	je     c0014ca4 <Process::addArgs(char**)+0x68>
c0014c5b:	31 db                	xor    ebx,ebx
c0014c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c60:	83 ec 0c             	sub    esp,0xc
c0014c63:	50                   	push   eax
c0014c64:	e8 17 b9 fe ff       	call   c0000580 <strlen>
c0014c69:	83 c0 01             	add    eax,0x1
c0014c6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c6f:	e8 57 2e ff ff       	call   c0007acb <malloc>
c0014c74:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014c7b:	5a                   	pop    edx
c0014c7c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014c7f:	83 c3 01             	add    ebx,0x1
c0014c82:	59                   	pop    ecx
c0014c83:	52                   	push   edx
c0014c84:	50                   	push   eax
c0014c85:	e8 c6 b9 fe ff       	call   c0000650 <strcpy>
c0014c8a:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014c90:	83 c4 10             	add    esp,0x10
c0014c93:	83 c1 01             	add    ecx,0x1
c0014c96:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014c9c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014c9f:	85 c0                	test   eax,eax
c0014ca1:	75 bd                	jne    c0014c60 <Process::addArgs(char**)+0x24>
c0014ca3:	90                   	nop
c0014ca4:	5b                   	pop    ebx
c0014ca5:	5e                   	pop    esi
c0014ca6:	5f                   	pop    edi
c0014ca7:	c3                   	ret    

c0014ca8 <Process::Process(char const*, Process*, char**)>:
c0014ca8:	56                   	push   esi
c0014ca9:	53                   	push   ebx
c0014caa:	83 ec 14             	sub    esp,0x14
c0014cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb1:	05 0c 02 00 00       	add    eax,0x20c
c0014cb6:	bb 07 00 00 00       	mov    ebx,0x7
c0014cbb:	89 c6                	mov    esi,eax
c0014cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0014cc0:	85 db                	test   ebx,ebx
c0014cc2:	78 14                	js     c0014cd8 <Process::Process(char const*, Process*, char**)+0x30>
c0014cc4:	83 ec 0c             	sub    esp,0xc
c0014cc7:	56                   	push   esi
c0014cc8:	e8 bb a5 00 00       	call   c001f288 <ThreadControlBlock::ThreadControlBlock()>
c0014ccd:	83 c4 10             	add    esp,0x10
c0014cd0:	83 c6 5f             	add    esi,0x5f
c0014cd3:	83 eb 01             	sub    ebx,0x1
c0014cd6:	eb e8                	jmp    c0014cc0 <Process::Process(char const*, Process*, char**)+0x18>
c0014cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cdc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014cee:	83 ec 0c             	sub    esp,0xc
c0014cf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cf5:	e8 18 bc ff ff       	call   c0010912 <KeNewProcessEnv(Process*)>
c0014cfa:	83 c4 10             	add    esp,0x10
c0014cfd:	89 c2                	mov    edx,eax
c0014cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d03:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d0d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014d16:	a1 20 2b 02 c0       	mov    eax,ds:0xc0022b20
c0014d1b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d1e:	89 15 20 2b 02 c0    	mov    DWORD PTR ds:0xc0022b20,edx
c0014d24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d28:	89 02                	mov    DWORD PTR [edx],eax
c0014d2a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014d32:	83 ec 0c             	sub    esp,0xc
c0014d35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d39:	e8 8d 2d ff ff       	call   c0007acb <malloc>
c0014d3e:	83 c4 10             	add    esp,0x10
c0014d41:	89 c3                	mov    ebx,eax
c0014d43:	83 ec 08             	sub    esp,0x8
c0014d46:	6a 00                	push   0x0
c0014d48:	53                   	push   ebx
c0014d49:	e8 f8 52 ff ff       	call   c000a046 <VAS::VAS(bool)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d55:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d5f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014d71:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014d77:	e8 ba c1 ff ff       	call   c0010f36 <KeInitSignals()>
c0014d7c:	89 c2                	mov    edx,eax
c0014d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d82:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d92:	85 c0                	test   eax,eax
c0014d94:	74 42                	je     c0014dd8 <Process::Process(char const*, Process*, char**)+0x130>
c0014d96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d9a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014da0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014da6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014daa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014dba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc4:	05 0c 01 00 00       	add    eax,0x10c
c0014dc9:	83 ec 08             	sub    esp,0x8
c0014dcc:	52                   	push   edx
c0014dcd:	50                   	push   eax
c0014dce:	e8 7d b8 fe ff       	call   c0000650 <strcpy>
c0014dd3:	83 c4 10             	add    esp,0x10
c0014dd6:	eb 64                	jmp    c0014e3c <Process::Process(char const*, Process*, char**)+0x194>
c0014dd8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014de0:	83 ec 0c             	sub    esp,0xc
c0014de3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014de7:	e8 df 2c ff ff       	call   c0007acb <malloc>
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	89 c3                	mov    ebx,eax
c0014df1:	83 ec 08             	sub    esp,0x8
c0014df4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014df8:	53                   	push   ebx
c0014df9:	e8 60 3e ff ff       	call   c0008c5e <VgaText::VgaText(char const*)>
c0014dfe:	83 c4 10             	add    esp,0x10
c0014e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e05:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014e0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e15:	83 ec 0c             	sub    esp,0xc
c0014e18:	50                   	push   eax
c0014e19:	e8 ee 36 ff ff       	call   c000850c <addToTerminalCycle(VgaText*)>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e25:	05 0c 01 00 00       	add    eax,0x10c
c0014e2a:	83 ec 08             	sub    esp,0x8
c0014e2d:	68 1d 19 02 c0       	push   0xc002191d
c0014e32:	50                   	push   eax
c0014e33:	e8 18 b8 fe ff       	call   c0000650 <strcpy>
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	90                   	nop
c0014e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e40:	83 c0 0c             	add    eax,0xc
c0014e43:	83 ec 08             	sub    esp,0x8
c0014e46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e4a:	50                   	push   eax
c0014e4b:	e8 00 b8 fe ff       	call   c0000650 <strcpy>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	83 ec 08             	sub    esp,0x8
c0014e56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e5e:	e8 d9 fd ff ff       	call   c0014c3c <Process::addArgs(char**)>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	83 ec 08             	sub    esp,0x8
c0014e69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e71:	e8 3f ed ff ff       	call   c0013bb5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014e76:	83 c4 10             	add    esp,0x10
c0014e79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014e7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014e81:	83 f0 01             	xor    eax,0x1
c0014e84:	88 c2                	mov    dl,al
c0014e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014e90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014e95:	83 ec 04             	sub    esp,0x4
c0014e98:	50                   	push   eax
c0014e99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e9d:	68 74 19 02 c0       	push   0xc0021974
c0014ea2:	e8 57 5a ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0014ea7:	83 c4 10             	add    esp,0x10
c0014eaa:	90                   	nop
c0014eab:	83 c4 14             	add    esp,0x14
c0014eae:	5b                   	pop    ebx
c0014eaf:	5e                   	pop    esi
c0014eb0:	c3                   	ret    
c0014eb1:	90                   	nop
c0014eb2:	66 90                	xchg   ax,ax

c0014eb4 <Process::Process(bool, char const*, Process*, char**)>:
c0014eb4:	56                   	push   esi
c0014eb5:	53                   	push   ebx
c0014eb6:	83 ec 24             	sub    esp,0x24
c0014eb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ebd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ec5:	05 0c 02 00 00       	add    eax,0x20c
c0014eca:	bb 07 00 00 00       	mov    ebx,0x7
c0014ecf:	89 c6                	mov    esi,eax
c0014ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ed4:	85 db                	test   ebx,ebx
c0014ed6:	78 14                	js     c0014eec <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	56                   	push   esi
c0014edc:	e8 a7 a3 00 00       	call   c001f288 <ThreadControlBlock::ThreadControlBlock()>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	83 c6 5f             	add    esi,0x5f
c0014ee7:	83 eb 01             	sub    ebx,0x1
c0014eea:	eb e8                	jmp    c0014ed4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014eec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ef0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014efb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014f02:	83 ec 0c             	sub    esp,0xc
c0014f05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f09:	e8 04 ba ff ff       	call   c0010912 <KeNewProcessEnv(Process*)>
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	89 c2                	mov    edx,eax
c0014f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f17:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014f1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f21:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014f2a:	a1 20 2b 02 c0       	mov    eax,ds:0xc0022b20
c0014f2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f32:	89 15 20 2b 02 c0    	mov    DWORD PTR ds:0xc0022b20,edx
c0014f38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014f3c:	89 02                	mov    DWORD PTR [edx],eax
c0014f3e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014f46:	83 ec 0c             	sub    esp,0xc
c0014f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f4d:	e8 79 2b ff ff       	call   c0007acb <malloc>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	89 c3                	mov    ebx,eax
c0014f57:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014f5c:	83 ec 08             	sub    esp,0x8
c0014f5f:	50                   	push   eax
c0014f60:	53                   	push   ebx
c0014f61:	e8 e0 50 ff ff       	call   c000a046 <VAS::VAS(bool)>
c0014f66:	83 c4 10             	add    esp,0x10
c0014f69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f6d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f77:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f85:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014f89:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014f8f:	e8 a2 bf ff ff       	call   c0010f36 <KeInitSignals()>
c0014f94:	89 c2                	mov    edx,eax
c0014f96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f9a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fa4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014faa:	85 c0                	test   eax,eax
c0014fac:	74 42                	je     c0014ff0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014fae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fb2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014fb8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014fbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fc2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014fc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fcc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014fd2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014fd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fdc:	05 0c 01 00 00       	add    eax,0x10c
c0014fe1:	83 ec 08             	sub    esp,0x8
c0014fe4:	52                   	push   edx
c0014fe5:	50                   	push   eax
c0014fe6:	e8 65 b6 fe ff       	call   c0000650 <strcpy>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	eb 64                	jmp    c0015054 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014ff0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014ff8:	83 ec 0c             	sub    esp,0xc
c0014ffb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014fff:	e8 c7 2a ff ff       	call   c0007acb <malloc>
c0015004:	83 c4 10             	add    esp,0x10
c0015007:	89 c3                	mov    ebx,eax
c0015009:	83 ec 08             	sub    esp,0x8
c001500c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015010:	53                   	push   ebx
c0015011:	e8 48 3c ff ff       	call   c0008c5e <VgaText::VgaText(char const*)>
c0015016:	83 c4 10             	add    esp,0x10
c0015019:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001501d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015023:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015027:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001502d:	83 ec 0c             	sub    esp,0xc
c0015030:	50                   	push   eax
c0015031:	e8 d6 34 ff ff       	call   c000850c <addToTerminalCycle(VgaText*)>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001503d:	05 0c 01 00 00       	add    eax,0x10c
c0015042:	83 ec 08             	sub    esp,0x8
c0015045:	68 1d 19 02 c0       	push   0xc002191d
c001504a:	50                   	push   eax
c001504b:	e8 00 b6 fe ff       	call   c0000650 <strcpy>
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	90                   	nop
c0015054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015058:	83 c0 0c             	add    eax,0xc
c001505b:	83 ec 08             	sub    esp,0x8
c001505e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015062:	50                   	push   eax
c0015063:	e8 e8 b5 fe ff       	call   c0000650 <strcpy>
c0015068:	83 c4 10             	add    esp,0x10
c001506b:	83 ec 08             	sub    esp,0x8
c001506e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015072:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015076:	e8 c1 fb ff ff       	call   c0014c3c <Process::addArgs(char**)>
c001507b:	83 c4 10             	add    esp,0x10
c001507e:	90                   	nop
c001507f:	83 c4 24             	add    esp,0x24
c0015082:	5b                   	pop    ebx
c0015083:	5e                   	pop    esi
c0015084:	c3                   	ret    
c0015085:	8d 76 00             	lea    esi,[esi+0x0]

c0015088 <taskStartupFunction>:
c0015088:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001508d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015090:	c3                   	ret    
c0015091:	90                   	nop
c0015092:	66 90                	xchg   ax,ax

c0015094 <Semaphore::Semaphore(int)>:
c0015094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001509c:	89 10                	mov    DWORD PTR [eax],edx
c001509e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00150a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00150b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00150bf:	90                   	nop
c00150c0:	c3                   	ret    
c00150c1:	90                   	nop
c00150c2:	66 90                	xchg   ax,ax

c00150c4 <Mutex::Mutex()>:
c00150c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150c8:	6a 01                	push   0x1
c00150ca:	50                   	push   eax
c00150cb:	e8 c4 ff ff ff       	call   c0015094 <Semaphore::Semaphore(int)>
c00150d0:	83 c4 08             	add    esp,0x8
c00150d3:	90                   	nop
c00150d4:	c3                   	ret    
c00150d5:	90                   	nop
c00150d6:	66 90                	xchg   ax,ax

c00150d8 <Process::createThread(void (*)(void*), void*, int)>:
c00150d8:	57                   	push   edi
c00150d9:	31 c9                	xor    ecx,ecx
c00150db:	56                   	push   esi
c00150dc:	53                   	push   ebx
c00150dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00150e1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00150e8:	89 f2                	mov    edx,esi
c00150ea:	66 90                	xchg   ax,ax
c00150ec:	0f b7 c2             	movzx  eax,dx
c00150ef:	80 e2 01             	and    dl,0x1
c00150f2:	74 14                	je     c0015108 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00150f4:	d1 f8                	sar    eax,1
c00150f6:	83 c1 01             	add    ecx,0x1
c00150f9:	83 f9 10             	cmp    ecx,0x10
c00150fc:	89 c2                	mov    edx,eax
c00150fe:	75 ec                	jne    c00150ec <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015100:	31 db                	xor    ebx,ebx
c0015102:	89 d8                	mov    eax,ebx
c0015104:	5b                   	pop    ebx
c0015105:	5e                   	pop    esi
c0015106:	5f                   	pop    edi
c0015107:	c3                   	ret    
c0015108:	b8 01 00 00 00       	mov    eax,0x1
c001510d:	d3 e0                	shl    eax,cl
c001510f:	09 c6                	or     esi,eax
c0015111:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015118:	8d 04 49             	lea    eax,[ecx+ecx*2]
c001511b:	c1 e0 05             	shl    eax,0x5
c001511e:	29 c8                	sub    eax,ecx
c0015120:	01 d8                	add    eax,ebx
c0015122:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015129:	75 0d                	jne    c0015138 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001512b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015135:	8d 76 00             	lea    esi,[esi+0x0]
c0015138:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001513e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015141:	83 ec 0c             	sub    esp,0xc
c0015144:	c1 e6 05             	shl    esi,0x5
c0015147:	29 ce                	sub    esi,ecx
c0015149:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001514c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001514f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015155:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c001515b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015161:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015168:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001516e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015172:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015178:	89 ca                	mov    edx,ecx
c001517a:	f7 da                	neg    edx
c001517c:	c1 e2 15             	shl    edx,0x15
c001517f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015185:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001518b:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001518f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015199:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001519f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151a3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00151a9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00151b3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00151bd:	68 00 01 00 00       	push   0x100
c00151c2:	e8 04 29 ff ff       	call   c0007acb <malloc>
c00151c7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00151ca:	58                   	pop    eax
c00151cb:	5a                   	pop    edx
c00151cc:	53                   	push   ebx
c00151cd:	68 84 81 02 c0       	push   0xc0028184
c00151d2:	e8 49 9e 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	89 d8                	mov    eax,ebx
c00151dc:	5b                   	pop    ebx
c00151dd:	5e                   	pop    esi
c00151de:	5f                   	pop    edi
c00151df:	c3                   	ret    

c00151e0 <Process::createUserThread()>:
c00151e0:	83 ec 0c             	sub    esp,0xc
c00151e3:	68 80 00 00 00       	push   0x80
c00151e8:	6a 00                	push   0x0
c00151ea:	68 34 4b 01 c0       	push   0xc0014b34
c00151ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151f3:	50                   	push   eax
c00151f4:	e8 df fe ff ff       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c00151f9:	83 c4 1c             	add    esp,0x1c
c00151fc:	c3                   	ret    
c00151fd:	8d 76 00             	lea    esi,[esi+0x0]

c0015200 <setupMultitasking(void (*)())>:
c0015200:	56                   	push   esi
c0015201:	53                   	push   ebx
c0015202:	83 ec 04             	sub    esp,0x4
c0015205:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015209:	eb 11                	jmp    c001521c <setupMultitasking(void (*)())+0x1c>
c001520b:	90                   	nop
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	68 84 81 02 c0       	push   0xc0028184
c0015214:	e8 4b 9d 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	83 ec 0c             	sub    esp,0xc
c001521f:	68 84 81 02 c0       	push   0xc0028184
c0015224:	e8 17 9d 00 00       	call   c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015229:	83 c4 10             	add    esp,0x10
c001522c:	84 c0                	test   al,al
c001522e:	74 dc                	je     c001520c <setupMultitasking(void (*)())+0xc>
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	68 24 07 00 00       	push   0x724
c0015238:	e8 8e 28 ff ff       	call   c0007acb <malloc>
c001523d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015244:	6a 00                	push   0x0
c0015246:	68 21 19 02 c0       	push   0xc0021921
c001524b:	6a 01                	push   0x1
c001524d:	50                   	push   eax
c001524e:	89 c3                	mov    ebx,eax
c0015250:	e8 5f fc ff ff       	call   c0014eb4 <Process::Process(bool, char const*, Process*, char**)>
c0015255:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001525b:	83 c4 14             	add    esp,0x14
c001525e:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0015264:	50                   	push   eax
c0015265:	e8 f7 34 ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c001526a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015271:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001527b:	83 c8 01             	or     eax,0x1
c001527e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015285:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001528b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001528e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015298:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001529e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00152a8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00152ae:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00152b8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00152c2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00152c8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00152ce:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00152d8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00152e2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00152e9:	e8 dd 27 ff ff       	call   c0007acb <malloc>
c00152ee:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00152f4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00152fa:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015300:	5a                   	pop    edx
c0015301:	59                   	pop    ecx
c0015302:	68 1d 19 02 c0       	push   0xc002191d
c0015307:	50                   	push   eax
c0015308:	e8 43 b3 fe ff       	call   c0000650 <strcpy>
c001530d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015314:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015318:	83 c4 14             	add    esp,0x14
c001531b:	5b                   	pop    ebx
c001531c:	5e                   	pop    esi
c001531d:	e9 47 af fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015322:	66 90                	xchg   ax,ax

c0015324 <schedule()>:
c0015324:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001532a:	85 d2                	test   edx,edx
c001532c:	74 0e                	je     c001533c <schedule()+0x18>
c001532e:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015338:	c3                   	ret    
c0015339:	8d 76 00             	lea    esi,[esi+0x0]
c001533c:	53                   	push   ebx
c001533d:	83 ec 14             	sub    esp,0x14
c0015340:	68 84 81 02 c0       	push   0xc0028184
c0015345:	e8 f6 9b 00 00       	call   c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001534a:	83 c4 10             	add    esp,0x10
c001534d:	84 c0                	test   al,al
c001534f:	75 3f                	jne    c0015390 <schedule()+0x6c>
c0015351:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015356:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015359:	83 fa 01             	cmp    edx,0x1
c001535c:	74 3a                	je     c0015398 <schedule()+0x74>
c001535e:	66 90                	xchg   ax,ax
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	68 84 81 02 c0       	push   0xc0028184
c0015368:	e8 ef 9b 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001536d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015374:	89 c3                	mov    ebx,eax
c0015376:	e8 e9 9b 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001537b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015382:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015385:	e8 02 f8 ff ff       	call   c0014b8c <switchToThread(ThreadControlBlock*)>
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	8d 76 00             	lea    esi,[esi+0x0]
c0015390:	83 c4 08             	add    esp,0x8
c0015393:	5b                   	pop    ebx
c0015394:	c3                   	ret    
c0015395:	8d 76 00             	lea    esi,[esi+0x0]
c0015398:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001539f:	83 ec 08             	sub    esp,0x8
c00153a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a7:	50                   	push   eax
c00153a8:	68 84 81 02 c0       	push   0xc0028184
c00153ad:	e8 6e 9c 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	eb a9                	jmp    c0015360 <schedule()+0x3c>
c00153b7:	90                   	nop

c00153b8 <Semaphore::tryAcquire()>:
c00153b8:	53                   	push   ebx
c00153b9:	83 ec 08             	sub    esp,0x8
c00153bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00153c0:	fa                   	cli    
c00153c1:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00153c7:	8d 42 01             	lea    eax,[edx+0x1]
c00153ca:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153cf:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153d4:	8d 58 01             	lea    ebx,[eax+0x1]
c00153d7:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00153dd:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00153e0:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00153e2:	7c 2c                	jl     c0015410 <Semaphore::tryAcquire()+0x58>
c00153e4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153e9:	85 c0                	test   eax,eax
c00153eb:	75 0b                	jne    c00153f8 <Semaphore::tryAcquire()+0x40>
c00153ed:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153f2:	85 c0                	test   eax,eax
c00153f4:	75 5a                	jne    c0015450 <Semaphore::tryAcquire()+0x98>
c00153f6:	66 90                	xchg   ax,ax
c00153f8:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00153fe:	31 c0                	xor    eax,eax
c0015400:	85 d2                	test   edx,edx
c0015402:	75 04                	jne    c0015408 <Semaphore::tryAcquire()+0x50>
c0015404:	fb                   	sti    
c0015405:	8d 76 00             	lea    esi,[esi+0x0]
c0015408:	83 c4 08             	add    esp,0x8
c001540b:	5b                   	pop    ebx
c001540c:	c3                   	ret    
c001540d:	8d 76 00             	lea    esi,[esi+0x0]
c0015410:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015415:	83 c3 01             	add    ebx,0x1
c0015418:	85 c0                	test   eax,eax
c001541a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001541d:	75 21                	jne    c0015440 <Semaphore::tryAcquire()+0x88>
c001541f:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015425:	85 c9                	test   ecx,ecx
c0015427:	74 17                	je     c0015440 <Semaphore::tryAcquire()+0x88>
c0015429:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015433:	e8 ec fe ff ff       	call   c0015324 <schedule()>
c0015438:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001543d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015440:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015446:	85 d2                	test   edx,edx
c0015448:	b0 01                	mov    al,0x1
c001544a:	75 bc                	jne    c0015408 <Semaphore::tryAcquire()+0x50>
c001544c:	eb b6                	jmp    c0015404 <Semaphore::tryAcquire()+0x4c>
c001544e:	66 90                	xchg   ax,ax
c0015450:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001545a:	e8 c5 fe ff ff       	call   c0015324 <schedule()>
c001545f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015464:	8d 50 ff             	lea    edx,[eax-0x1]
c0015467:	31 c0                	xor    eax,eax
c0015469:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001546f:	85 d2                	test   edx,edx
c0015471:	75 95                	jne    c0015408 <Semaphore::tryAcquire()+0x50>
c0015473:	eb 8f                	jmp    c0015404 <Semaphore::tryAcquire()+0x4c>
c0015475:	90                   	nop
c0015476:	66 90                	xchg   ax,ax

c0015478 <Semaphore::assertLocked(char const*)>:
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001547f:	fa                   	cli    
c0015480:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015486:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001548b:	83 c1 01             	add    ecx,0x1
c001548e:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015494:	8d 48 01             	lea    ecx,[eax+0x1]
c0015497:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001549d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001549f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00154a2:	7c 28                	jl     c00154cc <Semaphore::assertLocked(char const*)+0x54>
c00154a4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00154a9:	85 c0                	test   eax,eax
c00154ab:	75 0b                	jne    c00154b8 <Semaphore::assertLocked(char const*)+0x40>
c00154ad:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00154b2:	85 c0                	test   eax,eax
c00154b4:	75 32                	jne    c00154e8 <Semaphore::assertLocked(char const*)+0x70>
c00154b6:	66 90                	xchg   ax,ax
c00154b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154bd:	83 e8 01             	sub    eax,0x1
c00154c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154c5:	75 01                	jne    c00154c8 <Semaphore::assertLocked(char const*)+0x50>
c00154c7:	fb                   	sti    
c00154c8:	83 c4 0c             	add    esp,0xc
c00154cb:	c3                   	ret    
c00154cc:	83 ec 0c             	sub    esp,0xc
c00154cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154d3:	52                   	push   edx
c00154d4:	e8 44 b6 ff ff       	call   c0010b1d <KePanic(char const*)>
c00154d9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	83 e8 01             	sub    eax,0x1
c00154e4:	eb be                	jmp    c00154a4 <Semaphore::assertLocked(char const*)+0x2c>
c00154e6:	66 90                	xchg   ax,ax
c00154e8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154f2:	e8 2d fe ff ff       	call   c0015324 <schedule()>
c00154f7:	eb bf                	jmp    c00154b8 <Semaphore::assertLocked(char const*)+0x40>
c00154f9:	8d 76 00             	lea    esi,[esi+0x0]

c00154fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00154fc:	83 ec 0c             	sub    esp,0xc
c00154ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015504:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015508:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001550b:	e8 14 fe ff ff       	call   c0015324 <schedule()>
c0015510:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015515:	83 e8 01             	sub    eax,0x1
c0015518:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001551d:	75 01                	jne    c0015520 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001551f:	fb                   	sti    
c0015520:	83 c4 0c             	add    esp,0xc
c0015523:	c3                   	ret    

c0015524 <blockTask(TaskState)>:
c0015524:	83 ec 0c             	sub    esp,0xc
c0015527:	fa                   	cli    
c0015528:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001552d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015531:	83 c0 01             	add    eax,0x1
c0015534:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015539:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001553e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015541:	e8 de fd ff ff       	call   c0015324 <schedule()>
c0015546:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001554b:	83 e8 01             	sub    eax,0x1
c001554e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015553:	75 03                	jne    c0015558 <blockTask(TaskState)+0x34>
c0015555:	fb                   	sti    
c0015556:	66 90                	xchg   ax,ax
c0015558:	83 c4 0c             	add    esp,0xc
c001555b:	c3                   	ret    

c001555c <waitTask(int, int*, int)>:
c001555c:	83 ec 18             	sub    esp,0x18
c001555f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015564:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015568:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001556b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001556f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015574:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015577:	6a 07                	push   0x7
c0015579:	e8 a6 ff ff ff       	call   c0015524 <blockTask(TaskState)>
c001557e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015583:	83 c4 10             	add    esp,0x10
c0015586:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015589:	85 d2                	test   edx,edx
c001558b:	74 0b                	je     c0015598 <waitTask(int, int*, int)+0x3c>
c001558d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015590:	89 02                	mov    DWORD PTR [edx],eax
c0015592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015597:	90                   	nop
c0015598:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001559b:	83 c4 0c             	add    esp,0xc
c001559e:	c3                   	ret    
c001559f:	90                   	nop

c00155a0 <milliTenthSleepUntil(unsigned int)>:
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155a7:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00155ad:	76 05                	jbe    c00155b4 <milliTenthSleepUntil(unsigned int)+0x14>
c00155af:	90                   	nop
c00155b0:	83 c4 0c             	add    esp,0xc
c00155b3:	c3                   	ret    
c00155b4:	fa                   	cli    
c00155b5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00155bb:	83 ec 08             	sub    esp,0x8
c00155be:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00155c4:	83 c2 01             	add    edx,0x1
c00155c7:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00155cd:	83 c1 01             	add    ecx,0x1
c00155d0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00155d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00155dc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00155df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e4:	50                   	push   eax
c00155e5:	68 78 81 02 c0       	push   0xc0028178
c00155ea:	e8 31 9a 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155ef:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00155f6:	e8 29 ff ff ff       	call   c0015524 <blockTask(TaskState)>
c00155fb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	83 e8 01             	sub    eax,0x1
c0015606:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001560b:	85 c0                	test   eax,eax
c001560d:	75 09                	jne    c0015618 <milliTenthSleepUntil(unsigned int)+0x78>
c001560f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015614:	85 c0                	test   eax,eax
c0015616:	75 14                	jne    c001562c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015618:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001561d:	83 e8 01             	sub    eax,0x1
c0015620:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015625:	75 89                	jne    c00155b0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015627:	fb                   	sti    
c0015628:	83 c4 0c             	add    esp,0xc
c001562b:	c3                   	ret    
c001562c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015636:	e8 e9 fc ff ff       	call   c0015324 <schedule()>
c001563b:	eb db                	jmp    c0015618 <milliTenthSleepUntil(unsigned int)+0x78>
c001563d:	8d 76 00             	lea    esi,[esi+0x0]

c0015640 <milliTenthSleep(unsigned int)>:
c0015640:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015644:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015649:	01 c2                	add    edx,eax
c001564b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001564f:	e9 4c ff ff ff       	jmp    c00155a0 <milliTenthSleepUntil(unsigned int)>

c0015654 <sleep(unsigned int)>:
c0015654:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c001565c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015660:	eb de                	jmp    c0015640 <milliTenthSleep(unsigned int)>
c0015662:	66 90                	xchg   ax,ax

c0015664 <Semaphore::acquire()>:
c0015664:	83 ec 0c             	sub    esp,0xc
c0015667:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001566b:	fa                   	cli    
c001566c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015671:	83 c0 01             	add    eax,0x1
c0015674:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015679:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001567e:	8d 48 01             	lea    ecx,[eax+0x1]
c0015681:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015687:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001568a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001568c:	7d 2e                	jge    c00156bc <Semaphore::acquire()+0x58>
c001568e:	83 c1 01             	add    ecx,0x1
c0015691:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015694:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015699:	85 c0                	test   eax,eax
c001569b:	75 0b                	jne    c00156a8 <Semaphore::acquire()+0x44>
c001569d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00156a2:	85 c0                	test   eax,eax
c00156a4:	75 66                	jne    c001570c <Semaphore::acquire()+0xa8>
c00156a6:	66 90                	xchg   ax,ax
c00156a8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00156ad:	83 e8 01             	sub    eax,0x1
c00156b0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00156b5:	75 01                	jne    c00156b8 <Semaphore::acquire()+0x54>
c00156b7:	fb                   	sti    
c00156b8:	83 c4 0c             	add    esp,0xc
c00156bb:	c3                   	ret    
c00156bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00156c8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00156cb:	85 c9                	test   ecx,ecx
c00156cd:	74 51                	je     c0015720 <Semaphore::acquire()+0xbc>
c00156cf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00156d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00156d8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00156db:	90                   	nop
c00156dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e1:	83 ec 0c             	sub    esp,0xc
c00156e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00156e7:	68 a0 19 02 c0       	push   0xc00219a0
c00156ec:	e8 0d 52 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00156f1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00156f8:	e8 27 fe ff ff       	call   c0015524 <blockTask(TaskState)>
c00156fd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	83 e8 01             	sub    eax,0x1
c0015708:	eb 8a                	jmp    c0015694 <Semaphore::acquire()+0x30>
c001570a:	66 90                	xchg   ax,ax
c001570c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015716:	e8 09 fc ff ff       	call   c0015324 <schedule()>
c001571b:	eb 8b                	jmp    c00156a8 <Semaphore::acquire()+0x44>
c001571d:	8d 76 00             	lea    esi,[esi+0x0]
c0015720:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015725:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015728:	eb b2                	jmp    c00156dc <Semaphore::acquire()+0x78>
c001572a:	66 90                	xchg   ax,ax

c001572c <taskReturned>:
c001572c:	83 ec 18             	sub    esp,0x18
c001572f:	68 c0 19 02 c0       	push   0xc00219c0
c0015734:	e8 e4 b3 ff ff       	call   c0010b1d <KePanic(char const*)>
c0015739:	83 c4 10             	add    esp,0x10
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	6a 02                	push   0x2
c0015741:	e8 de fd ff ff       	call   c0015524 <blockTask(TaskState)>
c0015746:	fa                   	cli    
c0015747:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001574c:	83 c0 01             	add    eax,0x1
c001574f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015754:	e8 cb fb ff ff       	call   c0015324 <schedule()>
c0015759:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001575e:	83 c4 10             	add    esp,0x10
c0015761:	83 e8 01             	sub    eax,0x1
c0015764:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015769:	85 c0                	test   eax,eax
c001576b:	75 cf                	jne    c001573c <taskReturned+0x10>
c001576d:	fb                   	sti    
c001576e:	eb cc                	jmp    c001573c <taskReturned+0x10>

c0015770 <Thr::processFromPID(int)>:
c0015770:	57                   	push   edi
c0015771:	56                   	push   esi
c0015772:	53                   	push   ebx
c0015773:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015777:	fa                   	cli    
c0015778:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001577e:	83 ec 0c             	sub    esp,0xc
c0015781:	68 84 81 02 c0       	push   0xc0028184
c0015786:	83 c1 01             	add    ecx,0x1
c0015789:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001578f:	e8 c8 97 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	89 c7                	mov    edi,eax
c0015799:	eb 15                	jmp    c00157b0 <Thr::processFromPID(int)+0x40>
c001579b:	90                   	nop
c001579c:	83 ec 0c             	sub    esp,0xc
c001579f:	68 84 81 02 c0       	push   0xc0028184
c00157a4:	e8 b3 97 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	39 f8                	cmp    eax,edi
c00157ae:	74 50                	je     c0015800 <Thr::processFromPID(int)+0x90>
c00157b0:	83 ec 0c             	sub    esp,0xc
c00157b3:	68 84 81 02 c0       	push   0xc0028184
c00157b8:	e8 9f 97 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157bd:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157c4:	89 c3                	mov    ebx,eax
c00157c6:	e8 99 97 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157cb:	58                   	pop    eax
c00157cc:	5a                   	pop    edx
c00157cd:	53                   	push   ebx
c00157ce:	68 84 81 02 c0       	push   0xc0028184
c00157d3:	e8 48 98 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157d8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157db:	83 c4 10             	add    esp,0x10
c00157de:	39 30                	cmp    DWORD PTR [eax],esi
c00157e0:	75 ba                	jne    c001579c <Thr::processFromPID(int)+0x2c>
c00157e2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00157e7:	83 e8 01             	sub    eax,0x1
c00157ea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00157ef:	74 0b                	je     c00157fc <Thr::processFromPID(int)+0x8c>
c00157f1:	8d 76 00             	lea    esi,[esi+0x0]
c00157f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157f7:	90                   	nop
c00157f8:	5b                   	pop    ebx
c00157f9:	5e                   	pop    esi
c00157fa:	5f                   	pop    edi
c00157fb:	c3                   	ret    
c00157fc:	fb                   	sti    
c00157fd:	eb f5                	jmp    c00157f4 <Thr::processFromPID(int)+0x84>
c00157ff:	90                   	nop
c0015800:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015805:	8d 50 ff             	lea    edx,[eax-0x1]
c0015808:	31 c0                	xor    eax,eax
c001580a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015810:	85 d2                	test   edx,edx
c0015812:	75 e4                	jne    c00157f8 <Thr::processFromPID(int)+0x88>
c0015814:	fb                   	sti    
c0015815:	5b                   	pop    ebx
c0015816:	5e                   	pop    esi
c0015817:	5f                   	pop    edi
c0015818:	c3                   	ret    
c0015819:	8d 76 00             	lea    esi,[esi+0x0]

c001581c <unblockTask(ThreadControlBlock*)>:
c001581c:	53                   	push   ebx
c001581d:	83 ec 08             	sub    esp,0x8
c0015820:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015824:	fa                   	cli    
c0015825:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001582a:	83 c0 01             	add    eax,0x1
c001582d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015832:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015835:	85 c0                	test   eax,eax
c0015837:	74 67                	je     c00158a0 <unblockTask(ThreadControlBlock*)+0x84>
c0015839:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001583c:	83 f8 01             	cmp    eax,0x1
c001583f:	74 37                	je     c0015878 <unblockTask(ThreadControlBlock*)+0x5c>
c0015841:	83 ec 0c             	sub    esp,0xc
c0015844:	68 84 81 02 c0       	push   0xc0028184
c0015849:	e8 0e 97 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584e:	83 c4 10             	add    esp,0x10
c0015851:	85 c0                	test   eax,eax
c0015853:	75 1b                	jne    c0015870 <unblockTask(ThreadControlBlock*)+0x54>
c0015855:	eb 5d                	jmp    c00158b4 <unblockTask(ThreadControlBlock*)+0x98>
c0015857:	90                   	nop
c0015858:	83 ec 08             	sub    esp,0x8
c001585b:	50                   	push   eax
c001585c:	68 84 81 02 c0       	push   0xc0028184
c0015861:	e8 16 9a 00 00       	call   c001f27c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	85 c0                	test   eax,eax
c001586b:	74 47                	je     c00158b4 <unblockTask(ThreadControlBlock*)+0x98>
c001586d:	8d 76 00             	lea    esi,[esi+0x0]
c0015870:	39 c3                	cmp    ebx,eax
c0015872:	75 e4                	jne    c0015858 <unblockTask(ThreadControlBlock*)+0x3c>
c0015874:	eb 12                	jmp    c0015888 <unblockTask(ThreadControlBlock*)+0x6c>
c0015876:	66 90                	xchg   ax,ax
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	68 3f 19 02 c0       	push   0xc002193f
c0015880:	e8 79 50 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001588d:	83 e8 01             	sub    eax,0x1
c0015890:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015895:	75 01                	jne    c0015898 <unblockTask(ThreadControlBlock*)+0x7c>
c0015897:	fb                   	sti    
c0015898:	83 c4 08             	add    esp,0x8
c001589b:	5b                   	pop    ebx
c001589c:	c3                   	ret    
c001589d:	8d 76 00             	lea    esi,[esi+0x0]
c00158a0:	83 ec 0c             	sub    esp,0xc
c00158a3:	68 28 19 02 c0       	push   0xc0021928
c00158a8:	e8 51 50 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	eb d6                	jmp    c0015888 <unblockTask(ThreadControlBlock*)+0x6c>
c00158b2:	66 90                	xchg   ax,ax
c00158b4:	83 ec 08             	sub    esp,0x8
c00158b7:	53                   	push   ebx
c00158b8:	68 84 81 02 c0       	push   0xc0028184
c00158bd:	e8 5e 97 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	eb c1                	jmp    c0015888 <unblockTask(ThreadControlBlock*)+0x6c>
c00158c7:	90                   	nop

c00158c8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00158c8:	55                   	push   ebp
c00158c9:	57                   	push   edi
c00158ca:	56                   	push   esi
c00158cb:	53                   	push   ebx
c00158cc:	83 ec 1c             	sub    esp,0x1c
c00158cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00158d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158d6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00158dc:	85 ed                	test   ebp,ebp
c00158de:	7e 28                	jle    c0015908 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00158e0:	31 f6                	xor    esi,esi
c00158e2:	66 90                	xchg   ax,ax
c00158e4:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00158eb:	83 ec 0c             	sub    esp,0xc
c00158ee:	83 c6 01             	add    esi,0x1
c00158f1:	57                   	push   edi
c00158f2:	e8 e4 21 ff ff       	call   c0007adb <free>
c00158f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015903:	7f df                	jg     c00158e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015905:	8d 76 00             	lea    esi,[esi+0x0]
c0015908:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015912:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015917:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001591a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001591d:	d3 c0                	rol    eax,cl
c001591f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015926:	21 c8                	and    eax,ecx
c0015928:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001592f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015932:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001593a:	89 f7                	mov    edi,esi
c001593c:	0f 85 72 01 00 00    	jne    c0015ab4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015942:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015948:	85 ed                	test   ebp,ebp
c001594a:	74 1c                	je     c0015968 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001594c:	83 ec 0c             	sub    esp,0xc
c001594f:	55                   	push   ebp
c0015950:	e8 d9 ae ff ff       	call   c001082e <EnvVarContainer::~EnvVarContainer()>
c0015955:	59                   	pop    ecx
c0015956:	5e                   	pop    esi
c0015957:	6a 0c                	push   0xc
c0015959:	55                   	push   ebp
c001595a:	e8 a1 4e ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001595f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	89 f7                	mov    edi,esi
c0015967:	90                   	nop
c0015968:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001596e:	85 c0                	test   eax,eax
c0015970:	0f 84 b2 00 00 00    	je     c0015a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015976:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015979:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001597d:	31 c9                	xor    ecx,ecx
c001597f:	eb 17                	jmp    c0015998 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015981:	8d 76 00             	lea    esi,[esi+0x0]
c0015984:	83 c1 01             	add    ecx,0x1
c0015987:	83 f9 10             	cmp    ecx,0x10
c001598a:	0f 84 98 00 00 00    	je     c0015a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015990:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015996:	66 90                	xchg   ax,ax
c0015998:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001599f:	d3 fa                	sar    edx,cl
c00159a1:	80 e2 01             	and    dl,0x1
c00159a4:	74 de                	je     c0015984 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159a6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00159a9:	c1 e2 05             	shl    edx,0x5
c00159ac:	29 ca                	sub    edx,ecx
c00159ae:	01 d0                	add    eax,edx
c00159b0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00159b6:	83 fd 07             	cmp    ebp,0x7
c00159b9:	75 c9                	jne    c0015984 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159bb:	05 40 02 00 00       	add    eax,0x240
c00159c0:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00159c3:	83 fd ff             	cmp    ebp,0xffffffff
c00159c6:	0f 8c f0 00 00 00    	jl     c0015abc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00159cc:	0f 84 ae 01 00 00    	je     c0015b80 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00159d2:	85 ed                	test   ebp,ebp
c00159d4:	0f 84 92 01 00 00    	je     c0015b6c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00159da:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00159dc:	75 a6                	jne    c0015984 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00159e2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00159e8:	01 d0                	add    eax,edx
c00159ea:	66 90                	xchg   ax,ax
c00159ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00159f9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a02:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015a09:	50                   	push   eax
c0015a0a:	e8 0d fe ff ff       	call   c001581c <unblockTask(ThreadControlBlock*)>
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a15:	89 f7                	mov    edi,esi
c0015a17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a1b:	83 c1 01             	add    ecx,0x1
c0015a1e:	83 f9 10             	cmp    ecx,0x10
c0015a21:	0f 85 69 ff ff ff    	jne    c0015990 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015a27:	90                   	nop
c0015a28:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015a2e:	85 c0                	test   eax,eax
c0015a30:	74 62                	je     c0015a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015a32:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015a38:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015a3e:	74 54                	je     c0015a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015a40:	83 ec 0c             	sub    esp,0xc
c0015a43:	68 84 81 02 c0       	push   0xc0028184
c0015a48:	e8 0f 95 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a4d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015a54:	89 c7                	mov    edi,eax
c0015a56:	e8 e5 94 00 00       	call   c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	84 c0                	test   al,al
c0015a60:	0f 84 ce 00 00 00    	je     c0015b34 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015a66:	66 90                	xchg   ax,ax
c0015a68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a6b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a71:	85 d2                	test   edx,edx
c0015a73:	74 0f                	je     c0015a84 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015a75:	8b 02                	mov    eax,DWORD PTR [edx]
c0015a77:	83 ec 0c             	sub    esp,0xc
c0015a7a:	52                   	push   edx
c0015a7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a7e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a81:	83 c4 10             	add    esp,0x10
c0015a84:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015a8e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015a91:	8d 76 00             	lea    esi,[esi+0x0]
c0015a94:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015a9a:	85 db                	test   ebx,ebx
c0015a9c:	74 16                	je     c0015ab4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a9e:	83 ec 0c             	sub    esp,0xc
c0015aa1:	53                   	push   ebx
c0015aa2:	e8 dd 40 ff ff       	call   c0009b84 <VAS::~VAS()>
c0015aa7:	58                   	pop    eax
c0015aa8:	5a                   	pop    edx
c0015aa9:	6a 14                	push   0x14
c0015aab:	53                   	push   ebx
c0015aac:	e8 4f 4d ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0015ab1:	83 c4 10             	add    esp,0x10
c0015ab4:	83 c4 1c             	add    esp,0x1c
c0015ab7:	5b                   	pop    ebx
c0015ab8:	5e                   	pop    esi
c0015ab9:	5f                   	pop    edi
c0015aba:	5d                   	pop    ebp
c0015abb:	c3                   	ret    
c0015abc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	68 f4 19 02 c0       	push   0xc00219f4
c0015ac8:	e8 50 b0 ff ff       	call   c0010b1d <KePanic(char const*)>
c0015acd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015ad0:	83 c4 10             	add    esp,0x10
c0015ad3:	89 f7                	mov    edi,esi
c0015ad5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ad9:	e9 a6 fe ff ff       	jmp    c0015984 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015ade:	66 90                	xchg   ax,ax
c0015ae0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ae6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015aec:	75 1e                	jne    c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015aee:	83 ec 0c             	sub    esp,0xc
c0015af1:	68 5c 1a 02 c0       	push   0xc0021a5c
c0015af6:	e8 03 4e ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0015afb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015b02:	e8 1d fa ff ff       	call   c0015524 <blockTask(TaskState)>
c0015b07:	83 c4 10             	add    esp,0x10
c0015b0a:	66 90                	xchg   ax,ax
c0015b0c:	83 ec 08             	sub    esp,0x8
c0015b0f:	56                   	push   esi
c0015b10:	68 84 81 02 c0       	push   0xc0028184
c0015b15:	e8 06 95 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b1a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b21:	e8 36 94 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	39 f8                	cmp    eax,edi
c0015b2b:	0f 84 37 ff ff ff    	je     c0015a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015b31:	8d 76 00             	lea    esi,[esi+0x0]
c0015b34:	83 ec 0c             	sub    esp,0xc
c0015b37:	68 84 81 02 c0       	push   0xc0028184
c0015b3c:	e8 1b 94 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b41:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b48:	89 c6                	mov    esi,eax
c0015b4a:	e8 15 94 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	39 f3                	cmp    ebx,esi
c0015b54:	74 b6                	je     c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b56:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015b59:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b5c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015b62:	75 a8                	jne    c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b64:	e9 77 ff ff ff       	jmp    c0015ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015b69:	8d 76 00             	lea    esi,[esi+0x0]
c0015b6c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	68 28 1a 02 c0       	push   0xc0021a28
c0015b78:	e9 4b ff ff ff       	jmp    c0015ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b84:	8b 36                	mov    esi,DWORD PTR [esi]
c0015b86:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015b89:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b8c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015b92:	01 d7                	add    edi,edx
c0015b94:	89 f8                	mov    eax,edi
c0015b96:	e9 51 fe ff ff       	jmp    c00159ec <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015b9b:	90                   	nop

c0015b9c <cleanerTaskFunction(void*)>:
c0015b9c:	53                   	push   ebx
c0015b9d:	83 ec 08             	sub    esp,0x8
c0015ba0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ba5:	83 e8 01             	sub    eax,0x1
c0015ba8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bad:	75 01                	jne    c0015bb0 <cleanerTaskFunction(void*)+0x14>
c0015baf:	fb                   	sti    
c0015bb0:	fa                   	cli    
c0015bb1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bb6:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015bbd:	8d 50 01             	lea    edx,[eax+0x1]
c0015bc0:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015bc6:	0f 84 c4 00 00 00    	je     c0015c90 <cleanerTaskFunction(void*)+0xf4>
c0015bcc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bd1:	85 c0                	test   eax,eax
c0015bd3:	75 03                	jne    c0015bd8 <cleanerTaskFunction(void*)+0x3c>
c0015bd5:	fb                   	sti    
c0015bd6:	66 90                	xchg   ax,ax
c0015bd8:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015bdf:	fa                   	cli    
c0015be0:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015be6:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015bec:	83 c2 01             	add    edx,0x1
c0015bef:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015bf5:	83 c1 01             	add    ecx,0x1
c0015bf8:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015bfe:	fa                   	cli    
c0015bff:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015c05:	83 c3 01             	add    ebx,0x1
c0015c08:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015c0e:	eb 28                	jmp    c0015c38 <cleanerTaskFunction(void*)+0x9c>
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	68 6c 81 02 c0       	push   0xc002816c
c0015c18:	e8 3f 93 00 00       	call   c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c1d:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015c24:	89 c3                	mov    ebx,eax
c0015c26:	e8 39 93 00 00       	call   c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c2e:	e8 95 fc ff ff       	call   c00158c8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	66 90                	xchg   ax,ax
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	68 6c 81 02 c0       	push   0xc002816c
c0015c40:	e8 fb 92 00 00       	call   c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	84 c0                	test   al,al
c0015c4a:	74 c4                	je     c0015c10 <cleanerTaskFunction(void*)+0x74>
c0015c4c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c51:	83 e8 01             	sub    eax,0x1
c0015c54:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c59:	75 01                	jne    c0015c5c <cleanerTaskFunction(void*)+0xc0>
c0015c5b:	fb                   	sti    
c0015c5c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015c61:	83 e8 01             	sub    eax,0x1
c0015c64:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015c69:	0f 85 31 ff ff ff    	jne    c0015ba0 <cleanerTaskFunction(void*)+0x4>
c0015c6f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015c74:	85 c0                	test   eax,eax
c0015c76:	0f 84 24 ff ff ff    	je     c0015ba0 <cleanerTaskFunction(void*)+0x4>
c0015c7c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015c86:	e8 99 f6 ff ff       	call   c0015324 <schedule()>
c0015c8b:	e9 10 ff ff ff       	jmp    c0015ba0 <cleanerTaskFunction(void*)+0x4>
c0015c90:	83 ec 0c             	sub    esp,0xc
c0015c93:	6a 02                	push   0x2
c0015c95:	e8 62 f8 ff ff       	call   c00154fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	e9 36 ff ff ff       	jmp    c0015bd8 <cleanerTaskFunction(void*)+0x3c>
c0015ca2:	66 90                	xchg   ax,ax

c0015ca4 <terminateTask(int)>:
c0015ca4:	83 ec 14             	sub    esp,0x14
c0015ca7:	fa                   	cli    
c0015ca8:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015cae:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015cb4:	83 c2 01             	add    edx,0x1
c0015cb7:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015cbd:	83 c1 01             	add    ecx,0x1
c0015cc0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015cc6:	fa                   	cli    
c0015cc7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ccc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015cd0:	83 c0 01             	add    eax,0x1
c0015cd3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cdd:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015ce0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ce8:	50                   	push   eax
c0015ce9:	68 6c 81 02 c0       	push   0xc002816c
c0015cee:	e8 2d 93 00 00       	call   c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015cf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf8:	83 c4 10             	add    esp,0x10
c0015cfb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015d02:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015d07:	85 c0                	test   eax,eax
c0015d09:	74 65                	je     c0015d70 <terminateTask(int)+0xcc>
c0015d0b:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015d12:	83 ec 0c             	sub    esp,0xc
c0015d15:	50                   	push   eax
c0015d16:	e8 01 fb ff ff       	call   c001581c <unblockTask(ThreadControlBlock*)>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	66 90                	xchg   ax,ax
c0015d20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d25:	83 e8 01             	sub    eax,0x1
c0015d28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d2d:	75 01                	jne    c0015d30 <terminateTask(int)+0x8c>
c0015d2f:	fb                   	sti    
c0015d30:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015d35:	83 e8 01             	sub    eax,0x1
c0015d38:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015d3d:	75 09                	jne    c0015d48 <terminateTask(int)+0xa4>
c0015d3f:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015d46:	75 3c                	jne    c0015d84 <terminateTask(int)+0xe0>
c0015d48:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d4d:	83 e8 01             	sub    eax,0x1
c0015d50:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d55:	75 01                	jne    c0015d58 <terminateTask(int)+0xb4>
c0015d57:	fb                   	sti    
c0015d58:	fa                   	cli    
c0015d59:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d5e:	83 c0 01             	add    eax,0x1
c0015d61:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d66:	66 90                	xchg   ax,ax
c0015d68:	e8 b7 f5 ff ff       	call   c0015324 <schedule()>
c0015d6d:	eb d9                	jmp    c0015d48 <terminateTask(int)+0xa4>
c0015d6f:	90                   	nop
c0015d70:	83 ec 0c             	sub    esp,0xc
c0015d73:	68 56 19 02 c0       	push   0xc0021956
c0015d78:	e8 81 4b ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0015d7d:	83 c4 10             	add    esp,0x10
c0015d80:	eb 9e                	jmp    c0015d20 <terminateTask(int)+0x7c>
c0015d82:	66 90                	xchg   ax,ax
c0015d84:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015d8e:	eb d8                	jmp    c0015d68 <terminateTask(int)+0xc4>

c0015d90 <Thr::terminateFromIRQ(int)>:
c0015d90:	83 ec 18             	sub    esp,0x18
c0015d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d97:	50                   	push   eax
c0015d98:	e8 07 ff ff ff       	call   c0015ca4 <terminateTask(int)>
c0015d9d:	90                   	nop
c0015d9e:	66 90                	xchg   ax,ax

c0015da0 <Semaphore::release()>:
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015da7:	fa                   	cli    
c0015da8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dad:	83 c0 01             	add    eax,0x1
c0015db0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015db5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015dba:	8d 48 01             	lea    ecx,[eax+0x1]
c0015dbd:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015dc3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015dc6:	85 c9                	test   ecx,ecx
c0015dc8:	74 42                	je     c0015e0c <Semaphore::release()+0x6c>
c0015dca:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015dd3:	51                   	push   ecx
c0015dd4:	e8 43 fa ff ff       	call   c001581c <unblockTask(ThreadControlBlock*)>
c0015dd9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	83 e8 01             	sub    eax,0x1
c0015de4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015de9:	85 c0                	test   eax,eax
c0015deb:	75 0b                	jne    c0015df8 <Semaphore::release()+0x58>
c0015ded:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015df2:	85 c0                	test   eax,eax
c0015df4:	75 22                	jne    c0015e18 <Semaphore::release()+0x78>
c0015df6:	66 90                	xchg   ax,ax
c0015df8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dfd:	83 e8 01             	sub    eax,0x1
c0015e00:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e05:	75 01                	jne    c0015e08 <Semaphore::release()+0x68>
c0015e07:	fb                   	sti    
c0015e08:	83 c4 0c             	add    esp,0xc
c0015e0b:	c3                   	ret    
c0015e0c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e0f:	83 e9 01             	sub    ecx,0x1
c0015e12:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e15:	eb cd                	jmp    c0015de4 <Semaphore::release()+0x44>
c0015e17:	90                   	nop
c0015e18:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015e22:	e8 fd f4 ff ff       	call   c0015324 <schedule()>
c0015e27:	eb cf                	jmp    c0015df8 <Semaphore::release()+0x58>
c0015e29:	8d 76 00             	lea    esi,[esi+0x0]

c0015e2c <__static_initialization_and_destruction_0(int, int)>:
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015e34:	0f 85 8e 00 00 00    	jne    c0015ec8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015e3a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015e42:	0f 85 80 00 00 00    	jne    c0015ec8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015e48:	83 ec 0c             	sub    esp,0xc
c0015e4b:	68 84 81 02 c0       	push   0xc0028184
c0015e50:	e8 7f 94 00 00       	call   c001f2d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	83 ec 04             	sub    esp,0x4
c0015e5b:	68 24 26 02 c0       	push   0xc0022624
c0015e60:	68 84 81 02 c0       	push   0xc0028184
c0015e65:	68 84 f2 01 c0       	push   0xc001f284
c0015e6a:	e8 41 49 ff ff       	call   c000a7b0 <__cxa_atexit>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	83 ec 0c             	sub    esp,0xc
c0015e75:	68 78 81 02 c0       	push   0xc0028178
c0015e7a:	e8 55 94 00 00       	call   c001f2d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	83 ec 04             	sub    esp,0x4
c0015e85:	68 24 26 02 c0       	push   0xc0022624
c0015e8a:	68 78 81 02 c0       	push   0xc0028178
c0015e8f:	68 84 f2 01 c0       	push   0xc001f284
c0015e94:	e8 17 49 ff ff       	call   c000a7b0 <__cxa_atexit>
c0015e99:	83 c4 10             	add    esp,0x10
c0015e9c:	83 ec 0c             	sub    esp,0xc
c0015e9f:	68 6c 81 02 c0       	push   0xc002816c
c0015ea4:	e8 2b 94 00 00       	call   c001f2d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	83 ec 04             	sub    esp,0x4
c0015eaf:	68 24 26 02 c0       	push   0xc0022624
c0015eb4:	68 6c 81 02 c0       	push   0xc002816c
c0015eb9:	68 84 f2 01 c0       	push   0xc001f284
c0015ebe:	e8 ed 48 ff ff       	call   c000a7b0 <__cxa_atexit>
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	66 90                	xchg   ax,ax
c0015ec8:	90                   	nop
c0015ec9:	83 c4 0c             	add    esp,0xc
c0015ecc:	c3                   	ret    
c0015ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0015ed0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	83 ec 08             	sub    esp,0x8
c0015ed6:	68 ff ff 00 00       	push   0xffff
c0015edb:	6a 01                	push   0x1
c0015edd:	e8 4a ff ff ff       	call   c0015e2c <__static_initialization_and_destruction_0(int, int)>
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	83 c4 0c             	add    esp,0xc
c0015ee8:	c3                   	ret    

c0015ee9 <Vm::inbv(unsigned short)>:
c0015ee9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015eed:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015ef2:	75 06                	jne    c0015efa <Vm::inbv(unsigned short)+0x11>
c0015ef4:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015ef9:	c3                   	ret    
c0015efa:	ec                   	in     al,dx
c0015efb:	c3                   	ret    

c0015efc <Vm::outbv(unsigned short, unsigned char)>:
c0015efc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f04:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015f09:	75 25                	jne    c0015f30 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015f0b:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015f11:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015f17:	8d 51 01             	lea    edx,[ecx+0x1]
c0015f1a:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015f20:	83 fa 20             	cmp    edx,0x20
c0015f23:	75 0c                	jne    c0015f31 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015f25:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015f2f:	c3                   	ret    
c0015f30:	ee                   	out    dx,al
c0015f31:	c3                   	ret    

c0015f32 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015f32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f3c:	c1 e0 04             	shl    eax,0x4
c0015f3f:	01 d0                	add    eax,edx
c0015f41:	c3                   	ret    

c0015f42 <Vm::getSegment(unsigned int)>:
c0015f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f46:	c1 e8 10             	shr    eax,0x10
c0015f49:	c3                   	ret    

c0015f4a <Vm::getOffset(unsigned int)>:
c0015f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f4e:	c3                   	ret    

c0015f4f <Vm::mainloop2()>:
c0015f4f:	83 ec 18             	sub    esp,0x18
c0015f52:	fa                   	cli    
c0015f53:	6a 02                	push   0x2
c0015f55:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015f5b:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015f62:	e8 95 f5 ff ff       	call   c00154fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f6c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015f70:	52                   	push   edx
c0015f71:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015f75:	52                   	push   edx
c0015f76:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015f7a:	52                   	push   edx
c0015f7b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015f7f:	50                   	push   eax
c0015f80:	e8 8a a2 fe ff       	call   c000020f <goToVM86>
c0015f85:	83 c4 2c             	add    esp,0x2c
c0015f88:	c3                   	ret    

c0015f89 <Vm::mainVm8086Loop(void*)>:
c0015f89:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f8e:	48                   	dec    eax
c0015f8f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f94:	75 01                	jne    c0015f97 <Vm::mainVm8086Loop(void*)+0xe>
c0015f96:	fb                   	sti    
c0015f97:	eb b6                	jmp    c0015f4f <Vm::mainloop2()>

c0015f99 <Vm::mainloop3(unsigned long)>:
c0015f99:	83 ec 18             	sub    esp,0x18
c0015f9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fa0:	fa                   	cli    
c0015fa1:	6a 02                	push   0x2
c0015fa3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015fa9:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015fb0:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015fb5:	e8 42 f5 ff ff       	call   c00154fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015fba:	83 c4 1c             	add    esp,0x1c
c0015fbd:	eb 90                	jmp    c0015f4f <Vm::mainloop2()>

c0015fbf <Vm::initialise8086()>:
c0015fbf:	83 ec 0c             	sub    esp,0xc
c0015fc2:	68 80 00 00 00       	push   0x80
c0015fc7:	6a 00                	push   0x0
c0015fc9:	68 89 5f 01 c0       	push   0xc0015f89
c0015fce:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015fd4:	e8 ff f0 ff ff       	call   c00150d8 <Process::createThread(void (*)(void*), void*, int)>
c0015fd9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015fe0:	68 00 01 00 00       	push   0x100
c0015fe5:	6a 00                	push   0x0
c0015fe7:	6a 00                	push   0x0
c0015fe9:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015fee:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015ff3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ff9:	e8 fe 3e ff ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015ffe:	83 c4 2c             	add    esp,0x2c
c0016001:	c3                   	ret    

c0016002 <Vm::finish8086()>:
c0016002:	53                   	push   ebx
c0016003:	83 ec 08             	sub    esp,0x8
c0016006:	fa                   	cli    
c0016007:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001600d:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0016014:	75 15                	jne    c001602b <Vm::finish8086()+0x29>
c0016016:	e8 09 f3 ff ff       	call   c0015324 <schedule()>
c001601b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016020:	48                   	dec    eax
c0016021:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016026:	75 de                	jne    c0016006 <Vm::finish8086()+0x4>
c0016028:	fb                   	sti    
c0016029:	eb db                	jmp    c0016006 <Vm::finish8086()+0x4>
c001602b:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0016032:	83 ec 0c             	sub    esp,0xc
c0016035:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c001603b:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016041:	e8 d6 f7 ff ff       	call   c001581c <unblockTask(ThreadControlBlock*)>
c0016046:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001604b:	83 c4 10             	add    esp,0x10
c001604e:	8d 50 ff             	lea    edx,[eax-0x1]
c0016051:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0016057:	85 d2                	test   edx,edx
c0016059:	75 01                	jne    c001605c <Vm::finish8086()+0x5a>
c001605b:	fb                   	sti    
c001605c:	83 c4 08             	add    esp,0x8
c001605f:	89 d8                	mov    eax,ebx
c0016061:	5b                   	pop    ebx
c0016062:	c3                   	ret    

c0016063 <Vm::getOutput8086(unsigned char*)>:
c0016063:	57                   	push   edi
c0016064:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c001606a:	56                   	push   esi
c001606b:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0016070:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016074:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016076:	5e                   	pop    esi
c0016077:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c001607c:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0016086:	5f                   	pop    edi
c0016087:	c3                   	ret    

c0016088 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016088:	55                   	push   ebp
c0016089:	57                   	push   edi
c001608a:	56                   	push   esi
c001608b:	53                   	push   ebx
c001608c:	83 ec 0c             	sub    esp,0xc
c001608f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016093:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016097:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001609b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001609f:	fa                   	cli    
c00160a0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00160a6:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c00160ad:	75 15                	jne    c00160c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00160af:	e8 70 f2 ff ff       	call   c0015324 <schedule()>
c00160b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00160b9:	48                   	dec    eax
c00160ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00160bf:	75 de                	jne    c001609f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00160c1:	fb                   	sti    
c00160c2:	eb db                	jmp    c001609f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00160c4:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c00160ce:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c00160d3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00160d7:	0f b7 ff             	movzx  edi,di
c00160da:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00160de:	0f b7 f6             	movzx  esi,si
c00160e1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00160e5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00160e9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00160ed:	50                   	push   eax
c00160ee:	6a 20                	push   0x20
c00160f0:	6a 00                	push   0x0
c00160f2:	68 e0 81 02 c0       	push   0xc00281e0
c00160f7:	e8 f4 a3 fe ff       	call   c00004f0 <memset>
c00160fc:	5a                   	pop    edx
c00160fd:	59                   	pop    ecx
c00160fe:	57                   	push   edi
c00160ff:	56                   	push   esi
c0016100:	e8 2d fe ff ff       	call   c0015f32 <Vm::realToLinear(unsigned short, unsigned short)>
c0016105:	83 c4 10             	add    esp,0x10
c0016108:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001610c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016110:	89 c7                	mov    edi,eax
c0016112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016114:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c001611b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016120:	48                   	dec    eax
c0016121:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016126:	75 01                	jne    c0016129 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016128:	fb                   	sti    
c0016129:	83 ec 0c             	sub    esp,0xc
c001612c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016132:	e8 e5 f6 ff ff       	call   c001581c <unblockTask(ThreadControlBlock*)>
c0016137:	83 c4 1c             	add    esp,0x1c
c001613a:	b0 01                	mov    al,0x1
c001613c:	5b                   	pop    ebx
c001613d:	5e                   	pop    esi
c001613e:	5f                   	pop    edi
c001613f:	5d                   	pop    ebp
c0016140:	c3                   	ret    

c0016141 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016141:	55                   	push   ebp
c0016142:	57                   	push   edi
c0016143:	56                   	push   esi
c0016144:	53                   	push   ebx
c0016145:	83 ec 34             	sub    esp,0x34
c0016148:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001614c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016150:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016154:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016158:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001615c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016160:	68 84 1a 02 c0       	push   0xc0021a84
c0016165:	e8 94 47 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	fa                   	cli    
c001616e:	8a 1d c5 81 02 c0    	mov    bl,BYTE PTR ds:0xc00281c5
c0016174:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001617a:	84 db                	test   bl,bl
c001617c:	75 15                	jne    c0016193 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c001617e:	e8 a1 f1 ff ff       	call   c0015324 <schedule()>
c0016183:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016188:	48                   	dec    eax
c0016189:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001618e:	75 dd                	jne    c001616d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016190:	fb                   	sti    
c0016191:	eb da                	jmp    c001616d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016193:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c001619d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161a1:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c00161a6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00161aa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00161ae:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00161b2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00161b6:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00161ba:	50                   	push   eax
c00161bb:	6a 20                	push   0x20
c00161bd:	6a 00                	push   0x0
c00161bf:	68 e0 81 02 c0       	push   0xc00281e0
c00161c4:	e8 27 a3 fe ff       	call   c00004f0 <memset>
c00161c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00161d0:	e8 f6 18 ff ff       	call   c0007acb <malloc>
c00161d5:	83 c4 0c             	add    esp,0xc
c00161d8:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00161de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161e2:	89 c5                	mov    ebp,eax
c00161e4:	50                   	push   eax
c00161e5:	e8 90 4f ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00161ea:	83 c4 10             	add    esp,0x10
c00161ed:	85 ed                	test   ebp,ebp
c00161ef:	75 0a                	jne    c00161fb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00161f1:	83 ec 0c             	sub    esp,0xc
c00161f4:	68 a6 1a 02 c0       	push   0xc0021aa6
c00161f9:	eb 2b                	jmp    c0016226 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00161fb:	50                   	push   eax
c00161fc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016200:	50                   	push   eax
c0016201:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016205:	50                   	push   eax
c0016206:	55                   	push   ebp
c0016207:	e8 d6 52 ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c001620c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016210:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016214:	83 c4 10             	add    esp,0x10
c0016217:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001621c:	74 27                	je     c0016245 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	68 ba 1a 02 c0       	push   0xc0021aba
c0016226:	e8 f2 a8 ff ff       	call   c0010b1d <KePanic(char const*)>
c001622b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	48                   	dec    eax
c0016234:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016239:	85 c0                	test   eax,eax
c001623b:	75 01                	jne    c001623e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001623d:	fb                   	sti    
c001623e:	31 db                	xor    ebx,ebx
c0016240:	e9 90 00 00 00       	jmp    c00162d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016245:	51                   	push   ecx
c0016246:	51                   	push   ecx
c0016247:	6a 01                	push   0x1
c0016249:	55                   	push   ebp
c001624a:	e8 e7 4f ff ff       	call   c000b236 <File::open(FileOpenMode)>
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	85 c0                	test   eax,eax
c0016254:	74 26                	je     c001627c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016256:	83 ec 0c             	sub    esp,0xc
c0016259:	68 d3 1a 02 c0       	push   0xc0021ad3
c001625e:	e8 ba a8 ff ff       	call   c0010b1d <KePanic(char const*)>
c0016263:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	48                   	dec    eax
c001626c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016271:	85 c0                	test   eax,eax
c0016273:	75 c9                	jne    c001623e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016275:	fb                   	sti    
c0016276:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001627a:	eb 59                	jmp    c00162d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001627c:	50                   	push   eax
c001627d:	0f b7 ff             	movzx  edi,di
c0016280:	50                   	push   eax
c0016281:	0f b7 f6             	movzx  esi,si
c0016284:	57                   	push   edi
c0016285:	56                   	push   esi
c0016286:	e8 a7 fc ff ff       	call   c0015f32 <Vm::realToLinear(unsigned short, unsigned short)>
c001628b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001628e:	5a                   	pop    edx
c001628f:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016293:	56                   	push   esi
c0016294:	50                   	push   eax
c0016295:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001629d:	55                   	push   ebp
c001629e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00162a1:	83 c4 14             	add    esp,0x14
c00162a4:	55                   	push   ebp
c00162a5:	e8 ea 4f ff ff       	call   c000b294 <File::close()>
c00162aa:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00162af:	83 c4 10             	add    esp,0x10
c00162b2:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c00162b9:	48                   	dec    eax
c00162ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00162bf:	85 c0                	test   eax,eax
c00162c1:	75 01                	jne    c00162c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00162c3:	fb                   	sti    
c00162c4:	83 ec 0c             	sub    esp,0xc
c00162c7:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c00162cd:	e8 4a f5 ff ff       	call   c001581c <unblockTask(ThreadControlBlock*)>
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	83 c4 2c             	add    esp,0x2c
c00162d8:	88 d8                	mov    al,bl
c00162da:	5b                   	pop    ebx
c00162db:	5e                   	pop    esi
c00162dc:	5f                   	pop    edi
c00162dd:	5d                   	pop    ebp
c00162de:	c3                   	ret    

c00162df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00162df:	57                   	push   edi
c00162e0:	56                   	push   esi
c00162e1:	53                   	push   ebx
c00162e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00162ee:	83 e8 06             	sub    eax,0x6
c00162f1:	0f b7 c0             	movzx  eax,ax
c00162f4:	50                   	push   eax
c00162f5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00162fa:	50                   	push   eax
c00162fb:	e8 32 fc ff ff       	call   c0015f32 <Vm::realToLinear(unsigned short, unsigned short)>
c0016300:	5a                   	pop    edx
c0016301:	59                   	pop    ecx
c0016302:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016305:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016308:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001630b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016311:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016314:	8d 51 02             	lea    edx,[ecx+0x2]
c0016317:	66 89 10             	mov    WORD PTR [eax],dx
c001631a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001631e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016322:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016326:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016329:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001632d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016333:	89 f1                	mov    ecx,esi
c0016335:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016339:	89 f2                	mov    edx,esi
c001633b:	0f b6 d6             	movzx  edx,dh
c001633e:	0f b6 f1             	movzx  esi,cl
c0016341:	74 0a                	je     c001634d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016343:	c1 e2 08             	shl    edx,0x8
c0016346:	09 f2                	or     edx,esi
c0016348:	80 ce 02             	or     dh,0x2
c001634b:	eb 08                	jmp    c0016355 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c001634d:	c1 e2 08             	shl    edx,0x8
c0016350:	09 f2                	or     edx,esi
c0016352:	80 e6 fd             	and    dh,0xfd
c0016355:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016362:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001636a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001636d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016375:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016378:	5b                   	pop    ebx
c0016379:	5e                   	pop    esi
c001637a:	5f                   	pop    edi
c001637b:	c3                   	ret    

c001637c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001637c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016381:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016386:	c1 e0 04             	shl    eax,0x4
c0016389:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001638c:	c3                   	ret    

c001638d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001638d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016392:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016397:	c1 e0 04             	shl    eax,0x4
c001639a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001639e:	c3                   	ret    

c001639f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001639f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163a9:	c1 e0 04             	shl    eax,0x4
c00163ac:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00163af:	c3                   	ret    

c00163b0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00163b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163ba:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00163be:	c1 e0 04             	shl    eax,0x4
c00163c1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00163c4:	c3                   	ret    

c00163c5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00163c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163ca:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163d3:	c1 e0 04             	shl    eax,0x4
c00163d6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00163da:	c3                   	ret    

c00163db <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00163db:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163e0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163e9:	c1 e0 04             	shl    eax,0x4
c00163ec:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00163ef:	c3                   	ret    

c00163f0 <Vm::faultHandler(regs*)>:
c00163f0:	55                   	push   ebp
c00163f1:	57                   	push   edi
c00163f2:	56                   	push   esi
c00163f3:	53                   	push   ebx
c00163f4:	83 ec 2c             	sub    esp,0x2c
c00163f7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00163fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163fe:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016402:	0f b7 f8             	movzx  edi,ax
c0016405:	0f b7 c0             	movzx  eax,ax
c0016408:	52                   	push   edx
c0016409:	50                   	push   eax
c001640a:	e8 23 fb ff ff       	call   c0015f32 <Vm::realToLinear(unsigned short, unsigned short)>
c001640f:	5a                   	pop    edx
c0016410:	59                   	pop    ecx
c0016411:	89 c1                	mov    ecx,eax
c0016413:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016416:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001641a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001641f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016423:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016426:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001642a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001642f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016437:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001643b:	e8 f2 fa ff ff       	call   c0015f32 <Vm::realToLinear(unsigned short, unsigned short)>
c0016440:	5e                   	pop    esi
c0016441:	be 06 00 00 00       	mov    esi,0x6
c0016446:	5d                   	pop    ebp
c0016447:	31 ed                	xor    ebp,ebp
c0016449:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001644e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016451:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016457:	0f 84 74 02 00 00    	je     c00166d1 <Vm::faultHandler(regs*)+0x2e1>
c001645d:	0f 87 94 00 00 00    	ja     c00164f7 <Vm::faultHandler(regs*)+0x107>
c0016463:	83 fa 66             	cmp    edx,0x66
c0016466:	0f 84 e2 01 00 00    	je     c001664e <Vm::faultHandler(regs*)+0x25e>
c001646c:	77 47                	ja     c00164b5 <Vm::faultHandler(regs*)+0xc5>
c001646e:	83 fa 36             	cmp    edx,0x36
c0016471:	0f 84 ca 01 00 00    	je     c0016641 <Vm::faultHandler(regs*)+0x251>
c0016477:	77 1a                	ja     c0016493 <Vm::faultHandler(regs*)+0xa3>
c0016479:	83 fa 26             	cmp    edx,0x26
c001647c:	0f 84 98 01 00 00    	je     c001661a <Vm::faultHandler(regs*)+0x22a>
c0016482:	83 fa 2e             	cmp    edx,0x2e
c0016485:	0f 85 27 06 00 00    	jne    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c001648b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001648e:	31 f6                	xor    esi,esi
c0016490:	41                   	inc    ecx
c0016491:	eb bb                	jmp    c001644e <Vm::faultHandler(regs*)+0x5e>
c0016493:	83 fa 64             	cmp    edx,0x64
c0016496:	0f 84 8b 01 00 00    	je     c0016627 <Vm::faultHandler(regs*)+0x237>
c001649c:	0f 87 92 01 00 00    	ja     c0016634 <Vm::faultHandler(regs*)+0x244>
c00164a2:	83 fa 3e             	cmp    edx,0x3e
c00164a5:	0f 85 07 06 00 00    	jne    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c00164ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164ae:	be 01 00 00 00       	mov    esi,0x1
c00164b3:	eb db                	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c00164b5:	83 fa 6d             	cmp    edx,0x6d
c00164b8:	0f 84 34 03 00 00    	je     c00167f2 <Vm::faultHandler(regs*)+0x402>
c00164be:	77 17                	ja     c00164d7 <Vm::faultHandler(regs*)+0xe7>
c00164c0:	83 fa 67             	cmp    edx,0x67
c00164c3:	0f 84 92 01 00 00    	je     c001665b <Vm::faultHandler(regs*)+0x26b>
c00164c9:	83 fa 6c             	cmp    edx,0x6c
c00164cc:	0f 84 b1 02 00 00    	je     c0016783 <Vm::faultHandler(regs*)+0x393>
c00164d2:	e9 db 05 00 00       	jmp    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c00164d7:	83 fa 6f             	cmp    edx,0x6f
c00164da:	0f 84 40 04 00 00    	je     c0016920 <Vm::faultHandler(regs*)+0x530>
c00164e0:	0f 82 a2 03 00 00    	jb     c0016888 <Vm::faultHandler(regs*)+0x498>
c00164e6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00164ec:	0f 84 76 01 00 00    	je     c0016668 <Vm::faultHandler(regs*)+0x278>
c00164f2:	e9 bb 05 00 00       	jmp    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c00164f7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00164fd:	0f 84 57 05 00 00    	je     c0016a5a <Vm::faultHandler(regs*)+0x66a>
c0016503:	0f 87 a9 00 00 00    	ja     c00165b2 <Vm::faultHandler(regs*)+0x1c2>
c0016509:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001650f:	0f 84 d6 04 00 00    	je     c00169eb <Vm::faultHandler(regs*)+0x5fb>
c0016515:	77 78                	ja     c001658f <Vm::faultHandler(regs*)+0x19f>
c0016517:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001651d:	0f 84 0e 02 00 00    	je     c0016731 <Vm::faultHandler(regs*)+0x341>
c0016523:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016529:	0f 85 83 05 00 00    	jne    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c001652f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016533:	89 d1                	mov    ecx,edx
c0016535:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016538:	c1 e1 08             	shl    ecx,0x8
c001653b:	09 ca                	or     edx,ecx
c001653d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016540:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016544:	89 d1                	mov    ecx,edx
c0016546:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001654a:	c1 e1 08             	shl    ecx,0x8
c001654d:	09 ca                	or     edx,ecx
c001654f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016552:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016556:	89 d1                	mov    ecx,edx
c0016558:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001655c:	c1 e1 08             	shl    ecx,0x8
c001655f:	09 ca                	or     edx,ecx
c0016561:	81 ca 00 02 02 00    	or     edx,0x20200
c0016567:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001656a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001656e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016574:	d1 e8                	shr    eax,1
c0016576:	83 e0 01             	and    eax,0x1
c0016579:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001657c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001657f:	83 c0 06             	add    eax,0x6
c0016582:	25 ff ff 00 00       	and    eax,0xffff
c0016587:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001658a:	e9 1f 05 00 00       	jmp    c0016aae <Vm::faultHandler(regs*)+0x6be>
c001658f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016595:	0f 84 95 04 00 00    	je     c0016a30 <Vm::faultHandler(regs*)+0x640>
c001659b:	0f 82 66 04 00 00    	jb     c0016a07 <Vm::faultHandler(regs*)+0x617>
c00165a1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00165a7:	0f 84 9a 04 00 00    	je     c0016a47 <Vm::faultHandler(regs*)+0x657>
c00165ad:	e9 00 05 00 00       	jmp    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c00165b2:	81 fa ef 00 00 00    	cmp    edx,0xef
c00165b8:	0f 84 dd 04 00 00    	je     c0016a9b <Vm::faultHandler(regs*)+0x6ab>
c00165be:	77 2e                	ja     c00165ee <Vm::faultHandler(regs*)+0x1fe>
c00165c0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00165c6:	0f 84 aa 04 00 00    	je     c0016a76 <Vm::faultHandler(regs*)+0x686>
c00165cc:	81 fa ee 00 00 00    	cmp    edx,0xee
c00165d2:	0f 85 da 04 00 00    	jne    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c00165d8:	50                   	push   eax
c00165d9:	50                   	push   eax
c00165da:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00165de:	50                   	push   eax
c00165df:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165e3:	50                   	push   eax
c00165e4:	e8 13 f9 ff ff       	call   c0015efc <Vm::outbv(unsigned short, unsigned char)>
c00165e9:	e9 a5 04 00 00       	jmp    c0016a93 <Vm::faultHandler(regs*)+0x6a3>
c00165ee:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00165f4:	0f 84 6d 01 00 00    	je     c0016767 <Vm::faultHandler(regs*)+0x377>
c00165fa:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016600:	0f 84 6f 01 00 00    	je     c0016775 <Vm::faultHandler(regs*)+0x385>
c0016606:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001660c:	0f 85 a0 04 00 00    	jne    c0016ab2 <Vm::faultHandler(regs*)+0x6c2>
c0016612:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016615:	e9 76 fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c001661a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001661d:	be 02 00 00 00       	mov    esi,0x2
c0016622:	e9 69 fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c0016627:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001662a:	be 03 00 00 00       	mov    esi,0x3
c001662f:	e9 5c fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c0016634:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016637:	be 04 00 00 00       	mov    esi,0x4
c001663c:	e9 4f fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c0016641:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016644:	be 05 00 00 00       	mov    esi,0x5
c0016649:	e9 42 fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c001664e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016651:	bd 01 00 00 00       	mov    ebp,0x1
c0016656:	e9 35 fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c001665b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001665e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016663:	e9 28 fe ff ff       	jmp    c0016490 <Vm::faultHandler(regs*)+0xa0>
c0016668:	83 e5 01             	and    ebp,0x1
c001666b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001666e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016672:	74 30                	je     c00166a4 <Vm::faultHandler(regs*)+0x2b4>
c0016674:	83 e9 04             	sub    ecx,0x4
c0016677:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001667d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016683:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016686:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016689:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001668f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016693:	0f 84 12 04 00 00    	je     c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016699:	80 ce 02             	or     dh,0x2
c001669c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001669f:	e9 07 04 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c00166a4:	83 e9 02             	sub    ecx,0x2
c00166a7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166ad:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166b0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166b4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166ba:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166be:	74 05                	je     c00166c5 <Vm::faultHandler(regs*)+0x2d5>
c00166c0:	80 ce 02             	or     dh,0x2
c00166c3:	eb 03                	jmp    c00166c8 <Vm::faultHandler(regs*)+0x2d8>
c00166c5:	80 e6 fd             	and    dh,0xfd
c00166c8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166cc:	e9 da 03 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c00166d1:	83 e5 01             	and    ebp,0x1
c00166d4:	74 2a                	je     c0016700 <Vm::faultHandler(regs*)+0x310>
c00166d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00166d8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00166de:	81 ca 00 02 02 00    	or     edx,0x20200
c00166e4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00166e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00166e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166ef:	c1 e8 09             	shr    eax,0x9
c00166f2:	83 e0 01             	and    eax,0x1
c00166f5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00166f8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166fb:	83 c0 04             	add    eax,0x4
c00166fe:	eb 24                	jmp    c0016724 <Vm::faultHandler(regs*)+0x334>
c0016700:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016703:	81 ca 00 02 02 00    	or     edx,0x20200
c0016709:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001670c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001670f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016715:	c1 e8 09             	shr    eax,0x9
c0016718:	83 e0 01             	and    eax,0x1
c001671b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001671e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016721:	83 c0 02             	add    eax,0x2
c0016724:	25 ff ff 00 00       	and    eax,0xffff
c0016729:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001672c:	e9 7a 03 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016731:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016735:	3d ee 00 00 00       	cmp    eax,0xee
c001673a:	75 10                	jne    c001674c <Vm::faultHandler(regs*)+0x35c>
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016742:	e8 52 f8 ff ff       	call   c0015f99 <Vm::mainloop3(unsigned long)>
c0016747:	e9 4a 03 00 00       	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6a6>
c001674c:	83 ec 0c             	sub    esp,0xc
c001674f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016757:	51                   	push   ecx
c0016758:	50                   	push   eax
c0016759:	53                   	push   ebx
c001675a:	e8 80 fb ff ff       	call   c00162df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001675f:	83 c4 20             	add    esp,0x20
c0016762:	e9 47 03 00 00       	jmp    c0016aae <Vm::faultHandler(regs*)+0x6be>
c0016767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016770:	e9 36 03 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016775:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001677a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001677e:	e9 28 03 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016783:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016788:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001678b:	74 2b                	je     c00167b8 <Vm::faultHandler(regs*)+0x3c8>
c001678d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016794:	76 22                	jbe    c00167b8 <Vm::faultHandler(regs*)+0x3c8>
c0016796:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001679a:	50                   	push   eax
c001679b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001679f:	50                   	push   eax
c00167a0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167a4:	50                   	push   eax
c00167a5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167a9:	50                   	push   eax
c00167aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167ae:	50                   	push   eax
c00167af:	6a 6c                	push   0x6c
c00167b1:	6a 6c                	push   0x6c
c00167b3:	e9 c0 01 00 00       	jmp    c0016978 <Vm::faultHandler(regs*)+0x588>
c00167b8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	0f b7 f6             	movzx  esi,si
c00167c2:	50                   	push   eax
c00167c3:	e8 21 f7 ff ff       	call   c0015ee9 <Vm::inbv(unsigned short)>
c00167c8:	83 c4 0c             	add    esp,0xc
c00167cb:	0f b6 c0             	movzx  eax,al
c00167ce:	50                   	push   eax
c00167cf:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00167d3:	50                   	push   eax
c00167d4:	56                   	push   esi
c00167d5:	e8 d6 fb ff ff       	call   c00163b0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00167da:	83 c4 10             	add    esp,0x10
c00167dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00167e4:	74 03                	je     c00167e9 <Vm::faultHandler(regs*)+0x3f9>
c00167e6:	48                   	dec    eax
c00167e7:	eb 01                	jmp    c00167ea <Vm::faultHandler(regs*)+0x3fa>
c00167e9:	40                   	inc    eax
c00167ea:	0f b7 c0             	movzx  eax,ax
c00167ed:	e9 8e 00 00 00       	jmp    c0016880 <Vm::faultHandler(regs*)+0x490>
c00167f2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167f7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167fd:	74 29                	je     c0016828 <Vm::faultHandler(regs*)+0x438>
c00167ff:	3d ff ff 00 00       	cmp    eax,0xffff
c0016804:	76 22                	jbe    c0016828 <Vm::faultHandler(regs*)+0x438>
c0016806:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001680a:	50                   	push   eax
c001680b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001680f:	50                   	push   eax
c0016810:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016814:	50                   	push   eax
c0016815:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016819:	50                   	push   eax
c001681a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001681e:	50                   	push   eax
c001681f:	6a 6d                	push   0x6d
c0016821:	6a 6d                	push   0x6d
c0016823:	e9 50 01 00 00       	jmp    c0016978 <Vm::faultHandler(regs*)+0x588>
c0016828:	83 e5 01             	and    ebp,0x1
c001682b:	0f b7 c8             	movzx  ecx,ax
c001682e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016831:	0f b7 f6             	movzx  esi,si
c0016834:	74 1e                	je     c0016854 <Vm::faultHandler(regs*)+0x464>
c0016836:	ed                   	in     eax,dx
c0016837:	55                   	push   ebp
c0016838:	50                   	push   eax
c0016839:	51                   	push   ecx
c001683a:	56                   	push   esi
c001683b:	e8 9b fb ff ff       	call   c00163db <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016840:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	8d 50 04             	lea    edx,[eax+0x4]
c0016849:	83 e8 04             	sub    eax,0x4
c001684c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016852:	eb 20                	jmp    c0016874 <Vm::faultHandler(regs*)+0x484>
c0016854:	66 ed                	in     ax,dx
c0016856:	57                   	push   edi
c0016857:	0f b7 c0             	movzx  eax,ax
c001685a:	50                   	push   eax
c001685b:	51                   	push   ecx
c001685c:	56                   	push   esi
c001685d:	e8 63 fb ff ff       	call   c00163c5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016862:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	8d 50 02             	lea    edx,[eax+0x2]
c001686b:	83 e8 02             	sub    eax,0x2
c001686e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016874:	25 ff ff 00 00       	and    eax,0xffff
c0016879:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001687d:	0f 44 c2             	cmove  eax,edx
c0016880:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016883:	e9 23 02 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016888:	8d 46 ff             	lea    eax,[esi-0x1]
c001688b:	0f b6 f0             	movzx  esi,al
c001688e:	83 fe 05             	cmp    esi,0x5
c0016891:	77 23                	ja     c00168b6 <Vm::faultHandler(regs*)+0x4c6>
c0016893:	ff 24 b5 48 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde4b8]
c001689a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001689f:	eb 15                	jmp    c00168b6 <Vm::faultHandler(regs*)+0x4c6>
c00168a1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00168a5:	eb 0f                	jmp    c00168b6 <Vm::faultHandler(regs*)+0x4c6>
c00168a7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00168ab:	eb 09                	jmp    c00168b6 <Vm::faultHandler(regs*)+0x4c6>
c00168ad:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00168b1:	eb 03                	jmp    c00168b6 <Vm::faultHandler(regs*)+0x4c6>
c00168b3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00168b6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00168be:	74 29                	je     c00168e9 <Vm::faultHandler(regs*)+0x4f9>
c00168c0:	3d ff ff 00 00       	cmp    eax,0xffff
c00168c5:	76 22                	jbe    c00168e9 <Vm::faultHandler(regs*)+0x4f9>
c00168c7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168cb:	50                   	push   eax
c00168cc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168d0:	50                   	push   eax
c00168d1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168d5:	50                   	push   eax
c00168d6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168da:	50                   	push   eax
c00168db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168df:	50                   	push   eax
c00168e0:	6a 6e                	push   0x6e
c00168e2:	6a 6e                	push   0x6e
c00168e4:	e9 8f 00 00 00       	jmp    c0016978 <Vm::faultHandler(regs*)+0x588>
c00168e9:	52                   	push   edx
c00168ea:	0f b7 c0             	movzx  eax,ax
c00168ed:	52                   	push   edx
c00168ee:	50                   	push   eax
c00168ef:	57                   	push   edi
c00168f0:	e8 87 fa ff ff       	call   c001637c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00168f5:	59                   	pop    ecx
c00168f6:	5e                   	pop    esi
c00168f7:	0f b6 c0             	movzx  eax,al
c00168fa:	50                   	push   eax
c00168fb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00168ff:	50                   	push   eax
c0016900:	e8 f7 f5 ff ff       	call   c0015efc <Vm::outbv(unsigned short, unsigned char)>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001690b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001690f:	74 03                	je     c0016914 <Vm::faultHandler(regs*)+0x524>
c0016911:	48                   	dec    eax
c0016912:	eb 01                	jmp    c0016915 <Vm::faultHandler(regs*)+0x525>
c0016914:	40                   	inc    eax
c0016915:	0f b7 c0             	movzx  eax,ax
c0016918:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001691b:	e9 8b 01 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016920:	8d 46 ff             	lea    eax,[esi-0x1]
c0016923:	0f b6 f0             	movzx  esi,al
c0016926:	83 fe 05             	cmp    esi,0x5
c0016929:	77 1e                	ja     c0016949 <Vm::faultHandler(regs*)+0x559>
c001692b:	ff 24 b5 60 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde4a0]
c0016932:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016936:	eb 11                	jmp    c0016949 <Vm::faultHandler(regs*)+0x559>
c0016938:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001693b:	eb 0c                	jmp    c0016949 <Vm::faultHandler(regs*)+0x559>
c001693d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016940:	eb 07                	jmp    c0016949 <Vm::faultHandler(regs*)+0x559>
c0016942:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016945:	eb 02                	jmp    c0016949 <Vm::faultHandler(regs*)+0x559>
c0016947:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016949:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001694e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016951:	74 37                	je     c001698a <Vm::faultHandler(regs*)+0x59a>
c0016953:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016959:	76 2f                	jbe    c001698a <Vm::faultHandler(regs*)+0x59a>
c001695b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001695f:	50                   	push   eax
c0016960:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016964:	50                   	push   eax
c0016965:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016969:	50                   	push   eax
c001696a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001696e:	50                   	push   eax
c001696f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016973:	50                   	push   eax
c0016974:	6a 6f                	push   0x6f
c0016976:	6a 6f                	push   0x6f
c0016978:	68 ec 1a 02 c0       	push   0xc0021aec
c001697d:	e8 7c 3f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016982:	83 c4 20             	add    esp,0x20
c0016985:	e9 86 01 00 00       	jmp    c0016b10 <Vm::faultHandler(regs*)+0x720>
c001698a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001698d:	0f b7 d7             	movzx  edx,di
c0016990:	0f b7 c6             	movzx  eax,si
c0016993:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016996:	81 e1 00 04 00 00    	and    ecx,0x400
c001699c:	83 e5 01             	and    ebp,0x1
c001699f:	74 1c                	je     c00169bd <Vm::faultHandler(regs*)+0x5cd>
c00169a1:	55                   	push   ebp
c00169a2:	55                   	push   ebp
c00169a3:	50                   	push   eax
c00169a4:	52                   	push   edx
c00169a5:	e8 f5 f9 ff ff       	call   c001639f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00169aa:	83 c4 10             	add    esp,0x10
c00169ad:	89 fa                	mov    edx,edi
c00169af:	ef                   	out    dx,eax
c00169b0:	8d 46 04             	lea    eax,[esi+0x4]
c00169b3:	83 ee 04             	sub    esi,0x4
c00169b6:	25 ff ff 00 00       	and    eax,0xffff
c00169bb:	eb 1b                	jmp    c00169d8 <Vm::faultHandler(regs*)+0x5e8>
c00169bd:	55                   	push   ebp
c00169be:	55                   	push   ebp
c00169bf:	50                   	push   eax
c00169c0:	52                   	push   edx
c00169c1:	e8 c7 f9 ff ff       	call   c001638d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	89 fa                	mov    edx,edi
c00169cb:	66 ef                	out    dx,ax
c00169cd:	8d 46 02             	lea    eax,[esi+0x2]
c00169d0:	83 ee 02             	sub    esi,0x2
c00169d3:	25 ff ff 00 00       	and    eax,0xffff
c00169d8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00169de:	85 c9                	test   ecx,ecx
c00169e0:	0f 44 f0             	cmove  esi,eax
c00169e3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00169e6:	e9 c0 00 00 00       	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c00169eb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00169f2:	83 ec 0c             	sub    esp,0xc
c00169f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169f9:	50                   	push   eax
c00169fa:	e8 ea f4 ff ff       	call   c0015ee9 <Vm::inbv(unsigned short)>
c00169ff:	0f b6 c0             	movzx  eax,al
c0016a02:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a05:	eb 3a                	jmp    c0016a41 <Vm::faultHandler(regs*)+0x651>
c0016a07:	83 e5 01             	and    ebp,0x1
c0016a0a:	74 07                	je     c0016a13 <Vm::faultHandler(regs*)+0x623>
c0016a0c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a10:	ed                   	in     eax,dx
c0016a11:	eb 14                	jmp    c0016a27 <Vm::faultHandler(regs*)+0x637>
c0016a13:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a16:	66 31 f6             	xor    si,si
c0016a19:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016a1c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a20:	66 ed                	in     ax,dx
c0016a22:	0f b7 c0             	movzx  eax,ax
c0016a25:	09 f0                	or     eax,esi
c0016a27:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a2a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a2e:	eb 7e                	jmp    c0016aae <Vm::faultHandler(regs*)+0x6be>
c0016a30:	52                   	push   edx
c0016a31:	52                   	push   edx
c0016a32:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016a36:	50                   	push   eax
c0016a37:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a3b:	50                   	push   eax
c0016a3c:	e8 bb f4 ff ff       	call   c0015efc <Vm::outbv(unsigned short, unsigned char)>
c0016a41:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a45:	eb 4f                	jmp    c0016a96 <Vm::faultHandler(regs*)+0x6a6>
c0016a47:	83 e5 01             	and    ebp,0x1
c0016a4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a4d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a51:	74 03                	je     c0016a56 <Vm::faultHandler(regs*)+0x666>
c0016a53:	ef                   	out    dx,eax
c0016a54:	eb d4                	jmp    c0016a2a <Vm::faultHandler(regs*)+0x63a>
c0016a56:	66 ef                	out    dx,ax
c0016a58:	eb d0                	jmp    c0016a2a <Vm::faultHandler(regs*)+0x63a>
c0016a5a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a5e:	83 ec 0c             	sub    esp,0xc
c0016a61:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a68:	50                   	push   eax
c0016a69:	e8 7b f4 ff ff       	call   c0015ee9 <Vm::inbv(unsigned short)>
c0016a6e:	0f b6 c0             	movzx  eax,al
c0016a71:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a74:	eb 1d                	jmp    c0016a93 <Vm::faultHandler(regs*)+0x6a3>
c0016a76:	83 e5 01             	and    ebp,0x1
c0016a79:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a7c:	74 03                	je     c0016a81 <Vm::faultHandler(regs*)+0x691>
c0016a7e:	ed                   	in     eax,dx
c0016a7f:	eb 0d                	jmp    c0016a8e <Vm::faultHandler(regs*)+0x69e>
c0016a81:	66 ed                	in     ax,dx
c0016a83:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016a86:	0f b7 c0             	movzx  eax,ax
c0016a89:	66 31 d2             	xor    dx,dx
c0016a8c:	09 d0                	or     eax,edx
c0016a8e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a91:	eb 18                	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016a93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a96:	83 c4 10             	add    esp,0x10
c0016a99:	eb 13                	jmp    c0016aae <Vm::faultHandler(regs*)+0x6be>
c0016a9b:	83 e5 01             	and    ebp,0x1
c0016a9e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016aa1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016aa4:	74 03                	je     c0016aa9 <Vm::faultHandler(regs*)+0x6b9>
c0016aa6:	ef                   	out    dx,eax
c0016aa7:	eb 02                	jmp    c0016aab <Vm::faultHandler(regs*)+0x6bb>
c0016aa9:	66 ef                	out    dx,ax
c0016aab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016aae:	b0 01                	mov    al,0x1
c0016ab0:	eb 60                	jmp    c0016b12 <Vm::faultHandler(regs*)+0x722>
c0016ab2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ab6:	50                   	push   eax
c0016ab7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016abb:	50                   	push   eax
c0016abc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ac0:	50                   	push   eax
c0016ac1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ac5:	50                   	push   eax
c0016ac6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016aca:	50                   	push   eax
c0016acb:	52                   	push   edx
c0016acc:	52                   	push   edx
c0016acd:	68 19 1b 02 c0       	push   0xc0021b19
c0016ad2:	e8 27 3e ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016ad7:	83 c4 20             	add    esp,0x20
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	6a 60                	push   0x60
c0016adf:	e8 05 f4 ff ff       	call   c0015ee9 <Vm::inbv(unsigned short)>
c0016ae4:	83 c4 10             	add    esp,0x10
c0016ae7:	0f b6 d0             	movzx  edx,al
c0016aea:	83 fa 1c             	cmp    edx,0x1c
c0016aed:	74 05                	je     c0016af4 <Vm::faultHandler(regs*)+0x704>
c0016aef:	83 fa 5a             	cmp    edx,0x5a
c0016af2:	75 e6                	jne    c0016ada <Vm::faultHandler(regs*)+0x6ea>
c0016af4:	0f b6 c0             	movzx  eax,al
c0016af7:	83 f8 1c             	cmp    eax,0x1c
c0016afa:	74 05                	je     c0016b01 <Vm::faultHandler(regs*)+0x711>
c0016afc:	83 f8 5a             	cmp    eax,0x5a
c0016aff:	75 0f                	jne    c0016b10 <Vm::faultHandler(regs*)+0x720>
c0016b01:	83 ec 0c             	sub    esp,0xc
c0016b04:	6a 60                	push   0x60
c0016b06:	e8 de f3 ff ff       	call   c0015ee9 <Vm::inbv(unsigned short)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	eb e4                	jmp    c0016af4 <Vm::faultHandler(regs*)+0x704>
c0016b10:	31 c0                	xor    eax,eax
c0016b12:	83 c4 2c             	add    esp,0x2c
c0016b15:	5b                   	pop    ebx
c0016b16:	5e                   	pop    esi
c0016b17:	5f                   	pop    edi
c0016b18:	5d                   	pop    ebp
c0016b19:	c3                   	ret    

c0016b1a <noCopro(unsigned long)>:
c0016b1a:	c3                   	ret    

c0016b1b <nmiHandler(regs*, void*)>:
c0016b1b:	83 ec 0c             	sub    esp,0xc
c0016b1e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b23:	83 ec 0c             	sub    esp,0xc
c0016b26:	50                   	push   eax
c0016b27:	e8 a2 07 ff ff       	call   c00072ce <Computer::handleNMI()>
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	90                   	nop
c0016b30:	83 c4 0c             	add    esp,0xc
c0016b33:	c3                   	ret    

c0016b34 <doubleFault(regs*, void*)>:
c0016b34:	55                   	push   ebp
c0016b35:	89 e5                	mov    ebp,esp
c0016b37:	83 ec 08             	sub    esp,0x8
c0016b3a:	83 ec 0c             	sub    esp,0xc
c0016b3d:	68 78 1b 02 c0       	push   0xc0021b78
c0016b42:	e8 d6 9f ff ff       	call   c0010b1d <KePanic(char const*)>
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	90                   	nop
c0016b4b:	c9                   	leave  
c0016b4c:	c3                   	ret    

c0016b4d <displayDebugInfo(regs*)>:
c0016b4d:	83 ec 1c             	sub    esp,0x1c
c0016b50:	0f 20 c0             	mov    eax,cr0
c0016b53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b57:	0f 20 d0             	mov    eax,cr2
c0016b5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b5e:	0f 20 d8             	mov    eax,cr3
c0016b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b65:	0f 20 e0             	mov    eax,cr4
c0016b68:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016b72:	83 ec 08             	sub    esp,0x8
c0016b75:	50                   	push   eax
c0016b76:	68 94 1b 02 c0       	push   0xc0021b94
c0016b7b:	e8 7e 3d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016b80:	83 c4 10             	add    esp,0x10
c0016b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b87:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016b8a:	83 ec 08             	sub    esp,0x8
c0016b8d:	50                   	push   eax
c0016b8e:	68 85 1b 02 c0       	push   0xc0021b85
c0016b93:	e8 66 3d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016b98:	83 c4 10             	add    esp,0x10
c0016b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016ba2:	83 ec 08             	sub    esp,0x8
c0016ba5:	50                   	push   eax
c0016ba6:	68 90 1b 02 c0       	push   0xc0021b90
c0016bab:	e8 4e 3d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016bb0:	83 c4 10             	add    esp,0x10
c0016bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016bba:	83 ec 08             	sub    esp,0x8
c0016bbd:	50                   	push   eax
c0016bbe:	68 9f 1b 02 c0       	push   0xc0021b9f
c0016bc3:	e8 36 3d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016bc8:	83 c4 10             	add    esp,0x10
c0016bcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016bd2:	83 ec 08             	sub    esp,0x8
c0016bd5:	50                   	push   eax
c0016bd6:	68 aa 1b 02 c0       	push   0xc0021baa
c0016bdb:	e8 1e 3d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	83 ec 08             	sub    esp,0x8
c0016be6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bea:	68 b5 1b 02 c0       	push   0xc0021bb5
c0016bef:	e8 0a 3d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016bf4:	83 c4 10             	add    esp,0x10
c0016bf7:	83 ec 08             	sub    esp,0x8
c0016bfa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016bfe:	68 c0 1b 02 c0       	push   0xc0021bc0
c0016c03:	e8 f6 3c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016c08:	83 c4 10             	add    esp,0x10
c0016c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016c12:	c1 e0 05             	shl    eax,0x5
c0016c15:	8d 90 40 2b 02 c0    	lea    edx,[eax-0x3ffdd4c0]
c0016c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c1f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016c22:	83 ec 04             	sub    esp,0x4
c0016c25:	52                   	push   edx
c0016c26:	50                   	push   eax
c0016c27:	68 cb 1b 02 c0       	push   0xc0021bcb
c0016c2c:	e8 cd 3c ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016c31:	83 c4 10             	add    esp,0x10
c0016c34:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c3f:	83 ec 0c             	sub    esp,0xc
c0016c42:	50                   	push   eax
c0016c43:	e8 19 1b ff ff       	call   c0008761 <setActiveTerminal(VgaText*)>
c0016c48:	83 c4 10             	add    esp,0x10
c0016c4b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c50:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c56:	83 ec 08             	sub    esp,0x8
c0016c59:	68 da 1b 02 c0       	push   0xc0021bda
c0016c5e:	50                   	push   eax
c0016c5f:	e8 3a 1e ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016c64:	83 c4 10             	add    esp,0x10
c0016c67:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c76:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016c79:	83 ec 08             	sub    esp,0x8
c0016c7c:	52                   	push   edx
c0016c7d:	50                   	push   eax
c0016c7e:	e8 d5 1d ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c91:	83 ec 08             	sub    esp,0x8
c0016c94:	68 e8 1b 02 c0       	push   0xc0021be8
c0016c99:	50                   	push   eax
c0016c9a:	e8 ff 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016c9f:	83 c4 10             	add    esp,0x10
c0016ca2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ca7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cad:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016cb2:	8b 12                	mov    edx,DWORD PTR [edx]
c0016cb4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016cb7:	83 c2 0c             	add    edx,0xc
c0016cba:	83 ec 08             	sub    esp,0x8
c0016cbd:	52                   	push   edx
c0016cbe:	50                   	push   eax
c0016cbf:	e8 da 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016cc4:	83 c4 10             	add    esp,0x10
c0016cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ccc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cd2:	83 ec 08             	sub    esp,0x8
c0016cd5:	68 f1 1b 02 c0       	push   0xc0021bf1
c0016cda:	50                   	push   eax
c0016cdb:	e8 be 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016ce0:	83 c4 10             	add    esp,0x10
c0016ce3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ce8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016cf2:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016cf5:	83 ec 08             	sub    esp,0x8
c0016cf8:	52                   	push   edx
c0016cf9:	50                   	push   eax
c0016cfa:	e8 59 1d ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d0d:	83 ec 08             	sub    esp,0x8
c0016d10:	68 f9 1b 02 c0       	push   0xc0021bf9
c0016d15:	50                   	push   eax
c0016d16:	e8 83 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d2d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016d30:	83 ec 08             	sub    esp,0x8
c0016d33:	52                   	push   edx
c0016d34:	50                   	push   eax
c0016d35:	e8 1e 1d ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016d3a:	83 c4 10             	add    esp,0x10
c0016d3d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d48:	83 ec 08             	sub    esp,0x8
c0016d4b:	68 01 1c 02 c0       	push   0xc0021c01
c0016d50:	50                   	push   eax
c0016d51:	e8 48 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d56:	83 c4 10             	add    esp,0x10
c0016d59:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d68:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016d6b:	83 ec 08             	sub    esp,0x8
c0016d6e:	52                   	push   edx
c0016d6f:	50                   	push   eax
c0016d70:	e8 e3 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d83:	83 ec 08             	sub    esp,0x8
c0016d86:	68 09 1c 02 c0       	push   0xc0021c09
c0016d8b:	50                   	push   eax
c0016d8c:	e8 0d 1d ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016d99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016da3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016da6:	83 ec 08             	sub    esp,0x8
c0016da9:	52                   	push   edx
c0016daa:	50                   	push   eax
c0016dab:	e8 a8 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016db8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dbe:	83 ec 08             	sub    esp,0x8
c0016dc1:	68 11 1c 02 c0       	push   0xc0021c11
c0016dc6:	50                   	push   eax
c0016dc7:	e8 d2 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016dcc:	83 c4 10             	add    esp,0x10
c0016dcf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016dd4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dda:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016dde:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016de1:	83 ec 08             	sub    esp,0x8
c0016de4:	52                   	push   edx
c0016de5:	50                   	push   eax
c0016de6:	e8 6d 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016df3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016df9:	83 ec 08             	sub    esp,0x8
c0016dfc:	68 19 1c 02 c0       	push   0xc0021c19
c0016e01:	50                   	push   eax
c0016e02:	e8 97 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e19:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016e1c:	83 ec 08             	sub    esp,0x8
c0016e1f:	52                   	push   edx
c0016e20:	50                   	push   eax
c0016e21:	e8 32 1c ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e26:	83 c4 10             	add    esp,0x10
c0016e29:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e34:	83 ec 08             	sub    esp,0x8
c0016e37:	68 21 1c 02 c0       	push   0xc0021c21
c0016e3c:	50                   	push   eax
c0016e3d:	e8 5c 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e42:	83 c4 10             	add    esp,0x10
c0016e45:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e50:	83 ec 08             	sub    esp,0x8
c0016e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e57:	50                   	push   eax
c0016e58:	e8 fb 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e5d:	83 c4 10             	add    esp,0x10
c0016e60:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e6b:	83 ec 08             	sub    esp,0x8
c0016e6e:	68 2a 1c 02 c0       	push   0xc0021c2a
c0016e73:	50                   	push   eax
c0016e74:	e8 25 1c ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016e79:	83 c4 10             	add    esp,0x10
c0016e7c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e87:	83 ec 08             	sub    esp,0x8
c0016e8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e8e:	50                   	push   eax
c0016e8f:	e8 c4 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016e9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ea2:	83 ec 08             	sub    esp,0x8
c0016ea5:	68 32 1c 02 c0       	push   0xc0021c32
c0016eaa:	50                   	push   eax
c0016eab:	e8 ee 1b ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0016eb0:	83 c4 10             	add    esp,0x10
c0016eb3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016eb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ebe:	83 ec 08             	sub    esp,0x8
c0016ec1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016ec5:	50                   	push   eax
c0016ec6:	e8 8d 1b ff ff       	call   c0008a58 <VgaText::putx(unsigned int)>
c0016ecb:	83 c4 10             	add    esp,0x10
c0016ece:	fa                   	cli    
c0016ecf:	f4                   	hlt    
c0016ed0:	eb fe                	jmp    c0016ed0 <displayDebugInfo(regs*)+0x383>

c0016ed2 <HalSystemIdle()>:
c0016ed2:	56                   	push   esi
c0016ed3:	53                   	push   ebx
c0016ed4:	83 ec 14             	sub    esp,0x14
c0016ed7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016edc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ee2:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016ee8:	83 e0 04             	and    eax,0x4
c0016eeb:	0f b6 c0             	movzx  eax,al
c0016eee:	85 c0                	test   eax,eax
c0016ef0:	0f 95 c0             	setne  al
c0016ef3:	0f b6 c0             	movzx  eax,al
c0016ef6:	85 c0                	test   eax,eax
c0016ef8:	74 4c                	je     c0016f46 <HalSystemIdle()+0x74>
c0016efa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016eff:	83 ec 08             	sub    esp,0x8
c0016f02:	68 e1 00 00 00       	push   0xe1
c0016f07:	50                   	push   eax
c0016f08:	e8 cd 01 ff ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c0016f0d:	83 c4 10             	add    esp,0x10
c0016f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016f18:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f1d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f21:	83 e2 02             	and    edx,0x2
c0016f24:	89 d3                	mov    ebx,edx
c0016f26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f2a:	83 e2 00             	and    edx,0x0
c0016f2d:	89 d6                	mov    esi,edx
c0016f2f:	56                   	push   esi
c0016f30:	53                   	push   ebx
c0016f31:	68 e1 00 00 00       	push   0xe1
c0016f36:	50                   	push   eax
c0016f37:	e8 ca 01 ff ff       	call   c0007106 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016f3c:	83 c4 10             	add    esp,0x10
c0016f3f:	e8 50 92 fe ff       	call   c0000194 <doTPAUSE>
c0016f44:	eb 01                	jmp    c0016f47 <HalSystemIdle()+0x75>
c0016f46:	f4                   	hlt    
c0016f47:	90                   	nop
c0016f48:	83 c4 14             	add    esp,0x14
c0016f4b:	5b                   	pop    ebx
c0016f4c:	5e                   	pop    esi
c0016f4d:	c3                   	ret    

c0016f4e <displayProgramFault(char const*)>:
c0016f4e:	83 ec 0c             	sub    esp,0xc
c0016f51:	83 ec 0c             	sub    esp,0xc
c0016f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f58:	e8 a1 39 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0016f5d:	83 c4 10             	add    esp,0x10
c0016f60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f70:	85 c0                	test   eax,eax
c0016f72:	74 21                	je     c0016f95 <displayProgramFault(char const*)+0x47>
c0016f74:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016f79:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f7e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f84:	6a 04                	push   0x4
c0016f86:	6a 0f                	push   0xf
c0016f88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f8c:	50                   	push   eax
c0016f8d:	e8 7e 1b ff ff       	call   c0008b10 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	90                   	nop
c0016f96:	83 c4 0c             	add    esp,0xc
c0016f99:	c3                   	ret    

c0016f9a <gpFault(regs*, void*)>:
c0016f9a:	83 ec 1c             	sub    esp,0x1c
c0016f9d:	c7 05 14 82 02 c0 f0 63 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc00163f0
c0016fa7:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016fac:	85 c0                	test   eax,eax
c0016fae:	74 1e                	je     c0016fce <gpFault(regs*, void*)+0x34>
c0016fb0:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016fb5:	83 ec 0c             	sub    esp,0xc
c0016fb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fbc:	ff d0                	call   eax
c0016fbe:	83 c4 10             	add    esp,0x10
c0016fc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fc5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016fca:	85 c0                	test   eax,eax
c0016fcc:	75 2e                	jne    c0016ffc <gpFault(regs*, void*)+0x62>
c0016fce:	83 ec 0c             	sub    esp,0xc
c0016fd1:	68 3a 1c 02 c0       	push   0xc0021c3a
c0016fd6:	e8 73 ff ff ff       	call   c0016f4e <displayProgramFault(char const*)>
c0016fdb:	83 c4 10             	add    esp,0x10
c0016fde:	83 ec 0c             	sub    esp,0xc
c0016fe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fe5:	e8 63 fb ff ff       	call   c0016b4d <displayDebugInfo(regs*)>
c0016fea:	83 c4 10             	add    esp,0x10
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	6a 00                	push   0x0
c0016ff2:	e8 99 ed ff ff       	call   c0015d90 <Thr::terminateFromIRQ(int)>
c0016ff7:	83 c4 10             	add    esp,0x10
c0016ffa:	eb 01                	jmp    c0016ffd <gpFault(regs*, void*)+0x63>
c0016ffc:	90                   	nop
c0016ffd:	83 c4 1c             	add    esp,0x1c
c0017000:	c3                   	ret    

c0017001 <pgFault(regs*, void*)>:
c0017001:	83 ec 1c             	sub    esp,0x1c
c0017004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017008:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001700b:	0f 20 d0             	mov    eax,cr2
c001700e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017016:	83 ec 04             	sub    esp,0x4
c0017019:	52                   	push   edx
c001701a:	50                   	push   eax
c001701b:	68 18 1d 02 c0       	push   0xc0021d18
c0017020:	e8 d9 38 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017025:	83 c4 10             	add    esp,0x10
c0017028:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001702d:	8b 00                	mov    eax,DWORD PTR [eax]
c001702f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017032:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017038:	0f 20 d2             	mov    edx,cr2
c001703b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017043:	83 ec 08             	sub    esp,0x8
c0017046:	52                   	push   edx
c0017047:	50                   	push   eax
c0017048:	e8 21 33 ff ff       	call   c000a36e <VAS::tryLoadBackOffDisk(unsigned long)>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	0f b6 c0             	movzx  eax,al
c0017053:	85 c0                	test   eax,eax
c0017055:	75 2e                	jne    c0017085 <pgFault(regs*, void*)+0x84>
c0017057:	83 ec 0c             	sub    esp,0xc
c001705a:	68 53 1c 02 c0       	push   0xc0021c53
c001705f:	e8 ea fe ff ff       	call   c0016f4e <displayProgramFault(char const*)>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	83 ec 0c             	sub    esp,0xc
c001706a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001706e:	e8 da fa ff ff       	call   c0016b4d <displayDebugInfo(regs*)>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	83 ec 0c             	sub    esp,0xc
c0017079:	6a 00                	push   0x0
c001707b:	e8 10 ed ff ff       	call   c0015d90 <Thr::terminateFromIRQ(int)>
c0017080:	83 c4 10             	add    esp,0x10
c0017083:	eb 01                	jmp    c0017086 <pgFault(regs*, void*)+0x85>
c0017085:	90                   	nop
c0017086:	83 c4 1c             	add    esp,0x1c
c0017089:	c3                   	ret    

c001708a <otherISRHandler(regs*, void*)>:
c001708a:	83 ec 0c             	sub    esp,0xc
c001708d:	83 ec 0c             	sub    esp,0xc
c0017090:	68 40 1d 02 c0       	push   0xc0021d40
c0017095:	e8 b4 fe ff ff       	call   c0016f4e <displayProgramFault(char const*)>
c001709a:	83 c4 10             	add    esp,0x10
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a4:	e8 a4 fa ff ff       	call   c0016b4d <displayDebugInfo(regs*)>
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	83 ec 0c             	sub    esp,0xc
c00170af:	6a 00                	push   0x0
c00170b1:	e8 da ec ff ff       	call   c0015d90 <Thr::terminateFromIRQ(int)>
c00170b6:	83 c4 10             	add    esp,0x10
c00170b9:	90                   	nop
c00170ba:	83 c4 0c             	add    esp,0xc
c00170bd:	c3                   	ret    

c00170be <opcodeFault(regs*, void*)>:
c00170be:	55                   	push   ebp
c00170bf:	89 e5                	mov    ebp,esp
c00170c1:	83 ec 08             	sub    esp,0x8
c00170c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00170c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170ca:	83 ec 08             	sub    esp,0x8
c00170cd:	50                   	push   eax
c00170ce:	68 5e 1c 02 c0       	push   0xc0021c5e
c00170d3:	e8 26 38 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00170d8:	83 c4 10             	add    esp,0x10
c00170db:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170e6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00170ec:	0f b6 c0             	movzx  eax,al
c00170ef:	85 c0                	test   eax,eax
c00170f1:	74 21                	je     c0017114 <opcodeFault(regs*, void*)+0x56>
c00170f3:	83 ec 0c             	sub    esp,0xc
c00170f6:	68 68 1d 02 c0       	push   0xc0021d68
c00170fb:	e8 fe 37 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0017100:	83 c4 10             	add    esp,0x10
c0017103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017106:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017109:	8d 50 19             	lea    edx,[eax+0x19]
c001710c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001710f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017112:	eb 2b                	jmp    c001713f <opcodeFault(regs*, void*)+0x81>
c0017114:	83 ec 0c             	sub    esp,0xc
c0017117:	68 6c 1c 02 c0       	push   0xc0021c6c
c001711c:	e8 2d fe ff ff       	call   c0016f4e <displayProgramFault(char const*)>
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	83 ec 0c             	sub    esp,0xc
c0017127:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001712a:	e8 1e fa ff ff       	call   c0016b4d <displayDebugInfo(regs*)>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	83 ec 0c             	sub    esp,0xc
c0017135:	6a 00                	push   0x0
c0017137:	e8 54 ec ff ff       	call   c0015d90 <Thr::terminateFromIRQ(int)>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	c9                   	leave  
c0017140:	c3                   	ret    

c0017141 <i386SaveCoprocessor(void*)>:
c0017141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017145:	83 c0 3f             	add    eax,0x3f
c0017148:	83 e0 c0             	and    eax,0xffffffc0
c001714b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001714f:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0017155 <i386LoadCoprocessor(void*)>:
c0017155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017159:	83 c0 3f             	add    eax,0x3f
c001715c:	83 e0 c0             	and    eax,0xffffffc0
c001715f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017163:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0017169 <x87EmulHandler(regs*, void*)>:
c0017169:	53                   	push   ebx
c001716a:	83 ec 08             	sub    esp,0x8
c001716d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017172:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017176:	74 10                	je     c0017188 <x87EmulHandler(regs*, void*)+0x1f>
c0017178:	83 ec 0c             	sub    esp,0xc
c001717b:	68 79 1c 02 c0       	push   0xc0021c79
c0017180:	e8 98 99 ff ff       	call   c0010b1d <KePanic(char const*)>
c0017185:	83 c4 10             	add    esp,0x10
c0017188:	0f 20 c0             	mov    eax,cr0
c001718b:	a8 08                	test   al,0x8
c001718d:	74 59                	je     c00171e8 <x87EmulHandler(regs*, void*)+0x7f>
c001718f:	0f 06                	clts   
c0017191:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0017196:	85 c0                	test   eax,eax
c0017198:	74 0e                	je     c00171a8 <x87EmulHandler(regs*, void*)+0x3f>
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00171a0:	e8 9c ff ff ff       	call   c0017141 <i386SaveCoprocessor(void*)>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00171ae:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00171b2:	75 12                	jne    c00171c6 <x87EmulHandler(regs*, void*)+0x5d>
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	68 40 02 00 00       	push   0x240
c00171bc:	e8 0a 09 ff ff       	call   c0007acb <malloc>
c00171c1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00171c4:	eb 10                	jmp    c00171d6 <x87EmulHandler(regs*, void*)+0x6d>
c00171c6:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00171d1:	e8 7f ff ff ff       	call   c0017155 <i386LoadCoprocessor(void*)>
c00171d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171db:	83 c4 10             	add    esp,0x10
c00171de:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c00171e3:	83 c4 08             	add    esp,0x8
c00171e6:	5b                   	pop    ebx
c00171e7:	c3                   	ret    
c00171e8:	83 ec 0c             	sub    esp,0xc
c00171eb:	68 8d 1c 02 c0       	push   0xc0021c8d
c00171f0:	e8 09 37 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00171f5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00171fd:	83 c4 18             	add    esp,0x18
c0017200:	5b                   	pop    ebx
c0017201:	e9 8a eb ff ff       	jmp    c0015d90 <Thr::terminateFromIRQ(int)>

c0017206 <HalInitialiseCoprocessor()>:
c0017206:	83 ec 10             	sub    esp,0x10
c0017209:	6a 00                	push   0x0
c001720b:	68 69 71 01 c0       	push   0xc0017169
c0017210:	6a 07                	push   0x7
c0017212:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c001721c:	e8 49 53 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017221:	e8 3a 70 00 00       	call   c001e260 <avxDetect>
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	85 c0                	test   eax,eax
c001722b:	74 1c                	je     c0017249 <HalInitialiseCoprocessor()+0x43>
c001722d:	c7 05 10 82 02 c0 8a e2 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e28a
c0017237:	c7 05 0c 82 02 c0 9b e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e29b
c0017241:	83 c4 0c             	add    esp,0xc
c0017244:	e9 63 70 00 00       	jmp    c001e2ac <avxInit>
c0017249:	e8 a2 73 00 00       	call   c001e5f0 <absolutelyNoChanceInHell>
c001724e:	85 c0                	test   eax,eax
c0017250:	74 1c                	je     c001726e <HalInitialiseCoprocessor()+0x68>
c0017252:	c7 05 10 82 02 c0 08 e6 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e608
c001725c:	c7 05 0c 82 02 c0 10 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e610
c0017266:	83 c4 0c             	add    esp,0xc
c0017269:	e9 aa 73 00 00       	jmp    c001e618 <sseInit>
c001726e:	e8 c3 73 00 00       	call   c001e636 <x87Detect>
c0017273:	85 c0                	test   eax,eax
c0017275:	74 1c                	je     c0017293 <HalInitialiseCoprocessor()+0x8d>
c0017277:	c7 05 10 82 02 c0 51 e6 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e651
c0017281:	c7 05 0c 82 02 c0 58 e6 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e658
c001728b:	83 c4 0c             	add    esp,0xc
c001728e:	e9 cc 73 00 00       	jmp    c001e65f <x87Init>
c0017293:	c7 05 10 82 02 c0 1a 6b 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016b1a
c001729d:	c7 05 0c 82 02 c0 1a 6b 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc0016b1a
c00172a7:	0f 20 c0             	mov    eax,cr0
c00172aa:	83 c8 04             	or     eax,0x4
c00172ad:	0f 22 c0             	mov    cr0,eax
c00172b0:	83 c4 0c             	add    esp,0xc
c00172b3:	c3                   	ret    

c00172b4 <HalPanic(char const*)>:
c00172b4:	53                   	push   ebx
c00172b5:	83 ec 10             	sub    esp,0x10
c00172b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00172bc:	fa                   	cli    
c00172bd:	53                   	push   ebx
c00172be:	68 a3 1c 02 c0       	push   0xc0021ca3
c00172c3:	e8 36 36 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00172c8:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c00172cd:	83 c4 10             	add    esp,0x10
c00172d0:	85 c0                	test   eax,eax
c00172d2:	74 09                	je     c00172dd <HalPanic(char const*)+0x29>
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	53                   	push   ebx
c00172d8:	ff d0                	call   eax
c00172da:	83 c4 10             	add    esp,0x10
c00172dd:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c00172e2:	85 c0                	test   eax,eax
c00172e4:	0f 84 dc 00 00 00    	je     c00173c6 <HalPanic(char const*)+0x112>
c00172ea:	52                   	push   edx
c00172eb:	6a 01                	push   0x1
c00172ed:	6a 0f                	push   0xf
c00172ef:	50                   	push   eax
c00172f0:	e8 c7 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00172f5:	59                   	pop    ecx
c00172f6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00172fc:	e8 ab 14 ff ff       	call   c00087ac <VgaText::clearScreen()>
c0017301:	58                   	pop    eax
c0017302:	5a                   	pop    edx
c0017303:	68 a4 00 02 c0       	push   0xc00200a4
c0017308:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001730e:	e8 e1 12 ff ff       	call   c00085f4 <VgaText::setTitle(char*)>
c0017313:	83 c4 0c             	add    esp,0xc
c0017316:	6a 01                	push   0x1
c0017318:	6a 0f                	push   0xf
c001731a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017320:	e8 97 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017325:	59                   	pop    ecx
c0017326:	58                   	pop    eax
c0017327:	68 bc 1c 02 c0       	push   0xc0021cbc
c001732c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017332:	e8 67 17 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0017337:	83 c4 0c             	add    esp,0xc
c001733a:	6a 0f                	push   0xf
c001733c:	6a 01                	push   0x1
c001733e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017344:	e8 73 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017349:	58                   	pop    eax
c001734a:	5a                   	pop    edx
c001734b:	68 c5 1c 02 c0       	push   0xc0021cc5
c0017350:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017356:	e8 43 17 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c001735b:	83 c4 0c             	add    esp,0xc
c001735e:	6a 01                	push   0x1
c0017360:	6a 0f                	push   0xf
c0017362:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017368:	e8 4f 12 ff ff       	call   c00085bc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001736d:	59                   	pop    ecx
c001736e:	58                   	pop    eax
c001736f:	68 09 1d 02 c0       	push   0xc0021d09
c0017374:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001737a:	e8 1f 17 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c001737f:	58                   	pop    eax
c0017380:	5a                   	pop    edx
c0017381:	68 d2 1c 02 c0       	push   0xc0021cd2
c0017386:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001738c:	e8 0d 17 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c0017391:	59                   	pop    ecx
c0017392:	58                   	pop    eax
c0017393:	68 0c 1d 02 c0       	push   0xc0021d0c
c0017398:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001739e:	e8 fb 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173a3:	58                   	pop    eax
c00173a4:	5a                   	pop    edx
c00173a5:	53                   	push   ebx
c00173a6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173ac:	e8 ed 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173b1:	59                   	pop    ecx
c00173b2:	5b                   	pop    ebx
c00173b3:	68 09 1d 02 c0       	push   0xc0021d09
c00173b8:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00173be:	e8 db 16 ff ff       	call   c0008a9e <VgaText::puts(char const*)>
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	eb fe                	jmp    c00173c6 <HalPanic(char const*)+0x112>

c00173c8 <HalQueryPerformanceCounter()>:
c00173c8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00173cd:	31 d2                	xor    edx,edx
c00173cf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00173d5:	31 c0                	xor    eax,eax
c00173d7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00173de:	74 02                	je     c00173e2 <HalQueryPerformanceCounter()+0x1a>
c00173e0:	0f 31                	rdtsc  
c00173e2:	c3                   	ret    

c00173e3 <HalInitialise()>:
c00173e3:	53                   	push   ebx
c00173e4:	83 ec 08             	sub    esp,0x8
c00173e7:	e8 b5 53 ff ff       	call   c000c7a1 <setupINTS()>
c00173ec:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00173f1:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c00173f8:	75 0f                	jne    c0017409 <HalInitialise()+0x26>
c00173fa:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017400:	83 e2 fe             	and    edx,0xfffffffe
c0017403:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017409:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017410:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017416:	83 e2 fe             	and    edx,0xfffffffe
c0017419:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001741f:	e8 a0 02 00 00       	call   c00176c4 <picOpen()>
c0017424:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001742b:	74 0a                	je     c0017437 <HalInitialise()+0x54>
c001742d:	e8 e2 01 00 00       	call   c0017614 <picDisable()>
c0017432:	e8 99 67 00 00       	call   c001dbd0 <apicOpen()>
c0017437:	50                   	push   eax
c0017438:	bb 0f 00 00 00       	mov    ebx,0xf
c001743d:	6a 00                	push   0x0
c001743f:	68 8a 70 01 c0       	push   0xc001708a
c0017444:	6a 00                	push   0x0
c0017446:	e8 1f 51 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001744b:	83 c4 0c             	add    esp,0xc
c001744e:	6a 00                	push   0x0
c0017450:	68 8a 70 01 c0       	push   0xc001708a
c0017455:	6a 01                	push   0x1
c0017457:	e8 0e 51 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001745c:	83 c4 0c             	add    esp,0xc
c001745f:	6a 00                	push   0x0
c0017461:	68 1b 6b 01 c0       	push   0xc0016b1b
c0017466:	6a 02                	push   0x2
c0017468:	e8 fd 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001746d:	83 c4 0c             	add    esp,0xc
c0017470:	6a 00                	push   0x0
c0017472:	68 8a 70 01 c0       	push   0xc001708a
c0017477:	6a 03                	push   0x3
c0017479:	e8 ec 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001747e:	83 c4 0c             	add    esp,0xc
c0017481:	6a 00                	push   0x0
c0017483:	68 8a 70 01 c0       	push   0xc001708a
c0017488:	6a 04                	push   0x4
c001748a:	e8 db 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001748f:	83 c4 0c             	add    esp,0xc
c0017492:	6a 00                	push   0x0
c0017494:	68 8a 70 01 c0       	push   0xc001708a
c0017499:	6a 05                	push   0x5
c001749b:	e8 ca 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174a0:	83 c4 0c             	add    esp,0xc
c00174a3:	6a 00                	push   0x0
c00174a5:	68 be 70 01 c0       	push   0xc00170be
c00174aa:	6a 06                	push   0x6
c00174ac:	e8 b9 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174b1:	83 c4 0c             	add    esp,0xc
c00174b4:	6a 00                	push   0x0
c00174b6:	68 34 6b 01 c0       	push   0xc0016b34
c00174bb:	6a 08                	push   0x8
c00174bd:	e8 a8 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174c2:	83 c4 0c             	add    esp,0xc
c00174c5:	6a 00                	push   0x0
c00174c7:	68 8a 70 01 c0       	push   0xc001708a
c00174cc:	6a 09                	push   0x9
c00174ce:	e8 97 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174d3:	83 c4 0c             	add    esp,0xc
c00174d6:	6a 00                	push   0x0
c00174d8:	68 8a 70 01 c0       	push   0xc001708a
c00174dd:	6a 0a                	push   0xa
c00174df:	e8 86 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174e4:	83 c4 0c             	add    esp,0xc
c00174e7:	6a 00                	push   0x0
c00174e9:	68 8a 70 01 c0       	push   0xc001708a
c00174ee:	6a 0b                	push   0xb
c00174f0:	e8 75 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00174f5:	83 c4 0c             	add    esp,0xc
c00174f8:	6a 00                	push   0x0
c00174fa:	68 9a 6f 01 c0       	push   0xc0016f9a
c00174ff:	6a 0d                	push   0xd
c0017501:	e8 64 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017506:	83 c4 0c             	add    esp,0xc
c0017509:	6a 00                	push   0x0
c001750b:	68 01 70 01 c0       	push   0xc0017001
c0017510:	6a 0e                	push   0xe
c0017512:	e8 53 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	50                   	push   eax
c001751b:	6a 00                	push   0x0
c001751d:	68 8a 70 01 c0       	push   0xc001708a
c0017522:	53                   	push   ebx
c0017523:	43                   	inc    ebx
c0017524:	e8 41 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	83 fb 1e             	cmp    ebx,0x1e
c001752f:	75 e9                	jne    c001751a <HalInitialise()+0x137>
c0017531:	50                   	push   eax
c0017532:	6a 00                	push   0x0
c0017534:	68 17 1e 01 c0       	push   0xc0011e17
c0017539:	6a 60                	push   0x60
c001753b:	e8 2a 50 ff ff       	call   c000c56a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017540:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017545:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001754f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017556:	e8 70 05 ff ff       	call   c0007acb <malloc>
c001755b:	89 04 24             	mov    DWORD PTR [esp],eax
c001755e:	89 c3                	mov    ebx,eax
c0017560:	e8 37 09 00 00       	call   c0017e9c <RTC::RTC()>
c0017565:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001756f:	5a                   	pop    edx
c0017570:	59                   	pop    ecx
c0017571:	53                   	push   ebx
c0017572:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017578:	e8 b7 4a ff ff       	call   c000c034 <Device::addChild(Device*)>
c001757d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001757f:	6a 00                	push   0x0
c0017581:	6a 00                	push   0x0
c0017583:	6a 00                	push   0x0
c0017585:	53                   	push   ebx
c0017586:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017589:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001758e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017594:	83 c4 28             	add    esp,0x28
c0017597:	5b                   	pop    ebx
c0017598:	c3                   	ret    

c0017599 <HalMakeBeep(int)>:
c0017599:	53                   	push   ebx
c001759a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001759e:	85 db                	test   ebx,ebx
c00175a0:	75 07                	jne    c00175a9 <HalMakeBeep(int)+0x10>
c00175a2:	e4 61                	in     al,0x61
c00175a4:	83 e0 fc             	and    eax,0xfffffffc
c00175a7:	eb 26                	jmp    c00175cf <HalMakeBeep(int)+0x36>
c00175a9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00175ae:	99                   	cdq    
c00175af:	f7 fb                	idiv   ebx
c00175b1:	89 c1                	mov    ecx,eax
c00175b3:	b0 b6                	mov    al,0xb6
c00175b5:	e6 43                	out    0x43,al
c00175b7:	88 c8                	mov    al,cl
c00175b9:	e6 42                	out    0x42,al
c00175bb:	89 c8                	mov    eax,ecx
c00175bd:	c1 e8 08             	shr    eax,0x8
c00175c0:	e6 42                	out    0x42,al
c00175c2:	e4 61                	in     al,0x61
c00175c4:	89 c2                	mov    edx,eax
c00175c6:	83 ca 03             	or     edx,0x3
c00175c9:	38 d0                	cmp    al,dl
c00175cb:	74 04                	je     c00175d1 <HalMakeBeep(int)+0x38>
c00175cd:	88 d0                	mov    al,dl
c00175cf:	e6 61                	out    0x61,al
c00175d1:	5b                   	pop    ebx
c00175d2:	c3                   	ret    

c00175d3 <HalGetRand()>:
c00175d3:	31 c0                	xor    eax,eax
c00175d5:	c3                   	ret    

c00175d6 <HalEndOfInterrupt(int)>:
c00175d6:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00175dd:	74 23                	je     c0017602 <HalEndOfInterrupt(int)+0x2c>
c00175df:	83 ec 14             	sub    esp,0x14
c00175e2:	6a 1b                	push   0x1b
c00175e4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175ea:	e8 eb fa fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c00175ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00175f4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00175fe:	83 c4 1c             	add    esp,0x1c
c0017601:	c3                   	ret    
c0017602:	e9 41 02 00 00       	jmp    c0017848 <picEOI(int)>

c0017607 <HalRestart()>:
c0017607:	c3                   	ret    

c0017608 <HalShutdown()>:
c0017608:	c3                   	ret    

c0017609 <HalSleep()>:
c0017609:	c3                   	ret    
c001760a:	66 90                	xchg   ax,ax

c001760c <picIoWait()>:
c001760c:	eb 00                	jmp    c001760e <picIoWait()+0x2>
c001760e:	eb 00                	jmp    c0017610 <picIoWait()+0x4>
c0017610:	90                   	nop
c0017611:	c3                   	ret    
c0017612:	66 90                	xchg   ax,ax

c0017614 <picDisable()>:
c0017614:	83 ec 10             	sub    esp,0x10
c0017617:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001761e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017623:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017627:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001762c:	ee                   	out    dx,al
c001762d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017634:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017639:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001763d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017642:	ee                   	out    dx,al
c0017643:	90                   	nop
c0017644:	83 c4 10             	add    esp,0x10
c0017647:	c3                   	ret    

c0017648 <picGetIRQReg(int)>:
c0017648:	83 ec 10             	sub    esp,0x10
c001764b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001764f:	0f b6 c0             	movzx  eax,al
c0017652:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017659:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001765d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017661:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017666:	ee                   	out    dx,al
c0017667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001766b:	0f b6 c0             	movzx  eax,al
c001766e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017675:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017679:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001767d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017682:	ee                   	out    dx,al
c0017683:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001768a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001768f:	89 c2                	mov    edx,eax
c0017691:	ec                   	in     al,dx
c0017692:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017696:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001769a:	0f b6 c0             	movzx  eax,al
c001769d:	c1 e0 08             	shl    eax,0x8
c00176a0:	89 c1                	mov    ecx,eax
c00176a2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00176a9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00176ae:	89 c2                	mov    edx,eax
c00176b0:	ec                   	in     al,dx
c00176b1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00176b5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00176b9:	0f b6 c0             	movzx  eax,al
c00176bc:	09 c8                	or     eax,ecx
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	c3                   	ret    
c00176c2:	66 90                	xchg   ax,ax

c00176c4 <picOpen()>:
c00176c4:	83 ec 50             	sub    esp,0x50
c00176c7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00176ce:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00176d3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176db:	ee                   	out    dx,al
c00176dc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00176e3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00176e8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00176ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176f0:	ee                   	out    dx,al
c00176f1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00176f9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017701:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017708:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001770c:	89 c2                	mov    edx,eax
c001770e:	ec                   	in     al,dx
c001770f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017713:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017717:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001771b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017722:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017726:	89 c2                	mov    edx,eax
c0017728:	ec                   	in     al,dx
c0017729:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001772d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017731:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017735:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001773c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017741:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017745:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017749:	ee                   	out    dx,al
c001774a:	e8 bd fe ff ff       	call   c001760c <picIoWait()>
c001774f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017756:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001775b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001775f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017763:	ee                   	out    dx,al
c0017764:	e8 a3 fe ff ff       	call   c001760c <picIoWait()>
c0017769:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001776d:	0f b6 c0             	movzx  eax,al
c0017770:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017777:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001777b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001777f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017783:	ee                   	out    dx,al
c0017784:	e8 83 fe ff ff       	call   c001760c <picIoWait()>
c0017789:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001778d:	0f b6 c0             	movzx  eax,al
c0017790:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017797:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001779b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001779f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177a3:	ee                   	out    dx,al
c00177a4:	e8 63 fe ff ff       	call   c001760c <picIoWait()>
c00177a9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00177b0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00177b5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00177b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177bd:	ee                   	out    dx,al
c00177be:	e8 49 fe ff ff       	call   c001760c <picIoWait()>
c00177c3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00177ca:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00177cf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00177d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00177d7:	ee                   	out    dx,al
c00177d8:	e8 2f fe ff ff       	call   c001760c <picIoWait()>
c00177dd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00177e4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00177e9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00177ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00177f1:	ee                   	out    dx,al
c00177f2:	e8 15 fe ff ff       	call   c001760c <picIoWait()>
c00177f7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00177fe:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017803:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017807:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001780b:	ee                   	out    dx,al
c001780c:	e8 fb fd ff ff       	call   c001760c <picIoWait()>
c0017811:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017816:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001781d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017821:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017825:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017829:	ee                   	out    dx,al
c001782a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001782f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017836:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001783a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001783e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017842:	ee                   	out    dx,al
c0017843:	90                   	nop
c0017844:	83 c4 50             	add    esp,0x50
c0017847:	c3                   	ret    

c0017848 <picEOI(int)>:
c0017848:	83 ec 10             	sub    esp,0x10
c001784b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017850:	75 1e                	jne    c0017870 <picEOI(int)+0x28>
c0017852:	6a 0b                	push   0xb
c0017854:	e8 ef fd ff ff       	call   c0017648 <picGetIRQReg(int)>
c0017859:	83 c4 04             	add    esp,0x4
c001785c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017861:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017866:	25 80 00 00 00       	and    eax,0x80
c001786b:	74 73                	je     c00178e0 <picEOI(int)+0x98>
c001786d:	8d 76 00             	lea    esi,[esi+0x0]
c0017870:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017875:	75 31                	jne    c00178a8 <picEOI(int)+0x60>
c0017877:	6a 0b                	push   0xb
c0017879:	e8 ca fd ff ff       	call   c0017648 <picGetIRQReg(int)>
c001787e:	83 c4 04             	add    esp,0x4
c0017881:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001788a:	98                   	cwde   
c001788b:	85 c0                	test   eax,eax
c001788d:	78 19                	js     c00178a8 <picEOI(int)+0x60>
c001788f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017896:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001789b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001789f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00178a4:	ee                   	out    dx,al
c00178a5:	eb 3d                	jmp    c00178e4 <picEOI(int)+0x9c>
c00178a7:	90                   	nop
c00178a8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00178ad:	7e 19                	jle    c00178c8 <picEOI(int)+0x80>
c00178af:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00178b6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00178bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00178bf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00178c4:	ee                   	out    dx,al
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]
c00178c8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00178cf:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00178d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00178d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00178dd:	ee                   	out    dx,al
c00178de:	eb 04                	jmp    c00178e4 <picEOI(int)+0x9c>
c00178e0:	90                   	nop
c00178e1:	8d 76 00             	lea    esi,[esi+0x0]
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	c3                   	ret    

c00178e8 <RTC::open(int, int, void*)>:
c00178e8:	31 c0                	xor    eax,eax
c00178ea:	c3                   	ret    
c00178eb:	90                   	nop

c00178ec <RTC::close(int, int, void*)>:
c00178ec:	31 c0                	xor    eax,eax
c00178ee:	c3                   	ret    
c00178ef:	90                   	nop

c00178f0 <RTC::timeInSecondsUTC()>:
c00178f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178f4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00178fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017900:	c3                   	ret    
c0017901:	90                   	nop

c0017902 <RTC::timeInDatetimeUTC()>:
c0017902:	53                   	push   ebx
c0017903:	83 ec 14             	sub    esp,0x14
c0017906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001790e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017910:	50                   	push   eax
c0017911:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017914:	83 c4 0c             	add    esp,0xc
c0017917:	52                   	push   edx
c0017918:	50                   	push   eax
c0017919:	53                   	push   ebx
c001791a:	e8 89 44 ff ff       	call   c000bda8 <secondsToDatetime(unsigned long long)>
c001791f:	89 d8                	mov    eax,ebx
c0017921:	83 c4 14             	add    esp,0x14
c0017924:	5b                   	pop    ebx
c0017925:	c2 04 00             	ret    0x4

c0017928 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017928:	56                   	push   esi
c0017929:	53                   	push   ebx
c001792a:	83 ec 14             	sub    esp,0x14
c001792d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017931:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017933:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017936:	8d 44 24 08          	lea    eax,[esp+0x8]
c001793a:	52                   	push   edx
c001793b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001793f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017943:	50                   	push   eax
c0017944:	e8 5f 44 ff ff       	call   c000bda8 <secondsToDatetime(unsigned long long)>
c0017949:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001794d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017951:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017955:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017959:	89 f0                	mov    eax,esi
c001795b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001795f:	83 c4 20             	add    esp,0x20
c0017962:	5b                   	pop    ebx
c0017963:	5e                   	pop    esi
c0017964:	ff e0                	jmp    eax

c0017966 <RTC::~RTC()>:
c0017966:	83 ec 0c             	sub    esp,0xc
c0017969:	ba a8 1d 02 c0       	mov    edx,0xc0021da8
c001796e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017972:	89 10                	mov    DWORD PTR [eax],edx
c0017974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017978:	83 ec 0c             	sub    esp,0xc
c001797b:	50                   	push   eax
c001797c:	e8 b3 41 ff ff       	call   c000bb34 <Clock::~Clock()>
c0017981:	83 c4 10             	add    esp,0x10
c0017984:	90                   	nop
c0017985:	83 c4 0c             	add    esp,0xc
c0017988:	c3                   	ret    
c0017989:	90                   	nop

c001798a <RTC::~RTC()>:
c001798a:	83 ec 0c             	sub    esp,0xc
c001798d:	83 ec 0c             	sub    esp,0xc
c0017990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017994:	e8 cd ff ff ff       	call   c0017966 <RTC::~RTC()>
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	83 ec 08             	sub    esp,0x8
c001799f:	68 60 01 00 00       	push   0x160
c00179a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179a8:	e8 53 2e ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	83 c4 0c             	add    esp,0xc
c00179b3:	c3                   	ret    

c00179b4 <RTC::get_update_in_progress_flag()>:
c00179b4:	83 ec 14             	sub    esp,0x14
c00179b7:	6a 0a                	push   0xa
c00179b9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179bf:	e8 ce f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c00179c4:	83 c4 1c             	add    esp,0x1c
c00179c7:	0f b6 c0             	movzx  eax,al
c00179ca:	c1 e8 07             	shr    eax,0x7
c00179cd:	c3                   	ret    

c00179ce <RTC::completeRTCRefresh()>:
c00179ce:	55                   	push   ebp
c00179cf:	57                   	push   edi
c00179d0:	56                   	push   esi
c00179d1:	53                   	push   ebx
c00179d2:	83 ec 3c             	sub    esp,0x3c
c00179d5:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00179db:	83 ec 0c             	sub    esp,0xc
c00179de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00179e2:	e8 cd ff ff ff       	call   c00179b4 <RTC::get_update_in_progress_flag()>
c00179e7:	83 c4 10             	add    esp,0x10
c00179ea:	84 c0                	test   al,al
c00179ec:	74 0e                	je     c00179fc <RTC::completeRTCRefresh()+0x2e>
c00179ee:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00179f4:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00179fa:	73 df                	jae    c00179db <RTC::completeRTCRefresh()+0xd>
c00179fc:	50                   	push   eax
c00179fd:	50                   	push   eax
c00179fe:	6a 00                	push   0x0
c0017a00:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a06:	e8 87 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a0b:	89 c7                	mov    edi,eax
c0017a0d:	58                   	pop    eax
c0017a0e:	5a                   	pop    edx
c0017a0f:	6a 02                	push   0x2
c0017a11:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a17:	e8 76 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a1c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017a20:	59                   	pop    ecx
c0017a21:	5b                   	pop    ebx
c0017a22:	6a 04                	push   0x4
c0017a24:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a2a:	e8 63 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a2f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017a33:	5e                   	pop    esi
c0017a34:	5d                   	pop    ebp
c0017a35:	6a 07                	push   0x7
c0017a37:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a3d:	e8 50 f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a42:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017a46:	58                   	pop    eax
c0017a47:	5a                   	pop    edx
c0017a48:	6a 08                	push   0x8
c0017a4a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a50:	e8 3d f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a55:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017a59:	59                   	pop    ecx
c0017a5a:	5b                   	pop    ebx
c0017a5b:	6a 09                	push   0x9
c0017a5d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a63:	e8 2a f7 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017a68:	0f b6 c0             	movzx  eax,al
c0017a6b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a6f:	83 c4 10             	add    esp,0x10
c0017a72:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017a78:	83 ec 0c             	sub    esp,0xc
c0017a7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017a7f:	e8 30 ff ff ff       	call   c00179b4 <RTC::get_update_in_progress_flag()>
c0017a84:	83 c4 10             	add    esp,0x10
c0017a87:	84 c0                	test   al,al
c0017a89:	74 0e                	je     c0017a99 <RTC::completeRTCRefresh()+0xcb>
c0017a8b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017a91:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017a97:	73 df                	jae    c0017a78 <RTC::completeRTCRefresh()+0xaa>
c0017a99:	51                   	push   ecx
c0017a9a:	51                   	push   ecx
c0017a9b:	6a 00                	push   0x0
c0017a9d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa3:	e8 ea f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017aa8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017aac:	5b                   	pop    ebx
c0017aad:	5e                   	pop    esi
c0017aae:	6a 02                	push   0x2
c0017ab0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ab6:	e8 d7 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017abb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017abf:	5d                   	pop    ebp
c0017ac0:	58                   	pop    eax
c0017ac1:	6a 04                	push   0x4
c0017ac3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ac9:	e8 c4 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017ace:	88 c3                	mov    bl,al
c0017ad0:	58                   	pop    eax
c0017ad1:	5a                   	pop    edx
c0017ad2:	6a 07                	push   0x7
c0017ad4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ada:	e8 b3 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017adf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ae3:	59                   	pop    ecx
c0017ae4:	5e                   	pop    esi
c0017ae5:	6a 08                	push   0x8
c0017ae7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aed:	e8 a0 f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017af2:	5d                   	pop    ebp
c0017af3:	89 c6                	mov    esi,eax
c0017af5:	58                   	pop    eax
c0017af6:	6a 09                	push   0x9
c0017af8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017afe:	e8 8f f6 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017b03:	89 f9                	mov    ecx,edi
c0017b05:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	0f b6 e8             	movzx  ebp,al
c0017b0f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b14:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017b18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b1c:	74 27                	je     c0017b45 <RTC::completeRTCRefresh()+0x177>
c0017b1e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017b22:	89 f0                	mov    eax,esi
c0017b24:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017b28:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017b2c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017b30:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017b34:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017b38:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017b3c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017b40:	e9 2d ff ff ff       	jmp    c0017a72 <RTC::completeRTCRefresh()+0xa4>
c0017b45:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b4e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017b52:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0017b56:	75 c6                	jne    c0017b1e <RTC::completeRTCRefresh()+0x150>
c0017b58:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017b5d:	89 f1                	mov    ecx,esi
c0017b5f:	0f b6 fb             	movzx  edi,bl
c0017b62:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017b66:	0f b6 c9             	movzx  ecx,cl
c0017b69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017b6d:	89 f1                	mov    ecx,esi
c0017b6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b73:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017b77:	0f 94 c2             	sete   dl
c0017b7a:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017b7e:	0f 94 c0             	sete   al
c0017b81:	21 d0                	and    eax,edx
c0017b83:	31 d2                	xor    edx,edx
c0017b85:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017b89:	0f 94 c2             	sete   dl
c0017b8c:	85 c2                	test   edx,eax
c0017b8e:	74 8e                	je     c0017b1e <RTC::completeRTCRefresh()+0x150>
c0017b90:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017b94:	75 88                	jne    c0017b1e <RTC::completeRTCRefresh()+0x150>
c0017b96:	52                   	push   edx
c0017b97:	52                   	push   edx
c0017b98:	6a 0b                	push   0xb
c0017b9a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ba0:	e8 ed f5 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017ba5:	83 c4 10             	add    esp,0x10
c0017ba8:	a8 04                	test   al,0x4
c0017baa:	75 7a                	jne    c0017c26 <RTC::completeRTCRefresh()+0x258>
c0017bac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb0:	c1 ef 04             	shr    edi,0x4
c0017bb3:	83 e6 0f             	and    esi,0xf
c0017bb6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017bba:	c1 ed 04             	shr    ebp,0x4
c0017bbd:	6b ed 0a             	imul   ebp,ebp,0xa
c0017bc0:	c1 ea 04             	shr    edx,0x4
c0017bc3:	6b d2 0a             	imul   edx,edx,0xa
c0017bc6:	83 e1 0f             	and    ecx,0xf
c0017bc9:	01 d1                	add    ecx,edx
c0017bcb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017bcf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017bd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017bd7:	c1 ea 04             	shr    edx,0x4
c0017bda:	6b d2 0a             	imul   edx,edx,0xa
c0017bdd:	83 e1 0f             	and    ecx,0xf
c0017be0:	01 d1                	add    ecx,edx
c0017be2:	89 fa                	mov    edx,edi
c0017be4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017be8:	83 e2 07             	and    edx,0x7
c0017beb:	89 d9                	mov    ecx,ebx
c0017bed:	6b d2 0a             	imul   edx,edx,0xa
c0017bf0:	83 e1 0f             	and    ecx,0xf
c0017bf3:	83 e3 80             	and    ebx,0xffffff80
c0017bf6:	01 d1                	add    ecx,edx
c0017bf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bfc:	09 cb                	or     ebx,ecx
c0017bfe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c02:	c1 ea 04             	shr    edx,0x4
c0017c05:	6b d2 0a             	imul   edx,edx,0xa
c0017c08:	83 e1 0f             	and    ecx,0xf
c0017c0b:	01 d1                	add    ecx,edx
c0017c0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c11:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017c15:	c1 ea 04             	shr    edx,0x4
c0017c18:	6b d2 0a             	imul   edx,edx,0xa
c0017c1b:	01 d6                	add    esi,edx
c0017c1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c21:	83 e2 0f             	and    edx,0xf
c0017c24:	01 d5                	add    ebp,edx
c0017c26:	a8 02                	test   al,0x2
c0017c28:	75 15                	jne    c0017c3f <RTC::completeRTCRefresh()+0x271>
c0017c2a:	f6 c3 80             	test   bl,0x80
c0017c2d:	74 10                	je     c0017c3f <RTC::completeRTCRefresh()+0x271>
c0017c2f:	83 e3 7f             	and    ebx,0x7f
c0017c32:	b9 18 00 00 00       	mov    ecx,0x18
c0017c37:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017c3a:	99                   	cdq    
c0017c3b:	f7 f9                	idiv   ecx
c0017c3d:	88 d3                	mov    bl,dl
c0017c3f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017c45:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017c4b:	77 06                	ja     c0017c53 <RTC::completeRTCRefresh()+0x285>
c0017c4d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017c53:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017c58:	31 c9                	xor    ecx,ecx
c0017c5a:	31 d2                	xor    edx,edx
c0017c5c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0017c60:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017c64:	89 cd                	mov    ebp,ecx
c0017c66:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017c6a:	c1 e7 10             	shl    edi,0x10
c0017c6d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017c73:	c1 e0 10             	shl    eax,0x10
c0017c76:	09 c5                	or     ebp,eax
c0017c78:	89 e9                	mov    ecx,ebp
c0017c7a:	0f b7 c2             	movzx  eax,dx
c0017c7d:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017c81:	09 f8                	or     eax,edi
c0017c83:	89 c2                	mov    edx,eax
c0017c85:	50                   	push   eax
c0017c86:	50                   	push   eax
c0017c87:	88 d9                	mov    cl,bl
c0017c89:	51                   	push   ecx
c0017c8a:	52                   	push   edx
c0017c8b:	e8 93 3f ff ff       	call   c000bc23 <datetimeToSeconds(datetime_t)>
c0017c90:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017c94:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017c9a:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017ca0:	83 c4 4c             	add    esp,0x4c
c0017ca3:	5b                   	pop    ebx
c0017ca4:	5e                   	pop    esi
c0017ca5:	5f                   	pop    edi
c0017ca6:	5d                   	pop    ebp
c0017ca7:	c3                   	ret    

c0017ca8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017ca8:	55                   	push   ebp
c0017ca9:	57                   	push   edi
c0017caa:	56                   	push   esi
c0017cab:	53                   	push   ebx
c0017cac:	83 ec 30             	sub    esp,0x30
c0017caf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017cb3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017cb7:	6a 00                	push   0x0
c0017cb9:	6a 00                	push   0x0
c0017cbb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017cc1:	e8 e4 f5 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017cc6:	83 c4 0c             	add    esp,0xc
c0017cc9:	6a 00                	push   0x0
c0017ccb:	6a 02                	push   0x2
c0017ccd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017cd3:	e8 d2 f5 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017cd8:	89 f8                	mov    eax,edi
c0017cda:	89 f9                	mov    ecx,edi
c0017cdc:	0f b6 c4             	movzx  eax,ah
c0017cdf:	31 d2                	xor    edx,edx
c0017ce1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ce5:	c1 e9 10             	shr    ecx,0x10
c0017ce8:	89 f0                	mov    eax,esi
c0017cea:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017cee:	89 f0                	mov    eax,esi
c0017cf0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017cf4:	0f b6 c4             	movzx  eax,ah
c0017cf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cfb:	89 f0                	mov    eax,esi
c0017cfd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017d01:	c1 e8 10             	shr    eax,0x10
c0017d04:	b9 64 00 00 00       	mov    ecx,0x64
c0017d09:	f7 f1                	div    ecx
c0017d0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017d0f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017d13:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017d17:	59                   	pop    ecx
c0017d18:	5b                   	pop    ebx
c0017d19:	89 fb                	mov    ebx,edi
c0017d1b:	6a 0b                	push   0xb
c0017d1d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017d23:	e8 6a f4 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	a8 04                	test   al,0x4
c0017d2d:	89 c5                	mov    ebp,eax
c0017d2f:	75 6e                	jne    c0017d9f <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017d31:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d35:	31 d2                	xor    edx,edx
c0017d37:	0f b6 c1             	movzx  eax,cl
c0017d3a:	b9 0a 00 00 00       	mov    ecx,0xa
c0017d3f:	f7 f1                	div    ecx
c0017d41:	c1 e0 04             	shl    eax,0x4
c0017d44:	09 d0                	or     eax,edx
c0017d46:	31 d2                	xor    edx,edx
c0017d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d4c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017d51:	f7 f1                	div    ecx
c0017d53:	c1 e0 04             	shl    eax,0x4
c0017d56:	09 d0                	or     eax,edx
c0017d58:	31 d2                	xor    edx,edx
c0017d5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d5e:	0f b6 c3             	movzx  eax,bl
c0017d61:	f7 f1                	div    ecx
c0017d63:	c1 e0 04             	shl    eax,0x4
c0017d66:	09 d0                	or     eax,edx
c0017d68:	31 d2                	xor    edx,edx
c0017d6a:	89 c3                	mov    ebx,eax
c0017d6c:	89 f0                	mov    eax,esi
c0017d6e:	0f b6 c0             	movzx  eax,al
c0017d71:	f7 f1                	div    ecx
c0017d73:	c1 e0 04             	shl    eax,0x4
c0017d76:	09 d0                	or     eax,edx
c0017d78:	31 d2                	xor    edx,edx
c0017d7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017d83:	f7 f1                	div    ecx
c0017d85:	c1 e0 04             	shl    eax,0x4
c0017d88:	09 d0                	or     eax,edx
c0017d8a:	31 d2                	xor    edx,edx
c0017d8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d94:	f7 f1                	div    ecx
c0017d96:	c1 e0 04             	shl    eax,0x4
c0017d99:	09 d0                	or     eax,edx
c0017d9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d9f:	83 e5 02             	and    ebp,0x2
c0017da2:	75 1e                	jne    c0017dc2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017da4:	0f b6 c3             	movzx  eax,bl
c0017da7:	83 f8 0b             	cmp    eax,0xb
c0017daa:	76 10                	jbe    c0017dbc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017dac:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017daf:	84 d2                	test   dl,dl
c0017db1:	88 d3                	mov    bl,dl
c0017db3:	75 02                	jne    c0017db7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017db5:	b3 0c                	mov    bl,0xc
c0017db7:	83 cb 80             	or     ebx,0xffffff80
c0017dba:	eb 06                	jmp    c0017dc2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017dbc:	85 c0                	test   eax,eax
c0017dbe:	75 02                	jne    c0017dc2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017dc0:	b3 0c                	mov    bl,0xc
c0017dc2:	50                   	push   eax
c0017dc3:	0f b6 db             	movzx  ebx,bl
c0017dc6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017dcb:	52                   	push   edx
c0017dcc:	6a 00                	push   0x0
c0017dce:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017dd4:	e8 d1 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017dd9:	83 c4 0c             	add    esp,0xc
c0017ddc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017de1:	50                   	push   eax
c0017de2:	6a 02                	push   0x2
c0017de4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017dea:	e8 bb f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017def:	83 c4 0c             	add    esp,0xc
c0017df2:	53                   	push   ebx
c0017df3:	6a 04                	push   0x4
c0017df5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017dfb:	e8 aa f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e00:	83 c4 0c             	add    esp,0xc
c0017e03:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017e08:	52                   	push   edx
c0017e09:	6a 07                	push   0x7
c0017e0b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e11:	e8 94 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e16:	83 c4 0c             	add    esp,0xc
c0017e19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017e1e:	50                   	push   eax
c0017e1f:	6a 08                	push   0x8
c0017e21:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e27:	e8 7e f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e2c:	83 c4 0c             	add    esp,0xc
c0017e2f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017e34:	55                   	push   ebp
c0017e35:	6a 09                	push   0x9
c0017e37:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e3d:	e8 68 f4 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e42:	5a                   	pop    edx
c0017e43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017e47:	e8 82 fb ff ff       	call   c00179ce <RTC::completeRTCRefresh()>
c0017e4c:	83 c4 3c             	add    esp,0x3c
c0017e4f:	b0 01                	mov    al,0x1
c0017e51:	5b                   	pop    ebx
c0017e52:	5e                   	pop    esi
c0017e53:	5f                   	pop    edi
c0017e54:	5d                   	pop    ebp
c0017e55:	c3                   	ret    

c0017e56 <rtcIRQHandler(regs*, void*)>:
c0017e56:	53                   	push   ebx
c0017e57:	83 ec 10             	sub    esp,0x10
c0017e5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017e5e:	6a 0c                	push   0xc
c0017e60:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017e66:	e8 27 f3 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	a8 80                	test   al,0x80
c0017e70:	74 24                	je     c0017e96 <rtcIRQHandler(regs*, void*)+0x40>
c0017e72:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017e79:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017e80:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017e87:	75 0d                	jne    c0017e96 <rtcIRQHandler(regs*, void*)+0x40>
c0017e89:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017e8d:	83 c4 08             	add    esp,0x8
c0017e90:	5b                   	pop    ebx
c0017e91:	e9 38 fb ff ff       	jmp    c00179ce <RTC::completeRTCRefresh()>
c0017e96:	83 c4 08             	add    esp,0x8
c0017e99:	5b                   	pop    ebx
c0017e9a:	c3                   	ret    
c0017e9b:	90                   	nop

c0017e9c <RTC::RTC()>:
c0017e9c:	83 ec 1c             	sub    esp,0x1c
c0017e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea3:	83 ec 08             	sub    esp,0x8
c0017ea6:	68 8b 1d 02 c0       	push   0xc0021d8b
c0017eab:	50                   	push   eax
c0017eac:	e8 4d 3c ff ff       	call   c000bafe <Clock::Clock(char const*)>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	ba a8 1d 02 c0       	mov    edx,0xc0021da8
c0017eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebd:	89 10                	mov    DWORD PTR [eax],edx
c0017ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eca:	6a 01                	push   0x1
c0017ecc:	68 56 7e 01 c0       	push   0xc0017e56
c0017ed1:	6a 08                	push   0x8
c0017ed3:	50                   	push   eax
c0017ed4:	e8 07 41 ff ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017ed9:	83 c4 20             	add    esp,0x20
c0017edc:	89 c2                	mov    edx,eax
c0017ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017ee8:	fa                   	cli    
c0017ee9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017eee:	83 c0 01             	add    eax,0x1
c0017ef1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017ef6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017efb:	83 ec 08             	sub    esp,0x8
c0017efe:	6a 0b                	push   0xb
c0017f00:	50                   	push   eax
c0017f01:	e8 8c f2 fe ff       	call   c0007192 <Computer::readCMOS(unsigned char)>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f0d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017f12:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017f16:	83 ca 10             	or     edx,0x10
c0017f19:	0f b6 d2             	movzx  edx,dl
c0017f1c:	83 ec 04             	sub    esp,0x4
c0017f1f:	52                   	push   edx
c0017f20:	6a 0b                	push   0xb
c0017f22:	50                   	push   eax
c0017f23:	e8 82 f3 fe ff       	call   c00072aa <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f28:	83 c4 10             	add    esp,0x10
c0017f2b:	83 ec 0c             	sub    esp,0xc
c0017f2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f32:	e8 97 fa ff ff       	call   c00179ce <RTC::completeRTCRefresh()>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017f3f:	83 e8 01             	sub    eax,0x1
c0017f42:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017f47:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017f4c:	85 c0                	test   eax,eax
c0017f4e:	75 01                	jne    c0017f51 <RTC::RTC()+0xb5>
c0017f50:	fb                   	sti    
c0017f51:	90                   	nop
c0017f52:	83 c4 1c             	add    esp,0x1c
c0017f55:	c3                   	ret    
c0017f56:	66 90                	xchg   ax,ax

c0017f58 <HalConsoleScroll(int, int)>:
c0017f58:	83 ec 10             	sub    esp,0x10
c0017f5b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017f63:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017f6b:	90                   	nop
c0017f6c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017f71:	0f 8f e1 00 00 00    	jg     c0018058 <HalConsoleScroll(int, int)+0x100>
c0017f77:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017f7f:	90                   	nop
c0017f80:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017f88:	0f 8f be 00 00 00    	jg     c001804c <HalConsoleScroll(int, int)+0xf4>
c0017f8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f92:	89 d0                	mov    eax,edx
c0017f94:	c1 e0 02             	shl    eax,0x2
c0017f97:	01 d0                	add    eax,edx
c0017f99:	c1 e0 05             	shl    eax,0x5
c0017f9c:	89 c2                	mov    edx,eax
c0017f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa2:	01 d0                	add    eax,edx
c0017fa4:	89 c2                	mov    edx,eax
c0017fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017faa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017fad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fb1:	89 d0                	mov    eax,edx
c0017fb3:	c1 e0 02             	shl    eax,0x2
c0017fb6:	01 d0                	add    eax,edx
c0017fb8:	c1 e0 05             	shl    eax,0x5
c0017fbb:	89 c2                	mov    edx,eax
c0017fbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc1:	01 d0                	add    eax,edx
c0017fc3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017fc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fcd:	01 d0                	add    eax,edx
c0017fcf:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017fd1:	88 10                	mov    BYTE PTR [eax],dl
c0017fd3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017fd8:	75 66                	jne    c0018040 <HalConsoleScroll(int, int)+0xe8>
c0017fda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fde:	83 e0 01             	and    eax,0x1
c0017fe1:	74 39                	je     c001801c <HalConsoleScroll(int, int)+0xc4>
c0017fe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fe7:	83 e0 0f             	and    eax,0xf
c0017fea:	88 c2                	mov    dl,al
c0017fec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ff0:	c1 e0 04             	shl    eax,0x4
c0017ff3:	09 d0                	or     eax,edx
c0017ff5:	88 c1                	mov    cl,al
c0017ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ffb:	89 d0                	mov    eax,edx
c0017ffd:	c1 e0 02             	shl    eax,0x2
c0018000:	01 d0                	add    eax,edx
c0018002:	c1 e0 05             	shl    eax,0x5
c0018005:	89 c2                	mov    edx,eax
c0018007:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001800b:	01 d0                	add    eax,edx
c001800d:	89 c2                	mov    edx,eax
c001800f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018013:	01 d0                	add    eax,edx
c0018015:	88 ca                	mov    dl,cl
c0018017:	88 10                	mov    BYTE PTR [eax],dl
c0018019:	eb 25                	jmp    c0018040 <HalConsoleScroll(int, int)+0xe8>
c001801b:	90                   	nop
c001801c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018020:	89 d0                	mov    eax,edx
c0018022:	c1 e0 02             	shl    eax,0x2
c0018025:	01 d0                	add    eax,edx
c0018027:	c1 e0 05             	shl    eax,0x5
c001802a:	89 c2                	mov    edx,eax
c001802c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018030:	01 d0                	add    eax,edx
c0018032:	89 c2                	mov    edx,eax
c0018034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018038:	01 d0                	add    eax,edx
c001803a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001803d:	8d 76 00             	lea    esi,[esi+0x0]
c0018040:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018045:	e9 36 ff ff ff       	jmp    c0017f80 <HalConsoleScroll(int, int)+0x28>
c001804a:	66 90                	xchg   ax,ax
c001804c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018051:	e9 16 ff ff ff       	jmp    c0017f6c <HalConsoleScroll(int, int)+0x14>
c0018056:	66 90                	xchg   ax,ax
c0018058:	90                   	nop
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	c3                   	ret    
c001805d:	8d 76 00             	lea    esi,[esi+0x0]

c0018060 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018060:	83 ec 14             	sub    esp,0x14
c0018063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018067:	88 04 24             	mov    BYTE PTR [esp],al
c001806a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001806d:	0f b6 c0             	movzx  eax,al
c0018070:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018074:	89 d1                	mov    ecx,edx
c0018076:	83 e1 0f             	and    ecx,0xf
c0018079:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001807d:	c1 e2 04             	shl    edx,0x4
c0018080:	0f b6 d2             	movzx  edx,dl
c0018083:	09 ca                	or     edx,ecx
c0018085:	c1 e2 08             	shl    edx,0x8
c0018088:	09 d0                	or     eax,edx
c001808a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001808f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018097:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809b:	89 d0                	mov    eax,edx
c001809d:	c1 e0 02             	shl    eax,0x2
c00180a0:	01 d0                	add    eax,edx
c00180a2:	c1 e0 04             	shl    eax,0x4
c00180a5:	89 c2                	mov    edx,eax
c00180a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180ab:	01 d0                	add    eax,edx
c00180ad:	d1 e0                	shl    eax,1
c00180af:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00180b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00180bc:	66 89 10             	mov    WORD PTR [eax],dx
c00180bf:	90                   	nop
c00180c0:	83 c4 14             	add    esp,0x14
c00180c3:	c3                   	ret    

c00180c4 <HalConsoleCursorUpdate(int, int)>:
c00180c4:	83 ec 20             	sub    esp,0x20
c00180c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180cb:	89 c2                	mov    edx,eax
c00180cd:	c1 e2 02             	shl    edx,0x2
c00180d0:	01 d0                	add    eax,edx
c00180d2:	c1 e0 04             	shl    eax,0x4
c00180d5:	89 c2                	mov    edx,eax
c00180d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180db:	01 d0                	add    eax,edx
c00180dd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00180e2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00180e9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00180ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00180f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180f6:	ee                   	out    dx,al
c00180f7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00180fc:	0f b6 c0             	movzx  eax,al
c00180ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018106:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001810a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001810e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018112:	ee                   	out    dx,al
c0018113:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001811a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001811f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018123:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018127:	ee                   	out    dx,al
c0018128:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001812d:	c1 e8 08             	shr    eax,0x8
c0018130:	0f b6 c0             	movzx  eax,al
c0018133:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001813a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001813e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018146:	ee                   	out    dx,al
c0018147:	90                   	nop
c0018148:	83 c4 20             	add    esp,0x20
c001814b:	c3                   	ret    

c001814c <FAT::getName()>:
c001814c:	b8 dc 1d 02 c0       	mov    eax,0xc0021ddc
c0018151:	c3                   	ret    
c0018152:	66 90                	xchg   ax,ax

c0018154 <FAT::tell(void*, unsigned long long*)>:
c0018154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018159:	75 09                	jne    c0018164 <FAT::tell(void*, unsigned long long*)+0x10>
c001815b:	b8 04 00 00 00       	mov    eax,0x4
c0018160:	c3                   	ret    
c0018161:	8d 76 00             	lea    esi,[esi+0x0]
c0018164:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018169:	75 09                	jne    c0018174 <FAT::tell(void*, unsigned long long*)+0x20>
c001816b:	b8 04 00 00 00       	mov    eax,0x4
c0018170:	c3                   	ret    
c0018171:	8d 76 00             	lea    esi,[esi+0x0]
c0018174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018178:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001817b:	ba 00 00 00 00       	mov    edx,0x0
c0018180:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018184:	89 01                	mov    DWORD PTR [ecx],eax
c0018186:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018189:	b8 00 00 00 00       	mov    eax,0x0
c001818e:	c3                   	ret    
c001818f:	90                   	nop

c0018190 <FAT::stat(void*, unsigned long long*)>:
c0018190:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018195:	75 09                	jne    c00181a0 <FAT::stat(void*, unsigned long long*)+0x10>
c0018197:	b8 04 00 00 00       	mov    eax,0x4
c001819c:	c3                   	ret    
c001819d:	8d 76 00             	lea    esi,[esi+0x0]
c00181a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00181a5:	75 09                	jne    c00181b0 <FAT::stat(void*, unsigned long long*)+0x20>
c00181a7:	b8 04 00 00 00       	mov    eax,0x4
c00181ac:	c3                   	ret    
c00181ad:	8d 76 00             	lea    esi,[esi+0x0]
c00181b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181b7:	ba 00 00 00 00       	mov    edx,0x0
c00181bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181c0:	89 01                	mov    DWORD PTR [ecx],eax
c00181c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00181c5:	b8 00 00 00 00       	mov    eax,0x0
c00181ca:	c3                   	ret    
c00181cb:	90                   	nop

c00181cc <FAT::~FAT()>:
c00181cc:	83 ec 0c             	sub    esp,0xc
c00181cf:	ba 28 1e 02 c0       	mov    edx,0xc0021e28
c00181d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d8:	89 10                	mov    DWORD PTR [eax],edx
c00181da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181de:	83 ec 0c             	sub    esp,0xc
c00181e1:	50                   	push   eax
c00181e2:	e8 31 2d ff ff       	call   c000af18 <Filesystem::~Filesystem()>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	90                   	nop
c00181eb:	83 c4 0c             	add    esp,0xc
c00181ee:	c3                   	ret    
c00181ef:	90                   	nop

c00181f0 <FAT::~FAT()>:
c00181f0:	83 ec 0c             	sub    esp,0xc
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181fa:	e8 cd ff ff ff       	call   c00181cc <FAT::~FAT()>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	83 ec 08             	sub    esp,0x8
c0018205:	6a 08                	push   0x8
c0018207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001820b:	e8 f0 25 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	83 c4 0c             	add    esp,0xc
c0018216:	c3                   	ret    
c0018217:	90                   	nop

c0018218 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018218:	83 ec 1c             	sub    esp,0x1c
c001821b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018222:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001822b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018232:	83 f8 ff             	cmp    eax,0xffffffff
c0018235:	75 35                	jne    c001826c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018237:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001823b:	88 c2                	mov    dl,al
c001823d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018242:	01 d0                	add    eax,edx
c0018244:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018248:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001824e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018252:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018259:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001825e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018262:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018269:	eb 19                	jmp    c0018284 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001826b:	90                   	nop
c001826c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018270:	88 c2                	mov    dl,al
c0018272:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018276:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001827d:	01 d0                	add    eax,edx
c001827f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018283:	90                   	nop
c0018284:	83 ec 04             	sub    esp,0x4
c0018287:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001828b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001828f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018293:	50                   	push   eax
c0018294:	e8 5a cd fe ff       	call   c0004ff3 <f_getlabel>
c0018299:	83 c4 10             	add    esp,0x10
c001829c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182a5:	75 09                	jne    c00182b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00182a7:	b8 00 00 00 00       	mov    eax,0x0
c00182ac:	eb 0a                	jmp    c00182b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00182ae:	66 90                	xchg   ax,ax
c00182b0:	b8 01 00 00 00       	mov    eax,0x1
c00182b5:	8d 76 00             	lea    esi,[esi+0x0]
c00182b8:	83 c4 1c             	add    esp,0x1c
c00182bb:	c3                   	ret    

c00182bc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00182bc:	53                   	push   ebx
c00182bd:	83 ec 58             	sub    esp,0x58
c00182c0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00182c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00182cc:	b9 00 00 00 00       	mov    ecx,0x0
c00182d1:	b8 3c 00 00 00       	mov    eax,0x3c
c00182d6:	83 e0 f8             	and    eax,0xfffffff8
c00182d9:	89 c3                	mov    ebx,eax
c00182db:	b8 00 00 00 00       	mov    eax,0x0
c00182e0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c00182e4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c00182e8:	83 c0 08             	add    eax,0x8
c00182eb:	39 d8                	cmp    eax,ebx
c00182ed:	72 f1                	jb     c00182e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c00182ef:	01 c2                	add    edx,eax
c00182f1:	89 0a                	mov    DWORD PTR [edx],ecx
c00182f3:	83 c2 04             	add    edx,0x4
c00182f6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00182fa:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018301:	83 f8 ff             	cmp    eax,0xffffffff
c0018304:	75 36                	jne    c001833c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018306:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001830a:	88 c2                	mov    dl,al
c001830c:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018311:	01 d0                	add    eax,edx
c0018313:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018317:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001831d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018321:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018328:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001832d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018331:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018338:	eb 1a                	jmp    c0018354 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001833a:	66 90                	xchg   ax,ax
c001833c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018340:	88 c2                	mov    dl,al
c0018342:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018346:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001834d:	01 d0                	add    eax,edx
c001834f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018353:	90                   	nop
c0018354:	83 ec 08             	sub    esp,0x8
c0018357:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001835b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001835f:	50                   	push   eax
c0018360:	e8 0b 85 fe ff       	call   c0000870 <strcat>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	83 ec 0c             	sub    esp,0xc
c001836b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001836f:	50                   	push   eax
c0018370:	e8 d2 cd fe ff       	call   c0005147 <f_setlabel>
c0018375:	83 c4 10             	add    esp,0x10
c0018378:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001837c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018381:	75 09                	jne    c001838c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018383:	b8 00 00 00 00       	mov    eax,0x0
c0018388:	eb 0a                	jmp    c0018394 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001838a:	66 90                	xchg   ax,ax
c001838c:	b8 01 00 00 00       	mov    eax,0x1
c0018391:	8d 76 00             	lea    esi,[esi+0x0]
c0018394:	83 c4 58             	add    esp,0x58
c0018397:	5b                   	pop    ebx
c0018398:	c3                   	ret    
c0018399:	90                   	nop
c001839a:	66 90                	xchg   ax,ax

c001839c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001839c:	83 ec 2c             	sub    esp,0x2c
c001839f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00183a7:	83 ec 08             	sub    esp,0x8
c00183aa:	68 00 1e 02 c0       	push   0xc0021e00
c00183af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00183b3:	e8 c8 83 fe ff       	call   c0000780 <strcmp>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	85 c0                	test   eax,eax
c00183bd:	0f 94 c0             	sete   al
c00183c0:	0f b6 c0             	movzx  eax,al
c00183c3:	85 c0                	test   eax,eax
c00183c5:	74 0d                	je     c00183d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00183c7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00183cf:	e9 c0 00 00 00       	jmp    c0018494 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00183d4:	83 ec 08             	sub    esp,0x8
c00183d7:	68 f2 1d 02 c0       	push   0xc0021df2
c00183dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00183e0:	e8 9b 83 fe ff       	call   c0000780 <strcmp>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	85 c0                	test   eax,eax
c00183ea:	0f 94 c0             	sete   al
c00183ed:	0f b6 c0             	movzx  eax,al
c00183f0:	85 c0                	test   eax,eax
c00183f2:	74 10                	je     c0018404 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00183f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00183fc:	e9 93 00 00 00       	jmp    c0018494 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018401:	8d 76 00             	lea    esi,[esi+0x0]
c0018404:	83 ec 08             	sub    esp,0x8
c0018407:	68 f8 1d 02 c0       	push   0xc0021df8
c001840c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018410:	e8 6b 83 fe ff       	call   c0000780 <strcmp>
c0018415:	83 c4 10             	add    esp,0x10
c0018418:	85 c0                	test   eax,eax
c001841a:	0f 94 c0             	sete   al
c001841d:	0f b6 c0             	movzx  eax,al
c0018420:	85 c0                	test   eax,eax
c0018422:	74 0c                	je     c0018430 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018424:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001842c:	eb 66                	jmp    c0018494 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001842e:	66 90                	xchg   ax,ax
c0018430:	83 ec 08             	sub    esp,0x8
c0018433:	68 5c f7 01 c0       	push   0xc001f75c
c0018438:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001843c:	e8 3f 83 fe ff       	call   c0000780 <strcmp>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	85 c0                	test   eax,eax
c0018446:	0f 94 c0             	sete   al
c0018449:	0f b6 c0             	movzx  eax,al
c001844c:	85 c0                	test   eax,eax
c001844e:	74 0c                	je     c001845c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018450:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018458:	eb 3a                	jmp    c0018494 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001845a:	66 90                	xchg   ax,ax
c001845c:	83 ec 08             	sub    esp,0x8
c001845f:	68 fe 1d 02 c0       	push   0xc0021dfe
c0018464:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018468:	e8 13 83 fe ff       	call   c0000780 <strcmp>
c001846d:	83 c4 10             	add    esp,0x10
c0018470:	85 c0                	test   eax,eax
c0018472:	0f 94 c0             	sete   al
c0018475:	0f b6 c0             	movzx  eax,al
c0018478:	85 c0                	test   eax,eax
c001847a:	74 0c                	je     c0018488 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001847c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018484:	eb 0e                	jmp    c0018494 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018486:	66 90                	xchg   ax,ax
c0018488:	b8 08 00 00 00       	mov    eax,0x8
c001848d:	e9 ea 00 00 00       	jmp    c001857c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018492:	66 90                	xchg   ax,ax
c0018494:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001849b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00184a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184a4:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00184ab:	83 f8 ff             	cmp    eax,0xffffffff
c00184ae:	75 34                	jne    c00184e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00184b0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00184b4:	88 c2                	mov    dl,al
c00184b6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00184bb:	01 d0                	add    eax,edx
c00184bd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00184c1:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00184c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184cb:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00184d2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00184d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00184db:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00184e2:	eb 18                	jmp    c00184fc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00184e4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00184e8:	88 c2                	mov    dl,al
c00184ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184ee:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00184f5:	01 d0                	add    eax,edx
c00184f7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00184fb:	90                   	nop
c00184fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018500:	88 04 24             	mov    BYTE PTR [esp],al
c0018503:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018507:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001850b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018513:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018518:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018520:	83 ec 0c             	sub    esp,0xc
c0018523:	68 00 20 00 00       	push   0x2000
c0018528:	e8 9e f5 fe ff       	call   c0007acb <malloc>
c001852d:	83 c4 10             	add    esp,0x10
c0018530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018534:	68 00 20 00 00       	push   0x2000
c0018539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001853d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018541:	50                   	push   eax
c0018542:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018546:	50                   	push   eax
c0018547:	e8 f8 ce fe ff       	call   c0005444 <f_mkfs>
c001854c:	83 c4 10             	add    esp,0x10
c001854f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018553:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018558:	75 0a                	jne    c0018564 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001855a:	b8 00 00 00 00       	mov    eax,0x0
c001855f:	eb 1b                	jmp    c001857c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018561:	8d 76 00             	lea    esi,[esi+0x0]
c0018564:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018569:	75 09                	jne    c0018574 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001856b:	b8 09 00 00 00       	mov    eax,0x9
c0018570:	eb 0a                	jmp    c001857c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018572:	66 90                	xchg   ax,ax
c0018574:	b8 01 00 00 00       	mov    eax,0x1
c0018579:	8d 76 00             	lea    esi,[esi+0x0]
c001857c:	83 c4 2c             	add    esp,0x2c
c001857f:	c3                   	ret    

c0018580 <FAT::tryMount(LogicalDisk*, int)>:
c0018580:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018586:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001858b:	83 f8 14             	cmp    eax,0x14
c001858e:	75 18                	jne    c00185a8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018590:	83 ec 0c             	sub    esp,0xc
c0018593:	68 04 1e 02 c0       	push   0xc0021e04
c0018598:	e8 80 85 ff ff       	call   c0010b1d <KePanic(char const*)>
c001859d:	83 c4 10             	add    esp,0x10
c00185a0:	b0 00                	mov    al,0x0
c00185a2:	e9 ed 01 00 00       	jmp    c0018794 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00185a7:	90                   	nop
c00185a8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00185af:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00185b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00185bb:	3d 00 02 00 00       	cmp    eax,0x200
c00185c0:	74 0a                	je     c00185cc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00185c2:	b0 00                	mov    al,0x0
c00185c4:	e9 cb 01 00 00       	jmp    c0018794 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00185c9:	8d 76 00             	lea    esi,[esi+0x0]
c00185cc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00185d4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00185db:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00185e2:	83 f8 ff             	cmp    eax,0xffffffff
c00185e5:	74 09                	je     c00185f0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00185e7:	b0 01                	mov    al,0x1
c00185e9:	e9 a6 01 00 00       	jmp    c0018794 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00185ee:	66 90                	xchg   ax,ax
c00185f0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00185fa:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018602:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018609:	88 c2                	mov    dl,al
c001860b:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018610:	01 d0                	add    eax,edx
c0018612:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018619:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001861f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018626:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001862d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018632:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018639:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018640:	83 ec 0c             	sub    esp,0xc
c0018643:	68 34 02 00 00       	push   0x234
c0018648:	e8 7e f4 fe ff       	call   c0007acb <malloc>
c001864d:	83 c4 10             	add    esp,0x10
c0018650:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018657:	83 ec 04             	sub    esp,0x4
c001865a:	6a 00                	push   0x0
c001865c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018663:	50                   	push   eax
c0018664:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001866b:	e8 ce b5 fe ff       	call   c0003c3e <f_mount>
c0018670:	83 c4 10             	add    esp,0x10
c0018673:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001867a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018682:	74 1c                	je     c00186a0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018684:	83 ec 0c             	sub    esp,0xc
c0018687:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001868e:	e8 58 f4 fe ff       	call   c0007aeb <rfree>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	b0 00                	mov    al,0x0
c0018698:	e9 f7 00 00 00       	jmp    c0018794 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001869d:	8d 76 00             	lea    esi,[esi+0x0]
c00186a0:	83 ec 04             	sub    esp,0x4
c00186a3:	68 00 01 00 00       	push   0x100
c00186a8:	6a 00                	push   0x0
c00186aa:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00186b1:	50                   	push   eax
c00186b2:	e8 39 7e fe ff       	call   c00004f0 <memset>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	83 ec 08             	sub    esp,0x8
c00186bd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00186c4:	50                   	push   eax
c00186c5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00186cc:	50                   	push   eax
c00186cd:	e8 9e 81 fe ff       	call   c0000870 <strcat>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	83 ec 08             	sub    esp,0x8
c00186d8:	68 12 1e 02 c0       	push   0xc0021e12
c00186dd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00186e4:	50                   	push   eax
c00186e5:	e8 86 81 fe ff       	call   c0000870 <strcat>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	83 ec 04             	sub    esp,0x4
c00186f0:	6a 01                	push   0x1
c00186f2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00186f9:	50                   	push   eax
c00186fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186fe:	50                   	push   eax
c00186ff:	e8 9c b5 fe ff       	call   c0003ca0 <f_open>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001870e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018715:	85 c0                	test   eax,eax
c0018717:	74 0b                	je     c0018724 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018719:	78 31                	js     c001874c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001871b:	83 e8 04             	sub    eax,0x4
c001871e:	83 f8 01             	cmp    eax,0x1
c0018721:	77 29                	ja     c001874c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018723:	90                   	nop
c0018724:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001872c:	83 ec 0c             	sub    esp,0xc
c001872f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018733:	50                   	push   eax
c0018734:	e8 17 bd fe ff       	call   c0004450 <f_close>
c0018739:	83 c4 10             	add    esp,0x10
c001873c:	90                   	nop
c001873d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018745:	85 c0                	test   eax,eax
c0018747:	74 43                	je     c001878c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018749:	eb 31                	jmp    c001877c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001874b:	90                   	nop
c001874c:	83 ec 0c             	sub    esp,0xc
c001874f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018756:	e8 90 f3 fe ff       	call   c0007aeb <rfree>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	83 ec 04             	sub    esp,0x4
c0018761:	6a 00                	push   0x0
c0018763:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001876a:	50                   	push   eax
c001876b:	6a 00                	push   0x0
c001876d:	e8 cc b4 fe ff       	call   c0003c3e <f_mount>
c0018772:	83 c4 10             	add    esp,0x10
c0018775:	b0 00                	mov    al,0x0
c0018777:	eb 1b                	jmp    c0018794 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018779:	8d 76 00             	lea    esi,[esi+0x0]
c001877c:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018781:	83 c0 01             	add    eax,0x1
c0018784:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018793:	90                   	nop
c0018794:	81 c4 4c 03 00 00    	add    esp,0x34c
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <FAT::allocateSwapfile(char const*, int)>:
c001879c:	55                   	push   ebp
c001879d:	57                   	push   edi
c001879e:	56                   	push   esi
c001879f:	53                   	push   ebx
c00187a0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00187a6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00187b1:	83 ec 0c             	sub    esp,0xc
c00187b4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00187bb:	e8 0b f3 fe ff       	call   c0007acb <malloc>
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	89 c7                	mov    edi,eax
c00187c5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00187ca:	83 ec 04             	sub    esp,0x4
c00187cd:	50                   	push   eax
c00187ce:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00187d5:	57                   	push   edi
c00187d6:	e8 9f 29 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00187e5:	83 ec 04             	sub    esp,0x4
c00187e8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00187ec:	50                   	push   eax
c00187ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00187f1:	50                   	push   eax
c00187f2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00187f9:	e8 e4 2c ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018808:	c1 e0 14             	shl    eax,0x14
c001880b:	89 c7                	mov    edi,eax
c001880d:	89 c5                	mov    ebp,eax
c001880f:	c1 fd 1f             	sar    ebp,0x1f
c0018812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001881a:	89 f9                	mov    ecx,edi
c001881c:	31 c1                	xor    ecx,eax
c001881e:	89 cb                	mov    ebx,ecx
c0018820:	89 e9                	mov    ecx,ebp
c0018822:	31 d1                	xor    ecx,edx
c0018824:	89 ce                	mov    esi,ecx
c0018826:	89 f0                	mov    eax,esi
c0018828:	09 d8                	or     eax,ebx
c001882a:	0f 84 9c 00 00 00    	je     c00188cc <FAT::allocateSwapfile(char const*, int)+0x130>
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001883a:	e8 6f 2b ff ff       	call   c000b3ae <File::unlink()>
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	83 ec 08             	sub    esp,0x8
c0018845:	6a 12                	push   0x12
c0018847:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001884e:	e8 e3 29 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c0018853:	83 c4 10             	add    esp,0x10
c0018856:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001885d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018863:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001886a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018871:	c1 e0 14             	shl    eax,0x14
c0018874:	83 ec 04             	sub    esp,0x4
c0018877:	6a 01                	push   0x1
c0018879:	50                   	push   eax
c001887a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018881:	e8 51 ca fe ff       	call   c00052d7 <f_expand>
c0018886:	83 c4 10             	add    esp,0x10
c0018889:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018890:	8b 00                	mov    eax,DWORD PTR [eax]
c0018892:	83 c0 10             	add    eax,0x10
c0018895:	8b 00                	mov    eax,DWORD PTR [eax]
c0018897:	83 ec 0c             	sub    esp,0xc
c001889a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001889e:	52                   	push   edx
c001889f:	8d 54 24 30          	lea    edx,[esp+0x30]
c00188a3:	52                   	push   edx
c00188a4:	6a 00                	push   0x0
c00188a6:	68 00 04 00 00       	push   0x400
c00188ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00188b2:	ff d0                	call   eax
c00188b4:	83 c4 20             	add    esp,0x20
c00188b7:	83 ec 0c             	sub    esp,0xc
c00188ba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00188c1:	e8 ce 29 ff ff       	call   c000b294 <File::close()>
c00188c6:	83 c4 10             	add    esp,0x10
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	83 ec 08             	sub    esp,0x8
c00188cf:	6a 01                	push   0x1
c00188d1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00188d8:	e8 59 29 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c00188dd:	83 c4 10             	add    esp,0x10
c00188e0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00188e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00188e9:	83 c0 0c             	add    eax,0xc
c00188ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00188ee:	83 ec 0c             	sub    esp,0xc
c00188f1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00188f5:	52                   	push   edx
c00188f6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00188fa:	52                   	push   edx
c00188fb:	6a 00                	push   0x0
c00188fd:	6a 04                	push   0x4
c00188ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018906:	ff d0                	call   eax
c0018908:	83 c4 20             	add    esp,0x20
c001890b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018912:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018918:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001891f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018926:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018929:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018930:	83 ec 0c             	sub    esp,0xc
c0018933:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001893a:	e8 55 29 ff ff       	call   c000b294 <File::close()>
c001893f:	83 c4 10             	add    esp,0x10
c0018942:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018949:	ba 00 00 00 00       	mov    edx,0x0
c001894e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018954:	5b                   	pop    ebx
c0018955:	5e                   	pop    esi
c0018956:	5f                   	pop    edi
c0018957:	5d                   	pop    ebp
c0018958:	c3                   	ret    
c0018959:	90                   	nop
c001895a:	66 90                	xchg   ax,ax

c001895c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001895c:	57                   	push   edi
c001895d:	56                   	push   esi
c001895e:	53                   	push   ebx
c001895f:	81 ec 50 02 00 00    	sub    esp,0x250
c0018965:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001896d:	74 0d                	je     c001897c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001896f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018977:	75 0f                	jne    c0018988 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018979:	8d 76 00             	lea    esi,[esi+0x0]
c001897c:	b8 04 00 00 00       	mov    eax,0x4
c0018981:	e9 3a 01 00 00       	jmp    c0018ac0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018986:	66 90                	xchg   ax,ax
c0018988:	83 ec 08             	sub    esp,0x8
c001898b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018992:	50                   	push   eax
c0018993:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001899a:	e8 7d bd fe ff       	call   c000471c <f_readdir>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00189a9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00189b0:	83 ec 0c             	sub    esp,0xc
c00189b3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00189ba:	83 c0 16             	add    eax,0x16
c00189bd:	50                   	push   eax
c00189be:	e8 bd 7b fe ff       	call   c0000580 <strlen>
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	ba 00 00 00 00       	mov    edx,0x0
c00189cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00189d3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00189da:	0f b6 c0             	movzx  eax,al
c00189dd:	83 e0 10             	and    eax,0x10
c00189e0:	74 0a                	je     c00189ec <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00189e2:	b8 02 00 00 00       	mov    eax,0x2
c00189e7:	eb 0b                	jmp    c00189f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00189e9:	8d 76 00             	lea    esi,[esi+0x0]
c00189ec:	b8 01 00 00 00       	mov    eax,0x1
c00189f1:	8d 76 00             	lea    esi,[esi+0x0]
c00189f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189f8:	83 ec 08             	sub    esp,0x8
c00189fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018a02:	83 c0 16             	add    eax,0x16
c0018a05:	50                   	push   eax
c0018a06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018a0a:	83 c0 10             	add    eax,0x10
c0018a0d:	50                   	push   eax
c0018a0e:	e8 3d 7c fe ff       	call   c0000650 <strcpy>
c0018a13:	83 c4 10             	add    esp,0x10
c0018a16:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018a1d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018a24:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a28:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018a2f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018a36:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018a3d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018a44:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018a4b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018a52:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018a59:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018a60:	89 c6                	mov    esi,eax
c0018a62:	89 d7                	mov    edi,edx
c0018a64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a66:	89 c8                	mov    eax,ecx
c0018a68:	89 fa                	mov    edx,edi
c0018a6a:	89 f3                	mov    ebx,esi
c0018a6c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018a73:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018a7a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018a81:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018a88:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018a8e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018a95:	0f be c0             	movsx  eax,al
c0018a98:	85 c0                	test   eax,eax
c0018a9a:	75 08                	jne    c0018aa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018a9c:	b8 07 00 00 00       	mov    eax,0x7
c0018aa1:	eb 1d                	jmp    c0018ac0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018aa3:	90                   	nop
c0018aa4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018aab:	85 c0                	test   eax,eax
c0018aad:	75 09                	jne    c0018ab8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018aaf:	b8 00 00 00 00       	mov    eax,0x0
c0018ab4:	eb 0a                	jmp    c0018ac0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018ab6:	66 90                	xchg   ax,ax
c0018ab8:	b8 01 00 00 00       	mov    eax,0x1
c0018abd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ac0:	81 c4 50 02 00 00    	add    esp,0x250
c0018ac6:	5b                   	pop    ebx
c0018ac7:	5e                   	pop    esi
c0018ac8:	5f                   	pop    edi
c0018ac9:	c3                   	ret    
c0018aca:	66 90                	xchg   ax,ax

c0018acc <FAT::read(void*, unsigned long, void*, int*)>:
c0018acc:	83 ec 1c             	sub    esp,0x1c
c0018acf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018ad4:	74 0a                	je     c0018ae0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018ad6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018adb:	75 0b                	jne    c0018ae8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018add:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae0:	b8 04 00 00 00       	mov    eax,0x4
c0018ae5:	eb 41                	jmp    c0018b28 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018ae7:	90                   	nop
c0018ae8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018aec:	50                   	push   eax
c0018aed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018af1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018af5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018af9:	e8 65 b4 fe ff       	call   c0003f63 <f_read>
c0018afe:	83 c4 10             	add    esp,0x10
c0018b01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b09:	89 c2                	mov    edx,eax
c0018b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b0f:	89 10                	mov    DWORD PTR [eax],edx
c0018b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b15:	85 c0                	test   eax,eax
c0018b17:	75 07                	jne    c0018b20 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018b19:	b8 00 00 00 00       	mov    eax,0x0
c0018b1e:	eb 08                	jmp    c0018b28 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018b20:	b8 01 00 00 00       	mov    eax,0x1
c0018b25:	8d 76 00             	lea    esi,[esi+0x0]
c0018b28:	83 c4 1c             	add    esp,0x1c
c0018b2b:	c3                   	ret    

c0018b2c <FAT::write(void*, unsigned long, void*, int*)>:
c0018b2c:	83 ec 1c             	sub    esp,0x1c
c0018b2f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b34:	74 0a                	je     c0018b40 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018b36:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018b3b:	75 0b                	jne    c0018b48 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b40:	b8 04 00 00 00       	mov    eax,0x4
c0018b45:	eb 41                	jmp    c0018b88 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018b47:	90                   	nop
c0018b48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b4c:	50                   	push   eax
c0018b4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b59:	e8 e6 b5 fe ff       	call   c0004144 <f_write>
c0018b5e:	83 c4 10             	add    esp,0x10
c0018b61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b69:	89 c2                	mov    edx,eax
c0018b6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b6f:	89 10                	mov    DWORD PTR [eax],edx
c0018b71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b75:	85 c0                	test   eax,eax
c0018b77:	75 07                	jne    c0018b80 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018b79:	b8 00 00 00 00       	mov    eax,0x0
c0018b7e:	eb 08                	jmp    c0018b88 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018b80:	b8 01 00 00 00       	mov    eax,0x1
c0018b85:	8d 76 00             	lea    esi,[esi+0x0]
c0018b88:	83 c4 1c             	add    esp,0x1c
c0018b8b:	c3                   	ret    

c0018b8c <FAT::close(void*)>:
c0018b8c:	83 ec 1c             	sub    esp,0x1c
c0018b8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b94:	75 0a                	jne    c0018ba0 <FAT::close(void*)+0x14>
c0018b96:	b8 04 00 00 00       	mov    eax,0x4
c0018b9b:	eb 3f                	jmp    c0018bdc <FAT::close(void*)+0x50>
c0018b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba0:	83 ec 0c             	sub    esp,0xc
c0018ba3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ba7:	e8 a4 b8 fe ff       	call   c0004450 <f_close>
c0018bac:	83 c4 10             	add    esp,0x10
c0018baf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bb3:	83 ec 0c             	sub    esp,0xc
c0018bb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bba:	e8 1c ef fe ff       	call   c0007adb <free>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bc6:	85 c0                	test   eax,eax
c0018bc8:	75 0a                	jne    c0018bd4 <FAT::close(void*)+0x48>
c0018bca:	b8 00 00 00 00       	mov    eax,0x0
c0018bcf:	eb 0b                	jmp    c0018bdc <FAT::close(void*)+0x50>
c0018bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd4:	b8 01 00 00 00       	mov    eax,0x1
c0018bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bdc:	83 c4 1c             	add    esp,0x1c
c0018bdf:	c3                   	ret    

c0018be0 <FAT::closeDir(void*)>:
c0018be0:	83 ec 1c             	sub    esp,0x1c
c0018be3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018be8:	75 0a                	jne    c0018bf4 <FAT::closeDir(void*)+0x14>
c0018bea:	b8 04 00 00 00       	mov    eax,0x4
c0018bef:	eb 3f                	jmp    c0018c30 <FAT::closeDir(void*)+0x50>
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	83 ec 0c             	sub    esp,0xc
c0018bf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bfb:	e8 fa ba fe ff       	call   c00046fa <f_closedir>
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c07:	83 ec 0c             	sub    esp,0xc
c0018c0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c0e:	e8 c8 ee fe ff       	call   c0007adb <free>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c1a:	85 c0                	test   eax,eax
c0018c1c:	75 0a                	jne    c0018c28 <FAT::closeDir(void*)+0x48>
c0018c1e:	b8 00 00 00 00       	mov    eax,0x0
c0018c23:	eb 0b                	jmp    c0018c30 <FAT::closeDir(void*)+0x50>
c0018c25:	8d 76 00             	lea    esi,[esi+0x0]
c0018c28:	b8 01 00 00 00       	mov    eax,0x1
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	83 c4 1c             	add    esp,0x1c
c0018c33:	c3                   	ret    

c0018c34 <FAT::seek(void*, unsigned long long)>:
c0018c34:	83 ec 2c             	sub    esp,0x2c
c0018c37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c47:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018c4c:	75 0a                	jne    c0018c58 <FAT::seek(void*, unsigned long long)+0x24>
c0018c4e:	b8 04 00 00 00       	mov    eax,0x4
c0018c53:	eb 33                	jmp    c0018c88 <FAT::seek(void*, unsigned long long)+0x54>
c0018c55:	8d 76 00             	lea    esi,[esi+0x0]
c0018c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c5c:	83 ec 08             	sub    esp,0x8
c0018c5f:	50                   	push   eax
c0018c60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c64:	e8 16 b8 fe ff       	call   c000447f <f_lseek>
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c74:	85 c0                	test   eax,eax
c0018c76:	75 08                	jne    c0018c80 <FAT::seek(void*, unsigned long long)+0x4c>
c0018c78:	b8 00 00 00 00       	mov    eax,0x0
c0018c7d:	eb 09                	jmp    c0018c88 <FAT::seek(void*, unsigned long long)+0x54>
c0018c7f:	90                   	nop
c0018c80:	b8 01 00 00 00       	mov    eax,0x1
c0018c85:	8d 76 00             	lea    esi,[esi+0x0]
c0018c88:	83 c4 2c             	add    esp,0x2c
c0018c8b:	c3                   	ret    

c0018c8c <fatWrapperReadDisk>:
c0018c8c:	53                   	push   ebx
c0018c8d:	83 ec 18             	sub    esp,0x18
c0018c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c9d:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018ca4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018ca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cac:	ba 00 00 00 00       	mov    edx,0x0
c0018cb1:	83 ec 0c             	sub    esp,0xc
c0018cb4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cb8:	53                   	push   ebx
c0018cb9:	52                   	push   edx
c0018cba:	50                   	push   eax
c0018cbb:	51                   	push   ecx
c0018cbc:	e8 5d 47 ff ff       	call   c000d41e <LogicalDisk::read(unsigned long long, int, void*)>
c0018cc1:	83 c4 20             	add    esp,0x20
c0018cc4:	83 c4 18             	add    esp,0x18
c0018cc7:	5b                   	pop    ebx
c0018cc8:	c3                   	ret    
c0018cc9:	8d 76 00             	lea    esi,[esi+0x0]

c0018ccc <fatWrapperWriteDisk>:
c0018ccc:	53                   	push   ebx
c0018ccd:	83 ec 18             	sub    esp,0x18
c0018cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018cdd:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018ce4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018ce8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cec:	ba 00 00 00 00       	mov    edx,0x0
c0018cf1:	83 ec 0c             	sub    esp,0xc
c0018cf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cf8:	53                   	push   ebx
c0018cf9:	52                   	push   edx
c0018cfa:	50                   	push   eax
c0018cfb:	51                   	push   ecx
c0018cfc:	e8 89 47 ff ff       	call   c000d48a <LogicalDisk::write(unsigned long long, int, void*)>
c0018d01:	83 c4 20             	add    esp,0x20
c0018d04:	83 c4 18             	add    esp,0x18
c0018d07:	5b                   	pop    ebx
c0018d08:	c3                   	ret    
c0018d09:	8d 76 00             	lea    esi,[esi+0x0]

c0018d0c <fatWrapperIoctl>:
c0018d0c:	53                   	push   ebx
c0018d0d:	83 ec 28             	sub    esp,0x28
c0018d10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d1c:	88 d0                	mov    al,dl
c0018d1e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018d22:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018d27:	83 f8 02             	cmp    eax,0x2
c0018d2a:	75 34                	jne    c0018d60 <fatWrapperIoctl+0x54>
c0018d2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d39:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018d40:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d46:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d4c:	89 c2                	mov    edx,eax
c0018d4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d52:	66 89 10             	mov    WORD PTR [eax],dx
c0018d55:	b8 00 00 00 00       	mov    eax,0x0
c0018d5a:	e9 c5 00 00 00       	jmp    c0018e24 <fatWrapperIoctl+0x118>
c0018d5f:	90                   	nop
c0018d60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018d65:	83 f8 01             	cmp    eax,0x1
c0018d68:	75 6a                	jne    c0018dd4 <fatWrapperIoctl+0xc8>
c0018d6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d72:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d77:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018d7e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d84:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018d8a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018d90:	89 c8                	mov    eax,ecx
c0018d92:	89 da                	mov    edx,ebx
c0018d94:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018d98:	c1 e0 0a             	shl    eax,0xa
c0018d9b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018da0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018da7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018dad:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018db3:	89 cb                	mov    ebx,ecx
c0018db5:	c1 fb 1f             	sar    ebx,0x1f
c0018db8:	53                   	push   ebx
c0018db9:	51                   	push   ecx
c0018dba:	52                   	push   edx
c0018dbb:	50                   	push   eax
c0018dbc:	e8 af 5b 00 00       	call   c001e970 <__udivdi3>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	89 c2                	mov    edx,eax
c0018dc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dca:	89 10                	mov    DWORD PTR [eax],edx
c0018dcc:	b8 00 00 00 00       	mov    eax,0x0
c0018dd1:	eb 51                	jmp    c0018e24 <fatWrapperIoctl+0x118>
c0018dd3:	90                   	nop
c0018dd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018dd9:	85 c0                	test   eax,eax
c0018ddb:	75 07                	jne    c0018de4 <fatWrapperIoctl+0xd8>
c0018ddd:	b8 00 00 00 00       	mov    eax,0x0
c0018de2:	eb 40                	jmp    c0018e24 <fatWrapperIoctl+0x118>
c0018de4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018de9:	83 f8 03             	cmp    eax,0x3
c0018dec:	75 1a                	jne    c0018e08 <fatWrapperIoctl+0xfc>
c0018dee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018df2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018df6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dfa:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018e00:	b8 00 00 00 00       	mov    eax,0x0
c0018e05:	eb 1d                	jmp    c0018e24 <fatWrapperIoctl+0x118>
c0018e07:	90                   	nop
c0018e08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e0d:	83 f8 04             	cmp    eax,0x4
c0018e10:	75 0a                	jne    c0018e1c <fatWrapperIoctl+0x110>
c0018e12:	b8 00 00 00 00       	mov    eax,0x0
c0018e17:	eb 0b                	jmp    c0018e24 <fatWrapperIoctl+0x118>
c0018e19:	8d 76 00             	lea    esi,[esi+0x0]
c0018e1c:	b8 04 00 00 00       	mov    eax,0x4
c0018e21:	8d 76 00             	lea    esi,[esi+0x0]
c0018e24:	83 c4 28             	add    esp,0x28
c0018e27:	5b                   	pop    ebx
c0018e28:	c3                   	ret    
c0018e29:	90                   	nop
c0018e2a:	66 90                	xchg   ax,ax

c0018e2c <FAT::FAT()>:
c0018e2c:	83 ec 1c             	sub    esp,0x1c
c0018e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e33:	83 ec 0c             	sub    esp,0xc
c0018e36:	50                   	push   eax
c0018e37:	e8 b8 20 ff ff       	call   c000aef4 <Filesystem::Filesystem()>
c0018e3c:	83 c4 10             	add    esp,0x10
c0018e3f:	ba 28 1e 02 c0       	mov    edx,0xc0021e28
c0018e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e48:	89 10                	mov    DWORD PTR [eax],edx
c0018e4a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018e54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018e5c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018e61:	7f 19                	jg     c0018e7c <FAT::FAT()+0x50>
c0018e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e67:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018e72:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e77:	eb e3                	jmp    c0018e5c <FAT::FAT()+0x30>
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	90                   	nop
c0018e7d:	83 c4 1c             	add    esp,0x1c
c0018e80:	c3                   	ret    
c0018e81:	90                   	nop
c0018e82:	66 90                	xchg   ax,ax

c0018e84 <FAT::fixFilepath(char*)>:
c0018e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e88:	8a 00                	mov    al,BYTE PTR [eax]
c0018e8a:	0f be c0             	movsx  eax,al
c0018e8d:	83 f8 40             	cmp    eax,0x40
c0018e90:	7e 2e                	jle    c0018ec0 <FAT::fixFilepath(char*)+0x3c>
c0018e92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e96:	8a 00                	mov    al,BYTE PTR [eax]
c0018e98:	83 e8 41             	sub    eax,0x41
c0018e9b:	88 c2                	mov    dl,al
c0018e9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ea1:	88 10                	mov    BYTE PTR [eax],dl
c0018ea3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ea7:	8a 00                	mov    al,BYTE PTR [eax]
c0018ea9:	0f be c0             	movsx  eax,al
c0018eac:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018eb3:	83 c0 30             	add    eax,0x30
c0018eb6:	88 c2                	mov    dl,al
c0018eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ebc:	88 10                	mov    BYTE PTR [eax],dl
c0018ebe:	66 90                	xchg   ax,ax
c0018ec0:	90                   	nop
c0018ec1:	c3                   	ret    
c0018ec2:	66 90                	xchg   ax,ax

c0018ec4 <FAT::open(char const*, void**, FileOpenMode)>:
c0018ec4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018eca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018ed2:	74 0c                	je     c0018ee0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018ed4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018edc:	75 0e                	jne    c0018eec <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018ede:	66 90                	xchg   ax,ax
c0018ee0:	b8 04 00 00 00       	mov    eax,0x4
c0018ee5:	e9 46 01 00 00       	jmp    c0019030 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018eea:	66 90                	xchg   ax,ax
c0018eec:	83 ec 08             	sub    esp,0x8
c0018eef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ef6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018efa:	50                   	push   eax
c0018efb:	e8 50 77 fe ff       	call   c0000650 <strcpy>
c0018f00:	83 c4 10             	add    esp,0x10
c0018f03:	83 ec 08             	sub    esp,0x8
c0018f06:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f0a:	50                   	push   eax
c0018f0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f12:	e8 6d ff ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c0018f17:	83 c4 10             	add    esp,0x10
c0018f1a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018f22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f29:	83 e0 01             	and    eax,0x1
c0018f2c:	74 12                	je     c0018f40 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018f2e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f35:	83 c8 01             	or     eax,0x1
c0018f38:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018f3f:	90                   	nop
c0018f40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f47:	83 e0 04             	and    eax,0x4
c0018f4a:	74 24                	je     c0018f70 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018f4c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f53:	83 c8 30             	or     eax,0x30
c0018f56:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018f5d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f64:	83 c8 02             	or     eax,0x2
c0018f67:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018f6e:	66 90                	xchg   ax,ax
c0018f70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f77:	83 e0 02             	and    eax,0x2
c0018f7a:	74 14                	je     c0018f90 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018f7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018f83:	83 c8 02             	or     eax,0x2
c0018f86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018f97:	83 e0 08             	and    eax,0x8
c0018f9a:	74 14                	je     c0018fb0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018f9c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fa3:	83 c8 04             	or     eax,0x4
c0018fa6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fad:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fb7:	83 e0 10             	and    eax,0x10
c0018fba:	74 14                	je     c0018fd0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018fbc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fc3:	83 c8 08             	or     eax,0x8
c0018fc6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd0:	83 ec 0c             	sub    esp,0xc
c0018fd3:	68 28 02 00 00       	push   0x228
c0018fd8:	e8 ee ea fe ff       	call   c0007acb <malloc>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	89 c2                	mov    edx,eax
c0018fe2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018fe9:	89 10                	mov    DWORD PTR [eax],edx
c0018feb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018ff3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018ffa:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ffc:	83 ec 04             	sub    esp,0x4
c0018fff:	52                   	push   edx
c0019000:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019004:	52                   	push   edx
c0019005:	50                   	push   eax
c0019006:	e8 95 ac fe ff       	call   c0003ca0 <f_open>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019015:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001901d:	74 09                	je     c0019028 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001901f:	b8 01 00 00 00       	mov    eax,0x1
c0019024:	eb 0a                	jmp    c0019030 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019026:	66 90                	xchg   ax,ax
c0019028:	b8 00 00 00 00       	mov    eax,0x0
c001902d:	8d 76 00             	lea    esi,[esi+0x0]
c0019030:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019036:	c3                   	ret    
c0019037:	90                   	nop

c0019038 <FAT::openDir(char const*, void**)>:
c0019038:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001903e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019046:	74 0c                	je     c0019054 <FAT::openDir(char const*, void**)+0x1c>
c0019048:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019050:	75 0e                	jne    c0019060 <FAT::openDir(char const*, void**)+0x28>
c0019052:	66 90                	xchg   ax,ax
c0019054:	b8 04 00 00 00       	mov    eax,0x4
c0019059:	e9 82 00 00 00       	jmp    c00190e0 <FAT::openDir(char const*, void**)+0xa8>
c001905e:	66 90                	xchg   ax,ax
c0019060:	83 ec 08             	sub    esp,0x8
c0019063:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001906a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001906e:	50                   	push   eax
c001906f:	e8 dc 75 fe ff       	call   c0000650 <strcpy>
c0019074:	83 c4 10             	add    esp,0x10
c0019077:	83 ec 08             	sub    esp,0x8
c001907a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001907e:	50                   	push   eax
c001907f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019086:	e8 f9 fd ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c001908b:	83 c4 10             	add    esp,0x10
c001908e:	83 ec 0c             	sub    esp,0xc
c0019091:	6a 30                	push   0x30
c0019093:	e8 33 ea fe ff       	call   c0007acb <malloc>
c0019098:	83 c4 10             	add    esp,0x10
c001909b:	89 c2                	mov    edx,eax
c001909d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190a4:	89 10                	mov    DWORD PTR [eax],edx
c00190a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00190ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00190af:	83 ec 08             	sub    esp,0x8
c00190b2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00190b6:	52                   	push   edx
c00190b7:	50                   	push   eax
c00190b8:	e8 72 b5 fe ff       	call   c000462f <f_opendir>
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00190c7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00190cf:	74 07                	je     c00190d8 <FAT::openDir(char const*, void**)+0xa0>
c00190d1:	b8 01 00 00 00       	mov    eax,0x1
c00190d6:	eb 08                	jmp    c00190e0 <FAT::openDir(char const*, void**)+0xa8>
c00190d8:	b8 00 00 00 00       	mov    eax,0x0
c00190dd:	8d 76 00             	lea    esi,[esi+0x0]
c00190e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00190e6:	c3                   	ret    
c00190e7:	90                   	nop

c00190e8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00190e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00190ee:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00190f6:	75 0c                	jne    c0019104 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00190f8:	b8 04 00 00 00       	mov    eax,0x4
c00190fd:	e9 d6 00 00 00       	jmp    c00191d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019102:	66 90                	xchg   ax,ax
c0019104:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001910c:	75 0a                	jne    c0019118 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001910e:	b8 04 00 00 00       	mov    eax,0x4
c0019113:	e9 c0 00 00 00       	jmp    c00191d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019118:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019120:	75 0a                	jne    c001912c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019122:	b8 04 00 00 00       	mov    eax,0x4
c0019127:	e9 ac 00 00 00       	jmp    c00191d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001912c:	83 ec 08             	sub    esp,0x8
c001912f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019136:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001913d:	50                   	push   eax
c001913e:	e8 0d 75 fe ff       	call   c0000650 <strcpy>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	83 ec 08             	sub    esp,0x8
c0019149:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019150:	50                   	push   eax
c0019151:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019158:	e8 27 fd ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c001915d:	83 c4 10             	add    esp,0x10
c0019160:	83 ec 08             	sub    esp,0x8
c0019163:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019167:	50                   	push   eax
c0019168:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001916f:	50                   	push   eax
c0019170:	e8 39 b6 fe ff       	call   c00047ae <f_stat>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001917f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019186:	85 c0                	test   eax,eax
c0019188:	74 0a                	je     c0019194 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001918a:	83 f8 04             	cmp    eax,0x4
c001918d:	74 39                	je     c00191c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001918f:	eb 3f                	jmp    c00191d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019191:	8d 76 00             	lea    esi,[esi+0x0]
c0019194:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019198:	0f b6 c0             	movzx  eax,al
c001919b:	83 e0 10             	and    eax,0x10
c001919e:	0f 95 c2             	setne  dl
c00191a1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00191a8:	88 10                	mov    BYTE PTR [eax],dl
c00191aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191ae:	ba 00 00 00 00       	mov    edx,0x0
c00191b3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00191ba:	89 01                	mov    DWORD PTR [ecx],eax
c00191bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00191bf:	b8 00 00 00 00       	mov    eax,0x0
c00191c4:	eb 12                	jmp    c00191d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191c6:	66 90                	xchg   ax,ax
c00191c8:	b8 02 00 00 00       	mov    eax,0x2
c00191cd:	eb 09                	jmp    c00191d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191cf:	90                   	nop
c00191d0:	b8 01 00 00 00       	mov    eax,0x1
c00191d5:	8d 76 00             	lea    esi,[esi+0x0]
c00191d8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00191de:	c3                   	ret    
c00191df:	90                   	nop

c00191e0 <FAT::unlink(char const*)>:
c00191e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00191e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00191ee:	75 08                	jne    c00191f8 <FAT::unlink(char const*)+0x18>
c00191f0:	b8 04 00 00 00       	mov    eax,0x4
c00191f5:	eb 61                	jmp    c0019258 <FAT::unlink(char const*)+0x78>
c00191f7:	90                   	nop
c00191f8:	83 ec 08             	sub    esp,0x8
c00191fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019202:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019206:	50                   	push   eax
c0019207:	e8 44 74 fe ff       	call   c0000650 <strcpy>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	83 ec 08             	sub    esp,0x8
c0019212:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019216:	50                   	push   eax
c0019217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001921e:	e8 61 fc ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	83 ec 0c             	sub    esp,0xc
c0019229:	8d 44 24 18          	lea    eax,[esp+0x18]
c001922d:	50                   	push   eax
c001922e:	e8 ed b7 fe ff       	call   c0004a20 <f_unlink>
c0019233:	83 c4 10             	add    esp,0x10
c0019236:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001923d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019244:	85 c0                	test   eax,eax
c0019246:	75 08                	jne    c0019250 <FAT::unlink(char const*)+0x70>
c0019248:	b8 00 00 00 00       	mov    eax,0x0
c001924d:	eb 09                	jmp    c0019258 <FAT::unlink(char const*)+0x78>
c001924f:	90                   	nop
c0019250:	b8 01 00 00 00       	mov    eax,0x1
c0019255:	8d 76 00             	lea    esi,[esi+0x0]
c0019258:	81 c4 1c 01 00 00    	add    esp,0x11c
c001925e:	c3                   	ret    
c001925f:	90                   	nop

c0019260 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019260:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019266:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001926d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019274:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019278:	88 d0                	mov    al,dl
c001927a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001927e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019286:	75 0c                	jne    c0019294 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019288:	b8 04 00 00 00       	mov    eax,0x4
c001928d:	e9 7e 01 00 00       	jmp    c0019410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019292:	66 90                	xchg   ax,ax
c0019294:	83 ec 08             	sub    esp,0x8
c0019297:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001929e:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192a2:	50                   	push   eax
c00192a3:	e8 a8 73 fe ff       	call   c0000650 <strcpy>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	83 ec 08             	sub    esp,0x8
c00192ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00192b2:	50                   	push   eax
c00192b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00192ba:	e8 c5 fb ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c00192bf:	83 c4 10             	add    esp,0x10
c00192c2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00192ca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00192d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00192d7:	83 e0 01             	and    eax,0x1
c00192da:	74 14                	je     c00192f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c00192dc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00192e3:	83 c8 01             	or     eax,0x1
c00192e6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00192ed:	8d 76 00             	lea    esi,[esi+0x0]
c00192f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00192f5:	83 e0 02             	and    eax,0x2
c00192f8:	74 12                	je     c001930c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c00192fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019301:	83 c8 20             	or     eax,0x20
c0019304:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001930b:	90                   	nop
c001930c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019311:	83 e0 04             	and    eax,0x4
c0019314:	74 12                	je     c0019328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019316:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001931d:	83 c8 04             	or     eax,0x4
c0019320:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019327:	90                   	nop
c0019328:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001932d:	83 e0 08             	and    eax,0x8
c0019330:	74 12                	je     c0019344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019332:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019339:	83 c8 02             	or     eax,0x2
c001933c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019343:	90                   	nop
c0019344:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019349:	83 e0 01             	and    eax,0x1
c001934c:	74 12                	je     c0019360 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001934e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019355:	83 c8 01             	or     eax,0x1
c0019358:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001935f:	90                   	nop
c0019360:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019365:	83 e0 02             	and    eax,0x2
c0019368:	74 12                	je     c001937c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001936a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019371:	83 c8 20             	or     eax,0x20
c0019374:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001937b:	90                   	nop
c001937c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019381:	83 e0 04             	and    eax,0x4
c0019384:	74 12                	je     c0019398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019386:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001938d:	83 c8 04             	or     eax,0x4
c0019390:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019397:	90                   	nop
c0019398:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001939d:	83 e0 08             	and    eax,0x8
c00193a0:	74 12                	je     c00193b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c00193a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193a9:	83 c8 02             	or     eax,0x2
c00193ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193b3:	90                   	nop
c00193b4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00193bb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00193c2:	09 d0                	or     eax,edx
c00193c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193cb:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00193d3:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00193db:	83 ec 04             	sub    esp,0x4
c00193de:	52                   	push   edx
c00193df:	50                   	push   eax
c00193e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00193e4:	50                   	push   eax
c00193e5:	e8 a9 ba fe ff       	call   c0004e93 <f_chmod>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00193f4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00193fb:	85 c0                	test   eax,eax
c00193fd:	75 09                	jne    c0019408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00193ff:	b8 00 00 00 00       	mov    eax,0x0
c0019404:	eb 0a                	jmp    c0019410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019406:	66 90                	xchg   ax,ax
c0019408:	b8 01 00 00 00       	mov    eax,0x1
c001940d:	8d 76 00             	lea    esi,[esi+0x0]
c0019410:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019416:	c3                   	ret    
c0019417:	90                   	nop

c0019418 <FAT::rename(char const*, char const*)>:
c0019418:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001941e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019426:	74 0c                	je     c0019434 <FAT::rename(char const*, char const*)+0x1c>
c0019428:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019430:	75 0e                	jne    c0019440 <FAT::rename(char const*, char const*)+0x28>
c0019432:	66 90                	xchg   ax,ax
c0019434:	b8 04 00 00 00       	mov    eax,0x4
c0019439:	e9 9e 00 00 00       	jmp    c00194dc <FAT::rename(char const*, char const*)+0xc4>
c001943e:	66 90                	xchg   ax,ax
c0019440:	83 ec 08             	sub    esp,0x8
c0019443:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001944a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019451:	50                   	push   eax
c0019452:	e8 f9 71 fe ff       	call   c0000650 <strcpy>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	83 ec 08             	sub    esp,0x8
c001945d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019464:	50                   	push   eax
c0019465:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001946c:	e8 13 fa ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c0019471:	83 c4 10             	add    esp,0x10
c0019474:	83 ec 08             	sub    esp,0x8
c0019477:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001947e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019482:	50                   	push   eax
c0019483:	e8 c8 71 fe ff       	call   c0000650 <strcpy>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	83 ec 08             	sub    esp,0x8
c001948e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019492:	50                   	push   eax
c0019493:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001949a:	e8 e5 f9 ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c001949f:	83 c4 10             	add    esp,0x10
c00194a2:	83 ec 08             	sub    esp,0x8
c00194a5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194a9:	50                   	push   eax
c00194aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00194b1:	50                   	push   eax
c00194b2:	e8 24 b8 fe ff       	call   c0004cdb <f_rename>
c00194b7:	83 c4 10             	add    esp,0x10
c00194ba:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00194c1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00194c8:	85 c0                	test   eax,eax
c00194ca:	75 08                	jne    c00194d4 <FAT::rename(char const*, char const*)+0xbc>
c00194cc:	b8 00 00 00 00       	mov    eax,0x0
c00194d1:	eb 09                	jmp    c00194dc <FAT::rename(char const*, char const*)+0xc4>
c00194d3:	90                   	nop
c00194d4:	b8 01 00 00 00       	mov    eax,0x1
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]
c00194dc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00194e2:	c3                   	ret    
c00194e3:	90                   	nop

c00194e4 <FAT::mkdir(char const*)>:
c00194e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00194ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00194f2:	75 08                	jne    c00194fc <FAT::mkdir(char const*)+0x18>
c00194f4:	b8 04 00 00 00       	mov    eax,0x4
c00194f9:	eb 61                	jmp    c001955c <FAT::mkdir(char const*)+0x78>
c00194fb:	90                   	nop
c00194fc:	83 ec 08             	sub    esp,0x8
c00194ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019506:	8d 44 24 18          	lea    eax,[esp+0x18]
c001950a:	50                   	push   eax
c001950b:	e8 40 71 fe ff       	call   c0000650 <strcpy>
c0019510:	83 c4 10             	add    esp,0x10
c0019513:	83 ec 08             	sub    esp,0x8
c0019516:	8d 44 24 14          	lea    eax,[esp+0x14]
c001951a:	50                   	push   eax
c001951b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019522:	e8 5d f9 ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c0019527:	83 c4 10             	add    esp,0x10
c001952a:	83 ec 0c             	sub    esp,0xc
c001952d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019531:	50                   	push   eax
c0019532:	e8 09 b6 fe ff       	call   c0004b40 <f_mkdir>
c0019537:	83 c4 10             	add    esp,0x10
c001953a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019541:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019548:	85 c0                	test   eax,eax
c001954a:	75 08                	jne    c0019554 <FAT::mkdir(char const*)+0x70>
c001954c:	b8 00 00 00 00       	mov    eax,0x0
c0019551:	eb 09                	jmp    c001955c <FAT::mkdir(char const*)+0x78>
c0019553:	90                   	nop
c0019554:	b8 01 00 00 00       	mov    eax,0x1
c0019559:	8d 76 00             	lea    esi,[esi+0x0]
c001955c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019562:	c3                   	ret    
c0019563:	90                   	nop

c0019564 <FAT::exists(char const*)>:
c0019564:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001956a:	83 ec 08             	sub    esp,0x8
c001956d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019574:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019578:	50                   	push   eax
c0019579:	e8 d2 70 fe ff       	call   c0000650 <strcpy>
c001957e:	83 c4 10             	add    esp,0x10
c0019581:	83 ec 08             	sub    esp,0x8
c0019584:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019588:	50                   	push   eax
c0019589:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019590:	e8 ef f8 ff ff       	call   c0018e84 <FAT::fixFilepath(char*)>
c0019595:	83 c4 10             	add    esp,0x10
c0019598:	83 ec 08             	sub    esp,0x8
c001959b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00195a2:	50                   	push   eax
c00195a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195a7:	50                   	push   eax
c00195a8:	e8 01 b2 fe ff       	call   c00047ae <f_stat>
c00195ad:	83 c4 10             	add    esp,0x10
c00195b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00195b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00195be:	85 c0                	test   eax,eax
c00195c0:	75 06                	jne    c00195c8 <FAT::exists(char const*)+0x64>
c00195c2:	b0 01                	mov    al,0x1
c00195c4:	eb 06                	jmp    c00195cc <FAT::exists(char const*)+0x68>
c00195c6:	66 90                	xchg   ax,ax
c00195c8:	b0 00                	mov    al,0x0
c00195ca:	66 90                	xchg   ax,ax
c00195cc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00195d2:	c3                   	ret    
c00195d3:	90                   	nop

c00195d4 <isoReadDiscSectorHelper>:
c00195d4:	83 ec 2c             	sub    esp,0x2c
c00195d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195df:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00195e4:	83 e8 41             	sub    eax,0x41
c00195e7:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00195ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00195f2:	ba 00 00 00 00       	mov    edx,0x0
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00195fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019602:	52                   	push   edx
c0019603:	50                   	push   eax
c0019604:	51                   	push   ecx
c0019605:	e8 14 3e ff ff       	call   c000d41e <LogicalDisk::read(unsigned long long, int, void*)>
c001960a:	83 c4 20             	add    esp,0x20
c001960d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019611:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019616:	74 0c                	je     c0019624 <isoReadDiscSectorHelper+0x50>
c0019618:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001961c:	c1 e0 0b             	shl    eax,0xb
c001961f:	eb 0b                	jmp    c001962c <isoReadDiscSectorHelper+0x58>
c0019621:	8d 76 00             	lea    esi,[esi+0x0]
c0019624:	b8 00 00 00 00       	mov    eax,0x0
c0019629:	8d 76 00             	lea    esi,[esi+0x0]
c001962c:	83 c4 2c             	add    esp,0x2c
c001962f:	c3                   	ret    

c0019630 <iso_kprintf>:
c0019630:	83 ec 0c             	sub    esp,0xc
c0019633:	83 ec 08             	sub    esp,0x8
c0019636:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001963a:	68 d6 1b 02 c0       	push   0xc0021bd6
c001963f:	e8 ba 12 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	90                   	nop
c0019648:	83 c4 0c             	add    esp,0xc
c001964b:	c3                   	ret    

c001964c <iso_kprintfd>:
c001964c:	83 ec 0c             	sub    esp,0xc
c001964f:	83 ec 08             	sub    esp,0x8
c0019652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019656:	68 3a 05 02 c0       	push   0xc002053a
c001965b:	e8 9e 12 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019660:	83 c4 10             	add    esp,0x10
c0019663:	90                   	nop
c0019664:	83 c4 0c             	add    esp,0xc
c0019667:	c3                   	ret    

c0019668 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019668:	b8 08 00 00 00       	mov    eax,0x8
c001966d:	c3                   	ret    

c001966e <ISO9660::getName()>:
c001966e:	b8 88 1e 02 c0       	mov    eax,0xc0021e88
c0019673:	c3                   	ret    

c0019674 <ISO9660::closeDir(void*)>:
c0019674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019678:	8b 00                	mov    eax,DWORD PTR [eax]
c001967a:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001967d:	90                   	nop

c001967e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001967e:	b8 01 00 00 00       	mov    eax,0x1
c0019683:	c3                   	ret    

c0019684 <ISO9660::unlink(char const*)>:
c0019684:	b8 01 00 00 00       	mov    eax,0x1
c0019689:	c3                   	ret    

c001968a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001968a:	b8 03 00 00 00       	mov    eax,0x3
c001968f:	c3                   	ret    

c0019690 <ISO9660::rename(char const*, char const*)>:
c0019690:	b8 01 00 00 00       	mov    eax,0x1
c0019695:	c3                   	ret    

c0019696 <ISO9660::mkdir(char const*)>:
c0019696:	b8 01 00 00 00       	mov    eax,0x1
c001969b:	c3                   	ret    

c001969c <ISO9660::~ISO9660()>:
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	ba c8 1f 02 c0       	mov    edx,0xc0021fc8
c00196a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196a8:	89 10                	mov    DWORD PTR [eax],edx
c00196aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	50                   	push   eax
c00196b2:	e8 61 18 ff ff       	call   c000af18 <Filesystem::~Filesystem()>
c00196b7:	83 c4 10             	add    esp,0x10
c00196ba:	90                   	nop
c00196bb:	83 c4 0c             	add    esp,0xc
c00196be:	c3                   	ret    
c00196bf:	90                   	nop

c00196c0 <ISO9660::~ISO9660()>:
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	83 ec 0c             	sub    esp,0xc
c00196c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196ca:	e8 cd ff ff ff       	call   c001969c <ISO9660::~ISO9660()>
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	83 ec 08             	sub    esp,0x8
c00196d5:	6a 08                	push   0x8
c00196d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196db:	e8 20 11 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	83 c4 0c             	add    esp,0xc
c00196e6:	c3                   	ret    
c00196e7:	90                   	nop

c00196e8 <ISO9660::exists(char const*)>:
c00196e8:	83 ec 18             	sub    esp,0x18
c00196eb:	68 a3 1e 02 c0       	push   0xc0021ea3
c00196f0:	e8 28 74 ff ff       	call   c0010b1d <KePanic(char const*)>
c00196f5:	31 c0                	xor    eax,eax
c00196f7:	83 c4 1c             	add    esp,0x1c
c00196fa:	c3                   	ret    
c00196fb:	90                   	nop

c00196fc <ISO9660::open(char const*, void**, FileOpenMode)>:
c00196fc:	56                   	push   esi
c00196fd:	53                   	push   ebx
c00196fe:	53                   	push   ebx
c00196ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019703:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019707:	85 db                	test   ebx,ebx
c0019709:	0f 84 ca 00 00 00    	je     c00197d9 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001970f:	85 f6                	test   esi,esi
c0019711:	0f 84 c2 00 00 00    	je     c00197d9 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019717:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001971c:	b8 03 00 00 00       	mov    eax,0x3
c0019721:	0f 85 b7 00 00 00    	jne    c00197de <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019727:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019729:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001972f:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019736:	74 1b                	je     c0019753 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019738:	85 c0                	test   eax,eax
c001973a:	74 10                	je     c001974c <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001973c:	83 ec 0c             	sub    esp,0xc
c001973f:	68 c1 1e 02 c0       	push   0xc0021ec1
c0019744:	e8 d4 73 ff ff       	call   c0010b1d <KePanic(char const*)>
c0019749:	83 c4 10             	add    esp,0x10
c001974c:	8a 03                	mov    al,BYTE PTR [ebx]
c001974e:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019753:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019756:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001975d:	85 c0                	test   eax,eax
c001975f:	74 09                	je     c001976a <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019761:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019768:	74 48                	je     c00197b2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001976a:	83 ec 0c             	sub    esp,0xc
c001976d:	68 d1 1e 02 c0       	push   0xc0021ed1
c0019772:	e8 87 11 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019777:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001977a:	83 c4 10             	add    esp,0x10
c001977d:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019784:	85 c0                	test   eax,eax
c0019786:	74 17                	je     c001979f <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019788:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001978f:	83 ec 0c             	sub    esp,0xc
c0019792:	68 f1 1e 02 c0       	push   0xc0021ef1
c0019797:	e8 62 11 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001979c:	83 c4 10             	add    esp,0x10
c001979f:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197a6:	83 ec 0c             	sub    esp,0xc
c00197a9:	50                   	push   eax
c00197aa:	e8 b8 d2 fe ff       	call   c0006a67 <init_percd>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	51                   	push   ecx
c00197b3:	83 c3 03             	add    ebx,0x3
c00197b6:	51                   	push   ecx
c00197b7:	6a 00                	push   0x0
c00197b9:	53                   	push   ebx
c00197ba:	e8 6b cd fe ff       	call   c000652a <iso_open>
c00197bf:	83 c4 10             	add    esp,0x10
c00197c2:	89 c2                	mov    edx,eax
c00197c4:	b8 01 00 00 00       	mov    eax,0x1
c00197c9:	83 fa ff             	cmp    edx,0xffffffff
c00197cc:	74 10                	je     c00197de <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00197ce:	83 c2 32             	add    edx,0x32
c00197d1:	31 c0                	xor    eax,eax
c00197d3:	01 d2                	add    edx,edx
c00197d5:	89 16                	mov    DWORD PTR [esi],edx
c00197d7:	eb 05                	jmp    c00197de <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00197d9:	b8 04 00 00 00       	mov    eax,0x4
c00197de:	5a                   	pop    edx
c00197df:	5b                   	pop    ebx
c00197e0:	5e                   	pop    esi
c00197e1:	c3                   	ret    

c00197e2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00197e2:	53                   	push   ebx
c00197e3:	83 ec 08             	sub    esp,0x8
c00197e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197ee:	85 c0                	test   eax,eax
c00197f0:	74 2d                	je     c001981f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00197f2:	85 db                	test   ebx,ebx
c00197f4:	74 29                	je     c001981f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00197f6:	52                   	push   edx
c00197f7:	b9 02 00 00 00       	mov    ecx,0x2
c00197fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019800:	99                   	cdq    
c0019801:	f7 f9                	idiv   ecx
c0019803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019807:	83 e8 32             	sub    eax,0x32
c001980a:	50                   	push   eax
c001980b:	e8 c2 cd fe ff       	call   c00065d2 <iso_read>
c0019810:	83 c4 10             	add    esp,0x10
c0019813:	89 03                	mov    DWORD PTR [ebx],eax
c0019815:	09 d0                	or     eax,edx
c0019817:	0f 94 c0             	sete   al
c001981a:	0f b6 c0             	movzx  eax,al
c001981d:	eb 05                	jmp    c0019824 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001981f:	b8 04 00 00 00       	mov    eax,0x4
c0019824:	83 c4 08             	add    esp,0x8
c0019827:	5b                   	pop    ebx
c0019828:	c3                   	ret    
c0019829:	90                   	nop

c001982a <ISO9660::seek(void*, unsigned long long)>:
c001982a:	57                   	push   edi
c001982b:	b8 04 00 00 00       	mov    eax,0x4
c0019830:	56                   	push   esi
c0019831:	51                   	push   ecx
c0019832:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019836:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001983a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001983e:	85 d2                	test   edx,edx
c0019840:	74 26                	je     c0019868 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019842:	89 d0                	mov    eax,edx
c0019844:	b9 02 00 00 00       	mov    ecx,0x2
c0019849:	6a 00                	push   0x0
c001984b:	99                   	cdq    
c001984c:	f7 f9                	idiv   ecx
c001984e:	57                   	push   edi
c001984f:	56                   	push   esi
c0019850:	83 e8 32             	sub    eax,0x32
c0019853:	50                   	push   eax
c0019854:	e8 8f ce fe ff       	call   c00066e8 <iso_seek>
c0019859:	83 c4 10             	add    esp,0x10
c001985c:	31 f0                	xor    eax,esi
c001985e:	31 fa                	xor    edx,edi
c0019860:	09 d0                	or     eax,edx
c0019862:	0f 95 c0             	setne  al
c0019865:	0f b6 c0             	movzx  eax,al
c0019868:	5a                   	pop    edx
c0019869:	5e                   	pop    esi
c001986a:	5f                   	pop    edi
c001986b:	c3                   	ret    

c001986c <ISO9660::tell(void*, unsigned long long*)>:
c001986c:	53                   	push   ebx
c001986d:	83 ec 08             	sub    esp,0x8
c0019870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019874:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019878:	85 c0                	test   eax,eax
c001987a:	74 24                	je     c00198a0 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001987c:	85 db                	test   ebx,ebx
c001987e:	74 20                	je     c00198a0 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019880:	b9 02 00 00 00       	mov    ecx,0x2
c0019885:	99                   	cdq    
c0019886:	f7 f9                	idiv   ecx
c0019888:	83 ec 0c             	sub    esp,0xc
c001988b:	83 e8 32             	sub    eax,0x32
c001988e:	50                   	push   eax
c001988f:	e8 d8 ce fe ff       	call   c000676c <iso_tell>
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	89 03                	mov    DWORD PTR [ebx],eax
c0019899:	31 c0                	xor    eax,eax
c001989b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001989e:	eb 05                	jmp    c00198a5 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00198a0:	b8 04 00 00 00       	mov    eax,0x4
c00198a5:	83 c4 08             	add    esp,0x8
c00198a8:	5b                   	pop    ebx
c00198a9:	c3                   	ret    

c00198aa <ISO9660::stat(void*, unsigned long long*)>:
c00198aa:	56                   	push   esi
c00198ab:	53                   	push   ebx
c00198ac:	83 ec 10             	sub    esp,0x10
c00198af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00198b7:	68 15 1f 02 c0       	push   0xc0021f15
c00198bc:	e8 3d 10 ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	85 db                	test   ebx,ebx
c00198c6:	74 2a                	je     c00198f2 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00198c8:	85 f6                	test   esi,esi
c00198ca:	74 26                	je     c00198f2 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00198cc:	89 d8                	mov    eax,ebx
c00198ce:	b9 02 00 00 00       	mov    ecx,0x2
c00198d3:	99                   	cdq    
c00198d4:	83 ec 0c             	sub    esp,0xc
c00198d7:	f7 f9                	idiv   ecx
c00198d9:	83 e8 32             	sub    eax,0x32
c00198dc:	50                   	push   eax
c00198dd:	e8 bb ce fe ff       	call   c000679d <iso_total>
c00198e2:	83 c4 10             	add    esp,0x10
c00198e5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00198ec:	89 06                	mov    DWORD PTR [esi],eax
c00198ee:	31 c0                	xor    eax,eax
c00198f0:	eb 05                	jmp    c00198f7 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00198f2:	b8 04 00 00 00       	mov    eax,0x4
c00198f7:	5a                   	pop    edx
c00198f8:	5b                   	pop    ebx
c00198f9:	5e                   	pop    esi
c00198fa:	c3                   	ret    
c00198fb:	90                   	nop

c00198fc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00198fc:	55                   	push   ebp
c00198fd:	57                   	push   edi
c00198fe:	56                   	push   esi
c00198ff:	53                   	push   ebx
c0019900:	83 ec 18             	sub    esp,0x18
c0019903:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019907:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001990b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001990f:	68 1d 1f 02 c0       	push   0xc0021f1d
c0019914:	e8 e5 0f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019919:	83 c4 10             	add    esp,0x10
c001991c:	85 ff                	test   edi,edi
c001991e:	0f 94 c0             	sete   al
c0019921:	85 f6                	test   esi,esi
c0019923:	0f 94 c2             	sete   dl
c0019926:	09 d0                	or     eax,edx
c0019928:	a8 01                	test   al,0x1
c001992a:	0f 85 dd 00 00 00    	jne    c0019a0d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019930:	85 db                	test   ebx,ebx
c0019932:	0f 84 d5 00 00 00    	je     c0019a0d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019938:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001993b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019941:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019948:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001994f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019951:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019957:	74 1b                	je     c0019974 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019959:	85 c0                	test   eax,eax
c001995b:	74 10                	je     c001996d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001995d:	83 ec 0c             	sub    esp,0xc
c0019960:	68 c1 1e 02 c0       	push   0xc0021ec1
c0019965:	e8 b3 71 ff ff       	call   c0010b1d <KePanic(char const*)>
c001996a:	83 c4 10             	add    esp,0x10
c001996d:	8a 03                	mov    al,BYTE PTR [ebx]
c001996f:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019974:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019977:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001997e:	85 c0                	test   eax,eax
c0019980:	74 09                	je     c001998b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019982:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019989:	74 51                	je     c00199dc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001998b:	83 ec 0c             	sub    esp,0xc
c001998e:	68 25 1f 02 c0       	push   0xc0021f25
c0019993:	e8 66 0f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019998:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001999b:	83 c4 10             	add    esp,0x10
c001999e:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00199a6:	74 21                	je     c00199c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00199a8:	83 ec 0c             	sub    esp,0xc
c00199ab:	68 45 1f 02 c0       	push   0xc0021f45
c00199b0:	e8 49 0f ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c00199b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00199b8:	83 c4 10             	add    esp,0x10
c00199bb:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00199c2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00199c9:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00199d0:	83 ec 0c             	sub    esp,0xc
c00199d3:	50                   	push   eax
c00199d4:	e8 8e d0 fe ff       	call   c0006a67 <init_percd>
c00199d9:	83 c4 10             	add    esp,0x10
c00199dc:	52                   	push   edx
c00199dd:	83 c3 03             	add    ebx,0x3
c00199e0:	52                   	push   edx
c00199e1:	6a 00                	push   0x0
c00199e3:	53                   	push   ebx
c00199e4:	e8 41 cb fe ff       	call   c000652a <iso_open>
c00199e9:	83 c4 10             	add    esp,0x10
c00199ec:	83 f8 ff             	cmp    eax,0xffffffff
c00199ef:	89 c5                	mov    ebp,eax
c00199f1:	75 21                	jne    c0019a14 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00199f3:	50                   	push   eax
c00199f4:	50                   	push   eax
c00199f5:	6a 01                	push   0x1
c00199f7:	53                   	push   ebx
c00199f8:	e8 2d cb fe ff       	call   c000652a <iso_open>
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	ba 02 00 00 00       	mov    edx,0x2
c0019a05:	40                   	inc    eax
c0019a06:	74 2b                	je     c0019a33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019a08:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019a0b:	eb 24                	jmp    c0019a31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019a0d:	ba 04 00 00 00       	mov    edx,0x4
c0019a12:	eb 1f                	jmp    c0019a33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019a14:	83 ec 0c             	sub    esp,0xc
c0019a17:	50                   	push   eax
c0019a18:	e8 80 cd fe ff       	call   c000679d <iso_total>
c0019a1d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019a24:	89 07                	mov    DWORD PTR [edi],eax
c0019a26:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019a29:	e8 86 cb fe ff       	call   c00065b4 <iso_close>
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	31 d2                	xor    edx,edx
c0019a33:	83 c4 0c             	add    esp,0xc
c0019a36:	89 d0                	mov    eax,edx
c0019a38:	5b                   	pop    ebx
c0019a39:	5e                   	pop    esi
c0019a3a:	5f                   	pop    edi
c0019a3b:	5d                   	pop    ebp
c0019a3c:	c3                   	ret    
c0019a3d:	90                   	nop

c0019a3e <ISO9660::close(void*)>:
c0019a3e:	83 ec 0c             	sub    esp,0xc
c0019a41:	b8 04 00 00 00       	mov    eax,0x4
c0019a46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a4a:	85 d2                	test   edx,edx
c0019a4c:	74 1b                	je     c0019a69 <ISO9660::close(void*)+0x2b>
c0019a4e:	89 d0                	mov    eax,edx
c0019a50:	b9 02 00 00 00       	mov    ecx,0x2
c0019a55:	99                   	cdq    
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	f7 f9                	idiv   ecx
c0019a5b:	83 e8 32             	sub    eax,0x32
c0019a5e:	50                   	push   eax
c0019a5f:	e8 50 cb fe ff       	call   c00065b4 <iso_close>
c0019a64:	83 c4 10             	add    esp,0x10
c0019a67:	31 c0                	xor    eax,eax
c0019a69:	83 c4 0c             	add    esp,0xc
c0019a6c:	c3                   	ret    
c0019a6d:	90                   	nop

c0019a6e <ISO9660::openDir(char const*, void**)>:
c0019a6e:	56                   	push   esi
c0019a6f:	53                   	push   ebx
c0019a70:	50                   	push   eax
c0019a71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a75:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019a79:	85 db                	test   ebx,ebx
c0019a7b:	0f 84 bd 00 00 00    	je     c0019b3e <ISO9660::openDir(char const*, void**)+0xd0>
c0019a81:	85 f6                	test   esi,esi
c0019a83:	0f 84 b5 00 00 00    	je     c0019b3e <ISO9660::openDir(char const*, void**)+0xd0>
c0019a89:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019a8b:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019a91:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019a98:	74 1b                	je     c0019ab5 <ISO9660::openDir(char const*, void**)+0x47>
c0019a9a:	85 c0                	test   eax,eax
c0019a9c:	74 10                	je     c0019aae <ISO9660::openDir(char const*, void**)+0x40>
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	68 c1 1e 02 c0       	push   0xc0021ec1
c0019aa6:	e8 72 70 ff ff       	call   c0010b1d <KePanic(char const*)>
c0019aab:	83 c4 10             	add    esp,0x10
c0019aae:	8a 03                	mov    al,BYTE PTR [ebx]
c0019ab0:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019ab5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019ab8:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019abf:	85 c0                	test   eax,eax
c0019ac1:	74 10                	je     c0019ad3 <ISO9660::openDir(char const*, void**)+0x65>
c0019ac3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019aca:	74 1a                	je     c0019ae6 <ISO9660::openDir(char const*, void**)+0x78>
c0019acc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019ad3:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019ada:	83 ec 0c             	sub    esp,0xc
c0019add:	50                   	push   eax
c0019ade:	e8 84 cf fe ff       	call   c0006a67 <init_percd>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	50                   	push   eax
c0019ae7:	83 c3 03             	add    ebx,0x3
c0019aea:	50                   	push   eax
c0019aeb:	6a 01                	push   0x1
c0019aed:	53                   	push   ebx
c0019aee:	e8 37 ca fe ff       	call   c000652a <iso_open>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	83 f8 ff             	cmp    eax,0xffffffff
c0019af9:	89 c3                	mov    ebx,eax
c0019afb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019b00:	75 1c                	jne    c0019b1e <ISO9660::openDir(char const*, void**)+0xb0>
c0019b02:	53                   	push   ebx
c0019b03:	53                   	push   ebx
c0019b04:	68 69 1f 02 c0       	push   0xc0021f69
c0019b09:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019b0f:	e8 8a ef fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	b8 01 00 00 00       	mov    eax,0x1
c0019b1c:	eb 25                	jmp    c0019b43 <ISO9660::openDir(char const*, void**)+0xd5>
c0019b1e:	51                   	push   ecx
c0019b1f:	01 db                	add    ebx,ebx
c0019b21:	51                   	push   ecx
c0019b22:	83 c3 65             	add    ebx,0x65
c0019b25:	68 7c 1f 02 c0       	push   0xc0021f7c
c0019b2a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019b30:	e8 69 ef fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	31 c0                	xor    eax,eax
c0019b3a:	89 1e                	mov    DWORD PTR [esi],ebx
c0019b3c:	eb 05                	jmp    c0019b43 <ISO9660::openDir(char const*, void**)+0xd5>
c0019b3e:	b8 04 00 00 00       	mov    eax,0x4
c0019b43:	5a                   	pop    edx
c0019b44:	5b                   	pop    ebx
c0019b45:	5e                   	pop    esi
c0019b46:	c3                   	ret    
c0019b47:	90                   	nop

c0019b48 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019b48:	55                   	push   ebp
c0019b49:	57                   	push   edi
c0019b4a:	56                   	push   esi
c0019b4b:	53                   	push   ebx
c0019b4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b52:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019b59:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019b60:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019b67:	85 db                	test   ebx,ebx
c0019b69:	0f 84 e4 00 00 00    	je     c0019c53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019b6f:	85 ed                	test   ebp,ebp
c0019b71:	0f 84 dc 00 00 00    	je     c0019c53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019b77:	83 ec 0c             	sub    esp,0xc
c0019b7a:	68 8f 1f 02 c0       	push   0xc0021f8f
c0019b7f:	e8 7a 0d ff ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c0019b84:	89 d8                	mov    eax,ebx
c0019b86:	b9 02 00 00 00       	mov    ecx,0x2
c0019b8b:	99                   	cdq    
c0019b8c:	f7 f9                	idiv   ecx
c0019b8e:	83 e8 32             	sub    eax,0x32
c0019b91:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b94:	e8 56 cc fe ff       	call   c00067ef <iso_readdir>
c0019b99:	83 c4 10             	add    esp,0x10
c0019b9c:	85 c0                	test   eax,eax
c0019b9e:	89 c3                	mov    ebx,eax
c0019ba0:	75 38                	jne    c0019bda <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019ba2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019ba7:	53                   	push   ebx
c0019ba8:	53                   	push   ebx
c0019ba9:	68 9a 1f 02 c0       	push   0xc0021f9a
c0019bae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019bb4:	e8 e5 ee fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019bb9:	83 c4 0c             	add    esp,0xc
c0019bbc:	68 10 01 00 00       	push   0x110
c0019bc1:	6a 00                	push   0x0
c0019bc3:	57                   	push   edi
c0019bc4:	e8 27 69 fe ff       	call   c00004f0 <memset>
c0019bc9:	83 c4 10             	add    esp,0x10
c0019bcc:	b8 01 00 00 00       	mov    eax,0x1
c0019bd1:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019bd8:	eb 7e                	jmp    c0019c58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019bda:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019be0:	8d 70 08             	lea    esi,[eax+0x8]
c0019be3:	83 ec 0c             	sub    esp,0xc
c0019be6:	56                   	push   esi
c0019be7:	e8 94 69 fe ff       	call   c0000580 <strlen>
c0019bec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019bf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bf8:	83 c4 10             	add    esp,0x10
c0019bfb:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019bff:	75 0a                	jne    c0019c0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019c01:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019c04:	b8 02 00 00 00       	mov    eax,0x2
c0019c09:	74 05                	je     c0019c10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019c0b:	b8 01 00 00 00       	mov    eax,0x1
c0019c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c14:	50                   	push   eax
c0019c15:	50                   	push   eax
c0019c16:	56                   	push   esi
c0019c17:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019c1b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019c1f:	50                   	push   eax
c0019c20:	e8 2b 6a fe ff       	call   c0000650 <strcpy>
c0019c25:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019c2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c2e:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019c35:	5a                   	pop    edx
c0019c36:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019c3b:	59                   	pop    ecx
c0019c3c:	68 ad 1f 02 c0       	push   0xc0021fad
c0019c41:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c47:	e8 52 ee fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c0019c4c:	83 c4 10             	add    esp,0x10
c0019c4f:	31 c0                	xor    eax,eax
c0019c51:	eb 05                	jmp    c0019c58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019c53:	b8 04 00 00 00       	mov    eax,0x4
c0019c58:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c5e:	5b                   	pop    ebx
c0019c5f:	5e                   	pop    esi
c0019c60:	5f                   	pop    edi
c0019c61:	5d                   	pop    ebp
c0019c62:	c3                   	ret    

c0019c63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019c63:	57                   	push   edi
c0019c64:	56                   	push   esi
c0019c65:	53                   	push   ebx
c0019c66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019c6e:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019c74:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019c78:	0f be cb             	movsx  ecx,bl
c0019c7b:	75 0b                	jne    c0019c88 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019c7d:	0f be 05 e0 2d 02 c0 	movsx  eax,BYTE PTR ds:0xc0022de0
c0019c84:	39 c8                	cmp    eax,ecx
c0019c86:	74 47                	je     c0019ccf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019c88:	83 ec 0c             	sub    esp,0xc
c0019c8b:	31 d2                	xor    edx,edx
c0019c8d:	68 40 83 02 c0       	push   0xc0028340
c0019c92:	6a 01                	push   0x1
c0019c94:	52                   	push   edx
c0019c95:	56                   	push   esi
c0019c96:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019c9d:	e8 7c 37 ff ff       	call   c000d41e <LogicalDisk::read(unsigned long long, int, void*)>
c0019ca2:	83 c4 20             	add    esp,0x20
c0019ca5:	85 c0                	test   eax,eax
c0019ca7:	75 0e                	jne    c0019cb7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019ca9:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019caf:	88 1d e0 2d 02 c0    	mov    BYTE PTR ds:0xc0022de0,bl
c0019cb5:	eb 18                	jmp    c0019ccf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019cb7:	50                   	push   eax
c0019cb8:	68 00 08 00 00       	push   0x800
c0019cbd:	6a 00                	push   0x0
c0019cbf:	57                   	push   edi
c0019cc0:	e8 2b 68 fe ff       	call   c00004f0 <memset>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	b8 01 00 00 00       	mov    eax,0x1
c0019ccd:	eb 0e                	jmp    c0019cdd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019ccf:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019cd4:	b9 00 08 00 00       	mov    ecx,0x800
c0019cd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cdb:	31 c0                	xor    eax,eax
c0019cdd:	5b                   	pop    ebx
c0019cde:	5e                   	pop    esi
c0019cdf:	5f                   	pop    edi
c0019ce0:	c3                   	ret    
c0019ce1:	90                   	nop

c0019ce2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019ce2:	53                   	push   ebx
c0019ce3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019ce9:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019cf3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019cfa:	8d 58 41             	lea    ebx,[eax+0x41]
c0019cfd:	0f be db             	movsx  ebx,bl
c0019d00:	53                   	push   ebx
c0019d01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d05:	50                   	push   eax
c0019d06:	6a 10                	push   0x10
c0019d08:	e8 56 ff ff ff       	call   c0019c63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	31 d2                	xor    edx,edx
c0019d12:	85 c0                	test   eax,eax
c0019d14:	75 33                	jne    c0019d49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d16:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019d1b:	75 2c                	jne    c0019d49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d1d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019d22:	75 25                	jne    c0019d49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d24:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019d29:	75 1e                	jne    c0019d49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d2b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019d30:	75 17                	jne    c0019d49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d32:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019d37:	75 10                	jne    c0019d49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019d39:	83 ec 0c             	sub    esp,0xc
c0019d3c:	53                   	push   ebx
c0019d3d:	e8 25 cd fe ff       	call   c0006a67 <init_percd>
c0019d42:	83 c4 10             	add    esp,0x10
c0019d45:	40                   	inc    eax
c0019d46:	0f 95 c2             	setne  dl
c0019d49:	81 c4 08 08 00 00    	add    esp,0x808
c0019d4f:	88 d0                	mov    al,dl
c0019d51:	5b                   	pop    ebx
c0019d52:	c3                   	ret    
c0019d53:	90                   	nop

c0019d54 <ISO9660::ISO9660()>:
c0019d54:	83 ec 0c             	sub    esp,0xc
c0019d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d5b:	83 ec 0c             	sub    esp,0xc
c0019d5e:	50                   	push   eax
c0019d5f:	e8 90 11 ff ff       	call   c000aef4 <Filesystem::Filesystem()>
c0019d64:	83 c4 10             	add    esp,0x10
c0019d67:	ba c8 1f 02 c0       	mov    edx,0xc0021fc8
c0019d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d70:	89 10                	mov    DWORD PTR [eax],edx
c0019d72:	e8 02 ce fe ff       	call   c0006b79 <fs_iso9660_init>
c0019d77:	90                   	nop
c0019d78:	83 c4 0c             	add    esp,0xc
c0019d7b:	c3                   	ret    

c0019d7c <SoundCard::beginPlayback()>:
c0019d7c:	c7 44 24 04 28 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022028
c0019d84:	e9 94 6d ff ff       	jmp    c0010b1d <KePanic(char const*)>
c0019d89:	90                   	nop

c0019d8a <SoundCard::stopPlayback()>:
c0019d8a:	c7 44 24 04 28 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022028
c0019d92:	e9 86 6d ff ff       	jmp    c0010b1d <KePanic(char const*)>
c0019d97:	90                   	nop

c0019d98 <SoundCard::SoundCard(char const*)>:
c0019d98:	83 ec 1c             	sub    esp,0x1c
c0019d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d9f:	83 ec 08             	sub    esp,0x8
c0019da2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019da6:	50                   	push   eax
c0019da7:	e8 20 24 ff ff       	call   c000c1cc <Device::Device(char const*)>
c0019dac:	83 c4 10             	add    esp,0x10
c0019daf:	ba 74 20 02 c0       	mov    edx,0xc0022074
c0019db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019db8:	89 10                	mov    DWORD PTR [eax],edx
c0019dba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dbe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dc9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dd7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019de5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019def:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019df3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019dfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019e05:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019e0a:	7f 1a                	jg     c0019e26 <SoundCard::SoundCard(char const*)+0x8e>
c0019e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e14:	83 c2 54             	add    edx,0x54
c0019e17:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019e1f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019e24:	eb df                	jmp    c0019e05 <SoundCard::SoundCard(char const*)+0x6d>
c0019e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e2a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019e31:	90                   	nop
c0019e32:	83 c4 1c             	add    esp,0x1c
c0019e35:	c3                   	ret    

c0019e36 <SoundCard::~SoundCard()>:
c0019e36:	83 ec 0c             	sub    esp,0xc
c0019e39:	ba 74 20 02 c0       	mov    edx,0xc0022074
c0019e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e42:	89 10                	mov    DWORD PTR [eax],edx
c0019e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e48:	83 ec 0c             	sub    esp,0xc
c0019e4b:	50                   	push   eax
c0019e4c:	e8 e5 20 ff ff       	call   c000bf36 <Device::~Device()>
c0019e51:	83 c4 10             	add    esp,0x10
c0019e54:	90                   	nop
c0019e55:	83 c4 0c             	add    esp,0xc
c0019e58:	c3                   	ret    
c0019e59:	90                   	nop

c0019e5a <SoundCard::~SoundCard()>:
c0019e5a:	83 ec 0c             	sub    esp,0xc
c0019e5d:	83 ec 0c             	sub    esp,0xc
c0019e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e64:	e8 cd ff ff ff       	call   c0019e36 <SoundCard::~SoundCard()>
c0019e69:	83 c4 10             	add    esp,0x10
c0019e6c:	83 ec 08             	sub    esp,0x8
c0019e6f:	68 e8 01 00 00       	push   0x1e8
c0019e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e78:	e8 83 09 ff ff       	call   c000a800 <operator delete(void*, unsigned long)>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	83 c4 0c             	add    esp,0xc
c0019e83:	c3                   	ret    

c0019e84 <SoundCard::configureRates(int, int, int)>:
c0019e84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e88:	31 c0                	xor    eax,eax
c0019e8a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019e91:	75 20                	jne    c0019eb3 <SoundCard::configureRates(int, int, int)+0x2f>
c0019e93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e97:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019e9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ea1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eab:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019eb1:	b0 01                	mov    al,0x1
c0019eb3:	c3                   	ret    

c0019eb4 <SoundCard::getSamples16(int, short*)>:
c0019eb4:	55                   	push   ebp
c0019eb5:	57                   	push   edi
c0019eb6:	31 ff                	xor    edi,edi
c0019eb8:	56                   	push   esi
c0019eb9:	53                   	push   ebx
c0019eba:	31 db                	xor    ebx,ebx
c0019ebc:	83 ec 10             	sub    esp,0x10
c0019ebf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019ec3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ec7:	8d 04 36             	lea    eax,[esi+esi*1]
c0019eca:	50                   	push   eax
c0019ecb:	6a 00                	push   0x0
c0019ecd:	55                   	push   ebp
c0019ece:	e8 1d 66 fe ff       	call   c00004f0 <memset>
c0019ed3:	83 c4 10             	add    esp,0x10
c0019ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eda:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019ee1:	85 c0                	test   eax,eax
c0019ee3:	74 1a                	je     c0019eff <SoundCard::getSamples16(int, short*)+0x4b>
c0019ee5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019ee9:	75 14                	jne    c0019eff <SoundCard::getSamples16(int, short*)+0x4b>
c0019eeb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019eef:	55                   	push   ebp
c0019ef0:	56                   	push   esi
c0019ef1:	50                   	push   eax
c0019ef2:	e8 f1 02 00 00       	call   c001a1e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019ef7:	83 c4 10             	add    esp,0x10
c0019efa:	39 c3                	cmp    ebx,eax
c0019efc:	0f 4c d8             	cmovl  ebx,eax
c0019eff:	47                   	inc    edi
c0019f00:	83 ff 20             	cmp    edi,0x20
c0019f03:	75 d1                	jne    c0019ed6 <SoundCard::getSamples16(int, short*)+0x22>
c0019f05:	83 c4 0c             	add    esp,0xc
c0019f08:	89 d8                	mov    eax,ebx
c0019f0a:	5b                   	pop    ebx
c0019f0b:	5e                   	pop    esi
c0019f0c:	5f                   	pop    edi
c0019f0d:	5d                   	pop    ebp
c0019f0e:	c3                   	ret    
c0019f0f:	90                   	nop

c0019f10 <SoundCard::getSamples32(int, int*)>:
c0019f10:	55                   	push   ebp
c0019f11:	57                   	push   edi
c0019f12:	31 ff                	xor    edi,edi
c0019f14:	56                   	push   esi
c0019f15:	31 f6                	xor    esi,esi
c0019f17:	53                   	push   ebx
c0019f18:	83 ec 10             	sub    esp,0x10
c0019f1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f1f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f23:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019f27:	c1 e0 02             	shl    eax,0x2
c0019f2a:	50                   	push   eax
c0019f2b:	6a 00                	push   0x0
c0019f2d:	55                   	push   ebp
c0019f2e:	e8 bd 65 fe ff       	call   c00004f0 <memset>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019f3d:	85 c0                	test   eax,eax
c0019f3f:	74 1a                	je     c0019f5b <SoundCard::getSamples32(int, int*)+0x4b>
c0019f41:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019f45:	75 14                	jne    c0019f5b <SoundCard::getSamples32(int, int*)+0x4b>
c0019f47:	53                   	push   ebx
c0019f48:	55                   	push   ebp
c0019f49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f4d:	50                   	push   eax
c0019f4e:	e8 65 03 00 00       	call   c001a2b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019f53:	83 c4 10             	add    esp,0x10
c0019f56:	39 c6                	cmp    esi,eax
c0019f58:	0f 4c f0             	cmovl  esi,eax
c0019f5b:	47                   	inc    edi
c0019f5c:	83 ff 20             	cmp    edi,0x20
c0019f5f:	75 d5                	jne    c0019f36 <SoundCard::getSamples32(int, int*)+0x26>
c0019f61:	85 f6                	test   esi,esi
c0019f63:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019f6a:	75 0f                	jne    c0019f7b <SoundCard::getSamples32(int, int*)+0x6b>
c0019f6c:	85 c0                	test   eax,eax
c0019f6e:	74 1b                	je     c0019f8b <SoundCard::getSamples32(int, int*)+0x7b>
c0019f70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f72:	83 ec 0c             	sub    esp,0xc
c0019f75:	53                   	push   ebx
c0019f76:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019f79:	eb 0d                	jmp    c0019f88 <SoundCard::getSamples32(int, int*)+0x78>
c0019f7b:	85 c0                	test   eax,eax
c0019f7d:	75 0c                	jne    c0019f8b <SoundCard::getSamples32(int, int*)+0x7b>
c0019f7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f81:	83 ec 0c             	sub    esp,0xc
c0019f84:	53                   	push   ebx
c0019f85:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	83 c4 0c             	add    esp,0xc
c0019f8e:	89 f0                	mov    eax,esi
c0019f90:	5b                   	pop    ebx
c0019f91:	5e                   	pop    esi
c0019f92:	5f                   	pop    edi
c0019f93:	5d                   	pop    ebp
c0019f94:	c3                   	ret    
c0019f95:	90                   	nop

c0019f96 <SoundCard::addChannel(SoundPort*)>:
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	31 c0                	xor    eax,eax
c0019f9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f9f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019fa7:	74 1b                	je     c0019fc4 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019fa9:	40                   	inc    eax
c0019faa:	83 f8 20             	cmp    eax,0x20
c0019fad:	75 f0                	jne    c0019f9f <SoundCard::addChannel(SoundPort*)+0x9>
c0019faf:	83 ec 0c             	sub    esp,0xc
c0019fb2:	68 4d 20 02 c0       	push   0xc002204d
c0019fb7:	e8 61 6b ff ff       	call   c0010b1d <KePanic(char const*)>
c0019fbc:	83 c4 10             	add    esp,0x10
c0019fbf:	83 c8 ff             	or     eax,0xffffffff
c0019fc2:	eb 0b                	jmp    c0019fcf <SoundCard::addChannel(SoundPort*)+0x39>
c0019fc4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019fc8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019fcf:	83 c4 0c             	add    esp,0xc
c0019fd2:	c3                   	ret    
c0019fd3:	90                   	nop

c0019fd4 <SoundCard::removeChannel(int)>:
c0019fd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fdc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019fe7:	c3                   	ret    

c0019fe8 <SoundPort::SoundPort(int, int, int, int)>:
c0019fe8:	83 ec 0c             	sub    esp,0xc
c0019feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a002:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a006:	89 10                	mov    DWORD PTR [eax],edx
c001a008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a00c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a010:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a017:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a01b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a01e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a023:	75 13                	jne    c001a038 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a029:	8b 00                	mov    eax,DWORD PTR [eax]
c001a02b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a030:	d1 e0                	shl    eax,1
c001a032:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a036:	66 90                	xchg   ax,ax
c001a038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a040:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a047:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a052:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a055:	c1 e0 02             	shl    eax,0x2
c001a058:	83 ec 0c             	sub    esp,0xc
c001a05b:	50                   	push   eax
c001a05c:	e8 6a da fe ff       	call   c0007acb <malloc>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	89 c2                	mov    edx,eax
c001a066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a06d:	90                   	nop
c001a06e:	83 c4 0c             	add    esp,0xc
c001a071:	c3                   	ret    
c001a072:	66 90                	xchg   ax,ax

c001a074 <SoundPort::~SoundPort()>:
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a07e:	85 c0                	test   eax,eax
c001a080:	74 1e                	je     c001a0a0 <SoundPort::~SoundPort()+0x2c>
c001a082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a086:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a089:	83 ec 0c             	sub    esp,0xc
c001a08c:	50                   	push   eax
c001a08d:	e8 49 da fe ff       	call   c0007adb <free>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a099:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a0a0:	90                   	nop
c001a0a1:	83 c4 0c             	add    esp,0xc
c001a0a4:	c3                   	ret    
c001a0a5:	90                   	nop
c001a0a6:	66 90                	xchg   ax,ax

c001a0a8 <SoundPort::unpause()>:
c001a0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a0b0:	c3                   	ret    
c001a0b1:	90                   	nop
c001a0b2:	66 90                	xchg   ax,ax

c001a0b4 <SoundPort::pause()>:
c001a0b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a0bc:	c3                   	ret    
c001a0bd:	90                   	nop
c001a0be:	66 90                	xchg   ax,ax

c001a0c0 <SoundPort::getBufferUsed()>:
c001a0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a0c7:	c3                   	ret    

c001a0c8 <SoundPort::getBufferSize()>:
c001a0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a0cf:	c3                   	ret    

c001a0d0 <SoundPort::buffer16(short*, int)>:
c001a0d0:	55                   	push   ebp
c001a0d1:	57                   	push   edi
c001a0d2:	56                   	push   esi
c001a0d3:	53                   	push   ebx
c001a0d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a0dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a0df:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a0e2:	74 68                	je     c001a14c <SoundPort::buffer16(short*, int)+0x7c>
c001a0e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a0e8:	85 c9                	test   ecx,ecx
c001a0ea:	7e 60                	jle    c001a14c <SoundPort::buffer16(short*, int)+0x7c>
c001a0ec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a0f0:	8d 70 01             	lea    esi,[eax+0x1]
c001a0f3:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a0f6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a0f9:	c1 e1 0f             	shl    ecx,0xf
c001a0fc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a0ff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a102:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a105:	74 4d                	je     c001a154 <SoundPort::buffer16(short*, int)+0x84>
c001a107:	31 f6                	xor    esi,esi
c001a109:	eb 21                	jmp    c001a12c <SoundPort::buffer16(short*, int)+0x5c>
c001a10b:	90                   	nop
c001a10c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a111:	8d 79 01             	lea    edi,[ecx+0x1]
c001a114:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a117:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a11a:	c1 e3 0f             	shl    ebx,0xf
c001a11d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a120:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a123:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a126:	74 1c                	je     c001a144 <SoundPort::buffer16(short*, int)+0x74>
c001a128:	89 c6                	mov    esi,eax
c001a12a:	66 90                	xchg   ax,ax
c001a12c:	8d 46 01             	lea    eax,[esi+0x1]
c001a12f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a133:	75 d7                	jne    c001a10c <SoundPort::buffer16(short*, int)+0x3c>
c001a135:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a139:	8d 76 00             	lea    esi,[esi+0x0]
c001a13c:	5b                   	pop    ebx
c001a13d:	5e                   	pop    esi
c001a13e:	5f                   	pop    edi
c001a13f:	5d                   	pop    ebp
c001a140:	c3                   	ret    
c001a141:	8d 76 00             	lea    esi,[esi+0x0]
c001a144:	5b                   	pop    ebx
c001a145:	8d 46 02             	lea    eax,[esi+0x2]
c001a148:	5e                   	pop    esi
c001a149:	5f                   	pop    edi
c001a14a:	5d                   	pop    ebp
c001a14b:	c3                   	ret    
c001a14c:	5b                   	pop    ebx
c001a14d:	31 c0                	xor    eax,eax
c001a14f:	5e                   	pop    esi
c001a150:	5f                   	pop    edi
c001a151:	5d                   	pop    ebp
c001a152:	c3                   	ret    
c001a153:	90                   	nop
c001a154:	b8 01 00 00 00       	mov    eax,0x1
c001a159:	eb e1                	jmp    c001a13c <SoundPort::buffer16(short*, int)+0x6c>
c001a15b:	90                   	nop

c001a15c <SoundPort::buffer32(int*, int)>:
c001a15c:	55                   	push   ebp
c001a15d:	57                   	push   edi
c001a15e:	56                   	push   esi
c001a15f:	53                   	push   ebx
c001a160:	83 ec 04             	sub    esp,0x4
c001a163:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a16b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a16f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a172:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a175:	89 04 24             	mov    DWORD PTR [esp],eax
c001a178:	74 5a                	je     c001a1d4 <SoundPort::buffer32(int*, int)+0x78>
c001a17a:	85 c0                	test   eax,eax
c001a17c:	7e 56                	jle    c001a1d4 <SoundPort::buffer32(int*, int)+0x78>
c001a17e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a181:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a184:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a187:	8b 37                	mov    esi,DWORD PTR [edi]
c001a189:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a18c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a18f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a192:	74 4c                	je     c001a1e0 <SoundPort::buffer32(int*, int)+0x84>
c001a194:	31 f6                	xor    esi,esi
c001a196:	eb 1c                	jmp    c001a1b4 <SoundPort::buffer32(int*, int)+0x58>
c001a198:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a19b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a19e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a1a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a1a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a1a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1ae:	74 18                	je     c001a1c8 <SoundPort::buffer32(int*, int)+0x6c>
c001a1b0:	89 de                	mov    esi,ebx
c001a1b2:	66 90                	xchg   ax,ax
c001a1b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a1b7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a1ba:	75 dc                	jne    c001a198 <SoundPort::buffer32(int*, int)+0x3c>
c001a1bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a1bf:	90                   	nop
c001a1c0:	83 c4 04             	add    esp,0x4
c001a1c3:	5b                   	pop    ebx
c001a1c4:	5e                   	pop    esi
c001a1c5:	5f                   	pop    edi
c001a1c6:	5d                   	pop    ebp
c001a1c7:	c3                   	ret    
c001a1c8:	8d 46 02             	lea    eax,[esi+0x2]
c001a1cb:	83 c4 04             	add    esp,0x4
c001a1ce:	5b                   	pop    ebx
c001a1cf:	5e                   	pop    esi
c001a1d0:	5f                   	pop    edi
c001a1d1:	5d                   	pop    ebp
c001a1d2:	c3                   	ret    
c001a1d3:	90                   	nop
c001a1d4:	83 c4 04             	add    esp,0x4
c001a1d7:	31 c0                	xor    eax,eax
c001a1d9:	5b                   	pop    ebx
c001a1da:	5e                   	pop    esi
c001a1db:	5f                   	pop    edi
c001a1dc:	5d                   	pop    ebp
c001a1dd:	c3                   	ret    
c001a1de:	66 90                	xchg   ax,ax
c001a1e0:	b8 01 00 00 00       	mov    eax,0x1
c001a1e5:	eb d9                	jmp    c001a1c0 <SoundPort::buffer32(int*, int)+0x64>
c001a1e7:	90                   	nop

c001a1e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a1e8:	55                   	push   ebp
c001a1e9:	57                   	push   edi
c001a1ea:	56                   	push   esi
c001a1eb:	53                   	push   ebx
c001a1ec:	83 ec 0c             	sub    esp,0xc
c001a1ef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a1f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a1fb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a1ff:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a205:	39 03                	cmp    DWORD PTR [ebx],eax
c001a207:	74 13                	je     c001a21c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	68 a0 20 02 c0       	push   0xc00220a0
c001a211:	e8 07 69 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a216:	83 c4 10             	add    esp,0x10
c001a219:	8d 76 00             	lea    esi,[esi+0x0]
c001a21c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a222:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a225:	74 11                	je     c001a238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001a227:	83 ec 0c             	sub    esp,0xc
c001a22a:	68 df 20 02 c0       	push   0xc00220df
c001a22f:	e8 e9 68 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a234:	83 c4 10             	add    esp,0x10
c001a237:	90                   	nop
c001a238:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a23e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a241:	74 11                	je     c001a254 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001a243:	83 ec 0c             	sub    esp,0xc
c001a246:	68 df 20 02 c0       	push   0xc00220df
c001a24b:	e8 cd 68 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a250:	83 c4 10             	add    esp,0x10
c001a253:	90                   	nop
c001a254:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001a257:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001a25b:	85 f6                	test   esi,esi
c001a25d:	7e 2d                	jle    c001a28c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001a25f:	31 c0                	xor    eax,eax
c001a261:	8d 76 00             	lea    esi,[esi+0x0]
c001a264:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a267:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001a26a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001a270:	85 c9                	test   ecx,ecx
c001a272:	0f 49 d1             	cmovns edx,ecx
c001a275:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001a279:	c1 fa 0f             	sar    edx,0xf
c001a27c:	01 d1                	add    ecx,edx
c001a27e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001a282:	83 c0 01             	add    eax,0x1
c001a285:	39 f0                	cmp    eax,esi
c001a287:	75 db                	jne    c001a264 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001a289:	8d 76 00             	lea    esi,[esi+0x0]
c001a28c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a28f:	83 ec 04             	sub    esp,0x4
c001a292:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a295:	29 f0                	sub    eax,esi
c001a297:	c1 e0 02             	shl    eax,0x2
c001a29a:	50                   	push   eax
c001a29b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a29e:	50                   	push   eax
c001a29f:	52                   	push   edx
c001a2a0:	e8 2b 61 fe ff       	call   c00003d0 <memmove>
c001a2a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a2a8:	29 f0                	sub    eax,esi
c001a2aa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a2ad:	83 c4 1c             	add    esp,0x1c
c001a2b0:	89 f0                	mov    eax,esi
c001a2b2:	5b                   	pop    ebx
c001a2b3:	5e                   	pop    esi
c001a2b4:	5f                   	pop    edi
c001a2b5:	5d                   	pop    ebp
c001a2b6:	c3                   	ret    
c001a2b7:	90                   	nop

c001a2b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a2b8:	55                   	push   ebp
c001a2b9:	57                   	push   edi
c001a2ba:	56                   	push   esi
c001a2bb:	53                   	push   ebx
c001a2bc:	83 ec 0c             	sub    esp,0xc
c001a2bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a2c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2c7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a2cb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a2cf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001a2d5:	39 03                	cmp    DWORD PTR [ebx],eax
c001a2d7:	74 13                	je     c001a2ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001a2d9:	83 ec 0c             	sub    esp,0xc
c001a2dc:	68 c0 20 02 c0       	push   0xc00220c0
c001a2e1:	e8 37 68 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ec:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001a2f2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a2f5:	74 11                	je     c001a308 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	68 fb 20 02 c0       	push   0xc00220fb
c001a2ff:	e8 19 68 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a304:	83 c4 10             	add    esp,0x10
c001a307:	90                   	nop
c001a308:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001a30e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a311:	74 11                	je     c001a324 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001a313:	83 ec 0c             	sub    esp,0xc
c001a316:	68 fb 20 02 c0       	push   0xc00220fb
c001a31b:	e8 fd 67 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a320:	83 c4 10             	add    esp,0x10
c001a323:	90                   	nop
c001a324:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001a327:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001a32b:	85 ff                	test   edi,edi
c001a32d:	7e 21                	jle    c001a350 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001a32f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a336:	31 c0                	xor    eax,eax
c001a338:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a33b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001a33e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a341:	01 d5                	add    ebp,edx
c001a343:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001a346:	83 c0 04             	add    eax,0x4
c001a349:	39 c1                	cmp    ecx,eax
c001a34b:	75 eb                	jne    c001a338 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a353:	83 ec 04             	sub    esp,0x4
c001a356:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a359:	29 f8                	sub    eax,edi
c001a35b:	c1 e0 02             	shl    eax,0x2
c001a35e:	50                   	push   eax
c001a35f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a362:	50                   	push   eax
c001a363:	52                   	push   edx
c001a364:	e8 67 60 fe ff       	call   c00003d0 <memmove>
c001a369:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a36c:	29 f8                	sub    eax,edi
c001a36e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a371:	83 c4 1c             	add    esp,0x1c
c001a374:	89 f8                	mov    eax,edi
c001a376:	5b                   	pop    ebx
c001a377:	5e                   	pop    esi
c001a378:	5f                   	pop    edi
c001a379:	5d                   	pop    ebp
c001a37a:	c3                   	ret    
c001a37b:	90                   	nop

c001a37c <PCI::open(int, int, void*)>:
c001a37c:	83 ec 18             	sub    esp,0x18
c001a37f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a383:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a387:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a38d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a38f:	50                   	push   eax
c001a390:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a393:	31 c0                	xor    eax,eax
c001a395:	83 c4 1c             	add    esp,0x1c
c001a398:	c3                   	ret    
c001a399:	90                   	nop

c001a39a <PCI::close(int, int, void*)>:
c001a39a:	31 c0                	xor    eax,eax
c001a39c:	c3                   	ret    
c001a39d:	90                   	nop

c001a39e <PCI::PCI()>:
c001a39e:	83 ec 0c             	sub    esp,0xc
c001a3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a5:	83 ec 08             	sub    esp,0x8
c001a3a8:	68 17 21 02 c0       	push   0xc0022117
c001a3ad:	50                   	push   eax
c001a3ae:	e8 dd 15 ff ff       	call   c000b990 <Bus::Bus(char const*)>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	ba c0 21 02 c0       	mov    edx,0xc00221c0
c001a3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3bf:	89 10                	mov    DWORD PTR [eax],edx
c001a3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d3:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a3e2:	0f b6 d0             	movzx  edx,al
c001a3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a3fa:	0f b6 d0             	movzx  edx,al
c001a3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a401:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a410:	8d 50 01             	lea    edx,[eax+0x1]
c001a413:	88 d1                	mov    cl,dl
c001a415:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a419:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a41f:	0f b6 d0             	movzx  edx,al
c001a422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a426:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a42a:	83 c9 c0             	or     ecx,0xffffffc0
c001a42d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a431:	90                   	nop
c001a432:	83 c4 0c             	add    esp,0xc
c001a435:	c3                   	ret    

c001a436 <PCI::readBAR8(unsigned int, int)>:
c001a436:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a43a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a43e:	f6 c2 01             	test   dl,0x1
c001a441:	74 07                	je     c001a44a <PCI::readBAR8(unsigned int, int)+0x14>
c001a443:	83 e2 fc             	and    edx,0xfffffffc
c001a446:	01 c2                	add    edx,eax
c001a448:	ec                   	in     al,dx
c001a449:	c3                   	ret    
c001a44a:	83 e2 f0             	and    edx,0xfffffff0
c001a44d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a450:	c3                   	ret    
c001a451:	90                   	nop

c001a452 <PCI::readBAR16(unsigned int, int)>:
c001a452:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a45a:	f6 c2 01             	test   dl,0x1
c001a45d:	74 08                	je     c001a467 <PCI::readBAR16(unsigned int, int)+0x15>
c001a45f:	83 e2 fc             	and    edx,0xfffffffc
c001a462:	01 c2                	add    edx,eax
c001a464:	66 ed                	in     ax,dx
c001a466:	c3                   	ret    
c001a467:	83 e2 f0             	and    edx,0xfffffff0
c001a46a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a46e:	c3                   	ret    
c001a46f:	90                   	nop

c001a470 <PCI::readBAR32(unsigned int, int)>:
c001a470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a478:	f6 c2 01             	test   dl,0x1
c001a47b:	74 07                	je     c001a484 <PCI::readBAR32(unsigned int, int)+0x14>
c001a47d:	83 e2 fc             	and    edx,0xfffffffc
c001a480:	01 c2                	add    edx,eax
c001a482:	ed                   	in     eax,dx
c001a483:	c3                   	ret    
c001a484:	83 e2 f0             	and    edx,0xfffffff0
c001a487:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a48a:	c3                   	ret    
c001a48b:	90                   	nop

c001a48c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a48c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a494:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a498:	f6 c2 01             	test   dl,0x1
c001a49b:	74 07                	je     c001a4a4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a49d:	83 e2 fc             	and    edx,0xfffffffc
c001a4a0:	01 ca                	add    edx,ecx
c001a4a2:	ee                   	out    dx,al
c001a4a3:	c3                   	ret    
c001a4a4:	83 e2 f0             	and    edx,0xfffffff0
c001a4a7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a4aa:	c3                   	ret    
c001a4ab:	90                   	nop

c001a4ac <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a4ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4b8:	f6 c2 01             	test   dl,0x1
c001a4bb:	74 08                	je     c001a4c5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a4bd:	83 e2 fc             	and    edx,0xfffffffc
c001a4c0:	01 ca                	add    edx,ecx
c001a4c2:	66 ef                	out    dx,ax
c001a4c4:	c3                   	ret    
c001a4c5:	83 e2 f0             	and    edx,0xfffffff0
c001a4c8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a4cc:	c3                   	ret    
c001a4cd:	90                   	nop

c001a4ce <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a4ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4da:	f6 c2 01             	test   dl,0x1
c001a4dd:	74 07                	je     c001a4e6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a4df:	83 e2 fc             	and    edx,0xfffffffc
c001a4e2:	01 ca                	add    edx,ecx
c001a4e4:	ef                   	out    dx,eax
c001a4e5:	c3                   	ret    
c001a4e6:	83 e2 f0             	and    edx,0xfffffff0
c001a4e9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a4ec:	c3                   	ret    
c001a4ed:	90                   	nop

c001a4ee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a4ee:	55                   	push   ebp
c001a4ef:	57                   	push   edi
c001a4f0:	56                   	push   esi
c001a4f1:	53                   	push   ebx
c001a4f2:	83 ec 0c             	sub    esp,0xc
c001a4f5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a4fa:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a4fe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a502:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a506:	83 fe 07             	cmp    esi,0x7
c001a509:	76 10                	jbe    c001a51b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a50b:	83 ec 0c             	sub    esp,0xc
c001a50e:	68 1f 21 02 c0       	push   0xc002211f
c001a513:	e8 05 66 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	0f b6 db             	movzx  ebx,bl
c001a51e:	83 fb 0f             	cmp    ebx,0xf
c001a521:	76 10                	jbe    c001a533 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a523:	83 ec 0c             	sub    esp,0xc
c001a526:	68 4f 21 02 c0       	push   0xc002214f
c001a52b:	e8 ed 65 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a530:	83 c4 10             	add    esp,0x10
c001a533:	8d 04 36             	lea    eax,[esi+esi*1]
c001a536:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a53b:	83 c8 f0             	or     eax,0xfffffff0
c001a53e:	ee                   	out    dx,al
c001a53f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a544:	89 e8                	mov    eax,ebp
c001a546:	ee                   	out    dx,al
c001a547:	89 f9                	mov    ecx,edi
c001a549:	89 d8                	mov    eax,ebx
c001a54b:	0f b6 d9             	movzx  ebx,cl
c001a54e:	83 c4 0c             	add    esp,0xc
c001a551:	c1 e0 08             	shl    eax,0x8
c001a554:	83 e3 fc             	and    ebx,0xfffffffc
c001a557:	09 d8                	or     eax,ebx
c001a559:	5b                   	pop    ebx
c001a55a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a55f:	5e                   	pop    esi
c001a560:	5f                   	pop    edi
c001a561:	5d                   	pop    ebp
c001a562:	c3                   	ret    
c001a563:	90                   	nop

c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a564:	57                   	push   edi
c001a565:	56                   	push   esi
c001a566:	53                   	push   ebx
c001a567:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a56b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a56f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a573:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a577:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a57d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a581:	83 ff 01             	cmp    edi,0x1
c001a584:	75 3f                	jne    c001a5c5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a586:	89 de                	mov    esi,ebx
c001a588:	0f b6 c0             	movzx  eax,al
c001a58b:	c1 e0 10             	shl    eax,0x10
c001a58e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a594:	0f b6 c9             	movzx  ecx,cl
c001a597:	09 f0                	or     eax,esi
c001a599:	c1 e1 08             	shl    ecx,0x8
c001a59c:	0f b6 d2             	movzx  edx,dl
c001a59f:	c1 e2 0b             	shl    edx,0xb
c001a5a2:	09 c8                	or     eax,ecx
c001a5a4:	09 d0                	or     eax,edx
c001a5a6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a5ab:	0d 00 00 00 80       	or     eax,0x80000000
c001a5b0:	ef                   	out    dx,eax
c001a5b1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a5b6:	ed                   	in     eax,dx
c001a5b7:	83 e3 02             	and    ebx,0x2
c001a5ba:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a5c1:	d3 e8                	shr    eax,cl
c001a5c3:	eb 44                	jmp    c001a609 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a5c5:	83 ff 02             	cmp    edi,0x2
c001a5c8:	75 2d                	jne    c001a5f7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a5ca:	83 ec 0c             	sub    esp,0xc
c001a5cd:	0f b6 fb             	movzx  edi,bl
c001a5d0:	57                   	push   edi
c001a5d1:	0f b6 c9             	movzx  ecx,cl
c001a5d4:	51                   	push   ecx
c001a5d5:	0f b6 d2             	movzx  edx,dl
c001a5d8:	52                   	push   edx
c001a5d9:	0f b6 c0             	movzx  eax,al
c001a5dc:	50                   	push   eax
c001a5dd:	56                   	push   esi
c001a5de:	e8 0b ff ff ff       	call   c001a4ee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a5e3:	89 c2                	mov    edx,eax
c001a5e5:	ed                   	in     eax,dx
c001a5e6:	83 e3 02             	and    ebx,0x2
c001a5e9:	83 c4 20             	add    esp,0x20
c001a5ec:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a5f3:	d3 e8                	shr    eax,cl
c001a5f5:	eb 12                	jmp    c001a609 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a5f7:	83 ec 0c             	sub    esp,0xc
c001a5fa:	68 7f 21 02 c0       	push   0xc002217f
c001a5ff:	e8 19 65 ff ff       	call   c0010b1d <KePanic(char const*)>
c001a604:	83 c4 10             	add    esp,0x10
c001a607:	31 c0                	xor    eax,eax
c001a609:	5b                   	pop    ebx
c001a60a:	5e                   	pop    esi
c001a60b:	5f                   	pop    edi
c001a60c:	c3                   	ret    
c001a60d:	90                   	nop

c001a60e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a60e:	83 ec 18             	sub    esp,0x18
c001a611:	6a 00                	push   0x0
c001a613:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a618:	50                   	push   eax
c001a619:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a61e:	50                   	push   eax
c001a61f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a624:	50                   	push   eax
c001a625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a629:	e8 36 ff ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a62e:	83 c4 2c             	add    esp,0x2c
c001a631:	c3                   	ret    

c001a632 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a632:	83 ec 18             	sub    esp,0x18
c001a635:	6a 0e                	push   0xe
c001a637:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a63c:	50                   	push   eax
c001a63d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a642:	50                   	push   eax
c001a643:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a648:	50                   	push   eax
c001a649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a64d:	e8 12 ff ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a652:	83 c4 2c             	add    esp,0x2c
c001a655:	0f b6 c0             	movzx  eax,al
c001a658:	c3                   	ret    
c001a659:	90                   	nop

c001a65a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a65a:	55                   	push   ebp
c001a65b:	57                   	push   edi
c001a65c:	56                   	push   esi
c001a65d:	53                   	push   ebx
c001a65e:	83 ec 18             	sub    esp,0x18
c001a661:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a666:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a66b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a670:	6a 0a                	push   0xa
c001a672:	56                   	push   esi
c001a673:	55                   	push   ebp
c001a674:	57                   	push   edi
c001a675:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a679:	e8 e6 fe ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a67e:	83 c4 14             	add    esp,0x14
c001a681:	6a 0a                	push   0xa
c001a683:	56                   	push   esi
c001a684:	55                   	push   ebp
c001a685:	57                   	push   edi
c001a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a68a:	89 c3                	mov    ebx,eax
c001a68c:	0f b6 db             	movzx  ebx,bl
c001a68f:	e8 d0 fe ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a694:	83 c4 2c             	add    esp,0x2c
c001a697:	25 00 ff 00 00       	and    eax,0xff00
c001a69c:	09 d8                	or     eax,ebx
c001a69e:	5b                   	pop    ebx
c001a69f:	5e                   	pop    esi
c001a6a0:	5f                   	pop    edi
c001a6a1:	5d                   	pop    ebp
c001a6a2:	c3                   	ret    
c001a6a3:	90                   	nop

c001a6a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a6a4:	83 ec 18             	sub    esp,0x18
c001a6a7:	6a 08                	push   0x8
c001a6a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6ae:	50                   	push   eax
c001a6af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6b4:	50                   	push   eax
c001a6b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6ba:	50                   	push   eax
c001a6bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6bf:	e8 a0 fe ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6c4:	83 c4 2c             	add    esp,0x2c
c001a6c7:	0f b6 c4             	movzx  eax,ah
c001a6ca:	c3                   	ret    
c001a6cb:	90                   	nop

c001a6cc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a6cc:	83 ec 18             	sub    esp,0x18
c001a6cf:	6a 08                	push   0x8
c001a6d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6d6:	50                   	push   eax
c001a6d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6dc:	50                   	push   eax
c001a6dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6e2:	50                   	push   eax
c001a6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6e7:	e8 78 fe ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6ec:	83 c4 2c             	add    esp,0x2c
c001a6ef:	c3                   	ret    

c001a6f0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a6f0:	83 ec 18             	sub    esp,0x18
c001a6f3:	6a 3c                	push   0x3c
c001a6f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6fa:	50                   	push   eax
c001a6fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a700:	50                   	push   eax
c001a701:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a706:	50                   	push   eax
c001a707:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a70b:	e8 54 fe ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a710:	83 c4 2c             	add    esp,0x2c
c001a713:	c3                   	ret    

c001a714 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a714:	83 ec 18             	sub    esp,0x18
c001a717:	6a 18                	push   0x18
c001a719:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a71e:	50                   	push   eax
c001a71f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a724:	50                   	push   eax
c001a725:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a72a:	50                   	push   eax
c001a72b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a72f:	e8 30 fe ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a734:	83 c4 2c             	add    esp,0x2c
c001a737:	0f b6 c4             	movzx  eax,ah
c001a73a:	c3                   	ret    
c001a73b:	90                   	nop

c001a73c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a73c:	55                   	push   ebp
c001a73d:	57                   	push   edi
c001a73e:	56                   	push   esi
c001a73f:	53                   	push   ebx
c001a740:	83 ec 28             	sub    esp,0x28
c001a743:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a747:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a74c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a751:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a756:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a75d:	8d 43 12             	lea    eax,[ebx+0x12]
c001a760:	83 c3 10             	add    ebx,0x10
c001a763:	0f b6 c0             	movzx  eax,al
c001a766:	0f b6 db             	movzx  ebx,bl
c001a769:	50                   	push   eax
c001a76a:	51                   	push   ecx
c001a76b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a76f:	57                   	push   edi
c001a770:	55                   	push   ebp
c001a771:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a775:	e8 ea fd ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a77a:	83 c4 14             	add    esp,0x14
c001a77d:	53                   	push   ebx
c001a77e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a782:	51                   	push   ecx
c001a783:	89 c6                	mov    esi,eax
c001a785:	57                   	push   edi
c001a786:	55                   	push   ebp
c001a787:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a78b:	c1 e6 10             	shl    esi,0x10
c001a78e:	e8 d1 fd ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a793:	83 c4 3c             	add    esp,0x3c
c001a796:	5b                   	pop    ebx
c001a797:	0f b7 c0             	movzx  eax,ax
c001a79a:	09 f0                	or     eax,esi
c001a79c:	5e                   	pop    esi
c001a79d:	5f                   	pop    edi
c001a79e:	5d                   	pop    ebp
c001a79f:	c3                   	ret    

c001a7a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a7a0:	55                   	push   ebp
c001a7a1:	57                   	push   edi
c001a7a2:	56                   	push   esi
c001a7a3:	53                   	push   ebx
c001a7a4:	83 ec 0c             	sub    esp,0xc
c001a7a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a7ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a7b3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a7b7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a7bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a7c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7c5:	83 f9 01             	cmp    ecx,0x1
c001a7c8:	75 5d                	jne    c001a827 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a7ca:	0f b6 c8             	movzx  ecx,al
c001a7cd:	89 f0                	mov    eax,esi
c001a7cf:	25 fc 00 00 00       	and    eax,0xfc
c001a7d4:	0f b6 d2             	movzx  edx,dl
c001a7d7:	c1 e1 10             	shl    ecx,0x10
c001a7da:	c1 e2 0b             	shl    edx,0xb
c001a7dd:	09 c1                	or     ecx,eax
c001a7df:	89 f8                	mov    eax,edi
c001a7e1:	0f b6 f8             	movzx  edi,al
c001a7e4:	c1 e7 08             	shl    edi,0x8
c001a7e7:	09 f9                	or     ecx,edi
c001a7e9:	09 d1                	or     ecx,edx
c001a7eb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a7f0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a7f6:	89 c8                	mov    eax,ecx
c001a7f8:	ef                   	out    dx,eax
c001a7f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a7fe:	ed                   	in     eax,dx
c001a7ff:	83 e6 02             	and    esi,0x2
c001a802:	0f b7 db             	movzx  ebx,bx
c001a805:	74 0a                	je     c001a811 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a807:	c1 e3 10             	shl    ebx,0x10
c001a80a:	0f b7 d0             	movzx  edx,ax
c001a80d:	09 d3                	or     ebx,edx
c001a80f:	eb 05                	jmp    c001a816 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a811:	66 31 c0             	xor    ax,ax
c001a814:	09 c3                	or     ebx,eax
c001a816:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a81b:	89 c8                	mov    eax,ecx
c001a81d:	ef                   	out    dx,eax
c001a81e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a823:	89 d8                	mov    eax,ebx
c001a825:	eb 41                	jmp    c001a868 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a827:	83 f9 02             	cmp    ecx,0x2
c001a82a:	75 45                	jne    c001a871 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a82c:	89 f1                	mov    ecx,esi
c001a82e:	83 ec 0c             	sub    esp,0xc
c001a831:	0f b6 f1             	movzx  esi,cl
c001a834:	89 f9                	mov    ecx,edi
c001a836:	56                   	push   esi
c001a837:	0f b6 f9             	movzx  edi,cl
c001a83a:	57                   	push   edi
c001a83b:	0f b6 d2             	movzx  edx,dl
c001a83e:	52                   	push   edx
c001a83f:	0f b6 c0             	movzx  eax,al
c001a842:	50                   	push   eax
c001a843:	55                   	push   ebp
c001a844:	e8 a5 fc ff ff       	call   c001a4ee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a849:	89 c2                	mov    edx,eax
c001a84b:	ed                   	in     eax,dx
c001a84c:	83 c4 20             	add    esp,0x20
c001a84f:	f6 c2 02             	test   dl,0x2
c001a852:	0f b7 db             	movzx  ebx,bx
c001a855:	74 0c                	je     c001a863 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a857:	0f b7 c8             	movzx  ecx,ax
c001a85a:	89 d8                	mov    eax,ebx
c001a85c:	c1 e0 10             	shl    eax,0x10
c001a85f:	09 c8                	or     eax,ecx
c001a861:	eb 05                	jmp    c001a868 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a863:	66 31 c0             	xor    ax,ax
c001a866:	09 d8                	or     eax,ebx
c001a868:	ef                   	out    dx,eax
c001a869:	83 c4 0c             	add    esp,0xc
c001a86c:	5b                   	pop    ebx
c001a86d:	5e                   	pop    esi
c001a86e:	5f                   	pop    edi
c001a86f:	5d                   	pop    ebp
c001a870:	c3                   	ret    
c001a871:	c7 44 24 20 7f 21 02 c0 	mov    DWORD PTR [esp+0x20],0xc002217f
c001a879:	83 c4 0c             	add    esp,0xc
c001a87c:	5b                   	pop    ebx
c001a87d:	5e                   	pop    esi
c001a87e:	5f                   	pop    edi
c001a87f:	5d                   	pop    ebp
c001a880:	e9 98 62 ff ff       	jmp    c0010b1d <KePanic(char const*)>
c001a885:	90                   	nop

c001a886 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a886:	55                   	push   ebp
c001a887:	57                   	push   edi
c001a888:	56                   	push   esi
c001a889:	53                   	push   ebx
c001a88a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a890:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a897:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a89e:	0f 85 bd 00 00 00    	jne    c001a961 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a8a4:	83 ec 0c             	sub    esp,0xc
c001a8a7:	68 14 01 00 00       	push   0x114
c001a8ac:	e8 1a d2 fe ff       	call   c0007acb <malloc>
c001a8b1:	83 c4 0c             	add    esp,0xc
c001a8b4:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a8ba:	68 85 21 02 c0       	push   0xc0022185
c001a8bf:	50                   	push   eax
c001a8c0:	89 c3                	mov    ebx,eax
c001a8c2:	e8 b3 08 ff ff       	call   c000b17a <File::File(char const*, Process*)>
c001a8c7:	83 c4 10             	add    esp,0x10
c001a8ca:	85 db                	test   ebx,ebx
c001a8cc:	0f 84 6b 02 00 00    	je     c001ab3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a8d2:	57                   	push   edi
c001a8d3:	57                   	push   edi
c001a8d4:	6a 01                	push   0x1
c001a8d6:	53                   	push   ebx
c001a8d7:	e8 5a 09 ff ff       	call   c000b236 <File::open(FileOpenMode)>
c001a8dc:	83 c4 10             	add    esp,0x10
c001a8df:	85 c0                	test   eax,eax
c001a8e1:	0f 85 56 02 00 00    	jne    c001ab3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a8e7:	52                   	push   edx
c001a8e8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a8ec:	50                   	push   eax
c001a8ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a8f1:	50                   	push   eax
c001a8f2:	53                   	push   ebx
c001a8f3:	e8 ea 0b ff ff       	call   c000b4e2 <File::stat(unsigned long long*, bool*)>
c001a8f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a8fc:	40                   	inc    eax
c001a8fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a900:	e8 c6 d1 fe ff       	call   c0007acb <malloc>
c001a905:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a909:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a90d:	59                   	pop    ecx
c001a90e:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a913:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a915:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a919:	51                   	push   ecx
c001a91a:	50                   	push   eax
c001a91b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a91f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a923:	53                   	push   ebx
c001a924:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a927:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a92b:	83 c4 20             	add    esp,0x20
c001a92e:	89 c8                	mov    eax,ecx
c001a930:	99                   	cdq    
c001a931:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a935:	0f 85 02 02 00 00    	jne    c001ab3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a93b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a93f:	0f 85 f8 01 00 00    	jne    c001ab3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a945:	83 ec 0c             	sub    esp,0xc
c001a948:	53                   	push   ebx
c001a949:	e8 46 09 ff ff       	call   c000b294 <File::close()>
c001a94e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a95c:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a961:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a969:	31 c9                	xor    ecx,ecx
c001a96b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a972:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a978:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a97f:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a985:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a98a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a992:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a997:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a99f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9a3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a9ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a9af:	39 cd                	cmp    ebp,ecx
c001a9b1:	0f 8e 86 01 00 00    	jle    c001ab3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a9b7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a9ba:	d4 40                	aam    0x40
c001a9bc:	d5 39                	aad    0x39
c001a9be:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a9c2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a9c6:	d4 40                	aam    0x40
c001a9c8:	d5 39                	aad    0x39
c001a9ca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a9ce:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a9d2:	d4 40                	aam    0x40
c001a9d4:	d5 39                	aad    0x39
c001a9d6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a9da:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a9de:	d4 40                	aam    0x40
c001a9e0:	d5 39                	aad    0x39
c001a9e2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a9e6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a9ea:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a9ee:	3c 56                	cmp    al,0x56
c001a9f0:	74 47                	je     c001aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a9f2:	d4 40                	aam    0x40
c001a9f4:	d5 39                	aad    0x39
c001a9f6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a9f9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a9fd:	0f b6 db             	movzx  ebx,bl
c001aa00:	c1 e3 04             	shl    ebx,0x4
c001aa03:	d4 40                	aam    0x40
c001aa05:	d5 39                	aad    0x39
c001aa07:	83 e8 30             	sub    eax,0x30
c001aa0a:	0f b6 c0             	movzx  eax,al
c001aa0d:	09 c3                	or     ebx,eax
c001aa0f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001aa13:	c1 e3 04             	shl    ebx,0x4
c001aa16:	d4 40                	aam    0x40
c001aa18:	d5 39                	aad    0x39
c001aa1a:	83 e8 30             	sub    eax,0x30
c001aa1d:	0f b6 c0             	movzx  eax,al
c001aa20:	09 c3                	or     ebx,eax
c001aa22:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001aa26:	c1 e3 04             	shl    ebx,0x4
c001aa29:	d4 40                	aam    0x40
c001aa2b:	d5 39                	aad    0x39
c001aa2d:	83 e8 30             	sub    eax,0x30
c001aa30:	0f b6 c0             	movzx  eax,al
c001aa33:	09 c3                	or     ebx,eax
c001aa35:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001aa39:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001aa3d:	80 fb 58             	cmp    bl,0x58
c001aa40:	74 49                	je     c001aa8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001aa42:	88 d8                	mov    al,bl
c001aa44:	d4 40                	aam    0x40
c001aa46:	d5 39                	aad    0x39
c001aa48:	83 e8 30             	sub    eax,0x30
c001aa4b:	0f b6 f8             	movzx  edi,al
c001aa4e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001aa52:	c1 e7 04             	shl    edi,0x4
c001aa55:	d4 40                	aam    0x40
c001aa57:	d5 39                	aad    0x39
c001aa59:	83 e8 30             	sub    eax,0x30
c001aa5c:	0f b6 c0             	movzx  eax,al
c001aa5f:	09 c7                	or     edi,eax
c001aa61:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001aa65:	c1 e7 04             	shl    edi,0x4
c001aa68:	d4 40                	aam    0x40
c001aa6a:	d5 39                	aad    0x39
c001aa6c:	83 e8 30             	sub    eax,0x30
c001aa6f:	0f b6 c0             	movzx  eax,al
c001aa72:	09 c7                	or     edi,eax
c001aa74:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001aa78:	c1 e7 04             	shl    edi,0x4
c001aa7b:	d4 40                	aam    0x40
c001aa7d:	d5 39                	aad    0x39
c001aa7f:	83 e8 30             	sub    eax,0x30
c001aa82:	0f b6 c0             	movzx  eax,al
c001aa85:	09 c7                	or     edi,eax
c001aa87:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001aa8b:	8d 41 10             	lea    eax,[ecx+0x10]
c001aa8e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001aa92:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001aa96:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa9a:	83 f9 0a             	cmp    ecx,0xa
c001aa9d:	74 07                	je     c001aaa6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001aa9f:	47                   	inc    edi
c001aaa0:	39 c5                	cmp    ebp,eax
c001aaa2:	75 16                	jne    c001aaba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001aaa4:	89 e8                	mov    eax,ebp
c001aaa6:	83 f9 0a             	cmp    ecx,0xa
c001aaa9:	0f 94 c1             	sete   cl
c001aaac:	0f b6 c9             	movzx  ecx,cl
c001aaaf:	01 c1                	add    ecx,eax
c001aab1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001aab6:	75 0f                	jne    c001aac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001aab8:	eb 1c                	jmp    c001aad6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001aaba:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001aabd:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001aac1:	40                   	inc    eax
c001aac2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001aac5:	eb cb                	jmp    c001aa92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001aac7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aacb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001aad0:	0f 85 d9 fe ff ff    	jne    c001a9af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001aad6:	80 fb 58             	cmp    bl,0x58
c001aad9:	74 10                	je     c001aaeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001aadb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001aae0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001aae5:	0f 85 c4 fe ff ff    	jne    c001a9af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001aaeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aaf3:	83 e8 30             	sub    eax,0x30
c001aaf6:	c1 e0 04             	shl    eax,0x4
c001aaf9:	83 eb 30             	sub    ebx,0x30
c001aafc:	09 d8                	or     eax,ebx
c001aafe:	0f b6 c0             	movzx  eax,al
c001ab01:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ab05:	0f 85 a4 fe ff ff    	jne    c001a9af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ab0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ab13:	83 e8 30             	sub    eax,0x30
c001ab16:	c1 e0 04             	shl    eax,0x4
c001ab19:	83 eb 30             	sub    ebx,0x30
c001ab1c:	09 d8                	or     eax,ebx
c001ab1e:	0f b6 c0             	movzx  eax,al
c001ab21:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ab25:	0f 85 84 fe ff ff    	jne    c001a9af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001ab2b:	50                   	push   eax
c001ab2c:	50                   	push   eax
c001ab2d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ab31:	50                   	push   eax
c001ab32:	56                   	push   esi
c001ab33:	e8 18 5b fe ff       	call   c0000650 <strcpy>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	eb 05                	jmp    c001ab42 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001ab3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ab40:	31 f6                	xor    esi,esi
c001ab42:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ab48:	89 f0                	mov    eax,esi
c001ab4a:	5b                   	pop    ebx
c001ab4b:	5e                   	pop    esi
c001ab4c:	5f                   	pop    edi
c001ab4d:	5d                   	pop    ebp
c001ab4e:	c3                   	ret    
c001ab4f:	90                   	nop

c001ab50 <PCI::checkBus(unsigned char)>:
c001ab50:	56                   	push   esi
c001ab51:	53                   	push   ebx
c001ab52:	31 db                	xor    ebx,ebx
c001ab54:	51                   	push   ecx
c001ab55:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ab5a:	52                   	push   edx
c001ab5b:	53                   	push   ebx
c001ab5c:	43                   	inc    ebx
c001ab5d:	56                   	push   esi
c001ab5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab62:	e8 0f 03 00 00       	call   c001ae76 <PCI::checkDevice(unsigned char, unsigned char)>
c001ab67:	83 c4 10             	add    esp,0x10
c001ab6a:	83 fb 20             	cmp    ebx,0x20
c001ab6d:	75 eb                	jne    c001ab5a <PCI::checkBus(unsigned char)+0xa>
c001ab6f:	58                   	pop    eax
c001ab70:	5b                   	pop    ebx
c001ab71:	5e                   	pop    esi
c001ab72:	c3                   	ret    
c001ab73:	90                   	nop

c001ab74 <PCI::foundDevice(PCIDeviceInfo)>:
c001ab74:	55                   	push   ebp
c001ab75:	57                   	push   edi
c001ab76:	56                   	push   esi
c001ab77:	53                   	push   ebx
c001ab78:	83 ec 1c             	sub    esp,0x1c
c001ab7b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ab80:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ab84:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab89:	0f 84 63 01 00 00    	je     c001acf2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ab8f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ab94:	66 3d 06 04          	cmp    ax,0x406
c001ab98:	75 2c                	jne    c001abc6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ab9a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ab9f:	50                   	push   eax
c001aba0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001aba5:	50                   	push   eax
c001aba6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001abab:	50                   	push   eax
c001abac:	53                   	push   ebx
c001abad:	e8 62 fb ff ff       	call   c001a714 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001abb2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001abb6:	0f b6 c0             	movzx  eax,al
c001abb9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001abbd:	83 c4 2c             	add    esp,0x2c
c001abc0:	5b                   	pop    ebx
c001abc1:	5e                   	pop    esi
c001abc2:	5f                   	pop    edi
c001abc3:	5d                   	pop    ebp
c001abc4:	eb 8a                	jmp    c001ab50 <PCI::checkBus(unsigned char)>
c001abc6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001abcb:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001abd1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001abd5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001abd9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001abdd:	85 d2                	test   edx,edx
c001abdf:	74 34                	je     c001ac15 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001abe1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001abe4:	85 c9                	test   ecx,ecx
c001abe6:	74 29                	je     c001ac11 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001abe8:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001abee:	31 f5                	xor    ebp,esi
c001abf0:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001abf6:	75 19                	jne    c001ac11 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001abf8:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001abfe:	75 11                	jne    c001ac11 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001ac00:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ac07:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001ac0b:	0f 84 e1 00 00 00    	je     c001acf2 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ac11:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac13:	eb c8                	jmp    c001abdd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ac15:	3d 01 06 00 00       	cmp    eax,0x601
c001ac1a:	75 19                	jne    c001ac35 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	68 64 01 00 00       	push   0x164
c001ac24:	e8 a2 ce fe ff       	call   c0007acb <malloc>
c001ac29:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac2c:	89 c5                	mov    ebp,eax
c001ac2e:	e8 ab 0e 00 00       	call   c001bade <SATABus::SATABus()>
c001ac33:	eb 1e                	jmp    c001ac53 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001ac35:	3d 01 01 00 00       	cmp    eax,0x101
c001ac3a:	75 62                	jne    c001ac9e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ac3c:	83 ec 0c             	sub    esp,0xc
c001ac3f:	68 70 02 00 00       	push   0x270
c001ac44:	e8 82 ce fe ff       	call   c0007acb <malloc>
c001ac49:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac4c:	89 c5                	mov    ebp,eax
c001ac4e:	e8 f3 02 00 00       	call   c001af46 <IDE::IDE()>
c001ac53:	58                   	pop    eax
c001ac54:	5a                   	pop    edx
c001ac55:	55                   	push   ebp
c001ac56:	53                   	push   ebx
c001ac57:	e8 d8 13 ff ff       	call   c000c034 <Device::addChild(Device*)>
c001ac5c:	83 ec 1c             	sub    esp,0x1c
c001ac5f:	b9 09 00 00 00       	mov    ecx,0x9
c001ac64:	fc                   	cld    
c001ac65:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ac69:	89 e7                	mov    edi,esp
c001ac6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ac6d:	55                   	push   ebp
c001ac6e:	e8 07 13 ff ff       	call   c000bf7a <Device::preOpenPCI(PCIDeviceInfo)>
c001ac73:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac76:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ac7a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ac82:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ac8a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ac92:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ac95:	83 c4 4c             	add    esp,0x4c
c001ac98:	5b                   	pop    ebx
c001ac99:	5e                   	pop    esi
c001ac9a:	5f                   	pop    edi
c001ac9b:	5d                   	pop    ebp
c001ac9c:	ff e0                	jmp    eax
c001ac9e:	83 ec 0c             	sub    esp,0xc
c001aca1:	68 58 01 00 00       	push   0x158
c001aca6:	e8 20 ce fe ff       	call   c0007acb <malloc>
c001acab:	5a                   	pop    edx
c001acac:	59                   	pop    ecx
c001acad:	68 9e 21 02 c0       	push   0xc002219e
c001acb2:	50                   	push   eax
c001acb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001acb7:	e8 16 16 ff ff       	call   c000c2d2 <DriverlessDevice::DriverlessDevice(char const*)>
c001acbc:	5e                   	pop    esi
c001acbd:	5f                   	pop    edi
c001acbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acc2:	50                   	push   eax
c001acc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acc7:	53                   	push   ebx
c001acc8:	e8 67 13 ff ff       	call   c000c034 <Device::addChild(Device*)>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	b9 09 00 00 00       	mov    ecx,0x9
c001acd5:	fc                   	cld    
c001acd6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001acda:	89 fe                	mov    esi,edi
c001acdc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001acde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ace2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ace6:	83 c4 1c             	add    esp,0x1c
c001ace9:	5b                   	pop    ebx
c001acea:	5e                   	pop    esi
c001aceb:	5f                   	pop    edi
c001acec:	5d                   	pop    ebp
c001aced:	e9 88 12 ff ff       	jmp    c000bf7a <Device::preOpenPCI(PCIDeviceInfo)>
c001acf2:	83 c4 1c             	add    esp,0x1c
c001acf5:	5b                   	pop    ebx
c001acf6:	5e                   	pop    esi
c001acf7:	5f                   	pop    edi
c001acf8:	5d                   	pop    ebp
c001acf9:	c3                   	ret    

c001acfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001acfa:	55                   	push   ebp
c001acfb:	57                   	push   edi
c001acfc:	56                   	push   esi
c001acfd:	53                   	push   ebx
c001acfe:	83 ec 68             	sub    esp,0x68
c001ad01:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad08:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ad0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad10:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad17:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ad1c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ad20:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad27:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ad2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ad30:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ad35:	6a 0c                	push   0xc
c001ad37:	57                   	push   edi
c001ad38:	53                   	push   ebx
c001ad39:	56                   	push   esi
c001ad3a:	55                   	push   ebp
c001ad3b:	e8 24 f8 ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad40:	83 c4 20             	add    esp,0x20
c001ad43:	57                   	push   edi
c001ad44:	53                   	push   ebx
c001ad45:	56                   	push   esi
c001ad46:	55                   	push   ebp
c001ad47:	e8 0e f9 ff ff       	call   c001a65a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ad4c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ad51:	57                   	push   edi
c001ad52:	53                   	push   ebx
c001ad53:	56                   	push   esi
c001ad54:	55                   	push   ebp
c001ad55:	e8 96 f9 ff ff       	call   c001a6f0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ad5a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ad5e:	83 c4 14             	add    esp,0x14
c001ad61:	6a 3c                	push   0x3c
c001ad63:	57                   	push   edi
c001ad64:	53                   	push   ebx
c001ad65:	56                   	push   esi
c001ad66:	55                   	push   ebp
c001ad67:	e8 f8 f7 ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad6c:	0f b6 c4             	movzx  eax,ah
c001ad6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad73:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ad77:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ad7b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001ad80:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001ad86:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ad8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ad90:	83 c4 20             	add    esp,0x20
c001ad93:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ad98:	74 30                	je     c001adca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ad9a:	31 c0                	xor    eax,eax
c001ad9c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ada0:	7e 28                	jle    c001adca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ada2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001adaa:	39 cb                	cmp    ebx,ecx
c001adac:	75 19                	jne    c001adc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001adae:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001adb6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001adba:	75 0b                	jne    c001adc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001adbc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001adc3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001adc7:	40                   	inc    eax
c001adc8:	eb d2                	jmp    c001ad9c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001adca:	31 d2                	xor    edx,edx
c001adcc:	83 ec 0c             	sub    esp,0xc
c001adcf:	57                   	push   edi
c001add0:	53                   	push   ebx
c001add1:	56                   	push   esi
c001add2:	52                   	push   edx
c001add3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001add7:	55                   	push   ebp
c001add8:	e8 5f f9 ff ff       	call   c001a73c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001addd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ade1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ade5:	42                   	inc    edx
c001ade6:	83 c4 20             	add    esp,0x20
c001ade9:	83 fa 06             	cmp    edx,0x6
c001adec:	75 de                	jne    c001adcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001adee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adf2:	83 ec 0c             	sub    esp,0xc
c001adf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf9:	c1 e2 08             	shl    edx,0x8
c001adfc:	0f b6 c4             	movzx  eax,ah
c001adff:	09 d0                	or     eax,edx
c001ae01:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ae06:	6a 02                	push   0x2
c001ae08:	57                   	push   edi
c001ae09:	53                   	push   ebx
c001ae0a:	56                   	push   esi
c001ae0b:	55                   	push   ebp
c001ae0c:	e8 53 f7 ff ff       	call   c001a564 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae11:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ae16:	83 c4 20             	add    esp,0x20
c001ae19:	57                   	push   edi
c001ae1a:	53                   	push   ebx
c001ae1b:	56                   	push   esi
c001ae1c:	55                   	push   ebp
c001ae1d:	e8 82 f8 ff ff       	call   c001a6a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ae22:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ae26:	57                   	push   edi
c001ae27:	53                   	push   ebx
c001ae28:	56                   	push   esi
c001ae29:	55                   	push   ebp
c001ae2a:	e8 df f7 ff ff       	call   c001a60e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ae2f:	b9 09 00 00 00       	mov    ecx,0x9
c001ae34:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ae39:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ae3d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ae41:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ae45:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ae49:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ae4d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ae51:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ae55:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ae59:	83 ec 0c             	sub    esp,0xc
c001ae5c:	fc                   	cld    
c001ae5d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ae61:	89 e7                	mov    edi,esp
c001ae63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae65:	55                   	push   ebp
c001ae66:	e8 09 fd ff ff       	call   c001ab74 <PCI::foundDevice(PCIDeviceInfo)>
c001ae6b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ae71:	5b                   	pop    ebx
c001ae72:	5e                   	pop    esi
c001ae73:	5f                   	pop    edi
c001ae74:	5d                   	pop    ebp
c001ae75:	c3                   	ret    

c001ae76 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ae76:	55                   	push   ebp
c001ae77:	57                   	push   edi
c001ae78:	56                   	push   esi
c001ae79:	53                   	push   ebx
c001ae7a:	83 ec 0c             	sub    esp,0xc
c001ae7d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ae82:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ae87:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ae8b:	6a 00                	push   0x0
c001ae8d:	56                   	push   esi
c001ae8e:	57                   	push   edi
c001ae8f:	55                   	push   ebp
c001ae90:	e8 79 f7 ff ff       	call   c001a60e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ae95:	6a 00                	push   0x0
c001ae97:	56                   	push   esi
c001ae98:	57                   	push   edi
c001ae99:	55                   	push   ebp
c001ae9a:	e8 5b fe ff ff       	call   c001acfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ae9f:	83 c4 20             	add    esp,0x20
c001aea2:	6a 00                	push   0x0
c001aea4:	56                   	push   esi
c001aea5:	57                   	push   edi
c001aea6:	55                   	push   ebp
c001aea7:	e8 86 f7 ff ff       	call   c001a632 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aeac:	83 c4 10             	add    esp,0x10
c001aeaf:	a8 80                	test   al,0x80
c001aeb1:	74 2d                	je     c001aee0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aeb3:	bb 01 00 00 00       	mov    ebx,0x1
c001aeb8:	53                   	push   ebx
c001aeb9:	56                   	push   esi
c001aeba:	57                   	push   edi
c001aebb:	55                   	push   ebp
c001aebc:	e8 4d f7 ff ff       	call   c001a60e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aec1:	83 c4 10             	add    esp,0x10
c001aec4:	0f b7 c0             	movzx  eax,ax
c001aec7:	3d ff ff 00 00       	cmp    eax,0xffff
c001aecc:	74 0c                	je     c001aeda <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001aece:	53                   	push   ebx
c001aecf:	56                   	push   esi
c001aed0:	57                   	push   edi
c001aed1:	55                   	push   ebp
c001aed2:	e8 23 fe ff ff       	call   c001acfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aed7:	83 c4 10             	add    esp,0x10
c001aeda:	43                   	inc    ebx
c001aedb:	83 fb 08             	cmp    ebx,0x8
c001aede:	75 d8                	jne    c001aeb8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001aee0:	83 c4 0c             	add    esp,0xc
c001aee3:	5b                   	pop    ebx
c001aee4:	5e                   	pop    esi
c001aee5:	5f                   	pop    edi
c001aee6:	5d                   	pop    ebp
c001aee7:	c3                   	ret    

c001aee8 <PCI::detect()>:
c001aee8:	56                   	push   esi
c001aee9:	53                   	push   ebx
c001aeea:	53                   	push   ebx
c001aeeb:	31 db                	xor    ebx,ebx
c001aeed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aef1:	6a 00                	push   0x0
c001aef3:	6a 00                	push   0x0
c001aef5:	6a 00                	push   0x0
c001aef7:	56                   	push   esi
c001aef8:	e8 35 f7 ff ff       	call   c001a632 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	a8 80                	test   al,0x80
c001af02:	75 21                	jne    c001af25 <PCI::detect()+0x3d>
c001af04:	51                   	push   ecx
c001af05:	51                   	push   ecx
c001af06:	6a 00                	push   0x0
c001af08:	56                   	push   esi
c001af09:	e8 42 fc ff ff       	call   c001ab50 <PCI::checkBus(unsigned char)>
c001af0e:	83 c4 10             	add    esp,0x10
c001af11:	eb 2a                	jmp    c001af3d <PCI::detect()+0x55>
c001af13:	52                   	push   edx
c001af14:	52                   	push   edx
c001af15:	53                   	push   ebx
c001af16:	43                   	inc    ebx
c001af17:	56                   	push   esi
c001af18:	e8 33 fc ff ff       	call   c001ab50 <PCI::checkBus(unsigned char)>
c001af1d:	83 c4 10             	add    esp,0x10
c001af20:	83 fb 08             	cmp    ebx,0x8
c001af23:	74 18                	je     c001af3d <PCI::detect()+0x55>
c001af25:	53                   	push   ebx
c001af26:	6a 00                	push   0x0
c001af28:	6a 00                	push   0x0
c001af2a:	56                   	push   esi
c001af2b:	e8 de f6 ff ff       	call   c001a60e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	0f b7 c0             	movzx  eax,ax
c001af36:	3d ff ff 00 00       	cmp    eax,0xffff
c001af3b:	74 d6                	je     c001af13 <PCI::detect()+0x2b>
c001af3d:	58                   	pop    eax
c001af3e:	5b                   	pop    ebx
c001af3f:	5e                   	pop    esi
c001af40:	c3                   	ret    
c001af41:	90                   	nop

c001af42 <IDE::close(int, int, void*)>:
c001af42:	83 c8 ff             	or     eax,0xffffffff
c001af45:	c3                   	ret    

c001af46 <IDE::IDE()>:
c001af46:	83 ec 0c             	sub    esp,0xc
c001af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4d:	83 ec 08             	sub    esp,0x8
c001af50:	68 e4 21 02 c0       	push   0xc00221e4
c001af55:	50                   	push   eax
c001af56:	e8 1d 14 ff ff       	call   c000c378 <HardDiskController::HardDiskController(char const*)>
c001af5b:	83 c4 10             	add    esp,0x10
c001af5e:	ba 74 22 02 c0       	mov    edx,0xc0022274
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	89 10                	mov    DWORD PTR [eax],edx
c001af69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001af74:	90                   	nop
c001af75:	83 c4 0c             	add    esp,0xc
c001af78:	c3                   	ret    
c001af79:	90                   	nop

c001af7a <IDE::prepareInterrupt(unsigned char)>:
c001af7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001af83:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001af8b:	c3                   	ret    

c001af8c <selectDrive(unsigned char, unsigned char)>:
c001af8c:	c3                   	ret    
c001af8d:	90                   	nop

c001af8e <IDE::getBase(unsigned char)>:
c001af8e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001af93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af97:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001af9f:	c3                   	ret    

c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001afa0:	55                   	push   ebp
c001afa1:	57                   	push   edi
c001afa2:	56                   	push   esi
c001afa3:	53                   	push   ebx
c001afa4:	83 ec 1c             	sub    esp,0x1c
c001afa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001afab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001afaf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001afb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001afb7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001afba:	80 f9 03             	cmp    cl,0x3
c001afbd:	77 4f                	ja     c001b00e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001afbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afc3:	0f b6 f2             	movzx  esi,dl
c001afc6:	0f b6 db             	movzx  ebx,bl
c001afc9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001afcc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001afd1:	80 ca 80             	or     dl,0x80
c001afd4:	52                   	push   edx
c001afd5:	6a 0c                	push   0xc
c001afd7:	56                   	push   esi
c001afd8:	57                   	push   edi
c001afd9:	e8 c2 ff ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001afde:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001afe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afe7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001afeb:	ee                   	out    dx,al
c001afec:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001aff1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001aff5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001aff9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b001:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b005:	83 c4 2c             	add    esp,0x2c
c001b008:	5b                   	pop    ebx
c001b009:	5e                   	pop    esi
c001b00a:	5f                   	pop    edi
c001b00b:	5d                   	pop    ebp
c001b00c:	eb 92                	jmp    c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b00e:	0f b6 cb             	movzx  ecx,bl
c001b011:	83 f9 07             	cmp    ecx,0x7
c001b014:	77 12                	ja     c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b016:	0f b6 d2             	movzx  edx,dl
c001b019:	0f b6 db             	movzx  ebx,bl
c001b01c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b024:	01 da                	add    edx,ebx
c001b026:	eb 2f                	jmp    c001b057 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b028:	83 f9 0d             	cmp    ecx,0xd
c001b02b:	77 13                	ja     c001b040 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b02d:	0f b6 d2             	movzx  edx,dl
c001b030:	0f b6 db             	movzx  ebx,bl
c001b033:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b03a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b03e:	eb 17                	jmp    c001b057 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b040:	83 f9 15             	cmp    ecx,0x15
c001b043:	77 13                	ja     c001b058 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b045:	0f b6 d2             	movzx  edx,dl
c001b048:	0f b6 db             	movzx  ebx,bl
c001b04b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b053:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b057:	ee                   	out    dx,al
c001b058:	83 c4 1c             	add    esp,0x1c
c001b05b:	5b                   	pop    ebx
c001b05c:	5e                   	pop    esi
c001b05d:	5f                   	pop    edi
c001b05e:	5d                   	pop    ebp
c001b05f:	c3                   	ret    

c001b060 <IDE::read(unsigned char, unsigned char)>:
c001b060:	57                   	push   edi
c001b061:	56                   	push   esi
c001b062:	53                   	push   ebx
c001b063:	83 ec 10             	sub    esp,0x10
c001b066:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b06a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b06e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b072:	8d 42 f8             	lea    eax,[edx-0x8]
c001b075:	3c 03                	cmp    al,0x3
c001b077:	77 48                	ja     c001b0c1 <IDE::read(unsigned char, unsigned char)+0x61>
c001b079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b07d:	0f b6 f1             	movzx  esi,cl
c001b080:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b083:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b088:	0c 80                	or     al,0x80
c001b08a:	50                   	push   eax
c001b08b:	6a 0c                	push   0xc
c001b08d:	56                   	push   esi
c001b08e:	53                   	push   ebx
c001b08f:	e8 0c ff ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b098:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b09d:	0f b6 d2             	movzx  edx,dl
c001b0a0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b0a4:	ec                   	in     al,dx
c001b0a5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b0a9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b0ae:	52                   	push   edx
c001b0af:	6a 0c                	push   0xc
c001b0b1:	56                   	push   esi
c001b0b2:	53                   	push   ebx
c001b0b3:	e8 e8 fe ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0b8:	83 c4 20             	add    esp,0x20
c001b0bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b0bf:	eb 4c                	jmp    c001b10d <IDE::read(unsigned char, unsigned char)+0xad>
c001b0c1:	0f b6 f2             	movzx  esi,dl
c001b0c4:	83 fe 07             	cmp    esi,0x7
c001b0c7:	77 12                	ja     c001b0db <IDE::read(unsigned char, unsigned char)+0x7b>
c001b0c9:	0f b6 c9             	movzx  ecx,cl
c001b0cc:	0f b6 d2             	movzx  edx,dl
c001b0cf:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b0d7:	01 c2                	add    edx,eax
c001b0d9:	eb 31                	jmp    c001b10c <IDE::read(unsigned char, unsigned char)+0xac>
c001b0db:	83 fe 0d             	cmp    esi,0xd
c001b0de:	77 13                	ja     c001b0f3 <IDE::read(unsigned char, unsigned char)+0x93>
c001b0e0:	0f b6 c9             	movzx  ecx,cl
c001b0e3:	0f b6 d2             	movzx  edx,dl
c001b0e6:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b0ed:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b0f1:	eb 19                	jmp    c001b10c <IDE::read(unsigned char, unsigned char)+0xac>
c001b0f3:	31 c0                	xor    eax,eax
c001b0f5:	83 fe 15             	cmp    esi,0x15
c001b0f8:	77 13                	ja     c001b10d <IDE::read(unsigned char, unsigned char)+0xad>
c001b0fa:	0f b6 c9             	movzx  ecx,cl
c001b0fd:	0f b6 d2             	movzx  edx,dl
c001b100:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b108:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b10c:	ec                   	in     al,dx
c001b10d:	83 c4 10             	add    esp,0x10
c001b110:	5b                   	pop    ebx
c001b111:	5e                   	pop    esi
c001b112:	5f                   	pop    edi
c001b113:	c3                   	ret    

c001b114 <IDE::waitInterrupt(unsigned char)>:
c001b114:	55                   	push   ebp
c001b115:	57                   	push   edi
c001b116:	56                   	push   esi
c001b117:	53                   	push   ebx
c001b118:	31 db                	xor    ebx,ebx
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b121:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b126:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b12e:	89 e8                	mov    eax,ebp
c001b130:	84 c0                	test   al,al
c001b132:	75 30                	jne    c001b164 <IDE::waitInterrupt(unsigned char)+0x50>
c001b134:	50                   	push   eax
c001b135:	6a 0c                	push   0xc
c001b137:	56                   	push   esi
c001b138:	57                   	push   edi
c001b139:	e8 22 ff ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	a8 01                	test   al,0x1
c001b143:	75 27                	jne    c001b16c <IDE::waitInterrupt(unsigned char)+0x58>
c001b145:	f6 c3 04             	test   bl,0x4
c001b148:	75 12                	jne    c001b15c <IDE::waitInterrupt(unsigned char)+0x48>
c001b14a:	83 fb 32             	cmp    ebx,0x32
c001b14d:	7e 0d                	jle    c001b15c <IDE::waitInterrupt(unsigned char)+0x48>
c001b14f:	83 ec 0c             	sub    esp,0xc
c001b152:	6a 64                	push   0x64
c001b154:	e8 e7 a4 ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	83 fb 3c             	cmp    ebx,0x3c
c001b15f:	74 0b                	je     c001b16c <IDE::waitInterrupt(unsigned char)+0x58>
c001b161:	43                   	inc    ebx
c001b162:	eb c2                	jmp    c001b126 <IDE::waitInterrupt(unsigned char)+0x12>
c001b164:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b16c:	83 c4 0c             	add    esp,0xc
c001b16f:	89 e8                	mov    eax,ebp
c001b171:	5b                   	pop    ebx
c001b172:	5e                   	pop    esi
c001b173:	5f                   	pop    edi
c001b174:	5d                   	pop    ebp
c001b175:	c3                   	ret    

c001b176 <ideChannel0IRQHandler(regs*, void*)>:
c001b176:	83 ec 10             	sub    esp,0x10
c001b179:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b17d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b184:	6a 07                	push   0x7
c001b186:	6a 00                	push   0x0
c001b188:	50                   	push   eax
c001b189:	e8 d2 fe ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b18e:	83 c4 1c             	add    esp,0x1c
c001b191:	c3                   	ret    

c001b192 <ideChannel1IRQHandler(regs*, void*)>:
c001b192:	83 ec 10             	sub    esp,0x10
c001b195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b199:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b1a0:	6a 07                	push   0x7
c001b1a2:	6a 01                	push   0x1
c001b1a4:	50                   	push   eax
c001b1a5:	e8 b6 fe ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b1aa:	83 c4 1c             	add    esp,0x1c
c001b1ad:	c3                   	ret    

c001b1ae <IDE::enableIRQs(unsigned char, bool)>:
c001b1ae:	57                   	push   edi
c001b1af:	b8 02 00 00 00       	mov    eax,0x2
c001b1b4:	56                   	push   esi
c001b1b5:	53                   	push   ebx
c001b1b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b1bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b1c3:	74 02                	je     c001b1c7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b1c5:	31 c0                	xor    eax,eax
c001b1c7:	0f b6 db             	movzx  ebx,bl
c001b1ca:	bf 04 00 00 00       	mov    edi,0x4
c001b1cf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b1d6:	50                   	push   eax
c001b1d7:	6a 0c                	push   0xc
c001b1d9:	53                   	push   ebx
c001b1da:	56                   	push   esi
c001b1db:	e8 c0 fd ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	50                   	push   eax
c001b1e4:	6a 0c                	push   0xc
c001b1e6:	53                   	push   ebx
c001b1e7:	56                   	push   esi
c001b1e8:	e8 73 fe ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	4f                   	dec    edi
c001b1f1:	75 f0                	jne    c001b1e3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b1f3:	5b                   	pop    ebx
c001b1f4:	5e                   	pop    esi
c001b1f5:	5f                   	pop    edi
c001b1f6:	c3                   	ret    
c001b1f7:	90                   	nop

c001b1f8 <IDE::open(int, int, void*)>:
c001b1f8:	55                   	push   ebp
c001b1f9:	57                   	push   edi
c001b1fa:	56                   	push   esi
c001b1fb:	53                   	push   ebx
c001b1fc:	83 ec 1c             	sub    esp,0x1c
c001b1ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b203:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b20a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b213:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b21c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b223:	0f 85 da 02 00 00    	jne    c001b503 <IDE::open(int, int, void*)+0x30b>
c001b229:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b22f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001b233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b237:	83 e0 7f             	and    eax,0x7f
c001b23a:	83 f8 05             	cmp    eax,0x5
c001b23d:	74 05                	je     c001b244 <IDE::open(int, int, void*)+0x4c>
c001b23f:	83 f8 0f             	cmp    eax,0xf
c001b242:	75 32                	jne    c001b276 <IDE::open(int, int, void*)+0x7e>
c001b244:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b24a:	83 e0 fc             	and    eax,0xfffffffc
c001b24d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b254:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b25a:	83 e0 fc             	and    eax,0xfffffffc
c001b25d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b264:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b26a:	83 e0 fc             	and    eax,0xfffffffc
c001b26d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b274:	eb 14                	jmp    c001b28a <IDE::open(int, int, void*)+0x92>
c001b276:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b280:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b28a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001b291:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b296:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b29d:	89 fa                	mov    edx,edi
c001b29f:	89 f1                	mov    ecx,esi
c001b2a1:	c1 e1 10             	shl    ecx,0x10
c001b2a4:	89 e8                	mov    eax,ebp
c001b2a6:	c1 e0 0b             	shl    eax,0xb
c001b2a9:	09 c1                	or     ecx,eax
c001b2ab:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b2b2:	c1 e0 08             	shl    eax,0x8
c001b2b5:	09 c1                	or     ecx,eax
c001b2b7:	89 c8                	mov    eax,ecx
c001b2b9:	0d 08 00 00 80       	or     eax,0x80000008
c001b2be:	ef                   	out    dx,eax
c001b2bf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2c4:	ed                   	in     eax,dx
c001b2c5:	c1 e8 10             	shr    eax,0x10
c001b2c8:	3d ff ff 00 00       	cmp    eax,0xffff
c001b2cd:	0f 84 f9 00 00 00    	je     c001b3cc <IDE::open(int, int, void*)+0x1d4>
c001b2d3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b2d9:	89 fa                	mov    edx,edi
c001b2db:	89 c8                	mov    eax,ecx
c001b2dd:	ef                   	out    dx,eax
c001b2de:	b0 fe                	mov    al,0xfe
c001b2e0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2e5:	ee                   	out    dx,al
c001b2e6:	89 c8                	mov    eax,ecx
c001b2e8:	89 fa                	mov    edx,edi
c001b2ea:	ef                   	out    dx,eax
c001b2eb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2f0:	ed                   	in     eax,dx
c001b2f1:	3c fe                	cmp    al,0xfe
c001b2f3:	0f 85 a4 00 00 00    	jne    c001b39d <IDE::open(int, int, void*)+0x1a5>
c001b2f9:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b2ff:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b306:	74 30                	je     c001b338 <IDE::open(int, int, void*)+0x140>
c001b308:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b30e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b312:	83 ec 0c             	sub    esp,0xc
c001b315:	40                   	inc    eax
c001b316:	0f b6 c0             	movzx  eax,al
c001b319:	50                   	push   eax
c001b31a:	55                   	push   ebp
c001b31b:	56                   	push   esi
c001b31c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b322:	51                   	push   ecx
c001b323:	e8 a8 3c ff ff       	call   c000efd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b328:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b32d:	83 c4 1c             	add    esp,0x1c
c001b330:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b336:	eb 0a                	jmp    c001b342 <IDE::open(int, int, void*)+0x14a>
c001b338:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b342:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b349:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001b34e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b355:	89 ea                	mov    edx,ebp
c001b357:	c1 e1 10             	shl    ecx,0x10
c001b35a:	c1 e0 08             	shl    eax,0x8
c001b35d:	09 c1                	or     ecx,eax
c001b35f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b366:	c1 e0 0b             	shl    eax,0xb
c001b369:	09 c1                	or     ecx,eax
c001b36b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b371:	89 c8                	mov    eax,ecx
c001b373:	ef                   	out    dx,eax
c001b374:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001b37a:	be fc 0c 00 00       	mov    esi,0xcfc
c001b37f:	89 f2                	mov    edx,esi
c001b381:	89 f8                	mov    eax,edi
c001b383:	ee                   	out    dx,al
c001b384:	89 c8                	mov    eax,ecx
c001b386:	89 ea                	mov    edx,ebp
c001b388:	ef                   	out    dx,eax
c001b389:	89 f2                	mov    edx,esi
c001b38b:	ed                   	in     eax,dx
c001b38c:	0f b6 c0             	movzx  eax,al
c001b38f:	39 f8                	cmp    eax,edi
c001b391:	74 49                	je     c001b3dc <IDE::open(int, int, void*)+0x1e4>
c001b393:	83 ec 0c             	sub    esp,0xc
c001b396:	68 fc 21 02 c0       	push   0xc00221fc
c001b39b:	eb 37                	jmp    c001b3d4 <IDE::open(int, int, void*)+0x1dc>
c001b39d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b3a6:	75 1a                	jne    c001b3c2 <IDE::open(int, int, void*)+0x1ca>
c001b3a8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b3ad:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b3b2:	74 05                	je     c001b3b9 <IDE::open(int, int, void*)+0x1c1>
c001b3b4:	83 c0 80             	add    eax,0xffffff80
c001b3b7:	75 09                	jne    c001b3c2 <IDE::open(int, int, void*)+0x1ca>
c001b3b9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b3c0:	eb 1a                	jmp    c001b3dc <IDE::open(int, int, void*)+0x1e4>
c001b3c2:	83 ec 0c             	sub    esp,0xc
c001b3c5:	68 04 22 02 c0       	push   0xc0022204
c001b3ca:	eb 08                	jmp    c001b3d4 <IDE::open(int, int, void*)+0x1dc>
c001b3cc:	83 ec 0c             	sub    esp,0xc
c001b3cf:	68 35 22 02 c0       	push   0xc0022235
c001b3d4:	e8 44 57 ff ff       	call   c0010b1d <KePanic(char const*)>
c001b3d9:	83 c4 10             	add    esp,0x10
c001b3dc:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b3e3:	74 1a                	je     c001b3ff <IDE::open(int, int, void*)+0x207>
c001b3e5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b3eb:	83 e0 fc             	and    eax,0xfffffffc
c001b3ee:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b3f5:	83 c0 08             	add    eax,0x8
c001b3f8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b3ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b405:	89 c2                	mov    edx,eax
c001b407:	83 e2 0f             	and    edx,0xf
c001b40a:	83 fa 08             	cmp    edx,0x8
c001b40d:	75 0a                	jne    c001b419 <IDE::open(int, int, void*)+0x221>
c001b40f:	83 e8 02             	sub    eax,0x2
c001b412:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b419:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b41f:	89 c2                	mov    edx,eax
c001b421:	83 e2 0f             	and    edx,0xf
c001b424:	83 fa 08             	cmp    edx,0x8
c001b427:	75 0a                	jne    c001b433 <IDE::open(int, int, void*)+0x23b>
c001b429:	83 e8 02             	sub    eax,0x2
c001b42c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b433:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b43a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b441:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b444:	89 d0                	mov    eax,edx
c001b446:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b44a:	8d 7a 01             	lea    edi,[edx+0x1]
c001b44d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b451:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b455:	83 e1 3f             	and    ecx,0x3f
c001b458:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b45c:	89 f9                	mov    ecx,edi
c001b45e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b465:	8d 78 02             	lea    edi,[eax+0x2]
c001b468:	0f b6 c9             	movzx  ecx,cl
c001b46b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b46e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b472:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b476:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b47a:	83 e2 3f             	and    edx,0x3f
c001b47d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b481:	89 f9                	mov    ecx,edi
c001b483:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b489:	8d 78 03             	lea    edi,[eax+0x3]
c001b48c:	0f b6 d1             	movzx  edx,cl
c001b48f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b492:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b496:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b49a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b49e:	83 e1 3f             	and    ecx,0x3f
c001b4a1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b4a5:	89 f9                	mov    ecx,edi
c001b4a7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b4ad:	8d 78 04             	lea    edi,[eax+0x4]
c001b4b0:	0f b6 c9             	movzx  ecx,cl
c001b4b3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b4b6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b4ba:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b4be:	89 fa                	mov    edx,edi
c001b4c0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b4c6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b4ca:	83 e2 3f             	and    edx,0x3f
c001b4cd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b4d1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b4d8:	66 85 f6             	test   si,si
c001b4db:	74 65                	je     c001b542 <IDE::open(int, int, void*)+0x34a>
c001b4dd:	89 f9                	mov    ecx,edi
c001b4df:	83 c0 05             	add    eax,0x5
c001b4e2:	0f b6 d1             	movzx  edx,cl
c001b4e5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b4e8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b4ec:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b4f0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b4f6:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b4fa:	83 e0 3f             	and    eax,0x3f
c001b4fd:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b501:	eb 3f                	jmp    c001b542 <IDE::open(int, int, void*)+0x34a>
c001b503:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b50a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b510:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b517:	05 06 02 00 00       	add    eax,0x206
c001b51c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b523:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b52a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b531:	05 06 02 00 00       	add    eax,0x206
c001b536:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b53d:	e9 bd fe ff ff       	jmp    c001b3ff <IDE::open(int, int, void*)+0x207>
c001b542:	50                   	push   eax
c001b543:	50                   	push   eax
c001b544:	6a 00                	push   0x0
c001b546:	53                   	push   ebx
c001b547:	e8 2e fa ff ff       	call   c001af7a <IDE::prepareInterrupt(unsigned char)>
c001b54c:	5a                   	pop    edx
c001b54d:	59                   	pop    ecx
c001b54e:	6a 01                	push   0x1
c001b550:	53                   	push   ebx
c001b551:	e8 24 fa ff ff       	call   c001af7a <IDE::prepareInterrupt(unsigned char)>
c001b556:	83 c4 0c             	add    esp,0xc
c001b559:	6a 00                	push   0x0
c001b55b:	6a 00                	push   0x0
c001b55d:	53                   	push   ebx
c001b55e:	e8 4b fc ff ff       	call   c001b1ae <IDE::enableIRQs(unsigned char, bool)>
c001b563:	83 c4 0c             	add    esp,0xc
c001b566:	6a 00                	push   0x0
c001b568:	6a 01                	push   0x1
c001b56a:	53                   	push   ebx
c001b56b:	e8 3e fc ff ff       	call   c001b1ae <IDE::enableIRQs(unsigned char, bool)>
c001b570:	83 c4 10             	add    esp,0x10
c001b573:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b57a:	74 34                	je     c001b5b0 <IDE::open(int, int, void*)+0x3b8>
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	53                   	push   ebx
c001b580:	6a 01                	push   0x1
c001b582:	68 76 b1 01 c0       	push   0xc001b176
c001b587:	6a 0e                	push   0xe
c001b589:	53                   	push   ebx
c001b58a:	e8 51 0a ff ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b58f:	83 c4 14             	add    esp,0x14
c001b592:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b598:	53                   	push   ebx
c001b599:	6a 01                	push   0x1
c001b59b:	68 92 b1 01 c0       	push   0xc001b192
c001b5a0:	6a 0f                	push   0xf
c001b5a2:	53                   	push   ebx
c001b5a3:	e8 38 0a ff ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5a8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b5ae:	eb 38                	jmp    c001b5e8 <IDE::open(int, int, void*)+0x3f0>
c001b5b0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b5ba:	83 ec 0c             	sub    esp,0xc
c001b5bd:	53                   	push   ebx
c001b5be:	6a 00                	push   0x0
c001b5c0:	68 76 b1 01 c0       	push   0xc001b176
c001b5c5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b5cb:	53                   	push   ebx
c001b5cc:	e8 0f 0a ff ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5d1:	83 c4 14             	add    esp,0x14
c001b5d4:	53                   	push   ebx
c001b5d5:	6a 00                	push   0x0
c001b5d7:	68 92 b1 01 c0       	push   0xc001b192
c001b5dc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b5e2:	53                   	push   ebx
c001b5e3:	e8 f8 09 ff ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5ea:	83 c4 20             	add    esp,0x20
c001b5ed:	83 ec 0c             	sub    esp,0xc
c001b5f0:	53                   	push   ebx
c001b5f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b5f4:	83 c4 0c             	add    esp,0xc
c001b5f7:	6a 07                	push   0x7
c001b5f9:	6a 00                	push   0x0
c001b5fb:	53                   	push   ebx
c001b5fc:	e8 5f fa ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b601:	83 c4 0c             	add    esp,0xc
c001b604:	6a 07                	push   0x7
c001b606:	6a 01                	push   0x1
c001b608:	53                   	push   ebx
c001b609:	e8 52 fa ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b60e:	83 c4 0c             	add    esp,0xc
c001b611:	6a 01                	push   0x1
c001b613:	6a 00                	push   0x0
c001b615:	53                   	push   ebx
c001b616:	e8 93 fb ff ff       	call   c001b1ae <IDE::enableIRQs(unsigned char, bool)>
c001b61b:	83 c4 0c             	add    esp,0xc
c001b61e:	6a 01                	push   0x1
c001b620:	6a 01                	push   0x1
c001b622:	53                   	push   ebx
c001b623:	e8 86 fb ff ff       	call   c001b1ae <IDE::enableIRQs(unsigned char, bool)>
c001b628:	83 c4 2c             	add    esp,0x2c
c001b62b:	31 c0                	xor    eax,eax
c001b62d:	5b                   	pop    ebx
c001b62e:	5e                   	pop    esi
c001b62f:	5f                   	pop    edi
c001b630:	5d                   	pop    ebp
c001b631:	c3                   	ret    

c001b632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b632:	55                   	push   ebp
c001b633:	57                   	push   edi
c001b634:	56                   	push   esi
c001b635:	53                   	push   ebx
c001b636:	83 ec 1c             	sub    esp,0x1c
c001b639:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b63d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b641:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b645:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b649:	8d 42 f8             	lea    eax,[edx-0x8]
c001b64c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b650:	3c 03                	cmp    al,0x3
c001b652:	77 5a                	ja     c001b6ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b654:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b658:	0f b6 db             	movzx  ebx,bl
c001b65b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b65f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b662:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b667:	0c 80                	or     al,0x80
c001b669:	50                   	push   eax
c001b66a:	6a 0c                	push   0xc
c001b66c:	53                   	push   ebx
c001b66d:	56                   	push   esi
c001b66e:	e8 2d f9 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b673:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b677:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b67c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b680:	0f b6 d2             	movzx  edx,dl
c001b683:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b687:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b689:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b68e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b692:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b696:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b6a2:	83 c4 2c             	add    esp,0x2c
c001b6a5:	5b                   	pop    ebx
c001b6a6:	5e                   	pop    esi
c001b6a7:	5f                   	pop    edi
c001b6a8:	5d                   	pop    ebp
c001b6a9:	e9 f2 f8 ff ff       	jmp    c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6ae:	0f b6 c2             	movzx  eax,dl
c001b6b1:	83 f8 07             	cmp    eax,0x7
c001b6b4:	77 12                	ja     c001b6c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b6b6:	0f b6 db             	movzx  ebx,bl
c001b6b9:	0f b6 c2             	movzx  eax,dl
c001b6bc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b6c4:	01 c2                	add    edx,eax
c001b6c6:	eb 2f                	jmp    c001b6f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b6c8:	83 f8 0d             	cmp    eax,0xd
c001b6cb:	77 13                	ja     c001b6e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b6cd:	0f b6 db             	movzx  ebx,bl
c001b6d0:	0f b6 d2             	movzx  edx,dl
c001b6d3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b6da:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b6de:	eb 17                	jmp    c001b6f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b6e0:	83 f8 15             	cmp    eax,0x15
c001b6e3:	77 14                	ja     c001b6f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b6e5:	0f b6 db             	movzx  ebx,bl
c001b6e8:	0f b6 d2             	movzx  edx,dl
c001b6eb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b6f3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b6f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b6f9:	83 c4 1c             	add    esp,0x1c
c001b6fc:	5b                   	pop    ebx
c001b6fd:	5e                   	pop    esi
c001b6fe:	5f                   	pop    edi
c001b6ff:	5d                   	pop    ebp
c001b700:	c3                   	ret    
c001b701:	90                   	nop

c001b702 <IDE::detect()>:
c001b702:	55                   	push   ebp
c001b703:	57                   	push   edi
c001b704:	56                   	push   esi
c001b705:	53                   	push   ebx
c001b706:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b70c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b713:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b71a:	0f 85 9e 02 00 00    	jne    c001b9be <IDE::detect()+0x2bc>
c001b720:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b727:	31 f6                	xor    esi,esi
c001b729:	31 ff                	xor    edi,edi
c001b72b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b733:	89 f8                	mov    eax,edi
c001b735:	c1 e0 06             	shl    eax,0x6
c001b738:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b740:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b744:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b74c:	c1 e0 04             	shl    eax,0x4
c001b74f:	83 c8 a0             	or     eax,0xffffffa0
c001b752:	0f b6 c0             	movzx  eax,al
c001b755:	50                   	push   eax
c001b756:	6a 06                	push   0x6
c001b758:	56                   	push   esi
c001b759:	53                   	push   ebx
c001b75a:	e8 41 f8 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b75f:	83 c4 0c             	add    esp,0xc
c001b762:	6a 0c                	push   0xc
c001b764:	56                   	push   esi
c001b765:	53                   	push   ebx
c001b766:	e8 f5 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b76b:	83 c4 0c             	add    esp,0xc
c001b76e:	6a 0c                	push   0xc
c001b770:	56                   	push   esi
c001b771:	53                   	push   ebx
c001b772:	e8 e9 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b777:	83 c4 0c             	add    esp,0xc
c001b77a:	6a 0c                	push   0xc
c001b77c:	56                   	push   esi
c001b77d:	53                   	push   ebx
c001b77e:	e8 dd f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b783:	83 c4 0c             	add    esp,0xc
c001b786:	6a 0c                	push   0xc
c001b788:	56                   	push   esi
c001b789:	53                   	push   ebx
c001b78a:	e8 d1 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b78f:	68 ec 00 00 00       	push   0xec
c001b794:	6a 07                	push   0x7
c001b796:	56                   	push   esi
c001b797:	53                   	push   ebx
c001b798:	e8 03 f8 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b79d:	83 c4 1c             	add    esp,0x1c
c001b7a0:	6a 0c                	push   0xc
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	e8 b7 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b7a9:	83 c4 0c             	add    esp,0xc
c001b7ac:	6a 0c                	push   0xc
c001b7ae:	56                   	push   esi
c001b7af:	53                   	push   ebx
c001b7b0:	e8 ab f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b7b5:	83 c4 0c             	add    esp,0xc
c001b7b8:	6a 0c                	push   0xc
c001b7ba:	56                   	push   esi
c001b7bb:	53                   	push   ebx
c001b7bc:	e8 9f f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b7c1:	83 c4 0c             	add    esp,0xc
c001b7c4:	6a 0c                	push   0xc
c001b7c6:	56                   	push   esi
c001b7c7:	53                   	push   ebx
c001b7c8:	e8 93 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b7cd:	83 c4 0c             	add    esp,0xc
c001b7d0:	6a 0c                	push   0xc
c001b7d2:	56                   	push   esi
c001b7d3:	53                   	push   ebx
c001b7d4:	e8 87 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	84 c0                	test   al,al
c001b7de:	0f 84 61 01 00 00    	je     c001b945 <IDE::detect()+0x243>
c001b7e4:	31 ed                	xor    ebp,ebp
c001b7e6:	50                   	push   eax
c001b7e7:	6a 0c                	push   0xc
c001b7e9:	56                   	push   esi
c001b7ea:	53                   	push   ebx
c001b7eb:	e8 70 f8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b7f0:	83 c4 10             	add    esp,0x10
c001b7f3:	a8 01                	test   al,0x1
c001b7f5:	0f 85 6b 01 00 00    	jne    c001b966 <IDE::detect()+0x264>
c001b7fb:	a8 80                	test   al,0x80
c001b7fd:	75 04                	jne    c001b803 <IDE::detect()+0x101>
c001b7ff:	a8 08                	test   al,0x8
c001b801:	75 23                	jne    c001b826 <IDE::detect()+0x124>
c001b803:	45                   	inc    ebp
c001b804:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b80a:	7e da                	jle    c001b7e6 <IDE::detect()+0xe4>
c001b80c:	83 ec 0c             	sub    esp,0xc
c001b80f:	6a 32                	push   0x32
c001b811:	e8 2a 9e ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b81f:	75 c5                	jne    c001b7e6 <IDE::detect()+0xe4>
c001b821:	e9 40 01 00 00       	jmp    c001b966 <IDE::detect()+0x264>
c001b826:	31 c9                	xor    ecx,ecx
c001b828:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b82c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b830:	83 ec 0c             	sub    esp,0xc
c001b833:	68 80 00 00 00       	push   0x80
c001b838:	55                   	push   ebp
c001b839:	6a 00                	push   0x0
c001b83b:	56                   	push   esi
c001b83c:	53                   	push   ebx
c001b83d:	e8 f0 fd ff ff       	call   c001b632 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b842:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b847:	89 f8                	mov    eax,edi
c001b849:	c1 e0 06             	shl    eax,0x6
c001b84c:	01 d8                	add    eax,ebx
c001b84e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b855:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b85c:	89 d1                	mov    ecx,edx
c001b85e:	89 f2                	mov    edx,esi
c001b860:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b866:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b86a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b870:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b874:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b87b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b883:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b88a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b892:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b898:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b89f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b8a5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b8a9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b8ad:	83 c4 20             	add    esp,0x20
c001b8b0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b8b3:	83 c5 02             	add    ebp,0x2
c001b8b6:	83 c0 02             	add    eax,0x2
c001b8b9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b8bf:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b8c2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b8c8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b8cc:	75 e2                	jne    c001b8b0 <IDE::detect()+0x1ae>
c001b8ce:	89 f8                	mov    eax,edi
c001b8d0:	c1 e0 06             	shl    eax,0x6
c001b8d3:	01 d8                	add    eax,ebx
c001b8d5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b8dc:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b8e3:	c1 ea 09             	shr    edx,0x9
c001b8e6:	83 e2 01             	and    edx,0x1
c001b8e9:	80 e1 01             	and    cl,0x1
c001b8ec:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b8f2:	75 22                	jne    c001b916 <IDE::detect()+0x214>
c001b8f4:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b8fb:	74 47                	je     c001b944 <IDE::detect()+0x242>
c001b8fd:	83 ec 0c             	sub    esp,0xc
c001b900:	68 7c 01 00 00       	push   0x17c
c001b905:	e8 c1 c1 fe ff       	call   c0007acb <malloc>
c001b90a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b90d:	89 c5                	mov    ebp,eax
c001b90f:	e8 16 05 00 00       	call   c001be2a <ATA::ATA()>
c001b914:	eb 17                	jmp    c001b92d <IDE::detect()+0x22b>
c001b916:	83 ec 0c             	sub    esp,0xc
c001b919:	68 84 01 00 00       	push   0x184
c001b91e:	e8 a8 c1 fe ff       	call   c0007acb <malloc>
c001b923:	89 04 24             	mov    DWORD PTR [esp],eax
c001b926:	89 c5                	mov    ebp,eax
c001b928:	e8 6f 0e 00 00       	call   c001c79c <ATAPI::ATAPI()>
c001b92d:	5a                   	pop    edx
c001b92e:	59                   	pop    ecx
c001b92f:	55                   	push   ebp
c001b930:	53                   	push   ebx
c001b931:	e8 fe 06 ff ff       	call   c000c034 <Device::addChild(Device*)>
c001b936:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b939:	53                   	push   ebx
c001b93a:	57                   	push   edi
c001b93b:	6a 00                	push   0x0
c001b93d:	55                   	push   ebp
c001b93e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b941:	83 c4 20             	add    esp,0x20
c001b944:	47                   	inc    edi
c001b945:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b94a:	74 0d                	je     c001b959 <IDE::detect()+0x257>
c001b94c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b954:	e9 da fd ff ff       	jmp    c001b733 <IDE::detect()+0x31>
c001b959:	4e                   	dec    esi
c001b95a:	74 62                	je     c001b9be <IDE::detect()+0x2bc>
c001b95c:	be 01 00 00 00       	mov    esi,0x1
c001b961:	e9 c5 fd ff ff       	jmp    c001b72b <IDE::detect()+0x29>
c001b966:	50                   	push   eax
c001b967:	6a 04                	push   0x4
c001b969:	56                   	push   esi
c001b96a:	53                   	push   ebx
c001b96b:	e8 f0 f6 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b970:	83 c4 0c             	add    esp,0xc
c001b973:	6a 05                	push   0x5
c001b975:	56                   	push   esi
c001b976:	53                   	push   ebx
c001b977:	89 c5                	mov    ebp,eax
c001b979:	e8 e2 f6 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001b97e:	89 e9                	mov    ecx,ebp
c001b980:	83 c4 10             	add    esp,0x10
c001b983:	0f b6 e9             	movzx  ebp,cl
c001b986:	83 fd 14             	cmp    ebp,0x14
c001b989:	74 2d                	je     c001b9b8 <IDE::detect()+0x2b6>
c001b98b:	83 fd 69             	cmp    ebp,0x69
c001b98e:	75 b5                	jne    c001b945 <IDE::detect()+0x243>
c001b990:	3c 96                	cmp    al,0x96
c001b992:	75 b1                	jne    c001b945 <IDE::detect()+0x243>
c001b994:	68 a1 00 00 00       	push   0xa1
c001b999:	6a 07                	push   0x7
c001b99b:	56                   	push   esi
c001b99c:	53                   	push   ebx
c001b99d:	e8 fe f5 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9a2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b9a9:	e8 92 9c ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001b9ae:	83 c4 10             	add    esp,0x10
c001b9b1:	b1 01                	mov    cl,0x1
c001b9b3:	e9 70 fe ff ff       	jmp    c001b828 <IDE::detect()+0x126>
c001b9b8:	3c eb                	cmp    al,0xeb
c001b9ba:	75 cf                	jne    c001b98b <IDE::detect()+0x289>
c001b9bc:	eb d6                	jmp    c001b994 <IDE::detect()+0x292>
c001b9be:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b9c4:	5b                   	pop    ebx
c001b9c5:	5e                   	pop    esi
c001b9c6:	5f                   	pop    edi
c001b9c7:	5d                   	pop    ebp
c001b9c8:	c3                   	ret    
c001b9c9:	90                   	nop

c001b9ca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b9ca:	55                   	push   ebp
c001b9cb:	57                   	push   edi
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	83 ec 1c             	sub    esp,0x1c
c001b9d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b9d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b9d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b9dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b9e5:	88 c3                	mov    bl,al
c001b9e7:	25 ff 00 00 00       	and    eax,0xff
c001b9ec:	0f 84 88 00 00 00    	je     c001ba7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	89 c7                	mov    edi,eax
c001b9f7:	68 5f 22 02 c0       	push   0xc002225f
c001b9fc:	e8 fd ee fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001ba01:	83 c4 10             	add    esp,0x10
c001ba04:	83 ff 01             	cmp    edi,0x1
c001ba07:	74 6b                	je     c001ba74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ba09:	83 ff 02             	cmp    edi,0x2
c001ba0c:	75 58                	jne    c001ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ba0e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ba13:	50                   	push   eax
c001ba14:	6a 01                	push   0x1
c001ba16:	01 ff                	add    edi,edi
c001ba18:	09 fe                	or     esi,edi
c001ba1a:	89 f0                	mov    eax,esi
c001ba1c:	0f b6 f0             	movzx  esi,al
c001ba1f:	c1 e6 06             	shl    esi,0x6
c001ba22:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ba2a:	50                   	push   eax
c001ba2b:	55                   	push   ebp
c001ba2c:	e8 2f f6 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001ba31:	83 c4 10             	add    esp,0x10
c001ba34:	a8 01                	test   al,0x1
c001ba36:	74 02                	je     c001ba3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001ba38:	b3 07                	mov    bl,0x7
c001ba3a:	a8 02                	test   al,0x2
c001ba3c:	74 02                	je     c001ba40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ba3e:	b3 03                	mov    bl,0x3
c001ba40:	a8 04                	test   al,0x4
c001ba42:	74 02                	je     c001ba46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ba44:	b3 14                	mov    bl,0x14
c001ba46:	a8 08                	test   al,0x8
c001ba48:	74 02                	je     c001ba4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ba4a:	b3 03                	mov    bl,0x3
c001ba4c:	a8 10                	test   al,0x10
c001ba4e:	74 02                	je     c001ba52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ba50:	b3 15                	mov    bl,0x15
c001ba52:	a8 20                	test   al,0x20
c001ba54:	74 02                	je     c001ba58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ba56:	b3 03                	mov    bl,0x3
c001ba58:	a8 40                	test   al,0x40
c001ba5a:	74 02                	je     c001ba5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ba5c:	b3 16                	mov    bl,0x16
c001ba5e:	a8 80                	test   al,0x80
c001ba60:	74 18                	je     c001ba7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba62:	b3 0d                	mov    bl,0xd
c001ba64:	eb 14                	jmp    c001ba7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba66:	83 ff 03             	cmp    edi,0x3
c001ba69:	74 0d                	je     c001ba78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001ba6b:	83 ff 04             	cmp    edi,0x4
c001ba6e:	75 0a                	jne    c001ba7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba70:	b3 08                	mov    bl,0x8
c001ba72:	eb 06                	jmp    c001ba7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba74:	b3 13                	mov    bl,0x13
c001ba76:	eb 02                	jmp    c001ba7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba78:	b3 17                	mov    bl,0x17
c001ba7a:	83 c4 1c             	add    esp,0x1c
c001ba7d:	88 d8                	mov    al,bl
c001ba7f:	5b                   	pop    ebx
c001ba80:	5e                   	pop    esi
c001ba81:	5f                   	pop    edi
c001ba82:	5d                   	pop    ebp
c001ba83:	c3                   	ret    

c001ba84 <IDE::polling(unsigned char, unsigned int)>:
c001ba84:	57                   	push   edi
c001ba85:	56                   	push   esi
c001ba86:	53                   	push   ebx
c001ba87:	bb 04 00 00 00       	mov    ebx,0x4
c001ba8c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ba90:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba95:	52                   	push   edx
c001ba96:	6a 0c                	push   0xc
c001ba98:	56                   	push   esi
c001ba99:	57                   	push   edi
c001ba9a:	e8 c1 f5 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	4b                   	dec    ebx
c001baa3:	75 f0                	jne    c001ba95 <IDE::polling(unsigned char, unsigned int)+0x11>
c001baa5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001baaa:	50                   	push   eax
c001baab:	6a 0c                	push   0xc
c001baad:	56                   	push   esi
c001baae:	57                   	push   edi
c001baaf:	e8 ac f5 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001bab4:	83 c4 10             	add    esp,0x10
c001bab7:	a8 01                	test   al,0x1
c001bab9:	75 17                	jne    c001bad2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001babb:	a8 20                	test   al,0x20
c001babd:	75 0f                	jne    c001bace <IDE::polling(unsigned char, unsigned int)+0x4a>
c001babf:	4b                   	dec    ebx
c001bac0:	74 10                	je     c001bad2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bac2:	a8 80                	test   al,0x80
c001bac4:	75 e4                	jne    c001baaa <IDE::polling(unsigned char, unsigned int)+0x26>
c001bac6:	a8 08                	test   al,0x8
c001bac8:	74 e0                	je     c001baaa <IDE::polling(unsigned char, unsigned int)+0x26>
c001baca:	31 c0                	xor    eax,eax
c001bacc:	eb 06                	jmp    c001bad4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bace:	b0 01                	mov    al,0x1
c001bad0:	eb 02                	jmp    c001bad4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bad2:	b0 02                	mov    al,0x2
c001bad4:	5b                   	pop    ebx
c001bad5:	5e                   	pop    esi
c001bad6:	5f                   	pop    edi
c001bad7:	c3                   	ret    

c001bad8 <SATABus::close(int, int, void*)>:
c001bad8:	31 c0                	xor    eax,eax
c001bada:	c3                   	ret    
c001badb:	90                   	nop

c001badc <SATABus::detect()>:
c001badc:	c3                   	ret    
c001badd:	90                   	nop

c001bade <SATABus::SATABus()>:
c001bade:	83 ec 0c             	sub    esp,0xc
c001bae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae5:	83 ec 08             	sub    esp,0x8
c001bae8:	68 98 22 02 c0       	push   0xc0022298
c001baed:	50                   	push   eax
c001baee:	e8 85 08 ff ff       	call   c000c378 <HardDiskController::HardDiskController(char const*)>
c001baf3:	83 c4 10             	add    esp,0x10
c001baf6:	ba c4 22 02 c0       	mov    edx,0xc00222c4
c001bafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baff:	89 10                	mov    DWORD PTR [eax],edx
c001bb01:	83 ec 0c             	sub    esp,0xc
c001bb04:	6a 50                	push   0x50
c001bb06:	e8 99 c3 fe ff       	call   c0007ea4 <Phys::allocateContiguousPages(int)>
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	89 c2                	mov    edx,eax
c001bb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	6a 50                	push   0x50
c001bb1f:	e8 c5 da fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	89 c2                	mov    edx,eax
c001bb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bb33:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001bb38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb3c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bb42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bb4c:	83 ec 0c             	sub    esp,0xc
c001bb4f:	6a 03                	push   0x3
c001bb51:	6a 50                	push   0x50
c001bb53:	51                   	push   ecx
c001bb54:	52                   	push   edx
c001bb55:	50                   	push   eax
c001bb56:	e8 a1 e3 fe ff       	call   c0009efc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bb5b:	83 c4 20             	add    esp,0x20
c001bb5e:	90                   	nop
c001bb5f:	83 c4 0c             	add    esp,0xc
c001bb62:	c3                   	ret    
c001bb63:	90                   	nop

c001bb64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb68:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bb6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bb6e:	09 c2                	or     edx,eax
c001bb70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bb7a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bb7c:	31 c0                	xor    eax,eax
c001bb7e:	c1 e9 08             	shr    ecx,0x8
c001bb81:	83 e1 0f             	and    ecx,0xf
c001bb84:	39 c8                	cmp    eax,ecx
c001bb86:	74 0a                	je     c001bb92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bb88:	f6 c2 01             	test   dl,0x1
c001bb8b:	74 08                	je     c001bb95 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bb8d:	d1 ea                	shr    edx,1
c001bb8f:	40                   	inc    eax
c001bb90:	eb f2                	jmp    c001bb84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bb92:	83 c8 ff             	or     eax,0xffffffff
c001bb95:	c3                   	ret    

c001bb96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bb96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb9a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bb9d:	89 c2                	mov    edx,eax
c001bb9f:	c1 ea 08             	shr    edx,0x8
c001bba2:	83 e2 0f             	and    edx,0xf
c001bba5:	4a                   	dec    edx
c001bba6:	75 32                	jne    c001bbda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bba8:	83 e0 0f             	and    eax,0xf
c001bbab:	83 f8 03             	cmp    eax,0x3
c001bbae:	75 2a                	jne    c001bbda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bbb0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bbb3:	b8 02 00 00 00       	mov    eax,0x2
c001bbb8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bbbe:	74 1c                	je     c001bbdc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bbc0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bbc6:	b8 04 00 00 00       	mov    eax,0x4
c001bbcb:	74 0f                	je     c001bbdc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bbcd:	31 c0                	xor    eax,eax
c001bbcf:	83 fa 03             	cmp    edx,0x3
c001bbd2:	0f 94 c0             	sete   al
c001bbd5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bbd9:	c3                   	ret    
c001bbda:	31 c0                	xor    eax,eax
c001bbdc:	c3                   	ret    
c001bbdd:	90                   	nop

c001bbde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bbde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bbe5:	0f ba e2 0f          	bt     edx,0xf
c001bbe9:	72 f7                	jb     c001bbe2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bbeb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bbee:	83 ca 10             	or     edx,0x10
c001bbf1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bbf4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bbf7:	83 ca 01             	or     edx,0x1
c001bbfa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bbfd:	c3                   	ret    

c001bbfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bbfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc05:	83 e2 fe             	and    edx,0xfffffffe
c001bc08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc0e:	83 e2 ef             	and    edx,0xffffffef
c001bc11:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc17:	0f ba e2 0e          	bt     edx,0xe
c001bc1b:	72 f7                	jb     c001bc14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bc1d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc20:	0f ba e2 0f          	bt     edx,0xf
c001bc24:	72 ee                	jb     c001bc14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bc26:	c3                   	ret    
c001bc27:	90                   	nop

c001bc28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bc28:	55                   	push   ebp
c001bc29:	57                   	push   edi
c001bc2a:	56                   	push   esi
c001bc2b:	53                   	push   ebx
c001bc2c:	83 ec 1c             	sub    esp,0x1c
c001bc2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bc33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc37:	53                   	push   ebx
c001bc38:	57                   	push   edi
c001bc39:	e8 c0 ff ff ff       	call   c001bbfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001bc3e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bc42:	83 ec 0c             	sub    esp,0xc
c001bc45:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bc4b:	c1 e5 0a             	shl    ebp,0xa
c001bc4e:	01 e8                	add    eax,ebp
c001bc50:	89 03                	mov    DWORD PTR [ebx],eax
c001bc52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc54:	68 00 04 00 00       	push   0x400
c001bc59:	6a 00                	push   0x0
c001bc5b:	50                   	push   eax
c001bc5c:	e8 8f 48 fe ff       	call   c00004f0 <memset>
c001bc61:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bc67:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001bc6b:	83 c4 1c             	add    esp,0x1c
c001bc6e:	01 e8                	add    eax,ebp
c001bc70:	89 03                	mov    DWORD PTR [ebx],eax
c001bc72:	c1 e6 08             	shl    esi,0x8
c001bc75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bc7c:	81 c6 00 80 00 00    	add    esi,0x8000
c001bc82:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bc88:	01 f0                	add    eax,esi
c001bc8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bc8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bc90:	68 00 01 00 00       	push   0x100
c001bc95:	6a 00                	push   0x0
c001bc97:	50                   	push   eax
c001bc98:	e8 53 48 fe ff       	call   c00004f0 <memset>
c001bc9d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bca3:	31 d2                	xor    edx,edx
c001bca5:	01 f0                	add    eax,esi
c001bca7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bcaa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bcb1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001bcb7:	01 ee                	add    esi,ebp
c001bcb9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001bcbd:	83 c4 10             	add    esp,0x10
c001bcc0:	c1 e5 0d             	shl    ebp,0xd
c001bcc3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001bcc9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001bccf:	83 c6 20             	add    esi,0x20
c001bcd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bcd6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001bcdc:	01 e8                	add    eax,ebp
c001bcde:	01 d0                	add    eax,edx
c001bce0:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bce3:	52                   	push   edx
c001bce4:	68 00 01 00 00       	push   0x100
c001bce9:	6a 00                	push   0x0
c001bceb:	50                   	push   eax
c001bcec:	e8 ff 47 fe ff       	call   c00004f0 <memset>
c001bcf1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001bcf7:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001bcfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd02:	83 c4 10             	add    esp,0x10
c001bd05:	01 e8                	add    eax,ebp
c001bd07:	01 d0                	add    eax,edx
c001bd09:	81 c2 00 01 00 00    	add    edx,0x100
c001bd0f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001bd12:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001bd18:	75 af                	jne    c001bcc9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001bd1a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bd21:	50                   	push   eax
c001bd22:	50                   	push   eax
c001bd23:	53                   	push   ebx
c001bd24:	57                   	push   edi
c001bd25:	e8 b4 fe ff ff       	call   c001bbde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bd2a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bd31:	83 c4 2c             	add    esp,0x2c
c001bd34:	5b                   	pop    ebx
c001bd35:	5e                   	pop    esi
c001bd36:	5f                   	pop    edi
c001bd37:	5d                   	pop    ebp
c001bd38:	c3                   	ret    
c001bd39:	90                   	nop

c001bd3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001bd3a:	55                   	push   ebp
c001bd3b:	57                   	push   edi
c001bd3c:	56                   	push   esi
c001bd3d:	53                   	push   ebx
c001bd3e:	31 db                	xor    ebx,ebx
c001bd40:	83 ec 0c             	sub    esp,0xc
c001bd43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd47:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bd4b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001bd4e:	f7 c7 01 00 00 00    	test   edi,0x1
c001bd54:	74 7a                	je     c001bdd0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bd56:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bd5a:	89 d8                	mov    eax,ebx
c001bd5c:	c1 e0 07             	shl    eax,0x7
c001bd5f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001bd66:	55                   	push   ebp
c001bd67:	56                   	push   esi
c001bd68:	e8 29 fe ff ff       	call   c001bb96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001bd6d:	5a                   	pop    edx
c001bd6e:	59                   	pop    ecx
c001bd6f:	83 f8 01             	cmp    eax,0x1
c001bd72:	75 21                	jne    c001bd95 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001bd74:	50                   	push   eax
c001bd75:	53                   	push   ebx
c001bd76:	55                   	push   ebp
c001bd77:	56                   	push   esi
c001bd78:	e8 ab fe ff ff       	call   c001bc28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bd7d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bd84:	e8 42 bd fe ff       	call   c0007acb <malloc>
c001bd89:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd8c:	89 c5                	mov    ebp,eax
c001bd8e:	e8 c1 10 00 00       	call   c001ce54 <SATA::SATA()>
c001bd93:	eb 24                	jmp    c001bdb9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001bd95:	83 f8 04             	cmp    eax,0x4
c001bd98:	75 36                	jne    c001bdd0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bd9a:	51                   	push   ecx
c001bd9b:	53                   	push   ebx
c001bd9c:	55                   	push   ebp
c001bd9d:	56                   	push   esi
c001bd9e:	e8 85 fe ff ff       	call   c001bc28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bda3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bdaa:	e8 1c bd fe ff       	call   c0007acb <malloc>
c001bdaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdb2:	89 c5                	mov    ebp,eax
c001bdb4:	e8 f5 17 00 00       	call   c001d5ae <SATAPI::SATAPI()>
c001bdb9:	58                   	pop    eax
c001bdba:	5a                   	pop    edx
c001bdbb:	55                   	push   ebp
c001bdbc:	56                   	push   esi
c001bdbd:	e8 72 02 ff ff       	call   c000c034 <Device::addChild(Device*)>
c001bdc2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bdc5:	56                   	push   esi
c001bdc6:	6a 00                	push   0x0
c001bdc8:	53                   	push   ebx
c001bdc9:	55                   	push   ebp
c001bdca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdcd:	83 c4 20             	add    esp,0x20
c001bdd0:	d1 ef                	shr    edi,1
c001bdd2:	43                   	inc    ebx
c001bdd3:	83 fb 20             	cmp    ebx,0x20
c001bdd6:	0f 85 72 ff ff ff    	jne    c001bd4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bddc:	83 c4 0c             	add    esp,0xc
c001bddf:	5b                   	pop    ebx
c001bde0:	5e                   	pop    esi
c001bde1:	5f                   	pop    edi
c001bde2:	5d                   	pop    ebp
c001bde3:	c3                   	ret    

c001bde4 <SATABus::open(int, int, void*)>:
c001bde4:	83 ec 14             	sub    esp,0x14
c001bde7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdeb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bdf1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bdf7:	52                   	push   edx
c001bdf8:	50                   	push   eax
c001bdf9:	e8 3c ff ff ff       	call   c001bd3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bdfe:	31 c0                	xor    eax,eax
c001be00:	83 c4 1c             	add    esp,0x1c
c001be03:	c3                   	ret    

c001be04 <ATA::close(int, int, void*)>:
c001be04:	83 ec 0c             	sub    esp,0xc
c001be07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be11:	85 c0                	test   eax,eax
c001be13:	74 0c                	je     c001be21 <ATA::close(int, int, void*)+0x1d>
c001be15:	8b 10                	mov    edx,DWORD PTR [eax]
c001be17:	83 ec 0c             	sub    esp,0xc
c001be1a:	50                   	push   eax
c001be1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001be1e:	83 c4 10             	add    esp,0x10
c001be21:	31 c0                	xor    eax,eax
c001be23:	83 c4 0c             	add    esp,0xc
c001be26:	c3                   	ret    
c001be27:	90                   	nop

c001be28 <ATA::powerSaving(PowerSavingLevel)>:
c001be28:	c3                   	ret    
c001be29:	90                   	nop

c001be2a <ATA::ATA()>:
c001be2a:	83 ec 0c             	sub    esp,0xc
c001be2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be31:	83 ec 04             	sub    esp,0x4
c001be34:	68 00 02 00 00       	push   0x200
c001be39:	68 91 23 02 c0       	push   0xc0022391
c001be3e:	50                   	push   eax
c001be3f:	e8 be 05 ff ff       	call   c000c402 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	ba 04 23 02 c0       	mov    edx,0xc0022304
c001be4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be50:	89 10                	mov    DWORD PTR [eax],edx
c001be52:	90                   	nop
c001be53:	83 c4 0c             	add    esp,0xc
c001be56:	c3                   	ret    
c001be57:	90                   	nop

c001be58 <ATA::flush(bool)>:
c001be58:	53                   	push   ebx
c001be59:	83 ec 08             	sub    esp,0x8
c001be5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be65:	83 f8 01             	cmp    eax,0x1
c001be68:	19 c0                	sbb    eax,eax
c001be6a:	83 e0 fd             	and    eax,0xfffffffd
c001be6d:	05 ea 00 00 00       	add    eax,0xea
c001be72:	50                   	push   eax
c001be73:	6a 07                	push   0x7
c001be75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be7c:	50                   	push   eax
c001be7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be83:	e8 18 f1 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be88:	83 c4 0c             	add    esp,0xc
c001be8b:	6a 00                	push   0x0
c001be8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be94:	50                   	push   eax
c001be95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be9b:	e8 e4 fb ff ff       	call   c001ba84 <IDE::polling(unsigned char, unsigned int)>
c001bea0:	83 c4 18             	add    esp,0x18
c001bea3:	5b                   	pop    ebx
c001bea4:	c3                   	ret    
c001bea5:	90                   	nop

c001bea6 <ATA::readyForCommand()>:
c001bea6:	56                   	push   esi
c001bea7:	53                   	push   ebx
c001bea8:	53                   	push   ebx
c001bea9:	31 db                	xor    ebx,ebx
c001beab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001beaf:	51                   	push   ecx
c001beb0:	6a 0c                	push   0xc
c001beb2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001beb9:	50                   	push   eax
c001beba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bec0:	e8 9b f1 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	a8 88                	test   al,0x88
c001beca:	74 1f                	je     c001beeb <ATA::readyForCommand()+0x45>
c001becc:	43                   	inc    ebx
c001becd:	83 fb 63             	cmp    ebx,0x63
c001bed0:	7e dd                	jle    c001beaf <ATA::readyForCommand()+0x9>
c001bed2:	83 ec 0c             	sub    esp,0xc
c001bed5:	6a 0a                	push   0xa
c001bed7:	e8 64 97 ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001bedc:	83 c4 10             	add    esp,0x10
c001bedf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bee5:	75 c8                	jne    c001beaf <ATA::readyForCommand()+0x9>
c001bee7:	31 c0                	xor    eax,eax
c001bee9:	eb 02                	jmp    c001beed <ATA::readyForCommand()+0x47>
c001beeb:	b0 01                	mov    al,0x1
c001beed:	5a                   	pop    edx
c001beee:	5b                   	pop    ebx
c001beef:	5e                   	pop    esi
c001bef0:	c3                   	ret    
c001bef1:	90                   	nop

c001bef2 <ATA::access(unsigned long long, int, void*, bool)>:
c001bef2:	55                   	push   ebp
c001bef3:	57                   	push   edi
c001bef4:	56                   	push   esi
c001bef5:	53                   	push   ebx
c001bef6:	83 ec 2c             	sub    esp,0x2c
c001bef9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001befd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bf01:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bf05:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bf09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf0d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf11:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bf15:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bf1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf1f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf29:	c1 e0 06             	shl    eax,0x6
c001bf2c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bf34:	74 5b                	je     c001bf91 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bf36:	89 fa                	mov    edx,edi
c001bf38:	89 f0                	mov    eax,esi
c001bf3a:	c1 ea 1c             	shr    edx,0x1c
c001bf3d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bf41:	89 d1                	mov    ecx,edx
c001bf43:	09 c1                	or     ecx,eax
c001bf45:	74 25                	je     c001bf6c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bf47:	31 ed                	xor    ebp,ebp
c001bf49:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bf50:	89 fa                	mov    edx,edi
c001bf52:	89 f0                	mov    eax,esi
c001bf54:	0f ad d0             	shrd   eax,edx,cl
c001bf57:	d3 ea                	shr    edx,cl
c001bf59:	f6 c1 20             	test   cl,0x20
c001bf5c:	74 02                	je     c001bf60 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bf5e:	89 d0                	mov    eax,edx
c001bf60:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bf64:	45                   	inc    ebp
c001bf65:	83 fd 06             	cmp    ebp,0x6
c001bf68:	75 df                	jne    c001bf49 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bf6a:	eb 71                	jmp    c001bfdd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bf6c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bf71:	89 f0                	mov    eax,esi
c001bf73:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bf7a:	0f ac f8 10          	shrd   eax,edi,0x10
c001bf7e:	bf 01 00 00 00       	mov    edi,0x1
c001bf83:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf87:	c1 ee 18             	shr    esi,0x18
c001bf8a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bf8f:	eb 53                	jmp    c001bfe4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bf91:	6a 00                	push   0x0
c001bf93:	6a 3f                	push   0x3f
c001bf95:	57                   	push   edi
c001bf96:	56                   	push   esi
c001bf97:	e8 d4 2a 00 00       	call   c001ea70 <__umoddi3>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	40                   	inc    eax
c001bfa0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bfa4:	6a 00                	push   0x0
c001bfa6:	68 f0 03 00 00       	push   0x3f0
c001bfab:	57                   	push   edi
c001bfac:	56                   	push   esi
c001bfad:	e8 be 29 00 00       	call   c001e970 <__udivdi3>
c001bfb2:	83 c4 10             	add    esp,0x10
c001bfb5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bfba:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bfc1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bfc6:	6a 00                	push   0x0
c001bfc8:	6a 3f                	push   0x3f
c001bfca:	57                   	push   edi
c001bfcb:	31 ff                	xor    edi,edi
c001bfcd:	56                   	push   esi
c001bfce:	e8 9d 29 00 00       	call   c001e970 <__udivdi3>
c001bfd3:	83 c4 10             	add    esp,0x10
c001bfd6:	83 e0 0f             	and    eax,0xf
c001bfd9:	89 c6                	mov    esi,eax
c001bfdb:	eb 07                	jmp    c001bfe4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bfdd:	31 f6                	xor    esi,esi
c001bfdf:	bf 02 00 00 00       	mov    edi,0x2
c001bfe4:	50                   	push   eax
c001bfe5:	6a 00                	push   0x0
c001bfe7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfee:	50                   	push   eax
c001bfef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bff3:	e8 b6 f1 ff ff       	call   c001b1ae <IDE::enableIRQs(unsigned char, bool)>
c001bff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bffb:	e8 a6 fe ff ff       	call   c001bea6 <ATA::readyForCommand()>
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	84 c0                	test   al,al
c001c005:	75 0a                	jne    c001c011 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c007:	be 01 00 00 00       	mov    esi,0x1
c001c00c:	e9 9b 02 00 00       	jmp    c001c2ac <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c011:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c017:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c01d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c024:	c1 e0 04             	shl    eax,0x4
c001c027:	09 c6                	or     esi,eax
c001c029:	f7 c7 03 00 00 00    	test   edi,0x3
c001c02f:	75 05                	jne    c001c036 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c031:	83 ce a0             	or     esi,0xffffffa0
c001c034:	eb 03                	jmp    c001c039 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c036:	83 ce e0             	or     esi,0xffffffe0
c001c039:	89 f0                	mov    eax,esi
c001c03b:	0f b6 f0             	movzx  esi,al
c001c03e:	56                   	push   esi
c001c03f:	6a 06                	push   0x6
c001c041:	51                   	push   ecx
c001c042:	52                   	push   edx
c001c043:	e8 58 ef ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c048:	83 c4 10             	add    esp,0x10
c001c04b:	6a 00                	push   0x0
c001c04d:	6a 01                	push   0x1
c001c04f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c056:	50                   	push   eax
c001c057:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c05d:	e8 3e ef ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c062:	89 f8                	mov    eax,edi
c001c064:	83 c4 10             	add    esp,0x10
c001c067:	0f b6 f0             	movzx  esi,al
c001c06a:	83 fe 02             	cmp    esi,0x2
c001c06d:	75 6e                	jne    c001c0dd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c06f:	6a 00                	push   0x0
c001c071:	6a 08                	push   0x8
c001c073:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c07a:	50                   	push   eax
c001c07b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c081:	e8 1a ef ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c086:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c08b:	50                   	push   eax
c001c08c:	6a 09                	push   0x9
c001c08e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c095:	50                   	push   eax
c001c096:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c09c:	e8 ff ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0a1:	83 c4 20             	add    esp,0x20
c001c0a4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c0a9:	50                   	push   eax
c001c0aa:	6a 0a                	push   0xa
c001c0ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0b3:	50                   	push   eax
c001c0b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0ba:	e8 e1 ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0bf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c0c4:	50                   	push   eax
c001c0c5:	6a 0b                	push   0xb
c001c0c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0ce:	50                   	push   eax
c001c0cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0d5:	e8 c6 ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0da:	83 c4 20             	add    esp,0x20
c001c0dd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c0e2:	50                   	push   eax
c001c0e3:	6a 02                	push   0x2
c001c0e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0ec:	50                   	push   eax
c001c0ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0f3:	e8 a8 ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0f8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c0fd:	50                   	push   eax
c001c0fe:	6a 03                	push   0x3
c001c100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c107:	50                   	push   eax
c001c108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c10e:	e8 8d ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c113:	83 c4 20             	add    esp,0x20
c001c116:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c11b:	50                   	push   eax
c001c11c:	6a 04                	push   0x4
c001c11e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c125:	50                   	push   eax
c001c126:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c12c:	e8 6f ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c131:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c136:	50                   	push   eax
c001c137:	6a 05                	push   0x5
c001c139:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c140:	50                   	push   eax
c001c141:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c147:	e8 54 ee ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c14c:	83 c4 20             	add    esp,0x20
c001c14f:	83 fe 02             	cmp    esi,0x2
c001c152:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c157:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c15c:	85 c9                	test   ecx,ecx
c001c15e:	74 07                	je     c001c167 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c160:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c165:	75 47                	jne    c001c1ae <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c167:	89 f8                	mov    eax,edi
c001c169:	0f b6 f8             	movzx  edi,al
c001c16c:	31 c0                	xor    eax,eax
c001c16e:	83 ff 02             	cmp    edi,0x2
c001c171:	0f 95 c0             	setne  al
c001c174:	89 c6                	mov    esi,eax
c001c176:	74 0c                	je     c001c184 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c178:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c17d:	b8 30 00 00 00       	mov    eax,0x30
c001c182:	75 2f                	jne    c001c1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c184:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c188:	83 f2 01             	xor    edx,0x1
c001c18b:	85 c9                	test   ecx,ecx
c001c18d:	74 09                	je     c001c198 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c18f:	84 d2                	test   dl,dl
c001c191:	b8 24 00 00 00       	mov    eax,0x24
c001c196:	75 1b                	jne    c001c1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c198:	85 f6                	test   esi,esi
c001c19a:	0f 84 67 fe ff ff    	je     c001c007 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c1a0:	84 d2                	test   dl,dl
c001c1a2:	b8 20 00 00 00       	mov    eax,0x20
c001c1a7:	75 0a                	jne    c001c1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c1a9:	e9 59 fe ff ff       	jmp    c001c007 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c1ae:	b8 34 00 00 00       	mov    eax,0x34
c001c1b3:	50                   	push   eax
c001c1b4:	6a 07                	push   0x7
c001c1b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1bd:	50                   	push   eax
c001c1be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1c4:	e8 d7 ed ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c1cd:	83 c4 10             	add    esp,0x10
c001c1d0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001c1d5:	85 f6                	test   esi,esi
c001c1d7:	0f 84 b5 00 00 00    	je     c001c292 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001c1dd:	50                   	push   eax
c001c1de:	6a 01                	push   0x1
c001c1e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1e7:	50                   	push   eax
c001c1e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1ee:	e8 91 f8 ff ff       	call   c001ba84 <IDE::polling(unsigned char, unsigned int)>
c001c1f3:	83 c4 10             	add    esp,0x10
c001c1f6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c1fc:	0f b6 c0             	movzx  eax,al
c001c1ff:	85 c0                	test   eax,eax
c001c201:	74 1f                	je     c001c222 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001c203:	50                   	push   eax
c001c204:	89 c6                	mov    esi,eax
c001c206:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c20d:	0f b6 d2             	movzx  edx,dl
c001c210:	50                   	push   eax
c001c211:	52                   	push   edx
c001c212:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c218:	e8 ad f7 ff ff       	call   c001b9ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c21d:	e9 87 00 00 00       	jmp    c001c2a9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001c222:	85 ed                	test   ebp,ebp
c001c224:	74 3b                	je     c001c261 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001c226:	31 ff                	xor    edi,edi
c001c228:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c22c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001c230:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c235:	50                   	push   eax
c001c236:	50                   	push   eax
c001c237:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c23e:	50                   	push   eax
c001c23f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c245:	e8 44 ed ff ff       	call   c001af8e <IDE::getBase(unsigned char)>
c001c24a:	89 c2                	mov    edx,eax
c001c24c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c251:	66 ef                	out    dx,ax
c001c253:	47                   	inc    edi
c001c254:	83 c4 10             	add    esp,0x10
c001c257:	81 ff 00 01 00 00    	cmp    edi,0x100
c001c25d:	75 c9                	jne    c001c228 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001c25f:	eb 23                	jmp    c001c284 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001c261:	51                   	push   ecx
c001c262:	0f b6 d2             	movzx  edx,dl
c001c265:	51                   	push   ecx
c001c266:	52                   	push   edx
c001c267:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c26d:	e8 1c ed ff ff       	call   c001af8e <IDE::getBase(unsigned char)>
c001c272:	b9 00 01 00 00       	mov    ecx,0x100
c001c277:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c27b:	89 c2                	mov    edx,eax
c001c27d:	fc                   	cld    
c001c27e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c281:	83 c4 10             	add    esp,0x10
c001c284:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c28c:	4e                   	dec    esi
c001c28d:	e9 43 ff ff ff       	jmp    c001c1d5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001c292:	31 f6                	xor    esi,esi
c001c294:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c299:	74 11                	je     c001c2ac <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c29b:	50                   	push   eax
c001c29c:	50                   	push   eax
c001c29d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c2a2:	50                   	push   eax
c001c2a3:	53                   	push   ebx
c001c2a4:	e8 af fb ff ff       	call   c001be58 <ATA::flush(bool)>
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	83 c4 2c             	add    esp,0x2c
c001c2af:	89 f0                	mov    eax,esi
c001c2b1:	5b                   	pop    ebx
c001c2b2:	5e                   	pop    esi
c001c2b3:	5f                   	pop    edi
c001c2b4:	5d                   	pop    ebp
c001c2b5:	c3                   	ret    

c001c2b6 <ATA::detectCHS()>:
c001c2b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c2c0:	c1 e0 06             	shl    eax,0x6
c001c2c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c2c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c2d3:	c7 44 24 04 e8 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222e8
c001c2db:	e9 3d 48 ff ff       	jmp    c0010b1d <KePanic(char const*)>

c001c2e0 <ATA::open(int, int, void*)>:
c001c2e0:	53                   	push   ebx
c001c2e1:	83 ec 08             	sub    esp,0x8
c001c2e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2f0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c2f6:	c1 e0 06             	shl    eax,0x6
c001c2f9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c2ff:	01 d0                	add    eax,edx
c001c301:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c308:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c30e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c315:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c31f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c326:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c32c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c333:	75 0c                	jne    c001c341 <ATA::open(int, int, void*)+0x61>
c001c335:	83 ec 0c             	sub    esp,0xc
c001c338:	53                   	push   ebx
c001c339:	e8 78 ff ff ff       	call   c001c2b6 <ATA::detectCHS()>
c001c33e:	83 c4 10             	add    esp,0x10
c001c341:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c347:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c34d:	c1 e0 06             	shl    eax,0x6
c001c350:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c357:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c361:	d1 e8                	shr    eax,1
c001c363:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c369:	6a 04                	push   0x4
c001c36b:	6a 0c                	push   0xc
c001c36d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c374:	50                   	push   eax
c001c375:	52                   	push   edx
c001c376:	e8 25 ec ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c37b:	90                   	nop
c001c37c:	90                   	nop
c001c37d:	6a 00                	push   0x0
c001c37f:	6a 0c                	push   0xc
c001c381:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c388:	50                   	push   eax
c001c389:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c38f:	e8 0c ec ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c394:	83 c4 14             	add    esp,0x14
c001c397:	53                   	push   ebx
c001c398:	e8 cd 00 ff ff       	call   c000c46a <PhysicalDisk::startCache()>
c001c39d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3a0:	e8 11 13 ff ff       	call   c000d6b6 <createPartitionsForDisk(PhysicalDisk*)>
c001c3a5:	83 c4 18             	add    esp,0x18
c001c3a8:	31 c0                	xor    eax,eax
c001c3aa:	5b                   	pop    ebx
c001c3ab:	c3                   	ret    

c001c3ac <combineCharAndColour(char, unsigned char)>:
c001c3ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3b1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c3b7:	c1 e0 08             	shl    eax,0x8
c001c3ba:	09 d0                	or     eax,edx
c001c3bc:	c3                   	ret    

c001c3bd <combineColours(unsigned char, unsigned char)>:
c001c3bd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3c2:	c1 e0 04             	shl    eax,0x4
c001c3c5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c3c9:	c3                   	ret    

c001c3ca <ATA::read(unsigned long long, int, void*)>:
c001c3ca:	55                   	push   ebp
c001c3cb:	57                   	push   edi
c001c3cc:	56                   	push   esi
c001c3cd:	be 04 00 00 00       	mov    esi,0x4
c001c3d2:	53                   	push   ebx
c001c3d3:	83 ec 0c             	sub    esp,0xc
c001c3d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c3da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c3e2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c3e6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c3e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c3ef:	0f 87 a1 01 00 00    	ja     c001c596 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c3f5:	85 c9                	test   ecx,ecx
c001c3f7:	be 06 00 00 00       	mov    esi,0x6
c001c3fc:	0f 84 94 01 00 00    	je     c001c596 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c402:	55                   	push   ebp
c001c403:	55                   	push   ebp
c001c404:	6a 00                	push   0x0
c001c406:	51                   	push   ecx
c001c407:	53                   	push   ebx
c001c408:	52                   	push   edx
c001c409:	50                   	push   eax
c001c40a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c40e:	e8 df fa ff ff       	call   c001bef2 <ATA::access(unsigned long long, int, void*, bool)>
c001c413:	83 c4 20             	add    esp,0x20
c001c416:	85 c0                	test   eax,eax
c001c418:	89 c6                	mov    esi,eax
c001c41a:	0f 85 71 01 00 00    	jne    c001c591 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c420:	50                   	push   eax
c001c421:	bd 10 27 00 00       	mov    ebp,0x2710
c001c426:	50                   	push   eax
c001c427:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c42d:	6a 0f                	push   0xf
c001c42f:	6a 00                	push   0x0
c001c431:	89 da                	mov    edx,ebx
c001c433:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c439:	e8 7f ff ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001c43e:	59                   	pop    ecx
c001c43f:	b9 0a 00 00 00       	mov    ecx,0xa
c001c444:	5b                   	pop    ebx
c001c445:	0f b6 d8             	movzx  ebx,al
c001c448:	89 d0                	mov    eax,edx
c001c44a:	53                   	push   ebx
c001c44b:	99                   	cdq    
c001c44c:	f7 fd                	idiv   ebp
c001c44e:	99                   	cdq    
c001c44f:	f7 f9                	idiv   ecx
c001c451:	83 c2 30             	add    edx,0x30
c001c454:	0f b6 d2             	movzx  edx,dl
c001c457:	52                   	push   edx
c001c458:	e8 4f ff ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c45d:	5f                   	pop    edi
c001c45e:	bf e8 03 00 00       	mov    edi,0x3e8
c001c463:	5a                   	pop    edx
c001c464:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c46a:	53                   	push   ebx
c001c46b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c470:	99                   	cdq    
c001c471:	f7 ff                	idiv   edi
c001c473:	99                   	cdq    
c001c474:	f7 f9                	idiv   ecx
c001c476:	8d 42 30             	lea    eax,[edx+0x30]
c001c479:	0f b6 c0             	movzx  eax,al
c001c47c:	50                   	push   eax
c001c47d:	e8 2a ff ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c482:	5f                   	pop    edi
c001c483:	bf 64 00 00 00       	mov    edi,0x64
c001c488:	5a                   	pop    edx
c001c489:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c48f:	53                   	push   ebx
c001c490:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c495:	99                   	cdq    
c001c496:	f7 ff                	idiv   edi
c001c498:	99                   	cdq    
c001c499:	f7 f9                	idiv   ecx
c001c49b:	8d 42 30             	lea    eax,[edx+0x30]
c001c49e:	0f b6 c0             	movzx  eax,al
c001c4a1:	50                   	push   eax
c001c4a2:	e8 05 ff ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c4a7:	5a                   	pop    edx
c001c4a8:	5a                   	pop    edx
c001c4a9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c4af:	53                   	push   ebx
c001c4b0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4b5:	99                   	cdq    
c001c4b6:	f7 f9                	idiv   ecx
c001c4b8:	99                   	cdq    
c001c4b9:	f7 f9                	idiv   ecx
c001c4bb:	8d 42 30             	lea    eax,[edx+0x30]
c001c4be:	0f b6 c0             	movzx  eax,al
c001c4c1:	50                   	push   eax
c001c4c2:	e8 e5 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c4c7:	5a                   	pop    edx
c001c4c8:	5a                   	pop    edx
c001c4c9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c4cf:	53                   	push   ebx
c001c4d0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c4d5:	99                   	cdq    
c001c4d6:	f7 f9                	idiv   ecx
c001c4d8:	83 c2 30             	add    edx,0x30
c001c4db:	0f b6 d2             	movzx  edx,dl
c001c4de:	52                   	push   edx
c001c4df:	e8 c8 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c4e4:	5a                   	pop    edx
c001c4e5:	5a                   	pop    edx
c001c4e6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c4ec:	53                   	push   ebx
c001c4ed:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c4f2:	99                   	cdq    
c001c4f3:	f7 fd                	idiv   ebp
c001c4f5:	99                   	cdq    
c001c4f6:	f7 f9                	idiv   ecx
c001c4f8:	8d 42 30             	lea    eax,[edx+0x30]
c001c4fb:	0f b6 c0             	movzx  eax,al
c001c4fe:	50                   	push   eax
c001c4ff:	e8 a8 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c504:	5d                   	pop    ebp
c001c505:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c50a:	5a                   	pop    edx
c001c50b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c511:	53                   	push   ebx
c001c512:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c517:	99                   	cdq    
c001c518:	f7 fd                	idiv   ebp
c001c51a:	99                   	cdq    
c001c51b:	f7 f9                	idiv   ecx
c001c51d:	8d 42 30             	lea    eax,[edx+0x30]
c001c520:	0f b6 c0             	movzx  eax,al
c001c523:	50                   	push   eax
c001c524:	e8 83 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c529:	5d                   	pop    ebp
c001c52a:	5a                   	pop    edx
c001c52b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c531:	53                   	push   ebx
c001c532:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c537:	99                   	cdq    
c001c538:	f7 ff                	idiv   edi
c001c53a:	99                   	cdq    
c001c53b:	f7 f9                	idiv   ecx
c001c53d:	8d 42 30             	lea    eax,[edx+0x30]
c001c540:	0f b6 c0             	movzx  eax,al
c001c543:	50                   	push   eax
c001c544:	e8 63 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c549:	5f                   	pop    edi
c001c54a:	5d                   	pop    ebp
c001c54b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c551:	53                   	push   ebx
c001c552:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c557:	99                   	cdq    
c001c558:	f7 f9                	idiv   ecx
c001c55a:	99                   	cdq    
c001c55b:	f7 f9                	idiv   ecx
c001c55d:	8d 42 30             	lea    eax,[edx+0x30]
c001c560:	0f b6 c0             	movzx  eax,al
c001c563:	50                   	push   eax
c001c564:	e8 43 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c569:	5a                   	pop    edx
c001c56a:	5f                   	pop    edi
c001c56b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c571:	53                   	push   ebx
c001c572:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c577:	99                   	cdq    
c001c578:	f7 f9                	idiv   ecx
c001c57a:	83 c2 30             	add    edx,0x30
c001c57d:	0f b6 d2             	movzx  edx,dl
c001c580:	52                   	push   edx
c001c581:	e8 26 fe ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c586:	83 c4 10             	add    esp,0x10
c001c589:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c58f:	eb 05                	jmp    c001c596 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c591:	be 01 00 00 00       	mov    esi,0x1
c001c596:	83 c4 0c             	add    esp,0xc
c001c599:	89 f0                	mov    eax,esi
c001c59b:	5b                   	pop    ebx
c001c59c:	5e                   	pop    esi
c001c59d:	5f                   	pop    edi
c001c59e:	5d                   	pop    ebp
c001c59f:	c3                   	ret    

c001c5a0 <ATA::write(unsigned long long, int, void*)>:
c001c5a0:	55                   	push   ebp
c001c5a1:	57                   	push   edi
c001c5a2:	56                   	push   esi
c001c5a3:	be 04 00 00 00       	mov    esi,0x4
c001c5a8:	53                   	push   ebx
c001c5a9:	83 ec 0c             	sub    esp,0xc
c001c5ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5bc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c5bf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c5c5:	0f 87 9c 01 00 00    	ja     c001c767 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c5cb:	85 c9                	test   ecx,ecx
c001c5cd:	be 06 00 00 00       	mov    esi,0x6
c001c5d2:	0f 84 8f 01 00 00    	je     c001c767 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c5d8:	55                   	push   ebp
c001c5d9:	55                   	push   ebp
c001c5da:	6a 01                	push   0x1
c001c5dc:	51                   	push   ecx
c001c5dd:	53                   	push   ebx
c001c5de:	52                   	push   edx
c001c5df:	50                   	push   eax
c001c5e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5e4:	e8 09 f9 ff ff       	call   c001bef2 <ATA::access(unsigned long long, int, void*, bool)>
c001c5e9:	83 c4 20             	add    esp,0x20
c001c5ec:	85 c0                	test   eax,eax
c001c5ee:	89 c6                	mov    esi,eax
c001c5f0:	0f 85 6c 01 00 00    	jne    c001c762 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c5f6:	50                   	push   eax
c001c5f7:	bd 10 27 00 00       	mov    ebp,0x2710
c001c5fc:	50                   	push   eax
c001c5fd:	6a 0f                	push   0xf
c001c5ff:	6a 00                	push   0x0
c001c601:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c607:	e8 b1 fd ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001c60c:	5a                   	pop    edx
c001c60d:	59                   	pop    ecx
c001c60e:	b9 0a 00 00 00       	mov    ecx,0xa
c001c613:	0f b6 d8             	movzx  ebx,al
c001c616:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c61b:	53                   	push   ebx
c001c61c:	99                   	cdq    
c001c61d:	f7 fd                	idiv   ebp
c001c61f:	99                   	cdq    
c001c620:	f7 f9                	idiv   ecx
c001c622:	8d 42 30             	lea    eax,[edx+0x30]
c001c625:	0f b6 c0             	movzx  eax,al
c001c628:	50                   	push   eax
c001c629:	e8 7e fd ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c62e:	5f                   	pop    edi
c001c62f:	bf e8 03 00 00       	mov    edi,0x3e8
c001c634:	5a                   	pop    edx
c001c635:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c63b:	53                   	push   ebx
c001c63c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c641:	99                   	cdq    
c001c642:	f7 ff                	idiv   edi
c001c644:	99                   	cdq    
c001c645:	f7 f9                	idiv   ecx
c001c647:	8d 42 30             	lea    eax,[edx+0x30]
c001c64a:	0f b6 c0             	movzx  eax,al
c001c64d:	50                   	push   eax
c001c64e:	e8 59 fd ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c653:	5f                   	pop    edi
c001c654:	bf 64 00 00 00       	mov    edi,0x64
c001c659:	5a                   	pop    edx
c001c65a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c660:	53                   	push   ebx
c001c661:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c666:	99                   	cdq    
c001c667:	f7 ff                	idiv   edi
c001c669:	99                   	cdq    
c001c66a:	f7 f9                	idiv   ecx
c001c66c:	8d 42 30             	lea    eax,[edx+0x30]
c001c66f:	0f b6 c0             	movzx  eax,al
c001c672:	50                   	push   eax
c001c673:	e8 34 fd ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c678:	5a                   	pop    edx
c001c679:	5a                   	pop    edx
c001c67a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c680:	53                   	push   ebx
c001c681:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c686:	99                   	cdq    
c001c687:	f7 f9                	idiv   ecx
c001c689:	99                   	cdq    
c001c68a:	f7 f9                	idiv   ecx
c001c68c:	8d 42 30             	lea    eax,[edx+0x30]
c001c68f:	0f b6 c0             	movzx  eax,al
c001c692:	50                   	push   eax
c001c693:	e8 14 fd ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c698:	5a                   	pop    edx
c001c699:	5a                   	pop    edx
c001c69a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c6a0:	53                   	push   ebx
c001c6a1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c6a6:	99                   	cdq    
c001c6a7:	f7 f9                	idiv   ecx
c001c6a9:	83 c2 30             	add    edx,0x30
c001c6ac:	0f b6 d2             	movzx  edx,dl
c001c6af:	52                   	push   edx
c001c6b0:	e8 f7 fc ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c6b5:	5a                   	pop    edx
c001c6b6:	5a                   	pop    edx
c001c6b7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c6bd:	53                   	push   ebx
c001c6be:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c6c3:	99                   	cdq    
c001c6c4:	f7 fd                	idiv   ebp
c001c6c6:	99                   	cdq    
c001c6c7:	f7 f9                	idiv   ecx
c001c6c9:	8d 42 30             	lea    eax,[edx+0x30]
c001c6cc:	0f b6 c0             	movzx  eax,al
c001c6cf:	50                   	push   eax
c001c6d0:	e8 d7 fc ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c6d5:	5d                   	pop    ebp
c001c6d6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c6db:	5a                   	pop    edx
c001c6dc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c6e2:	53                   	push   ebx
c001c6e3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c6e8:	99                   	cdq    
c001c6e9:	f7 fd                	idiv   ebp
c001c6eb:	99                   	cdq    
c001c6ec:	f7 f9                	idiv   ecx
c001c6ee:	8d 42 30             	lea    eax,[edx+0x30]
c001c6f1:	0f b6 c0             	movzx  eax,al
c001c6f4:	50                   	push   eax
c001c6f5:	e8 b2 fc ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c6fa:	5d                   	pop    ebp
c001c6fb:	5a                   	pop    edx
c001c6fc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c702:	53                   	push   ebx
c001c703:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c708:	99                   	cdq    
c001c709:	f7 ff                	idiv   edi
c001c70b:	99                   	cdq    
c001c70c:	f7 f9                	idiv   ecx
c001c70e:	8d 42 30             	lea    eax,[edx+0x30]
c001c711:	0f b6 c0             	movzx  eax,al
c001c714:	50                   	push   eax
c001c715:	e8 92 fc ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c71a:	5f                   	pop    edi
c001c71b:	5d                   	pop    ebp
c001c71c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c722:	53                   	push   ebx
c001c723:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c728:	99                   	cdq    
c001c729:	f7 f9                	idiv   ecx
c001c72b:	99                   	cdq    
c001c72c:	f7 f9                	idiv   ecx
c001c72e:	8d 42 30             	lea    eax,[edx+0x30]
c001c731:	0f b6 c0             	movzx  eax,al
c001c734:	50                   	push   eax
c001c735:	e8 72 fc ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c73a:	5a                   	pop    edx
c001c73b:	5f                   	pop    edi
c001c73c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c742:	53                   	push   ebx
c001c743:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c748:	99                   	cdq    
c001c749:	f7 f9                	idiv   ecx
c001c74b:	83 c2 30             	add    edx,0x30
c001c74e:	0f b6 d2             	movzx  edx,dl
c001c751:	52                   	push   edx
c001c752:	e8 55 fc ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001c757:	83 c4 10             	add    esp,0x10
c001c75a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c760:	eb 05                	jmp    c001c767 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c762:	be 01 00 00 00       	mov    esi,0x1
c001c767:	83 c4 0c             	add    esp,0xc
c001c76a:	89 f0                	mov    eax,esi
c001c76c:	5b                   	pop    ebx
c001c76d:	5e                   	pop    esi
c001c76e:	5f                   	pop    edi
c001c76f:	5d                   	pop    ebp
c001c770:	c3                   	ret    
c001c771:	90                   	nop

c001c772 <ATAPI::write(unsigned long long, int, void*)>:
c001c772:	b8 03 00 00 00       	mov    eax,0x3
c001c777:	c3                   	ret    

c001c778 <ATAPI::close(int, int, void*)>:
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c785:	85 c0                	test   eax,eax
c001c787:	74 0c                	je     c001c795 <ATAPI::close(int, int, void*)+0x1d>
c001c789:	8b 10                	mov    edx,DWORD PTR [eax]
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	50                   	push   eax
c001c78f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c792:	83 c4 10             	add    esp,0x10
c001c795:	31 c0                	xor    eax,eax
c001c797:	83 c4 0c             	add    esp,0xc
c001c79a:	c3                   	ret    
c001c79b:	90                   	nop

c001c79c <ATAPI::ATAPI()>:
c001c79c:	83 ec 0c             	sub    esp,0xc
c001c79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a3:	83 ec 04             	sub    esp,0x4
c001c7a6:	68 00 08 00 00       	push   0x800
c001c7ab:	68 31 24 02 c0       	push   0xc0022431
c001c7b0:	50                   	push   eax
c001c7b1:	e8 4c fc fe ff       	call   c000c402 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7b6:	83 c4 10             	add    esp,0x10
c001c7b9:	ba 4c 23 02 c0       	mov    edx,0xc002234c
c001c7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c2:	89 10                	mov    DWORD PTR [eax],edx
c001c7c4:	90                   	nop
c001c7c5:	83 c4 0c             	add    esp,0xc
c001c7c8:	c3                   	ret    
c001c7c9:	90                   	nop

c001c7ca <ATAPI::readyForCommand()>:
c001c7ca:	56                   	push   esi
c001c7cb:	53                   	push   ebx
c001c7cc:	53                   	push   ebx
c001c7cd:	31 db                	xor    ebx,ebx
c001c7cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7d3:	51                   	push   ecx
c001c7d4:	6a 0c                	push   0xc
c001c7d6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7dd:	50                   	push   eax
c001c7de:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7e4:	e8 77 e8 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	a8 88                	test   al,0x88
c001c7ee:	74 25                	je     c001c815 <ATAPI::readyForCommand()+0x4b>
c001c7f0:	43                   	inc    ebx
c001c7f1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c7f7:	7e da                	jle    c001c7d3 <ATAPI::readyForCommand()+0x9>
c001c7f9:	83 ec 0c             	sub    esp,0xc
c001c7fc:	68 5e 01 00 00       	push   0x15e
c001c801:	e8 3a 8e ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001c806:	83 c4 10             	add    esp,0x10
c001c809:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c80f:	75 c2                	jne    c001c7d3 <ATAPI::readyForCommand()+0x9>
c001c811:	31 c0                	xor    eax,eax
c001c813:	eb 02                	jmp    c001c817 <ATAPI::readyForCommand()+0x4d>
c001c815:	b0 01                	mov    al,0x1
c001c817:	5a                   	pop    edx
c001c818:	5b                   	pop    ebx
c001c819:	5e                   	pop    esi
c001c81a:	c3                   	ret    
c001c81b:	90                   	nop

c001c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c81c:	55                   	push   ebp
c001c81d:	57                   	push   edi
c001c81e:	56                   	push   esi
c001c81f:	53                   	push   ebx
c001c820:	83 ec 20             	sub    esp,0x20
c001c823:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c827:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c82b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c82f:	6a 01                	push   0x1
c001c831:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c838:	50                   	push   eax
c001c839:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c83f:	e8 6a e9 ff ff       	call   c001b1ae <IDE::enableIRQs(unsigned char, bool)>
c001c844:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c84b:	59                   	pop    ecx
c001c84c:	5e                   	pop    esi
c001c84d:	50                   	push   eax
c001c84e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c854:	e8 21 e7 ff ff       	call   c001af7a <IDE::prepareInterrupt(unsigned char)>
c001c859:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c85c:	e8 69 ff ff ff       	call   c001c7ca <ATAPI::readyForCommand()>
c001c861:	83 c4 10             	add    esp,0x10
c001c864:	84 c0                	test   al,al
c001c866:	75 0a                	jne    c001c872 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c868:	bb 01 00 00 00       	mov    ebx,0x1
c001c86d:	e9 5f 02 00 00       	jmp    c001cad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c872:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c878:	c1 e0 04             	shl    eax,0x4
c001c87b:	0f b6 c0             	movzx  eax,al
c001c87e:	50                   	push   eax
c001c87f:	6a 06                	push   0x6
c001c881:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c888:	50                   	push   eax
c001c889:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c88f:	e8 0c e7 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c894:	6a 00                	push   0x0
c001c896:	6a 01                	push   0x1
c001c898:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c89f:	50                   	push   eax
c001c8a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8a6:	e8 f5 e6 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ab:	83 c4 20             	add    esp,0x20
c001c8ae:	0f b6 c3             	movzx  eax,bl
c001c8b1:	50                   	push   eax
c001c8b2:	0f b6 df             	movzx  ebx,bh
c001c8b5:	6a 04                	push   0x4
c001c8b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8be:	50                   	push   eax
c001c8bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8c5:	e8 d6 e6 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ca:	53                   	push   ebx
c001c8cb:	6a 05                	push   0x5
c001c8cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8d4:	50                   	push   eax
c001c8d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8db:	e8 c0 e6 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e0:	83 c4 20             	add    esp,0x20
c001c8e3:	68 a0 00 00 00       	push   0xa0
c001c8e8:	6a 07                	push   0x7
c001c8ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8f1:	50                   	push   eax
c001c8f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8f8:	e8 a3 e6 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8fd:	83 c4 0c             	add    esp,0xc
c001c900:	6a 01                	push   0x1
c001c902:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c909:	50                   	push   eax
c001c90a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c910:	e8 6f f1 ff ff       	call   c001ba84 <IDE::polling(unsigned char, unsigned int)>
c001c915:	83 c4 10             	add    esp,0x10
c001c918:	0f b6 d8             	movzx  ebx,al
c001c91b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c921:	85 db                	test   ebx,ebx
c001c923:	74 20                	je     c001c945 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c925:	53                   	push   ebx
c001c926:	0f b6 c0             	movzx  eax,al
c001c929:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c930:	52                   	push   edx
c001c931:	50                   	push   eax
c001c932:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c938:	e8 8d f0 ff ff       	call   c001b9ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c93d:	83 c4 10             	add    esp,0x10
c001c940:	e9 8c 01 00 00       	jmp    c001cad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c945:	52                   	push   edx
c001c946:	0f b6 c0             	movzx  eax,al
c001c949:	52                   	push   edx
c001c94a:	50                   	push   eax
c001c94b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c951:	e8 38 e6 ff ff       	call   c001af8e <IDE::getBase(unsigned char)>
c001c956:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c95a:	b9 06 00 00 00       	mov    ecx,0x6
c001c95f:	89 c2                	mov    edx,eax
c001c961:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c964:	89 e8                	mov    eax,ebp
c001c966:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c96a:	83 c4 10             	add    esp,0x10
c001c96d:	0f b6 c0             	movzx  eax,al
c001c970:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c974:	85 db                	test   ebx,ebx
c001c976:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c97c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c983:	0f 84 eb 00 00 00    	je     c001ca74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c989:	55                   	push   ebp
c001c98a:	55                   	push   ebp
c001c98b:	52                   	push   edx
c001c98c:	50                   	push   eax
c001c98d:	e8 82 e7 ff ff       	call   c001b114 <IDE::waitInterrupt(unsigned char)>
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	84 c0                	test   al,al
c001c997:	0f 84 cb fe ff ff    	je     c001c868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c99d:	56                   	push   esi
c001c99e:	56                   	push   esi
c001c99f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9a6:	50                   	push   eax
c001c9a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9ad:	e8 c8 e5 ff ff       	call   c001af7a <IDE::prepareInterrupt(unsigned char)>
c001c9b2:	83 c4 0c             	add    esp,0xc
c001c9b5:	6a 04                	push   0x4
c001c9b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9be:	50                   	push   eax
c001c9bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9c5:	e8 96 e6 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001c9ca:	83 c4 0c             	add    esp,0xc
c001c9cd:	6a 05                	push   0x5
c001c9cf:	89 c6                	mov    esi,eax
c001c9d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9d8:	50                   	push   eax
c001c9d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9df:	e8 7c e6 ff ff       	call   c001b060 <IDE::read(unsigned char, unsigned char)>
c001c9e4:	83 c4 10             	add    esp,0x10
c001c9e7:	0f b6 e8             	movzx  ebp,al
c001c9ea:	89 f0                	mov    eax,esi
c001c9ec:	c1 e5 08             	shl    ebp,0x8
c001c9ef:	0f b6 f0             	movzx  esi,al
c001c9f2:	09 f5                	or     ebp,esi
c001c9f4:	31 f6                	xor    esi,esi
c001c9f6:	d1 fd                	sar    ebp,1
c001c9f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c9fd:	74 5c                	je     c001ca5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c9ff:	39 ee                	cmp    esi,ebp
c001ca01:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca07:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca0e:	75 0d                	jne    c001ca1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001ca10:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001ca13:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001ca17:	4b                   	dec    ebx
c001ca18:	e9 57 ff ff ff       	jmp    c001c974 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001ca1d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ca21:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001ca25:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001ca2a:	51                   	push   ecx
c001ca2b:	51                   	push   ecx
c001ca2c:	52                   	push   edx
c001ca2d:	50                   	push   eax
c001ca2e:	e8 5b e5 ff ff       	call   c001af8e <IDE::getBase(unsigned char)>
c001ca33:	89 c2                	mov    edx,eax
c001ca35:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001ca3a:	66 ef                	out    dx,ax
c001ca3c:	46                   	inc    esi
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	eb bd                	jmp    c001c9ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001ca42:	51                   	push   ecx
c001ca43:	51                   	push   ecx
c001ca44:	52                   	push   edx
c001ca45:	50                   	push   eax
c001ca46:	e8 43 e5 ff ff       	call   c001af8e <IDE::getBase(unsigned char)>
c001ca4b:	89 c2                	mov    edx,eax
c001ca4d:	66 ed                	in     ax,dx
c001ca4f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca53:	83 c4 10             	add    esp,0x10
c001ca56:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001ca5a:	46                   	inc    esi
c001ca5b:	39 ee                	cmp    esi,ebp
c001ca5d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca63:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca6a:	75 d6                	jne    c001ca42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001ca6c:	01 f6                	add    esi,esi
c001ca6e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001ca72:	eb a3                	jmp    c001ca17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001ca74:	51                   	push   ecx
c001ca75:	51                   	push   ecx
c001ca76:	52                   	push   edx
c001ca77:	50                   	push   eax
c001ca78:	e8 97 e6 ff ff       	call   c001b114 <IDE::waitInterrupt(unsigned char)>
c001ca7d:	83 c4 10             	add    esp,0x10
c001ca80:	84 c0                	test   al,al
c001ca82:	0f 84 e0 fd ff ff    	je     c001c868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001ca88:	52                   	push   edx
c001ca89:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ca8e:	52                   	push   edx
c001ca8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca96:	50                   	push   eax
c001ca97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca9d:	e8 d8 e4 ff ff       	call   c001af7a <IDE::prepareInterrupt(unsigned char)>
c001caa2:	83 c4 10             	add    esp,0x10
c001caa5:	50                   	push   eax
c001caa6:	50                   	push   eax
c001caa7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caae:	50                   	push   eax
c001caaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cab5:	e8 d4 e4 ff ff       	call   c001af8e <IDE::getBase(unsigned char)>
c001caba:	8d 50 07             	lea    edx,[eax+0x7]
c001cabd:	ec                   	in     al,dx
c001cabe:	83 c4 10             	add    esp,0x10
c001cac1:	a8 88                	test   al,0x88
c001cac3:	74 0a                	je     c001cacf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cac5:	4b                   	dec    ebx
c001cac6:	75 dd                	jne    c001caa5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cac8:	bb 02 00 00 00       	mov    ebx,0x2
c001cacd:	eb 02                	jmp    c001cad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cacf:	31 db                	xor    ebx,ebx
c001cad1:	83 c4 1c             	add    esp,0x1c
c001cad4:	89 d8                	mov    eax,ebx
c001cad6:	5b                   	pop    ebx
c001cad7:	5e                   	pop    esi
c001cad8:	5f                   	pop    edi
c001cad9:	5d                   	pop    ebp
c001cada:	c3                   	ret    
c001cadb:	90                   	nop

c001cadc <ATAPI::diskRemoved()>:
c001cadc:	53                   	push   ebx
c001cadd:	83 ec 14             	sub    esp,0x14
c001cae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cae4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001caeb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001caf1:	e8 ae 08 ff ff       	call   c000d3a4 <LogicalDisk::unmount()>
c001caf6:	58                   	pop    eax
c001caf7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cafd:	e8 86 12 ff ff       	call   c000dd88 <VCache::writeWriteBuffer()>
c001cb02:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cb08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb0c:	83 c4 18             	add    esp,0x18
c001cb0f:	5b                   	pop    ebx
c001cb10:	e9 63 12 ff ff       	jmp    c000dd78 <VCache::invalidateReadBuffer()>
c001cb15:	90                   	nop

c001cb16 <ATAPI::eject()>:
c001cb16:	57                   	push   edi
c001cb17:	b9 03 00 00 00       	mov    ecx,0x3
c001cb1c:	53                   	push   ebx
c001cb1d:	83 ec 14             	sub    esp,0x14
c001cb20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb28:	fc                   	cld    
c001cb29:	31 c0                	xor    eax,eax
c001cb2b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb2d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb32:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb37:	50                   	push   eax
c001cb38:	50                   	push   eax
c001cb39:	6a 00                	push   0x0
c001cb3b:	6a 00                	push   0x0
c001cb3d:	6a 00                	push   0x0
c001cb3f:	6a 02                	push   0x2
c001cb41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb45:	50                   	push   eax
c001cb46:	53                   	push   ebx
c001cb47:	e8 d0 fc ff ff       	call   c001c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb4c:	83 c4 14             	add    esp,0x14
c001cb4f:	53                   	push   ebx
c001cb50:	e8 87 ff ff ff       	call   c001cadc <ATAPI::diskRemoved()>
c001cb55:	83 c4 24             	add    esp,0x24
c001cb58:	31 c0                	xor    eax,eax
c001cb5a:	5b                   	pop    ebx
c001cb5b:	5f                   	pop    edi
c001cb5c:	c3                   	ret    
c001cb5d:	90                   	nop

c001cb5e <ATAPI::diskInserted()>:
c001cb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb62:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cb69:	c3                   	ret    

c001cb6a <ATAPI::detectMedia()>:
c001cb6a:	56                   	push   esi
c001cb6b:	53                   	push   ebx
c001cb6c:	83 ec 28             	sub    esp,0x28
c001cb6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb73:	6a 0c                	push   0xc
c001cb75:	6a 00                	push   0x0
c001cb77:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cb7b:	56                   	push   esi
c001cb7c:	e8 6f 39 fe ff       	call   c00004f0 <memset>
c001cb81:	58                   	pop    eax
c001cb82:	5a                   	pop    edx
c001cb83:	6a 00                	push   0x0
c001cb85:	6a 00                	push   0x0
c001cb87:	6a 00                	push   0x0
c001cb89:	6a 00                	push   0x0
c001cb8b:	56                   	push   esi
c001cb8c:	53                   	push   ebx
c001cb8d:	e8 8a fc ff ff       	call   c001c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb92:	83 c4 1c             	add    esp,0x1c
c001cb95:	6a 0c                	push   0xc
c001cb97:	6a 00                	push   0x0
c001cb99:	56                   	push   esi
c001cb9a:	e8 51 39 fe ff       	call   c00004f0 <memset>
c001cb9f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cba4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cba9:	59                   	pop    ecx
c001cbaa:	58                   	pop    eax
c001cbab:	6a 01                	push   0x1
c001cbad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cbb1:	50                   	push   eax
c001cbb2:	6a 00                	push   0x0
c001cbb4:	6a 12                	push   0x12
c001cbb6:	56                   	push   esi
c001cbb7:	53                   	push   ebx
c001cbb8:	e8 5f fc ff ff       	call   c001c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbbd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cbc1:	83 c4 20             	add    esp,0x20
c001cbc4:	83 e0 7f             	and    eax,0x7f
c001cbc7:	83 f8 70             	cmp    eax,0x70
c001cbca:	74 15                	je     c001cbe1 <ATAPI::detectMedia()+0x77>
c001cbcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cbd3:	75 0c                	jne    c001cbe1 <ATAPI::detectMedia()+0x77>
c001cbd5:	83 ec 0c             	sub    esp,0xc
c001cbd8:	53                   	push   ebx
c001cbd9:	e8 80 ff ff ff       	call   c001cb5e <ATAPI::diskInserted()>
c001cbde:	83 c4 10             	add    esp,0x10
c001cbe1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cbe5:	83 e0 0f             	and    eax,0xf
c001cbe8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cbed:	0f b6 c0             	movzx  eax,al
c001cbf0:	75 19                	jne    c001cc0b <ATAPI::detectMedia()+0xa1>
c001cbf2:	83 f8 02             	cmp    eax,0x2
c001cbf5:	75 14                	jne    c001cc0b <ATAPI::detectMedia()+0xa1>
c001cbf7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cbfe:	74 24                	je     c001cc24 <ATAPI::detectMedia()+0xba>
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	53                   	push   ebx
c001cc04:	e8 d3 fe ff ff       	call   c001cadc <ATAPI::diskRemoved()>
c001cc09:	eb 16                	jmp    c001cc21 <ATAPI::detectMedia()+0xb7>
c001cc0b:	85 c0                	test   eax,eax
c001cc0d:	75 15                	jne    c001cc24 <ATAPI::detectMedia()+0xba>
c001cc0f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc16:	75 0c                	jne    c001cc24 <ATAPI::detectMedia()+0xba>
c001cc18:	83 ec 0c             	sub    esp,0xc
c001cc1b:	53                   	push   ebx
c001cc1c:	e8 3d ff ff ff       	call   c001cb5e <ATAPI::diskInserted()>
c001cc21:	83 c4 10             	add    esp,0x10
c001cc24:	83 c4 24             	add    esp,0x24
c001cc27:	5b                   	pop    ebx
c001cc28:	5e                   	pop    esi
c001cc29:	c3                   	ret    

c001cc2a <ATAPI::open(int, int, void*)>:
c001cc2a:	56                   	push   esi
c001cc2b:	53                   	push   ebx
c001cc2c:	50                   	push   eax
c001cc2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc39:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc3f:	c1 e0 06             	shl    eax,0x6
c001cc42:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc48:	01 d0                	add    eax,edx
c001cc4a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cc51:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cc57:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cc5e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cc68:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cc6f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cc75:	6a 04                	push   0x4
c001cc77:	6a 0c                	push   0xc
c001cc79:	51                   	push   ecx
c001cc7a:	52                   	push   edx
c001cc7b:	e8 20 e3 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc80:	90                   	nop
c001cc81:	90                   	nop
c001cc82:	6a 00                	push   0x0
c001cc84:	6a 0c                	push   0xc
c001cc86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc8d:	50                   	push   eax
c001cc8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc94:	e8 07 e3 ff ff       	call   c001afa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc99:	83 c4 14             	add    esp,0x14
c001cc9c:	68 78 01 00 00       	push   0x178
c001cca1:	e8 25 ae fe ff       	call   c0007acb <malloc>
c001cca6:	83 c4 0c             	add    esp,0xc
c001cca9:	6a 00                	push   0x0
c001ccab:	68 ff ff ff 7f       	push   0x7fffffff
c001ccb0:	6a 00                	push   0x0
c001ccb2:	6a 00                	push   0x0
c001ccb4:	53                   	push   ebx
c001ccb5:	68 e3 24 02 c0       	push   0xc00224e3
c001ccba:	89 c6                	mov    esi,eax
c001ccbc:	50                   	push   eax
c001ccbd:	e8 20 05 ff ff       	call   c000d1e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ccc2:	83 c4 14             	add    esp,0x14
c001ccc5:	56                   	push   esi
c001ccc6:	e8 d7 05 ff ff       	call   c000d2a2 <LogicalDisk::assignDriveLetter()>
c001cccb:	5a                   	pop    edx
c001cccc:	59                   	pop    ecx
c001cccd:	0f be c0             	movsx  eax,al
c001ccd0:	50                   	push   eax
c001ccd1:	68 34 23 02 c0       	push   0xc0022334
c001ccd6:	e8 23 dc fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001ccdb:	58                   	pop    eax
c001ccdc:	5a                   	pop    edx
c001ccdd:	56                   	push   esi
c001ccde:	53                   	push   ebx
c001ccdf:	e8 50 f3 fe ff       	call   c000c034 <Device::addChild(Device*)>
c001cce4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ccea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cced:	e8 78 f7 fe ff       	call   c000c46a <PhysicalDisk::startCache()>
c001ccf2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ccf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccfc:	e8 69 fe ff ff       	call   c001cb6a <ATAPI::detectMedia()>
c001cd01:	83 c4 14             	add    esp,0x14
c001cd04:	31 c0                	xor    eax,eax
c001cd06:	5b                   	pop    ebx
c001cd07:	5e                   	pop    esi
c001cd08:	c3                   	ret    
c001cd09:	90                   	nop

c001cd0a <ATAPI::read(unsigned long long, int, void*)>:
c001cd0a:	55                   	push   ebp
c001cd0b:	57                   	push   edi
c001cd0c:	56                   	push   esi
c001cd0d:	53                   	push   ebx
c001cd0e:	83 ec 1c             	sub    esp,0x1c
c001cd11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd15:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cd19:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cd1d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd24:	74 3c                	je     c001cd62 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001cd26:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd2a:	b9 03 00 00 00       	mov    ecx,0x3
c001cd2f:	fc                   	cld    
c001cd30:	31 c0                	xor    eax,eax
c001cd32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd34:	89 e8                	mov    eax,ebp
c001cd36:	0f ce                	bswap  esi
c001cd38:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cd3c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cd41:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cd45:	50                   	push   eax
c001cd46:	50                   	push   eax
c001cd47:	55                   	push   ebp
c001cd48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd4c:	c1 e5 0b             	shl    ebp,0xb
c001cd4f:	6a 00                	push   0x0
c001cd51:	55                   	push   ebp
c001cd52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd56:	50                   	push   eax
c001cd57:	53                   	push   ebx
c001cd58:	e8 bf fa ff ff       	call   c001c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd5d:	83 c4 20             	add    esp,0x20
c001cd60:	eb 1a                	jmp    c001cd7c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001cd62:	83 ec 0c             	sub    esp,0xc
c001cd65:	53                   	push   ebx
c001cd66:	e8 ff fd ff ff       	call   c001cb6a <ATAPI::detectMedia()>
c001cd6b:	83 c4 10             	add    esp,0x10
c001cd6e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd75:	75 af                	jne    c001cd26 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cd77:	b8 02 00 00 00       	mov    eax,0x2
c001cd7c:	83 c4 1c             	add    esp,0x1c
c001cd7f:	5b                   	pop    ebx
c001cd80:	5e                   	pop    esi
c001cd81:	5f                   	pop    edi
c001cd82:	5d                   	pop    ebp
c001cd83:	c3                   	ret    

c001cd84 <SATA::close(int, int, void*)>:
c001cd84:	83 ec 0c             	sub    esp,0xc
c001cd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd91:	85 c0                	test   eax,eax
c001cd93:	74 0c                	je     c001cda1 <SATA::close(int, int, void*)+0x1d>
c001cd95:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd97:	83 ec 0c             	sub    esp,0xc
c001cd9a:	50                   	push   eax
c001cd9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd9e:	83 c4 10             	add    esp,0x10
c001cda1:	31 c0                	xor    eax,eax
c001cda3:	83 c4 0c             	add    esp,0xc
c001cda6:	c3                   	ret    
c001cda7:	90                   	nop

c001cda8 <SATA::powerSaving(PowerSavingLevel)>:
c001cda8:	c3                   	ret    
c001cda9:	90                   	nop

c001cdaa <SATA::open(int, int, void*)>:
c001cdaa:	56                   	push   esi
c001cdab:	53                   	push   ebx
c001cdac:	50                   	push   eax
c001cdad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cdb5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cdbf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cdc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdc9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cdd3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cddd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cde4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cdea:	e8 e6 af fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001cdef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cdf5:	89 c6                	mov    esi,eax
c001cdf7:	e8 d9 af fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001cdfc:	81 c6 00 10 00 00    	add    esi,0x1000
c001ce02:	39 c6                	cmp    esi,eax
c001ce04:	74 10                	je     c001ce16 <SATA::open(int, int, void*)+0x6c>
c001ce06:	83 ec 0c             	sub    esp,0xc
c001ce09:	68 7c 23 02 c0       	push   0xc002237c
c001ce0e:	e8 0a 3d ff ff       	call   c0010b1d <KePanic(char const*)>
c001ce13:	83 c4 10             	add    esp,0x10
c001ce16:	83 ec 0c             	sub    esp,0xc
c001ce19:	6a 02                	push   0x2
c001ce1b:	e8 c9 c7 fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001ce20:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce26:	6a 03                	push   0x3
c001ce28:	50                   	push   eax
c001ce29:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ce2f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ce35:	e8 b8 ce fe ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce3a:	83 c4 14             	add    esp,0x14
c001ce3d:	53                   	push   ebx
c001ce3e:	e8 27 f6 fe ff       	call   c000c46a <PhysicalDisk::startCache()>
c001ce43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce46:	e8 6b 08 ff ff       	call   c000d6b6 <createPartitionsForDisk(PhysicalDisk*)>
c001ce4b:	83 c4 14             	add    esp,0x14
c001ce4e:	31 c0                	xor    eax,eax
c001ce50:	5b                   	pop    ebx
c001ce51:	5e                   	pop    esi
c001ce52:	c3                   	ret    
c001ce53:	90                   	nop

c001ce54 <SATA::SATA()>:
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5b:	83 ec 04             	sub    esp,0x4
c001ce5e:	68 00 02 00 00       	push   0x200
c001ce63:	68 90 23 02 c0       	push   0xc0022390
c001ce68:	50                   	push   eax
c001ce69:	e8 94 f5 fe ff       	call   c000c402 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce6e:	83 c4 10             	add    esp,0x10
c001ce71:	ba 00 24 02 c0       	mov    edx,0xc0022400
c001ce76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce7a:	89 10                	mov    DWORD PTR [eax],edx
c001ce7c:	90                   	nop
c001ce7d:	83 c4 0c             	add    esp,0xc
c001ce80:	c3                   	ret    
c001ce81:	90                   	nop

c001ce82 <SATA::access(unsigned long long, int, void*, bool)>:
c001ce82:	55                   	push   ebp
c001ce83:	57                   	push   edi
c001ce84:	56                   	push   esi
c001ce85:	53                   	push   ebx
c001ce86:	83 ec 2c             	sub    esp,0x2c
c001ce89:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ce8d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ce92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce9a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ce9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cea2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cea6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ceaa:	7e 10                	jle    c001cebc <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001ceac:	83 ec 0c             	sub    esp,0xc
c001ceaf:	68 a0 23 02 c0       	push   0xc00223a0
c001ceb4:	e8 64 3c ff ff       	call   c0010b1d <KePanic(char const*)>
c001ceb9:	83 c4 10             	add    esp,0x10
c001cebc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cec2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cec8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cece:	89 e8                	mov    eax,ebp
c001ced0:	c1 e0 07             	shl    eax,0x7
c001ced3:	01 d0                	add    eax,edx
c001ced5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cedf:	8d 45 02             	lea    eax,[ebp+0x2]
c001cee2:	51                   	push   ecx
c001cee3:	c1 e0 07             	shl    eax,0x7
c001cee6:	51                   	push   ecx
c001cee7:	01 d0                	add    eax,edx
c001cee9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ceed:	50                   	push   eax
c001ceee:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cef4:	e8 6b ec ff ff       	call   c001bb64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cef9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cefd:	83 c4 10             	add    esp,0x10
c001cf00:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001cf05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cf09:	0f 84 5b 01 00 00    	je     c001d06a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cf0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cf13:	c1 e0 09             	shl    eax,0x9
c001cf16:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cf1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf1f:	74 0e                	je     c001cf2f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001cf21:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cf27:	89 c1                	mov    ecx,eax
c001cf29:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cf2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cf33:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cf39:	8d 45 02             	lea    eax,[ebp+0x2]
c001cf3c:	c1 e0 07             	shl    eax,0x7
c001cf3f:	01 d0                	add    eax,edx
c001cf41:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf43:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cf49:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cf4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf53:	c1 e1 05             	shl    ecx,0x5
c001cf56:	01 c8                	add    eax,ecx
c001cf58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cf5c:	83 e1 01             	and    ecx,0x1
c001cf5f:	89 ce                	mov    esi,ecx
c001cf61:	8a 08                	mov    cl,BYTE PTR [eax]
c001cf63:	c1 e6 06             	shl    esi,0x6
c001cf66:	83 e1 bf             	and    ecx,0xffffffbf
c001cf69:	09 f1                	or     ecx,esi
c001cf6b:	88 08                	mov    BYTE PTR [eax],cl
c001cf6d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cf6f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cf75:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cf7b:	89 08                	mov    DWORD PTR [eax],ecx
c001cf7d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cf83:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cf89:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cf8f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cf92:	50                   	push   eax
c001cf93:	68 90 00 00 00       	push   0x90
c001cf98:	6a 00                	push   0x0
c001cf9a:	56                   	push   esi
c001cf9b:	e8 50 35 fe ff       	call   c00004f0 <memset>
c001cfa0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cfa6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cfac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb0:	83 c4 10             	add    esp,0x10
c001cfb3:	48                   	dec    eax
c001cfb4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cfb9:	89 c1                	mov    ecx,eax
c001cfbb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cfc1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cfc6:	09 c8                	or     eax,ecx
c001cfc8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cfce:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cfd4:	83 c8 80             	or     eax,0xffffff80
c001cfd7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cfdd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cfe0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfe4:	25 00 7f 00 00       	and    eax,0x7f00
c001cfe9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cfee:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cff3:	66 89 06             	mov    WORD PTR [esi],ax
c001cff6:	b0 35                	mov    al,0x35
c001cff8:	75 02                	jne    c001cffc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001cffa:	b0 25                	mov    al,0x25
c001cffc:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cfff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d003:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d007:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d00b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d00f:	c1 e8 10             	shr    eax,0x10
c001d012:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d015:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d019:	c1 e8 18             	shr    eax,0x18
c001d01c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d01f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d023:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d026:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d02a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d02d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d031:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d035:	89 ee                	mov    esi,ebp
c001d037:	31 c0                	xor    eax,eax
c001d039:	c1 e6 07             	shl    esi,0x7
c001d03c:	01 d6                	add    esi,edx
c001d03e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d044:	80 e1 88             	and    cl,0x88
c001d047:	74 0a                	je     c001d053 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d049:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d04e:	74 0a                	je     c001d05a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d050:	40                   	inc    eax
c001d051:	eb eb                	jmp    c001d03e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d053:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d058:	75 17                	jne    c001d071 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d05a:	83 ec 0c             	sub    esp,0xc
c001d05d:	68 d9 23 02 c0       	push   0xc00223d9
c001d062:	e8 97 d8 fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d067:	83 c4 10             	add    esp,0x10
c001d06a:	b8 01 00 00 00       	mov    eax,0x1
c001d06f:	eb 5b                	jmp    c001d0cc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d071:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d075:	c1 e5 07             	shl    ebp,0x7
c001d078:	b8 01 00 00 00       	mov    eax,0x1
c001d07d:	01 ea                	add    edx,ebp
c001d07f:	d3 e0                	shl    eax,cl
c001d081:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d087:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d08d:	85 c8                	test   eax,ecx
c001d08f:	74 16                	je     c001d0a7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d091:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d097:	0f ba e1 1e          	bt     ecx,0x1e
c001d09b:	73 ea                	jae    c001d087 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d09d:	83 ec 0c             	sub    esp,0xc
c001d0a0:	68 e7 23 02 c0       	push   0xc00223e7
c001d0a5:	eb bb                	jmp    c001d062 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d0a7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d0ad:	0f ba e0 1e          	bt     eax,0x1e
c001d0b1:	72 b7                	jb     c001d06a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d0b3:	31 c0                	xor    eax,eax
c001d0b5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d0ba:	75 10                	jne    c001d0cc <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d0bc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d0c2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d0c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0cc:	83 c4 2c             	add    esp,0x2c
c001d0cf:	5b                   	pop    ebx
c001d0d0:	5e                   	pop    esi
c001d0d1:	5f                   	pop    edi
c001d0d2:	5d                   	pop    ebp
c001d0d3:	c3                   	ret    

c001d0d4 <SATA::read(unsigned long long, int, void*)>:
c001d0d4:	55                   	push   ebp
c001d0d5:	57                   	push   edi
c001d0d6:	56                   	push   esi
c001d0d7:	be 04 00 00 00       	mov    esi,0x4
c001d0dc:	53                   	push   ebx
c001d0dd:	83 ec 0c             	sub    esp,0xc
c001d0e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d0e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d0ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d0f0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d0f3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d0f9:	0f 87 1a 02 00 00    	ja     c001d319 <SATA::read(unsigned long long, int, void*)+0x245>
c001d0ff:	85 c9                	test   ecx,ecx
c001d101:	be 06 00 00 00       	mov    esi,0x6
c001d106:	0f 84 0d 02 00 00    	je     c001d319 <SATA::read(unsigned long long, int, void*)+0x245>
c001d10c:	56                   	push   esi
c001d10d:	56                   	push   esi
c001d10e:	6a 00                	push   0x0
c001d110:	51                   	push   ecx
c001d111:	53                   	push   ebx
c001d112:	52                   	push   edx
c001d113:	50                   	push   eax
c001d114:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d118:	e8 65 fd ff ff       	call   c001ce82 <SATA::access(unsigned long long, int, void*, bool)>
c001d11d:	83 c4 20             	add    esp,0x20
c001d120:	85 c0                	test   eax,eax
c001d122:	89 c6                	mov    esi,eax
c001d124:	0f 85 ea 01 00 00    	jne    c001d314 <SATA::read(unsigned long long, int, void*)+0x240>
c001d12a:	50                   	push   eax
c001d12b:	50                   	push   eax
c001d12c:	6a 0f                	push   0xf
c001d12e:	6a 00                	push   0x0
c001d130:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001d136:	bb 0a 00 00 00       	mov    ebx,0xa
c001d13b:	e8 7d f2 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d140:	5a                   	pop    edx
c001d141:	59                   	pop    ecx
c001d142:	b9 10 27 00 00       	mov    ecx,0x2710
c001d147:	0f b6 c0             	movzx  eax,al
c001d14a:	50                   	push   eax
c001d14b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d150:	99                   	cdq    
c001d151:	f7 f9                	idiv   ecx
c001d153:	99                   	cdq    
c001d154:	f7 fb                	idiv   ebx
c001d156:	8d 42 30             	lea    eax,[edx+0x30]
c001d159:	0f b6 c0             	movzx  eax,al
c001d15c:	50                   	push   eax
c001d15d:	e8 4a f2 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d162:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d168:	5f                   	pop    edi
c001d169:	5d                   	pop    ebp
c001d16a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d16f:	6a 0f                	push   0xf
c001d171:	6a 00                	push   0x0
c001d173:	e8 45 f2 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d178:	5a                   	pop    edx
c001d179:	59                   	pop    ecx
c001d17a:	0f b6 c0             	movzx  eax,al
c001d17d:	50                   	push   eax
c001d17e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d183:	99                   	cdq    
c001d184:	f7 fd                	idiv   ebp
c001d186:	99                   	cdq    
c001d187:	f7 fb                	idiv   ebx
c001d189:	8d 42 30             	lea    eax,[edx+0x30]
c001d18c:	0f b6 c0             	movzx  eax,al
c001d18f:	50                   	push   eax
c001d190:	e8 17 f2 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d195:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d19b:	5f                   	pop    edi
c001d19c:	bf 64 00 00 00       	mov    edi,0x64
c001d1a1:	58                   	pop    eax
c001d1a2:	6a 0f                	push   0xf
c001d1a4:	6a 00                	push   0x0
c001d1a6:	e8 12 f2 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d1ab:	5a                   	pop    edx
c001d1ac:	59                   	pop    ecx
c001d1ad:	0f b6 c0             	movzx  eax,al
c001d1b0:	50                   	push   eax
c001d1b1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d1b6:	99                   	cdq    
c001d1b7:	f7 ff                	idiv   edi
c001d1b9:	99                   	cdq    
c001d1ba:	f7 fb                	idiv   ebx
c001d1bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d1bf:	0f b6 c0             	movzx  eax,al
c001d1c2:	50                   	push   eax
c001d1c3:	e8 e4 f1 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d1c8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d1ce:	58                   	pop    eax
c001d1cf:	5a                   	pop    edx
c001d1d0:	6a 0f                	push   0xf
c001d1d2:	6a 00                	push   0x0
c001d1d4:	e8 e4 f1 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d1d9:	59                   	pop    ecx
c001d1da:	5a                   	pop    edx
c001d1db:	0f b6 c0             	movzx  eax,al
c001d1de:	50                   	push   eax
c001d1df:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d1e4:	99                   	cdq    
c001d1e5:	f7 fb                	idiv   ebx
c001d1e7:	99                   	cdq    
c001d1e8:	f7 fb                	idiv   ebx
c001d1ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d1ed:	0f b6 c0             	movzx  eax,al
c001d1f0:	50                   	push   eax
c001d1f1:	e8 b6 f1 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d1f6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d1fc:	59                   	pop    ecx
c001d1fd:	58                   	pop    eax
c001d1fe:	6a 0f                	push   0xf
c001d200:	6a 00                	push   0x0
c001d202:	e8 b6 f1 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d207:	5a                   	pop    edx
c001d208:	59                   	pop    ecx
c001d209:	0f b6 c0             	movzx  eax,al
c001d20c:	50                   	push   eax
c001d20d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d212:	99                   	cdq    
c001d213:	f7 fb                	idiv   ebx
c001d215:	83 c2 30             	add    edx,0x30
c001d218:	0f b6 d2             	movzx  edx,dl
c001d21b:	52                   	push   edx
c001d21c:	e8 8b f1 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d221:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d227:	58                   	pop    eax
c001d228:	5a                   	pop    edx
c001d229:	6a 0f                	push   0xf
c001d22b:	6a 00                	push   0x0
c001d22d:	e8 8b f1 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d232:	59                   	pop    ecx
c001d233:	b9 10 27 00 00       	mov    ecx,0x2710
c001d238:	5a                   	pop    edx
c001d239:	0f b6 c0             	movzx  eax,al
c001d23c:	50                   	push   eax
c001d23d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d242:	99                   	cdq    
c001d243:	f7 f9                	idiv   ecx
c001d245:	99                   	cdq    
c001d246:	f7 fb                	idiv   ebx
c001d248:	8d 42 30             	lea    eax,[edx+0x30]
c001d24b:	0f b6 c0             	movzx  eax,al
c001d24e:	50                   	push   eax
c001d24f:	e8 58 f1 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d254:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d25a:	59                   	pop    ecx
c001d25b:	58                   	pop    eax
c001d25c:	6a 0f                	push   0xf
c001d25e:	6a 00                	push   0x0
c001d260:	e8 58 f1 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d265:	5a                   	pop    edx
c001d266:	59                   	pop    ecx
c001d267:	0f b6 c0             	movzx  eax,al
c001d26a:	50                   	push   eax
c001d26b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d270:	99                   	cdq    
c001d271:	f7 fd                	idiv   ebp
c001d273:	99                   	cdq    
c001d274:	f7 fb                	idiv   ebx
c001d276:	8d 42 30             	lea    eax,[edx+0x30]
c001d279:	0f b6 c0             	movzx  eax,al
c001d27c:	50                   	push   eax
c001d27d:	e8 2a f1 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d282:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d288:	5d                   	pop    ebp
c001d289:	58                   	pop    eax
c001d28a:	6a 0f                	push   0xf
c001d28c:	6a 00                	push   0x0
c001d28e:	e8 2a f1 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d293:	5a                   	pop    edx
c001d294:	59                   	pop    ecx
c001d295:	0f b6 c0             	movzx  eax,al
c001d298:	50                   	push   eax
c001d299:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d29e:	99                   	cdq    
c001d29f:	f7 ff                	idiv   edi
c001d2a1:	99                   	cdq    
c001d2a2:	f7 fb                	idiv   ebx
c001d2a4:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a7:	0f b6 c0             	movzx  eax,al
c001d2aa:	50                   	push   eax
c001d2ab:	e8 fc f0 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d2b0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2b6:	5f                   	pop    edi
c001d2b7:	5d                   	pop    ebp
c001d2b8:	6a 0f                	push   0xf
c001d2ba:	6a 00                	push   0x0
c001d2bc:	e8 fc f0 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d2c1:	5a                   	pop    edx
c001d2c2:	59                   	pop    ecx
c001d2c3:	0f b6 c0             	movzx  eax,al
c001d2c6:	50                   	push   eax
c001d2c7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d2cc:	99                   	cdq    
c001d2cd:	f7 fb                	idiv   ebx
c001d2cf:	99                   	cdq    
c001d2d0:	f7 fb                	idiv   ebx
c001d2d2:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d5:	0f b6 c0             	movzx  eax,al
c001d2d8:	50                   	push   eax
c001d2d9:	e8 ce f0 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d2de:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	6a 0f                	push   0xf
c001d2e8:	6a 00                	push   0x0
c001d2ea:	e8 ce f0 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d2ef:	5a                   	pop    edx
c001d2f0:	59                   	pop    ecx
c001d2f1:	0f b6 c0             	movzx  eax,al
c001d2f4:	50                   	push   eax
c001d2f5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d2fa:	99                   	cdq    
c001d2fb:	f7 fb                	idiv   ebx
c001d2fd:	83 c2 30             	add    edx,0x30
c001d300:	0f b6 d2             	movzx  edx,dl
c001d303:	52                   	push   edx
c001d304:	e8 a3 f0 ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d309:	83 c4 10             	add    esp,0x10
c001d30c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d312:	eb 05                	jmp    c001d319 <SATA::read(unsigned long long, int, void*)+0x245>
c001d314:	be 01 00 00 00       	mov    esi,0x1
c001d319:	83 c4 0c             	add    esp,0xc
c001d31c:	89 f0                	mov    eax,esi
c001d31e:	5b                   	pop    ebx
c001d31f:	5e                   	pop    esi
c001d320:	5f                   	pop    edi
c001d321:	5d                   	pop    ebp
c001d322:	c3                   	ret    
c001d323:	90                   	nop

c001d324 <SATA::write(unsigned long long, int, void*)>:
c001d324:	55                   	push   ebp
c001d325:	57                   	push   edi
c001d326:	56                   	push   esi
c001d327:	53                   	push   ebx
c001d328:	83 ec 0c             	sub    esp,0xc
c001d32b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d32f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d333:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d337:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d33b:	8d 70 ff             	lea    esi,[eax-0x1]
c001d33e:	b8 04 00 00 00       	mov    eax,0x4
c001d343:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d349:	0f 87 2c 02 00 00    	ja     c001d57b <SATA::write(unsigned long long, int, void*)+0x257>
c001d34f:	85 db                	test   ebx,ebx
c001d351:	b8 06 00 00 00       	mov    eax,0x6
c001d356:	0f 84 1f 02 00 00    	je     c001d57b <SATA::write(unsigned long long, int, void*)+0x257>
c001d35c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d360:	c1 e6 09             	shl    esi,0x9
c001d363:	01 de                	add    esi,ebx
c001d365:	50                   	push   eax
c001d366:	89 d7                	mov    edi,edx
c001d368:	50                   	push   eax
c001d369:	83 c7 01             	add    edi,0x1
c001d36c:	6a 01                	push   0x1
c001d36e:	89 cd                	mov    ebp,ecx
c001d370:	53                   	push   ebx
c001d371:	83 d5 00             	adc    ebp,0x0
c001d374:	6a 01                	push   0x1
c001d376:	81 c3 00 02 00 00    	add    ebx,0x200
c001d37c:	51                   	push   ecx
c001d37d:	52                   	push   edx
c001d37e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d382:	e8 fb fa ff ff       	call   c001ce82 <SATA::access(unsigned long long, int, void*, bool)>
c001d387:	83 c4 20             	add    esp,0x20
c001d38a:	39 f3                	cmp    ebx,esi
c001d38c:	89 fa                	mov    edx,edi
c001d38e:	89 e9                	mov    ecx,ebp
c001d390:	75 d3                	jne    c001d365 <SATA::write(unsigned long long, int, void*)+0x41>
c001d392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d396:	bd 10 27 00 00       	mov    ebp,0x2710
c001d39b:	bb 0a 00 00 00       	mov    ebx,0xa
c001d3a0:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001d3a6:	50                   	push   eax
c001d3a7:	50                   	push   eax
c001d3a8:	6a 0f                	push   0xf
c001d3aa:	6a 00                	push   0x0
c001d3ac:	e8 0c f0 ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d3b1:	5a                   	pop    edx
c001d3b2:	59                   	pop    ecx
c001d3b3:	0f b6 c0             	movzx  eax,al
c001d3b6:	50                   	push   eax
c001d3b7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d3bc:	99                   	cdq    
c001d3bd:	f7 fd                	idiv   ebp
c001d3bf:	99                   	cdq    
c001d3c0:	f7 fb                	idiv   ebx
c001d3c2:	8d 42 30             	lea    eax,[edx+0x30]
c001d3c5:	0f b6 c0             	movzx  eax,al
c001d3c8:	50                   	push   eax
c001d3c9:	e8 de ef ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d3ce:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3d4:	5e                   	pop    esi
c001d3d5:	5f                   	pop    edi
c001d3d6:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3db:	6a 0f                	push   0xf
c001d3dd:	6a 00                	push   0x0
c001d3df:	e8 d9 ef ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d3e4:	5a                   	pop    edx
c001d3e5:	59                   	pop    ecx
c001d3e6:	0f b6 c0             	movzx  eax,al
c001d3e9:	50                   	push   eax
c001d3ea:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d3ef:	99                   	cdq    
c001d3f0:	f7 ff                	idiv   edi
c001d3f2:	99                   	cdq    
c001d3f3:	f7 fb                	idiv   ebx
c001d3f5:	8d 42 30             	lea    eax,[edx+0x30]
c001d3f8:	0f b6 c0             	movzx  eax,al
c001d3fb:	50                   	push   eax
c001d3fc:	e8 ab ef ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d401:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d407:	5e                   	pop    esi
c001d408:	be 64 00 00 00       	mov    esi,0x64
c001d40d:	58                   	pop    eax
c001d40e:	6a 0f                	push   0xf
c001d410:	6a 00                	push   0x0
c001d412:	e8 a6 ef ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d417:	5a                   	pop    edx
c001d418:	59                   	pop    ecx
c001d419:	0f b6 c0             	movzx  eax,al
c001d41c:	50                   	push   eax
c001d41d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d422:	99                   	cdq    
c001d423:	f7 fe                	idiv   esi
c001d425:	99                   	cdq    
c001d426:	f7 fb                	idiv   ebx
c001d428:	8d 42 30             	lea    eax,[edx+0x30]
c001d42b:	0f b6 c0             	movzx  eax,al
c001d42e:	50                   	push   eax
c001d42f:	e8 78 ef ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d434:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d43a:	58                   	pop    eax
c001d43b:	5a                   	pop    edx
c001d43c:	6a 0f                	push   0xf
c001d43e:	6a 00                	push   0x0
c001d440:	e8 78 ef ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d445:	59                   	pop    ecx
c001d446:	5a                   	pop    edx
c001d447:	0f b6 c0             	movzx  eax,al
c001d44a:	50                   	push   eax
c001d44b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d450:	99                   	cdq    
c001d451:	f7 fb                	idiv   ebx
c001d453:	99                   	cdq    
c001d454:	f7 fb                	idiv   ebx
c001d456:	8d 42 30             	lea    eax,[edx+0x30]
c001d459:	0f b6 c0             	movzx  eax,al
c001d45c:	50                   	push   eax
c001d45d:	e8 4a ef ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d462:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d468:	59                   	pop    ecx
c001d469:	58                   	pop    eax
c001d46a:	6a 0f                	push   0xf
c001d46c:	6a 00                	push   0x0
c001d46e:	e8 4a ef ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d473:	5a                   	pop    edx
c001d474:	59                   	pop    ecx
c001d475:	0f b6 c0             	movzx  eax,al
c001d478:	50                   	push   eax
c001d479:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d47e:	99                   	cdq    
c001d47f:	f7 fb                	idiv   ebx
c001d481:	83 c2 30             	add    edx,0x30
c001d484:	0f b6 d2             	movzx  edx,dl
c001d487:	52                   	push   edx
c001d488:	e8 1f ef ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d48d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d493:	58                   	pop    eax
c001d494:	5a                   	pop    edx
c001d495:	6a 0f                	push   0xf
c001d497:	6a 00                	push   0x0
c001d499:	e8 1f ef ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d49e:	59                   	pop    ecx
c001d49f:	5a                   	pop    edx
c001d4a0:	0f b6 c0             	movzx  eax,al
c001d4a3:	50                   	push   eax
c001d4a4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d4a9:	99                   	cdq    
c001d4aa:	f7 fd                	idiv   ebp
c001d4ac:	99                   	cdq    
c001d4ad:	f7 fb                	idiv   ebx
c001d4af:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b2:	0f b6 c0             	movzx  eax,al
c001d4b5:	50                   	push   eax
c001d4b6:	e8 f1 ee ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d4bb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d4c1:	59                   	pop    ecx
c001d4c2:	5d                   	pop    ebp
c001d4c3:	6a 0f                	push   0xf
c001d4c5:	6a 00                	push   0x0
c001d4c7:	e8 f1 ee ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d4cc:	5a                   	pop    edx
c001d4cd:	59                   	pop    ecx
c001d4ce:	0f b6 c0             	movzx  eax,al
c001d4d1:	50                   	push   eax
c001d4d2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d4d7:	99                   	cdq    
c001d4d8:	f7 ff                	idiv   edi
c001d4da:	99                   	cdq    
c001d4db:	f7 fb                	idiv   ebx
c001d4dd:	8d 42 30             	lea    eax,[edx+0x30]
c001d4e0:	0f b6 c0             	movzx  eax,al
c001d4e3:	50                   	push   eax
c001d4e4:	e8 c3 ee ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d4e9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d4ef:	5f                   	pop    edi
c001d4f0:	5d                   	pop    ebp
c001d4f1:	6a 0f                	push   0xf
c001d4f3:	6a 00                	push   0x0
c001d4f5:	e8 c3 ee ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d4fa:	5a                   	pop    edx
c001d4fb:	59                   	pop    ecx
c001d4fc:	0f b6 c0             	movzx  eax,al
c001d4ff:	50                   	push   eax
c001d500:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d505:	99                   	cdq    
c001d506:	f7 fe                	idiv   esi
c001d508:	99                   	cdq    
c001d509:	f7 fb                	idiv   ebx
c001d50b:	8d 42 30             	lea    eax,[edx+0x30]
c001d50e:	0f b6 c0             	movzx  eax,al
c001d511:	50                   	push   eax
c001d512:	e8 95 ee ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d517:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d51d:	5e                   	pop    esi
c001d51e:	5f                   	pop    edi
c001d51f:	6a 0f                	push   0xf
c001d521:	6a 00                	push   0x0
c001d523:	e8 95 ee ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d528:	5d                   	pop    ebp
c001d529:	5a                   	pop    edx
c001d52a:	0f b6 c0             	movzx  eax,al
c001d52d:	50                   	push   eax
c001d52e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d533:	99                   	cdq    
c001d534:	f7 fb                	idiv   ebx
c001d536:	99                   	cdq    
c001d537:	f7 fb                	idiv   ebx
c001d539:	8d 42 30             	lea    eax,[edx+0x30]
c001d53c:	0f b6 c0             	movzx  eax,al
c001d53f:	50                   	push   eax
c001d540:	e8 67 ee ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d545:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d54b:	59                   	pop    ecx
c001d54c:	5e                   	pop    esi
c001d54d:	6a 0f                	push   0xf
c001d54f:	6a 00                	push   0x0
c001d551:	e8 67 ee ff ff       	call   c001c3bd <combineColours(unsigned char, unsigned char)>
c001d556:	5f                   	pop    edi
c001d557:	5d                   	pop    ebp
c001d558:	0f b6 c0             	movzx  eax,al
c001d55b:	50                   	push   eax
c001d55c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d561:	99                   	cdq    
c001d562:	f7 fb                	idiv   ebx
c001d564:	83 c2 30             	add    edx,0x30
c001d567:	0f b6 d2             	movzx  edx,dl
c001d56a:	52                   	push   edx
c001d56b:	e8 3c ee ff ff       	call   c001c3ac <combineCharAndColour(char, unsigned char)>
c001d570:	83 c4 10             	add    esp,0x10
c001d573:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d579:	31 c0                	xor    eax,eax
c001d57b:	83 c4 0c             	add    esp,0xc
c001d57e:	5b                   	pop    ebx
c001d57f:	5e                   	pop    esi
c001d580:	5f                   	pop    edi
c001d581:	5d                   	pop    ebp
c001d582:	c3                   	ret    
c001d583:	90                   	nop

c001d584 <SATAPI::write(unsigned long long, int, void*)>:
c001d584:	b8 03 00 00 00       	mov    eax,0x3
c001d589:	c3                   	ret    

c001d58a <SATAPI::close(int, int, void*)>:
c001d58a:	83 ec 0c             	sub    esp,0xc
c001d58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d591:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d597:	85 c0                	test   eax,eax
c001d599:	74 0c                	je     c001d5a7 <SATAPI::close(int, int, void*)+0x1d>
c001d59b:	8b 10                	mov    edx,DWORD PTR [eax]
c001d59d:	83 ec 0c             	sub    esp,0xc
c001d5a0:	50                   	push   eax
c001d5a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	31 c0                	xor    eax,eax
c001d5a9:	83 c4 0c             	add    esp,0xc
c001d5ac:	c3                   	ret    
c001d5ad:	90                   	nop

c001d5ae <SATAPI::SATAPI()>:
c001d5ae:	83 ec 0c             	sub    esp,0xc
c001d5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b5:	83 ec 04             	sub    esp,0x4
c001d5b8:	68 00 08 00 00       	push   0x800
c001d5bd:	68 30 24 02 c0       	push   0xc0022430
c001d5c2:	50                   	push   eax
c001d5c3:	e8 3a ee fe ff       	call   c000c402 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5c8:	83 c4 10             	add    esp,0x10
c001d5cb:	ba 24 25 02 c0       	mov    edx,0xc0022524
c001d5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d4:	89 10                	mov    DWORD PTR [eax],edx
c001d5d6:	90                   	nop
c001d5d7:	83 c4 0c             	add    esp,0xc
c001d5da:	c3                   	ret    
c001d5db:	90                   	nop

c001d5dc <SATAPI::diskRemoved()>:
c001d5dc:	c3                   	ret    
c001d5dd:	90                   	nop

c001d5de <SATAPI::diskInserted()>:
c001d5de:	83 ec 18             	sub    esp,0x18
c001d5e1:	68 3c 24 02 c0       	push   0xc002243c
c001d5e6:	e8 13 d3 fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d5eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ef:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d5f6:	83 c4 1c             	add    esp,0x1c
c001d5f9:	c3                   	ret    

c001d5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d5fa:	55                   	push   ebp
c001d5fb:	57                   	push   edi
c001d5fc:	56                   	push   esi
c001d5fd:	53                   	push   ebx
c001d5fe:	83 ec 34             	sub    esp,0x34
c001d601:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d605:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d609:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d60d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d611:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d615:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d61b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d621:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d625:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d62f:	83 c0 02             	add    eax,0x2
c001d632:	c1 e0 07             	shl    eax,0x7
c001d635:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d63d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d641:	c1 e0 07             	shl    eax,0x7
c001d644:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d648:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d64c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d656:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d65a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d660:	e8 ff e4 ff ff       	call   c001bb64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	89 c2                	mov    edx,eax
c001d66a:	b8 01 00 00 00       	mov    eax,0x1
c001d66f:	83 fa ff             	cmp    edx,0xffffffff
c001d672:	0f 84 5f 02 00 00    	je     c001d8d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d680:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d686:	8b 00                	mov    eax,DWORD PTR [eax]
c001d688:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d68e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d694:	89 d1                	mov    ecx,edx
c001d696:	c1 e1 05             	shl    ecx,0x5
c001d699:	01 c8                	add    eax,ecx
c001d69b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d69d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d6a3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d6a9:	89 08                	mov    DWORD PTR [eax],ecx
c001d6ab:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d6b1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d6b7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d6bd:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d6c0:	50                   	push   eax
c001d6c1:	68 90 00 00 00       	push   0x90
c001d6c6:	6a 00                	push   0x0
c001d6c8:	53                   	push   ebx
c001d6c9:	e8 22 2e fe ff       	call   c00004f0 <memset>
c001d6ce:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d6d1:	b9 0c 00 00 00       	mov    ecx,0xc
c001d6d6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d6da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6dc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d6e2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d6e6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d6ea:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d6f0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d6f4:	48                   	dec    eax
c001d6f5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d6fa:	89 c1                	mov    ecx,eax
c001d6fc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d702:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d707:	09 c8                	or     eax,ecx
c001d709:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d70f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d715:	83 c8 80             	or     eax,0xffffff80
c001d718:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d71e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d721:	25 00 7f 00 00       	and    eax,0x7f00
c001d726:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d72b:	66 89 03             	mov    WORD PTR [ebx],ax
c001d72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d732:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d73a:	c1 e8 10             	shr    eax,0x10
c001d73d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d744:	c1 e8 18             	shr    eax,0x18
c001d747:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d74a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d74e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d755:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d758:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d75c:	83 c4 10             	add    esp,0x10
c001d75f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d763:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d767:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d76b:	31 c0                	xor    eax,eax
c001d76d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d773:	80 e1 88             	and    cl,0x88
c001d776:	74 0a                	je     c001d782 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d778:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d77d:	74 0a                	je     c001d789 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d77f:	40                   	inc    eax
c001d780:	eb eb                	jmp    c001d76d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d782:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d787:	75 43                	jne    c001d7cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d789:	83 ec 0c             	sub    esp,0xc
c001d78c:	68 54 24 02 c0       	push   0xc0022454
c001d791:	e8 68 d1 fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d796:	58                   	pop    eax
c001d797:	5a                   	pop    edx
c001d798:	68 69 24 02 c0       	push   0xc0022469
c001d79d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d7a3:	e8 f6 b2 fe ff       	call   c0008a9e <VgaText::puts(char const*)>
c001d7a8:	59                   	pop    ecx
c001d7a9:	5b                   	pop    ebx
c001d7aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d7ae:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d7b4:	e8 45 e4 ff ff       	call   c001bbfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d7b9:	5e                   	pop    esi
c001d7ba:	5f                   	pop    edi
c001d7bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d7bf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d7c5:	e8 14 e4 ff ff       	call   c001bbde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d7ca:	eb 48                	jmp    c001d814 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001d7cc:	b8 01 00 00 00       	mov    eax,0x1
c001d7d1:	88 d1                	mov    cl,dl
c001d7d3:	d3 e0                	shl    eax,cl
c001d7d5:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001d7da:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001d7e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d7e4:	89 c7                	mov    edi,eax
c001d7e6:	c1 e3 07             	shl    ebx,0x7
c001d7e9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d7ed:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d7f3:	85 c7                	test   edi,eax
c001d7f5:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d7fb:	0f 84 a3 00 00 00    	je     c001d8a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001d801:	0f ba e0 1e          	bt     eax,0x1e
c001d805:	73 1a                	jae    c001d821 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001d807:	83 ec 0c             	sub    esp,0xc
c001d80a:	68 7b 24 02 c0       	push   0xc002247b
c001d80f:	e8 ea d0 fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	b8 01 00 00 00       	mov    eax,0x1
c001d81c:	e9 b6 00 00 00       	jmp    c001d8d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001d821:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001d827:	83 f8 0d             	cmp    eax,0xd
c001d82a:	77 0a                	ja     c001d836 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001d82c:	83 ec 0c             	sub    esp,0xc
c001d82f:	68 c8 00 00 00       	push   0xc8
c001d834:	eb 28                	jmp    c001d85e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d836:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001d83c:	83 f8 0d             	cmp    eax,0xd
c001d83f:	77 0a                	ja     c001d84b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001d841:	83 ec 0c             	sub    esp,0xc
c001d844:	68 58 02 00 00       	push   0x258
c001d849:	eb 13                	jmp    c001d85e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d84b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001d851:	83 f8 06             	cmp    eax,0x6
c001d854:	77 10                	ja     c001d866 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001d856:	83 ec 0c             	sub    esp,0xc
c001d859:	68 dc 05 00 00       	push   0x5dc
c001d85e:	e8 dd 7d ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001d863:	83 c4 10             	add    esp,0x10
c001d866:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d86a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d86d:	75 06                	jne    c001d875 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001d86f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d873:	74 15                	je     c001d88a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d875:	83 fe 06             	cmp    esi,0x6
c001d878:	77 10                	ja     c001d88a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001d87a:	83 ec 0c             	sub    esp,0xc
c001d87d:	68 c4 09 00 00       	push   0x9c4
c001d882:	e8 b9 7d ff ff       	call   c0015640 <milliTenthSleep(unsigned int)>
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	46                   	inc    esi
c001d88b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001d891:	0f 85 56 ff ff ff    	jne    c001d7ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001d897:	83 ec 0c             	sub    esp,0xc
c001d89a:	68 8e 24 02 c0       	push   0xc002248e
c001d89f:	e9 6b ff ff ff       	jmp    c001d80f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d8a4:	0f ba e0 1e          	bt     eax,0x1e
c001d8a8:	73 0d                	jae    c001d8b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001d8aa:	83 ec 0c             	sub    esp,0xc
c001d8ad:	68 a2 24 02 c0       	push   0xc00224a2
c001d8b2:	e9 58 ff ff ff       	jmp    c001d80f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001d8b7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d8bc:	74 17                	je     c001d8d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d8be:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d8c3:	74 10                	je     c001d8d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d8c5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d8cb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d8cf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d8d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8d5:	31 c0                	xor    eax,eax
c001d8d7:	83 c4 2c             	add    esp,0x2c
c001d8da:	5b                   	pop    ebx
c001d8db:	5e                   	pop    esi
c001d8dc:	5f                   	pop    edi
c001d8dd:	5d                   	pop    ebp
c001d8de:	c3                   	ret    
c001d8df:	90                   	nop

c001d8e0 <SATAPI::eject()>:
c001d8e0:	57                   	push   edi
c001d8e1:	b9 03 00 00 00       	mov    ecx,0x3
c001d8e6:	83 ec 18             	sub    esp,0x18
c001d8e9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8ed:	fc                   	cld    
c001d8ee:	31 c0                	xor    eax,eax
c001d8f0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8f2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8f7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8fc:	50                   	push   eax
c001d8fd:	6a 00                	push   0x0
c001d8ff:	6a 00                	push   0x0
c001d901:	6a 00                	push   0x0
c001d903:	6a 00                	push   0x0
c001d905:	6a 02                	push   0x2
c001d907:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d90b:	50                   	push   eax
c001d90c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d910:	e8 e5 fc ff ff       	call   c001d5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d915:	83 c4 38             	add    esp,0x38
c001d918:	31 c0                	xor    eax,eax
c001d91a:	5f                   	pop    edi
c001d91b:	c3                   	ret    

c001d91c <SATAPI::detectMedia()>:
c001d91c:	53                   	push   ebx
c001d91d:	83 ec 14             	sub    esp,0x14
c001d920:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d924:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d92a:	e8 59 04 ff ff       	call   c000dd88 <VCache::writeWriteBuffer()>
c001d92f:	59                   	pop    ecx
c001d930:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d936:	e8 3d 04 ff ff       	call   c000dd78 <VCache::invalidateReadBuffer()>
c001d93b:	c7 04 24 b7 24 02 c0 	mov    DWORD PTR [esp],0xc00224b7
c001d942:	e8 b7 cf fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001d947:	83 c4 10             	add    esp,0x10
c001d94a:	31 c0                	xor    eax,eax
c001d94c:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d953:	85 d2                	test   edx,edx
c001d955:	74 0f                	je     c001d966 <SATAPI::detectMedia()+0x4a>
c001d957:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d95d:	75 07                	jne    c001d966 <SATAPI::detectMedia()+0x4a>
c001d95f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d966:	40                   	inc    eax
c001d967:	83 f8 1a             	cmp    eax,0x1a
c001d96a:	75 e0                	jne    c001d94c <SATAPI::detectMedia()+0x30>
c001d96c:	83 c4 08             	add    esp,0x8
c001d96f:	5b                   	pop    ebx
c001d970:	c3                   	ret    
c001d971:	90                   	nop

c001d972 <SATAPI::open(int, int, void*)>:
c001d972:	56                   	push   esi
c001d973:	53                   	push   ebx
c001d974:	51                   	push   ecx
c001d975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d97d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d987:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d98d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d991:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d99b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9a5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9ac:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d9b2:	e8 1e a4 fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001d9b7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d9bd:	89 c6                	mov    esi,eax
c001d9bf:	e8 11 a4 fe ff       	call   c0007dd5 <Phys::allocatePage()>
c001d9c4:	81 c6 00 10 00 00    	add    esi,0x1000
c001d9ca:	39 c6                	cmp    esi,eax
c001d9cc:	74 10                	je     c001d9de <SATAPI::open(int, int, void*)+0x6c>
c001d9ce:	83 ec 0c             	sub    esp,0xc
c001d9d1:	68 cc 24 02 c0       	push   0xc00224cc
c001d9d6:	e8 42 31 ff ff       	call   c0010b1d <KePanic(char const*)>
c001d9db:	83 c4 10             	add    esp,0x10
c001d9de:	83 ec 0c             	sub    esp,0xc
c001d9e1:	6a 02                	push   0x2
c001d9e3:	e8 01 bc fe ff       	call   c00095e9 <Virt::allocateKernelVirtualPages(int)>
c001d9e8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d9ee:	6a 03                	push   0x3
c001d9f0:	50                   	push   eax
c001d9f1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d9f7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d9fd:	e8 f0 c2 fe ff       	call   c0009cf2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001da02:	83 c4 14             	add    esp,0x14
c001da05:	68 78 01 00 00       	push   0x178
c001da0a:	e8 bc a0 fe ff       	call   c0007acb <malloc>
c001da0f:	83 c4 0c             	add    esp,0xc
c001da12:	6a 00                	push   0x0
c001da14:	68 ff ff ff 7f       	push   0x7fffffff
c001da19:	6a 00                	push   0x0
c001da1b:	6a 00                	push   0x0
c001da1d:	53                   	push   ebx
c001da1e:	68 e2 24 02 c0       	push   0xc00224e2
c001da23:	89 c6                	mov    esi,eax
c001da25:	50                   	push   eax
c001da26:	e8 b7 f7 fe ff       	call   c000d1e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da2b:	83 c4 14             	add    esp,0x14
c001da2e:	56                   	push   esi
c001da2f:	e8 6e f8 fe ff       	call   c000d2a2 <LogicalDisk::assignDriveLetter()>
c001da34:	5a                   	pop    edx
c001da35:	59                   	pop    ecx
c001da36:	0f be c0             	movsx  eax,al
c001da39:	50                   	push   eax
c001da3a:	68 34 23 02 c0       	push   0xc0022334
c001da3f:	e8 ba ce fe ff       	call   c000a8fe <Dbg::kprintf(char const*, ...)>
c001da44:	58                   	pop    eax
c001da45:	5a                   	pop    edx
c001da46:	56                   	push   esi
c001da47:	53                   	push   ebx
c001da48:	e8 e7 e5 fe ff       	call   c000c034 <Device::addChild(Device*)>
c001da4d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001da53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da56:	e8 0f ea fe ff       	call   c000c46a <PhysicalDisk::startCache()>
c001da5b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001da62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da65:	e8 b2 fe ff ff       	call   c001d91c <SATAPI::detectMedia()>
c001da6a:	83 c4 14             	add    esp,0x14
c001da6d:	31 c0                	xor    eax,eax
c001da6f:	5b                   	pop    ebx
c001da70:	5e                   	pop    esi
c001da71:	c3                   	ret    

c001da72 <SATAPI::read(unsigned long long, int, void*)>:
c001da72:	55                   	push   ebp
c001da73:	57                   	push   edi
c001da74:	56                   	push   esi
c001da75:	53                   	push   ebx
c001da76:	83 ec 3c             	sub    esp,0x3c
c001da79:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001da7d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001da81:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001da85:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001da89:	83 fd 04             	cmp    ebp,0x4
c001da8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da94:	7e 10                	jle    c001daa6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	68 f0 24 02 c0       	push   0xc00224f0
c001da9e:	e8 7a 30 ff ff       	call   c0010b1d <KePanic(char const*)>
c001daa3:	83 c4 10             	add    esp,0x10
c001daa6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001daac:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dab2:	51                   	push   ecx
c001dab3:	50                   	push   eax
c001dab4:	83 c0 02             	add    eax,0x2
c001dab7:	c1 e0 07             	shl    eax,0x7
c001daba:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001dac0:	50                   	push   eax
c001dac1:	52                   	push   edx
c001dac2:	e8 61 e1 ff ff       	call   c001bc28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dac7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001dacb:	b9 03 00 00 00       	mov    ecx,0x3
c001dad0:	fc                   	cld    
c001dad1:	31 c0                	xor    eax,eax
c001dad3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dad5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001dada:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001dadf:	83 c4 0c             	add    esp,0xc
c001dae2:	6a 00                	push   0x0
c001dae4:	6a 00                	push   0x0
c001dae6:	6a 00                	push   0x0
c001dae8:	6a 00                	push   0x0
c001daea:	6a 02                	push   0x2
c001daec:	8d 44 24 30          	lea    eax,[esp+0x30]
c001daf0:	50                   	push   eax
c001daf1:	53                   	push   ebx
c001daf2:	e8 03 fb ff ff       	call   c001d5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001daf7:	83 c4 20             	add    esp,0x20
c001dafa:	85 c0                	test   eax,eax
c001dafc:	89 c6                	mov    esi,eax
c001dafe:	75 46                	jne    c001db46 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001db00:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001db04:	b9 03 00 00 00       	mov    ecx,0x3
c001db09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db0f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001db14:	0f c8                	bswap  eax
c001db16:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001db1a:	89 e8                	mov    eax,ebp
c001db1c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001db20:	50                   	push   eax
c001db21:	55                   	push   ebp
c001db22:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001db26:	c1 e5 0b             	shl    ebp,0xb
c001db29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db31:	55                   	push   ebp
c001db32:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001db36:	50                   	push   eax
c001db37:	53                   	push   ebx
c001db38:	e8 bd fa ff ff       	call   c001d5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db3d:	83 c4 20             	add    esp,0x20
c001db40:	85 c0                	test   eax,eax
c001db42:	89 c6                	mov    esi,eax
c001db44:	74 0c                	je     c001db52 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001db46:	83 ec 0c             	sub    esp,0xc
c001db49:	53                   	push   ebx
c001db4a:	e8 cd fd ff ff       	call   c001d91c <SATAPI::detectMedia()>
c001db4f:	83 c4 10             	add    esp,0x10
c001db52:	83 c4 3c             	add    esp,0x3c
c001db55:	89 f0                	mov    eax,esi
c001db57:	5b                   	pop    ebx
c001db58:	5e                   	pop    esi
c001db59:	5f                   	pop    edi
c001db5a:	5d                   	pop    ebp
c001db5b:	c3                   	ret    

c001db5c <IOAPIC::close(int, int, void*)>:
c001db5c:	b8 00 00 00 00       	mov    eax,0x0
c001db61:	c3                   	ret    

c001db62 <apicGetBase()>:
c001db62:	55                   	push   ebp
c001db63:	89 e5                	mov    ebp,esp
c001db65:	83 ec 18             	sub    esp,0x18
c001db68:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001db6d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db73:	83 e0 08             	and    eax,0x8
c001db76:	0f b6 c0             	movzx  eax,al
c001db79:	85 c0                	test   eax,eax
c001db7b:	75 07                	jne    c001db84 <apicGetBase()+0x22>
c001db7d:	b8 00 00 00 00       	mov    eax,0x0
c001db82:	eb 21                	jmp    c001dba5 <apicGetBase()+0x43>
c001db84:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001db89:	83 ec 08             	sub    esp,0x8
c001db8c:	6a 1b                	push   0x1b
c001db8e:	50                   	push   eax
c001db8f:	e8 46 95 fe ff       	call   c00070da <Computer::rdmsr(unsigned int)>
c001db94:	83 c4 10             	add    esp,0x10
c001db97:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db9a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001db9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dba0:	25 00 00 ff ff       	and    eax,0xffff0000
c001dba5:	c9                   	leave  
c001dba6:	c3                   	ret    
c001dba7:	90                   	nop

c001dba8 <IOAPIC::IOAPIC()>:
c001dba8:	83 ec 0c             	sub    esp,0xc
c001dbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbaf:	83 ec 08             	sub    esp,0x8
c001dbb2:	68 54 25 02 c0       	push   0xc0022554
c001dbb7:	50                   	push   eax
c001dbb8:	e8 0f e6 fe ff       	call   c000c1cc <Device::Device(char const*)>
c001dbbd:	83 c4 10             	add    esp,0x10
c001dbc0:	ba 64 25 02 c0       	mov    edx,0xc0022564
c001dbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc9:	89 10                	mov    DWORD PTR [eax],edx
c001dbcb:	90                   	nop
c001dbcc:	83 c4 0c             	add    esp,0xc
c001dbcf:	c3                   	ret    

c001dbd0 <apicOpen()>:
c001dbd0:	55                   	push   ebp
c001dbd1:	89 e5                	mov    ebp,esp
c001dbd3:	53                   	push   ebx
c001dbd4:	83 ec 34             	sub    esp,0x34
c001dbd7:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001dbdc:	83 f0 01             	xor    eax,0x1
c001dbdf:	0f b6 c0             	movzx  eax,al
c001dbe2:	85 c0                	test   eax,eax
c001dbe4:	0f 84 a3 00 00 00    	je     c001dc8d <apicOpen()+0xbd>
c001dbea:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dbee:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001dbf3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dbf7:	0f b6 c0             	movzx  eax,al
c001dbfa:	39 c2                	cmp    edx,eax
c001dbfc:	0f 83 84 00 00 00    	jae    c001dc86 <apicOpen()+0xb6>
c001dc02:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dc09:	83 ec 0c             	sub    esp,0xc
c001dc0c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001dc0f:	e8 b7 9e fe ff       	call   c0007acb <malloc>
c001dc14:	83 c4 10             	add    esp,0x10
c001dc17:	89 c3                	mov    ebx,eax
c001dc19:	83 ec 0c             	sub    esp,0xc
c001dc1c:	53                   	push   ebx
c001dc1d:	e8 86 ff ff ff       	call   c001dba8 <IOAPIC::IOAPIC()>
c001dc22:	83 c4 10             	add    esp,0x10
c001dc25:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001dc28:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001dc2c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc2f:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001dc36:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001dc3b:	83 c0 01             	add    eax,0x1
c001dc3e:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001dc43:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001dc48:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001dc4e:	83 ec 08             	sub    esp,0x8
c001dc51:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dc54:	50                   	push   eax
c001dc55:	e8 da e3 fe ff       	call   c000c034 <Device::addChild(Device*)>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc60:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc62:	83 c0 08             	add    eax,0x8
c001dc65:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc67:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dc6b:	6a 00                	push   0x0
c001dc6d:	6a 00                	push   0x0
c001dc6f:	52                   	push   edx
c001dc70:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dc73:	ff d0                	call   eax
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dc7b:	83 c0 01             	add    eax,0x1
c001dc7e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001dc81:	e9 68 ff ff ff       	jmp    c001dbee <apicOpen()+0x1e>
c001dc86:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001dc8d:	e8 d0 fe ff ff       	call   c001db62 <apicGetBase()>
c001dc92:	05 f0 00 00 00       	add    eax,0xf0
c001dc97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dc9a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dc9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc9f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dca2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001dca9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001dcb0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dcb3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dcb6:	89 10                	mov    DWORD PTR [eax],edx
c001dcb8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dcbf:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001dcc4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dcc7:	7d 7c                	jge    c001dd45 <apicOpen()+0x175>
c001dcc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dccc:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dcd3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001dcd6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dcd9:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dce0:	c1 e8 08             	shr    eax,0x8
c001dce3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001dce7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dcea:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001dcf1:	c1 e8 18             	shr    eax,0x18
c001dcf4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001dcf7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001dcfb:	3d ff 00 00 00       	cmp    eax,0xff
c001dd00:	75 3a                	jne    c001dd3c <apicOpen()+0x16c>
c001dd02:	e8 5b fe ff ff       	call   c001db62 <apicGetBase()>
c001dd07:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001dd0b:	83 fa 01             	cmp    edx,0x1
c001dd0e:	75 07                	jne    c001dd17 <apicOpen()+0x147>
c001dd10:	ba 60 03 00 00       	mov    edx,0x360
c001dd15:	eb 05                	jmp    c001dd1c <apicOpen()+0x14c>
c001dd17:	ba 50 03 00 00       	mov    edx,0x350
c001dd1c:	01 d0                	add    eax,edx
c001dd1e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dd21:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd24:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd26:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001dd29:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001dd30:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001dd34:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd37:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dd3a:	89 10                	mov    DWORD PTR [eax],edx
c001dd3c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001dd40:	e9 7a ff ff ff       	jmp    c001dcbf <apicOpen()+0xef>
c001dd45:	90                   	nop
c001dd46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dd49:	c9                   	leave  
c001dd4a:	c3                   	ret    
c001dd4b:	90                   	nop

c001dd4c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001dd4c:	55                   	push   ebp
c001dd4d:	89 e5                	mov    ebp,esp
c001dd4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd58:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dd5b:	72 1d                	jb     c001dd7a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dd5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd60:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dd66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd69:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dd6f:	01 d0                	add    eax,edx
c001dd71:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dd74:	73 04                	jae    c001dd7a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dd76:	b0 01                	mov    al,0x1
c001dd78:	eb 02                	jmp    c001dd7c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001dd7a:	b0 00                	mov    al,0x0
c001dd7c:	5d                   	pop    ebp
c001dd7d:	c3                   	ret    

c001dd7e <IOAPIC::read(int)>:
c001dd7e:	55                   	push   ebp
c001dd7f:	89 e5                	mov    ebp,esp
c001dd81:	83 ec 10             	sub    esp,0x10
c001dd84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dd8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dd90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd93:	0f b6 d0             	movzx  edx,al
c001dd96:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd99:	89 10                	mov    DWORD PTR [eax],edx
c001dd9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd9e:	83 c0 10             	add    eax,0x10
c001dda1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dda3:	c9                   	leave  
c001dda4:	c3                   	ret    
c001dda5:	90                   	nop

c001dda6 <IOAPIC::open(int, int, void*)>:
c001dda6:	55                   	push   ebp
c001dda7:	89 e5                	mov    ebp,esp
c001dda9:	57                   	push   edi
c001ddaa:	56                   	push   esi
c001ddab:	53                   	push   ebx
c001ddac:	83 ec 04             	sub    esp,0x4
c001ddaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ddb5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddc4:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001ddcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ddd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddd7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dddd:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001dde4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dde7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddf0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ddf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddf9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ddff:	0f b6 f0             	movzx  esi,al
c001de02:	89 d0                	mov    eax,edx
c001de04:	ba 00 00 00 00       	mov    edx,0x0
c001de09:	89 c7                	mov    edi,eax
c001de0b:	83 e7 ff             	and    edi,0xffffffff
c001de0e:	89 f9                	mov    ecx,edi
c001de10:	0f b6 da             	movzx  ebx,dl
c001de13:	89 c8                	mov    eax,ecx
c001de15:	89 da                	mov    edx,ebx
c001de17:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001de1a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001de1d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001de21:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001de25:	83 e0 00             	and    eax,0x0
c001de28:	09 d0                	or     eax,edx
c001de2a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001de2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de31:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de37:	8d 50 01             	lea    edx,[eax+0x1]
c001de3a:	88 d1                	mov    cl,dl
c001de3c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001de3f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001de45:	0f b6 d0             	movzx  edx,al
c001de48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de4b:	83 c2 08             	add    edx,0x8
c001de4e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001de52:	0f b6 c9             	movzx  ecx,cl
c001de55:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001de5b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001de5f:	6a 01                	push   0x1
c001de61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de64:	e8 15 ff ff ff       	call   c001dd7e <IOAPIC::read(int)>
c001de69:	83 c4 08             	add    esp,0x8
c001de6c:	c1 f8 10             	sar    eax,0x10
c001de6f:	0f b6 c0             	movzx  eax,al
c001de72:	8d 50 01             	lea    edx,[eax+0x1]
c001de75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de78:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001de7e:	b8 00 00 00 00       	mov    eax,0x0
c001de83:	8d 65 f4             	lea    esp,[ebp-0xc]
c001de86:	5b                   	pop    ebx
c001de87:	5e                   	pop    esi
c001de88:	5f                   	pop    edi
c001de89:	5d                   	pop    ebp
c001de8a:	c3                   	ret    
c001de8b:	90                   	nop

c001de8c <IOAPIC::write(int, int)>:
c001de8c:	55                   	push   ebp
c001de8d:	89 e5                	mov    ebp,esp
c001de8f:	83 ec 10             	sub    esp,0x10
c001de92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001de9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001de9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dea1:	0f b6 d0             	movzx  edx,al
c001dea4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dea7:	89 10                	mov    DWORD PTR [eax],edx
c001dea9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001deac:	8d 50 10             	lea    edx,[eax+0x10]
c001deaf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001deb2:	89 02                	mov    DWORD PTR [edx],eax
c001deb4:	90                   	nop
c001deb5:	c9                   	leave  
c001deb6:	c3                   	ret    
c001deb7:	90                   	nop

c001deb8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001deb8:	55                   	push   ebp
c001deb9:	89 e5                	mov    ebp,esp
c001debb:	53                   	push   ebx
c001debc:	83 ec 2c             	sub    esp,0x2c
c001debf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dec2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dec5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001dec8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001decb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dece:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ded1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ded4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ded7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001deda:	88 d8                	mov    al,bl
c001dedc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dedf:	88 c8                	mov    al,cl
c001dee1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dee4:	88 d0                	mov    al,dl
c001dee6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dee9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001deed:	83 c0 08             	add    eax,0x8
c001def0:	d1 e0                	shl    eax,1
c001def2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001def5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001def9:	83 c0 08             	add    eax,0x8
c001defc:	d1 e0                	shl    eax,1
c001defe:	83 c0 01             	add    eax,0x1
c001df01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001df04:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df07:	50                   	push   eax
c001df08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df0b:	e8 6e fe ff ff       	call   c001dd7e <IOAPIC::read(int)>
c001df10:	83 c4 08             	add    esp,0x8
c001df13:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001df16:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001df1d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001df20:	c1 e0 18             	shl    eax,0x18
c001df23:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001df26:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df2c:	52                   	push   edx
c001df2d:	50                   	push   eax
c001df2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df31:	e8 56 ff ff ff       	call   c001de8c <IOAPIC::write(int, int)>
c001df36:	83 c4 0c             	add    esp,0xc
c001df39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001df3c:	50                   	push   eax
c001df3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df40:	e8 39 fe ff ff       	call   c001dd7e <IOAPIC::read(int)>
c001df45:	83 c4 08             	add    esp,0x8
c001df48:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001df4b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001df52:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001df59:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001df60:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001df64:	85 c0                	test   eax,eax
c001df66:	74 09                	je     c001df71 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001df68:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001df6f:	eb 07                	jmp    c001df78 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001df71:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001df78:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001df7c:	85 c0                	test   eax,eax
c001df7e:	74 09                	je     c001df89 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001df80:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001df87:	eb 07                	jmp    c001df90 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001df89:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001df90:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001df97:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001df9b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001df9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dfa1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dfa4:	52                   	push   edx
c001dfa5:	50                   	push   eax
c001dfa6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfa9:	e8 de fe ff ff       	call   c001de8c <IOAPIC::write(int, int)>
c001dfae:	83 c4 0c             	add    esp,0xc
c001dfb1:	90                   	nop
c001dfb2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dfb5:	c9                   	leave  
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop

c001dfb8 <APICTimer::close(int, int, void*)>:
c001dfb8:	b8 00 00 00 00       	mov    eax,0x0
c001dfbd:	c3                   	ret    
c001dfbe:	66 90                	xchg   ax,ax

c001dfc0 <apicTimerHandler(regs*, void*)>:
c001dfc0:	83 ec 0c             	sub    esp,0xc
c001dfc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfc7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dfc9:	b8 10 27 00 00       	mov    eax,0x2710
c001dfce:	ba 00 00 00 00       	mov    edx,0x0
c001dfd3:	f7 f1                	div    ecx
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	50                   	push   eax
c001dfd9:	e8 c2 fa fe ff       	call   c000daa0 <timerHandler(unsigned int)>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	90                   	nop
c001dfe2:	83 c4 0c             	add    esp,0xc
c001dfe5:	c3                   	ret    
c001dfe6:	66 90                	xchg   ax,ax

c001dfe8 <APICTimer::open(int, int, void*)>:
c001dfe8:	83 ec 0c             	sub    esp,0xc
c001dfeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfef:	8b 00                	mov    eax,DWORD PTR [eax]
c001dff1:	83 c0 24             	add    eax,0x24
c001dff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001dff6:	83 ec 08             	sub    esp,0x8
c001dff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e001:	ff d0                	call   eax
c001e003:	83 c4 10             	add    esp,0x10
c001e006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e00a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e00e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e018:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e01c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e022:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e026:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	51                   	push   ecx
c001e030:	6a 01                	push   0x1
c001e032:	68 c0 df 01 c0       	push   0xc001dfc0
c001e037:	52                   	push   edx
c001e038:	50                   	push   eax
c001e039:	e8 a2 df fe ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e03e:	83 c4 20             	add    esp,0x20
c001e041:	89 c2                	mov    edx,eax
c001e043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e047:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e04d:	b8 00 00 00 00       	mov    eax,0x0
c001e052:	83 c4 0c             	add    esp,0xc
c001e055:	c3                   	ret    
c001e056:	66 90                	xchg   ax,ax

c001e058 <APICTimer::write(int)>:
c001e058:	83 ec 0c             	sub    esp,0xc
c001e05b:	83 ec 0c             	sub    esp,0xc
c001e05e:	68 88 25 02 c0       	push   0xc0022588
c001e063:	e8 b5 2a ff ff       	call   c0010b1d <KePanic(char const*)>
c001e068:	83 c4 10             	add    esp,0x10
c001e06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e06f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e073:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e079:	90                   	nop
c001e07a:	83 c4 0c             	add    esp,0xc
c001e07d:	c3                   	ret    
c001e07e:	66 90                	xchg   ax,ax

c001e080 <APICTimer::APICTimer()>:
c001e080:	83 ec 0c             	sub    esp,0xc
c001e083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e087:	83 ec 08             	sub    esp,0x8
c001e08a:	68 98 25 02 c0       	push   0xc0022598
c001e08f:	50                   	push   eax
c001e090:	e8 3f f9 fe ff       	call   c000d9d4 <Timer::Timer(char const*)>
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	ba ac 25 02 c0       	mov    edx,0xc00225ac
c001e09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a1:	89 10                	mov    DWORD PTR [eax],edx
c001e0a3:	90                   	nop
c001e0a4:	83 c4 0c             	add    esp,0xc
c001e0a7:	c3                   	ret    

c001e0a8 <PIT::write(int)>:
c001e0a8:	83 ec 10             	sub    esp,0x10
c001e0ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0bd:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001e0c2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e0c7:	89 c2                	mov    edx,eax
c001e0c9:	c1 fa 1f             	sar    edx,0x1f
c001e0cc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e0d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0d4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e0db:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e0e0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e0e4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e0e9:	ee                   	out    dx,al
c001e0ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0ee:	0f b6 c0             	movzx  eax,al
c001e0f1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e0f8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e0fc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e100:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e105:	ee                   	out    dx,al
c001e106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e10a:	c1 f8 08             	sar    eax,0x8
c001e10d:	0f b6 c0             	movzx  eax,al
c001e110:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e117:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e11b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e11f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e124:	ee                   	out    dx,al
c001e125:	90                   	nop
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	c3                   	ret    
c001e12a:	66 90                	xchg   ax,ax

c001e12c <pitHandler(regs*, void*)>:
c001e12c:	83 ec 0c             	sub    esp,0xc
c001e12f:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001e135:	b8 10 27 00 00       	mov    eax,0x2710
c001e13a:	89 c2                	mov    edx,eax
c001e13c:	c1 fa 1f             	sar    edx,0x1f
c001e13f:	f7 f9                	idiv   ecx
c001e141:	83 ec 0c             	sub    esp,0xc
c001e144:	50                   	push   eax
c001e145:	e8 56 f9 fe ff       	call   c000daa0 <timerHandler(unsigned int)>
c001e14a:	83 c4 10             	add    esp,0x10
c001e14d:	90                   	nop
c001e14e:	83 c4 0c             	add    esp,0xc
c001e151:	c3                   	ret    
c001e152:	66 90                	xchg   ax,ax

c001e154 <PIT::open(int, int, void*)>:
c001e154:	83 ec 0c             	sub    esp,0xc
c001e157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e15b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e15d:	83 c0 24             	add    eax,0x24
c001e160:	8b 00                	mov    eax,DWORD PTR [eax]
c001e162:	83 ec 08             	sub    esp,0x8
c001e165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e16d:	ff d0                	call   eax
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e176:	83 ec 0c             	sub    esp,0xc
c001e179:	6a 00                	push   0x0
c001e17b:	6a 01                	push   0x1
c001e17d:	68 2c e1 01 c0       	push   0xc001e12c
c001e182:	6a 00                	push   0x0
c001e184:	50                   	push   eax
c001e185:	e8 56 de fe ff       	call   c000bfe0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e18a:	83 c4 20             	add    esp,0x20
c001e18d:	89 c2                	mov    edx,eax
c001e18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e193:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e199:	b8 00 00 00 00       	mov    eax,0x0
c001e19e:	83 c4 0c             	add    esp,0xc
c001e1a1:	c3                   	ret    
c001e1a2:	66 90                	xchg   ax,ax

c001e1a4 <PIT::close(int, int, void*)>:
c001e1a4:	83 ec 0c             	sub    esp,0xc
c001e1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ab:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b9:	6a 01                	push   0x1
c001e1bb:	68 2c e1 01 c0       	push   0xc001e12c
c001e1c0:	6a 00                	push   0x0
c001e1c2:	50                   	push   eax
c001e1c3:	e8 4e de fe ff       	call   c000c016 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e1c8:	83 c4 10             	add    esp,0x10
c001e1cb:	b8 00 00 00 00       	mov    eax,0x0
c001e1d0:	83 c4 0c             	add    esp,0xc
c001e1d3:	c3                   	ret    

c001e1d4 <PIT::PIT()>:
c001e1d4:	83 ec 0c             	sub    esp,0xc
c001e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1db:	83 ec 08             	sub    esp,0x8
c001e1de:	68 d4 25 02 c0       	push   0xc00225d4
c001e1e3:	50                   	push   eax
c001e1e4:	e8 eb f7 fe ff       	call   c000d9d4 <Timer::Timer(char const*)>
c001e1e9:	83 c4 10             	add    esp,0x10
c001e1ec:	ba fc 25 02 c0       	mov    edx,0xc00225fc
c001e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f5:	89 10                	mov    DWORD PTR [eax],edx
c001e1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e201:	0f b6 d0             	movzx  edx,al
c001e204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e208:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e213:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e219:	0f b6 d0             	movzx  edx,al
c001e21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e220:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e229:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e22f:	8d 50 01             	lea    edx,[eax+0x1]
c001e232:	88 d1                	mov    cl,dl
c001e234:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e238:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e23e:	0f b6 d0             	movzx  edx,al
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e249:	83 e1 3f             	and    ecx,0x3f
c001e24c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e250:	90                   	nop
c001e251:	83 c4 0c             	add    esp,0xc
c001e254:	c3                   	ret    
c001e255:	66 90                	xchg   ax,ax
c001e257:	66 90                	xchg   ax,ax
c001e259:	66 90                	xchg   ax,ax
c001e25b:	66 90                	xchg   ax,ax
c001e25d:	66 90                	xchg   ax,ax
c001e25f:	90                   	nop

c001e260 <avxDetect>:
c001e260:	b8 01 00 00 00       	mov    eax,0x1
c001e265:	0f a2                	cpuid  
c001e267:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e26d:	74 15                	je     c001e284 <avxDetect.noAVX>
c001e26f:	b8 01 00 00 00       	mov    eax,0x1
c001e274:	0f a2                	cpuid  
c001e276:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e27c:	74 06                	je     c001e284 <avxDetect.noAVX>
c001e27e:	b8 01 00 00 00       	mov    eax,0x1
c001e283:	c3                   	ret    

c001e284 <avxDetect.noAVX>:
c001e284:	b8 00 00 00 00       	mov    eax,0x0
c001e289:	c3                   	ret    

c001e28a <avxSave>:
c001e28a:	53                   	push   ebx
c001e28b:	52                   	push   edx
c001e28c:	31 c0                	xor    eax,eax
c001e28e:	48                   	dec    eax
c001e28f:	89 c2                	mov    edx,eax
c001e291:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e295:	0f ae 23             	xsave  [ebx]
c001e298:	5a                   	pop    edx
c001e299:	5b                   	pop    ebx
c001e29a:	c3                   	ret    

c001e29b <avxLoad>:
c001e29b:	53                   	push   ebx
c001e29c:	52                   	push   edx
c001e29d:	31 c0                	xor    eax,eax
c001e29f:	48                   	dec    eax
c001e2a0:	89 c2                	mov    edx,eax
c001e2a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2a6:	0f ae 2b             	xrstor [ebx]
c001e2a9:	5a                   	pop    edx
c001e2aa:	5b                   	pop    ebx
c001e2ab:	c3                   	ret    

c001e2ac <avxInit>:
c001e2ac:	e8 67 03 00 00       	call   c001e618 <sseInit>
c001e2b1:	50                   	push   eax
c001e2b2:	51                   	push   ecx
c001e2b3:	0f 20 e0             	mov    eax,cr4
c001e2b6:	0d 00 00 04 00       	or     eax,0x40000
c001e2bb:	0f 22 e0             	mov    cr4,eax
c001e2be:	31 c9                	xor    ecx,ecx
c001e2c0:	0f 01 d0             	xgetbv 
c001e2c3:	0d 07 00 00 00       	or     eax,0x7
c001e2c8:	0f 01 d1             	xsetbv 
c001e2cb:	59                   	pop    ecx
c001e2cc:	58                   	pop    eax
c001e2cd:	c3                   	ret    

c001e2ce <avxClose>:
c001e2ce:	c3                   	ret    

c001e2cf <wouldSheSayYes>:
c001e2cf:	c3                   	ret    
c001e2d0:	49                   	dec    ecx
c001e2d1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e2d5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e2d9:	75 20                	jne    c001e2fb <isr0+0xb>
c001e2db:	4e                   	dec    esi
c001e2dc:	79 61                	jns    c001e33f <isr7+0x3>
c001e2de:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e2e3:	66 90                	xchg   ax,ax
c001e2e5:	66 90                	xchg   ax,ax
c001e2e7:	66 90                	xchg   ax,ax
c001e2e9:	66 90                	xchg   ax,ax
c001e2eb:	66 90                	xchg   ax,ax
c001e2ed:	66 90                	xchg   ax,ax
c001e2ef:	90                   	nop

c001e2f0 <isr0>:
c001e2f0:	fa                   	cli    
c001e2f1:	68 00 00 00 00       	push   0x0
c001e2f6:	68 00 00 00 00       	push   0x0
c001e2fb:	e9 56 01 00 00       	jmp    c001e456 <int_common_stub>

c001e300 <isr1>:
c001e300:	fa                   	cli    
c001e301:	6a 00                	push   0x0
c001e303:	6a 01                	push   0x1
c001e305:	e9 4c 01 00 00       	jmp    c001e456 <int_common_stub>

c001e30a <isr2>:
c001e30a:	fa                   	cli    
c001e30b:	6a 00                	push   0x0
c001e30d:	6a 02                	push   0x2
c001e30f:	e9 42 01 00 00       	jmp    c001e456 <int_common_stub>

c001e314 <isr3>:
c001e314:	fa                   	cli    
c001e315:	6a 00                	push   0x0
c001e317:	6a 03                	push   0x3
c001e319:	e9 38 01 00 00       	jmp    c001e456 <int_common_stub>

c001e31e <isr4>:
c001e31e:	fa                   	cli    
c001e31f:	6a 00                	push   0x0
c001e321:	6a 04                	push   0x4
c001e323:	e9 2e 01 00 00       	jmp    c001e456 <int_common_stub>

c001e328 <isr5>:
c001e328:	fa                   	cli    
c001e329:	6a 00                	push   0x0
c001e32b:	6a 05                	push   0x5
c001e32d:	e9 24 01 00 00       	jmp    c001e456 <int_common_stub>

c001e332 <isr6>:
c001e332:	fa                   	cli    
c001e333:	6a 00                	push   0x0
c001e335:	6a 06                	push   0x6
c001e337:	e9 1a 01 00 00       	jmp    c001e456 <int_common_stub>

c001e33c <isr7>:
c001e33c:	fa                   	cli    
c001e33d:	6a 00                	push   0x0
c001e33f:	6a 07                	push   0x7
c001e341:	e9 10 01 00 00       	jmp    c001e456 <int_common_stub>

c001e346 <isr8>:
c001e346:	fa                   	cli    
c001e347:	6a 08                	push   0x8
c001e349:	e9 08 01 00 00       	jmp    c001e456 <int_common_stub>

c001e34e <isr9>:
c001e34e:	fa                   	cli    
c001e34f:	6a 00                	push   0x0
c001e351:	6a 09                	push   0x9
c001e353:	e9 fe 00 00 00       	jmp    c001e456 <int_common_stub>

c001e358 <isr10>:
c001e358:	fa                   	cli    
c001e359:	6a 0a                	push   0xa
c001e35b:	e9 f6 00 00 00       	jmp    c001e456 <int_common_stub>

c001e360 <isr11>:
c001e360:	fa                   	cli    
c001e361:	6a 0b                	push   0xb
c001e363:	e9 ee 00 00 00       	jmp    c001e456 <int_common_stub>

c001e368 <isr12>:
c001e368:	fa                   	cli    
c001e369:	6a 0c                	push   0xc
c001e36b:	e9 e6 00 00 00       	jmp    c001e456 <int_common_stub>

c001e370 <isr13>:
c001e370:	fa                   	cli    
c001e371:	6a 0d                	push   0xd
c001e373:	53                   	push   ebx
c001e374:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e378:	81 fb 46 e5 01 c0    	cmp    ebx,0xc001e546
c001e37e:	5b                   	pop    ebx
c001e37f:	0f 84 c3 01 00 00    	je     c001e548 <finishSignal2>
c001e385:	e9 cc 00 00 00       	jmp    c001e456 <int_common_stub>

c001e38a <isr14>:
c001e38a:	fa                   	cli    
c001e38b:	6a 0e                	push   0xe
c001e38d:	e9 c4 00 00 00       	jmp    c001e456 <int_common_stub>

c001e392 <isr15>:
c001e392:	fa                   	cli    
c001e393:	6a 00                	push   0x0
c001e395:	6a 0f                	push   0xf
c001e397:	e9 ba 00 00 00       	jmp    c001e456 <int_common_stub>

c001e39c <isr16>:
c001e39c:	fa                   	cli    
c001e39d:	6a 00                	push   0x0
c001e39f:	6a 10                	push   0x10
c001e3a1:	e9 b0 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3a6 <isr17>:
c001e3a6:	fa                   	cli    
c001e3a7:	6a 00                	push   0x0
c001e3a9:	6a 11                	push   0x11
c001e3ab:	e9 a6 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3b0 <isr18>:
c001e3b0:	fa                   	cli    
c001e3b1:	6a 00                	push   0x0
c001e3b3:	6a 12                	push   0x12
c001e3b5:	e9 9c 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3ba <irq3>:
c001e3ba:	fa                   	cli    
c001e3bb:	6a 00                	push   0x0
c001e3bd:	6a 23                	push   0x23
c001e3bf:	e9 92 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3c4 <irq4>:
c001e3c4:	fa                   	cli    
c001e3c5:	6a 00                	push   0x0
c001e3c7:	6a 24                	push   0x24
c001e3c9:	e9 88 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3ce <irq5>:
c001e3ce:	fa                   	cli    
c001e3cf:	6a 00                	push   0x0
c001e3d1:	6a 25                	push   0x25
c001e3d3:	e9 7e 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3d8 <irq6>:
c001e3d8:	fa                   	cli    
c001e3d9:	6a 00                	push   0x0
c001e3db:	6a 26                	push   0x26
c001e3dd:	e9 74 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3e2 <irq7>:
c001e3e2:	fa                   	cli    
c001e3e3:	6a 00                	push   0x0
c001e3e5:	6a 27                	push   0x27
c001e3e7:	e9 6a 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3ec <irq8>:
c001e3ec:	fa                   	cli    
c001e3ed:	6a 00                	push   0x0
c001e3ef:	6a 28                	push   0x28
c001e3f1:	e9 60 00 00 00       	jmp    c001e456 <int_common_stub>

c001e3f6 <irq9>:
c001e3f6:	fa                   	cli    
c001e3f7:	6a 00                	push   0x0
c001e3f9:	6a 29                	push   0x29
c001e3fb:	e9 56 00 00 00       	jmp    c001e456 <int_common_stub>

c001e400 <irq10>:
c001e400:	fa                   	cli    
c001e401:	6a 00                	push   0x0
c001e403:	6a 2a                	push   0x2a
c001e405:	e9 4c 00 00 00       	jmp    c001e456 <int_common_stub>

c001e40a <irq11>:
c001e40a:	fa                   	cli    
c001e40b:	6a 00                	push   0x0
c001e40d:	6a 2b                	push   0x2b
c001e40f:	e9 42 00 00 00       	jmp    c001e456 <int_common_stub>

c001e414 <irq12>:
c001e414:	fa                   	cli    
c001e415:	6a 00                	push   0x0
c001e417:	6a 2c                	push   0x2c
c001e419:	e9 38 00 00 00       	jmp    c001e456 <int_common_stub>

c001e41e <irq13>:
c001e41e:	fa                   	cli    
c001e41f:	6a 00                	push   0x0
c001e421:	6a 2d                	push   0x2d
c001e423:	e9 2e 00 00 00       	jmp    c001e456 <int_common_stub>

c001e428 <irq14>:
c001e428:	fa                   	cli    
c001e429:	6a 00                	push   0x0
c001e42b:	6a 2e                	push   0x2e
c001e42d:	e9 24 00 00 00       	jmp    c001e456 <int_common_stub>

c001e432 <irq15>:
c001e432:	fa                   	cli    
c001e433:	6a 00                	push   0x0
c001e435:	6a 2f                	push   0x2f
c001e437:	e9 1a 00 00 00       	jmp    c001e456 <int_common_stub>

c001e43c <irq1>:
c001e43c:	fa                   	cli    
c001e43d:	6a 00                	push   0x0
c001e43f:	6a 21                	push   0x21
c001e441:	eb 13                	jmp    c001e456 <int_common_stub>

c001e443 <irq2>:
c001e443:	fa                   	cli    
c001e444:	6a 00                	push   0x0
c001e446:	6a 22                	push   0x22
c001e448:	eb 0c                	jmp    c001e456 <int_common_stub>

c001e44a <isr96>:
c001e44a:	6a 00                	push   0x0
c001e44c:	6a 60                	push   0x60
c001e44e:	fb                   	sti    
c001e44f:	eb 37                	jmp    c001e488 <syscall_common_stub>

c001e451 <irq0>:
c001e451:	fa                   	cli    
c001e452:	6a 00                	push   0x0
c001e454:	6a 20                	push   0x20

c001e456 <int_common_stub>:
c001e456:	60                   	pusha  
c001e457:	1e                   	push   ds
c001e458:	06                   	push   es
c001e459:	0f a0                	push   fs
c001e45b:	0f a8                	push   gs
c001e45d:	66 b8 10 00          	mov    ax,0x10
c001e461:	66 8e d8             	mov    ds,ax
c001e464:	66 8e c0             	mov    es,ax
c001e467:	66 8e e0             	mov    fs,ax
c001e46a:	66 8e e8             	mov    gs,ax
c001e46d:	54                   	push   esp
c001e46e:	fc                   	cld    
c001e46f:	e8 6c e0 fe ff       	call   c000c4e0 <int_handler>
c001e474:	81 c4 04 00 00 00    	add    esp,0x4
c001e47a:	0f a9                	pop    gs
c001e47c:	0f a1                	pop    fs
c001e47e:	07                   	pop    es
c001e47f:	1f                   	pop    ds
c001e480:	61                   	popa   
c001e481:	81 c4 08 00 00 00    	add    esp,0x8
c001e487:	cf                   	iret   

c001e488 <syscall_common_stub>:
c001e488:	60                   	pusha  
c001e489:	1e                   	push   ds
c001e48a:	06                   	push   es
c001e48b:	0f a0                	push   fs
c001e48d:	0f a8                	push   gs
c001e48f:	66 b8 10 00          	mov    ax,0x10
c001e493:	66 8e d8             	mov    ds,ax
c001e496:	66 8e c0             	mov    es,ax
c001e499:	66 8e e0             	mov    fs,ax
c001e49c:	66 8e e8             	mov    gs,ax
c001e49f:	54                   	push   esp
c001e4a0:	fc                   	cld    
c001e4a1:	e8 3a e0 fe ff       	call   c000c4e0 <int_handler>
c001e4a6:	81 c4 04 00 00 00    	add    esp,0x4
c001e4ac:	0f a9                	pop    gs
c001e4ae:	0f a1                	pop    fs
c001e4b0:	07                   	pop    es
c001e4b1:	1f                   	pop    ds
c001e4b2:	e8 78 2c ff ff       	call   c001112f <KiCheckSignalZ>
c001e4b7:	3d 00 00 00 00       	cmp    eax,0x0
c001e4bc:	0f 84 c0 00 00 00    	je     c001e582 <skipSignals>
c001e4c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e4c7:	61                   	popa   
c001e4c8:	53                   	push   ebx
c001e4c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e4cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e4d2:	5b                   	pop    ebx
c001e4d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e4d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e4db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e4de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e4e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e4e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e4e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e4ea:	81 c4 08 00 00 00    	add    esp,0x8
c001e4f0:	5e                   	pop    esi
c001e4f1:	5b                   	pop    ebx
c001e4f2:	59                   	pop    ecx
c001e4f3:	5a                   	pop    edx
c001e4f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e4f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e4fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e4fd:	52                   	push   edx
c001e4fe:	51                   	push   ecx
c001e4ff:	53                   	push   ebx
c001e500:	56                   	push   esi
c001e501:	81 ec 08 00 00 00    	sub    esp,0x8
c001e507:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e50a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e50d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e510:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e513:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e516:	60                   	pusha  
c001e517:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e51d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e520:	89 e3                	mov    ebx,esp
c001e522:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e525:	52                   	push   edx
c001e526:	68 46 e5 01 c0       	push   0xc001e546
c001e52b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e52e:	89 dc                	mov    esp,ebx
c001e530:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e533:	68 23 00 00 00       	push   0x23
c001e538:	51                   	push   ecx
c001e539:	68 02 02 00 00       	push   0x202
c001e53e:	68 1b 00 00 00       	push   0x1b
c001e543:	ff 36                	push   DWORD PTR [esi]
c001e545:	cf                   	iret   

c001e546 <finishSignal>:
c001e546:	cd 0f                	int    0xf

c001e548 <finishSignal2>:
c001e548:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e54e:	e8 59 2c ff ff       	call   c00111ac <KiFinishSignalZ>
c001e553:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e559:	68 23 00 00 00       	push   0x23
c001e55e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e561:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e564:	68 1b 00 00 00       	push   0x1b
c001e569:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e56c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e56f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e572:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e575:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e578:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e57b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e57e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e581:	cf                   	iret   

c001e582 <skipSignals>:
c001e582:	61                   	popa   
c001e583:	81 c4 08 00 00 00    	add    esp,0x8
c001e589:	cf                   	iret   
c001e58a:	90                   	nop
c001e58b:	90                   	nop

c001e58c <irq16>:
c001e58c:	fa                   	cli    
c001e58d:	6a 00                	push   0x0
c001e58f:	6a 30                	push   0x30
c001e591:	e9 c0 fe ff ff       	jmp    c001e456 <int_common_stub>

c001e596 <irq17>:
c001e596:	fa                   	cli    
c001e597:	6a 00                	push   0x0
c001e599:	6a 31                	push   0x31
c001e59b:	e9 b6 fe ff ff       	jmp    c001e456 <int_common_stub>

c001e5a0 <irq18>:
c001e5a0:	fa                   	cli    
c001e5a1:	6a 00                	push   0x0
c001e5a3:	6a 32                	push   0x32
c001e5a5:	e9 ac fe ff ff       	jmp    c001e456 <int_common_stub>

c001e5aa <irq19>:
c001e5aa:	fa                   	cli    
c001e5ab:	6a 00                	push   0x0
c001e5ad:	6a 33                	push   0x33
c001e5af:	e9 a2 fe ff ff       	jmp    c001e456 <int_common_stub>

c001e5b4 <irq20>:
c001e5b4:	fa                   	cli    
c001e5b5:	6a 00                	push   0x0
c001e5b7:	6a 34                	push   0x34
c001e5b9:	e9 98 fe ff ff       	jmp    c001e456 <int_common_stub>

c001e5be <irq21>:
c001e5be:	fa                   	cli    
c001e5bf:	6a 00                	push   0x0
c001e5c1:	6a 35                	push   0x35
c001e5c3:	e9 8e fe ff ff       	jmp    c001e456 <int_common_stub>

c001e5c8 <irq22>:
c001e5c8:	fa                   	cli    
c001e5c9:	6a 00                	push   0x0
c001e5cb:	6a 36                	push   0x36
c001e5cd:	e9 84 fe ff ff       	jmp    c001e456 <int_common_stub>

c001e5d2 <irq23>:
c001e5d2:	fa                   	cli    
c001e5d3:	6a 00                	push   0x0
c001e5d5:	6a 37                	push   0x37
c001e5d7:	e9 7a fe ff ff       	jmp    c001e456 <int_common_stub>
c001e5dc:	66 90                	xchg   ax,ax
c001e5de:	66 90                	xchg   ax,ax

c001e5e0 <i386GetRDRAND>:
c001e5e0:	b9 64 00 00 00       	mov    ecx,0x64

c001e5e5 <retry>:
c001e5e5:	0f c7 f0             	rdrand eax
c001e5e8:	72 05                	jb     c001e5ef <retry.done>
c001e5ea:	e2 f9                	loop   c001e5e5 <retry>

c001e5ec <retry.fail>:
c001e5ec:	31 c0                	xor    eax,eax
c001e5ee:	c3                   	ret    

c001e5ef <retry.done>:
c001e5ef:	c3                   	ret    

c001e5f0 <absolutelyNoChanceInHell>:
c001e5f0:	b8 01 00 00 00       	mov    eax,0x1
c001e5f5:	0f a2                	cpuid  
c001e5f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e5fd:	74 06                	je     c001e605 <sseDetect.noSSE>
c001e5ff:	b8 01 00 00 00       	mov    eax,0x1
c001e604:	c3                   	ret    

c001e605 <sseDetect.noSSE>:
c001e605:	31 c0                	xor    eax,eax
c001e607:	c3                   	ret    

c001e608 <sseSave>:
c001e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e60c:	0f ae 00             	fxsave [eax]
c001e60f:	c3                   	ret    

c001e610 <sseLoad>:
c001e610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e614:	0f ae 08             	fxrstor [eax]
c001e617:	c3                   	ret    

c001e618 <sseInit>:
c001e618:	e8 42 00 00 00       	call   c001e65f <x87Init>
c001e61d:	0f 20 e0             	mov    eax,cr4
c001e620:	66 0d 00 06          	or     ax,0x600
c001e624:	0f 22 e0             	mov    cr4,eax
c001e627:	c3                   	ret    

c001e628 <sseClose>:
c001e628:	c3                   	ret    
c001e629:	66 90                	xchg   ax,ax
c001e62b:	66 90                	xchg   ax,ax
c001e62d:	66 90                	xchg   ax,ax
c001e62f:	90                   	nop

c001e630 <value_37F>:
c001e630:	7f 03                	jg     c001e635 <value_37A+0x1>

c001e632 <value_37E>:
c001e632:	7e 03                	jle    c001e637 <x87Detect+0x1>

c001e634 <value_37A>:
c001e634:	7a 03                	jp     c001e639 <x87Detect+0x3>

c001e636 <x87Detect>:
c001e636:	b8 01 00 00 00       	mov    eax,0x1
c001e63b:	0f a2                	cpuid  
c001e63d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e643:	74 06                	je     c001e64b <x87Detect.nox87>
c001e645:	b8 01 00 00 00       	mov    eax,0x1
c001e64a:	c3                   	ret    

c001e64b <x87Detect.nox87>:
c001e64b:	b8 00 00 00 00       	mov    eax,0x0
c001e650:	c3                   	ret    

c001e651 <x87Save>:
c001e651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e655:	dd 30                	fnsave [eax]
c001e657:	c3                   	ret    

c001e658 <x87Load>:
c001e658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e65c:	dd 20                	frstor [eax]
c001e65e:	c3                   	ret    

c001e65f <x87Init>:
c001e65f:	0f 20 c0             	mov    eax,cr0
c001e662:	66 25 fb ff          	and    ax,0xfffb
c001e666:	66 0d 22 00          	or     ax,0x22
c001e66a:	0f 22 c0             	mov    cr0,eax
c001e66d:	db e3                	fninit 
c001e66f:	0f 06                	clts   
c001e671:	d9 2d 34 e6 01 c0    	fldcw  WORD PTR ds:0xc001e634
c001e677:	c3                   	ret    

c001e678 <x87Close>:
c001e678:	c3                   	ret    
c001e679:	66 90                	xchg   ax,ax
c001e67b:	90                   	nop

c001e67c <__do_global_ctors_aux>:
c001e67c:	a1 30 f6 01 c0       	mov    eax,ds:0xc001f630
c001e681:	83 f8 ff             	cmp    eax,0xffffffff
c001e684:	74 1a                	je     c001e6a0 <__do_global_ctors_aux+0x24>
c001e686:	55                   	push   ebp
c001e687:	89 e5                	mov    ebp,esp
c001e689:	53                   	push   ebx
c001e68a:	52                   	push   edx
c001e68b:	bb 30 f6 01 c0       	mov    ebx,0xc001f630
c001e690:	ff d0                	call   eax
c001e692:	83 eb 04             	sub    ebx,0x4
c001e695:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e697:	83 f8 ff             	cmp    eax,0xffffffff
c001e69a:	75 f4                	jne    c001e690 <__do_global_ctors_aux+0x14>
c001e69c:	58                   	pop    eax
c001e69d:	5b                   	pop    ebx
c001e69e:	5d                   	pop    ebp
c001e69f:	c3                   	ret    
c001e6a0:	c3                   	ret    
c001e6a1:	66 90                	xchg   ax,ax
c001e6a3:	90                   	nop

c001e6a4 <__divdi3>:
c001e6a4:	55                   	push   ebp
c001e6a5:	57                   	push   edi
c001e6a6:	56                   	push   esi
c001e6a7:	53                   	push   ebx
c001e6a8:	83 ec 1c             	sub    esp,0x1c
c001e6ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e6af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e6b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e6ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e6c2:	85 db                	test   ebx,ebx
c001e6c4:	0f 88 8e 00 00 00    	js     c001e758 <__divdi3+0xb4>
c001e6ca:	89 dd                	mov    ebp,ebx
c001e6cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e6d4:	89 d3                	mov    ebx,edx
c001e6d6:	85 d2                	test   edx,edx
c001e6d8:	79 0d                	jns    c001e6e7 <__divdi3+0x43>
c001e6da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e6de:	f7 d8                	neg    eax
c001e6e0:	83 d2 00             	adc    edx,0x0
c001e6e3:	f7 da                	neg    edx
c001e6e5:	89 d3                	mov    ebx,edx
c001e6e7:	89 c7                	mov    edi,eax
c001e6e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e6ec:	85 db                	test   ebx,ebx
c001e6ee:	75 48                	jne    c001e738 <__divdi3+0x94>
c001e6f0:	39 ef                	cmp    edi,ebp
c001e6f2:	76 24                	jbe    c001e718 <__divdi3+0x74>
c001e6f4:	89 ea                	mov    edx,ebp
c001e6f6:	f7 f7                	div    edi
c001e6f8:	89 c1                	mov    ecx,eax
c001e6fa:	31 f6                	xor    esi,esi
c001e6fc:	89 c8                	mov    eax,ecx
c001e6fe:	89 f2                	mov    edx,esi
c001e700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e704:	85 c9                	test   ecx,ecx
c001e706:	74 07                	je     c001e70f <__divdi3+0x6b>
c001e708:	f7 d8                	neg    eax
c001e70a:	83 d2 00             	adc    edx,0x0
c001e70d:	f7 da                	neg    edx
c001e70f:	83 c4 1c             	add    esp,0x1c
c001e712:	5b                   	pop    ebx
c001e713:	5e                   	pop    esi
c001e714:	5f                   	pop    edi
c001e715:	5d                   	pop    ebp
c001e716:	c3                   	ret    
c001e717:	90                   	nop
c001e718:	85 ff                	test   edi,edi
c001e71a:	75 0b                	jne    c001e727 <__divdi3+0x83>
c001e71c:	b8 01 00 00 00       	mov    eax,0x1
c001e721:	31 d2                	xor    edx,edx
c001e723:	f7 f3                	div    ebx
c001e725:	89 c7                	mov    edi,eax
c001e727:	31 d2                	xor    edx,edx
c001e729:	89 e8                	mov    eax,ebp
c001e72b:	f7 f7                	div    edi
c001e72d:	89 c6                	mov    esi,eax
c001e72f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e732:	f7 f7                	div    edi
c001e734:	89 c1                	mov    ecx,eax
c001e736:	eb c4                	jmp    c001e6fc <__divdi3+0x58>
c001e738:	39 eb                	cmp    ebx,ebp
c001e73a:	77 3c                	ja     c001e778 <__divdi3+0xd4>
c001e73c:	0f bd f3             	bsr    esi,ebx
c001e73f:	83 f6 1f             	xor    esi,0x1f
c001e742:	75 40                	jne    c001e784 <__divdi3+0xe0>
c001e744:	39 eb                	cmp    ebx,ebp
c001e746:	72 09                	jb     c001e751 <__divdi3+0xad>
c001e748:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e74b:	0f 87 97 00 00 00    	ja     c001e7e8 <__divdi3+0x144>
c001e751:	b9 01 00 00 00       	mov    ecx,0x1
c001e756:	eb a4                	jmp    c001e6fc <__divdi3+0x58>
c001e758:	f7 d9                	neg    ecx
c001e75a:	83 d3 00             	adc    ebx,0x0
c001e75d:	f7 db                	neg    ebx
c001e75f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e762:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e766:	89 dd                	mov    ebp,ebx
c001e768:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e770:	e9 5f ff ff ff       	jmp    c001e6d4 <__divdi3+0x30>
c001e775:	8d 76 00             	lea    esi,[esi+0x0]
c001e778:	31 f6                	xor    esi,esi
c001e77a:	31 c9                	xor    ecx,ecx
c001e77c:	e9 7b ff ff ff       	jmp    c001e6fc <__divdi3+0x58>
c001e781:	8d 76 00             	lea    esi,[esi+0x0]
c001e784:	b8 20 00 00 00       	mov    eax,0x20
c001e789:	29 f0                	sub    eax,esi
c001e78b:	89 f1                	mov    ecx,esi
c001e78d:	d3 e3                	shl    ebx,cl
c001e78f:	89 fa                	mov    edx,edi
c001e791:	88 c1                	mov    cl,al
c001e793:	d3 ea                	shr    edx,cl
c001e795:	09 da                	or     edx,ebx
c001e797:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e79b:	89 f1                	mov    ecx,esi
c001e79d:	d3 e7                	shl    edi,cl
c001e79f:	89 eb                	mov    ebx,ebp
c001e7a1:	88 c1                	mov    cl,al
c001e7a3:	d3 eb                	shr    ebx,cl
c001e7a5:	89 f1                	mov    ecx,esi
c001e7a7:	d3 e5                	shl    ebp,cl
c001e7a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e7ac:	88 c1                	mov    cl,al
c001e7ae:	d3 ea                	shr    edx,cl
c001e7b0:	09 d5                	or     ebp,edx
c001e7b2:	89 e8                	mov    eax,ebp
c001e7b4:	89 da                	mov    edx,ebx
c001e7b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e7ba:	89 d3                	mov    ebx,edx
c001e7bc:	89 c5                	mov    ebp,eax
c001e7be:	f7 e7                	mul    edi
c001e7c0:	39 d3                	cmp    ebx,edx
c001e7c2:	72 18                	jb     c001e7dc <__divdi3+0x138>
c001e7c4:	74 0a                	je     c001e7d0 <__divdi3+0x12c>
c001e7c6:	89 e9                	mov    ecx,ebp
c001e7c8:	31 f6                	xor    esi,esi
c001e7ca:	e9 2d ff ff ff       	jmp    c001e6fc <__divdi3+0x58>
c001e7cf:	90                   	nop
c001e7d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e7d3:	89 f1                	mov    ecx,esi
c001e7d5:	d3 e7                	shl    edi,cl
c001e7d7:	39 c7                	cmp    edi,eax
c001e7d9:	73 eb                	jae    c001e7c6 <__divdi3+0x122>
c001e7db:	90                   	nop
c001e7dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e7df:	31 f6                	xor    esi,esi
c001e7e1:	e9 16 ff ff ff       	jmp    c001e6fc <__divdi3+0x58>
c001e7e6:	66 90                	xchg   ax,ax
c001e7e8:	31 c9                	xor    ecx,ecx
c001e7ea:	e9 0d ff ff ff       	jmp    c001e6fc <__divdi3+0x58>
c001e7ef:	90                   	nop

c001e7f0 <__moddi3>:
c001e7f0:	55                   	push   ebp
c001e7f1:	57                   	push   edi
c001e7f2:	56                   	push   esi
c001e7f3:	53                   	push   ebx
c001e7f4:	83 ec 2c             	sub    esp,0x2c
c001e7f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e7fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e7ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e803:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e807:	85 db                	test   ebx,ebx
c001e809:	0f 88 85 00 00 00    	js     c001e894 <__moddi3+0xa4>
c001e80f:	89 de                	mov    esi,ebx
c001e811:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e819:	89 d7                	mov    edi,edx
c001e81b:	85 d2                	test   edx,edx
c001e81d:	79 09                	jns    c001e828 <__moddi3+0x38>
c001e81f:	f7 d8                	neg    eax
c001e821:	83 d2 00             	adc    edx,0x0
c001e824:	f7 da                	neg    edx
c001e826:	89 d7                	mov    edi,edx
c001e828:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e82c:	89 cd                	mov    ebp,ecx
c001e82e:	85 ff                	test   edi,edi
c001e830:	75 52                	jne    c001e884 <__moddi3+0x94>
c001e832:	89 c3                	mov    ebx,eax
c001e834:	39 f0                	cmp    eax,esi
c001e836:	76 24                	jbe    c001e85c <__moddi3+0x6c>
c001e838:	89 c8                	mov    eax,ecx
c001e83a:	89 f2                	mov    edx,esi
c001e83c:	f7 f3                	div    ebx
c001e83e:	89 d6                	mov    esi,edx
c001e840:	89 f0                	mov    eax,esi
c001e842:	31 d2                	xor    edx,edx
c001e844:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e848:	85 c9                	test   ecx,ecx
c001e84a:	74 07                	je     c001e853 <__moddi3+0x63>
c001e84c:	f7 d8                	neg    eax
c001e84e:	83 d2 00             	adc    edx,0x0
c001e851:	f7 da                	neg    edx
c001e853:	83 c4 2c             	add    esp,0x2c
c001e856:	5b                   	pop    ebx
c001e857:	5e                   	pop    esi
c001e858:	5f                   	pop    edi
c001e859:	5d                   	pop    ebp
c001e85a:	c3                   	ret    
c001e85b:	90                   	nop
c001e85c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e860:	85 db                	test   ebx,ebx
c001e862:	75 0d                	jne    c001e871 <__moddi3+0x81>
c001e864:	b8 01 00 00 00       	mov    eax,0x1
c001e869:	31 d2                	xor    edx,edx
c001e86b:	f7 f7                	div    edi
c001e86d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e871:	89 f0                	mov    eax,esi
c001e873:	31 d2                	xor    edx,edx
c001e875:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e879:	f7 f7                	div    edi
c001e87b:	89 e8                	mov    eax,ebp
c001e87d:	f7 f7                	div    edi
c001e87f:	89 d6                	mov    esi,edx
c001e881:	eb bd                	jmp    c001e840 <__moddi3+0x50>
c001e883:	90                   	nop
c001e884:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e888:	39 f7                	cmp    edi,esi
c001e88a:	76 20                	jbe    c001e8ac <__moddi3+0xbc>
c001e88c:	89 c8                	mov    eax,ecx
c001e88e:	89 f2                	mov    edx,esi
c001e890:	eb b2                	jmp    c001e844 <__moddi3+0x54>
c001e892:	66 90                	xchg   ax,ax
c001e894:	f7 d9                	neg    ecx
c001e896:	83 d3 00             	adc    ebx,0x0
c001e899:	f7 db                	neg    ebx
c001e89b:	89 de                	mov    esi,ebx
c001e89d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e8a5:	e9 6f ff ff ff       	jmp    c001e819 <__moddi3+0x29>
c001e8aa:	66 90                	xchg   ax,ax
c001e8ac:	0f bd c7             	bsr    eax,edi
c001e8af:	83 f0 1f             	xor    eax,0x1f
c001e8b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e8b6:	75 24                	jne    c001e8dc <__moddi3+0xec>
c001e8b8:	39 f7                	cmp    edi,esi
c001e8ba:	72 06                	jb     c001e8c2 <__moddi3+0xd2>
c001e8bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e8c0:	77 0c                	ja     c001e8ce <__moddi3+0xde>
c001e8c2:	89 e9                	mov    ecx,ebp
c001e8c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e8c8:	19 fe                	sbb    esi,edi
c001e8ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e8ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8d2:	89 f2                	mov    edx,esi
c001e8d4:	e9 6b ff ff ff       	jmp    c001e844 <__moddi3+0x54>
c001e8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e8dc:	b8 20 00 00 00       	mov    eax,0x20
c001e8e1:	89 c2                	mov    edx,eax
c001e8e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e8e7:	29 da                	sub    edx,ebx
c001e8e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e8ed:	88 d9                	mov    cl,bl
c001e8ef:	d3 e7                	shl    edi,cl
c001e8f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8f5:	88 d1                	mov    cl,dl
c001e8f7:	d3 e8                	shr    eax,cl
c001e8f9:	09 c7                	or     edi,eax
c001e8fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e8ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e903:	89 d8                	mov    eax,ebx
c001e905:	88 d9                	mov    cl,bl
c001e907:	d3 e7                	shl    edi,cl
c001e909:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e90d:	89 f3                	mov    ebx,esi
c001e90f:	88 d1                	mov    cl,dl
c001e911:	d3 eb                	shr    ebx,cl
c001e913:	89 c7                	mov    edi,eax
c001e915:	88 c1                	mov    cl,al
c001e917:	d3 e6                	shl    esi,cl
c001e919:	89 e8                	mov    eax,ebp
c001e91b:	88 d1                	mov    cl,dl
c001e91d:	d3 e8                	shr    eax,cl
c001e91f:	09 f0                	or     eax,esi
c001e921:	89 f9                	mov    ecx,edi
c001e923:	d3 e5                	shl    ebp,cl
c001e925:	89 da                	mov    edx,ebx
c001e927:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e92b:	89 d3                	mov    ebx,edx
c001e92d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e931:	89 c6                	mov    esi,eax
c001e933:	89 d1                	mov    ecx,edx
c001e935:	39 d3                	cmp    ebx,edx
c001e937:	72 27                	jb     c001e960 <__moddi3+0x170>
c001e939:	74 21                	je     c001e95c <__moddi3+0x16c>
c001e93b:	29 f5                	sub    ebp,esi
c001e93d:	19 cb                	sbb    ebx,ecx
c001e93f:	89 de                	mov    esi,ebx
c001e941:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e945:	d3 e6                	shl    esi,cl
c001e947:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e94b:	89 f9                	mov    ecx,edi
c001e94d:	d3 ed                	shr    ebp,cl
c001e94f:	09 ee                	or     esi,ebp
c001e951:	89 f0                	mov    eax,esi
c001e953:	d3 eb                	shr    ebx,cl
c001e955:	89 da                	mov    edx,ebx
c001e957:	e9 e8 fe ff ff       	jmp    c001e844 <__moddi3+0x54>
c001e95c:	39 c5                	cmp    ebp,eax
c001e95e:	73 db                	jae    c001e93b <__moddi3+0x14b>
c001e960:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e964:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e968:	89 d1                	mov    ecx,edx
c001e96a:	89 c6                	mov    esi,eax
c001e96c:	eb cd                	jmp    c001e93b <__moddi3+0x14b>
c001e96e:	66 90                	xchg   ax,ax

c001e970 <__udivdi3>:
c001e970:	55                   	push   ebp
c001e971:	57                   	push   edi
c001e972:	56                   	push   esi
c001e973:	53                   	push   ebx
c001e974:	83 ec 1c             	sub    esp,0x1c
c001e977:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e97b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e97f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e983:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e987:	85 d2                	test   edx,edx
c001e989:	75 41                	jne    c001e9cc <__udivdi3+0x5c>
c001e98b:	39 f7                	cmp    edi,esi
c001e98d:	76 15                	jbe    c001e9a4 <__udivdi3+0x34>
c001e98f:	89 e8                	mov    eax,ebp
c001e991:	89 f2                	mov    edx,esi
c001e993:	f7 f7                	div    edi
c001e995:	31 db                	xor    ebx,ebx
c001e997:	89 da                	mov    edx,ebx
c001e999:	83 c4 1c             	add    esp,0x1c
c001e99c:	5b                   	pop    ebx
c001e99d:	5e                   	pop    esi
c001e99e:	5f                   	pop    edi
c001e99f:	5d                   	pop    ebp
c001e9a0:	c3                   	ret    
c001e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e9a4:	89 f9                	mov    ecx,edi
c001e9a6:	85 ff                	test   edi,edi
c001e9a8:	75 0b                	jne    c001e9b5 <__udivdi3+0x45>
c001e9aa:	b8 01 00 00 00       	mov    eax,0x1
c001e9af:	31 d2                	xor    edx,edx
c001e9b1:	f7 f7                	div    edi
c001e9b3:	89 c1                	mov    ecx,eax
c001e9b5:	31 d2                	xor    edx,edx
c001e9b7:	89 f0                	mov    eax,esi
c001e9b9:	f7 f1                	div    ecx
c001e9bb:	89 c3                	mov    ebx,eax
c001e9bd:	89 e8                	mov    eax,ebp
c001e9bf:	f7 f1                	div    ecx
c001e9c1:	89 da                	mov    edx,ebx
c001e9c3:	83 c4 1c             	add    esp,0x1c
c001e9c6:	5b                   	pop    ebx
c001e9c7:	5e                   	pop    esi
c001e9c8:	5f                   	pop    edi
c001e9c9:	5d                   	pop    ebp
c001e9ca:	c3                   	ret    
c001e9cb:	90                   	nop
c001e9cc:	39 f2                	cmp    edx,esi
c001e9ce:	77 1c                	ja     c001e9ec <__udivdi3+0x7c>
c001e9d0:	0f bd da             	bsr    ebx,edx
c001e9d3:	83 f3 1f             	xor    ebx,0x1f
c001e9d6:	75 24                	jne    c001e9fc <__udivdi3+0x8c>
c001e9d8:	39 f2                	cmp    edx,esi
c001e9da:	72 08                	jb     c001e9e4 <__udivdi3+0x74>
c001e9dc:	39 ef                	cmp    edi,ebp
c001e9de:	0f 87 84 00 00 00    	ja     c001ea68 <__udivdi3+0xf8>
c001e9e4:	b8 01 00 00 00       	mov    eax,0x1
c001e9e9:	eb ac                	jmp    c001e997 <__udivdi3+0x27>
c001e9eb:	90                   	nop
c001e9ec:	31 db                	xor    ebx,ebx
c001e9ee:	31 c0                	xor    eax,eax
c001e9f0:	89 da                	mov    edx,ebx
c001e9f2:	83 c4 1c             	add    esp,0x1c
c001e9f5:	5b                   	pop    ebx
c001e9f6:	5e                   	pop    esi
c001e9f7:	5f                   	pop    edi
c001e9f8:	5d                   	pop    ebp
c001e9f9:	c3                   	ret    
c001e9fa:	66 90                	xchg   ax,ax
c001e9fc:	b8 20 00 00 00       	mov    eax,0x20
c001ea01:	29 d8                	sub    eax,ebx
c001ea03:	88 d9                	mov    cl,bl
c001ea05:	d3 e2                	shl    edx,cl
c001ea07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea0b:	89 fa                	mov    edx,edi
c001ea0d:	88 c1                	mov    cl,al
c001ea0f:	d3 ea                	shr    edx,cl
c001ea11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ea15:	09 d1                	or     ecx,edx
c001ea17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea1b:	88 d9                	mov    cl,bl
c001ea1d:	d3 e7                	shl    edi,cl
c001ea1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ea23:	89 f7                	mov    edi,esi
c001ea25:	88 c1                	mov    cl,al
c001ea27:	d3 ef                	shr    edi,cl
c001ea29:	88 d9                	mov    cl,bl
c001ea2b:	d3 e6                	shl    esi,cl
c001ea2d:	89 ea                	mov    edx,ebp
c001ea2f:	88 c1                	mov    cl,al
c001ea31:	d3 ea                	shr    edx,cl
c001ea33:	09 d6                	or     esi,edx
c001ea35:	89 f0                	mov    eax,esi
c001ea37:	89 fa                	mov    edx,edi
c001ea39:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ea3d:	89 d7                	mov    edi,edx
c001ea3f:	89 c6                	mov    esi,eax
c001ea41:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ea45:	39 d7                	cmp    edi,edx
c001ea47:	72 13                	jb     c001ea5c <__udivdi3+0xec>
c001ea49:	74 09                	je     c001ea54 <__udivdi3+0xe4>
c001ea4b:	89 f0                	mov    eax,esi
c001ea4d:	31 db                	xor    ebx,ebx
c001ea4f:	e9 43 ff ff ff       	jmp    c001e997 <__udivdi3+0x27>
c001ea54:	88 d9                	mov    cl,bl
c001ea56:	d3 e5                	shl    ebp,cl
c001ea58:	39 c5                	cmp    ebp,eax
c001ea5a:	73 ef                	jae    c001ea4b <__udivdi3+0xdb>
c001ea5c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ea5f:	31 db                	xor    ebx,ebx
c001ea61:	e9 31 ff ff ff       	jmp    c001e997 <__udivdi3+0x27>
c001ea66:	66 90                	xchg   ax,ax
c001ea68:	31 c0                	xor    eax,eax
c001ea6a:	e9 28 ff ff ff       	jmp    c001e997 <__udivdi3+0x27>
c001ea6f:	90                   	nop

c001ea70 <__umoddi3>:
c001ea70:	55                   	push   ebp
c001ea71:	57                   	push   edi
c001ea72:	56                   	push   esi
c001ea73:	53                   	push   ebx
c001ea74:	83 ec 1c             	sub    esp,0x1c
c001ea77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ea7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ea7f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ea83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ea87:	89 da                	mov    edx,ebx
c001ea89:	85 c0                	test   eax,eax
c001ea8b:	75 37                	jne    c001eac4 <__umoddi3+0x54>
c001ea8d:	39 df                	cmp    edi,ebx
c001ea8f:	76 13                	jbe    c001eaa4 <__umoddi3+0x34>
c001ea91:	89 f0                	mov    eax,esi
c001ea93:	f7 f7                	div    edi
c001ea95:	89 d0                	mov    eax,edx
c001ea97:	31 d2                	xor    edx,edx
c001ea99:	83 c4 1c             	add    esp,0x1c
c001ea9c:	5b                   	pop    ebx
c001ea9d:	5e                   	pop    esi
c001ea9e:	5f                   	pop    edi
c001ea9f:	5d                   	pop    ebp
c001eaa0:	c3                   	ret    
c001eaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001eaa4:	89 fd                	mov    ebp,edi
c001eaa6:	85 ff                	test   edi,edi
c001eaa8:	75 0b                	jne    c001eab5 <__umoddi3+0x45>
c001eaaa:	b8 01 00 00 00       	mov    eax,0x1
c001eaaf:	31 d2                	xor    edx,edx
c001eab1:	f7 f7                	div    edi
c001eab3:	89 c5                	mov    ebp,eax
c001eab5:	89 d8                	mov    eax,ebx
c001eab7:	31 d2                	xor    edx,edx
c001eab9:	f7 f5                	div    ebp
c001eabb:	89 f0                	mov    eax,esi
c001eabd:	f7 f5                	div    ebp
c001eabf:	89 d0                	mov    eax,edx
c001eac1:	eb d4                	jmp    c001ea97 <__umoddi3+0x27>
c001eac3:	90                   	nop
c001eac4:	89 f1                	mov    ecx,esi
c001eac6:	39 d8                	cmp    eax,ebx
c001eac8:	76 0a                	jbe    c001ead4 <__umoddi3+0x64>
c001eaca:	89 f0                	mov    eax,esi
c001eacc:	83 c4 1c             	add    esp,0x1c
c001eacf:	5b                   	pop    ebx
c001ead0:	5e                   	pop    esi
c001ead1:	5f                   	pop    edi
c001ead2:	5d                   	pop    ebp
c001ead3:	c3                   	ret    
c001ead4:	0f bd e8             	bsr    ebp,eax
c001ead7:	83 f5 1f             	xor    ebp,0x1f
c001eada:	75 1c                	jne    c001eaf8 <__umoddi3+0x88>
c001eadc:	39 d8                	cmp    eax,ebx
c001eade:	72 04                	jb     c001eae4 <__umoddi3+0x74>
c001eae0:	39 f7                	cmp    edi,esi
c001eae2:	77 08                	ja     c001eaec <__umoddi3+0x7c>
c001eae4:	89 da                	mov    edx,ebx
c001eae6:	29 fe                	sub    esi,edi
c001eae8:	19 c2                	sbb    edx,eax
c001eaea:	89 f1                	mov    ecx,esi
c001eaec:	89 c8                	mov    eax,ecx
c001eaee:	83 c4 1c             	add    esp,0x1c
c001eaf1:	5b                   	pop    ebx
c001eaf2:	5e                   	pop    esi
c001eaf3:	5f                   	pop    edi
c001eaf4:	5d                   	pop    ebp
c001eaf5:	c3                   	ret    
c001eaf6:	66 90                	xchg   ax,ax
c001eaf8:	ba 20 00 00 00       	mov    edx,0x20
c001eafd:	29 ea                	sub    edx,ebp
c001eaff:	89 e9                	mov    ecx,ebp
c001eb01:	d3 e0                	shl    eax,cl
c001eb03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb07:	89 f8                	mov    eax,edi
c001eb09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001eb0d:	88 d1                	mov    cl,dl
c001eb0f:	d3 e8                	shr    eax,cl
c001eb11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb15:	09 c1                	or     ecx,eax
c001eb17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eb1b:	89 e9                	mov    ecx,ebp
c001eb1d:	d3 e7                	shl    edi,cl
c001eb1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eb23:	89 d8                	mov    eax,ebx
c001eb25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb29:	88 d1                	mov    cl,dl
c001eb2b:	d3 e8                	shr    eax,cl
c001eb2d:	89 c7                	mov    edi,eax
c001eb2f:	89 e9                	mov    ecx,ebp
c001eb31:	d3 e3                	shl    ebx,cl
c001eb33:	89 f0                	mov    eax,esi
c001eb35:	88 d1                	mov    cl,dl
c001eb37:	d3 e8                	shr    eax,cl
c001eb39:	09 d8                	or     eax,ebx
c001eb3b:	89 e9                	mov    ecx,ebp
c001eb3d:	d3 e6                	shl    esi,cl
c001eb3f:	89 f3                	mov    ebx,esi
c001eb41:	89 fa                	mov    edx,edi
c001eb43:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001eb47:	89 d1                	mov    ecx,edx
c001eb49:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eb4d:	89 c6                	mov    esi,eax
c001eb4f:	89 d7                	mov    edi,edx
c001eb51:	39 d1                	cmp    ecx,edx
c001eb53:	72 27                	jb     c001eb7c <__umoddi3+0x10c>
c001eb55:	74 21                	je     c001eb78 <__umoddi3+0x108>
c001eb57:	89 ca                	mov    edx,ecx
c001eb59:	29 f3                	sub    ebx,esi
c001eb5b:	19 fa                	sbb    edx,edi
c001eb5d:	89 d0                	mov    eax,edx
c001eb5f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001eb63:	d3 e0                	shl    eax,cl
c001eb65:	89 e9                	mov    ecx,ebp
c001eb67:	d3 eb                	shr    ebx,cl
c001eb69:	09 d8                	or     eax,ebx
c001eb6b:	d3 ea                	shr    edx,cl
c001eb6d:	83 c4 1c             	add    esp,0x1c
c001eb70:	5b                   	pop    ebx
c001eb71:	5e                   	pop    esi
c001eb72:	5f                   	pop    edi
c001eb73:	5d                   	pop    ebp
c001eb74:	c3                   	ret    
c001eb75:	8d 76 00             	lea    esi,[esi+0x0]
c001eb78:	39 c3                	cmp    ebx,eax
c001eb7a:	73 db                	jae    c001eb57 <__umoddi3+0xe7>
c001eb7c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001eb80:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001eb84:	89 d7                	mov    edi,edx
c001eb86:	89 c6                	mov    esi,eax
c001eb88:	eb cd                	jmp    c001eb57 <__umoddi3+0xe7>

Disassembly of section .init:

c001eb8a <_init>:
c001eb8a:	55                   	push   ebp
c001eb8b:	89 e5                	mov    ebp,esp
c001eb8d:	e8 62 15 fe ff       	call   c00000f4 <frame_dummy>
c001eb92:	e8 e5 fa ff ff       	call   c001e67c <__do_global_ctors_aux>
c001eb97:	5d                   	pop    ebp
c001eb98:	c3                   	ret    

Disassembly of section .fini:

c001eb99 <_fini>:
c001eb99:	55                   	push   ebp
c001eb9a:	89 e5                	mov    ebp,esp
c001eb9c:	e8 e3 14 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001eba1:	5d                   	pop    ebp
c001eba2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001eba4 <Computer::~Computer()>:
c001eba4:	83 ec 0c             	sub    esp,0xc
c001eba7:	ba b4 fe 01 c0       	mov    edx,0xc001feb4
c001ebac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb0:	89 10                	mov    DWORD PTR [eax],edx
c001ebb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	50                   	push   eax
c001ebba:	e8 77 d3 fe ff       	call   c000bf36 <Device::~Device()>
c001ebbf:	83 c4 10             	add    esp,0x10
c001ebc2:	90                   	nop
c001ebc3:	83 c4 0c             	add    esp,0xc
c001ebc6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ebc8 <Computer::~Computer()>:
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd2:	e8 cd ff ff ff       	call   c001eba4 <Computer::~Computer()>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	83 ec 08             	sub    esp,0x8
c001ebdd:	68 70 01 00 00       	push   0x170
c001ebe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebe6:	e8 15 bc fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001ebeb:	83 c4 10             	add    esp,0x10
c001ebee:	83 c4 0c             	add    esp,0xc
c001ebf1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ebf2 <idleCommon()>:
c001ebf2:	83 ec 0c             	sub    esp,0xc
c001ebf5:	fa                   	cli    
c001ebf6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001ebfc:	e8 23 67 ff ff       	call   c0015324 <schedule()>
c001ec01:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001ec06:	48                   	dec    eax
c001ec07:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001ec0c:	75 01                	jne    c001ec0f <idleCommon()+0x1d>
c001ec0e:	fb                   	sti    
c001ec0f:	83 c4 0c             	add    esp,0xc
c001ec12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec14 <LinkedList<UnixFile>::~LinkedList()>:
c001ec14:	90                   	nop
c001ec15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec16 <LinkedList<UnixFile>::LinkedList()>:
c001ec16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec56:	90                   	nop
c001ec57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ec58 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ec58:	83 ec 0c             	sub    esp,0xc
c001ec5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec60:	75 10                	jne    c001ec72 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ec62:	83 ec 0c             	sub    esp,0xc
c001ec65:	68 c8 00 02 c0       	push   0xc00200c8
c001ec6a:	e8 ae 1e ff ff       	call   c0010b1d <KePanic(char const*)>
c001ec6f:	83 c4 10             	add    esp,0x10
c001ec72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec76:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec78:	85 c0                	test   eax,eax
c001ec7a:	74 34                	je     c001ecb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ec7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec83:	85 c0                	test   eax,eax
c001ec85:	74 29                	je     c001ecb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ec87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eca7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecae:	eb 65                	jmp    c001ed15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecb6:	85 c0                	test   eax,eax
c001ecb8:	75 4b                	jne    c001ed05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ecba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecc1:	85 c0                	test   eax,eax
c001ecc3:	75 40                	jne    c001ed05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ecc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eccd:	89 10                	mov    DWORD PTR [eax],edx
c001eccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ece1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ece8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecef:	85 c0                	test   eax,eax
c001ecf1:	74 22                	je     c001ed15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ecf3:	83 ec 0c             	sub    esp,0xc
c001ecf6:	68 ea 00 02 c0       	push   0xc00200ea
c001ecfb:	e8 1d 1e ff ff       	call   c0010b1d <KePanic(char const*)>
c001ed00:	83 c4 10             	add    esp,0x10
c001ed03:	eb 10                	jmp    c001ed15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed05:	83 ec 0c             	sub    esp,0xc
c001ed08:	68 f4 00 02 c0       	push   0xc00200f4
c001ed0d:	e8 0b 1e ff ff       	call   c0010b1d <KePanic(char const*)>
c001ed12:	83 c4 10             	add    esp,0x10
c001ed15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed26:	90                   	nop
c001ed27:	83 c4 0c             	add    esp,0xc
c001ed2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ed2c <LinkedList<UnixFile>::getFirstElement()>:
c001ed2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ed34 <LinkedList<UnixFile>::removeFirst()>:
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed3d:	85 c0                	test   eax,eax
c001ed3f:	75 12                	jne    c001ed53 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ed41:	83 ec 0c             	sub    esp,0xc
c001ed44:	68 00 01 02 c0       	push   0xc0020100
c001ed49:	e8 cf 1d ff ff       	call   c0010b1d <KePanic(char const*)>
c001ed4e:	83 c4 10             	add    esp,0x10
c001ed51:	eb 7e                	jmp    c001edd1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ed53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	74 10                	je     c001ed71 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ed61:	83 ec 0c             	sub    esp,0xc
c001ed64:	68 4b 01 02 c0       	push   0xc002014b
c001ed69:	e8 af 1d ff ff       	call   c0010b1d <KePanic(char const*)>
c001ed6e:	83 c4 10             	add    esp,0x10
c001ed71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed7a:	85 c0                	test   eax,eax
c001ed7c:	75 33                	jne    c001edb1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ed7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed9a:	83 f8 01             	cmp    eax,0x1
c001ed9d:	74 21                	je     c001edc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed9f:	83 ec 0c             	sub    esp,0xc
c001eda2:	68 24 01 02 c0       	push   0xc0020124
c001eda7:	e8 71 1d ff ff       	call   c0010b1d <KePanic(char const*)>
c001edac:	83 c4 10             	add    esp,0x10
c001edaf:	eb 0f                	jmp    c001edc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001edba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbe:	89 10                	mov    DWORD PTR [eax],edx
c001edc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edc7:	8d 50 ff             	lea    edx,[eax-0x1]
c001edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edd1:	83 c4 0c             	add    esp,0xc
c001edd4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001edd6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001edd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eddd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001edde <DriverlessDevice::~DriverlessDevice()>:
c001edde:	ba 7c 0b 02 c0       	mov    edx,0xc0020b7c
c001ede3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ede7:	89 10                	mov    DWORD PTR [eax],edx
c001ede9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eded:	50                   	push   eax
c001edee:	e8 43 d1 fe ff       	call   c000bf36 <Device::~Device()>
c001edf3:	83 c4 04             	add    esp,0x4
c001edf6:	90                   	nop
c001edf7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001edf8 <DriverlessDevice::~DriverlessDevice()>:
c001edf8:	83 ec 0c             	sub    esp,0xc
c001edfb:	83 ec 0c             	sub    esp,0xc
c001edfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee02:	e8 d7 ff ff ff       	call   c001edde <DriverlessDevice::~DriverlessDevice()>
c001ee07:	83 c4 10             	add    esp,0x10
c001ee0a:	83 ec 08             	sub    esp,0x8
c001ee0d:	68 58 01 00 00       	push   0x158
c001ee12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee16:	e8 e5 b9 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001ee1b:	83 c4 10             	add    esp,0x10
c001ee1e:	83 c4 0c             	add    esp,0xc
c001ee21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ee22 <LinkedList<Device>::addElement(Device*)>:
c001ee22:	83 ec 0c             	sub    esp,0xc
c001ee25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee2a:	75 10                	jne    c001ee3c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ee2c:	83 ec 0c             	sub    esp,0xc
c001ee2f:	68 c8 00 02 c0       	push   0xc00200c8
c001ee34:	e8 e4 1c ff ff       	call   c0010b1d <KePanic(char const*)>
c001ee39:	83 c4 10             	add    esp,0x10
c001ee3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee42:	85 c0                	test   eax,eax
c001ee44:	74 3a                	je     c001ee80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee4d:	85 c0                	test   eax,eax
c001ee4f:	74 2f                	je     c001ee80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ee62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ee7e:	eb 68                	jmp    c001eee8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee86:	85 c0                	test   eax,eax
c001ee88:	75 4e                	jne    c001eed8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ee8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee91:	85 c0                	test   eax,eax
c001ee93:	75 43                	jne    c001eed8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ee95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee9d:	89 10                	mov    DWORD PTR [eax],edx
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eeb1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eec2:	85 c0                	test   eax,eax
c001eec4:	74 22                	je     c001eee8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eec6:	83 ec 0c             	sub    esp,0xc
c001eec9:	68 ea 00 02 c0       	push   0xc00200ea
c001eece:	e8 4a 1c ff ff       	call   c0010b1d <KePanic(char const*)>
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	eb 10                	jmp    c001eee8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eed8:	83 ec 0c             	sub    esp,0xc
c001eedb:	68 f4 00 02 c0       	push   0xc00200f4
c001eee0:	e8 38 1c ff ff       	call   c0010b1d <KePanic(char const*)>
c001eee5:	83 c4 10             	add    esp,0x10
c001eee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeef:	8d 50 01             	lea    edx,[eax+0x1]
c001eef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eef9:	90                   	nop
c001eefa:	83 c4 0c             	add    esp,0xc
c001eefd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eefe <LinkedList<Device>::LinkedList()>:
c001eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef3e:	90                   	nop
c001ef3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ef40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ef40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef46:	85 c0                	test   eax,eax
c001ef48:	75 0e                	jne    c001ef58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ef4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef51:	85 c0                	test   eax,eax
c001ef53:	75 03                	jne    c001ef58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ef55:	b0 01                	mov    al,0x1
c001ef57:	c3                   	ret    
c001ef58:	b0 00                	mov    al,0x0
c001ef5a:	90                   	nop
c001ef5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ef5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ef5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ef64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef6d:	85 c0                	test   eax,eax
c001ef6f:	75 17                	jne    c001ef88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ef71:	83 ec 0c             	sub    esp,0xc
c001ef74:	68 00 01 02 c0       	push   0xc0020100
c001ef79:	e8 9f 1b ff ff       	call   c0010b1d <KePanic(char const*)>
c001ef7e:	83 c4 10             	add    esp,0x10
c001ef81:	e9 96 00 00 00       	jmp    c001f01c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ef86:	66 90                	xchg   ax,ax
c001ef88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef92:	85 c0                	test   eax,eax
c001ef94:	0f 95 c0             	setne  al
c001ef97:	0f b6 c0             	movzx  eax,al
c001ef9a:	85 c0                	test   eax,eax
c001ef9c:	74 12                	je     c001efb0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ef9e:	83 ec 0c             	sub    esp,0xc
c001efa1:	68 4b 01 02 c0       	push   0xc002014b
c001efa6:	e8 72 1b ff ff       	call   c0010b1d <KePanic(char const*)>
c001efab:	83 c4 10             	add    esp,0x10
c001efae:	66 90                	xchg   ax,ax
c001efb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001efb9:	85 c0                	test   eax,eax
c001efbb:	0f 94 c0             	sete   al
c001efbe:	0f b6 c0             	movzx  eax,al
c001efc1:	85 c0                	test   eax,eax
c001efc3:	74 33                	je     c001eff8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001efc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efe1:	83 f8 01             	cmp    eax,0x1
c001efe4:	74 22                	je     c001f008 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	68 24 01 02 c0       	push   0xc0020124
c001efee:	e8 2a 1b ff ff       	call   c0010b1d <KePanic(char const*)>
c001eff3:	83 c4 10             	add    esp,0x10
c001eff6:	eb 10                	jmp    c001f008 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001eff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effc:	8b 00                	mov    eax,DWORD PTR [eax]
c001effe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f005:	89 10                	mov    DWORD PTR [eax],edx
c001f007:	90                   	nop
c001f008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f00f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f016:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f019:	8d 76 00             	lea    esi,[esi+0x0]
c001f01c:	83 c4 0c             	add    esp,0xc
c001f01f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f020 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f028:	75 12                	jne    c001f03c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	68 c8 00 02 c0       	push   0xc00200c8
c001f032:	e8 e6 1a ff ff       	call   c0010b1d <KePanic(char const*)>
c001f037:	83 c4 10             	add    esp,0x10
c001f03a:	66 90                	xchg   ax,ax
c001f03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f040:	8b 00                	mov    eax,DWORD PTR [eax]
c001f042:	85 c0                	test   eax,eax
c001f044:	74 36                	je     c001f07c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f04d:	85 c0                	test   eax,eax
c001f04f:	74 2b                	je     c001f07c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f055:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f058:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f05c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f063:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f067:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f071:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f078:	eb 6a                	jmp    c001f0e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f07a:	66 90                	xchg   ax,ax
c001f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f080:	8b 00                	mov    eax,DWORD PTR [eax]
c001f082:	85 c0                	test   eax,eax
c001f084:	75 4e                	jne    c001f0d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f08d:	85 c0                	test   eax,eax
c001f08f:	75 43                	jne    c001f0d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f095:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f099:	89 10                	mov    DWORD PTR [eax],edx
c001f09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0bb:	85 c0                	test   eax,eax
c001f0bd:	74 25                	je     c001f0e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0bf:	83 ec 0c             	sub    esp,0xc
c001f0c2:	68 ea 00 02 c0       	push   0xc00200ea
c001f0c7:	e8 51 1a ff ff       	call   c0010b1d <KePanic(char const*)>
c001f0cc:	83 c4 10             	add    esp,0x10
c001f0cf:	eb 13                	jmp    c001f0e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	68 f4 00 02 c0       	push   0xc00200f4
c001f0dc:	e8 3c 1a ff ff       	call   c0010b1d <KePanic(char const*)>
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0eb:	8d 50 01             	lea    edx,[eax+0x1]
c001f0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f0f5:	90                   	nop
c001f0f6:	83 c4 0c             	add    esp,0xc
c001f0f9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f0fc <ACPI::~ACPI()>:
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	ba 80 11 02 c0       	mov    edx,0xc0021180
c001f104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f108:	89 10                	mov    DWORD PTR [eax],edx
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	50                   	push   eax
c001f112:	e8 1f ce fe ff       	call   c000bf36 <Device::~Device()>
c001f117:	83 c4 10             	add    esp,0x10
c001f11a:	90                   	nop
c001f11b:	83 c4 0c             	add    esp,0xc
c001f11e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f120 <ACPI::~ACPI()>:
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	83 ec 0c             	sub    esp,0xc
c001f126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12a:	e8 cd ff ff ff       	call   c001f0fc <ACPI::~ACPI()>
c001f12f:	83 c4 10             	add    esp,0x10
c001f132:	83 ec 08             	sub    esp,0x8
c001f135:	68 64 12 00 00       	push   0x1264
c001f13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13e:	e8 bd b6 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	83 c4 0c             	add    esp,0xc
c001f149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f14c <LinkedList<Device>::~LinkedList()>:
c001f14c:	90                   	nop
c001f14d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f150 <LinkedList<Device>::isEmpty()>:
c001f150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f154:	8b 00                	mov    eax,DWORD PTR [eax]
c001f156:	85 c0                	test   eax,eax
c001f158:	75 0e                	jne    c001f168 <LinkedList<Device>::isEmpty()+0x18>
c001f15a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f15e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f161:	85 c0                	test   eax,eax
c001f163:	75 03                	jne    c001f168 <LinkedList<Device>::isEmpty()+0x18>
c001f165:	b0 01                	mov    al,0x1
c001f167:	c3                   	ret    
c001f168:	b0 00                	mov    al,0x0
c001f16a:	90                   	nop
c001f16b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f16c <LinkedList<Device>::getFirstElement()>:
c001f16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f170:	8b 00                	mov    eax,DWORD PTR [eax]
c001f172:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f174 <LinkedList<Device>::removeFirst()>:
c001f174:	83 ec 0c             	sub    esp,0xc
c001f177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f17b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f17d:	85 c0                	test   eax,eax
c001f17f:	75 17                	jne    c001f198 <LinkedList<Device>::removeFirst()+0x24>
c001f181:	83 ec 0c             	sub    esp,0xc
c001f184:	68 00 01 02 c0       	push   0xc0020100
c001f189:	e8 8f 19 ff ff       	call   c0010b1d <KePanic(char const*)>
c001f18e:	83 c4 10             	add    esp,0x10
c001f191:	e9 92 00 00 00       	jmp    c001f228 <LinkedList<Device>::removeFirst()+0xb4>
c001f196:	66 90                	xchg   ax,ax
c001f198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f19f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f1a5:	85 c0                	test   eax,eax
c001f1a7:	74 13                	je     c001f1bc <LinkedList<Device>::removeFirst()+0x48>
c001f1a9:	83 ec 0c             	sub    esp,0xc
c001f1ac:	68 4b 01 02 c0       	push   0xc002014b
c001f1b1:	e8 67 19 ff ff       	call   c0010b1d <KePanic(char const*)>
c001f1b6:	83 c4 10             	add    esp,0x10
c001f1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1c2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f1c8:	85 c0                	test   eax,eax
c001f1ca:	75 34                	jne    c001f200 <LinkedList<Device>::removeFirst()+0x8c>
c001f1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1e8:	83 f8 01             	cmp    eax,0x1
c001f1eb:	74 27                	je     c001f214 <LinkedList<Device>::removeFirst()+0xa0>
c001f1ed:	83 ec 0c             	sub    esp,0xc
c001f1f0:	68 24 01 02 c0       	push   0xc0020124
c001f1f5:	e8 23 19 ff ff       	call   c0010b1d <KePanic(char const*)>
c001f1fa:	83 c4 10             	add    esp,0x10
c001f1fd:	eb 15                	jmp    c001f214 <LinkedList<Device>::removeFirst()+0xa0>
c001f1ff:	90                   	nop
c001f200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f204:	8b 00                	mov    eax,DWORD PTR [eax]
c001f206:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f210:	89 10                	mov    DWORD PTR [eax],edx
c001f212:	66 90                	xchg   ax,ax
c001f214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f218:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f21b:	8d 50 ff             	lea    edx,[eax-0x1]
c001f21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f222:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f225:	8d 76 00             	lea    esi,[esi+0x0]
c001f228:	83 c4 0c             	add    esp,0xc
c001f22b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f22c <CPU::~CPU()>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	ba 28 13 02 c0       	mov    edx,0xc0021328
c001f234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f238:	89 10                	mov    DWORD PTR [eax],edx
c001f23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23e:	83 ec 0c             	sub    esp,0xc
c001f241:	50                   	push   eax
c001f242:	e8 ef cc fe ff       	call   c000bf36 <Device::~Device()>
c001f247:	83 c4 10             	add    esp,0x10
c001f24a:	90                   	nop
c001f24b:	83 c4 0c             	add    esp,0xc
c001f24e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f250 <CPU::~CPU()>:
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	83 ec 0c             	sub    esp,0xc
c001f256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f25a:	e8 cd ff ff ff       	call   c001f22c <CPU::~CPU()>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	83 ec 08             	sub    esp,0x8
c001f265:	68 94 11 00 00       	push   0x1194
c001f26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f26e:	e8 8d b5 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	83 c4 0c             	add    esp,0xc
c001f279:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f27c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f27c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f280:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f283:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f284 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f284:	90                   	nop
c001f285:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f288 <ThreadControlBlock::ThreadControlBlock()>:
c001f288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f28c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f297:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f29e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2a2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2ad:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2b8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f2bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2cb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f2cf:	90                   	nop
c001f2d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f2d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f30d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f314:	90                   	nop
c001f315:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f316 <PCI::~PCI()>:
c001f316:	83 ec 0c             	sub    esp,0xc
c001f319:	ba c0 21 02 c0       	mov    edx,0xc00221c0
c001f31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f322:	89 10                	mov    DWORD PTR [eax],edx
c001f324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	50                   	push   eax
c001f32c:	e8 97 c6 fe ff       	call   c000b9c8 <Bus::~Bus()>
c001f331:	83 c4 10             	add    esp,0x10
c001f334:	90                   	nop
c001f335:	83 c4 0c             	add    esp,0xc
c001f338:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f33a <PCI::~PCI()>:
c001f33a:	83 ec 0c             	sub    esp,0xc
c001f33d:	83 ec 0c             	sub    esp,0xc
c001f340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f344:	e8 cd ff ff ff       	call   c001f316 <PCI::~PCI()>
c001f349:	83 c4 10             	add    esp,0x10
c001f34c:	83 ec 08             	sub    esp,0x8
c001f34f:	68 5c 01 00 00       	push   0x15c
c001f354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f358:	e8 a3 b4 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f35d:	83 c4 10             	add    esp,0x10
c001f360:	83 c4 0c             	add    esp,0xc
c001f363:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f364 <IDE::~IDE()>:
c001f364:	83 ec 0c             	sub    esp,0xc
c001f367:	ba 74 22 02 c0       	mov    edx,0xc0022274
c001f36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f370:	89 10                	mov    DWORD PTR [eax],edx
c001f372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f376:	83 ec 0c             	sub    esp,0xc
c001f379:	50                   	push   eax
c001f37a:	e8 31 d0 fe ff       	call   c000c3b0 <HardDiskController::~HardDiskController()>
c001f37f:	83 c4 10             	add    esp,0x10
c001f382:	90                   	nop
c001f383:	83 c4 0c             	add    esp,0xc
c001f386:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f388 <IDE::~IDE()>:
c001f388:	83 ec 0c             	sub    esp,0xc
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f392:	e8 cd ff ff ff       	call   c001f364 <IDE::~IDE()>
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	83 ec 08             	sub    esp,0x8
c001f39d:	68 70 02 00 00       	push   0x270
c001f3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a6:	e8 55 b4 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f3ab:	83 c4 10             	add    esp,0x10
c001f3ae:	83 c4 0c             	add    esp,0xc
c001f3b1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f3b2 <SATABus::~SATABus()>:
c001f3b2:	83 ec 0c             	sub    esp,0xc
c001f3b5:	ba c4 22 02 c0       	mov    edx,0xc00222c4
c001f3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3be:	89 10                	mov    DWORD PTR [eax],edx
c001f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c4:	83 ec 0c             	sub    esp,0xc
c001f3c7:	50                   	push   eax
c001f3c8:	e8 e3 cf fe ff       	call   c000c3b0 <HardDiskController::~HardDiskController()>
c001f3cd:	83 c4 10             	add    esp,0x10
c001f3d0:	90                   	nop
c001f3d1:	83 c4 0c             	add    esp,0xc
c001f3d4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f3d6 <SATABus::~SATABus()>:
c001f3d6:	83 ec 0c             	sub    esp,0xc
c001f3d9:	83 ec 0c             	sub    esp,0xc
c001f3dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e0:	e8 cd ff ff ff       	call   c001f3b2 <SATABus::~SATABus()>
c001f3e5:	83 c4 10             	add    esp,0x10
c001f3e8:	83 ec 08             	sub    esp,0x8
c001f3eb:	68 64 01 00 00       	push   0x164
c001f3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f4:	e8 07 b4 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	83 c4 0c             	add    esp,0xc
c001f3ff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f400 <ATA::~ATA()>:
c001f400:	83 ec 0c             	sub    esp,0xc
c001f403:	ba 04 23 02 c0       	mov    edx,0xc0022304
c001f408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f40c:	89 10                	mov    DWORD PTR [eax],edx
c001f40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f412:	83 ec 0c             	sub    esp,0xc
c001f415:	50                   	push   eax
c001f416:	e8 77 d0 fe ff       	call   c000c492 <PhysicalDisk::~PhysicalDisk()>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	90                   	nop
c001f41f:	83 c4 0c             	add    esp,0xc
c001f422:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f424 <ATA::~ATA()>:
c001f424:	83 ec 0c             	sub    esp,0xc
c001f427:	83 ec 0c             	sub    esp,0xc
c001f42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f42e:	e8 cd ff ff ff       	call   c001f400 <ATA::~ATA()>
c001f433:	83 c4 10             	add    esp,0x10
c001f436:	83 ec 08             	sub    esp,0x8
c001f439:	68 7c 01 00 00       	push   0x17c
c001f43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f442:	e8 b9 b3 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f447:	83 c4 10             	add    esp,0x10
c001f44a:	83 c4 0c             	add    esp,0xc
c001f44d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f44e <ATAPI::~ATAPI()>:
c001f44e:	83 ec 0c             	sub    esp,0xc
c001f451:	ba 4c 23 02 c0       	mov    edx,0xc002234c
c001f456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45a:	89 10                	mov    DWORD PTR [eax],edx
c001f45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f460:	83 ec 0c             	sub    esp,0xc
c001f463:	50                   	push   eax
c001f464:	e8 29 d0 fe ff       	call   c000c492 <PhysicalDisk::~PhysicalDisk()>
c001f469:	83 c4 10             	add    esp,0x10
c001f46c:	90                   	nop
c001f46d:	83 c4 0c             	add    esp,0xc
c001f470:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f472 <ATAPI::~ATAPI()>:
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	83 ec 0c             	sub    esp,0xc
c001f478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f47c:	e8 cd ff ff ff       	call   c001f44e <ATAPI::~ATAPI()>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	83 ec 08             	sub    esp,0x8
c001f487:	68 84 01 00 00       	push   0x184
c001f48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f490:	e8 6b b3 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f495:	83 c4 10             	add    esp,0x10
c001f498:	83 c4 0c             	add    esp,0xc
c001f49b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f49c <SATA::~SATA()>:
c001f49c:	83 ec 0c             	sub    esp,0xc
c001f49f:	ba 00 24 02 c0       	mov    edx,0xc0022400
c001f4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a8:	89 10                	mov    DWORD PTR [eax],edx
c001f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ae:	83 ec 0c             	sub    esp,0xc
c001f4b1:	50                   	push   eax
c001f4b2:	e8 db cf fe ff       	call   c000c492 <PhysicalDisk::~PhysicalDisk()>
c001f4b7:	83 c4 10             	add    esp,0x10
c001f4ba:	90                   	nop
c001f4bb:	83 c4 0c             	add    esp,0xc
c001f4be:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f4c0 <SATA::~SATA()>:
c001f4c0:	83 ec 0c             	sub    esp,0xc
c001f4c3:	83 ec 0c             	sub    esp,0xc
c001f4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4ca:	e8 cd ff ff ff       	call   c001f49c <SATA::~SATA()>
c001f4cf:	83 c4 10             	add    esp,0x10
c001f4d2:	83 ec 08             	sub    esp,0x8
c001f4d5:	68 7c 01 00 00       	push   0x17c
c001f4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4de:	e8 1d b3 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f4e3:	83 c4 10             	add    esp,0x10
c001f4e6:	83 c4 0c             	add    esp,0xc
c001f4e9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f4ea <SATAPI::~SATAPI()>:
c001f4ea:	83 ec 0c             	sub    esp,0xc
c001f4ed:	ba 24 25 02 c0       	mov    edx,0xc0022524
c001f4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f6:	89 10                	mov    DWORD PTR [eax],edx
c001f4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fc:	83 ec 0c             	sub    esp,0xc
c001f4ff:	50                   	push   eax
c001f500:	e8 8d cf fe ff       	call   c000c492 <PhysicalDisk::~PhysicalDisk()>
c001f505:	83 c4 10             	add    esp,0x10
c001f508:	90                   	nop
c001f509:	83 c4 0c             	add    esp,0xc
c001f50c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f50e <SATAPI::~SATAPI()>:
c001f50e:	83 ec 0c             	sub    esp,0xc
c001f511:	83 ec 0c             	sub    esp,0xc
c001f514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f518:	e8 cd ff ff ff       	call   c001f4ea <SATAPI::~SATAPI()>
c001f51d:	83 c4 10             	add    esp,0x10
c001f520:	83 ec 08             	sub    esp,0x8
c001f523:	68 84 01 00 00       	push   0x184
c001f528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f52c:	e8 cf b2 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f531:	83 c4 10             	add    esp,0x10
c001f534:	83 c4 0c             	add    esp,0xc
c001f537:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f538 <IOAPIC::~IOAPIC()>:
c001f538:	83 ec 0c             	sub    esp,0xc
c001f53b:	ba 64 25 02 c0       	mov    edx,0xc0022564
c001f540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f544:	89 10                	mov    DWORD PTR [eax],edx
c001f546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54a:	83 ec 0c             	sub    esp,0xc
c001f54d:	50                   	push   eax
c001f54e:	e8 e3 c9 fe ff       	call   c000bf36 <Device::~Device()>
c001f553:	83 c4 10             	add    esp,0x10
c001f556:	90                   	nop
c001f557:	83 c4 0c             	add    esp,0xc
c001f55a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f55c <IOAPIC::~IOAPIC()>:
c001f55c:	83 ec 0c             	sub    esp,0xc
c001f55f:	83 ec 0c             	sub    esp,0xc
c001f562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f566:	e8 cd ff ff ff       	call   c001f538 <IOAPIC::~IOAPIC()>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	83 ec 08             	sub    esp,0x8
c001f571:	68 68 01 00 00       	push   0x168
c001f576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f57a:	e8 81 b2 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f57f:	83 c4 10             	add    esp,0x10
c001f582:	83 c4 0c             	add    esp,0xc
c001f585:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f588 <APICTimer::~APICTimer()>:
c001f588:	83 ec 0c             	sub    esp,0xc
c001f58b:	ba ac 25 02 c0       	mov    edx,0xc00225ac
c001f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f594:	89 10                	mov    DWORD PTR [eax],edx
c001f596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59a:	83 ec 0c             	sub    esp,0xc
c001f59d:	50                   	push   eax
c001f59e:	e8 69 e4 fe ff       	call   c000da0c <Timer::~Timer()>
c001f5a3:	83 c4 10             	add    esp,0x10
c001f5a6:	90                   	nop
c001f5a7:	83 c4 0c             	add    esp,0xc
c001f5aa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f5ac <APICTimer::~APICTimer()>:
c001f5ac:	83 ec 0c             	sub    esp,0xc
c001f5af:	83 ec 0c             	sub    esp,0xc
c001f5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b6:	e8 cd ff ff ff       	call   c001f588 <APICTimer::~APICTimer()>
c001f5bb:	83 c4 10             	add    esp,0x10
c001f5be:	83 ec 08             	sub    esp,0x8
c001f5c1:	68 60 01 00 00       	push   0x160
c001f5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5ca:	e8 31 b2 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	83 c4 0c             	add    esp,0xc
c001f5d5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f5d8 <PIT::~PIT()>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	ba fc 25 02 c0       	mov    edx,0xc00225fc
c001f5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e4:	89 10                	mov    DWORD PTR [eax],edx
c001f5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ea:	83 ec 0c             	sub    esp,0xc
c001f5ed:	50                   	push   eax
c001f5ee:	e8 19 e4 fe ff       	call   c000da0c <Timer::~Timer()>
c001f5f3:	83 c4 10             	add    esp,0x10
c001f5f6:	90                   	nop
c001f5f7:	83 c4 0c             	add    esp,0xc
c001f5fa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f5fc <PIT::~PIT()>:
c001f5fc:	83 ec 0c             	sub    esp,0xc
c001f5ff:	83 ec 0c             	sub    esp,0xc
c001f602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f606:	e8 cd ff ff ff       	call   c001f5d8 <PIT::~PIT()>
c001f60b:	83 c4 10             	add    esp,0x10
c001f60e:	83 ec 08             	sub    esp,0x8
c001f611:	68 5c 01 00 00       	push   0x15c
c001f616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f61a:	e8 e1 b1 fe ff       	call   c000a800 <operator delete(void*, unsigned long)>
c001f61f:	83 c4 10             	add    esp,0x10
c001f622:	83 c4 0c             	add    esp,0xc
c001f625:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 19 14 02 c0       	mov    esi,0xc0021419
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 35 14 02 c0       	mov    esi,0xc0021435
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
