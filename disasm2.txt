
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 41 02 c0       	mov    eax,0xc00241c4
c0000025:	3d c4 41 02 c0       	cmp    eax,0xc00241c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 41 02 c0       	push   0xc00241c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 41 02 c0       	mov    eax,0xc00241c4
c0000051:	2d c4 41 02 c0       	sub    eax,0xc00241c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 41 02 c0       	push   0xc00241c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc 03 02 c0       	mov    ebx,0xc00203fc
c0000097:	81 eb f8 03 02 c0    	sub    ebx,0xc00203f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 03 02 c0       	mov    esi,0xc00203f8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 41 02 c0       	push   0xc00241c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 c4 41 02 c0       	push   0xc00241c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 03 56 01 00       	call   c00158b0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e1 55 01 00       	call   c00158b0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ee 5a 01 00       	call   c0015ddc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 89 61 01 00       	call   c0016480 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 d3 11 01 00       	jmp    c0011552 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc00],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc00],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc00],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc00],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc00],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc00],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 04 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfafc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 72 7c 01 00       	jmp    c0019a4c <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 9c 7c 01 00       	jmp    c0019a8c <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 bd 7c 01 00       	jmp    c0019acc <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 60 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9a0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 60 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9a0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba e0 2d 02 c0       	mov    edx,0xc0022de0
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 22 05 02 c0       	mov    eax,0xc0020522
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf e0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa20]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 2b 05 02 c0       	mov    eax,0xc002052b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 60 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf9a0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 b0 05 02 c0       	mov    eax,0xc00205b0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb a0 05 02 c0       	mov    ebx,0xc00205a0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 80 05 02 c0       	mov    eax,0xc0020580
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 90 05 02 c0       	mov    eax,0xc0020590
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 32 05 02 c0       	mov    edx,0xc0020532
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 3e 05 02 c0       	mov    edx,0xc002053e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 52 05 02 c0       	mov    edx,0xc0020552
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 80 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020980
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 80 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020980
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 80 07 02 c0       	mov    eax,0xc0020780
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 80 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf980]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 80 0a 02 c0       	push   0xc0020a80
c0006147:	e8 a4 42 01 00       	call   c001a3f0 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 8e 0a 02 c0       	push   0xc0020a8e
c000617f:	e8 6c 42 01 00       	call   c001a3f0 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 d5 41 01 00       	call   c001a394 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 9d 0a 02 c0       	push   0xc0020a9d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 a0 0a 02 c0       	push   0xc0020aa0
c000682f:	e8 bc 3b 01 00       	call   c001a3f0 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 ca 3b 01 00       	call   c001a40c <iso_kprintfd>
c0006842:	c7 04 24 a5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aa5
c0006849:	e8 a2 3b 01 00       	call   c001a3f0 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 b2 3b 01 00       	call   c001a40c <iso_kprintfd>
c000685a:	c7 04 24 ab 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aab
c0006861:	e8 8a 3b 01 00       	call   c001a3f0 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 9a 3b 01 00       	call   c001a40c <iso_kprintfd>
c0006872:	c7 04 24 b1 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ab1
c0006879:	e8 72 3b 01 00       	call   c001a3f0 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 82 3b 01 00       	call   c001a40c <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 9d 0a 02 c0       	push   0xc0020a9d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 ba 0a 02 c0       	push   0xc0020aba
c0006a52:	e8 99 39 01 00       	call   c001a3f0 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 c5 0a 02 c0       	push   0xc0020ac5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 cc 0a 02 c0       	push   0xc0020acc
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 d3 0a 02 c0       	push   0xc0020ad3
c0006b69:	e8 82 38 01 00       	call   c001a3f0 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 de 0a 02 c0       	push   0xc0020ade
c0006b84:	e8 67 38 01 00       	call   c001a3f0 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 f6 a0 00 00       	call   c0010d8a <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 1b 5e 00 00       	call   c000cabe <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 ef 0a 02 c0       	push   0xc0020aef
c0006cd4:	e8 90 a1 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 08 0b 02 c0       	push   0xc0020b08
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 07 ef 00 00       	call   c0015c08 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 16 f1 00 00       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 f0 68 01 c0       	push   0xc00168f0
c0006d25:	52                   	push   edx
c0006d26:	e8 01 f1 00 00       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 04 0c 02 c0       	push   0xc0020c04
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 2c a1 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 d5 a9 00 00       	call   c001171e <KeInitRand()>
c0006d49:	e8 c5 ff 00 00       	call   c0016d13 <Vm::initialise8086()>
c0006d4e:	e8 99 4a 00 00       	call   c000b7ec <Fs::initVFS()>
c0006d53:	c7 04 24 15 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b15
c0006d5a:	e8 0a a1 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 04 0c 02 c0       	push   0xc0020c04
c0006d7e:	e8 e6 a0 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0006d83:	e8 fe 41 00 00       	call   c000af86 <KeInitialiseSymlinks()>
c0006d88:	e8 3d a6 00 00       	call   c00113ca <KeLoadSystemEnv()>
c0006d8d:	e8 9a a8 00 00       	call   c001162c <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 2f 0b 02 c0       	push   0xc0020b2f
c0006d9c:	68 38 0b 02 c0       	push   0xc0020b38
c0006da1:	e8 3c d0 00 00       	call   c0013de2 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 6a 56 00 00       	call   c000c418 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 28 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c28
c0006db5:	e8 af a0 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 f0 5c 00 00       	call   c000cabc <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 40 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b40
c0006dd3:	e8 91 a0 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 51 0b 02 c0       	push   0xc0020b51
c0006de7:	e8 20 e8 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 57 ea 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 76 f4 00 00       	call   c0016278 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 6d 0b 02 c0       	push   0xc0020b6d
c0006e17:	50                   	push   eax
c0006e18:	e8 1b 5d 00 00       	call   c000cb38 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 df 84 01 00       	call   c001f3f6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 4d 93 00 00       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 26 93 00 00       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 04 93 00 00       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 e2 92 00 00       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 ef 91 00 00       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 ca 91 00 00       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 3e 83 01 00       	call   c001f3b0 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 8c 7f 01 00       	call   c001f020 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 e0 91 00 00       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 76 0b 02 c0       	push   0xc0020b76
c0007104:	e8 5e a4 00 00       	call   c0011567 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 7c 0b 02 c0       	push   0xc0020b7c
c0007140:	e8 22 a4 00 00       	call   c0011567 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 e7 8b 00 00       	jmp    c000fd74 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 82 0b 02 c0       	push   0xc0020b82
c00071e3:	0f 94 05 20 36 02 c0 	sete   BYTE PTR ds:0xc0023620
c00071ea:	e8 7a 9c 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 e3 86 00 00       	call   c000f8e8 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 8c 57 00 00       	call   c000c9a0 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 9a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b9a
c000722d:	e8 37 9c 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 12 91 00 00       	call   c001035a <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 49 57 00 00       	call   c000c9a0 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 48 0c 02 c0       	push   0xc0020c48
c0007274:	e8 f0 9b 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0007279:	e8 dc 0c 01 00       	call   c0017f5a <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 b4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb4
c0007285:	e8 df 9b 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 be ec 00 00       	call   c0015f54 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 cf 0b 02 c0       	push   0xc0020bcf
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 e0 0b 02 c0       	push   0xc0020be0
c000730d:	e8 55 a2 00 00       	call   c0011567 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 ed 0b 02 c0       	push   0xc0020bed
c0007322:	e8 40 a2 00 00       	call   c0011567 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 f7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bf7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 26 a2 00 00       	jmp    c0011567 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 f3 06 01 00       	call   c0017c26 <HalSystemIdle()>
c0007533:	e8 7a 84 01 00       	call   c001f9b2 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 b0 f0 01 c0       	push   0xc001f0b0
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 c0 f0 01 c0       	push   0xc001f0c0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 ca f0 01 c0       	push   0xc001f0ca
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 d4 f0 01 c0       	push   0xc001f0d4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 de f0 01 c0       	push   0xc001f0de
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 e8 f0 01 c0       	push   0xc001f0e8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 f2 f0 01 c0       	push   0xc001f0f2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 fc f0 01 c0       	push   0xc001f0fc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 06 f1 01 c0       	push   0xc001f106
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 0e f1 01 c0       	push   0xc001f10e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 18 f1 01 c0       	push   0xc001f118
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 20 f1 01 c0       	push   0xc001f120
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 28 f1 01 c0       	push   0xc001f128
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 30 f1 01 c0       	push   0xc001f130
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 4a f1 01 c0       	push   0xc001f14a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 52 f1 01 c0       	push   0xc001f152
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 5c f1 01 c0       	push   0xc001f15c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 66 f1 01 c0       	push   0xc001f166
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 70 f1 01 c0       	push   0xc001f170
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 0a f2 01 c0       	push   0xc001f20a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 11 f2 01 c0       	push   0xc001f211
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 fc f1 01 c0       	push   0xc001f1fc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 03 f2 01 c0       	push   0xc001f203
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 7a f1 01 c0       	push   0xc001f17a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 84 f1 01 c0       	push   0xc001f184
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 8e f1 01 c0       	push   0xc001f18e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 98 f1 01 c0       	push   0xc001f198
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 a2 f1 01 c0       	push   0xc001f1a2
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 ac f1 01 c0       	push   0xc001f1ac
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 b6 f1 01 c0       	push   0xc001f1b6
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 c0 f1 01 c0       	push   0xc001f1c0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 ca f1 01 c0       	push   0xc001f1ca
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 d4 f1 01 c0       	push   0xc001f1d4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 de f1 01 c0       	push   0xc001f1de
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 e8 f1 01 c0       	push   0xc001f1e8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 f2 f1 01 c0       	push   0xc001f1f2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 4c f3 01 c0       	push   0xc001f34c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 56 f3 01 c0       	push   0xc001f356
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 60 f3 01 c0       	push   0xc001f360
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 6a f3 01 c0       	push   0xc001f36a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 74 f3 01 c0       	push   0xc001f374
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 7e f3 01 c0       	push   0xc001f37e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 88 f3 01 c0       	push   0xc001f388
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 92 f3 01 c0       	push   0xc001f392
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 06 f1 01 c0       	push   0xc001f106
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 10 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023610
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 10 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023610
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 10 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023610,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 10 36 02 c0       	mov    eax,ds:0xc0023610
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 98 0c 02 c0       	push   0xc0020c98
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 c8 0c 02 c0       	push   0xc0020cc8
c0007a44:	e8 1e 9b 00 00       	call   c0011567 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 cd 0c 02 c0       	push   0xc0020ccd
c0007a5a:	e8 08 9b 00 00       	call   c0011567 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 d4 0c 02 c0       	push   0xc0020cd4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 67 92 00 00       	call   c0010ded <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 90 91 00 00       	call   c0010d37 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 8d 7d 01 00       	call   c001f94a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 ec 0c 02 c0       	push   0xc0020cec
c0007c4b:	e8 17 99 00 00       	call   c0011567 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 ec 0c 02 c0       	push   0xc0020cec
c0007cc5:	e8 9d 98 00 00       	call   c0011567 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 14 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023614
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 14 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023614
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 14 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023614
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 91 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d91
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 97 97 00 00       	jmp    c0011567 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 14 0d 02 c0       	push   0xc0020d14
c0007e54:	e8 0e 97 00 00       	call   c0011567 <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 a7 0d 02 c0       	push   0xc0020da7
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 44 0d 02 c0       	push   0xc0020d44
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 bf 0d 02 c0       	push   0xc0020dbf
c000810a:	e8 58 94 00 00       	call   c0011567 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 68 0d 02 c0       	push   0xc0020d68
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 cd 0d 02 c0       	push   0xc0020dcd
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 e9 0d 02 c0       	push   0xc0020de9
c0008331:	e8 31 92 00 00       	call   c0011567 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 f9 dc 00 00       	call   c0016078 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 23 74 01 00       	call   c001f830 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 06 0e 02 c0       	push   0xc0020e06
c0008422:	e8 40 91 00 00       	call   c0011567 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 74 0e 02 c0       	mov    edx,0xc0020e74
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 76 53 00 00       	call   c000d882 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 e6 08 01 00       	call   c0018e18 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 40 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9c0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 40 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9c0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 f8 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb08]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 d0 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb30]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 18 06 01 00       	call   c0018cac <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 75 06 01 00       	jmp    c0018db4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 40 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e40
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 db 8d 00 00       	jmp    c0011567 <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 d6 3a 00 00       	jmp    c000c3bf <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 4e 0e 02 c0       	mov    esi,0xc0020e4e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 8c 01 01 00       	call   c0018db4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 74 0e 02 c0       	mov    edx,0xc0020e74
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 5f 0e 02 c0       	push   0xc0020e5f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 65 0e 02 c0       	push   0xc0020e65
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 2f 68 01 00       	call   c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 2f 67 01 00       	call   c001faec <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 23 67 01 00       	call   c001faf4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 29 66 01 00       	call   c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 14 0f 02 c0       	push   0xc0020f14
c0009414:	e8 4e 81 00 00       	call   c0011567 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 2e 66 01 00       	call   c001faec <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 bb 66 01 00       	call   c001fb96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 79 64 01 00       	call   c001f9d6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 0c 36 02 c0       	push   0xc002360c
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 d4 f9 01 c0       	push   0xc001f9d4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 88 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023688
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 88 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023688
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 84 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023684
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 84 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023684,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 6c 0f 02 c0       	push   0xc0020f6c
c0009674:	e8 ee 7e 00 00       	call   c0011567 <KePanic(char const*)>
c0009679:	8b 2d 84 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023684
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 84 36 02 c0       	mov    eax,ds:0xc0023684
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 84 36 02 c0       	mov    ds:0xc0023684,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 8c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002368c
c000973e:	8b 0d 94 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023694
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 90 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023690
c0009759:	8b 0d 8c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002368c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 00 12 02 c0       	push   0xc0021200
c000979e:	e8 c4 7d 00 00       	call   c0011567 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 17 12 02 c0       	push   0xc0021217
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 90 36 02 c0    	mov    DWORD PTR ds:0xc0023690,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 98 36 02 c0 43 	mov    BYTE PTR ds:0xc0023698,0x43
c000984f:	c7 05 8c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002368c,0x8
c0009859:	a3 94 36 02 c0       	mov    ds:0xc0023694,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 90 36 02 c0       	mov    eax,ds:0xc0023690
c0009874:	f7 35 8c 36 02 c0    	div    DWORD PTR ds:0xc002368c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 8c 0f 02 c0       	push   0xc0020f8c
c00098af:	e8 b3 7c 00 00       	call   c0011567 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 2e 12 02 c0       	push   0xc002122e
c0009981:	e8 e1 7b 00 00       	call   c0011567 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 b0 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020fb0
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 7e 7b 00 00       	jmp    c0011567 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 4a 12 02 c0       	push   0xc002124a
c00099f6:	e8 6c 7b 00 00       	call   c0011567 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 66 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021266
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 22 7b 00 00       	jmp    c0011567 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 d4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fd4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 f8 0f 02 c0       	push   0xc0020ff8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 60 10 02 c0       	push   0xc0021060
c0009d87:	e8 db 77 00 00       	call   c0011567 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 84 10 02 c0       	push   0xc0021084
c0009e7b:	e8 e7 76 00 00       	call   c0011567 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 b0 10 02 c0       	push   0xc00210b0
c0009fd9:	e8 89 75 00 00       	call   c0011567 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 26 2a 00 00       	call   c000cc34 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 80 12 02 c0       	push   0xc0021280
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 98 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023698
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 02 3b 00 00       	call   c000ddf6 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 8c 36 02 c0    	cmp    DWORD PTR ds:0xc002368c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 d4 10 02 c0       	push   0xc00210d4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 8e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002128e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 b1 12 02 c0       	push   0xc00212b1
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 9f 12 02 c0       	push   0xc002129f
c000a413:	e8 4f 71 00 00       	call   c0011567 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 04 11 02 c0       	push   0xc0021104
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 98 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023698
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 be 38 00 00       	call   c000dd8a <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 8c 36 02 c0    	cmp    DWORD PTR ds:0xc002368c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 c4 12 02 c0       	push   0xc00212c4
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 24 11 02 c0       	push   0xc0021124
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 84 11 02 c0 	mov    DWORD PTR [esp],0xc0021184
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 d9 12 02 c0       	push   0xc00212d9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 ed 12 02 c0       	push   0xc00212ed
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 00 13 02 c0       	push   0xc0021300
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 0d 13 02 c0       	push   0xc002130d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 26 13 02 c0       	push   0xc0021326
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 26 13 02 c0       	push   0xc0021326
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 2e 13 02 c0 	mov    DWORD PTR [esp],0xc002132e
c000a7ec:	e8 76 6d 00 00       	call   c0011567 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 46 13 02 c0       	push   0xc0021346
c000a7fe:	e8 64 6d 00 00       	call   c0011567 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 5c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeca4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 ac 14 02 c0       	push   0xc00214ac
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 c0 14 02 c0       	push   0xc00214c0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 ca 14 02 c0       	push   0xc00214ca
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 d4 14 02 c0       	push   0xc00214d4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 18 16 02 c0       	push   0xc0021618
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 de 14 02 c0       	push   0xc00214de
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 38 16 02 c0       	push   0xc0021638
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 f3 14 02 c0       	push   0xc00214f3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 0d 15 02 c0       	push   0xc002150d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 a0 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc960]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 60 16 02 c0       	push   0xc0021660
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 18 16 02 c0       	push   0xc0021618
c000ab78:	e8 ea 69 00 00       	call   c0011567 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 a8 16 02 c0       	push   0xc00216a8
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 a8 16 02 c0       	push   0xc00216a8
c000aba7:	e8 bb 69 00 00       	call   c0011567 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 18 15 02 c0       	push   0xc0021518
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 18 15 02 c0       	push   0xc0021518
c000abd3:	e8 8f 69 00 00       	call   c0011567 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 35 15 02 c0       	push   0xc0021535
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 35 15 02 c0       	push   0xc0021535
c000abff:	e8 63 69 00 00       	call   c0011567 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 c8 16 02 c0       	push   0xc00216c8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 c8 16 02 c0       	push   0xc00216c8
c000ac2b:	e8 37 69 00 00       	call   c0011567 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 ec 16 02 c0       	push   0xc00216ec
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 ec 16 02 c0       	push   0xc00216ec
c000ac57:	e8 0b 69 00 00       	call   c0011567 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 51 15 02 c0       	push   0xc0021551
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 51 15 02 c0       	push   0xc0021551
c000ac83:	e8 df 68 00 00       	call   c0011567 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 6d 15 02 c0       	push   0xc002156d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 6d 15 02 c0       	push   0xc002156d
c000acaf:	e8 b3 68 00 00       	call   c0011567 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 0c 17 02 c0       	push   0xc002170c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 0c 17 02 c0       	push   0xc002170c
c000acdb:	e8 87 68 00 00       	call   c0011567 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 30 17 02 c0       	push   0xc0021730
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 30 17 02 c0       	push   0xc0021730
c000ad07:	e8 5b 68 00 00       	call   c0011567 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 4f 17 02 c0       	push   0xc002174f
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 9e 0d 00 00       	call   c000bb22 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 6d 17 02 c0       	push   0xc002176d
c000ad93:	e8 cf 67 00 00       	call   c0011567 <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 9b 0d 00 00       	call   c000bb40 <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 87 17 02 c0       	push   0xc0021787
c000adb4:	e8 ae 67 00 00       	call   c0011567 <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	89 f0                	mov    eax,esi
c000adcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adcd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add1:	c1 e0 08             	shl    eax,0x8
c000add4:	57                   	push   edi
c000add5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adda:	50                   	push   eax
c000addb:	6a 00                	push   0x0
c000addd:	68 00 01 00 00       	push   0x100
c000ade2:	53                   	push   ebx
c000ade3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ade6:	83 c4 20             	add    esp,0x20
c000ade9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf1:	74 10                	je     c000ae03 <KiFlushSymlinkChanges()+0xa5>
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	68 a1 17 02 c0       	push   0xc00217a1
c000adfb:	e8 67 67 00 00       	call   c0011567 <KePanic(char const*)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae05:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	57                   	push   edi
c000ae10:	52                   	push   edx
c000ae11:	6a 00                	push   0x0
c000ae13:	6a 08                	push   0x8
c000ae15:	53                   	push   ebx
c000ae16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae19:	83 c4 20             	add    esp,0x20
c000ae1c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 bb 17 02 c0       	push   0xc00217bb
c000ae2b:	e8 37 67 00 00       	call   c0011567 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 5f 0d 00 00       	call   c000bb9e <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	5b                   	pop    ebx
c000ae60:	5e                   	pop    esi
c000ae61:	5f                   	pop    edi
c000ae62:	c3                   	ret    

c000ae63 <KiDeinitialiseSymlinks(void*)>:
c000ae63:	e9 f6 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000ae68 <KiGetSymlinkHash(char const*)>:
c000ae68:	53                   	push   ebx
c000ae69:	89 c3                	mov    ebx,eax
c000ae6b:	83 ec 14             	sub    esp,0x14
c000ae6e:	50                   	push   eax
c000ae6f:	e8 0c 57 ff ff       	call   c0000580 <strlen>
c000ae74:	5a                   	pop    edx
c000ae75:	59                   	pop    ecx
c000ae76:	50                   	push   eax
c000ae77:	53                   	push   ebx
c000ae78:	e8 6c 60 00 00       	call   c0010ee9 <KeCalculateCRC32(unsigned char*, int)>
c000ae7d:	83 c4 18             	add    esp,0x18
c000ae80:	5b                   	pop    ebx
c000ae81:	89 c2                	mov    edx,eax
c000ae83:	c1 ea 10             	shr    edx,0x10
c000ae86:	31 d0                	xor    eax,edx
c000ae88:	c3                   	ret    

c000ae89 <KiCreateSymlinkID()>:
c000ae89:	55                   	push   ebp
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	83 ec 1c             	sub    esp,0x1c
c000ae92:	e8 1e 68 00 00       	call   c00116b5 <KeRand()>
c000ae97:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	43                   	inc    ebx
c000aea0:	31 ff                	xor    edi,edi
c000aea2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea5:	89 ee                	mov    esi,ebp
c000aea7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aead:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aeb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb5:	c1 e0 1f             	shl    eax,0x1f
c000aeb8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec2:	75 10                	jne    c000aed4 <KiCreateSymlinkID()+0x4b>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	68 d5 17 02 c0       	push   0xc00217d5
c000aecc:	e8 96 66 00 00       	call   c0011567 <KePanic(char const*)>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aed8:	75 06                	jne    c000aee0 <KiCreateSymlinkID()+0x57>
c000aeda:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aede:	74 b2                	je     c000ae92 <KiCreateSymlinkID()+0x9>
c000aee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee8:	83 c4 1c             	add    esp,0x1c
c000aeeb:	5b                   	pop    ebx
c000aeec:	31 f0                	xor    eax,esi
c000aeee:	5e                   	pop    esi
c000aeef:	31 fa                	xor    edx,edi
c000aef1:	5f                   	pop    edi
c000aef2:	5d                   	pop    ebp
c000aef3:	c3                   	ret    

c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef4:	53                   	push   ebx
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af00:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af09:	68 00 01 00 00       	push   0x100
c000af0e:	6a 00                	push   0x0
c000af10:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af17:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af1e:	c1 e0 08             	shl    eax,0x8
c000af21:	05 00 70 02 c0       	add    eax,0xc0027000
c000af26:	50                   	push   eax
c000af27:	e8 c4 55 ff ff       	call   c00004f0 <memset>
c000af2c:	58                   	pop    eax
c000af2d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af32:	5a                   	pop    edx
c000af33:	c1 e0 08             	shl    eax,0x8
c000af36:	53                   	push   ebx
c000af37:	05 00 70 02 c0       	add    eax,0xc0027000
c000af3c:	50                   	push   eax
c000af3d:	e8 0e 57 ff ff       	call   c0000650 <strcpy>
c000af42:	89 d8                	mov    eax,ebx
c000af44:	e8 1f ff ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af49:	59                   	pop    ecx
c000af4a:	0f b7 d8             	movzx  ebx,ax
c000af4d:	58                   	pop    eax
c000af4e:	53                   	push   ebx
c000af4f:	68 de 17 02 c0       	push   0xc00217de
c000af54:	e8 b1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af59:	89 d8                	mov    eax,ebx
c000af5b:	ba 01 00 00 00       	mov    edx,0x1
c000af60:	e8 c9 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000af65:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af6a:	83 c4 10             	add    esp,0x10
c000af6d:	40                   	inc    eax
c000af6e:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af73:	83 f8 03             	cmp    eax,0x3
c000af76:	7e 09                	jle    c000af81 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000af78:	83 c4 08             	add    esp,0x8
c000af7b:	5b                   	pop    ebx
c000af7c:	e9 dd fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000af81:	83 c4 08             	add    esp,0x8
c000af84:	5b                   	pop    ebx
c000af85:	c3                   	ret    

c000af86 <KeInitialiseSymlinks()>:
c000af86:	57                   	push   edi
c000af87:	56                   	push   esi
c000af88:	53                   	push   ebx
c000af89:	81 ec 14 01 00 00    	sub    esp,0x114
c000af8f:	68 00 20 00 00       	push   0x2000
c000af94:	6a 00                	push   0x0
c000af96:	68 00 74 02 c0       	push   0xc0027400
c000af9b:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afa5:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afaf:	e8 3c 55 ff ff       	call   c00004f0 <memset>
c000afb4:	59                   	pop    ecx
c000afb5:	5b                   	pop    ebx
c000afb6:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000afbc:	68 f2 17 02 c0       	push   0xc00217f2
c000afc1:	e8 44 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afc6:	5e                   	pop    esi
c000afc7:	5f                   	pop    edi
c000afc8:	6a 00                	push   0x0
c000afca:	68 63 ae 00 c0       	push   0xc000ae63
c000afcf:	e8 82 5d 00 00       	call   c0010d56 <KeRegisterAtexit(void (*)(void*), void*)>
c000afd4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000afdb:	e8 f3 ca ff ff       	call   c0007ad3 <malloc>
c000afe0:	83 c4 0c             	add    esp,0xc
c000afe3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000afe9:	68 4f 17 02 c0       	push   0xc002174f
c000afee:	50                   	push   eax
c000afef:	89 c3                	mov    ebx,eax
c000aff1:	e8 2c 0b 00 00       	call   c000bb22 <File::File(char const*, Process*)>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	85 db                	test   ebx,ebx
c000affb:	75 10                	jne    c000b00d <KeInitialiseSymlinks()+0x87>
c000affd:	83 ec 0c             	sub    esp,0xc
c000b000:	68 0f 18 02 c0       	push   0xc002180f
c000b005:	e8 5d 65 00 00       	call   c0011567 <KePanic(char const*)>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	83 ec 0c             	sub    esp,0xc
c000b010:	53                   	push   ebx
c000b011:	e8 ee 0d 00 00       	call   c000be04 <File::exists()>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	84 c0                	test   al,al
c000b01b:	75 3a                	jne    c000b057 <KeInitialiseSymlinks()+0xd1>
c000b01d:	52                   	push   edx
c000b01e:	52                   	push   edx
c000b01f:	6a 12                	push   0x12
c000b021:	53                   	push   ebx
c000b022:	e8 19 0b 00 00       	call   c000bb40 <File::open(FileOpenMode)>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	85 c0                	test   eax,eax
c000b02c:	74 10                	je     c000b03e <KeInitialiseSymlinks()+0xb8>
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	68 2c 18 02 c0       	push   0xc002182c
c000b036:	e8 2c 65 00 00       	call   c0011567 <KePanic(char const*)>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	83 ec 0c             	sub    esp,0xc
c000b041:	53                   	push   ebx
c000b042:	e8 57 0b 00 00       	call   c000bb9e <File::close()>
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	85 db                	test   ebx,ebx
c000b04c:	0f 84 9e 00 00 00    	je     c000b0f0 <KeInitialiseSymlinks()+0x16a>
c000b052:	e9 8d 00 00 00       	jmp    c000b0e4 <KeInitialiseSymlinks()+0x15e>
c000b057:	50                   	push   eax
c000b058:	50                   	push   eax
c000b059:	6a 01                	push   0x1
c000b05b:	53                   	push   ebx
c000b05c:	e8 df 0a 00 00       	call   c000bb40 <File::open(FileOpenMode)>
c000b061:	83 c4 10             	add    esp,0x10
c000b064:	85 c0                	test   eax,eax
c000b066:	74 10                	je     c000b078 <KeInitialiseSymlinks()+0xf2>
c000b068:	83 ec 0c             	sub    esp,0xc
c000b06b:	68 49 18 02 c0       	push   0xc0021849
c000b070:	e8 f2 64 00 00       	call   c0011567 <KePanic(char const*)>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b07e:	83 ec 0c             	sub    esp,0xc
c000b081:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b085:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b087:	57                   	push   edi
c000b088:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b08c:	56                   	push   esi
c000b08d:	6a 00                	push   0x0
c000b08f:	68 00 01 00 00       	push   0x100
c000b094:	53                   	push   ebx
c000b095:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b098:	83 c4 20             	add    esp,0x20
c000b09b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0a3:	75 33                	jne    c000b0d8 <KeInitialiseSymlinks()+0x152>
c000b0a5:	83 ec 0c             	sub    esp,0xc
c000b0a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0aa:	57                   	push   edi
c000b0ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0af:	52                   	push   edx
c000b0b0:	6a 00                	push   0x0
c000b0b2:	6a 08                	push   0x8
c000b0b4:	53                   	push   ebx
c000b0b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0b8:	83 c4 20             	add    esp,0x20
c000b0bb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0c0:	75 16                	jne    c000b0d8 <KeInitialiseSymlinks()+0x152>
c000b0c2:	89 f0                	mov    eax,esi
c000b0c4:	e8 9f fd ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b0c9:	ba 01 00 00 00       	mov    edx,0x1
c000b0ce:	0f b7 c0             	movzx  eax,ax
c000b0d1:	e8 58 fc ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b0d6:	eb a0                	jmp    c000b078 <KeInitialiseSymlinks()+0xf2>
c000b0d8:	83 ec 0c             	sub    esp,0xc
c000b0db:	53                   	push   ebx
c000b0dc:	e8 bd 0a 00 00       	call   c000bb9e <File::close()>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e6:	83 ec 0c             	sub    esp,0xc
c000b0e9:	53                   	push   ebx
c000b0ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	81 c4 10 01 00 00    	add    esp,0x110
c000b0f6:	5b                   	pop    ebx
c000b0f7:	5e                   	pop    esi
c000b0f8:	5f                   	pop    edi
c000b0f9:	c3                   	ret    

c000b0fa <KiIsSymlinkRegistered(char const*)>:
c000b0fa:	55                   	push   ebp
c000b0fb:	57                   	push   edi
c000b0fc:	56                   	push   esi
c000b0fd:	53                   	push   ebx
c000b0fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b104:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b10b:	89 f0                	mov    eax,esi
c000b10d:	e8 56 fd ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b112:	53                   	push   ebx
c000b113:	56                   	push   esi
c000b114:	0f b7 c0             	movzx  eax,ax
c000b117:	50                   	push   eax
c000b118:	68 64 18 02 c0       	push   0xc0021864
c000b11d:	e8 e8 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b122:	89 f0                	mov    eax,esi
c000b124:	e8 3f fd ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b129:	0f b7 c0             	movzx  eax,ax
c000b12c:	e8 e3 fb ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	31 d2                	xor    edx,edx
c000b136:	88 c1                	mov    cl,al
c000b138:	31 c0                	xor    eax,eax
c000b13a:	84 c9                	test   cl,cl
c000b13c:	0f 84 31 01 00 00    	je     c000b273 <KiIsSymlinkRegistered(char const*)+0x179>
c000b142:	31 db                	xor    ebx,ebx
c000b144:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b14a:	7e 30                	jle    c000b17c <KiIsSymlinkRegistered(char const*)+0x82>
c000b14c:	89 d8                	mov    eax,ebx
c000b14e:	c1 e0 08             	shl    eax,0x8
c000b151:	51                   	push   ecx
c000b152:	05 00 70 02 c0       	add    eax,0xc0027000
c000b157:	51                   	push   ecx
c000b158:	50                   	push   eax
c000b159:	56                   	push   esi
c000b15a:	e8 21 56 ff ff       	call   c0000780 <strcmp>
c000b15f:	83 c4 10             	add    esp,0x10
c000b162:	85 c0                	test   eax,eax
c000b164:	75 13                	jne    c000b179 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b166:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b16d:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b174:	e9 fa 00 00 00       	jmp    c000b273 <KiIsSymlinkRegistered(char const*)+0x179>
c000b179:	43                   	inc    ebx
c000b17a:	eb c8                	jmp    c000b144 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b17c:	83 ec 0c             	sub    esp,0xc
c000b17f:	68 14 01 00 00       	push   0x114
c000b184:	e8 4a c9 ff ff       	call   c0007ad3 <malloc>
c000b189:	83 c4 0c             	add    esp,0xc
c000b18c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b192:	68 4f 17 02 c0       	push   0xc002174f
c000b197:	50                   	push   eax
c000b198:	89 c3                	mov    ebx,eax
c000b19a:	e8 83 09 00 00       	call   c000bb22 <File::File(char const*, Process*)>
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	85 db                	test   ebx,ebx
c000b1a4:	75 12                	jne    c000b1b8 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1a6:	83 ec 0c             	sub    esp,0xc
c000b1a9:	68 79 18 02 c0       	push   0xc0021879
c000b1ae:	e8 b4 63 00 00       	call   c0011567 <KePanic(char const*)>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	eb 10                	jmp    c000b1c8 <KiIsSymlinkRegistered(char const*)+0xce>
c000b1b8:	83 ec 0c             	sub    esp,0xc
c000b1bb:	53                   	push   ebx
c000b1bc:	e8 43 0c 00 00       	call   c000be04 <File::exists()>
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	84 c0                	test   al,al
c000b1c6:	74 de                	je     c000b1a6 <KiIsSymlinkRegistered(char const*)+0xac>
c000b1c8:	52                   	push   edx
c000b1c9:	52                   	push   edx
c000b1ca:	6a 01                	push   0x1
c000b1cc:	53                   	push   ebx
c000b1cd:	e8 6e 09 00 00       	call   c000bb40 <File::open(FileOpenMode)>
c000b1d2:	83 c4 10             	add    esp,0x10
c000b1d5:	85 c0                	test   eax,eax
c000b1d7:	74 10                	je     c000b1e9 <KiIsSymlinkRegistered(char const*)+0xef>
c000b1d9:	83 ec 0c             	sub    esp,0xc
c000b1dc:	68 94 18 02 c0       	push   0xc0021894
c000b1e1:	e8 81 63 00 00       	call   c0011567 <KePanic(char const*)>
c000b1e6:	83 c4 10             	add    esp,0x10
c000b1e9:	83 ec 0c             	sub    esp,0xc
c000b1ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ee:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b1f2:	55                   	push   ebp
c000b1f3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b1f7:	57                   	push   edi
c000b1f8:	6a 00                	push   0x0
c000b1fa:	68 00 01 00 00       	push   0x100
c000b1ff:	53                   	push   ebx
c000b200:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b203:	83 c4 20             	add    esp,0x20
c000b206:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b20e:	75 4b                	jne    c000b25b <KiIsSymlinkRegistered(char const*)+0x161>
c000b210:	83 ec 0c             	sub    esp,0xc
c000b213:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b215:	55                   	push   ebp
c000b216:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b21a:	52                   	push   edx
c000b21b:	6a 00                	push   0x0
c000b21d:	6a 08                	push   0x8
c000b21f:	53                   	push   ebx
c000b220:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b223:	83 c4 20             	add    esp,0x20
c000b226:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b22b:	75 2e                	jne    c000b25b <KiIsSymlinkRegistered(char const*)+0x161>
c000b22d:	50                   	push   eax
c000b22e:	50                   	push   eax
c000b22f:	57                   	push   edi
c000b230:	56                   	push   esi
c000b231:	e8 4a 55 ff ff       	call   c0000780 <strcmp>
c000b236:	83 c4 10             	add    esp,0x10
c000b239:	85 c0                	test   eax,eax
c000b23b:	75 ac                	jne    c000b1e9 <KiIsSymlinkRegistered(char const*)+0xef>
c000b23d:	83 ec 0c             	sub    esp,0xc
c000b240:	53                   	push   ebx
c000b241:	e8 58 09 00 00       	call   c000bb9e <File::close()>
c000b246:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b248:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b256:	83 c4 10             	add    esp,0x10
c000b259:	eb 18                	jmp    c000b273 <KiIsSymlinkRegistered(char const*)+0x179>
c000b25b:	83 ec 0c             	sub    esp,0xc
c000b25e:	53                   	push   ebx
c000b25f:	e8 3a 09 00 00       	call   c000bb9e <File::close()>
c000b264:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b266:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b269:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	31 c0                	xor    eax,eax
c000b271:	31 d2                	xor    edx,edx
c000b273:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b279:	5b                   	pop    ebx
c000b27a:	5e                   	pop    esi
c000b27b:	5f                   	pop    edi
c000b27c:	5d                   	pop    ebp
c000b27d:	c3                   	ret    

c000b27e <KeDereferenceSymlink(char const*, char*)>:
c000b27e:	55                   	push   ebp
c000b27f:	57                   	push   edi
c000b280:	56                   	push   esi
c000b281:	53                   	push   ebx
c000b282:	83 ec 48             	sub    esp,0x48
c000b285:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b289:	56                   	push   esi
c000b28a:	e8 6b fe ff ff       	call   c000b0fa <KiIsSymlinkRegistered(char const*)>
c000b28f:	83 c4 10             	add    esp,0x10
c000b292:	89 c7                	mov    edi,eax
c000b294:	89 d0                	mov    eax,edx
c000b296:	09 f8                	or     eax,edi
c000b298:	75 07                	jne    c000b2a1 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b29a:	31 c0                	xor    eax,eax
c000b29c:	e9 7c 01 00 00       	jmp    c000b41d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2a1:	83 ec 0c             	sub    esp,0xc
c000b2a4:	89 d5                	mov    ebp,edx
c000b2a6:	68 14 01 00 00       	push   0x114
c000b2ab:	e8 23 c8 ff ff       	call   c0007ad3 <malloc>
c000b2b0:	83 c4 0c             	add    esp,0xc
c000b2b3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2b9:	56                   	push   esi
c000b2ba:	50                   	push   eax
c000b2bb:	89 c3                	mov    ebx,eax
c000b2bd:	e8 60 08 00 00       	call   c000bb22 <File::File(char const*, Process*)>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	85 db                	test   ebx,ebx
c000b2c7:	0f 84 32 01 00 00    	je     c000b3ff <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2cd:	56                   	push   esi
c000b2ce:	56                   	push   esi
c000b2cf:	6a 01                	push   0x1
c000b2d1:	53                   	push   ebx
c000b2d2:	e8 69 08 00 00       	call   c000bb40 <File::open(FileOpenMode)>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	85 c0                	test   eax,eax
c000b2dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2de:	74 09                	je     c000b2e9 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	53                   	push   ebx
c000b2e4:	e9 10 01 00 00       	jmp    c000b3f9 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b2e9:	83 ec 0c             	sub    esp,0xc
c000b2ec:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b2f0:	56                   	push   esi
c000b2f1:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b2f5:	52                   	push   edx
c000b2f6:	6a 00                	push   0x0
c000b2f8:	6a 08                	push   0x8
c000b2fa:	53                   	push   ebx
c000b2fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2fe:	83 c4 20             	add    esp,0x20
c000b301:	85 c0                	test   eax,eax
c000b303:	0f 85 e2 00 00 00    	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b309:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b30e:	0f 85 d7 00 00 00    	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b314:	83 ec 0c             	sub    esp,0xc
c000b317:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b319:	56                   	push   esi
c000b31a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b31e:	52                   	push   edx
c000b31f:	6a 00                	push   0x0
c000b321:	6a 08                	push   0x8
c000b323:	53                   	push   ebx
c000b324:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b327:	83 c4 20             	add    esp,0x20
c000b32a:	85 c0                	test   eax,eax
c000b32c:	0f 85 b9 00 00 00    	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b332:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b337:	0f 85 ae 00 00 00    	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b33d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b341:	0f 85 53 ff ff ff    	jne    c000b29a <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b347:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b34b:	0f 85 49 ff ff ff    	jne    c000b29a <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b351:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b359:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b361:	51                   	push   ecx
c000b362:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b366:	50                   	push   eax
c000b367:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b36b:	50                   	push   eax
c000b36c:	53                   	push   ebx
c000b36d:	e8 d0 0a 00 00       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c000b372:	83 c4 10             	add    esp,0x10
c000b375:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b37a:	75 6f                	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b37c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b380:	31 c9                	xor    ecx,ecx
c000b382:	bf 0f 00 00 00       	mov    edi,0xf
c000b387:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b38b:	39 c7                	cmp    edi,eax
c000b38d:	89 cf                	mov    edi,ecx
c000b38f:	19 d7                	sbb    edi,edx
c000b391:	73 58                	jae    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b393:	83 c0 f0             	add    eax,0xfffffff0
c000b396:	bf ff 00 00 00       	mov    edi,0xff
c000b39b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b39f:	83 d2 ff             	adc    edx,0xffffffff
c000b3a2:	39 c7                	cmp    edi,eax
c000b3a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3a8:	19 d1                	sbb    ecx,edx
c000b3aa:	72 53                	jb     c000b3ff <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3ac:	40                   	inc    eax
c000b3ad:	52                   	push   edx
c000b3ae:	50                   	push   eax
c000b3af:	6a 00                	push   0x0
c000b3b1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3b5:	e8 36 51 ff ff       	call   c00004f0 <memset>
c000b3ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3bc:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3bf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b3c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3cb:	53                   	push   ebx
c000b3cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3cf:	83 c4 20             	add    esp,0x20
c000b3d2:	85 c0                	test   eax,eax
c000b3d4:	75 15                	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3da:	89 c7                	mov    edi,eax
c000b3dc:	c1 ff 1f             	sar    edi,0x1f
c000b3df:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b3e3:	75 06                	jne    c000b3eb <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3e5:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b3e9:	74 19                	je     c000b404 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b3eb:	83 ec 0c             	sub    esp,0xc
c000b3ee:	53                   	push   ebx
c000b3ef:	e8 aa 07 00 00       	call   c000bb9e <File::close()>
c000b3f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3fc:	83 c4 10             	add    esp,0x10
c000b3ff:	83 c8 ff             	or     eax,0xffffffff
c000b402:	eb 19                	jmp    c000b41d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	53                   	push   ebx
c000b408:	e8 91 07 00 00       	call   c000bb9e <File::close()>
c000b40d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b412:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b415:	83 c4 10             	add    esp,0x10
c000b418:	b8 01 00 00 00       	mov    eax,0x1
c000b41d:	83 c4 3c             	add    esp,0x3c
c000b420:	5b                   	pop    ebx
c000b421:	5e                   	pop    esi
c000b422:	5f                   	pop    edi
c000b423:	5d                   	pop    ebp
c000b424:	c3                   	ret    

c000b425 <KeCreateSymlink(char const*, char const*)>:
c000b425:	55                   	push   ebp
c000b426:	57                   	push   edi
c000b427:	56                   	push   esi
c000b428:	53                   	push   ebx
c000b429:	83 ec 38             	sub    esp,0x38
c000b42c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b430:	68 14 01 00 00       	push   0x114
c000b435:	e8 99 c6 ff ff       	call   c0007ad3 <malloc>
c000b43a:	6a 00                	push   0x0
c000b43c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b442:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b446:	89 c3                	mov    ebx,eax
c000b448:	50                   	push   eax
c000b449:	e8 f6 05 00 00       	call   c000ba44 <File::File(char const*, Process*, bool)>
c000b44e:	83 c4 20             	add    esp,0x20
c000b451:	85 db                	test   ebx,ebx
c000b453:	b8 01 00 00 00       	mov    eax,0x1
c000b458:	0f 84 19 01 00 00    	je     c000b577 <KeCreateSymlink(char const*, char const*)+0x152>
c000b45e:	52                   	push   edx
c000b45f:	52                   	push   edx
c000b460:	6a 12                	push   0x12
c000b462:	53                   	push   ebx
c000b463:	e8 d8 06 00 00       	call   c000bb40 <File::open(FileOpenMode)>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	85 c0                	test   eax,eax
c000b46d:	74 0b                	je     c000b47a <KeCreateSymlink(char const*, char const*)+0x55>
c000b46f:	83 ec 0c             	sub    esp,0xc
c000b472:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b474:	53                   	push   ebx
c000b475:	e9 f2 00 00 00       	jmp    c000b56c <KeCreateSymlink(char const*, char const*)+0x147>
c000b47a:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b47e:	be e1 18 02 c0       	mov    esi,0xc00218e1
c000b483:	b9 09 00 00 00       	mov    ecx,0x9
c000b488:	fc                   	cld    
c000b489:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b492:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b494:	56                   	push   esi
c000b495:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b499:	52                   	push   edx
c000b49a:	6a 00                	push   0x0
c000b49c:	6a 08                	push   0x8
c000b49e:	53                   	push   ebx
c000b49f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4a2:	83 c4 20             	add    esp,0x20
c000b4a5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4aa:	0f 85 ae 00 00 00    	jne    c000b55e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4b0:	85 c0                	test   eax,eax
c000b4b2:	0f 85 a6 00 00 00    	jne    c000b55e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4b8:	e8 cc f9 ff ff       	call   c000ae89 <KiCreateSymlinkID()>
c000b4bd:	83 ec 0c             	sub    esp,0xc
c000b4c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4c4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4ca:	56                   	push   esi
c000b4cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4cf:	52                   	push   edx
c000b4d0:	6a 00                	push   0x0
c000b4d2:	6a 08                	push   0x8
c000b4d4:	53                   	push   ebx
c000b4d5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4d8:	83 c4 20             	add    esp,0x20
c000b4db:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4e0:	75 7c                	jne    c000b55e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e2:	85 c0                	test   eax,eax
c000b4e4:	75 78                	jne    c000b55e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e8:	83 ec 0c             	sub    esp,0xc
c000b4eb:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b4ee:	55                   	push   ebp
c000b4ef:	e8 8c 50 ff ff       	call   c0000580 <strlen>
c000b4f4:	31 d2                	xor    edx,edx
c000b4f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b4f9:	55                   	push   ebp
c000b4fa:	52                   	push   edx
c000b4fb:	50                   	push   eax
c000b4fc:	53                   	push   ebx
c000b4fd:	ff d7                	call   edi
c000b4ff:	83 c4 14             	add    esp,0x14
c000b502:	55                   	push   ebp
c000b503:	89 c6                	mov    esi,eax
c000b505:	e8 76 50 ff ff       	call   c0000580 <strlen>
c000b50a:	83 c4 10             	add    esp,0x10
c000b50d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b511:	75 4b                	jne    c000b55e <KeCreateSymlink(char const*, char const*)+0x139>
c000b513:	85 f6                	test   esi,esi
c000b515:	75 47                	jne    c000b55e <KeCreateSymlink(char const*, char const*)+0x139>
c000b517:	50                   	push   eax
c000b518:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b51c:	55                   	push   ebp
c000b51d:	68 af 18 02 c0       	push   0xc00218af
c000b522:	e8 e3 f3 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b527:	83 c4 0c             	add    esp,0xc
c000b52a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b52e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b532:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b536:	e8 b9 f9 ff ff       	call   c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>
c000b53b:	c7 04 24 d4 18 02 c0 	mov    DWORD PTR [esp],0xc00218d4
c000b542:	e8 c3 f3 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b547:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b54a:	e8 4f 06 00 00       	call   c000bb9e <File::close()>
c000b54f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b551:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b554:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b557:	83 c4 10             	add    esp,0x10
c000b55a:	31 c0                	xor    eax,eax
c000b55c:	eb 19                	jmp    c000b577 <KeCreateSymlink(char const*, char const*)+0x152>
c000b55e:	83 ec 0c             	sub    esp,0xc
c000b561:	53                   	push   ebx
c000b562:	e8 37 06 00 00       	call   c000bb9e <File::close()>
c000b567:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b569:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b56c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b56f:	83 c4 10             	add    esp,0x10
c000b572:	b8 01 00 00 00       	mov    eax,0x1
c000b577:	83 c4 2c             	add    esp,0x2c
c000b57a:	5b                   	pop    ebx
c000b57b:	5e                   	pop    esi
c000b57c:	5f                   	pop    edi
c000b57d:	5d                   	pop    ebp
c000b57e:	c3                   	ret    
c000b57f:	90                   	nop

c000b580 <File::read(unsigned long long, void*, int*)>:
c000b580:	53                   	push   ebx
c000b581:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b585:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b589:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b590:	83 f8 19             	cmp    eax,0x19
c000b593:	77 35                	ja     c000b5ca <File::read(unsigned long long, void*, int*)+0x4a>
c000b595:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b59c:	85 c0                	test   eax,eax
c000b59e:	74 2a                	je     c000b5ca <File::read(unsigned long long, void*, int*)+0x4a>
c000b5a0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5a6:	85 c0                	test   eax,eax
c000b5a8:	74 20                	je     c000b5ca <File::read(unsigned long long, void*, int*)+0x4a>
c000b5aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ae:	74 21                	je     c000b5d1 <File::read(unsigned long long, void*, int*)+0x51>
c000b5b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5b2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5b6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	5b                   	pop    ebx
c000b5c5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5c8:	ff e0                	jmp    eax
c000b5ca:	b8 0b 00 00 00       	mov    eax,0xb
c000b5cf:	eb 05                	jmp    c000b5d6 <File::read(unsigned long long, void*, int*)+0x56>
c000b5d1:	b8 05 00 00 00       	mov    eax,0x5
c000b5d6:	5b                   	pop    ebx
c000b5d7:	c3                   	ret    

c000b5d8 <File::write(unsigned long long, void*, int*)>:
c000b5d8:	53                   	push   ebx
c000b5d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5e8:	83 f8 19             	cmp    eax,0x19
c000b5eb:	77 35                	ja     c000b622 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5ed:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5f4:	85 c0                	test   eax,eax
c000b5f6:	74 2a                	je     c000b622 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5f8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5fe:	85 c0                	test   eax,eax
c000b600:	74 20                	je     c000b622 <File::write(unsigned long long, void*, int*)+0x4a>
c000b602:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b606:	74 21                	je     c000b629 <File::write(unsigned long long, void*, int*)+0x51>
c000b608:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b60a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b60e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b614:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b618:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b61c:	5b                   	pop    ebx
c000b61d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b620:	ff e0                	jmp    eax
c000b622:	b8 0b 00 00 00       	mov    eax,0xb
c000b627:	eb 05                	jmp    c000b62e <File::write(unsigned long long, void*, int*)+0x56>
c000b629:	b8 05 00 00 00       	mov    eax,0x5
c000b62e:	5b                   	pop    ebx
c000b62f:	c3                   	ret    

c000b630 <Directory::read(unsigned long long, void*, int*)>:
c000b630:	53                   	push   ebx
c000b631:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b635:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b639:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b640:	83 f8 19             	cmp    eax,0x19
c000b643:	77 35                	ja     c000b67a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b645:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b64c:	85 c0                	test   eax,eax
c000b64e:	74 2a                	je     c000b67a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b650:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b656:	85 c0                	test   eax,eax
c000b658:	74 20                	je     c000b67a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b65a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b65e:	74 21                	je     c000b681 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b660:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b662:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b666:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b66c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b674:	5b                   	pop    ebx
c000b675:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b678:	ff e0                	jmp    eax
c000b67a:	b8 0b 00 00 00       	mov    eax,0xb
c000b67f:	eb 05                	jmp    c000b686 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b681:	b8 05 00 00 00       	mov    eax,0x5
c000b686:	5b                   	pop    ebx
c000b687:	c3                   	ret    

c000b688 <Directory::write(unsigned long long, void*, int*)>:
c000b688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b68c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b693:	b8 0b 00 00 00       	mov    eax,0xb
c000b698:	83 fa 19             	cmp    edx,0x19
c000b69b:	77 18                	ja     c000b6b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b69d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6a4:	85 d2                	test   edx,edx
c000b6a6:	74 0d                	je     c000b6b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6a8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6af:	19 c0                	sbb    eax,eax
c000b6b1:	83 e0 0a             	and    eax,0xa
c000b6b4:	40                   	inc    eax
c000b6b5:	c3                   	ret    

c000b6b6 <File::isAtty()>:
c000b6b6:	31 c0                	xor    eax,eax
c000b6b8:	c3                   	ret    
c000b6b9:	90                   	nop

c000b6ba <Directory::isAtty()>:
c000b6ba:	31 c0                	xor    eax,eax
c000b6bc:	c3                   	ret    
c000b6bd:	90                   	nop

c000b6be <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6be:	b8 0a 00 00 00       	mov    eax,0xa
c000b6c3:	c3                   	ret    

c000b6c4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6c4:	b8 0a 00 00 00       	mov    eax,0xa
c000b6c9:	c3                   	ret    

c000b6ca <Filesystem::allocateSwapfile(char const*, int)>:
c000b6ca:	31 c0                	xor    eax,eax
c000b6cc:	31 d2                	xor    edx,edx
c000b6ce:	c3                   	ret    
c000b6cf:	90                   	nop

c000b6d0 <File::~File()>:
c000b6d0:	83 ec 0c             	sub    esp,0xc
c000b6d3:	ba a0 19 02 c0       	mov    edx,0xc00219a0
c000b6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6dc:	89 10                	mov    DWORD PTR [eax],edx
c000b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	50                   	push   eax
c000b6e6:	e8 a1 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b6eb:	83 c4 10             	add    esp,0x10
c000b6ee:	90                   	nop
c000b6ef:	83 c4 0c             	add    esp,0xc
c000b6f2:	c3                   	ret    
c000b6f3:	90                   	nop

c000b6f4 <File::~File()>:
c000b6f4:	83 ec 0c             	sub    esp,0xc
c000b6f7:	83 ec 0c             	sub    esp,0xc
c000b6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fe:	e8 cd ff ff ff       	call   c000b6d0 <File::~File()>
c000b703:	83 c4 10             	add    esp,0x10
c000b706:	83 ec 08             	sub    esp,0x8
c000b709:	68 14 01 00 00       	push   0x114
c000b70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b712:	e8 f5 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b717:	83 c4 10             	add    esp,0x10
c000b71a:	83 c4 0c             	add    esp,0xc
c000b71d:	c3                   	ret    

c000b71e <Directory::~Directory()>:
c000b71e:	83 ec 0c             	sub    esp,0xc
c000b721:	ba bc 19 02 c0       	mov    edx,0xc00219bc
c000b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72a:	89 10                	mov    DWORD PTR [eax],edx
c000b72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	50                   	push   eax
c000b734:	e8 53 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b739:	83 c4 10             	add    esp,0x10
c000b73c:	90                   	nop
c000b73d:	83 c4 0c             	add    esp,0xc
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <Directory::~Directory()>:
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	83 ec 0c             	sub    esp,0xc
c000b748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b74c:	e8 cd ff ff ff       	call   c000b71e <Directory::~Directory()>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 ec 08             	sub    esp,0x8
c000b757:	68 14 01 00 00       	push   0x114
c000b75c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b760:	e8 a7 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	83 c4 0c             	add    esp,0xc
c000b76b:	c3                   	ret    

c000b76c <Filesystem::Filesystem()>:
c000b76c:	ba 34 19 02 c0       	mov    edx,0xc0021934
c000b771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b775:	89 10                	mov    DWORD PTR [eax],edx
c000b777:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b77d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b781:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b788:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b78d:	90                   	nop
c000b78e:	c3                   	ret    
c000b78f:	90                   	nop

c000b790 <Filesystem::~Filesystem()>:
c000b790:	ba 34 19 02 c0       	mov    edx,0xc0021934
c000b795:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b799:	89 10                	mov    DWORD PTR [eax],edx
c000b79b:	90                   	nop
c000b79c:	c3                   	ret    
c000b79d:	90                   	nop

c000b79e <Filesystem::~Filesystem()>:
c000b79e:	83 ec 0c             	sub    esp,0xc
c000b7a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7a5:	e8 e6 ff ff ff       	call   c000b790 <Filesystem::~Filesystem()>
c000b7aa:	83 c4 04             	add    esp,0x4
c000b7ad:	83 ec 08             	sub    esp,0x8
c000b7b0:	6a 08                	push   0x8
c000b7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b6:	e8 51 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7bb:	83 c4 10             	add    esp,0x10
c000b7be:	83 c4 0c             	add    esp,0xc
c000b7c1:	c3                   	ret    

c000b7c2 <Fs::getcwd(Process*, char*, int)>:
c000b7c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7c6:	31 c0                	xor    eax,eax
c000b7c8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7cc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7cf:	7d 15                	jge    c000b7e6 <Fs::getcwd(Process*, char*, int)+0x24>
c000b7d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7dc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7df:	84 c9                	test   cl,cl
c000b7e1:	74 06                	je     c000b7e9 <Fs::getcwd(Process*, char*, int)+0x27>
c000b7e3:	40                   	inc    eax
c000b7e4:	eb e2                	jmp    c000b7c8 <Fs::getcwd(Process*, char*, int)+0x6>
c000b7e6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b7e9:	31 c0                	xor    eax,eax
c000b7eb:	c3                   	ret    

c000b7ec <Fs::initVFS()>:
c000b7ec:	83 ec 18             	sub    esp,0x18
c000b7ef:	6a 08                	push   0x8
c000b7f1:	e8 dd c2 ff ff       	call   c0007ad3 <malloc>
c000b7f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7f9:	e8 ee e3 00 00       	call   c0019bec <FAT::FAT()>
c000b7fe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b805:	e8 c9 c2 ff ff       	call   c0007ad3 <malloc>
c000b80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b80d:	e8 08 f3 00 00       	call   c001ab1a <ISO9660::ISO9660()>
c000b812:	83 c4 1c             	add    esp,0x1c
c000b815:	c3                   	ret    

c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b816:	55                   	push   ebp
c000b817:	57                   	push   edi
c000b818:	56                   	push   esi
c000b819:	53                   	push   ebx
c000b81a:	81 ec 20 04 00 00    	sub    esp,0x420
c000b820:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b827:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b82e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b835:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b83c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b840:	68 00 04 00 00       	push   0x400
c000b845:	6a 00                	push   0x0
c000b847:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b84b:	57                   	push   edi
c000b84c:	e8 9f 4c ff ff       	call   c00004f0 <memset>
c000b851:	83 c4 10             	add    esp,0x10
c000b854:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b858:	75 0b                	jne    c000b865 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b85a:	50                   	push   eax
c000b85b:	50                   	push   eax
c000b85c:	56                   	push   esi
c000b85d:	57                   	push   edi
c000b85e:	e8 ed 4d ff ff       	call   c0000650 <strcpy>
c000b863:	eb 45                	jmp    c000b8aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b865:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b868:	83 f8 2f             	cmp    eax,0x2f
c000b86b:	74 05                	je     c000b872 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b86d:	83 f8 5c             	cmp    eax,0x5c
c000b870:	75 19                	jne    c000b88b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b872:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b875:	3c 60                	cmp    al,0x60
c000b877:	7e 03                	jle    c000b87c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b879:	83 e8 20             	sub    eax,0x20
c000b87c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b880:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b887:	50                   	push   eax
c000b888:	50                   	push   eax
c000b889:	eb 18                	jmp    c000b8a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b88b:	50                   	push   eax
c000b88c:	50                   	push   eax
c000b88d:	55                   	push   ebp
c000b88e:	57                   	push   edi
c000b88f:	e8 bc 4d ff ff       	call   c0000650 <strcpy>
c000b894:	58                   	pop    eax
c000b895:	5a                   	pop    edx
c000b896:	68 ff 28 02 c0       	push   0xc00228ff
c000b89b:	57                   	push   edi
c000b89c:	e8 cf 4f ff ff       	call   c0000870 <strcat>
c000b8a1:	59                   	pop    ecx
c000b8a2:	5d                   	pop    ebp
c000b8a3:	56                   	push   esi
c000b8a4:	57                   	push   edi
c000b8a5:	e8 c6 4f ff ff       	call   c0000870 <strcat>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8b1:	3c 60                	cmp    al,0x60
c000b8b3:	7e 03                	jle    c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8b5:	83 e8 20             	sub    eax,0x20
c000b8b8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8bc:	be 03 00 00 00       	mov    esi,0x3
c000b8c1:	88 03                	mov    BYTE PTR [ebx],al
c000b8c3:	b8 03 00 00 00       	mov    eax,0x3
c000b8c8:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8cf:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b8d5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b8d9:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b8de:	89 fa                	mov    edx,edi
c000b8e0:	0f be ea             	movsx  ebp,dl
c000b8e3:	85 ed                	test   ebp,ebp
c000b8e5:	0f 84 a1 00 00 00    	je     c000b98c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b8eb:	8d 56 01             	lea    edx,[esi+0x1]
c000b8ee:	83 fd 2f             	cmp    ebp,0x2f
c000b8f1:	74 05                	je     c000b8f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b8f3:	83 fd 5c             	cmp    ebp,0x5c
c000b8f6:	75 12                	jne    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8f8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b8fd:	89 c5                	mov    ebp,eax
c000b8ff:	74 09                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b901:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b905:	40                   	inc    eax
c000b906:	89 d6                	mov    esi,edx
c000b908:	eb cf                	jmp    c000b8d9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b90a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b90f:	89 f9                	mov    ecx,edi
c000b911:	0f be e9             	movsx  ebp,cl
c000b914:	75 61                	jne    c000b977 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b916:	83 fd 2e             	cmp    ebp,0x2e
c000b919:	75 5c                	jne    c000b977 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b91b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b920:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b925:	74 19                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b927:	83 fd 2e             	cmp    ebp,0x2e
c000b92a:	74 55                	je     c000b981 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b92c:	89 f2                	mov    edx,esi
c000b92e:	42                   	inc    edx
c000b92f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b934:	83 f9 2f             	cmp    ecx,0x2f
c000b937:	74 f5                	je     c000b92e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b939:	83 f9 5c             	cmp    ecx,0x5c
c000b93c:	74 f0                	je     c000b92e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b93e:	eb c6                	jmp    c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b940:	83 fd 2e             	cmp    ebp,0x2e
c000b943:	74 3c                	je     c000b981 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b945:	83 f8 03             	cmp    eax,0x3
c000b948:	74 bc                	je     c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b94a:	42                   	inc    edx
c000b94b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b950:	83 f9 2f             	cmp    ecx,0x2f
c000b953:	74 f5                	je     c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b955:	83 f9 5c             	cmp    ecx,0x5c
c000b958:	74 f0                	je     c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b95a:	48                   	dec    eax
c000b95b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b95f:	75 06                	jne    c000b967 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b961:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b965:	eb f3                	jmp    c000b95a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b967:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b96b:	74 07                	je     c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b96d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b971:	48                   	dec    eax
c000b972:	eb f3                	jmp    c000b967 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b974:	40                   	inc    eax
c000b975:	eb 8f                	jmp    c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b977:	83 fd 2f             	cmp    ebp,0x2f
c000b97a:	74 8a                	je     c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b97c:	83 fd 5c             	cmp    ebp,0x5c
c000b97f:	74 85                	je     c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b981:	89 f9                	mov    ecx,edi
c000b983:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b986:	40                   	inc    eax
c000b987:	e9 7a ff ff ff       	jmp    c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b98c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b990:	83 ec 0c             	sub    esp,0xc
c000b993:	53                   	push   ebx
c000b994:	e8 e7 4b ff ff       	call   c0000580 <strlen>
c000b999:	83 c4 10             	add    esp,0x10
c000b99c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9a1:	74 1c                	je     c000b9bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9a3:	83 ec 0c             	sub    esp,0xc
c000b9a6:	53                   	push   ebx
c000b9a7:	e8 d4 4b ff ff       	call   c0000580 <strlen>
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9b4:	74 09                	je     c000b9bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9b6:	31 ff                	xor    edi,edi
c000b9b8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b9bd:	eb 5c                	jmp    c000ba1b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9bf:	83 ec 0c             	sub    esp,0xc
c000b9c2:	53                   	push   ebx
c000b9c3:	e8 b8 4b ff ff       	call   c0000580 <strlen>
c000b9c8:	83 c4 10             	add    esp,0x10
c000b9cb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b9d0:	74 e4                	je     c000b9b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b9d2:	83 ec 0c             	sub    esp,0xc
c000b9d5:	53                   	push   ebx
c000b9d6:	e8 a5 4b ff ff       	call   c0000580 <strlen>
c000b9db:	83 c4 10             	add    esp,0x10
c000b9de:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b9e3:	eb ab                	jmp    c000b990 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b9e5:	52                   	push   edx
c000b9e6:	52                   	push   edx
c000b9e7:	53                   	push   ebx
c000b9e8:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b9ec:	55                   	push   ebp
c000b9ed:	e8 5e 4c ff ff       	call   c0000650 <strcpy>
c000b9f2:	59                   	pop    ecx
c000b9f3:	58                   	pop    eax
c000b9f4:	53                   	push   ebx
c000b9f5:	55                   	push   ebp
c000b9f6:	e8 83 f8 ff ff       	call   c000b27e <KeDereferenceSymlink(char const*, char*)>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	48                   	dec    eax
c000b9ff:	75 37                	jne    c000ba38 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba01:	50                   	push   eax
c000ba02:	53                   	push   ebx
c000ba03:	55                   	push   ebp
c000ba04:	68 ea 18 02 c0       	push   0xc00218ea
c000ba09:	e8 fc ee ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ba0e:	8d 47 01             	lea    eax,[edi+0x1]
c000ba11:	83 c4 10             	add    esp,0x10
c000ba14:	83 ff 14             	cmp    edi,0x14
c000ba17:	74 08                	je     c000ba21 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000ba19:	89 c7                	mov    edi,eax
c000ba1b:	85 f6                	test   esi,esi
c000ba1d:	75 c6                	jne    c000b9e5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba1f:	eb 17                	jmp    c000ba38 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba21:	83 ec 0c             	sub    esp,0xc
c000ba24:	bf 15 00 00 00       	mov    edi,0x15
c000ba29:	68 05 19 02 c0       	push   0xc0021905
c000ba2e:	e8 34 5b 00 00       	call   c0011567 <KePanic(char const*)>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	eb e3                	jmp    c000ba1b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba38:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba3e:	5b                   	pop    ebx
c000ba3f:	5e                   	pop    esi
c000ba40:	5f                   	pop    edi
c000ba41:	5d                   	pop    ebp
c000ba42:	c3                   	ret    
c000ba43:	90                   	nop

c000ba44 <File::File(char const*, Process*, bool)>:
c000ba44:	83 ec 1c             	sub    esp,0x1c
c000ba47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba53:	83 ec 08             	sub    esp,0x8
c000ba56:	6a 00                	push   0x0
c000ba58:	50                   	push   eax
c000ba59:	e8 48 d7 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	ba a0 19 02 c0       	mov    edx,0xc00219a0
c000ba66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba6a:	89 10                	mov    DWORD PTR [eax],edx
c000ba6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba71:	85 c0                	test   eax,eax
c000ba73:	74 0f                	je     c000ba84 <File::File(char const*, Process*, bool)+0x40>
c000ba75:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba7a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba7e:	74 04                	je     c000ba84 <File::File(char const*, Process*, bool)+0x40>
c000ba80:	b0 01                	mov    al,0x1
c000ba82:	eb 02                	jmp    c000ba86 <File::File(char const*, Process*, bool)+0x42>
c000ba84:	b0 00                	mov    al,0x0
c000ba86:	0f b6 c0             	movzx  eax,al
c000ba89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba8d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba97:	83 c2 0d             	add    edx,0xd
c000ba9a:	50                   	push   eax
c000ba9b:	51                   	push   ecx
c000ba9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baa0:	52                   	push   edx
c000baa1:	e8 70 fd ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baad:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bab0:	83 e8 41             	sub    eax,0x41
c000bab3:	88 c2                	mov    dl,al
c000bab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000babf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bad1:	0f b6 c0             	movzx  eax,al
c000bad4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000badb:	85 c0                	test   eax,eax
c000badd:	74 3e                	je     c000bb1d <File::File(char const*, Process*, bool)+0xd9>
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bae9:	0f b6 c0             	movzx  eax,al
c000baec:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000baf3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000baf9:	85 c0                	test   eax,eax
c000bafb:	75 20                	jne    c000bb1d <File::File(char const*, Process*, bool)+0xd9>
c000bafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb01:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb07:	0f b6 c0             	movzx  eax,al
c000bb0a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	50                   	push   eax
c000bb15:	e8 ae 21 00 00       	call   c000dcc8 <LogicalDisk::mount()>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	90                   	nop
c000bb1e:	83 c4 1c             	add    esp,0x1c
c000bb21:	c3                   	ret    

c000bb22 <File::File(char const*, Process*)>:
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	6a 01                	push   0x1
c000bb27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	e8 0c ff ff ff       	call   c000ba44 <File::File(char const*, Process*, bool)>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	90                   	nop
c000bb3c:	83 c4 0c             	add    esp,0xc
c000bb3f:	c3                   	ret    

c000bb40 <File::open(FileOpenMode)>:
c000bb40:	53                   	push   ebx
c000bb41:	b8 0b 00 00 00       	mov    eax,0xb
c000bb46:	83 ec 08             	sub    esp,0x8
c000bb49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb4d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb54:	83 fa 19             	cmp    edx,0x19
c000bb57:	77 40                	ja     c000bb99 <File::open(FileOpenMode)+0x59>
c000bb59:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb60:	85 d2                	test   edx,edx
c000bb62:	74 35                	je     c000bb99 <File::open(FileOpenMode)+0x59>
c000bb64:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb6a:	85 d2                	test   edx,edx
c000bb6c:	74 2b                	je     c000bb99 <File::open(FileOpenMode)+0x59>
c000bb6e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb72:	b8 06 00 00 00       	mov    eax,0x6
c000bb77:	75 20                	jne    c000bb99 <File::open(FileOpenMode)+0x59>
c000bb79:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb7b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	51                   	push   ecx
c000bb86:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb89:	51                   	push   ecx
c000bb8a:	52                   	push   edx
c000bb8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb8e:	83 c4 10             	add    esp,0x10
c000bb91:	85 c0                	test   eax,eax
c000bb93:	75 04                	jne    c000bb99 <File::open(FileOpenMode)+0x59>
c000bb95:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb99:	83 c4 08             	add    esp,0x8
c000bb9c:	5b                   	pop    ebx
c000bb9d:	c3                   	ret    

c000bb9e <File::close()>:
c000bb9e:	53                   	push   ebx
c000bb9f:	b8 0b 00 00 00       	mov    eax,0xb
c000bba4:	83 ec 08             	sub    esp,0x8
c000bba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbb2:	83 f9 19             	cmp    ecx,0x19
c000bbb5:	77 41                	ja     c000bbf8 <File::close()+0x5a>
c000bbb7:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbbe:	85 db                	test   ebx,ebx
c000bbc0:	74 36                	je     c000bbf8 <File::close()+0x5a>
c000bbc2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbc9:	74 2d                	je     c000bbf8 <File::close()+0x5a>
c000bbcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbcf:	b8 05 00 00 00       	mov    eax,0x5
c000bbd4:	74 22                	je     c000bbf8 <File::close()+0x5a>
c000bbd6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bbda:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bbe1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbe7:	53                   	push   ebx
c000bbe8:	53                   	push   ebx
c000bbe9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbeb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbf1:	50                   	push   eax
c000bbf2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bbf5:	83 c4 10             	add    esp,0x10
c000bbf8:	83 c4 08             	add    esp,0x8
c000bbfb:	5b                   	pop    ebx
c000bbfc:	c3                   	ret    
c000bbfd:	90                   	nop

c000bbfe <File::seek(unsigned long long)>:
c000bbfe:	56                   	push   esi
c000bbff:	b8 0b 00 00 00       	mov    eax,0xb
c000bc04:	53                   	push   ebx
c000bc05:	51                   	push   ecx
c000bc06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc19:	83 fa 19             	cmp    edx,0x19
c000bc1c:	77 31                	ja     c000bc4f <File::seek(unsigned long long)+0x51>
c000bc1e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 26                	je     c000bc4f <File::seek(unsigned long long)+0x51>
c000bc29:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc2f:	85 d2                	test   edx,edx
c000bc31:	74 1c                	je     c000bc4f <File::seek(unsigned long long)+0x51>
c000bc33:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc37:	b8 05 00 00 00       	mov    eax,0x5
c000bc3c:	74 11                	je     c000bc4f <File::seek(unsigned long long)+0x51>
c000bc3e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc40:	53                   	push   ebx
c000bc41:	51                   	push   ecx
c000bc42:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc48:	52                   	push   edx
c000bc49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc4c:	83 c4 10             	add    esp,0x10
c000bc4f:	5a                   	pop    edx
c000bc50:	5b                   	pop    ebx
c000bc51:	5e                   	pop    esi
c000bc52:	c3                   	ret    
c000bc53:	90                   	nop

c000bc54 <File::truncate(unsigned long long)>:
c000bc54:	56                   	push   esi
c000bc55:	b8 0b 00 00 00       	mov    eax,0xb
c000bc5a:	53                   	push   ebx
c000bc5b:	51                   	push   ecx
c000bc5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc68:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc6f:	83 fa 19             	cmp    edx,0x19
c000bc72:	77 31                	ja     c000bca5 <File::truncate(unsigned long long)+0x51>
c000bc74:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc7b:	85 d2                	test   edx,edx
c000bc7d:	74 26                	je     c000bca5 <File::truncate(unsigned long long)+0x51>
c000bc7f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc85:	85 d2                	test   edx,edx
c000bc87:	74 1c                	je     c000bca5 <File::truncate(unsigned long long)+0x51>
c000bc89:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc8d:	b8 05 00 00 00       	mov    eax,0x5
c000bc92:	74 11                	je     c000bca5 <File::truncate(unsigned long long)+0x51>
c000bc94:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc96:	53                   	push   ebx
c000bc97:	51                   	push   ecx
c000bc98:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc9e:	52                   	push   edx
c000bc9f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bca2:	83 c4 10             	add    esp,0x10
c000bca5:	5a                   	pop    edx
c000bca6:	5b                   	pop    ebx
c000bca7:	5e                   	pop    esi
c000bca8:	c3                   	ret    
c000bca9:	90                   	nop

c000bcaa <File::tell(unsigned long long*)>:
c000bcaa:	83 ec 0c             	sub    esp,0xc
c000bcad:	b8 0b 00 00 00       	mov    eax,0xb
c000bcb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcb6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcbd:	83 fa 19             	cmp    edx,0x19
c000bcc0:	77 34                	ja     c000bcf6 <File::tell(unsigned long long*)+0x4c>
c000bcc2:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcc9:	85 d2                	test   edx,edx
c000bccb:	74 29                	je     c000bcf6 <File::tell(unsigned long long*)+0x4c>
c000bccd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcd3:	85 d2                	test   edx,edx
c000bcd5:	74 1f                	je     c000bcf6 <File::tell(unsigned long long*)+0x4c>
c000bcd7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bcdb:	b8 05 00 00 00       	mov    eax,0x5
c000bce0:	74 14                	je     c000bcf6 <File::tell(unsigned long long*)+0x4c>
c000bce2:	50                   	push   eax
c000bce3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bce5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bce9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bcef:	52                   	push   edx
c000bcf0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	83 c4 0c             	add    esp,0xc
c000bcf9:	c3                   	ret    

c000bcfa <File::rewind()>:
c000bcfa:	83 ec 10             	sub    esp,0x10
c000bcfd:	6a 00                	push   0x0
c000bcff:	6a 00                	push   0x0
c000bd01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd05:	e8 f4 fe ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c000bd0a:	83 c4 1c             	add    esp,0x1c
c000bd0d:	c3                   	ret    

c000bd0e <File::unlink()>:
c000bd0e:	83 ec 0c             	sub    esp,0xc
c000bd11:	b8 0b 00 00 00       	mov    eax,0xb
c000bd16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd21:	83 f9 19             	cmp    ecx,0x19
c000bd24:	77 2f                	ja     c000bd55 <File::unlink()+0x47>
c000bd26:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd2d:	85 c9                	test   ecx,ecx
c000bd2f:	74 24                	je     c000bd55 <File::unlink()+0x47>
c000bd31:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd37:	85 c9                	test   ecx,ecx
c000bd39:	74 1a                	je     c000bd55 <File::unlink()+0x47>
c000bd3b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd3f:	b8 06 00 00 00       	mov    eax,0x6
c000bd44:	75 0f                	jne    c000bd55 <File::unlink()+0x47>
c000bd46:	50                   	push   eax
c000bd47:	83 c2 0d             	add    edx,0xd
c000bd4a:	50                   	push   eax
c000bd4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd4d:	52                   	push   edx
c000bd4e:	51                   	push   ecx
c000bd4f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd52:	83 c4 10             	add    esp,0x10
c000bd55:	83 c4 0c             	add    esp,0xc
c000bd58:	c3                   	ret    
c000bd59:	90                   	nop

c000bd5a <File::rename(char const*)>:
c000bd5a:	83 ec 0c             	sub    esp,0xc
c000bd5d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd6d:	83 f9 19             	cmp    ecx,0x19
c000bd70:	77 32                	ja     c000bda4 <File::rename(char const*)+0x4a>
c000bd72:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd79:	85 c9                	test   ecx,ecx
c000bd7b:	74 27                	je     c000bda4 <File::rename(char const*)+0x4a>
c000bd7d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd83:	85 c9                	test   ecx,ecx
c000bd85:	74 1d                	je     c000bda4 <File::rename(char const*)+0x4a>
c000bd87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd8b:	b8 06 00 00 00       	mov    eax,0x6
c000bd90:	75 12                	jne    c000bda4 <File::rename(char const*)+0x4a>
c000bd92:	50                   	push   eax
c000bd93:	83 c2 0d             	add    edx,0xd
c000bd96:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd9c:	52                   	push   edx
c000bd9d:	51                   	push   ecx
c000bd9e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	83 c4 0c             	add    esp,0xc
c000bda7:	c3                   	ret    

c000bda8 <File::chfatattr(unsigned char, unsigned char)>:
c000bda8:	57                   	push   edi
c000bda9:	b8 0b 00 00 00       	mov    eax,0xb
c000bdae:	56                   	push   esi
c000bdaf:	53                   	push   ebx
c000bdb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdbc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc3:	83 f9 19             	cmp    ecx,0x19
c000bdc6:	77 37                	ja     c000bdff <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdc8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdcf:	85 c9                	test   ecx,ecx
c000bdd1:	74 2c                	je     c000bdff <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdd3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdd9:	85 c9                	test   ecx,ecx
c000bddb:	74 22                	je     c000bdff <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bddd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bde1:	b8 06 00 00 00       	mov    eax,0x6
c000bde6:	75 17                	jne    c000bdff <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bde8:	89 f0                	mov    eax,esi
c000bdea:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdec:	0f b6 db             	movzx  ebx,bl
c000bdef:	0f b6 f0             	movzx  esi,al
c000bdf2:	83 c2 0d             	add    edx,0xd
c000bdf5:	56                   	push   esi
c000bdf6:	53                   	push   ebx
c000bdf7:	52                   	push   edx
c000bdf8:	51                   	push   ecx
c000bdf9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bdfc:	83 c4 10             	add    esp,0x10
c000bdff:	5b                   	pop    ebx
c000be00:	5e                   	pop    esi
c000be01:	5f                   	pop    edi
c000be02:	c3                   	ret    
c000be03:	90                   	nop

c000be04 <File::exists()>:
c000be04:	83 ec 0c             	sub    esp,0xc
c000be07:	31 c0                	xor    eax,eax
c000be09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be14:	83 f9 19             	cmp    ecx,0x19
c000be17:	77 24                	ja     c000be3d <File::exists()+0x39>
c000be19:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be20:	85 c9                	test   ecx,ecx
c000be22:	74 19                	je     c000be3d <File::exists()+0x39>
c000be24:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be2a:	85 c9                	test   ecx,ecx
c000be2c:	74 0f                	je     c000be3d <File::exists()+0x39>
c000be2e:	50                   	push   eax
c000be2f:	83 c2 0d             	add    edx,0xd
c000be32:	50                   	push   eax
c000be33:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be35:	52                   	push   edx
c000be36:	51                   	push   ecx
c000be37:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be3a:	83 c4 10             	add    esp,0x10
c000be3d:	83 c4 0c             	add    esp,0xc
c000be40:	c3                   	ret    
c000be41:	90                   	nop

c000be42 <File::stat(unsigned long long*, bool*)>:
c000be42:	56                   	push   esi
c000be43:	53                   	push   ebx
c000be44:	50                   	push   eax
c000be45:	b8 0b 00 00 00       	mov    eax,0xb
c000be4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be4e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be5d:	83 f9 19             	cmp    ecx,0x19
c000be60:	77 3d                	ja     c000be9f <File::stat(unsigned long long*, bool*)+0x5d>
c000be62:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be69:	85 c9                	test   ecx,ecx
c000be6b:	74 32                	je     c000be9f <File::stat(unsigned long long*, bool*)+0x5d>
c000be6d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be73:	85 c9                	test   ecx,ecx
c000be75:	74 28                	je     c000be9f <File::stat(unsigned long long*, bool*)+0x5d>
c000be77:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be7d:	74 13                	je     c000be92 <File::stat(unsigned long long*, bool*)+0x50>
c000be7f:	83 ec 04             	sub    esp,0x4
c000be82:	56                   	push   esi
c000be83:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be89:	51                   	push   ecx
c000be8a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be8d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be90:	eb 0a                	jmp    c000be9c <File::stat(unsigned long long*, bool*)+0x5a>
c000be92:	53                   	push   ebx
c000be93:	83 c2 0d             	add    edx,0xd
c000be96:	56                   	push   esi
c000be97:	52                   	push   edx
c000be98:	51                   	push   ecx
c000be99:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be9c:	83 c4 10             	add    esp,0x10
c000be9f:	5a                   	pop    edx
c000bea0:	5b                   	pop    ebx
c000bea1:	5e                   	pop    esi
c000bea2:	c3                   	ret    

c000bea3 <Fs::setcwd(Process*, char*)>:
c000bea3:	55                   	push   ebp
c000bea4:	57                   	push   edi
c000bea5:	56                   	push   esi
c000bea6:	53                   	push   ebx
c000bea7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bead:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000beb4:	6a 00                	push   0x0
c000beb6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bebc:	57                   	push   edi
c000bebd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bec4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bec8:	56                   	push   esi
c000bec9:	e8 48 f9 ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bece:	89 34 24             	mov    DWORD PTR [esp],esi
c000bed1:	e8 aa 46 ff ff       	call   c0000580 <strlen>
c000bed6:	83 c4 10             	add    esp,0x10
c000bed9:	83 f8 02             	cmp    eax,0x2
c000bedc:	77 15                	ja     c000bef3 <Fs::setcwd(Process*, char*)+0x50>
c000bede:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bee3:	83 eb 41             	sub    ebx,0x41
c000bee6:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000beed:	85 c0                	test   eax,eax
c000beef:	75 1c                	jne    c000bf0d <Fs::setcwd(Process*, char*)+0x6a>
c000bef1:	eb 2f                	jmp    c000bf22 <Fs::setcwd(Process*, char*)+0x7f>
c000bef3:	83 ec 0c             	sub    esp,0xc
c000bef6:	56                   	push   esi
c000bef7:	e8 84 46 ff ff       	call   c0000580 <strlen>
c000befc:	83 c4 10             	add    esp,0x10
c000beff:	83 f8 03             	cmp    eax,0x3
c000bf02:	75 57                	jne    c000bf5b <Fs::setcwd(Process*, char*)+0xb8>
c000bf04:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf09:	75 50                	jne    c000bf5b <Fs::setcwd(Process*, char*)+0xb8>
c000bf0b:	eb d1                	jmp    c000bede <Fs::setcwd(Process*, char*)+0x3b>
c000bf0d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf14:	75 0c                	jne    c000bf22 <Fs::setcwd(Process*, char*)+0x7f>
c000bf16:	83 ec 0c             	sub    esp,0xc
c000bf19:	50                   	push   eax
c000bf1a:	e8 a9 1d 00 00       	call   c000dcc8 <LogicalDisk::mount()>
c000bf1f:	83 c4 10             	add    esp,0x10
c000bf22:	83 fb 19             	cmp    ebx,0x19
c000bf25:	b8 03 00 00 00       	mov    eax,0x3
c000bf2a:	0f 87 c6 00 00 00    	ja     c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bf30:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf37:	b8 05 00 00 00       	mov    eax,0x5
c000bf3c:	85 d2                	test   edx,edx
c000bf3e:	0f 84 b2 00 00 00    	je     c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bf44:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf4b:	b8 06 00 00 00       	mov    eax,0x6
c000bf50:	0f 85 92 00 00 00    	jne    c000bfe8 <Fs::setcwd(Process*, char*)+0x145>
c000bf56:	e9 9b 00 00 00       	jmp    c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bf5b:	83 ec 0c             	sub    esp,0xc
c000bf5e:	68 14 01 00 00       	push   0x114
c000bf63:	e8 6b bb ff ff       	call   c0007ad3 <malloc>
c000bf68:	83 c4 0c             	add    esp,0xc
c000bf6b:	55                   	push   ebp
c000bf6c:	56                   	push   esi
c000bf6d:	50                   	push   eax
c000bf6e:	89 c3                	mov    ebx,eax
c000bf70:	e8 ad fb ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c000bf75:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf7a:	83 c4 0c             	add    esp,0xc
c000bf7d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf81:	50                   	push   eax
c000bf82:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf86:	50                   	push   eax
c000bf87:	53                   	push   ebx
c000bf88:	e8 b5 fe ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c000bf8d:	83 c4 10             	add    esp,0x10
c000bf90:	83 f8 02             	cmp    eax,0x2
c000bf93:	74 27                	je     c000bfbc <Fs::setcwd(Process*, char*)+0x119>
c000bf95:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf9a:	75 1c                	jne    c000bfb8 <Fs::setcwd(Process*, char*)+0x115>
c000bf9c:	85 db                	test   ebx,ebx
c000bf9e:	b8 02 00 00 00       	mov    eax,0x2
c000bfa3:	74 51                	je     c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bfa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfa7:	83 ec 0c             	sub    esp,0xc
c000bfaa:	53                   	push   ebx
c000bfab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfae:	83 c4 10             	add    esp,0x10
c000bfb1:	b8 02 00 00 00       	mov    eax,0x2
c000bfb6:	eb 3e                	jmp    c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bfb8:	85 c0                	test   eax,eax
c000bfba:	74 1c                	je     c000bfd8 <Fs::setcwd(Process*, char*)+0x135>
c000bfbc:	85 db                	test   ebx,ebx
c000bfbe:	b8 01 00 00 00       	mov    eax,0x1
c000bfc3:	74 31                	je     c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bfc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfc7:	83 ec 0c             	sub    esp,0xc
c000bfca:	53                   	push   ebx
c000bfcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfce:	83 c4 10             	add    esp,0x10
c000bfd1:	b8 01 00 00 00       	mov    eax,0x1
c000bfd6:	eb 1e                	jmp    c000bff6 <Fs::setcwd(Process*, char*)+0x153>
c000bfd8:	85 db                	test   ebx,ebx
c000bfda:	74 0c                	je     c000bfe8 <Fs::setcwd(Process*, char*)+0x145>
c000bfdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfde:	83 ec 0c             	sub    esp,0xc
c000bfe1:	53                   	push   ebx
c000bfe2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfe5:	83 c4 10             	add    esp,0x10
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	56                   	push   esi
c000bfeb:	57                   	push   edi
c000bfec:	e8 5f 46 ff ff       	call   c0000650 <strcpy>
c000bff1:	83 c4 10             	add    esp,0x10
c000bff4:	31 c0                	xor    eax,eax
c000bff6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bffc:	5b                   	pop    ebx
c000bffd:	5e                   	pop    esi
c000bffe:	5f                   	pop    edi
c000bfff:	5d                   	pop    ebp
c000c000:	c3                   	ret    
c000c001:	90                   	nop

c000c002 <Directory::Directory(char const*, Process*)>:
c000c002:	83 ec 0c             	sub    esp,0xc
c000c005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c009:	83 ec 08             	sub    esp,0x8
c000c00c:	6a 00                	push   0x0
c000c00e:	50                   	push   eax
c000c00f:	e8 92 d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	ba bc 19 02 c0       	mov    edx,0xc00219bc
c000c01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c020:	89 10                	mov    DWORD PTR [eax],edx
c000c022:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c027:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c02b:	0f 95 c0             	setne  al
c000c02e:	0f b6 c0             	movzx  eax,al
c000c031:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c035:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c03b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c03f:	83 c2 0d             	add    edx,0xd
c000c042:	50                   	push   eax
c000c043:	51                   	push   ecx
c000c044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c048:	52                   	push   edx
c000c049:	e8 c8 f7 ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c04e:	83 c4 10             	add    esp,0x10
c000c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c055:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c058:	83 e8 41             	sub    eax,0x41
c000c05b:	88 c2                	mov    dl,al
c000c05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c061:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c073:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c079:	0f b6 c0             	movzx  eax,al
c000c07c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c083:	85 c0                	test   eax,eax
c000c085:	74 3e                	je     c000c0c5 <Directory::Directory(char const*, Process*)+0xc3>
c000c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c091:	0f b6 c0             	movzx  eax,al
c000c094:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c09b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0a1:	85 c0                	test   eax,eax
c000c0a3:	75 20                	jne    c000c0c5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0af:	0f b6 c0             	movzx  eax,al
c000c0b2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0b9:	83 ec 0c             	sub    esp,0xc
c000c0bc:	50                   	push   eax
c000c0bd:	e8 06 1c 00 00       	call   c000dcc8 <LogicalDisk::mount()>
c000c0c2:	83 c4 10             	add    esp,0x10
c000c0c5:	90                   	nop
c000c0c6:	83 c4 0c             	add    esp,0xc
c000c0c9:	c3                   	ret    

c000c0ca <Directory::open()>:
c000c0ca:	53                   	push   ebx
c000c0cb:	b8 0b 00 00 00       	mov    eax,0xb
c000c0d0:	83 ec 08             	sub    esp,0x8
c000c0d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0d7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0de:	83 fa 19             	cmp    edx,0x19
c000c0e1:	77 3d                	ja     c000c120 <Directory::open()+0x56>
c000c0e3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0ea:	85 d2                	test   edx,edx
c000c0ec:	74 32                	je     c000c120 <Directory::open()+0x56>
c000c0ee:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0f4:	85 d2                	test   edx,edx
c000c0f6:	74 28                	je     c000c120 <Directory::open()+0x56>
c000c0f8:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c0fc:	b8 06 00 00 00       	mov    eax,0x6
c000c101:	75 1d                	jne    c000c120 <Directory::open()+0x56>
c000c103:	50                   	push   eax
c000c104:	8b 02                	mov    eax,DWORD PTR [edx]
c000c106:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c10c:	51                   	push   ecx
c000c10d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c110:	51                   	push   ecx
c000c111:	52                   	push   edx
c000c112:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c115:	83 c4 10             	add    esp,0x10
c000c118:	85 c0                	test   eax,eax
c000c11a:	75 04                	jne    c000c120 <Directory::open()+0x56>
c000c11c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c120:	83 c4 08             	add    esp,0x8
c000c123:	5b                   	pop    ebx
c000c124:	c3                   	ret    
c000c125:	90                   	nop

c000c126 <Directory::close()>:
c000c126:	53                   	push   ebx
c000c127:	b8 0b 00 00 00       	mov    eax,0xb
c000c12c:	83 ec 08             	sub    esp,0x8
c000c12f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c133:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c13a:	83 f9 19             	cmp    ecx,0x19
c000c13d:	77 41                	ja     c000c180 <Directory::close()+0x5a>
c000c13f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c146:	85 db                	test   ebx,ebx
c000c148:	74 36                	je     c000c180 <Directory::close()+0x5a>
c000c14a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c151:	74 2d                	je     c000c180 <Directory::close()+0x5a>
c000c153:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c157:	b8 05 00 00 00       	mov    eax,0x5
c000c15c:	74 22                	je     c000c180 <Directory::close()+0x5a>
c000c15e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c162:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c169:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c16f:	53                   	push   ebx
c000c170:	53                   	push   ebx
c000c171:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c173:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c179:	50                   	push   eax
c000c17a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c17d:	83 c4 10             	add    esp,0x10
c000c180:	83 c4 08             	add    esp,0x8
c000c183:	5b                   	pop    ebx
c000c184:	c3                   	ret    
c000c185:	90                   	nop

c000c186 <Directory::unlink()>:
c000c186:	83 ec 0c             	sub    esp,0xc
c000c189:	b8 0b 00 00 00       	mov    eax,0xb
c000c18e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c192:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c199:	83 f9 19             	cmp    ecx,0x19
c000c19c:	77 2f                	ja     c000c1cd <Directory::unlink()+0x47>
c000c19e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1a5:	85 c9                	test   ecx,ecx
c000c1a7:	74 24                	je     c000c1cd <Directory::unlink()+0x47>
c000c1a9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1af:	85 c9                	test   ecx,ecx
c000c1b1:	74 1a                	je     c000c1cd <Directory::unlink()+0x47>
c000c1b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1b7:	b8 06 00 00 00       	mov    eax,0x6
c000c1bc:	75 0f                	jne    c000c1cd <Directory::unlink()+0x47>
c000c1be:	50                   	push   eax
c000c1bf:	83 c2 0d             	add    edx,0xd
c000c1c2:	50                   	push   eax
c000c1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1c5:	52                   	push   edx
c000c1c6:	51                   	push   ecx
c000c1c7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1ca:	83 c4 10             	add    esp,0x10
c000c1cd:	83 c4 0c             	add    esp,0xc
c000c1d0:	c3                   	ret    
c000c1d1:	90                   	nop

c000c1d2 <Directory::rename(char const*)>:
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000c1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1e5:	83 f9 19             	cmp    ecx,0x19
c000c1e8:	77 32                	ja     c000c21c <Directory::rename(char const*)+0x4a>
c000c1ea:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1f1:	85 c9                	test   ecx,ecx
c000c1f3:	74 27                	je     c000c21c <Directory::rename(char const*)+0x4a>
c000c1f5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1fb:	85 c9                	test   ecx,ecx
c000c1fd:	74 1d                	je     c000c21c <Directory::rename(char const*)+0x4a>
c000c1ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c203:	b8 06 00 00 00       	mov    eax,0x6
c000c208:	75 12                	jne    c000c21c <Directory::rename(char const*)+0x4a>
c000c20a:	50                   	push   eax
c000c20b:	83 c2 0d             	add    edx,0xd
c000c20e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c210:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c214:	52                   	push   edx
c000c215:	51                   	push   ecx
c000c216:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c219:	83 c4 10             	add    esp,0x10
c000c21c:	83 c4 0c             	add    esp,0xc
c000c21f:	c3                   	ret    

c000c220 <Directory::exists()>:
c000c220:	83 ec 0c             	sub    esp,0xc
c000c223:	31 c0                	xor    eax,eax
c000c225:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c229:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c230:	83 f9 19             	cmp    ecx,0x19
c000c233:	77 24                	ja     c000c259 <Directory::exists()+0x39>
c000c235:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c23c:	85 c9                	test   ecx,ecx
c000c23e:	74 19                	je     c000c259 <Directory::exists()+0x39>
c000c240:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c246:	85 c9                	test   ecx,ecx
c000c248:	74 0f                	je     c000c259 <Directory::exists()+0x39>
c000c24a:	50                   	push   eax
c000c24b:	83 c2 0d             	add    edx,0xd
c000c24e:	50                   	push   eax
c000c24f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c251:	52                   	push   edx
c000c252:	51                   	push   ecx
c000c253:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	83 c4 0c             	add    esp,0xc
c000c25c:	c3                   	ret    
c000c25d:	90                   	nop

c000c25e <Directory::read(dirent*)>:
c000c25e:	83 ec 1c             	sub    esp,0x1c
c000c261:	b8 0b 00 00 00       	mov    eax,0xb
c000c266:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c26a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c271:	83 f9 19             	cmp    ecx,0x19
c000c274:	77 30                	ja     c000c2a6 <Directory::read(dirent*)+0x48>
c000c276:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c27d:	85 c9                	test   ecx,ecx
c000c27f:	74 25                	je     c000c2a6 <Directory::read(dirent*)+0x48>
c000c281:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c288:	74 1c                	je     c000c2a6 <Directory::read(dirent*)+0x48>
c000c28a:	83 ec 0c             	sub    esp,0xc
c000c28d:	8b 02                	mov    eax,DWORD PTR [edx]
c000c28f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c293:	51                   	push   ecx
c000c294:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c298:	6a 00                	push   0x0
c000c29a:	68 10 01 00 00       	push   0x110
c000c29f:	52                   	push   edx
c000c2a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2a3:	83 c4 20             	add    esp,0x20
c000c2a6:	83 c4 1c             	add    esp,0x1c
c000c2a9:	c3                   	ret    

c000c2aa <Directory::create()>:
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	b8 0b 00 00 00       	mov    eax,0xb
c000c2b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2bd:	83 f9 19             	cmp    ecx,0x19
c000c2c0:	77 2f                	ja     c000c2f1 <Directory::create()+0x47>
c000c2c2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2c9:	85 c9                	test   ecx,ecx
c000c2cb:	74 24                	je     c000c2f1 <Directory::create()+0x47>
c000c2cd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2d3:	85 c9                	test   ecx,ecx
c000c2d5:	74 1a                	je     c000c2f1 <Directory::create()+0x47>
c000c2d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2db:	b8 06 00 00 00       	mov    eax,0x6
c000c2e0:	75 0f                	jne    c000c2f1 <Directory::create()+0x47>
c000c2e2:	50                   	push   eax
c000c2e3:	83 c2 0d             	add    edx,0xd
c000c2e6:	50                   	push   eax
c000c2e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2e9:	52                   	push   edx
c000c2ea:	51                   	push   ecx
c000c2eb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2ee:	83 c4 10             	add    esp,0x10
c000c2f1:	83 c4 0c             	add    esp,0xc
c000c2f4:	c3                   	ret    
c000c2f5:	90                   	nop

c000c2f6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2f6:	b8 0a 00 00 00       	mov    eax,0xa
c000c2fb:	c3                   	ret    

c000c2fc <Bus::Bus(char const*)>:
c000c2fc:	83 ec 0c             	sub    esp,0xc
c000c2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c303:	83 ec 08             	sub    esp,0x8
c000c306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c30a:	50                   	push   eax
c000c30b:	e8 28 08 00 00       	call   c000cb38 <Device::Device(char const*)>
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	ba d8 19 02 c0       	mov    edx,0xc00219d8
c000c318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c31c:	89 10                	mov    DWORD PTR [eax],edx
c000c31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c322:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c32c:	90                   	nop
c000c32d:	83 c4 0c             	add    esp,0xc
c000c330:	c3                   	ret    
c000c331:	90                   	nop
c000c332:	66 90                	xchg   ax,ax

c000c334 <Bus::~Bus()>:
c000c334:	83 ec 0c             	sub    esp,0xc
c000c337:	ba d8 19 02 c0       	mov    edx,0xc00219d8
c000c33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c340:	89 10                	mov    DWORD PTR [eax],edx
c000c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c346:	83 ec 0c             	sub    esp,0xc
c000c349:	50                   	push   eax
c000c34a:	e8 53 05 00 00       	call   c000c8a2 <Device::~Device()>
c000c34f:	83 c4 10             	add    esp,0x10
c000c352:	90                   	nop
c000c353:	83 c4 0c             	add    esp,0xc
c000c356:	c3                   	ret    
c000c357:	90                   	nop

c000c358 <Bus::~Bus()>:
c000c358:	83 ec 0c             	sub    esp,0xc
c000c35b:	83 ec 0c             	sub    esp,0xc
c000c35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c362:	e8 cd ff ff ff       	call   c000c334 <Bus::~Bus()>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	83 ec 08             	sub    esp,0x8
c000c36d:	68 58 01 00 00       	push   0x158
c000c372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c376:	e8 91 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c37b:	83 c4 10             	add    esp,0x10
c000c37e:	83 c4 0c             	add    esp,0xc
c000c381:	c3                   	ret    

c000c382 <beepThread(void*)>:
c000c382:	83 ec 0c             	sub    esp,0xc
c000c385:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c38a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c38e:	48                   	dec    eax
c000c38f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c394:	75 01                	jne    c000c397 <beepThread(void*)+0x15>
c000c396:	fb                   	sti    
c000c397:	6b c2 0a             	imul   eax,edx,0xa
c000c39a:	83 ec 0c             	sub    esp,0xc
c000c39d:	50                   	push   eax
c000c39e:	e8 f1 9f 00 00       	call   c0016394 <milliTenthSleep(unsigned int)>
c000c3a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3aa:	e8 3e bf 00 00       	call   c00182ed <HalMakeBeep(int)>
c000c3af:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3b7:	83 c4 1c             	add    esp,0x1c
c000c3ba:	e9 b9 9e 00 00       	jmp    c0016278 <blockTask(TaskState)>

c000c3bf <Krnl::beep(int, int, bool)>:
c000c3bf:	56                   	push   esi
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 10             	sub    esp,0x10
c000c3c4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d0:	e8 18 bf 00 00       	call   c00182ed <HalMakeBeep(int)>
c000c3d5:	89 f0                	mov    eax,esi
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	84 c0                	test   al,al
c000c3dc:	74 1e                	je     c000c3fc <Krnl::beep(int, int, bool)+0x3d>
c000c3de:	6b db 0a             	imul   ebx,ebx,0xa
c000c3e1:	83 ec 0c             	sub    esp,0xc
c000c3e4:	53                   	push   ebx
c000c3e5:	e8 aa 9f 00 00       	call   c0016394 <milliTenthSleep(unsigned int)>
c000c3ea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3f2:	83 c4 14             	add    esp,0x14
c000c3f5:	5b                   	pop    ebx
c000c3f6:	5e                   	pop    esi
c000c3f7:	e9 f1 be 00 00       	jmp    c00182ed <HalMakeBeep(int)>
c000c3fc:	68 e6 00 00 00       	push   0xe6
c000c401:	53                   	push   ebx
c000c402:	68 82 c3 00 c0       	push   0xc000c382
c000c407:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c40d:	e8 1a 9a 00 00       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c000c412:	83 c4 14             	add    esp,0x14
c000c415:	5b                   	pop    ebx
c000c416:	5e                   	pop    esi
c000c417:	c3                   	ret    

c000c418 <User::loadClockSettings(int)>:
c000c418:	53                   	push   ebx
c000c419:	83 ec 14             	sub    esp,0x14
c000c41c:	68 14 01 00 00       	push   0x114
c000c421:	e8 ad b6 ff ff       	call   c0007ad3 <malloc>
c000c426:	83 c4 0c             	add    esp,0xc
c000c429:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c42f:	68 fc 19 02 c0       	push   0xc00219fc
c000c434:	50                   	push   eax
c000c435:	89 c3                	mov    ebx,eax
c000c437:	e8 e6 f6 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c000c43c:	58                   	pop    eax
c000c43d:	5a                   	pop    edx
c000c43e:	6a 01                	push   0x1
c000c440:	53                   	push   ebx
c000c441:	e8 fa f6 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c000c446:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c449:	e8 50 f7 ff ff       	call   c000bb9e <File::close()>
c000c44e:	83 c4 10             	add    esp,0x10
c000c451:	85 db                	test   ebx,ebx
c000c453:	74 0f                	je     c000c464 <User::loadClockSettings(int)+0x4c>
c000c455:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c457:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c45b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c45e:	83 c4 08             	add    esp,0x8
c000c461:	5b                   	pop    ebx
c000c462:	ff e0                	jmp    eax
c000c464:	83 c4 08             	add    esp,0x8
c000c467:	5b                   	pop    ebx
c000c468:	c3                   	ret    
c000c469:	90                   	nop

c000c46a <Clock::Clock(char const*)>:
c000c46a:	83 ec 0c             	sub    esp,0xc
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	83 ec 08             	sub    esp,0x8
c000c474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c478:	50                   	push   eax
c000c479:	e8 ba 06 00 00       	call   c000cb38 <Device::Device(char const*)>
c000c47e:	83 c4 10             	add    esp,0x10
c000c481:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c000c486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c48a:	89 10                	mov    DWORD PTR [eax],edx
c000c48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c490:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c49a:	90                   	nop
c000c49b:	83 c4 0c             	add    esp,0xc
c000c49e:	c3                   	ret    
c000c49f:	90                   	nop

c000c4a0 <Clock::~Clock()>:
c000c4a0:	83 ec 0c             	sub    esp,0xc
c000c4a3:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c000c4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ac:	89 10                	mov    DWORD PTR [eax],edx
c000c4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b2:	83 ec 0c             	sub    esp,0xc
c000c4b5:	50                   	push   eax
c000c4b6:	e8 e7 03 00 00       	call   c000c8a2 <Device::~Device()>
c000c4bb:	83 c4 10             	add    esp,0x10
c000c4be:	90                   	nop
c000c4bf:	83 c4 0c             	add    esp,0xc
c000c4c2:	c3                   	ret    
c000c4c3:	90                   	nop

c000c4c4 <Clock::~Clock()>:
c000c4c4:	83 ec 0c             	sub    esp,0xc
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ce:	e8 cd ff ff ff       	call   c000c4a0 <Clock::~Clock()>
c000c4d3:	83 c4 10             	add    esp,0x10
c000c4d6:	83 ec 08             	sub    esp,0x8
c000c4d9:	68 58 01 00 00       	push   0x158
c000c4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4e2:	e8 25 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c4e7:	83 c4 10             	add    esp,0x10
c000c4ea:	83 c4 0c             	add    esp,0xc
c000c4ed:	c3                   	ret    

c000c4ee <Clock::timeInSecondsLocal()>:
c000c4ee:	53                   	push   ebx
c000c4ef:	83 ec 14             	sub    esp,0x14
c000c4f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4f6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4f8:	50                   	push   eax
c000c4f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c4fc:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c503:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c509:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c50f:	89 cb                	mov    ebx,ecx
c000c511:	c1 fb 1f             	sar    ebx,0x1f
c000c514:	01 c8                	add    eax,ecx
c000c516:	11 da                	adc    edx,ebx
c000c518:	83 c4 10             	add    esp,0x10
c000c51b:	31 c9                	xor    ecx,ecx
c000c51d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c524:	74 05                	je     c000c52b <Clock::timeInSecondsLocal()+0x3d>
c000c526:	b9 08 07 00 00       	mov    ecx,0x708
c000c52b:	31 db                	xor    ebx,ebx
c000c52d:	01 c8                	add    eax,ecx
c000c52f:	11 da                	adc    edx,ebx
c000c531:	83 c4 08             	add    esp,0x8
c000c534:	5b                   	pop    ebx
c000c535:	c3                   	ret    

c000c536 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c536:	57                   	push   edi
c000c537:	56                   	push   esi
c000c538:	53                   	push   ebx
c000c539:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c53d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c541:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c545:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c547:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c54a:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c551:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c557:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c55d:	99                   	cdq    
c000c55e:	29 c6                	sub    esi,eax
c000c560:	19 d7                	sbb    edi,edx
c000c562:	89 f0                	mov    eax,esi
c000c564:	31 f6                	xor    esi,esi
c000c566:	89 fa                	mov    edx,edi
c000c568:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c56f:	74 05                	je     c000c576 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c571:	be 08 07 00 00       	mov    esi,0x708
c000c576:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c57a:	31 ff                	xor    edi,edi
c000c57c:	29 f0                	sub    eax,esi
c000c57e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c582:	19 fa                	sbb    edx,edi
c000c584:	89 d8                	mov    eax,ebx
c000c586:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c58a:	5b                   	pop    ebx
c000c58b:	5e                   	pop    esi
c000c58c:	5f                   	pop    edi
c000c58d:	ff e0                	jmp    eax

c000c58f <datetimeToSeconds(datetime_t)>:
c000c58f:	55                   	push   ebp
c000c590:	57                   	push   edi
c000c591:	56                   	push   esi
c000c592:	53                   	push   ebx
c000c593:	83 ec 0c             	sub    esp,0xc
c000c596:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c59a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c59e:	89 f7                	mov    edi,esi
c000c5a0:	89 f0                	mov    eax,esi
c000c5a2:	0f b6 cf             	movzx  ecx,bh
c000c5a5:	0f b6 c4             	movzx  eax,ah
c000c5a8:	c1 ef 10             	shr    edi,0x10
c000c5ab:	89 da                	mov    edx,ebx
c000c5ad:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5b0:	89 f9                	mov    ecx,edi
c000c5b2:	0f b6 f9             	movzx  edi,cl
c000c5b5:	89 f1                	mov    ecx,esi
c000c5b7:	6b c0 3c             	imul   eax,eax,0x3c
c000c5ba:	0f b6 f1             	movzx  esi,cl
c000c5bd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5c3:	0f b6 db             	movzx  ebx,bl
c000c5c6:	c1 ea 10             	shr    edx,0x10
c000c5c9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c5cf:	01 f8                	add    eax,edi
c000c5d1:	01 f0                	add    eax,esi
c000c5d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d6:	c1 f8 1f             	sar    eax,0x1f
c000c5d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5dd:	89 e8                	mov    eax,ebp
c000c5df:	0f b6 c0             	movzx  eax,al
c000c5e2:	8b 0c 85 60 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde5a0]
c000c5e9:	83 f8 01             	cmp    eax,0x1
c000c5ec:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c5f0:	0f b7 da             	movzx  ebx,dx
c000c5f3:	76 27                	jbe    c000c61c <datetimeToSeconds(datetime_t)+0x8d>
c000c5f5:	80 e2 03             	and    dl,0x3
c000c5f8:	75 22                	jne    c000c61c <datetimeToSeconds(datetime_t)+0x8d>
c000c5fa:	31 d2                	xor    edx,edx
c000c5fc:	be 64 00 00 00       	mov    esi,0x64
c000c601:	89 d8                	mov    eax,ebx
c000c603:	f7 f6                	div    esi
c000c605:	85 d2                	test   edx,edx
c000c607:	75 12                	jne    c000c61b <datetimeToSeconds(datetime_t)+0x8c>
c000c609:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c60f:	be 90 01 00 00       	mov    esi,0x190
c000c614:	99                   	cdq    
c000c615:	f7 fe                	idiv   esi
c000c617:	85 d2                	test   edx,edx
c000c619:	75 01                	jne    c000c61c <datetimeToSeconds(datetime_t)+0x8d>
c000c61b:	41                   	inc    ecx
c000c61c:	83 fb 46             	cmp    ebx,0x46
c000c61f:	76 48                	jbe    c000c669 <datetimeToSeconds(datetime_t)+0xda>
c000c621:	be 46 00 00 00       	mov    esi,0x46
c000c626:	bf 64 00 00 00       	mov    edi,0x64
c000c62b:	bd 90 01 00 00       	mov    ebp,0x190
c000c630:	f7 c6 03 00 00 00    	test   esi,0x3
c000c636:	b8 6d 01 00 00       	mov    eax,0x16d
c000c63b:	75 23                	jne    c000c660 <datetimeToSeconds(datetime_t)+0xd1>
c000c63d:	89 f0                	mov    eax,esi
c000c63f:	99                   	cdq    
c000c640:	f7 ff                	idiv   edi
c000c642:	b8 6e 01 00 00       	mov    eax,0x16e
c000c647:	85 d2                	test   edx,edx
c000c649:	75 15                	jne    c000c660 <datetimeToSeconds(datetime_t)+0xd1>
c000c64b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c651:	99                   	cdq    
c000c652:	f7 fd                	idiv   ebp
c000c654:	83 fa 01             	cmp    edx,0x1
c000c657:	19 c0                	sbb    eax,eax
c000c659:	f7 d0                	not    eax
c000c65b:	05 6e 01 00 00       	add    eax,0x16e
c000c660:	46                   	inc    esi
c000c661:	01 c1                	add    ecx,eax
c000c663:	39 de                	cmp    esi,ebx
c000c665:	7c c9                	jl     c000c630 <datetimeToSeconds(datetime_t)+0xa1>
c000c667:	eb 34                	jmp    c000c69d <datetimeToSeconds(datetime_t)+0x10e>
c000c669:	74 32                	je     c000c69d <datetimeToSeconds(datetime_t)+0x10e>
c000c66b:	b8 45 00 00 00       	mov    eax,0x45
c000c670:	89 c2                	mov    edx,eax
c000c672:	83 e2 03             	and    edx,0x3
c000c675:	39 d8                	cmp    eax,ebx
c000c677:	7e 0f                	jle    c000c688 <datetimeToSeconds(datetime_t)+0xf9>
c000c679:	83 fa 01             	cmp    edx,0x1
c000c67c:	19 d2                	sbb    edx,edx
c000c67e:	48                   	dec    eax
c000c67f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c686:	eb e8                	jmp    c000c670 <datetimeToSeconds(datetime_t)+0xe1>
c000c688:	85 d2                	test   edx,edx
c000c68a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c68f:	75 0a                	jne    c000c69b <datetimeToSeconds(datetime_t)+0x10c>
c000c691:	83 fb 01             	cmp    ebx,0x1
c000c694:	19 c0                	sbb    eax,eax
c000c696:	05 6e 01 00 00       	add    eax,0x16e
c000c69b:	29 c1                	sub    ecx,eax
c000c69d:	b8 80 51 01 00       	mov    eax,0x15180
c000c6a2:	f7 e9                	imul   ecx
c000c6a4:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6a7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6ab:	83 c4 0c             	add    esp,0xc
c000c6ae:	5b                   	pop    ebx
c000c6af:	5e                   	pop    esi
c000c6b0:	5f                   	pop    edi
c000c6b1:	5d                   	pop    ebp
c000c6b2:	c3                   	ret    
c000c6b3:	90                   	nop

c000c6b4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6b4:	57                   	push   edi
c000c6b5:	56                   	push   esi
c000c6b6:	53                   	push   ebx
c000c6b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6bb:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6bd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6c8:	e8 c2 fe ff ff       	call   c000c58f <datetimeToSeconds(datetime_t)>
c000c6cd:	59                   	pop    ecx
c000c6ce:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6d5:	5b                   	pop    ebx
c000c6d6:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6dc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6e2:	89 cb                	mov    ebx,ecx
c000c6e4:	c1 fb 1f             	sar    ebx,0x1f
c000c6e7:	29 c8                	sub    eax,ecx
c000c6e9:	19 da                	sbb    edx,ebx
c000c6eb:	31 c9                	xor    ecx,ecx
c000c6ed:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6f4:	74 05                	je     c000c6fb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6f6:	b9 08 07 00 00       	mov    ecx,0x708
c000c6fb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c6ff:	31 db                	xor    ebx,ebx
c000c701:	29 c8                	sub    eax,ecx
c000c703:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c707:	19 da                	sbb    edx,ebx
c000c709:	89 f8                	mov    eax,edi
c000c70b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c70f:	5b                   	pop    ebx
c000c710:	5e                   	pop    esi
c000c711:	5f                   	pop    edi
c000c712:	ff e0                	jmp    eax

c000c714 <secondsToDatetime(unsigned long long)>:
c000c714:	55                   	push   ebp
c000c715:	57                   	push   edi
c000c716:	56                   	push   esi
c000c717:	53                   	push   ebx
c000c718:	83 ec 1c             	sub    esp,0x1c
c000c71b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c71f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c723:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c727:	6a 00                	push   0x0
c000c729:	68 80 51 01 00       	push   0x15180
c000c72e:	55                   	push   ebp
c000c72f:	57                   	push   edi
c000c730:	e8 fb 2f 01 00       	call   c001f730 <__udivdi3>
c000c735:	83 c4 10             	add    esp,0x10
c000c738:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c73c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c742:	6a 00                	push   0x0
c000c744:	68 80 51 01 00       	push   0x15180
c000c749:	55                   	push   ebp
c000c74a:	57                   	push   edi
c000c74b:	bf 10 0e 00 00       	mov    edi,0xe10
c000c750:	e8 db 30 01 00       	call   c001f830 <__umoddi3>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	99                   	cdq    
c000c759:	f7 ff                	idiv   edi
c000c75b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c760:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c763:	89 d0                	mov    eax,edx
c000c765:	99                   	cdq    
c000c766:	f7 ff                	idiv   edi
c000c768:	85 db                	test   ebx,ebx
c000c76a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c76d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c770:	79 11                	jns    c000c783 <secondsToDatetime(unsigned long long)+0x6f>
c000c772:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c776:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c77c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c781:	eb 07                	jmp    c000c78a <secondsToDatetime(unsigned long long)+0x76>
c000c783:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c788:	89 d8                	mov    eax,ebx
c000c78a:	99                   	cdq    
c000c78b:	bf b4 05 00 00       	mov    edi,0x5b4
c000c790:	f7 f9                	idiv   ecx
c000c792:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c797:	31 d2                	xor    edx,edx
c000c799:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c79e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7aa:	01 c3                	add    ebx,eax
c000c7ac:	89 d8                	mov    eax,ebx
c000c7ae:	f7 f1                	div    ecx
c000c7b0:	31 d2                	xor    edx,edx
c000c7b2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7b5:	89 d8                	mov    eax,ebx
c000c7b7:	f7 f7                	div    edi
c000c7b9:	31 d2                	xor    edx,edx
c000c7bb:	29 c1                	sub    ecx,eax
c000c7bd:	89 d8                	mov    eax,ebx
c000c7bf:	f7 f5                	div    ebp
c000c7c1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7c6:	31 d2                	xor    edx,edx
c000c7c8:	29 c1                	sub    ecx,eax
c000c7ca:	89 c8                	mov    eax,ecx
c000c7cc:	f7 f5                	div    ebp
c000c7ce:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7d3:	31 d2                	xor    edx,edx
c000c7d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7d9:	89 c8                	mov    eax,ecx
c000c7db:	f7 f5                	div    ebp
c000c7dd:	31 d2                	xor    edx,edx
c000c7df:	01 c3                	add    ebx,eax
c000c7e1:	89 c8                	mov    eax,ecx
c000c7e3:	f7 f7                	div    edi
c000c7e5:	bf 99 00 00 00       	mov    edi,0x99
c000c7ea:	31 d2                	xor    edx,edx
c000c7ec:	29 c3                	sub    ebx,eax
c000c7ee:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7f6:	29 c3                	sub    ebx,eax
c000c7f8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7fb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7fe:	83 c1 02             	add    ecx,0x2
c000c801:	89 c8                	mov    eax,ecx
c000c803:	bb 05 00 00 00       	mov    ebx,0x5
c000c808:	f7 f7                	div    edi
c000c80a:	31 d2                	xor    edx,edx
c000c80c:	89 c7                	mov    edi,eax
c000c80e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c814:	83 c0 02             	add    eax,0x2
c000c817:	f7 f3                	div    ebx
c000c819:	89 eb                	mov    ebx,ebp
c000c81b:	29 c3                	sub    ebx,eax
c000c81d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c823:	88 1e                	mov    BYTE PTR [esi],bl
c000c825:	19 c0                	sbb    eax,eax
c000c827:	31 d2                	xor    edx,edx
c000c829:	83 e0 0c             	and    eax,0xc
c000c82c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c830:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c838:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c83c:	83 f9 01             	cmp    ecx,0x1
c000c83f:	0f 96 c2             	setbe  dl
c000c842:	41                   	inc    ecx
c000c843:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c846:	01 d0                	add    eax,edx
c000c848:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c84c:	83 c4 1c             	add    esp,0x1c
c000c84f:	89 f0                	mov    eax,esi
c000c851:	5b                   	pop    ebx
c000c852:	5e                   	pop    esi
c000c853:	5f                   	pop    edi
c000c854:	5d                   	pop    ebp
c000c855:	c2 04 00             	ret    0x4

c000c858 <Clock::timeInDatetimeLocal()>:
c000c858:	53                   	push   ebx
c000c859:	83 ec 14             	sub    esp,0x14
c000c85c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c860:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c864:	e8 85 fc ff ff       	call   c000c4ee <Clock::timeInSecondsLocal()>
c000c869:	83 c4 0c             	add    esp,0xc
c000c86c:	52                   	push   edx
c000c86d:	50                   	push   eax
c000c86e:	53                   	push   ebx
c000c86f:	e8 a0 fe ff ff       	call   c000c714 <secondsToDatetime(unsigned long long)>
c000c874:	89 d8                	mov    eax,ebx
c000c876:	83 c4 14             	add    esp,0x14
c000c879:	5b                   	pop    ebx
c000c87a:	c2 04 00             	ret    0x4
c000c87d:	90                   	nop

c000c87e <Device::hibernate()>:
c000c87e:	c3                   	ret    
c000c87f:	90                   	nop

c000c880 <Device::wake()>:
c000c880:	c3                   	ret    
c000c881:	90                   	nop

c000c882 <Device::detect()>:
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <Device::disableLegacy()>:
c000c884:	c3                   	ret    
c000c885:	90                   	nop

c000c886 <Device::powerSaving(PowerSavingLevel)>:
c000c886:	c3                   	ret    
c000c887:	90                   	nop

c000c888 <DriverlessDevice::close(int, int, void*)>:
c000c888:	31 c0                	xor    eax,eax
c000c88a:	c3                   	ret    
c000c88b:	90                   	nop

c000c88c <DriverlessDevice::detect()>:
c000c88c:	c3                   	ret    
c000c88d:	90                   	nop

c000c88e <DriverlessDevice::open(int, int, void*)>:
c000c88e:	83 ec 18             	sub    esp,0x18
c000c891:	68 90 1a 02 c0       	push   0xc0021a90
c000c896:	e8 cc 4c 00 00       	call   c0011567 <KePanic(char const*)>
c000c89b:	83 c8 ff             	or     eax,0xffffffff
c000c89e:	83 c4 1c             	add    esp,0x1c
c000c8a1:	c3                   	ret    

c000c8a2 <Device::~Device()>:
c000c8a2:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c8a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8ab:	89 10                	mov    DWORD PTR [eax],edx
c000c8ad:	90                   	nop
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <Device::~Device()>:
c000c8b0:	83 ec 0c             	sub    esp,0xc
c000c8b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8b7:	e8 e6 ff ff ff       	call   c000c8a2 <Device::~Device()>
c000c8bc:	83 c4 04             	add    esp,0x4
c000c8bf:	83 ec 08             	sub    esp,0x8
c000c8c2:	68 58 01 00 00       	push   0x158
c000c8c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8cb:	e8 3c df ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c8d0:	83 c4 10             	add    esp,0x10
c000c8d3:	83 c4 0c             	add    esp,0xc
c000c8d6:	c3                   	ret    
c000c8d7:	90                   	nop

c000c8d8 <Device::findAndLoadDriver()>:
c000c8d8:	c7 44 24 04 ae 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021aae
c000c8e0:	e9 25 e0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c8e5:	90                   	nop

c000c8e6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8e6:	57                   	push   edi
c000c8e7:	b9 09 00 00 00       	mov    ecx,0x9
c000c8ec:	56                   	push   esi
c000c8ed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8f1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8f5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c8ff:	81 c7 18 01 00 00    	add    edi,0x118
c000c905:	fc                   	cld    
c000c906:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c908:	5e                   	pop    esi
c000c909:	5f                   	pop    edi
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <Device::preOpenACPI(void*, char*, char*)>:
c000c90c:	57                   	push   edi
c000c90d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c912:	56                   	push   esi
c000c913:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c917:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c91b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c91f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c929:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c92f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c935:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c937:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c93d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c941:	b9 0e 00 00 00       	mov    ecx,0xe
c000c946:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c948:	5e                   	pop    esi
c000c949:	5f                   	pop    edi
c000c94a:	c3                   	ret    
c000c94b:	90                   	nop

c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c94c:	53                   	push   ebx
c000c94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c951:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c955:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c959:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c95d:	0f b6 c0             	movzx  eax,al
c000c960:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c964:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c968:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c96c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c970:	5b                   	pop    ebx
c000c971:	e9 aa 05 00 00       	jmp    c000cf20 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c976 <Device::getParent()>:
c000c976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c97a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c980:	c3                   	ret    
c000c981:	90                   	nop

c000c982 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c986:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c98a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c98f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c993:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c997:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c99b:	e9 f7 06 00 00       	jmp    c000d097 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9a0 <Device::addChild(Device*)>:
c000c9a0:	53                   	push   ebx
c000c9a1:	83 ec 08             	sub    esp,0x8
c000c9a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9ac:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9b2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9ba:	85 d2                	test   edx,edx
c000c9bc:	74 04                	je     c000c9c2 <Device::addChild(Device*)+0x22>
c000c9be:	89 d3                	mov    ebx,edx
c000c9c0:	eb f6                	jmp    c000c9b8 <Device::addChild(Device*)+0x18>
c000c9c2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9c5:	83 ec 0c             	sub    esp,0xc
c000c9c8:	6a 08                	push   0x8
c000c9ca:	e8 04 b1 ff ff       	call   c0007ad3 <malloc>
c000c9cf:	89 03                	mov    DWORD PTR [ebx],eax
c000c9d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9de:	83 c4 18             	add    esp,0x18
c000c9e1:	5b                   	pop    ebx
c000c9e2:	c3                   	ret    
c000c9e3:	90                   	nop

c000c9e4 <Device::removeAllChildren()>:
c000c9e4:	56                   	push   esi
c000c9e5:	53                   	push   ebx
c000c9e6:	52                   	push   edx
c000c9e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9eb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9f4:	74 17                	je     c000ca0d <Device::removeAllChildren()+0x29>
c000c9f6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	74 0c                	je     c000ca09 <Device::removeAllChildren()+0x25>
c000c9fd:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9ff:	83 ec 0c             	sub    esp,0xc
c000ca02:	50                   	push   eax
c000ca03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca06:	83 c4 10             	add    esp,0x10
c000ca09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca0b:	eb e4                	jmp    c000c9f1 <Device::removeAllChildren()+0xd>
c000ca0d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca19:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca26:	58                   	pop    eax
c000ca27:	5b                   	pop    ebx
c000ca28:	5e                   	pop    esi
c000ca29:	c3                   	ret    

c000ca2a <Device::hibernateAll()>:
c000ca2a:	53                   	push   ebx
c000ca2b:	83 ec 14             	sub    esp,0x14
c000ca2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca34:	53                   	push   ebx
c000ca35:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca44:	74 0f                	je     c000ca55 <Device::hibernateAll()+0x2b>
c000ca46:	83 ec 0c             	sub    esp,0xc
c000ca49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca4c:	e8 d9 ff ff ff       	call   c000ca2a <Device::hibernateAll()>
c000ca51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca53:	eb e9                	jmp    c000ca3e <Device::hibernateAll()+0x14>
c000ca55:	83 c4 08             	add    esp,0x8
c000ca58:	5b                   	pop    ebx
c000ca59:	c3                   	ret    

c000ca5a <Device::wakeAll()>:
c000ca5a:	53                   	push   ebx
c000ca5b:	83 ec 14             	sub    esp,0x14
c000ca5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca64:	53                   	push   ebx
c000ca65:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca6e:	83 c4 10             	add    esp,0x10
c000ca71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca74:	74 0f                	je     c000ca85 <Device::wakeAll()+0x2b>
c000ca76:	83 ec 0c             	sub    esp,0xc
c000ca79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca7c:	e8 d9 ff ff ff       	call   c000ca5a <Device::wakeAll()>
c000ca81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca83:	eb e9                	jmp    c000ca6e <Device::wakeAll()+0x14>
c000ca85:	83 c4 08             	add    esp,0x8
c000ca88:	5b                   	pop    ebx
c000ca89:	c3                   	ret    

c000ca8a <Device::detectAll()>:
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 14             	sub    esp,0x14
c000ca8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca94:	53                   	push   ebx
c000ca95:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca9e:	83 c4 10             	add    esp,0x10
c000caa1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa4:	74 0f                	je     c000cab5 <Device::detectAll()+0x2b>
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caac:	e8 d9 ff ff ff       	call   c000ca8a <Device::detectAll()>
c000cab1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cab3:	eb e9                	jmp    c000ca9e <Device::detectAll()+0x14>
c000cab5:	83 c4 08             	add    esp,0x8
c000cab8:	5b                   	pop    ebx
c000cab9:	c3                   	ret    

c000caba <Device::disableLegacyAll()>:
c000caba:	c3                   	ret    
c000cabb:	90                   	nop

c000cabc <Device::loadDriversForAll()>:
c000cabc:	c3                   	ret    
c000cabd:	90                   	nop

c000cabe <Device::closeAll()>:
c000cabe:	53                   	push   ebx
c000cabf:	83 ec 08             	sub    esp,0x8
c000cac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac8:	6a 00                	push   0x0
c000caca:	6a 00                	push   0x0
c000cacc:	6a 00                	push   0x0
c000cace:	53                   	push   ebx
c000cacf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cad2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cad8:	83 c4 10             	add    esp,0x10
c000cadb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cade:	74 0f                	je     c000caef <Device::closeAll()+0x31>
c000cae0:	83 ec 0c             	sub    esp,0xc
c000cae3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cae6:	e8 d3 ff ff ff       	call   c000cabe <Device::closeAll()>
c000caeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caed:	eb e9                	jmp    c000cad8 <Device::closeAll()+0x1a>
c000caef:	83 c4 08             	add    esp,0x8
c000caf2:	5b                   	pop    ebx
c000caf3:	c3                   	ret    

c000caf4 <Device::powerSavingAll(PowerSavingLevel)>:
c000caf4:	56                   	push   esi
c000caf5:	53                   	push   ebx
c000caf6:	83 ec 0c             	sub    esp,0xc
c000caf9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cafd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb01:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb03:	56                   	push   esi
c000cb04:	53                   	push   ebx
c000cb05:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb0e:	83 c4 10             	add    esp,0x10
c000cb11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb14:	74 0f                	je     c000cb25 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb16:	52                   	push   edx
c000cb17:	52                   	push   edx
c000cb18:	56                   	push   esi
c000cb19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb1c:	e8 d3 ff ff ff       	call   c000caf4 <Device::powerSavingAll(PowerSavingLevel)>
c000cb21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb23:	eb e9                	jmp    c000cb0e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb25:	58                   	pop    eax
c000cb26:	5b                   	pop    ebx
c000cb27:	5e                   	pop    esi
c000cb28:	c3                   	ret    
c000cb29:	90                   	nop

c000cb2a <Device::setName(char const*)>:
c000cb2a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb32:	e9 19 3b ff ff       	jmp    c0000650 <strcpy>
c000cb37:	90                   	nop

c000cb38 <Device::Device(char const*)>:
c000cb38:	83 ec 1c             	sub    esp,0x1c
c000cb3b:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000cb40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb44:	89 10                	mov    DWORD PTR [eax],edx
c000cb46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb58:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb66:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb74:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb7e:	83 ec 08             	sub    esp,0x8
c000cb81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb89:	e8 9c ff ff ff       	call   c000cb2a <Device::setName(char const*)>
c000cb8e:	83 c4 10             	add    esp,0x10
c000cb91:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb99:	83 ec 0c             	sub    esp,0xc
c000cb9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cba0:	e8 2e af ff ff       	call   c0007ad3 <malloc>
c000cba5:	83 c4 10             	add    esp,0x10
c000cba8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbb9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbef:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc08:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc16:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc24:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc2e:	90                   	nop
c000cc2f:	83 c4 1c             	add    esp,0x1c
c000cc32:	c3                   	ret    
c000cc33:	90                   	nop

c000cc34 <Device::getName()>:
c000cc34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc38:	05 d0 00 00 00       	add    eax,0xd0
c000cc3d:	c3                   	ret    

c000cc3e <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc3e:	83 ec 0c             	sub    esp,0xc
c000cc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc45:	83 ec 08             	sub    esp,0x8
c000cc48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc4c:	50                   	push   eax
c000cc4d:	e8 e6 fe ff ff       	call   c000cb38 <Device::Device(char const*)>
c000cc52:	83 c4 10             	add    esp,0x10
c000cc55:	ba 1c 1b 02 c0       	mov    edx,0xc0021b1c
c000cc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc5e:	89 10                	mov    DWORD PTR [eax],edx
c000cc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc64:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc6e:	90                   	nop
c000cc6f:	83 c4 0c             	add    esp,0xc
c000cc72:	c3                   	ret    
c000cc73:	90                   	nop

c000cc74 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc7f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc83:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc89:	75 0c                	jne    c000cc97 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc8b:	52                   	push   edx
c000cc8c:	52                   	push   edx
c000cc8d:	53                   	push   ebx
c000cc8e:	56                   	push   esi
c000cc8f:	e8 4e 2f 01 00       	call   c001fbe2 <LinkedList<Device>::addElement(Device*)>
c000cc94:	83 c4 10             	add    esp,0x10
c000cc97:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cca0:	74 12                	je     c000ccb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cca2:	50                   	push   eax
c000cca3:	57                   	push   edi
c000cca4:	56                   	push   esi
c000cca5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cca8:	e8 c7 ff ff ff       	call   c000cc74 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccaf:	83 c4 10             	add    esp,0x10
c000ccb2:	eb e9                	jmp    c000cc9d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccb4:	5b                   	pop    ebx
c000ccb5:	5e                   	pop    esi
c000ccb6:	5f                   	pop    edi
c000ccb7:	c3                   	ret    

c000ccb8 <getDevicesOfType(DeviceType)>:
c000ccb8:	53                   	push   ebx
c000ccb9:	83 ec 14             	sub    esp,0x14
c000ccbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ccc0:	53                   	push   ebx
c000ccc1:	e8 f8 2f 01 00       	call   c001fcbe <LinkedList<Device>::LinkedList()>
c000ccc6:	83 c4 0c             	add    esp,0xc
c000ccc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cccd:	53                   	push   ebx
c000ccce:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccd4:	e8 9b ff ff ff       	call   c000cc74 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccd9:	83 c4 18             	add    esp,0x18
c000ccdc:	89 d8                	mov    eax,ebx
c000ccde:	5b                   	pop    ebx
c000ccdf:	c2 04 00             	ret    0x4
c000cce2:	66 90                	xchg   ax,ax

c000cce4 <HardDiskController::HardDiskController(char const*)>:
c000cce4:	83 ec 0c             	sub    esp,0xc
c000cce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cceb:	83 ec 08             	sub    esp,0x8
c000ccee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf2:	50                   	push   eax
c000ccf3:	e8 40 fe ff ff       	call   c000cb38 <Device::Device(char const*)>
c000ccf8:	83 c4 10             	add    esp,0x10
c000ccfb:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c000cd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd04:	89 10                	mov    DWORD PTR [eax],edx
c000cd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd14:	90                   	nop
c000cd15:	83 c4 0c             	add    esp,0xc
c000cd18:	c3                   	ret    
c000cd19:	90                   	nop
c000cd1a:	66 90                	xchg   ax,ax

c000cd1c <HardDiskController::~HardDiskController()>:
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c000cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd28:	89 10                	mov    DWORD PTR [eax],edx
c000cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2e:	83 ec 0c             	sub    esp,0xc
c000cd31:	50                   	push   eax
c000cd32:	e8 6b fb ff ff       	call   c000c8a2 <Device::~Device()>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	90                   	nop
c000cd3b:	83 c4 0c             	add    esp,0xc
c000cd3e:	c3                   	ret    
c000cd3f:	90                   	nop

c000cd40 <HardDiskController::~HardDiskController()>:
c000cd40:	83 ec 0c             	sub    esp,0xc
c000cd43:	83 ec 0c             	sub    esp,0xc
c000cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4a:	e8 cd ff ff ff       	call   c000cd1c <HardDiskController::~HardDiskController()>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	83 ec 08             	sub    esp,0x8
c000cd55:	68 58 01 00 00       	push   0x158
c000cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5e:	e8 a9 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	83 c4 0c             	add    esp,0xc
c000cd69:	c3                   	ret    

c000cd6a <PhysicalDisk::eject()>:
c000cd6a:	83 c8 ff             	or     eax,0xffffffff
c000cd6d:	c3                   	ret    

c000cd6e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd6e:	83 ec 0c             	sub    esp,0xc
c000cd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd75:	83 ec 08             	sub    esp,0x8
c000cd78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7c:	50                   	push   eax
c000cd7d:	e8 b6 fd ff ff       	call   c000cb38 <Device::Device(char const*)>
c000cd82:	83 c4 10             	add    esp,0x10
c000cd85:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000cd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8e:	89 10                	mov    DWORD PTR [eax],edx
c000cd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd94:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdbc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cdd0:	90                   	nop
c000cdd1:	83 c4 0c             	add    esp,0xc
c000cdd4:	c3                   	ret    
c000cdd5:	90                   	nop

c000cdd6 <PhysicalDisk::startCache()>:
c000cdd6:	56                   	push   esi
c000cdd7:	53                   	push   ebx
c000cdd8:	83 ec 10             	sub    esp,0x10
c000cddb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cddf:	6a 44                	push   0x44
c000cde1:	e8 ed ac ff ff       	call   c0007ad3 <malloc>
c000cde6:	89 c6                	mov    esi,eax
c000cde8:	58                   	pop    eax
c000cde9:	5a                   	pop    edx
c000cdea:	53                   	push   ebx
c000cdeb:	56                   	push   esi
c000cdec:	e8 83 17 00 00       	call   c000e574 <VCache::VCache(PhysicalDisk*)>
c000cdf1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cdf7:	83 c4 14             	add    esp,0x14
c000cdfa:	5b                   	pop    ebx
c000cdfb:	5e                   	pop    esi
c000cdfc:	c3                   	ret    
c000cdfd:	90                   	nop

c000cdfe <PhysicalDisk::~PhysicalDisk()>:
c000cdfe:	83 ec 0c             	sub    esp,0xc
c000ce01:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000ce06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0a:	89 10                	mov    DWORD PTR [eax],edx
c000ce0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce10:	83 ec 0c             	sub    esp,0xc
c000ce13:	50                   	push   eax
c000ce14:	e8 89 fa ff ff       	call   c000c8a2 <Device::~Device()>
c000ce19:	83 c4 10             	add    esp,0x10
c000ce1c:	90                   	nop
c000ce1d:	83 c4 0c             	add    esp,0xc
c000ce20:	c3                   	ret    
c000ce21:	90                   	nop

c000ce22 <PhysicalDisk::~PhysicalDisk()>:
c000ce22:	83 ec 0c             	sub    esp,0xc
c000ce25:	83 ec 0c             	sub    esp,0xc
c000ce28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2c:	e8 cd ff ff ff       	call   c000cdfe <PhysicalDisk::~PhysicalDisk()>
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	83 ec 08             	sub    esp,0x8
c000ce37:	68 6c 01 00 00       	push   0x16c
c000ce3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce40:	e8 c7 d9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	83 c4 0c             	add    esp,0xc
c000ce4b:	c3                   	ret    

c000ce4c <int_handler>:
c000ce4c:	55                   	push   ebp
c000ce4d:	57                   	push   edi
c000ce4e:	56                   	push   esi
c000ce4f:	53                   	push   ebx
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce5a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce5e:	74 0b                	je     c000ce6b <int_handler+0x1f>
c000ce60:	fa                   	cli    
c000ce61:	f4                   	hlt    
c000ce62:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce69:	75 f5                	jne    c000ce60 <int_handler+0x14>
c000ce6b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce6e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce71:	83 f8 17             	cmp    eax,0x17
c000ce74:	76 40                	jbe    c000ceb6 <int_handler+0x6a>
c000ce76:	c1 e6 04             	shl    esi,0x4
c000ce79:	31 db                	xor    ebx,ebx
c000ce7b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce81:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce87:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce8b:	85 c0                	test   eax,eax
c000ce8d:	74 13                	je     c000cea2 <int_handler+0x56>
c000ce8f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce93:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce96:	74 2c                	je     c000cec4 <int_handler+0x78>
c000ce98:	83 ec 08             	sub    esp,0x8
c000ce9b:	52                   	push   edx
c000ce9c:	57                   	push   edi
c000ce9d:	ff d0                	call   eax
c000ce9f:	83 c4 10             	add    esp,0x10
c000cea2:	83 c3 01             	add    ebx,0x1
c000cea5:	83 fb 04             	cmp    ebx,0x4
c000cea8:	75 dd                	jne    c000ce87 <int_handler+0x3b>
c000ceaa:	83 c4 0c             	add    esp,0xc
c000cead:	31 c0                	xor    eax,eax
c000ceaf:	5b                   	pop    ebx
c000ceb0:	31 d2                	xor    edx,edx
c000ceb2:	5e                   	pop    esi
c000ceb3:	5f                   	pop    edi
c000ceb4:	5d                   	pop    ebp
c000ceb5:	c3                   	ret    
c000ceb6:	83 ec 0c             	sub    esp,0xc
c000ceb9:	50                   	push   eax
c000ceba:	e8 6b b4 00 00       	call   c001832a <HalEndOfInterrupt(int)>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	eb b2                	jmp    c000ce76 <int_handler+0x2a>
c000cec4:	83 ec 08             	sub    esp,0x8
c000cec7:	52                   	push   edx
c000cec8:	57                   	push   edi
c000cec9:	ff d0                	call   eax
c000cecb:	83 c4 10             	add    esp,0x10
c000cece:	83 c4 0c             	add    esp,0xc
c000ced1:	5b                   	pop    ebx
c000ced2:	5e                   	pop    esi
c000ced3:	5f                   	pop    edi
c000ced4:	5d                   	pop    ebp
c000ced5:	c3                   	ret    

c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ced6:	56                   	push   esi
c000ced7:	31 c0                	xor    eax,eax
c000ced9:	53                   	push   ebx
c000ceda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cede:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cee2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cee6:	89 ca                	mov    edx,ecx
c000cee8:	c1 e2 04             	shl    edx,0x4
c000ceeb:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cef3:	74 17                	je     c000cf0c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cef5:	83 c0 01             	add    eax,0x1
c000cef8:	83 f8 04             	cmp    eax,0x4
c000cefb:	75 ee                	jne    c000ceeb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cefd:	c7 44 24 0c a4 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ba4
c000cf05:	5b                   	pop    ebx
c000cf06:	5e                   	pop    esi
c000cf07:	e9 5b 46 00 00       	jmp    c0011567 <KePanic(char const*)>
c000cf0c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf0f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf16:	5b                   	pop    ebx
c000cf17:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf1e:	5e                   	pop    esi
c000cf1f:	c3                   	ret    

c000cf20 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf20:	55                   	push   ebp
c000cf21:	57                   	push   edi
c000cf22:	56                   	push   esi
c000cf23:	53                   	push   ebx
c000cf24:	83 ec 0c             	sub    esp,0xc
c000cf27:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf2d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf35:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf3c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf3f:	74 57                	je     c000cf98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf41:	84 c0                	test   al,al
c000cf43:	89 c7                	mov    edi,eax
c000cf45:	74 1d                	je     c000cf64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf47:	83 fe 0f             	cmp    esi,0xf
c000cf4a:	0f 8f d9 00 00 00    	jg     c000d029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf50:	0f b6 b6 c8 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc938]
c000cf57:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf5f:	d1 ef                	shr    edi,1
c000cf61:	83 e7 01             	and    edi,0x1
c000cf64:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf69:	83 ec 08             	sub    esp,0x8
c000cf6c:	31 db                	xor    ebx,ebx
c000cf6e:	50                   	push   eax
c000cf6f:	68 b1 1b 02 c0       	push   0xc0021bb1
c000cf74:	e8 91 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cf79:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf7e:	83 c4 10             	add    esp,0x10
c000cf81:	85 c0                	test   eax,eax
c000cf83:	7f 59                	jg     c000cfde <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cf85:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	68 c8 1b 02 c0       	push   0xc0021bc8
c000cf90:	e8 d2 45 00 00       	call   c0011567 <KePanic(char const*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 e8                	mov    eax,ebp
c000cf9a:	31 d2                	xor    edx,edx
c000cf9c:	c1 e0 04             	shl    eax,0x4
c000cf9f:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfa6:	85 c9                	test   ecx,ecx
c000cfa8:	0f 84 92 00 00 00    	je     c000d040 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cfae:	83 c2 01             	add    edx,0x1
c000cfb1:	83 fa 04             	cmp    edx,0x4
c000cfb4:	75 e9                	jne    c000cf9f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cfb6:	83 ec 0c             	sub    esp,0xc
c000cfb9:	68 1c 1c 02 c0       	push   0xc0021c1c
c000cfbe:	e8 a4 45 00 00       	call   c0011567 <KePanic(char const*)>
c000cfc3:	83 c4 10             	add    esp,0x10
c000cfc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfcb:	83 c4 0c             	add    esp,0xc
c000cfce:	5b                   	pop    ebx
c000cfcf:	5e                   	pop    esi
c000cfd0:	5f                   	pop    edi
c000cfd1:	5d                   	pop    ebp
c000cfd2:	c3                   	ret    
c000cfd3:	83 c3 01             	add    ebx,0x1
c000cfd6:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cfdc:	7e a7                	jle    c000cf85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cfde:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfe5:	83 ec 08             	sub    esp,0x8
c000cfe8:	56                   	push   esi
c000cfe9:	55                   	push   ebp
c000cfea:	e8 25 1b 01 00       	call   c001eb14 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cfef:	83 c4 10             	add    esp,0x10
c000cff2:	84 c0                	test   al,al
c000cff4:	74 dd                	je     c000cfd3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cff6:	89 f8                	mov    eax,edi
c000cff8:	83 ec 04             	sub    esp,0x4
c000cffb:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d002:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d005:	0f b6 f8             	movzx  edi,al
c000d008:	57                   	push   edi
c000d009:	89 e8                	mov    eax,ebp
c000d00b:	6a 00                	push   0x0
c000d00d:	0f b6 c0             	movzx  eax,al
c000d010:	50                   	push   eax
c000d011:	89 f0                	mov    eax,esi
c000d013:	6a 00                	push   0x0
c000d015:	0f b6 c0             	movzx  eax,al
c000d018:	6a 00                	push   0x0
c000d01a:	50                   	push   eax
c000d01b:	53                   	push   ebx
c000d01c:	e8 5f 1c 01 00       	call   c001ec80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d021:	83 c4 20             	add    esp,0x20
c000d024:	e9 6f ff ff ff       	jmp    c000cf98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d029:	83 ec 0c             	sub    esp,0xc
c000d02c:	31 ff                	xor    edi,edi
c000d02e:	68 e4 1b 02 c0       	push   0xc0021be4
c000d033:	e8 2f 45 00 00       	call   c0011567 <KePanic(char const*)>
c000d038:	83 c4 10             	add    esp,0x10
c000d03b:	e9 24 ff ff ff       	jmp    c000cf64 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d040:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d043:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d047:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d04e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d052:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d059:	83 c4 0c             	add    esp,0xc
c000d05c:	89 f0                	mov    eax,esi
c000d05e:	5b                   	pop    ebx
c000d05f:	5e                   	pop    esi
c000d060:	5f                   	pop    edi
c000d061:	5d                   	pop    ebp
c000d062:	c3                   	ret    

c000d063 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d063:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d067:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d06b:	c1 e0 04             	shl    eax,0x4
c000d06e:	8d 50 10             	lea    edx,[eax+0x10]
c000d071:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d077:	74 08                	je     c000d081 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d079:	83 c0 04             	add    eax,0x4
c000d07c:	39 d0                	cmp    eax,edx
c000d07e:	75 f1                	jne    c000d071 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d080:	c3                   	ret    
c000d081:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d08b:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d095:	eb e2                	jmp    c000d079 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d097 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d097:	56                   	push   esi
c000d098:	53                   	push   ebx
c000d099:	83 ec 04             	sub    esp,0x4
c000d09c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d0a9:	74 0e                	je     c000d0b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0ab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0b0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0b7:	75 34                	jne    c000d0ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d0b9:	8d 43 20             	lea    eax,[ebx+0x20]
c000d0bc:	c1 e0 04             	shl    eax,0x4
c000d0bf:	8d 50 10             	lea    edx,[eax+0x10]
c000d0c2:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d0c8:	74 0d                	je     c000d0d7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d0ca:	83 c0 04             	add    eax,0x4
c000d0cd:	39 d0                	cmp    eax,edx
c000d0cf:	75 f1                	jne    c000d0c2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d0d1:	83 c4 04             	add    esp,0x4
c000d0d4:	5b                   	pop    ebx
c000d0d5:	5e                   	pop    esi
c000d0d6:	c3                   	ret    
c000d0d7:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0e1:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0eb:	eb dd                	jmp    c000d0ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d0ed:	83 fb 0f             	cmp    ebx,0xf
c000d0f0:	7f 09                	jg     c000d0fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d0f2:	0f b6 9b c8 36 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc938]
c000d0f9:	eb be                	jmp    c000d0b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0fb:	83 ec 0c             	sub    esp,0xc
c000d0fe:	68 d5 1b 02 c0       	push   0xc0021bd5
c000d103:	e8 5f 44 00 00       	call   c0011567 <KePanic(char const*)>
c000d108:	83 c4 10             	add    esp,0x10
c000d10b:	eb ac                	jmp    c000d0b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d10d <setupINTS()>:
c000d10d:	31 c0                	xor    eax,eax
c000d10f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d119:	83 c0 10             	add    eax,0x10
c000d11c:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d126:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d130:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d13a:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d144:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d14e:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d158:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d162:	3d 00 10 00 00       	cmp    eax,0x1000
c000d167:	75 a6                	jne    c000d10f <setupINTS()+0x2>
c000d169:	c3                   	ret    

c000d16a <convertLegacyIRQNumber(int)>:
c000d16a:	83 ec 0c             	sub    esp,0xc
c000d16d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d177:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d17e:	74 0c                	je     c000d18c <convertLegacyIRQNumber(int)+0x22>
c000d180:	83 f8 0f             	cmp    eax,0xf
c000d183:	7f 0b                	jg     c000d190 <convertLegacyIRQNumber(int)+0x26>
c000d185:	0f b6 80 c8 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc938]
c000d18c:	83 c4 0c             	add    esp,0xc
c000d18f:	c3                   	ret    
c000d190:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d194:	83 ec 0c             	sub    esp,0xc
c000d197:	68 e4 1b 02 c0       	push   0xc0021be4
c000d19c:	e8 c6 43 00 00       	call   c0011567 <KePanic(char const*)>
c000d1a1:	83 c4 10             	add    esp,0x10
c000d1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a8:	83 c4 0c             	add    esp,0xc
c000d1ab:	c3                   	ret    

c000d1ac <startGUI(void*)>:
c000d1ac:	55                   	push   ebp
c000d1ad:	89 e5                	mov    ebp,esp
c000d1af:	53                   	push   ebx
c000d1b0:	83 ec 04             	sub    esp,0x4
c000d1b3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1b8:	83 e8 01             	sub    eax,0x1
c000d1bb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	75 01                	jne    c000d1ca <startGUI(void*)+0x1e>
c000d1c9:	fb                   	sti    
c000d1ca:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1d0:	83 ec 08             	sub    esp,0x8
c000d1d3:	6a 01                	push   0x1
c000d1d5:	68 41 1c 02 c0       	push   0xc0021c41
c000d1da:	e8 2d 84 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c000d1df:	83 c4 10             	add    esp,0x10
c000d1e2:	83 ec 08             	sub    esp,0x8
c000d1e5:	53                   	push   ebx
c000d1e6:	50                   	push   eax
c000d1e7:	e8 60 86 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c000d1ec:	83 c4 10             	add    esp,0x10
c000d1ef:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1f5:	83 ec 08             	sub    esp,0x8
c000d1f8:	6a 01                	push   0x1
c000d1fa:	68 5b 1c 02 c0       	push   0xc0021c5b
c000d1ff:	e8 08 84 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c000d204:	83 c4 10             	add    esp,0x10
c000d207:	83 ec 08             	sub    esp,0x8
c000d20a:	53                   	push   ebx
c000d20b:	50                   	push   eax
c000d20c:	e8 3b 86 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c000d211:	83 c4 10             	add    esp,0x10
c000d214:	90                   	nop
c000d215:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d218:	c9                   	leave  
c000d219:	c3                   	ret    

c000d21a <startGUIVESA(void*)>:
c000d21a:	55                   	push   ebp
c000d21b:	89 e5                	mov    ebp,esp
c000d21d:	53                   	push   ebx
c000d21e:	83 ec 04             	sub    esp,0x4
c000d221:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d226:	83 e8 01             	sub    eax,0x1
c000d229:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d22e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d233:	85 c0                	test   eax,eax
c000d235:	75 01                	jne    c000d238 <startGUIVESA(void*)+0x1e>
c000d237:	fb                   	sti    
c000d238:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d23e:	83 ec 08             	sub    esp,0x8
c000d241:	6a 01                	push   0x1
c000d243:	68 79 1c 02 c0       	push   0xc0021c79
c000d248:	e8 bf 83 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	83 ec 08             	sub    esp,0x8
c000d253:	53                   	push   ebx
c000d254:	50                   	push   eax
c000d255:	e8 f2 85 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c000d25a:	83 c4 10             	add    esp,0x10
c000d25d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d263:	83 ec 08             	sub    esp,0x8
c000d266:	6a 01                	push   0x1
c000d268:	68 5b 1c 02 c0       	push   0xc0021c5b
c000d26d:	e8 9a 83 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	83 ec 08             	sub    esp,0x8
c000d278:	53                   	push   ebx
c000d279:	50                   	push   eax
c000d27a:	e8 cd 85 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c000d27f:	83 c4 10             	add    esp,0x10
c000d282:	90                   	nop
c000d283:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d286:	c9                   	leave  
c000d287:	c3                   	ret    

c000d288 <sendKeyToTerminal(unsigned char)>:
c000d288:	55                   	push   ebp
c000d289:	89 e5                	mov    ebp,esp
c000d28b:	83 ec 28             	sub    esp,0x28
c000d28e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d291:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d294:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d299:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d29d:	83 ec 08             	sub    esp,0x8
c000d2a0:	52                   	push   edx
c000d2a1:	50                   	push   eax
c000d2a2:	e8 15 bb ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d2a7:	83 c4 10             	add    esp,0x10
c000d2aa:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2ae:	83 f8 0a             	cmp    eax,0xa
c000d2b1:	74 16                	je     c000d2c9 <sendKeyToTerminal(unsigned char)+0x41>
c000d2b3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2b7:	83 f8 03             	cmp    eax,0x3
c000d2ba:	74 0d                	je     c000d2c9 <sendKeyToTerminal(unsigned char)+0x41>
c000d2bc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2c0:	83 f8 1c             	cmp    eax,0x1c
c000d2c3:	0f 85 97 00 00 00    	jne    c000d360 <sendKeyToTerminal(unsigned char)+0xd8>
c000d2c9:	fa                   	cli    
c000d2ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2cf:	83 c0 01             	add    eax,0x1
c000d2d2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2d7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2dc:	83 c0 01             	add    eax,0x1
c000d2df:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2e4:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d2e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2ec:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d2f6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d2fa:	74 1f                	je     c000d31b <sendKeyToTerminal(unsigned char)+0x93>
c000d2fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d2ff:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d302:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d305:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d308:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d30b:	83 ec 0c             	sub    esp,0xc
c000d30e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d311:	e8 5a 92 00 00       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	eb db                	jmp    c000d2f6 <sendKeyToTerminal(unsigned char)+0x6e>
c000d31b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d320:	83 e8 01             	sub    eax,0x1
c000d323:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d328:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d32d:	85 c0                	test   eax,eax
c000d32f:	75 18                	jne    c000d349 <sendKeyToTerminal(unsigned char)+0xc1>
c000d331:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d336:	85 c0                	test   eax,eax
c000d338:	74 0f                	je     c000d349 <sendKeyToTerminal(unsigned char)+0xc1>
c000d33a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d344:	e8 2f 8d 00 00       	call   c0016078 <schedule()>
c000d349:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d34e:	83 e8 01             	sub    eax,0x1
c000d351:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d356:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d35b:	85 c0                	test   eax,eax
c000d35d:	75 01                	jne    c000d360 <sendKeyToTerminal(unsigned char)+0xd8>
c000d35f:	fb                   	sti    
c000d360:	90                   	nop
c000d361:	c9                   	leave  
c000d362:	c3                   	ret    

c000d363 <sendKeyboardToken(KeyboardToken)>:
c000d363:	55                   	push   ebp
c000d364:	89 e5                	mov    ebp,esp
c000d366:	83 ec 18             	sub    esp,0x18
c000d369:	e8 49 42 00 00       	call   c00115b7 <KeUserIOReceived()>
c000d36e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d374:	0f b7 c0             	movzx  eax,ax
c000d377:	83 f2 01             	xor    edx,0x1
c000d37a:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d380:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d385:	85 c0                	test   eax,eax
c000d387:	74 24                	je     c000d3ad <sendKeyboardToken(KeyboardToken)+0x4a>
c000d389:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d38f:	83 ec 04             	sub    esp,0x4
c000d392:	68 40 b4 02 c0       	push   0xc002b440
c000d397:	83 ec 08             	sub    esp,0x8
c000d39a:	89 e0                	mov    eax,esp
c000d39c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d39f:	89 08                	mov    DWORD PTR [eax],ecx
c000d3a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d3a4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d3a8:	ff d2                	call   edx
c000d3aa:	83 c4 10             	add    esp,0x10
c000d3ad:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3b1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3b4:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3b9:	0f b6 d2             	movzx  edx,dl
c000d3bc:	0f b6 c0             	movzx  eax,al
c000d3bf:	39 c2                	cmp    edx,eax
c000d3c1:	74 1c                	je     c000d3df <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3c3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3c6:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3cb:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3d0:	0f b6 c0             	movzx  eax,al
c000d3d3:	83 ec 0c             	sub    esp,0xc
c000d3d6:	50                   	push   eax
c000d3d7:	e8 3c b1 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3e2:	0f b6 c0             	movzx  eax,al
c000d3e5:	85 c0                	test   eax,eax
c000d3e7:	0f 84 da 00 00 00    	je     c000d4c7 <sendKeyboardToken(KeyboardToken)+0x164>
c000d3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f0:	0f b7 c0             	movzx  eax,ax
c000d3f3:	3d 18 03 00 00       	cmp    eax,0x318
c000d3f8:	75 06                	jne    c000d400 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d3fa:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d403:	0f b7 c0             	movzx  eax,ax
c000d406:	3d 19 03 00 00       	cmp    eax,0x319
c000d40b:	75 06                	jne    c000d413 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d40d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d416:	0f b7 c0             	movzx  eax,ax
c000d419:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d41e:	75 06                	jne    c000d426 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d420:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d429:	0f b7 c0             	movzx  eax,ax
c000d42c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d431:	75 06                	jne    c000d439 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d433:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43c:	0f b7 c0             	movzx  eax,ax
c000d43f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d444:	75 06                	jne    c000d44c <sendKeyboardToken(KeyboardToken)+0xe9>
c000d446:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44f:	0f b7 c0             	movzx  eax,ax
c000d452:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d457:	75 06                	jne    c000d45f <sendKeyboardToken(KeyboardToken)+0xfc>
c000d459:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d462:	0f b7 c0             	movzx  eax,ax
c000d465:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d46a:	75 06                	jne    c000d472 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d46c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d475:	0f b7 c0             	movzx  eax,ax
c000d478:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d47d:	75 06                	jne    c000d485 <sendKeyboardToken(KeyboardToken)+0x122>
c000d47f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d488:	0f b7 c0             	movzx  eax,ax
c000d48b:	3d 20 03 00 00       	cmp    eax,0x320
c000d490:	75 06                	jne    c000d498 <sendKeyboardToken(KeyboardToken)+0x135>
c000d492:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49b:	0f b7 c0             	movzx  eax,ax
c000d49e:	3d 21 03 00 00       	cmp    eax,0x321
c000d4a3:	75 06                	jne    c000d4ab <sendKeyboardToken(KeyboardToken)+0x148>
c000d4a5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ae:	0f b7 c0             	movzx  eax,ax
c000d4b1:	3d 22 03 00 00       	cmp    eax,0x322
c000d4b6:	0f 85 f1 00 00 00    	jne    c000d5ad <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4bc:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4c2:	e9 e6 00 00 00       	jmp    c000d5ad <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ca:	0f b7 c0             	movzx  eax,ax
c000d4cd:	3d 18 03 00 00       	cmp    eax,0x318
c000d4d2:	75 0a                	jne    c000d4de <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4d4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e1:	0f b7 c0             	movzx  eax,ax
c000d4e4:	3d 19 03 00 00       	cmp    eax,0x319
c000d4e9:	75 0a                	jne    c000d4f5 <sendKeyboardToken(KeyboardToken)+0x192>
c000d4eb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f8:	0f b7 c0             	movzx  eax,ax
c000d4fb:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d500:	75 0a                	jne    c000d50c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d502:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d508:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50f:	0f b7 c0             	movzx  eax,ax
c000d512:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d517:	75 0a                	jne    c000d523 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d519:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d51f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d526:	0f b7 c0             	movzx  eax,ax
c000d529:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d52e:	75 0a                	jne    c000d53a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d530:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d536:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53d:	0f b7 c0             	movzx  eax,ax
c000d540:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d545:	75 0a                	jne    c000d551 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d547:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d54d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d554:	0f b7 c0             	movzx  eax,ax
c000d557:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d55c:	75 0a                	jne    c000d568 <sendKeyboardToken(KeyboardToken)+0x205>
c000d55e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d564:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56b:	0f b7 c0             	movzx  eax,ax
c000d56e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d573:	75 0a                	jne    c000d57f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d575:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d57b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d582:	0f b7 c0             	movzx  eax,ax
c000d585:	3d 20 03 00 00       	cmp    eax,0x320
c000d58a:	75 0a                	jne    c000d596 <sendKeyboardToken(KeyboardToken)+0x233>
c000d58c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d592:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d599:	0f b7 c0             	movzx  eax,ax
c000d59c:	3d 21 03 00 00       	cmp    eax,0x321
c000d5a1:	75 0a                	jne    c000d5ad <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5a3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b0:	0f b7 c0             	movzx  eax,ax
c000d5b3:	3d 00 02 00 00       	cmp    eax,0x200
c000d5b8:	75 2f                	jne    c000d5e9 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5ba:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5bf:	83 f0 01             	xor    eax,0x1
c000d5c2:	0f b6 c0             	movzx  eax,al
c000d5c5:	85 c0                	test   eax,eax
c000d5c7:	74 20                	je     c000d5e9 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5c9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5ce:	6a 01                	push   0x1
c000d5d0:	6a 00                	push   0x0
c000d5d2:	68 ac d1 00 c0       	push   0xc000d1ac
c000d5d7:	50                   	push   eax
c000d5d8:	e8 4f 88 00 00       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c000d5dd:	83 c4 10             	add    esp,0x10
c000d5e0:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5e7:	eb 3a                	jmp    c000d623 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ec:	0f b7 c0             	movzx  eax,ax
c000d5ef:	3d 01 02 00 00       	cmp    eax,0x201
c000d5f4:	75 2d                	jne    c000d623 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5f6:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5fb:	83 f0 01             	xor    eax,0x1
c000d5fe:	0f b6 c0             	movzx  eax,al
c000d601:	85 c0                	test   eax,eax
c000d603:	74 1e                	je     c000d623 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d605:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d60a:	6a 01                	push   0x1
c000d60c:	6a 00                	push   0x0
c000d60e:	68 1a d2 00 c0       	push   0xc000d21a
c000d613:	50                   	push   eax
c000d614:	e8 13 88 00 00       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c000d619:	83 c4 10             	add    esp,0x10
c000d61c:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d626:	0f b7 c0             	movzx  eax,ax
c000d629:	3d 25 03 00 00       	cmp    eax,0x325
c000d62e:	75 06                	jne    c000d636 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d630:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d639:	0f b7 c0             	movzx  eax,ax
c000d63c:	3d 24 03 00 00       	cmp    eax,0x324
c000d641:	75 06                	jne    c000d649 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d643:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d64c:	0f b7 c0             	movzx  eax,ax
c000d64f:	3d 23 03 00 00       	cmp    eax,0x323
c000d654:	75 06                	jne    c000d65c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d656:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65f:	0f b7 c0             	movzx  eax,ax
c000d662:	3d 26 03 00 00       	cmp    eax,0x326
c000d667:	75 06                	jne    c000d66f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d669:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d672:	0f b7 c0             	movzx  eax,ax
c000d675:	3d 27 03 00 00       	cmp    eax,0x327
c000d67a:	75 06                	jne    c000d682 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d67c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d685:	0f b7 c0             	movzx  eax,ax
c000d688:	3d 22 03 00 00       	cmp    eax,0x322
c000d68d:	75 06                	jne    c000d695 <sendKeyboardToken(KeyboardToken)+0x332>
c000d68f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d695:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d699:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d69c:	83 f0 01             	xor    eax,0x1
c000d69f:	0f b6 c0             	movzx  eax,al
c000d6a2:	85 c0                	test   eax,eax
c000d6a4:	74 7c                	je     c000d722 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6a6:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6ab:	0f b6 c0             	movzx  eax,al
c000d6ae:	85 c0                	test   eax,eax
c000d6b0:	74 43                	je     c000d6f5 <sendKeyboardToken(KeyboardToken)+0x392>
c000d6b2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6b6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6ba:	85 c0                	test   eax,eax
c000d6bc:	74 2b                	je     c000d6e9 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6be:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6c4:	89 d0                	mov    eax,edx
c000d6c6:	c1 e0 02             	shl    eax,0x2
c000d6c9:	01 d0                	add    eax,edx
c000d6cb:	d1 e0                	shl    eax,1
c000d6cd:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d5:	0f b7 c0             	movzx  eax,ax
c000d6d8:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6db:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6e0:	01 d0                	add    eax,edx
c000d6e2:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6e7:	eb 71                	jmp    c000d75a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6e9:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6f3:	eb 65                	jmp    c000d75a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6f5:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6fa:	85 c0                	test   eax,eax
c000d6fc:	74 18                	je     c000d716 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d6fe:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d703:	0f b6 c0             	movzx  eax,al
c000d706:	83 ec 0c             	sub    esp,0xc
c000d709:	50                   	push   eax
c000d70a:	e8 79 fb ff ff       	call   c000d288 <sendKeyToTerminal(unsigned char)>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d716:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d720:	eb 38                	jmp    c000d75a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d725:	0f b7 c0             	movzx  eax,ax
c000d728:	3d 01 01 00 00       	cmp    eax,0x101
c000d72d:	75 2b                	jne    c000d75a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d72f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d734:	85 c0                	test   eax,eax
c000d736:	74 18                	je     c000d750 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d738:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d73d:	0f b6 c0             	movzx  eax,al
c000d740:	83 ec 0c             	sub    esp,0xc
c000d743:	50                   	push   eax
c000d744:	e8 3f fb ff ff       	call   c000d288 <sendKeyToTerminal(unsigned char)>
c000d749:	83 c4 10             	add    esp,0x10
c000d74c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d750:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d75a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d75d:	83 f0 01             	xor    eax,0x1
c000d760:	0f b6 c0             	movzx  eax,al
c000d763:	85 c0                	test   eax,eax
c000d765:	74 5a                	je     c000d7c1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d767:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d76a:	83 f0 01             	xor    eax,0x1
c000d76d:	0f b6 c0             	movzx  eax,al
c000d770:	85 c0                	test   eax,eax
c000d772:	74 4d                	je     c000d7c1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d774:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d779:	83 f0 01             	xor    eax,0x1
c000d77c:	0f b6 c0             	movzx  eax,al
c000d77f:	85 c0                	test   eax,eax
c000d781:	74 3e                	je     c000d7c1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d786:	0f b7 c0             	movzx  eax,ax
c000d789:	83 f8 1f             	cmp    eax,0x1f
c000d78c:	76 0b                	jbe    c000d799 <sendKeyboardToken(KeyboardToken)+0x436>
c000d78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d791:	0f b7 c0             	movzx  eax,ax
c000d794:	83 f8 7e             	cmp    eax,0x7e
c000d797:	76 16                	jbe    c000d7af <sendKeyboardToken(KeyboardToken)+0x44c>
c000d799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79c:	0f b7 c0             	movzx  eax,ax
c000d79f:	83 f8 0a             	cmp    eax,0xa
c000d7a2:	74 0b                	je     c000d7af <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a7:	0f b7 c0             	movzx  eax,ax
c000d7aa:	83 f8 08             	cmp    eax,0x8
c000d7ad:	75 12                	jne    c000d7c1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b2:	0f b6 c0             	movzx  eax,al
c000d7b5:	83 ec 0c             	sub    esp,0xc
c000d7b8:	50                   	push   eax
c000d7b9:	e8 ca fa ff ff       	call   c000d288 <sendKeyToTerminal(unsigned char)>
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7c4:	83 f0 01             	xor    eax,0x1
c000d7c7:	0f b6 c0             	movzx  eax,al
c000d7ca:	85 c0                	test   eax,eax
c000d7cc:	74 5d                	je     c000d82b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ce:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7d1:	83 f0 01             	xor    eax,0x1
c000d7d4:	0f b6 c0             	movzx  eax,al
c000d7d7:	85 c0                	test   eax,eax
c000d7d9:	74 50                	je     c000d82b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7db:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7e0:	0f b6 c0             	movzx  eax,al
c000d7e3:	85 c0                	test   eax,eax
c000d7e5:	74 44                	je     c000d82b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ea:	0f b7 c0             	movzx  eax,ax
c000d7ed:	83 f8 3f             	cmp    eax,0x3f
c000d7f0:	76 39                	jbe    c000d82b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f5:	0f b7 c0             	movzx  eax,ax
c000d7f8:	83 f8 7f             	cmp    eax,0x7f
c000d7fb:	77 2e                	ja     c000d82b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d800:	88 c2                	mov    dl,al
c000d802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d805:	0f b7 c0             	movzx  eax,ax
c000d808:	83 f8 5f             	cmp    eax,0x5f
c000d80b:	76 04                	jbe    c000d811 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d80d:	b0 20                	mov    al,0x20
c000d80f:	eb 02                	jmp    c000d813 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d811:	b0 00                	mov    al,0x0
c000d813:	89 d1                	mov    ecx,edx
c000d815:	29 c1                	sub    ecx,eax
c000d817:	89 c8                	mov    eax,ecx
c000d819:	83 e8 40             	sub    eax,0x40
c000d81c:	0f b6 c0             	movzx  eax,al
c000d81f:	83 ec 0c             	sub    esp,0xc
c000d822:	50                   	push   eax
c000d823:	e8 60 fa ff ff       	call   c000d288 <sendKeyToTerminal(unsigned char)>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82e:	0f b7 c0             	movzx  eax,ax
c000d831:	3d 00 03 00 00       	cmp    eax,0x300
c000d836:	75 12                	jne    c000d84a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d838:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d83b:	83 f0 01             	xor    eax,0x1
c000d83e:	0f b6 c0             	movzx  eax,al
c000d841:	85 c0                	test   eax,eax
c000d843:	74 05                	je     c000d84a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d845:	e8 cf ac ff ff       	call   c0008519 <doTerminalCycle()>
c000d84a:	90                   	nop
c000d84b:	c9                   	leave  
c000d84c:	c3                   	ret    

c000d84d <clearInternalKeybuffer(VgaText*)>:
c000d84d:	55                   	push   ebp
c000d84e:	89 e5                	mov    ebp,esp
c000d850:	83 ec 08             	sub    esp,0x8
c000d853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d856:	05 02 01 00 00       	add    eax,0x102
c000d85b:	83 ec 0c             	sub    esp,0xc
c000d85e:	50                   	push   eax
c000d85f:	e8 1c 2d ff ff       	call   c0000580 <strlen>
c000d864:	83 c4 10             	add    esp,0x10
c000d867:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d86a:	81 c2 02 01 00 00    	add    edx,0x102
c000d870:	83 ec 04             	sub    esp,0x4
c000d873:	50                   	push   eax
c000d874:	6a 00                	push   0x0
c000d876:	52                   	push   edx
c000d877:	e8 74 2c ff ff       	call   c00004f0 <memset>
c000d87c:	83 c4 10             	add    esp,0x10
c000d87f:	90                   	nop
c000d880:	c9                   	leave  
c000d881:	c3                   	ret    

c000d882 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d882:	55                   	push   ebp
c000d883:	89 e5                	mov    ebp,esp
c000d885:	83 ec 18             	sub    esp,0x18
c000d888:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d88d:	85 c0                	test   eax,eax
c000d88f:	74 2a                	je     c000d8bb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d891:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d897:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d89d:	83 ec 04             	sub    esp,0x4
c000d8a0:	68 40 b4 02 c0       	push   0xc002b440
c000d8a5:	83 ec 08             	sub    esp,0x8
c000d8a8:	89 e0                	mov    eax,esp
c000d8aa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d8ad:	89 08                	mov    DWORD PTR [eax],ecx
c000d8af:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d8b2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d8b6:	ff d2                	call   edx
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	fb                   	sti    
c000d8bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8c3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8c7:	0f 84 0d 01 00 00    	je     c000d9da <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8d0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8d6:	0f be c0             	movsx  eax,al
c000d8d9:	85 c0                	test   eax,eax
c000d8db:	75 2c                	jne    c000d909 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8dd:	fa                   	cli    
c000d8de:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8e3:	83 c0 01             	add    eax,0x1
c000d8e6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8eb:	e8 88 87 00 00       	call   c0016078 <schedule()>
c000d8f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8f5:	83 e8 01             	sub    eax,0x1
c000d8f8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8fd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d902:	85 c0                	test   eax,eax
c000d904:	75 c7                	jne    c000d8cd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d906:	fb                   	sti    
c000d907:	eb c4                	jmp    c000d8cd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d909:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d90c:	8d 50 01             	lea    edx,[eax+0x1]
c000d90f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d912:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d915:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d91b:	88 10                	mov    BYTE PTR [eax],dl
c000d91d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d920:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d926:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d929:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d92d:	83 f8 03             	cmp    eax,0x3
c000d930:	75 1e                	jne    c000d950 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d932:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d937:	8b 00                	mov    eax,DWORD PTR [eax]
c000d939:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d93c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d942:	83 ec 08             	sub    esp,0x8
c000d945:	6a 02                	push   0x2
c000d947:	50                   	push   eax
c000d948:	e8 b6 40 00 00       	call   c0011a03 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d954:	83 f8 1c             	cmp    eax,0x1c
c000d957:	75 1e                	jne    c000d977 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d959:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d95e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d960:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d963:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d969:	83 ec 08             	sub    esp,0x8
c000d96c:	6a 09                	push   0x9
c000d96e:	50                   	push   eax
c000d96f:	e8 8f 40 00 00       	call   c0011a03 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d974:	83 c4 10             	add    esp,0x10
c000d977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d97a:	05 02 01 00 00       	add    eax,0x102
c000d97f:	83 ec 0c             	sub    esp,0xc
c000d982:	50                   	push   eax
c000d983:	e8 f8 2b ff ff       	call   c0000580 <strlen>
c000d988:	83 c4 10             	add    esp,0x10
c000d98b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d98e:	81 c2 02 01 00 00    	add    edx,0x102
c000d994:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d997:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d99a:	81 c2 02 01 00 00    	add    edx,0x102
c000d9a0:	83 ec 04             	sub    esp,0x4
c000d9a3:	50                   	push   eax
c000d9a4:	51                   	push   ecx
c000d9a5:	52                   	push   edx
c000d9a6:	e8 25 2a ff ff       	call   c00003d0 <memmove>
c000d9ab:	83 c4 10             	add    esp,0x10
c000d9ae:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9b2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9b6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9ba:	83 f8 0a             	cmp    eax,0xa
c000d9bd:	74 16                	je     c000d9d5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9bf:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9c3:	83 f8 03             	cmp    eax,0x3
c000d9c6:	74 0d                	je     c000d9d5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9c8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9cc:	83 f8 1c             	cmp    eax,0x1c
c000d9cf:	0f 85 ee fe ff ff    	jne    c000d8c3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9d8:	eb 03                	jmp    c000d9dd <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9dd:	c9                   	leave  
c000d9de:	c3                   	ret    
c000d9df:	90                   	nop

c000d9e0 <Keyboard::Keyboard(char const*)>:
c000d9e0:	83 ec 0c             	sub    esp,0xc
c000d9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e7:	83 ec 08             	sub    esp,0x8
c000d9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ee:	50                   	push   eax
c000d9ef:	e8 44 f1 ff ff       	call   c000cb38 <Device::Device(char const*)>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	ba 9c 1c 02 c0       	mov    edx,0xc0021c9c
c000d9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da00:	89 10                	mov    DWORD PTR [eax],edx
c000da02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da06:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da10:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da17:	90                   	nop
c000da18:	83 c4 0c             	add    esp,0xc
c000da1b:	c3                   	ret    

c000da1c <Keyboard::~Keyboard()>:
c000da1c:	83 ec 0c             	sub    esp,0xc
c000da1f:	ba 9c 1c 02 c0       	mov    edx,0xc0021c9c
c000da24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da28:	89 10                	mov    DWORD PTR [eax],edx
c000da2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	50                   	push   eax
c000da32:	e8 6b ee ff ff       	call   c000c8a2 <Device::~Device()>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	90                   	nop
c000da3b:	83 c4 0c             	add    esp,0xc
c000da3e:	c3                   	ret    
c000da3f:	90                   	nop

c000da40 <Keyboard::~Keyboard()>:
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	83 ec 0c             	sub    esp,0xc
c000da46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4a:	e8 cd ff ff ff       	call   c000da1c <Keyboard::~Keyboard()>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	83 ec 08             	sub    esp,0x8
c000da55:	68 5c 01 00 00       	push   0x15c
c000da5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5e:	e8 a9 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	83 c4 0c             	add    esp,0xc
c000da69:	c3                   	ret    

c000da6a <LogicalDisk::close(int, int, void*)>:
c000da6a:	83 c8 ff             	or     eax,0xffffffff
c000da6d:	c3                   	ret    

c000da6e <LogicalDisk::~LogicalDisk()>:
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	ba 14 1d 02 c0       	mov    edx,0xc0021d14
c000da76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7a:	89 10                	mov    DWORD PTR [eax],edx
c000da7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	50                   	push   eax
c000da84:	e8 19 ee ff ff       	call   c000c8a2 <Device::~Device()>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	90                   	nop
c000da8d:	83 c4 0c             	add    esp,0xc
c000da90:	c3                   	ret    
c000da91:	90                   	nop

c000da92 <LogicalDisk::~LogicalDisk()>:
c000da92:	83 ec 0c             	sub    esp,0xc
c000da95:	83 ec 0c             	sub    esp,0xc
c000da98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da9c:	e8 cd ff ff ff       	call   c000da6e <LogicalDisk::~LogicalDisk()>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	83 ec 08             	sub    esp,0x8
c000daa7:	68 78 01 00 00       	push   0x178
c000daac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab0:	e8 57 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dab5:	83 c4 10             	add    esp,0x10
c000dab8:	83 c4 0c             	add    esp,0xc
c000dabb:	c3                   	ret    

c000dabc <LogicalDisk::open(int, int, void*)>:
c000dabc:	83 ec 18             	sub    esp,0x18
c000dabf:	68 c8 1c 02 c0       	push   0xc0021cc8
c000dac4:	e8 9e 3a 00 00       	call   c0011567 <KePanic(char const*)>
c000dac9:	83 c8 ff             	or     eax,0xffffffff
c000dacc:	83 c4 1c             	add    esp,0x1c
c000dacf:	c3                   	ret    

c000dad0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000dad0:	53                   	push   ebx
c000dad1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dad9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dadd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dae3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000dae9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000daef:	77 10                	ja     c000db01 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000daf1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000daf7:	89 d3                	mov    ebx,edx
c000daf9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000daff:	72 05                	jb     c000db06 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db01:	83 c8 ff             	or     eax,0xffffffff
c000db04:	89 c2                	mov    edx,eax
c000db06:	5b                   	pop    ebx
c000db07:	c3                   	ret    

c000db08 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db08:	56                   	push   esi
c000db09:	83 c8 ff             	or     eax,0xffffffff
c000db0c:	53                   	push   ebx
c000db0d:	89 c2                	mov    edx,eax
c000db0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db13:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db1b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db21:	77 27                	ja     c000db4a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db23:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db29:	89 d8                	mov    eax,ebx
c000db2b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db36:	89 c2                	mov    edx,eax
c000db38:	73 10                	jae    c000db4a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db3a:	89 c8                	mov    eax,ecx
c000db3c:	89 da                	mov    edx,ebx
c000db3e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db44:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db4a:	5b                   	pop    ebx
c000db4b:	5e                   	pop    esi
c000db4c:	c3                   	ret    
c000db4d:	90                   	nop

c000db4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db4e:	83 ec 1c             	sub    esp,0x1c
c000db51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db65:	89 04 24             	mov    DWORD PTR [esp],eax
c000db68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db74:	83 ec 08             	sub    esp,0x8
c000db77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db7b:	50                   	push   eax
c000db7c:	e8 b7 ef ff ff       	call   c000cb38 <Device::Device(char const*)>
c000db81:	83 c4 10             	add    esp,0x10
c000db84:	ba 14 1d 02 c0       	mov    edx,0xc0021d14
c000db89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8d:	89 10                	mov    DWORD PTR [eax],edx
c000db8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db93:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbbe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbca:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbd0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbd6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbda:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbe1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dbe7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dbed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dbf5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dbfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbff:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc09:	90                   	nop
c000dc0a:	83 c4 1c             	add    esp,0x1c
c000dc0d:	c3                   	ret    

c000dc0e <LogicalDisk::assignDriveLetter()>:
c000dc0e:	55                   	push   ebp
c000dc0f:	57                   	push   edi
c000dc10:	56                   	push   esi
c000dc11:	53                   	push   ebx
c000dc12:	83 ec 14             	sub    esp,0x14
c000dc15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc19:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc1f:	b0 41                	mov    al,0x41
c000dc21:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc27:	84 d2                	test   dl,dl
c000dc29:	75 02                	jne    c000dc2d <LogicalDisk::assignDriveLetter()+0x1f>
c000dc2b:	b0 43                	mov    al,0x43
c000dc2d:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc33:	0f b6 ca             	movzx  ecx,dl
c000dc36:	0f be e8             	movsx  ebp,al
c000dc39:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc41:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc47:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc4b:	3c 43                	cmp    al,0x43
c000dc4d:	75 10                	jne    c000dc5f <LogicalDisk::assignDriveLetter()+0x51>
c000dc4f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc56:	75 5a                	jne    c000dcb2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc5d:	75 53                	jne    c000dcb2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc5f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc62:	ba 01 00 00 00       	mov    edx,0x1
c000dc67:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc6a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc6d:	d3 e2                	shl    edx,cl
c000dc6f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc73:	89 d7                	mov    edi,edx
c000dc75:	89 d6                	mov    esi,edx
c000dc77:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc7b:	c1 ff 1f             	sar    edi,0x1f
c000dc7e:	21 f9                	and    ecx,edi
c000dc80:	09 d1                	or     ecx,edx
c000dc82:	75 2e                	jne    c000dcb2 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc88:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc8c:	09 f2                	or     edx,esi
c000dc8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc91:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc9b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dca1:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dca8:	09 fa                	or     edx,edi
c000dcaa:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcb0:	eb 0d                	jmp    c000dcbf <LogicalDisk::assignDriveLetter()+0xb1>
c000dcb2:	8d 50 01             	lea    edx,[eax+0x1]
c000dcb5:	45                   	inc    ebp
c000dcb6:	80 fa 5b             	cmp    dl,0x5b
c000dcb9:	88 d0                	mov    al,dl
c000dcbb:	75 8e                	jne    c000dc4b <LogicalDisk::assignDriveLetter()+0x3d>
c000dcbd:	31 c0                	xor    eax,eax
c000dcbf:	83 c4 14             	add    esp,0x14
c000dcc2:	5b                   	pop    ebx
c000dcc3:	5e                   	pop    esi
c000dcc4:	5f                   	pop    edi
c000dcc5:	5d                   	pop    ebp
c000dcc6:	c3                   	ret    
c000dcc7:	90                   	nop

c000dcc8 <LogicalDisk::mount()>:
c000dcc8:	56                   	push   esi
c000dcc9:	53                   	push   ebx
c000dcca:	53                   	push   ebx
c000dccb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dccf:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcd5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcdf:	85 db                	test   ebx,ebx
c000dce1:	74 27                	je     c000dd0a <LogicalDisk::mount()+0x42>
c000dce3:	51                   	push   ecx
c000dce4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dceb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dced:	83 e8 41             	sub    eax,0x41
c000dcf0:	50                   	push   eax
c000dcf1:	56                   	push   esi
c000dcf2:	53                   	push   ebx
c000dcf3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	84 c0                	test   al,al
c000dcfb:	74 08                	je     c000dd05 <LogicalDisk::mount()+0x3d>
c000dcfd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd03:	eb 07                	jmp    c000dd0c <LogicalDisk::mount()+0x44>
c000dd05:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd08:	eb d5                	jmp    c000dcdf <LogicalDisk::mount()+0x17>
c000dd0a:	31 c0                	xor    eax,eax
c000dd0c:	5a                   	pop    edx
c000dd0d:	5b                   	pop    ebx
c000dd0e:	5e                   	pop    esi
c000dd0f:	c3                   	ret    

c000dd10 <LogicalDisk::unmount()>:
c000dd10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd14:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd1e:	c3                   	ret    
c000dd1f:	90                   	nop

c000dd20 <LogicalDisk::eject()>:
c000dd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd24:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd2a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd30:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd33:	90                   	nop

c000dd34 <LogicalDisk::unassignDriveLetter()>:
c000dd34:	57                   	push   edi
c000dd35:	56                   	push   esi
c000dd36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd3a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd41:	85 c9                	test   ecx,ecx
c000dd43:	75 0f                	jne    c000dd54 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd45:	c7 44 24 0c ec 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cec
c000dd4d:	5e                   	pop    esi
c000dd4e:	5f                   	pop    edi
c000dd4f:	e9 13 38 00 00       	jmp    c0011567 <KePanic(char const*)>
c000dd54:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd5b:	83 e9 41             	sub    ecx,0x41
c000dd5e:	b8 01 00 00 00       	mov    eax,0x1
c000dd63:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd6e:	d3 e0                	shl    eax,cl
c000dd70:	89 c7                	mov    edi,eax
c000dd72:	f7 d0                	not    eax
c000dd74:	c1 ff 1f             	sar    edi,0x1f
c000dd77:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd7d:	89 fe                	mov    esi,edi
c000dd7f:	f7 d6                	not    esi
c000dd81:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd87:	5e                   	pop    esi
c000dd88:	5f                   	pop    edi
c000dd89:	c3                   	ret    

c000dd8a <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd8a:	57                   	push   edi
c000dd8b:	56                   	push   esi
c000dd8c:	53                   	push   ebx
c000dd8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd95:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd9d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dda3:	77 41                	ja     c000dde6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dda5:	99                   	cdq    
c000dda6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddac:	01 c8                	add    eax,ecx
c000ddae:	11 da                	adc    edx,ebx
c000ddb0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddb6:	19 d7                	sbb    edi,edx
c000ddb8:	72 33                	jb     c000dded <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddba:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddc0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddca:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddce:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddd4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddde:	5b                   	pop    ebx
c000dddf:	5e                   	pop    esi
c000dde0:	5f                   	pop    edi
c000dde1:	e9 d4 0a 00 00       	jmp    c000e8ba <VCache::read(unsigned long long, int, void*)>
c000dde6:	b8 05 00 00 00       	mov    eax,0x5
c000ddeb:	eb 05                	jmp    c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dded:	b8 07 00 00 00       	mov    eax,0x7
c000ddf2:	5b                   	pop    ebx
c000ddf3:	5e                   	pop    esi
c000ddf4:	5f                   	pop    edi
c000ddf5:	c3                   	ret    

c000ddf6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ddf6:	57                   	push   edi
c000ddf7:	56                   	push   esi
c000ddf8:	53                   	push   ebx
c000ddf9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de09:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de0f:	77 41                	ja     c000de52 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de11:	99                   	cdq    
c000de12:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de18:	01 c8                	add    eax,ecx
c000de1a:	11 da                	adc    edx,ebx
c000de1c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de22:	19 d7                	sbb    edi,edx
c000de24:	72 33                	jb     c000de59 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de26:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de2c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de32:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de36:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de3a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de40:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de4a:	5b                   	pop    ebx
c000de4b:	5e                   	pop    esi
c000de4c:	5f                   	pop    edi
c000de4d:	e9 6e 09 00 00       	jmp    c000e7c0 <VCache::write(unsigned long long, int, void*)>
c000de52:	b8 05 00 00 00       	mov    eax,0x5
c000de57:	eb 05                	jmp    c000de5e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de59:	b8 07 00 00 00       	mov    eax,0x7
c000de5e:	5b                   	pop    ebx
c000de5f:	5e                   	pop    esi
c000de60:	5f                   	pop    edi
c000de61:	c3                   	ret    
c000de62:	66 90                	xchg   ax,ax

c000de64 <Mouse::Mouse(char const*)>:
c000de64:	83 ec 0c             	sub    esp,0xc
c000de67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6b:	83 ec 08             	sub    esp,0x8
c000de6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de72:	50                   	push   eax
c000de73:	e8 c0 ec ff ff       	call   c000cb38 <Device::Device(char const*)>
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	ba 40 1d 02 c0       	mov    edx,0xc0021d40
c000de80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de84:	89 10                	mov    DWORD PTR [eax],edx
c000de86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de8a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de94:	90                   	nop
c000de95:	83 c4 0c             	add    esp,0xc
c000de98:	c3                   	ret    
c000de99:	90                   	nop
c000de9a:	66 90                	xchg   ax,ax

c000de9c <Mouse::~Mouse()>:
c000de9c:	83 ec 0c             	sub    esp,0xc
c000de9f:	ba 40 1d 02 c0       	mov    edx,0xc0021d40
c000dea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea8:	89 10                	mov    DWORD PTR [eax],edx
c000deaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deae:	83 ec 0c             	sub    esp,0xc
c000deb1:	50                   	push   eax
c000deb2:	e8 eb e9 ff ff       	call   c000c8a2 <Device::~Device()>
c000deb7:	83 c4 10             	add    esp,0x10
c000deba:	90                   	nop
c000debb:	83 c4 0c             	add    esp,0xc
c000debe:	c3                   	ret    
c000debf:	90                   	nop

c000dec0 <Mouse::~Mouse()>:
c000dec0:	83 ec 0c             	sub    esp,0xc
c000dec3:	83 ec 0c             	sub    esp,0xc
c000dec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deca:	e8 cd ff ff ff       	call   c000de9c <Mouse::~Mouse()>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	83 ec 08             	sub    esp,0x8
c000ded5:	68 58 01 00 00       	push   0x158
c000deda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dede:	e8 29 c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dee3:	83 c4 10             	add    esp,0x10
c000dee6:	83 c4 0c             	add    esp,0xc
c000dee9:	c3                   	ret    

c000deea <NIC::getMAC()>:
c000deea:	31 c0                	xor    eax,eax
c000deec:	31 d2                	xor    edx,edx
c000deee:	c3                   	ret    
c000deef:	90                   	nop

c000def0 <NIC::write(int, unsigned char*, int*)>:
c000def0:	b8 01 00 00 00       	mov    eax,0x1
c000def5:	c3                   	ret    

c000def6 <NIC::NIC(char const*)>:
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defd:	83 ec 08             	sub    esp,0x8
c000df00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df04:	50                   	push   eax
c000df05:	e8 2e ec ff ff       	call   c000cb38 <Device::Device(char const*)>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df16:	89 10                	mov    DWORD PTR [eax],edx
c000df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df26:	90                   	nop
c000df27:	83 c4 0c             	add    esp,0xc
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <NIC::~NIC()>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df38:	89 10                	mov    DWORD PTR [eax],edx
c000df3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3e:	83 ec 0c             	sub    esp,0xc
c000df41:	50                   	push   eax
c000df42:	e8 5b e9 ff ff       	call   c000c8a2 <Device::~Device()>
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	90                   	nop
c000df4b:	83 c4 0c             	add    esp,0xc
c000df4e:	c3                   	ret    
c000df4f:	90                   	nop

c000df50 <NIC::~NIC()>:
c000df50:	83 ec 0c             	sub    esp,0xc
c000df53:	83 ec 0c             	sub    esp,0xc
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	e8 cd ff ff ff       	call   c000df2c <NIC::~NIC()>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	83 ec 08             	sub    esp,0x8
c000df65:	68 58 01 00 00       	push   0x158
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 99 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 c4 0c             	add    esp,0xc
c000df79:	c3                   	ret    

c000df7a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df7a:	55                   	push   ebp
c000df7b:	57                   	push   edi
c000df7c:	56                   	push   esi
c000df7d:	53                   	push   ebx
c000df7e:	81 ec 28 01 00 00    	sub    esp,0x128
c000df84:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000df8b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000df92:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000df99:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dfa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfa8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfaf:	e8 80 ec ff ff       	call   c000cc34 <Device::getName()>
c000dfb4:	5a                   	pop    edx
c000dfb5:	59                   	pop    ecx
c000dfb6:	50                   	push   eax
c000dfb7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfbb:	55                   	push   ebp
c000dfbc:	e8 8f 26 ff ff       	call   c0000650 <strcpy>
c000dfc1:	5b                   	pop    ebx
c000dfc2:	58                   	pop    eax
c000dfc3:	68 98 1d 02 c0       	push   0xc0021d98
c000dfc8:	55                   	push   ebp
c000dfc9:	e8 a2 28 ff ff       	call   c0000870 <strcat>
c000dfce:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dfd5:	e8 f9 9a ff ff       	call   c0007ad3 <malloc>
c000dfda:	83 c4 0c             	add    esp,0xc
c000dfdd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfe1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfe5:	89 c3                	mov    ebx,eax
c000dfe7:	57                   	push   edi
c000dfe8:	56                   	push   esi
c000dfe9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dff0:	55                   	push   ebp
c000dff1:	50                   	push   eax
c000dff2:	e8 57 fb ff ff       	call   c000db4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dff7:	83 c4 14             	add    esp,0x14
c000dffa:	53                   	push   ebx
c000dffb:	e8 0e fc ff ff       	call   c000dc0e <LogicalDisk::assignDriveLetter()>
c000e000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e003:	e8 c0 fc ff ff       	call   c000dcc8 <LogicalDisk::mount()>
c000e008:	58                   	pop    eax
c000e009:	5a                   	pop    edx
c000e00a:	53                   	push   ebx
c000e00b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e012:	e8 89 e9 ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c000e017:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e01d:	5b                   	pop    ebx
c000e01e:	5e                   	pop    esi
c000e01f:	5f                   	pop    edi
c000e020:	5d                   	pop    ebp
c000e021:	c3                   	ret    

c000e022 <createPartitionsForDisk(PhysicalDisk*)>:
c000e022:	55                   	push   ebp
c000e023:	57                   	push   edi
c000e024:	56                   	push   esi
c000e025:	53                   	push   ebx
c000e026:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e02c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e033:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e039:	3d 00 02 00 00       	cmp    eax,0x200
c000e03e:	74 27                	je     c000e067 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e040:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e046:	83 ec 10             	sub    esp,0x10
c000e049:	99                   	cdq    
c000e04a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e050:	52                   	push   edx
c000e051:	50                   	push   eax
c000e052:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e056:	c1 e6 0a             	shl    esi,0xa
c000e059:	89 fd                	mov    ebp,edi
c000e05b:	55                   	push   ebp
c000e05c:	56                   	push   esi
c000e05d:	e8 ce 16 01 00       	call   c001f730 <__udivdi3>
c000e062:	e9 b9 00 00 00       	jmp    c000e120 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e067:	83 ec 0c             	sub    esp,0xc
c000e06a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e06c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e070:	56                   	push   esi
c000e071:	6a 01                	push   0x1
c000e073:	6a 00                	push   0x0
c000e075:	6a 00                	push   0x0
c000e077:	53                   	push   ebx
c000e078:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e07b:	83 c4 20             	add    esp,0x20
c000e07e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e086:	75 0a                	jne    c000e092 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e088:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e090:	74 2c                	je     c000e0be <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e092:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e098:	83 ec 10             	sub    esp,0x10
c000e09b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0a7:	89 f7                	mov    edi,esi
c000e0a9:	c1 ff 1f             	sar    edi,0x1f
c000e0ac:	57                   	push   edi
c000e0ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0b1:	56                   	push   esi
c000e0b2:	c1 e0 0a             	shl    eax,0xa
c000e0b5:	52                   	push   edx
c000e0b6:	50                   	push   eax
c000e0b7:	e8 74 16 01 00       	call   c001f730 <__udivdi3>
c000e0bc:	eb 62                	jmp    c000e120 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0be:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0c5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0cc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0d3:	89 cf                	mov    edi,ecx
c000e0d5:	83 e2 7f             	and    edx,0x7f
c000e0d8:	83 e7 7f             	and    edi,0x7f
c000e0db:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0de:	83 e0 7f             	and    eax,0x7f
c000e0e1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0e4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e0eb:	83 e0 7f             	and    eax,0x7f
c000e0ee:	01 d0                	add    eax,edx
c000e0f0:	84 c0                	test   al,al
c000e0f2:	89 c5                	mov    ebp,eax
c000e0f4:	74 41                	je     c000e137 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e0f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0fc:	83 ec 10             	sub    esp,0x10
c000e0ff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e105:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e10b:	89 f7                	mov    edi,esi
c000e10d:	c1 ff 1f             	sar    edi,0x1f
c000e110:	57                   	push   edi
c000e111:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e115:	56                   	push   esi
c000e116:	c1 e0 0a             	shl    eax,0xa
c000e119:	52                   	push   edx
c000e11a:	50                   	push   eax
c000e11b:	e8 10 16 01 00       	call   c001f730 <__udivdi3>
c000e120:	83 c4 14             	add    esp,0x14
c000e123:	52                   	push   edx
c000e124:	50                   	push   eax
c000e125:	6a 00                	push   0x0
c000e127:	6a 00                	push   0x0
c000e129:	53                   	push   ebx
c000e12a:	e8 4b fe ff ff       	call   c000df7a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e12f:	83 c4 20             	add    esp,0x20
c000e132:	e9 73 01 00 00       	jmp    c000e2aa <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e137:	89 f0                	mov    eax,esi
c000e139:	31 c9                	xor    ecx,ecx
c000e13b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e142:	75 02                	jne    c000e146 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e144:	89 cd                	mov    ebp,ecx
c000e146:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e14e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e155:	83 c0 10             	add    eax,0x10
c000e158:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e160:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e167:	c1 e2 08             	shl    edx,0x8
c000e16a:	c1 e6 10             	shl    esi,0x10
c000e16d:	09 f2                	or     edx,esi
c000e16f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e176:	09 f2                	or     edx,esi
c000e178:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e17f:	c1 e6 18             	shl    esi,0x18
c000e182:	09 f2                	or     edx,esi
c000e184:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e18b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e18f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e196:	c1 e6 10             	shl    esi,0x10
c000e199:	c1 e2 08             	shl    edx,0x8
c000e19c:	09 f2                	or     edx,esi
c000e19e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1a5:	09 f2                	or     edx,esi
c000e1a7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1ae:	c1 e6 18             	shl    esi,0x18
c000e1b1:	09 f2                	or     edx,esi
c000e1b3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1b7:	41                   	inc    ecx
c000e1b8:	83 f9 04             	cmp    ecx,0x4
c000e1bb:	0f 85 7a ff ff ff    	jne    c000e13b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1c5:	83 f0 01             	xor    eax,0x1
c000e1c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1cc:	75 4f                	jne    c000e21d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1d2:	83 f0 01             	xor    eax,0x1
c000e1d5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1d9:	75 42                	jne    c000e21d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1db:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1f7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1fd:	89 f7                	mov    edi,esi
c000e1ff:	c1 ff 1f             	sar    edi,0x1f
c000e202:	57                   	push   edi
c000e203:	56                   	push   esi
c000e204:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e208:	52                   	push   edx
c000e209:	c1 e0 0a             	shl    eax,0xa
c000e20c:	50                   	push   eax
c000e20d:	e8 1e 15 01 00       	call   c001f730 <__udivdi3>
c000e212:	83 c4 10             	add    esp,0x10
c000e215:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e219:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e21d:	89 e8                	mov    eax,ebp
c000e21f:	0f b6 e8             	movzx  ebp,al
c000e222:	85 ed                	test   ebp,ebp
c000e224:	74 50                	je     c000e276 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e22a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e22e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e232:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e236:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e23a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e242:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e246:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e24e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e256:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e25a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e25e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e262:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e266:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e26a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e26e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e272:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e276:	31 ed                	xor    ebp,ebp
c000e278:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e27c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e280:	89 f8                	mov    eax,edi
c000e282:	09 f0                	or     eax,esi
c000e284:	74 1e                	je     c000e2a4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e286:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e28a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e28e:	89 d1                	mov    ecx,edx
c000e290:	09 c1                	or     ecx,eax
c000e292:	74 10                	je     c000e2a4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	57                   	push   edi
c000e298:	56                   	push   esi
c000e299:	52                   	push   edx
c000e29a:	50                   	push   eax
c000e29b:	53                   	push   ebx
c000e29c:	e8 d9 fc ff ff       	call   c000df7a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2a1:	83 c4 20             	add    esp,0x20
c000e2a4:	45                   	inc    ebp
c000e2a5:	83 fd 04             	cmp    ebp,0x4
c000e2a8:	75 ce                	jne    c000e278 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2aa:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2b0:	5b                   	pop    ebx
c000e2b1:	5e                   	pop    esi
c000e2b2:	5f                   	pop    edi
c000e2b3:	5d                   	pop    ebp
c000e2b4:	c3                   	ret    
c000e2b5:	66 90                	xchg   ax,ax
c000e2b7:	90                   	nop

c000e2b8 <Serial::Serial(char const*)>:
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2bf:	83 ec 08             	sub    esp,0x8
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	50                   	push   eax
c000e2c7:	e8 6c e8 ff ff       	call   c000cb38 <Device::Device(char const*)>
c000e2cc:	83 c4 10             	add    esp,0x10
c000e2cf:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c000e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d8:	89 10                	mov    DWORD PTR [eax],edx
c000e2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2de:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e2e8:	90                   	nop
c000e2e9:	83 c4 0c             	add    esp,0xc
c000e2ec:	c3                   	ret    
c000e2ed:	90                   	nop
c000e2ee:	66 90                	xchg   ax,ax

c000e2f0 <Serial::~Serial()>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c000e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fc:	89 10                	mov    DWORD PTR [eax],edx
c000e2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e302:	83 ec 0c             	sub    esp,0xc
c000e305:	50                   	push   eax
c000e306:	e8 97 e5 ff ff       	call   c000c8a2 <Device::~Device()>
c000e30b:	83 c4 10             	add    esp,0x10
c000e30e:	90                   	nop
c000e30f:	83 c4 0c             	add    esp,0xc
c000e312:	c3                   	ret    
c000e313:	90                   	nop

c000e314 <Serial::~Serial()>:
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e31e:	e8 cd ff ff ff       	call   c000e2f0 <Serial::~Serial()>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	83 ec 08             	sub    esp,0x8
c000e329:	68 58 01 00 00       	push   0x158
c000e32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e332:	e8 d5 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e337:	83 c4 10             	add    esp,0x10
c000e33a:	83 c4 0c             	add    esp,0xc
c000e33d:	c3                   	ret    
c000e33e:	66 90                	xchg   ax,ax

c000e340 <Timer::Timer(char const*)>:
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e347:	83 ec 08             	sub    esp,0x8
c000e34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34e:	50                   	push   eax
c000e34f:	e8 e4 e7 ff ff       	call   c000cb38 <Device::Device(char const*)>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c000e35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e360:	89 10                	mov    DWORD PTR [eax],edx
c000e362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e366:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e370:	90                   	nop
c000e371:	83 c4 0c             	add    esp,0xc
c000e374:	c3                   	ret    
c000e375:	90                   	nop
c000e376:	66 90                	xchg   ax,ax

c000e378 <Timer::~Timer()>:
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c000e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e384:	89 10                	mov    DWORD PTR [eax],edx
c000e386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38a:	83 ec 0c             	sub    esp,0xc
c000e38d:	50                   	push   eax
c000e38e:	e8 0f e5 ff ff       	call   c000c8a2 <Device::~Device()>
c000e393:	83 c4 10             	add    esp,0x10
c000e396:	90                   	nop
c000e397:	83 c4 0c             	add    esp,0xc
c000e39a:	c3                   	ret    
c000e39b:	90                   	nop

c000e39c <Timer::~Timer()>:
c000e39c:	83 ec 0c             	sub    esp,0xc
c000e39f:	83 ec 0c             	sub    esp,0xc
c000e3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a6:	e8 cd ff ff ff       	call   c000e378 <Timer::~Timer()>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	83 ec 08             	sub    esp,0x8
c000e3b1:	68 5c 01 00 00       	push   0x15c
c000e3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ba:	e8 4d c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3bf:	83 c4 10             	add    esp,0x10
c000e3c2:	83 c4 0c             	add    esp,0xc
c000e3c5:	c3                   	ret    

c000e3c6 <Timer::read()>:
c000e3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3d0:	c3                   	ret    

c000e3d1 <setupTimer(int)>:
c000e3d1:	53                   	push   ebx
c000e3d2:	83 ec 14             	sub    esp,0x14
c000e3d5:	68 5c 01 00 00       	push   0x15c
c000e3da:	e8 f4 96 ff ff       	call   c0007ad3 <malloc>
c000e3df:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3e2:	89 c3                	mov    ebx,eax
c000e3e4:	e8 b3 0b 01 00       	call   c001ef9c <PIT::PIT()>
c000e3e9:	58                   	pop    eax
c000e3ea:	5a                   	pop    edx
c000e3eb:	53                   	push   ebx
c000e3ec:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3f2:	e8 a9 e5 ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c000e3f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3f9:	6a 00                	push   0x0
c000e3fb:	6a 00                	push   0x0
c000e3fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e401:	53                   	push   ebx
c000e402:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e405:	83 c4 28             	add    esp,0x28
c000e408:	89 d8                	mov    eax,ebx
c000e40a:	5b                   	pop    ebx
c000e40b:	c3                   	ret    

c000e40c <timerHandler(unsigned int)>:
c000e40c:	56                   	push   esi
c000e40d:	53                   	push   ebx
c000e40e:	51                   	push   ecx
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e419:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e420:	0f 84 4a 01 00 00    	je     c000e570 <timerHandler(unsigned int)+0x164>
c000e426:	fa                   	cli    
c000e427:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e42d:	83 ec 0c             	sub    esp,0xc
c000e430:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e435:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e43b:	e8 c0 18 01 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e440:	83 c4 10             	add    esp,0x10
c000e443:	84 c0                	test   al,al
c000e445:	0f 85 a1 00 00 00    	jne    c000e4ec <timerHandler(unsigned int)+0xe0>
c000e44b:	83 ec 0c             	sub    esp,0xc
c000e44e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e453:	e8 c4 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	89 c6                	mov    esi,eax
c000e45d:	8d 76 00             	lea    esi,[esi+0x0]
c000e460:	83 ec 0c             	sub    esp,0xc
c000e463:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e468:	e8 af 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e46d:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e474:	89 c3                	mov    ebx,eax
c000e476:	e8 a9 18 01 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e47b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e487:	77 23                	ja     c000e4ac <timerHandler(unsigned int)+0xa0>
c000e489:	83 ec 0c             	sub    esp,0xc
c000e48c:	53                   	push   ebx
c000e48d:	e8 de 80 00 00       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c000e492:	83 c4 10             	add    esp,0x10
c000e495:	39 de                	cmp    esi,ebx
c000e497:	75 27                	jne    c000e4c0 <timerHandler(unsigned int)+0xb4>
c000e499:	83 ec 0c             	sub    esp,0xc
c000e49c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a1:	e8 76 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a6:	89 c6                	mov    esi,eax
c000e4a8:	eb 12                	jmp    c000e4bc <timerHandler(unsigned int)+0xb0>
c000e4aa:	66 90                	xchg   ax,ax
c000e4ac:	52                   	push   edx
c000e4ad:	52                   	push   edx
c000e4ae:	53                   	push   ebx
c000e4af:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b4:	e8 27 19 01 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4bc:	83 c4 10             	add    esp,0x10
c000e4bf:	90                   	nop
c000e4c0:	83 ec 0c             	sub    esp,0xc
c000e4c3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c8:	e8 33 18 01 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4cd:	83 c4 10             	add    esp,0x10
c000e4d0:	84 c0                	test   al,al
c000e4d2:	75 18                	jne    c000e4ec <timerHandler(unsigned int)+0xe0>
c000e4d4:	83 ec 0c             	sub    esp,0xc
c000e4d7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4dc:	e8 3b 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e1:	83 c4 10             	add    esp,0x10
c000e4e4:	39 f0                	cmp    eax,esi
c000e4e6:	0f 85 74 ff ff ff    	jne    c000e460 <timerHandler(unsigned int)+0x54>
c000e4ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4f1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e4f5:	74 41                	je     c000e538 <timerHandler(unsigned int)+0x12c>
c000e4f7:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e4fe:	74 38                	je     c000e538 <timerHandler(unsigned int)+0x12c>
c000e500:	fa                   	cli    
c000e501:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e507:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e50c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e512:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e515:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e51b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e51e:	72 08                	jb     c000e528 <timerHandler(unsigned int)+0x11c>
c000e520:	e8 53 7b 00 00       	call   c0016078 <schedule()>
c000e525:	8d 76 00             	lea    esi,[esi+0x0]
c000e528:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e52d:	48                   	dec    eax
c000e52e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e533:	75 03                	jne    c000e538 <timerHandler(unsigned int)+0x12c>
c000e535:	fb                   	sti    
c000e536:	66 90                	xchg   ax,ax
c000e538:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e53d:	48                   	dec    eax
c000e53e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e543:	75 1b                	jne    c000e560 <timerHandler(unsigned int)+0x154>
c000e545:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e54c:	74 12                	je     c000e560 <timerHandler(unsigned int)+0x154>
c000e54e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e558:	e8 1b 7b 00 00       	call   c0016078 <schedule()>
c000e55d:	8d 76 00             	lea    esi,[esi+0x0]
c000e560:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e565:	48                   	dec    eax
c000e566:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e56b:	75 03                	jne    c000e570 <timerHandler(unsigned int)+0x164>
c000e56d:	fb                   	sti    
c000e56e:	66 90                	xchg   ax,ax
c000e570:	58                   	pop    eax
c000e571:	5b                   	pop    ebx
c000e572:	5e                   	pop    esi
c000e573:	c3                   	ret    

c000e574 <VCache::VCache(PhysicalDisk*)>:
c000e574:	53                   	push   ebx
c000e575:	83 ec 18             	sub    esp,0x18
c000e578:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000e57d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e581:	89 10                	mov    DWORD PTR [eax],edx
c000e583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e587:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e58e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e592:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5af:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5cc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5db:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e605:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e60d:	83 ec 0c             	sub    esp,0xc
c000e610:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e614:	e8 ba 94 ff ff       	call   c0007ad3 <malloc>
c000e619:	83 c4 10             	add    esp,0x10
c000e61c:	89 c3                	mov    ebx,eax
c000e61e:	83 ec 0c             	sub    esp,0xc
c000e621:	53                   	push   ebx
c000e622:	e8 f1 77 00 00       	call   c0015e18 <Mutex::Mutex()>
c000e627:	83 c4 10             	add    esp,0x10
c000e62a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e635:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e639:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e63c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e640:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e647:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e64b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e655:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e658:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e65c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e662:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e668:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e66c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e66f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e676:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e67a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e67e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e684:	05 00 02 00 00       	add    eax,0x200
c000e689:	c1 e0 03             	shl    eax,0x3
c000e68c:	83 ec 0c             	sub    esp,0xc
c000e68f:	50                   	push   eax
c000e690:	e8 3e 94 ff ff       	call   c0007ad3 <malloc>
c000e695:	83 c4 10             	add    esp,0x10
c000e698:	89 c2                	mov    edx,eax
c000e69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6be:	89 d0                	mov    eax,edx
c000e6c0:	c1 e0 02             	shl    eax,0x2
c000e6c3:	01 d0                	add    eax,edx
c000e6c5:	c1 e0 04             	shl    eax,0x4
c000e6c8:	83 ec 0c             	sub    esp,0xc
c000e6cb:	50                   	push   eax
c000e6cc:	e8 02 94 ff ff       	call   c0007ad3 <malloc>
c000e6d1:	83 c4 10             	add    esp,0x10
c000e6d4:	89 c2                	mov    edx,eax
c000e6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6da:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6dd:	90                   	nop
c000e6de:	83 c4 18             	add    esp,0x18
c000e6e1:	5b                   	pop    ebx
c000e6e2:	c3                   	ret    
c000e6e3:	90                   	nop

c000e6e4 <VCache::invalidateReadBuffer()>:
c000e6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6e8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e6ee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6f2:	c3                   	ret    
c000e6f3:	90                   	nop

c000e6f4 <VCache::writeWriteBuffer()>:
c000e6f4:	53                   	push   ebx
c000e6f5:	83 ec 08             	sub    esp,0x8
c000e6f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6fc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e700:	74 1e                	je     c000e720 <VCache::writeWriteBuffer()+0x2c>
c000e702:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e705:	83 ec 0c             	sub    esp,0xc
c000e708:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e70d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e710:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e713:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e716:	50                   	push   eax
c000e717:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e71a:	83 c4 20             	add    esp,0x20
c000e71d:	8d 76 00             	lea    esi,[esi+0x0]
c000e720:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e727:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e72e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e732:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e739:	83 c4 08             	add    esp,0x8
c000e73c:	5b                   	pop    ebx
c000e73d:	c3                   	ret    
c000e73e:	66 90                	xchg   ax,ax

c000e740 <VCache::~VCache()>:
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000e748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74c:	89 10                	mov    DWORD PTR [eax],edx
c000e74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e752:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e755:	0f b6 c0             	movzx  eax,al
c000e758:	85 c0                	test   eax,eax
c000e75a:	74 10                	je     c000e76c <VCache::~VCache()+0x2c>
c000e75c:	83 ec 0c             	sub    esp,0xc
c000e75f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e763:	e8 8c ff ff ff       	call   c000e6f4 <VCache::writeWriteBuffer()>
c000e768:	83 c4 10             	add    esp,0x10
c000e76b:	90                   	nop
c000e76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e770:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e773:	83 ec 0c             	sub    esp,0xc
c000e776:	50                   	push   eax
c000e777:	e8 67 93 ff ff       	call   c0007ae3 <free>
c000e77c:	83 c4 10             	add    esp,0x10
c000e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e783:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e786:	83 ec 0c             	sub    esp,0xc
c000e789:	50                   	push   eax
c000e78a:	e8 54 93 ff ff       	call   c0007ae3 <free>
c000e78f:	83 c4 10             	add    esp,0x10
c000e792:	90                   	nop
c000e793:	83 c4 0c             	add    esp,0xc
c000e796:	c3                   	ret    
c000e797:	90                   	nop

c000e798 <VCache::~VCache()>:
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	83 ec 0c             	sub    esp,0xc
c000e79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7a2:	e8 99 ff ff ff       	call   c000e740 <VCache::~VCache()>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	83 ec 08             	sub    esp,0x8
c000e7ad:	6a 44                	push   0x44
c000e7af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b3:	e8 54 c0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	83 c4 0c             	add    esp,0xc
c000e7be:	c3                   	ret    
c000e7bf:	90                   	nop

c000e7c0 <VCache::write(unsigned long long, int, void*)>:
c000e7c0:	55                   	push   ebp
c000e7c1:	57                   	push   edi
c000e7c2:	56                   	push   esi
c000e7c3:	53                   	push   ebx
c000e7c4:	83 ec 1c             	sub    esp,0x1c
c000e7c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7cf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e7d3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7d7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7df:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7e3:	74 0f                	je     c000e7f4 <VCache::write(unsigned long long, int, void*)+0x34>
c000e7e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e7e9:	53                   	push   ebx
c000e7ea:	e8 f5 fe ff ff       	call   c000e6e4 <VCache::invalidateReadBuffer()>
c000e7ef:	58                   	pop    eax
c000e7f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7f4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7f8:	74 66                	je     c000e860 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e7fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e801:	99                   	cdq    
c000e802:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e805:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e808:	89 c6                	mov    esi,eax
c000e80a:	31 ce                	xor    esi,ecx
c000e80c:	89 d0                	mov    eax,edx
c000e80e:	31 e8                	xor    eax,ebp
c000e810:	09 c6                	or     esi,eax
c000e812:	75 38                	jne    c000e84c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e814:	83 ff 01             	cmp    edi,0x1
c000e817:	75 33                	jne    c000e84c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e819:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e81c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e820:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e824:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e82a:	0f af f9             	imul   edi,ecx
c000e82d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e830:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e832:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e835:	40                   	inc    eax
c000e836:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e839:	83 f8 50             	cmp    eax,0x50
c000e83c:	75 72                	jne    c000e8b0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e83e:	83 ec 0c             	sub    esp,0xc
c000e841:	53                   	push   ebx
c000e842:	e8 ad fe ff ff       	call   c000e6f4 <VCache::writeWriteBuffer()>
c000e847:	83 c4 10             	add    esp,0x10
c000e84a:	eb 64                	jmp    c000e8b0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e84c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e850:	83 ec 0c             	sub    esp,0xc
c000e853:	53                   	push   ebx
c000e854:	e8 9b fe ff ff       	call   c000e6f4 <VCache::writeWriteBuffer()>
c000e859:	83 c4 10             	add    esp,0x10
c000e85c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e860:	83 ff 4f             	cmp    edi,0x4f
c000e863:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e866:	7f 20                	jg     c000e888 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e868:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e86b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e86f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e872:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e875:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e878:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e87c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e884:	eb 2a                	jmp    c000e8b0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e886:	66 90                	xchg   ax,ax
c000e888:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e88c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e88e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e892:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e896:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e89a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e89e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8a2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8a5:	83 c4 1c             	add    esp,0x1c
c000e8a8:	5b                   	pop    ebx
c000e8a9:	5e                   	pop    esi
c000e8aa:	5f                   	pop    edi
c000e8ab:	5d                   	pop    ebp
c000e8ac:	ff e0                	jmp    eax
c000e8ae:	66 90                	xchg   ax,ax
c000e8b0:	83 c4 1c             	add    esp,0x1c
c000e8b3:	31 c0                	xor    eax,eax
c000e8b5:	5b                   	pop    ebx
c000e8b6:	5e                   	pop    esi
c000e8b7:	5f                   	pop    edi
c000e8b8:	5d                   	pop    ebp
c000e8b9:	c3                   	ret    

c000e8ba <VCache::read(unsigned long long, int, void*)>:
c000e8ba:	55                   	push   ebp
c000e8bb:	57                   	push   edi
c000e8bc:	56                   	push   esi
c000e8bd:	53                   	push   ebx
c000e8be:	83 ec 1c             	sub    esp,0x1c
c000e8c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8c9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8d1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8d9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8dd:	74 0d                	je     c000e8ec <VCache::read(unsigned long long, int, void*)+0x32>
c000e8df:	83 ec 0c             	sub    esp,0xc
c000e8e2:	57                   	push   edi
c000e8e3:	e8 0c fe ff ff       	call   c000e6f4 <VCache::writeWriteBuffer()>
c000e8e8:	83 c4 10             	add    esp,0x10
c000e8eb:	90                   	nop
c000e8ec:	83 fd 01             	cmp    ebp,0x1
c000e8ef:	0f 85 93 00 00 00    	jne    c000e988 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8f5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8f8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e8ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e902:	0f 85 80 00 00 00    	jne    c000e988 <VCache::read(unsigned long long, int, void*)+0xce>
c000e908:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e90b:	89 cd                	mov    ebp,ecx
c000e90d:	f7 dd                	neg    ebp
c000e90f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e913:	89 e8                	mov    eax,ebp
c000e915:	21 dd                	and    ebp,ebx
c000e917:	c1 f8 1f             	sar    eax,0x1f
c000e91a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e91e:	89 e8                	mov    eax,ebp
c000e920:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e924:	21 f5                	and    ebp,esi
c000e926:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e92a:	89 ea                	mov    edx,ebp
c000e92c:	74 2e                	je     c000e95c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e92e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e931:	75 29                	jne    c000e95c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e933:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e936:	75 24                	jne    c000e95c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e938:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e93b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e941:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e944:	8d 70 ff             	lea    esi,[eax-0x1]
c000e947:	21 f3                	and    ebx,esi
c000e949:	0f af d9             	imul   ebx,ecx
c000e94c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e94f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e953:	89 de                	mov    esi,ebx
c000e955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e957:	31 c0                	xor    eax,eax
c000e959:	eb 61                	jmp    c000e9bc <VCache::read(unsigned long long, int, void*)+0x102>
c000e95b:	90                   	nop
c000e95c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e960:	83 ec 0c             	sub    esp,0xc
c000e963:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e966:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e96a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e96d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e96f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e972:	51                   	push   ecx
c000e973:	52                   	push   edx
c000e974:	50                   	push   eax
c000e975:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e979:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e97c:	83 c4 20             	add    esp,0x20
c000e97f:	85 c0                	test   eax,eax
c000e981:	75 39                	jne    c000e9bc <VCache::read(unsigned long long, int, void*)+0x102>
c000e983:	eb b3                	jmp    c000e938 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e985:	8d 76 00             	lea    esi,[esi+0x0]
c000e988:	83 ec 0c             	sub    esp,0xc
c000e98b:	57                   	push   edi
c000e98c:	e8 53 fd ff ff       	call   c000e6e4 <VCache::invalidateReadBuffer()>
c000e991:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e994:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e998:	8b 10                	mov    edx,DWORD PTR [eax]
c000e99a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e99e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9a2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9a6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ae:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9b1:	83 c4 2c             	add    esp,0x2c
c000e9b4:	5b                   	pop    ebx
c000e9b5:	5e                   	pop    esi
c000e9b6:	5f                   	pop    edi
c000e9b7:	5d                   	pop    ebp
c000e9b8:	ff e0                	jmp    eax
c000e9ba:	66 90                	xchg   ax,ax
c000e9bc:	83 c4 1c             	add    esp,0x1c
c000e9bf:	5b                   	pop    ebx
c000e9c0:	5e                   	pop    esi
c000e9c1:	5f                   	pop    edi
c000e9c2:	5d                   	pop    ebp
c000e9c3:	c3                   	ret    

c000e9c4 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9c4:	55                   	push   ebp
c000e9c5:	57                   	push   edi
c000e9c6:	56                   	push   esi
c000e9c7:	53                   	push   ebx
c000e9c8:	83 ec 1c             	sub    esp,0x1c
c000e9cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9d3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9d7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9e3:	01 df                	add    edi,ebx
c000e9e5:	39 fb                	cmp    ebx,edi
c000e9e7:	7d 1f                	jge    c000ea08 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9ed:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9f1:	7d 12                	jge    c000ea05 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9f3:	8b 16                	mov    edx,DWORD PTR [esi]
c000e9f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e9f9:	53                   	push   ebx
c000e9fa:	55                   	push   ebp
c000e9fb:	45                   	inc    ebp
c000e9fc:	56                   	push   esi
c000e9fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea00:	83 c4 10             	add    esp,0x10
c000ea03:	eb e8                	jmp    c000e9ed <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea05:	43                   	inc    ebx
c000ea06:	eb dd                	jmp    c000e9e5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea08:	83 c4 1c             	add    esp,0x1c
c000ea0b:	5b                   	pop    ebx
c000ea0c:	5e                   	pop    esi
c000ea0d:	5f                   	pop    edi
c000ea0e:	5d                   	pop    ebp
c000ea0f:	c3                   	ret    

c000ea10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea10:	55                   	push   ebp
c000ea11:	57                   	push   edi
c000ea12:	31 ff                	xor    edi,edi
c000ea14:	56                   	push   esi
c000ea15:	53                   	push   ebx
c000ea16:	83 ec 1c             	sub    esp,0x1c
c000ea19:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea21:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea28:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea35:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea39:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea40:	01 f9                	add    ecx,edi
c000ea42:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea46:	7d 2f                	jge    c000ea77 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea48:	31 f6                	xor    esi,esi
c000ea4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea4e:	01 f2                	add    edx,esi
c000ea50:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea54:	7d 1a                	jge    c000ea70 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea59:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea5c:	46                   	inc    esi
c000ea5d:	51                   	push   ecx
c000ea5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea62:	52                   	push   edx
c000ea63:	55                   	push   ebp
c000ea64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea6e:	eb da                	jmp    c000ea4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea70:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea74:	47                   	inc    edi
c000ea75:	eb c5                	jmp    c000ea3c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	90                   	nop

c000ea80 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea80:	55                   	push   ebp
c000ea81:	ba 00 00 00 00       	mov    edx,0x0
c000ea86:	57                   	push   edi
c000ea87:	56                   	push   esi
c000ea88:	53                   	push   ebx
c000ea89:	83 ec 1c             	sub    esp,0x1c
c000ea8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ea94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea98:	85 c0                	test   eax,eax
c000ea9a:	0f 49 d0             	cmovns edx,eax
c000ea9d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eaa4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eaa8:	89 eb                	mov    ebx,ebp
c000eaaa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eaae:	01 ea                	add    edx,ebp
c000eab0:	39 da                	cmp    edx,ebx
c000eab2:	7e 54                	jle    c000eb08 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eab4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eaba:	7c 4c                	jl     c000eb08 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eabc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eac0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eac4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eac8:	01 c1                	add    ecx,eax
c000eaca:	39 f9                	cmp    ecx,edi
c000eacc:	7e 2f                	jle    c000eafd <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eace:	83 c2 04             	add    edx,0x4
c000ead1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ead7:	7c 21                	jl     c000eafa <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ead9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eadd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eadf:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eae2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eae6:	55                   	push   ebp
c000eae7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaeb:	56                   	push   esi
c000eaec:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eaef:	83 c4 10             	add    esp,0x10
c000eaf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eafa:	47                   	inc    edi
c000eafb:	eb c7                	jmp    c000eac4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eafd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb01:	43                   	inc    ebx
c000eb02:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb06:	eb a2                	jmp    c000eaaa <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb08:	83 c4 1c             	add    esp,0x1c
c000eb0b:	5b                   	pop    ebx
c000eb0c:	5e                   	pop    esi
c000eb0d:	5f                   	pop    edi
c000eb0e:	5d                   	pop    ebp
c000eb0f:	c3                   	ret    

c000eb10 <Video::clearScreen(unsigned int)>:
c000eb10:	57                   	push   edi
c000eb11:	56                   	push   esi
c000eb12:	53                   	push   ebx
c000eb13:	31 db                	xor    ebx,ebx
c000eb15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb19:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb1f:	7e 1f                	jle    c000eb40 <Video::clearScreen(unsigned int)+0x30>
c000eb21:	31 ff                	xor    edi,edi
c000eb23:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb29:	7e 12                	jle    c000eb3d <Video::clearScreen(unsigned int)+0x2d>
c000eb2b:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb31:	53                   	push   ebx
c000eb32:	57                   	push   edi
c000eb33:	47                   	inc    edi
c000eb34:	56                   	push   esi
c000eb35:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb38:	83 c4 10             	add    esp,0x10
c000eb3b:	eb e6                	jmp    c000eb23 <Video::clearScreen(unsigned int)+0x13>
c000eb3d:	43                   	inc    ebx
c000eb3e:	eb d9                	jmp    c000eb19 <Video::clearScreen(unsigned int)+0x9>
c000eb40:	5b                   	pop    ebx
c000eb41:	5e                   	pop    esi
c000eb42:	5f                   	pop    edi
c000eb43:	c3                   	ret    

c000eb44 <Video::putpixel(int, int, unsigned int)>:
c000eb44:	c7 44 24 04 28 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e28
c000eb4c:	e9 16 2a 00 00       	jmp    c0011567 <KePanic(char const*)>
c000eb51:	90                   	nop

c000eb52 <Video::readPixelApprox(int, int)>:
c000eb52:	83 ec 18             	sub    esp,0x18
c000eb55:	68 49 1e 02 c0       	push   0xc0021e49
c000eb5a:	e8 08 2a 00 00       	call   c0011567 <KePanic(char const*)>
c000eb5f:	31 c0                	xor    eax,eax
c000eb61:	83 c4 1c             	add    esp,0x1c
c000eb64:	c3                   	ret    
c000eb65:	90                   	nop

c000eb66 <Video::Video(char const*)>:
c000eb66:	83 ec 0c             	sub    esp,0xc
c000eb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb6d:	83 ec 08             	sub    esp,0x8
c000eb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb74:	50                   	push   eax
c000eb75:	e8 be df ff ff       	call   c000cb38 <Device::Device(char const*)>
c000eb7a:	83 c4 10             	add    esp,0x10
c000eb7d:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c000eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb86:	89 10                	mov    DWORD PTR [eax],edx
c000eb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb96:	90                   	nop
c000eb97:	83 c4 0c             	add    esp,0xc
c000eb9a:	c3                   	ret    
c000eb9b:	90                   	nop

c000eb9c <Video::~Video()>:
c000eb9c:	83 ec 0c             	sub    esp,0xc
c000eb9f:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c000eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba8:	89 10                	mov    DWORD PTR [eax],edx
c000ebaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	50                   	push   eax
c000ebb2:	e8 eb dc ff ff       	call   c000c8a2 <Device::~Device()>
c000ebb7:	83 c4 10             	add    esp,0x10
c000ebba:	90                   	nop
c000ebbb:	83 c4 0c             	add    esp,0xc
c000ebbe:	c3                   	ret    
c000ebbf:	90                   	nop

c000ebc0 <Video::~Video()>:
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	83 ec 0c             	sub    esp,0xc
c000ebc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebca:	e8 cd ff ff ff       	call   c000eb9c <Video::~Video()>
c000ebcf:	83 c4 10             	add    esp,0x10
c000ebd2:	83 ec 08             	sub    esp,0x8
c000ebd5:	68 64 01 00 00       	push   0x164
c000ebda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebde:	e8 29 bc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ebe3:	83 c4 10             	add    esp,0x10
c000ebe6:	83 c4 0c             	add    esp,0xc
c000ebe9:	c3                   	ret    

c000ebea <Video::isMonochrome()>:
c000ebea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebf4:	c3                   	ret    
c000ebf5:	90                   	nop

c000ebf6 <Video::getWidth()>:
c000ebf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebfa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec00:	c3                   	ret    
c000ec01:	90                   	nop

c000ec02 <Video::getHeight()>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec0e:	55                   	push   ebp
c000ec0f:	57                   	push   edi
c000ec10:	56                   	push   esi
c000ec11:	53                   	push   ebx
c000ec12:	83 ec 2c             	sub    esp,0x2c
c000ec15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec19:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec1d:	83 f8 01             	cmp    eax,0x1
c000ec20:	19 c9                	sbb    ecx,ecx
c000ec22:	31 db                	xor    ebx,ebx
c000ec24:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec28:	89 ce                	mov    esi,ecx
c000ec2a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec32:	f7 d6                	not    esi
c000ec34:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec3a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec3e:	01 d8                	add    eax,ebx
c000ec40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec44:	57                   	push   edi
c000ec45:	e8 b8 ff ff ff       	call   c000ec02 <Video::getHeight()>
c000ec4a:	59                   	pop    ecx
c000ec4b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec4f:	7e 70                	jle    c000ecc1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec51:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec55:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec59:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec60:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec64:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec6f:	89 e8                	mov    eax,ebp
c000ec71:	83 c0 20             	add    eax,0x20
c000ec74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec78:	57                   	push   edi
c000ec79:	e8 78 ff ff ff       	call   c000ebf6 <Video::getWidth()>
c000ec7e:	5a                   	pop    edx
c000ec7f:	39 c5                	cmp    ebp,eax
c000ec81:	7d 34                	jge    c000ecb7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec83:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec88:	74 05                	je     c000ec8f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec8c:	56                   	push   esi
c000ec8d:	eb 0d                	jmp    c000ec9c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec8f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec94:	74 12                	je     c000eca8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec96:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eca0:	55                   	push   ebp
c000eca1:	57                   	push   edi
c000eca2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eca5:	83 c4 10             	add    esp,0x10
c000eca8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecac:	45                   	inc    ebp
c000ecad:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecb1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ecb5:	75 c1                	jne    c000ec78 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecb7:	43                   	inc    ebx
c000ecb8:	83 fb 20             	cmp    ebx,0x20
c000ecbb:	0f 85 79 ff ff ff    	jne    c000ec3a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecc1:	83 c4 2c             	add    esp,0x2c
c000ecc4:	5b                   	pop    ebx
c000ecc5:	5e                   	pop    esi
c000ecc6:	5f                   	pop    edi
c000ecc7:	5d                   	pop    ebp
c000ecc8:	c3                   	ret    
c000ecc9:	90                   	nop

c000ecca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecca:	55                   	push   ebp
c000eccb:	57                   	push   edi
c000eccc:	56                   	push   esi
c000eccd:	53                   	push   ebx
c000ecce:	83 ec 28             	sub    esp,0x28
c000ecd1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecd5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ecd9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecdd:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ece1:	c1 e7 08             	shl    edi,0x8
c000ece4:	01 c7                	add    edi,eax
c000ece6:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ecea:	c1 e6 08             	shl    esi,0x8
c000eced:	01 f0                	add    eax,esi
c000ecef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecf7:	0f af c7             	imul   eax,edi
c000ecfa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed01:	50                   	push   eax
c000ed02:	e8 cc 8d ff ff       	call   c0007ad3 <malloc>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	85 c0                	test   eax,eax
c000ed0c:	89 c5                	mov    ebp,eax
c000ed0e:	75 10                	jne    c000ed20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed10:	83 ec 0c             	sub    esp,0xc
c000ed13:	68 74 1e 02 c0       	push   0xc0021e74
c000ed18:	e8 4a 28 00 00       	call   c0011567 <KePanic(char const*)>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed24:	ba 12 00 00 00       	mov    edx,0x12
c000ed29:	85 c0                	test   eax,eax
c000ed2b:	74 11                	je     c000ed3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed2d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed31:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed35:	c1 fa 03             	sar    edx,0x3
c000ed38:	0f af d1             	imul   edx,ecx
c000ed3b:	83 c2 12             	add    edx,0x12
c000ed3e:	85 ff                	test   edi,edi
c000ed40:	74 06                	je     c000ed48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed42:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed46:	75 12                	jne    c000ed5a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	68 84 1e 02 c0       	push   0xc0021e84
c000ed50:	e8 b5 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ed55:	e9 b8 00 00 00       	jmp    c000ee12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed5e:	83 f9 02             	cmp    ecx,0x2
c000ed61:	0f 85 96 00 00 00    	jne    c000edfd <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed67:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed6c:	75 0e                	jne    c000ed7c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed6e:	85 c0                	test   eax,eax
c000ed70:	75 0a                	jne    c000ed7c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed72:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed75:	83 e8 18             	sub    eax,0x18
c000ed78:	a8 f7                	test   al,0xf7
c000ed7a:	74 0a                	je     c000ed86 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	68 99 1e 02 c0       	push   0xc0021e99
c000ed84:	eb 7f                	jmp    c000ee05 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed96:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ed9a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed9e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eda6:	75 0c                	jne    c000edb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eda8:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000edad:	c1 e1 18             	shl    ecx,0x18
c000edb0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000edb4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edb9:	46                   	inc    esi
c000edba:	89 c8                	mov    eax,ecx
c000edbc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edc1:	c1 e0 10             	shl    eax,0x10
c000edc4:	c1 e1 08             	shl    ecx,0x8
c000edc7:	09 c1                	or     ecx,eax
c000edc9:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edcd:	09 c1                	or     ecx,eax
c000edcf:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000edd3:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000edd7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eddb:	c1 f8 03             	sar    eax,0x3
c000edde:	01 c2                	add    edx,eax
c000ede0:	89 f0                	mov    eax,esi
c000ede2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ede6:	39 c7                	cmp    edi,eax
c000ede8:	7f b0                	jg     c000ed9a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000edea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edf2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edf5:	7e 22                	jle    c000ee19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000edf7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000edfb:	eb 99                	jmp    c000ed96 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edfd:	50                   	push   eax
c000edfe:	50                   	push   eax
c000edff:	51                   	push   ecx
c000ee00:	68 a7 1e 02 c0       	push   0xc0021ea7
c000ee05:	e8 00 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ee0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee0d:	e8 d1 8c ff ff       	call   c0007ae3 <free>
c000ee12:	83 c4 10             	add    esp,0x10
c000ee15:	31 ed                	xor    ebp,ebp
c000ee17:	eb 0f                	jmp    c000ee28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee1d:	89 38                	mov    DWORD PTR [eax],edi
c000ee1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee23:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee26:	89 38                	mov    DWORD PTR [eax],edi
c000ee28:	83 c4 1c             	add    esp,0x1c
c000ee2b:	89 e8                	mov    eax,ebp
c000ee2d:	5b                   	pop    ebx
c000ee2e:	5e                   	pop    esi
c000ee2f:	5f                   	pop    edi
c000ee30:	5d                   	pop    ebp
c000ee31:	c3                   	ret    

c000ee32 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee32:	55                   	push   ebp
c000ee33:	57                   	push   edi
c000ee34:	56                   	push   esi
c000ee35:	53                   	push   ebx
c000ee36:	83 ec 28             	sub    esp,0x28
c000ee39:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee3d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee41:	50                   	push   eax
c000ee42:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee46:	50                   	push   eax
c000ee47:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee4b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee4f:	57                   	push   edi
c000ee50:	e8 75 fe ff ff       	call   c000ecca <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee55:	83 c4 20             	add    esp,0x20
c000ee58:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee5c:	85 c0                	test   eax,eax
c000ee5e:	74 35                	je     c000ee95 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee60:	89 c6                	mov    esi,eax
c000ee62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee66:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee6a:	39 d8                	cmp    eax,ebx
c000ee6c:	7e 27                	jle    c000ee95 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee6e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee72:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee76:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee7a:	39 e9                	cmp    ecx,ebp
c000ee7c:	7e 14                	jle    c000ee92 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee7e:	83 c6 04             	add    esi,0x4
c000ee81:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee83:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ee86:	53                   	push   ebx
c000ee87:	55                   	push   ebp
c000ee88:	45                   	inc    ebp
c000ee89:	57                   	push   edi
c000ee8a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	eb e0                	jmp    c000ee72 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee92:	43                   	inc    ebx
c000ee93:	eb cd                	jmp    c000ee62 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee95:	83 c4 1c             	add    esp,0x1c
c000ee98:	5b                   	pop    ebx
c000ee99:	5e                   	pop    esi
c000ee9a:	5f                   	pop    edi
c000ee9b:	5d                   	pop    ebp
c000ee9c:	c3                   	ret    
c000ee9d:	66 90                	xchg   ax,ax
c000ee9f:	90                   	nop

c000eea0 <ACPI::close(int, int, void*)>:
c000eea0:	83 ec 1c             	sub    esp,0x1c
c000eea3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eeab:	74 0b                	je     c000eeb8 <ACPI::close(int, int, void*)+0x18>
c000eead:	b8 00 00 00 00       	mov    eax,0x0
c000eeb2:	e9 99 00 00 00       	jmp    c000ef50 <ACPI::close(int, int, void*)+0xb0>
c000eeb7:	90                   	nop
c000eeb8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eebd:	75 29                	jne    c000eee8 <ACPI::close(int, int, void*)+0x48>
c000eebf:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eec4:	85 c0                	test   eax,eax
c000eec6:	74 08                	je     c000eed0 <ACPI::close(int, int, void*)+0x30>
c000eec8:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eecd:	ff d0                	call   eax
c000eecf:	90                   	nop
c000eed0:	83 ec 0c             	sub    esp,0xc
c000eed3:	68 08 1f 02 c0       	push   0xc0021f08
c000eed8:	e8 8a 26 00 00       	call   c0011567 <KePanic(char const*)>
c000eedd:	83 c4 10             	add    esp,0x10
c000eee0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eee5:	eb 69                	jmp    c000ef50 <ACPI::close(int, int, void*)+0xb0>
c000eee7:	90                   	nop
c000eee8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eeed:	75 59                	jne    c000ef48 <ACPI::close(int, int, void*)+0xa8>
c000eeef:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eef4:	85 c0                	test   eax,eax
c000eef6:	74 08                	je     c000ef00 <ACPI::close(int, int, void*)+0x60>
c000eef8:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eefd:	ff d0                	call   eax
c000eeff:	90                   	nop
c000ef00:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef05:	8d 76 00             	lea    esi,[esi+0x0]
c000ef08:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef0d:	83 e0 02             	and    eax,0x2
c000ef10:	74 1e                	je     c000ef30 <ACPI::close(int, int, void*)+0x90>
c000ef12:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef1d:	89 c2                	mov    edx,eax
c000ef1f:	ec                   	in     al,dx
c000ef20:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef24:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef28:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef2c:	eb da                	jmp    c000ef08 <ACPI::close(int, int, void*)+0x68>
c000ef2e:	66 90                	xchg   ax,ax
c000ef30:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef37:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef44:	ee                   	out    dx,al
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef50:	83 c4 1c             	add    esp,0x1c
c000ef53:	c3                   	ret    

c000ef54 <findRSDP()>:
c000ef54:	83 ec 1c             	sub    esp,0x1c
c000ef57:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef5c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef62:	83 e0 04             	and    eax,0x4
c000ef65:	0f b6 c0             	movzx  eax,al
c000ef68:	85 c0                	test   eax,eax
c000ef6a:	75 08                	jne    c000ef74 <findRSDP()+0x20>
c000ef6c:	b8 00 00 00 00       	mov    eax,0x0
c000ef71:	eb 75                	jmp    c000efe8 <findRSDP()+0x94>
c000ef73:	90                   	nop
c000ef74:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef79:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef7e:	7f 1c                	jg     c000ef9c <findRSDP()+0x48>
c000ef80:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef85:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef8b:	83 e2 fb             	and    edx,0xfffffffb
c000ef8e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef94:	b8 00 00 00 00       	mov    eax,0x0
c000ef99:	eb 4d                	jmp    c000efe8 <findRSDP()+0x94>
c000ef9b:	90                   	nop
c000ef9c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000efa4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efac:	77 32                	ja     c000efe0 <findRSDP()+0x8c>
c000efae:	83 ec 04             	sub    esp,0x4
c000efb1:	6a 08                	push   0x8
c000efb3:	68 a3 1f 02 c0       	push   0xc0021fa3
c000efb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efbc:	e8 bf 13 ff ff       	call   c0000380 <memcmp>
c000efc1:	83 c4 10             	add    esp,0x10
c000efc4:	85 c0                	test   eax,eax
c000efc6:	0f 94 c0             	sete   al
c000efc9:	0f b6 c0             	movzx  eax,al
c000efcc:	85 c0                	test   eax,eax
c000efce:	74 08                	je     c000efd8 <findRSDP()+0x84>
c000efd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd4:	eb 12                	jmp    c000efe8 <findRSDP()+0x94>
c000efd6:	66 90                	xchg   ax,ax
c000efd8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000efdd:	eb c5                	jmp    c000efa4 <findRSDP()+0x50>
c000efdf:	90                   	nop
c000efe0:	b8 00 00 00 00       	mov    eax,0x0
c000efe5:	8d 76 00             	lea    esi,[esi+0x0]
c000efe8:	83 c4 1c             	add    esp,0x1c
c000efeb:	c3                   	ret    

c000efec <loadACPITables(unsigned char*)>:
c000efec:	57                   	push   edi
c000efed:	56                   	push   esi
c000efee:	53                   	push   ebx
c000efef:	83 ec 60             	sub    esp,0x60
c000eff2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eff7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000effd:	83 e0 04             	and    eax,0x4
c000f000:	0f b6 c0             	movzx  eax,al
c000f003:	85 c0                	test   eax,eax
c000f005:	0f 84 41 02 00 00    	je     c000f24c <loadACPITables(unsigned char*)+0x260>
c000f00b:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f010:	0f b6 c0             	movzx  eax,al
c000f013:	85 c0                	test   eax,eax
c000f015:	74 79                	je     c000f090 <loadACPITables(unsigned char*)+0xa4>
c000f017:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f01b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f01f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f023:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f026:	83 e8 24             	sub    eax,0x24
c000f029:	c1 e8 03             	shr    eax,0x3
c000f02c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f030:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f038:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f03c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f040:	0f 8d ba 00 00 00    	jge    c000f100 <loadACPITables(unsigned char*)+0x114>
c000f046:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f04a:	83 c0 24             	add    eax,0x24
c000f04d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f051:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f055:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f059:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f05d:	c1 e0 03             	shl    eax,0x3
c000f060:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f064:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f068:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f06b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f06d:	89 c1                	mov    ecx,eax
c000f06f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f074:	8d 50 01             	lea    edx,[eax+0x1]
c000f077:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f07d:	89 ca                	mov    edx,ecx
c000f07f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f086:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f08b:	eb ab                	jmp    c000f038 <loadACPITables(unsigned char*)+0x4c>
c000f08d:	8d 76 00             	lea    esi,[esi+0x0]
c000f090:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f094:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f098:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f09c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f09f:	83 e8 24             	sub    eax,0x24
c000f0a2:	c1 e8 02             	shr    eax,0x2
c000f0a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0a9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0b8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0bc:	7d 42                	jge    c000f100 <loadACPITables(unsigned char*)+0x114>
c000f0be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0c2:	83 c0 24             	add    eax,0x24
c000f0c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f0d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0d5:	c1 e0 02             	shl    eax,0x2
c000f0d8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f0dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0e2:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0f0:	89 ca                	mov    edx,ecx
c000f0f2:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0f9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0fe:	eb b4                	jmp    c000f0b4 <loadACPITables(unsigned char*)+0xc8>
c000f100:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f108:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f10d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f111:	0f 8d 39 01 00 00    	jge    c000f250 <loadACPITables(unsigned char*)+0x264>
c000f117:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f11b:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f122:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f12a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f132:	25 ff 0f 00 00       	and    eax,0xfff
c000f137:	89 c6                	mov    esi,eax
c000f139:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f13f:	83 ec 0c             	sub    esp,0xc
c000f142:	6a 01                	push   0x1
c000f144:	e8 ac a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f149:	83 c4 10             	add    esp,0x10
c000f14c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f150:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f156:	83 ec 0c             	sub    esp,0xc
c000f159:	6a 01                	push   0x1
c000f15b:	6a 01                	push   0x1
c000f15d:	50                   	push   eax
c000f15e:	52                   	push   edx
c000f15f:	53                   	push   ebx
c000f160:	e8 a3 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f165:	83 c4 20             	add    esp,0x20
c000f168:	09 f0                	or     eax,esi
c000f16a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f16e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f172:	c1 e0 03             	shl    eax,0x3
c000f175:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f17a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f17e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f186:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f18e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f196:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f19a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f19e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f1a2:	89 c6                	mov    esi,eax
c000f1a4:	89 d7                	mov    edi,edx
c000f1a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1a8:	89 c8                	mov    eax,ecx
c000f1aa:	89 fa                	mov    edx,edi
c000f1ac:	89 f3                	mov    ebx,esi
c000f1ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c9:	05 00 10 00 00       	add    eax,0x1000
c000f1ce:	c1 e8 0c             	shr    eax,0xc
c000f1d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f1dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1e1:	25 ff 0f 00 00       	and    eax,0xfff
c000f1e6:	89 c6                	mov    esi,eax
c000f1e8:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1ee:	83 ec 0c             	sub    esp,0xc
c000f1f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1f5:	e8 fb a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f1fa:	83 c4 10             	add    esp,0x10
c000f1fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f201:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f207:	83 ec 0c             	sub    esp,0xc
c000f20a:	6a 01                	push   0x1
c000f20c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f210:	50                   	push   eax
c000f211:	52                   	push   edx
c000f212:	53                   	push   ebx
c000f213:	e8 f0 ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f218:	83 c4 20             	add    esp,0x20
c000f21b:	09 f0                	or     eax,esi
c000f21d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f225:	83 ec 0c             	sub    esp,0xc
c000f228:	50                   	push   eax
c000f229:	e8 db a6 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f22e:	83 c4 10             	add    esp,0x10
c000f231:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f235:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f239:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f240:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f245:	e9 be fe ff ff       	jmp    c000f108 <loadACPITables(unsigned char*)+0x11c>
c000f24a:	66 90                	xchg   ax,ax
c000f24c:	90                   	nop
c000f24d:	8d 76 00             	lea    esi,[esi+0x0]
c000f250:	83 c4 60             	add    esp,0x60
c000f253:	5b                   	pop    ebx
c000f254:	5e                   	pop    esi
c000f255:	5f                   	pop    edi
c000f256:	c3                   	ret    
c000f257:	90                   	nop

c000f258 <findRSDT(unsigned char*)>:
c000f258:	57                   	push   edi
c000f259:	56                   	push   esi
c000f25a:	53                   	push   ebx
c000f25b:	83 ec 50             	sub    esp,0x50
c000f25e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f263:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f269:	83 e0 04             	and    eax,0x4
c000f26c:	0f b6 c0             	movzx  eax,al
c000f26f:	85 c0                	test   eax,eax
c000f271:	75 0d                	jne    c000f280 <findRSDT(unsigned char*)+0x28>
c000f273:	b8 00 00 00 00       	mov    eax,0x0
c000f278:	e9 2b 01 00 00       	jmp    c000f3a8 <findRSDT(unsigned char*)+0x150>
c000f27d:	8d 76 00             	lea    esi,[esi+0x0]
c000f280:	89 e0                	mov    eax,esp
c000f282:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f286:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f28a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f28e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f296:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f29a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f29e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f2a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f2a6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2aa:	89 c6                	mov    esi,eax
c000f2ac:	89 d7                	mov    edi,edx
c000f2ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2b0:	89 c8                	mov    eax,ecx
c000f2b2:	89 fa                	mov    edx,edi
c000f2b4:	89 f3                	mov    ebx,esi
c000f2b6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2c2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2c6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f2ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f2d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2ea:	25 ff 0f 00 00       	and    eax,0xfff
c000f2ef:	89 c6                	mov    esi,eax
c000f2f1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	6a 02                	push   0x2
c000f2fc:	e8 f4 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f301:	83 c4 10             	add    esp,0x10
c000f304:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f308:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f30e:	83 ec 0c             	sub    esp,0xc
c000f311:	6a 01                	push   0x1
c000f313:	6a 02                	push   0x2
c000f315:	50                   	push   eax
c000f316:	52                   	push   edx
c000f317:	53                   	push   ebx
c000f318:	e8 eb ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f31d:	83 c4 20             	add    esp,0x20
c000f320:	09 f0                	or     eax,esi
c000f322:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f326:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f32a:	25 ff 0f 00 00       	and    eax,0xfff
c000f32f:	89 c6                	mov    esi,eax
c000f331:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f337:	83 ec 0c             	sub    esp,0xc
c000f33a:	6a 02                	push   0x2
c000f33c:	e8 b4 a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f341:	83 c4 10             	add    esp,0x10
c000f344:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f348:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f34e:	83 ec 0c             	sub    esp,0xc
c000f351:	6a 01                	push   0x1
c000f353:	6a 02                	push   0x2
c000f355:	50                   	push   eax
c000f356:	52                   	push   edx
c000f357:	53                   	push   ebx
c000f358:	e8 ab ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f35d:	83 c4 20             	add    esp,0x20
c000f360:	09 f0                	or     eax,esi
c000f362:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f366:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f36b:	85 c0                	test   eax,eax
c000f36d:	75 11                	jne    c000f380 <findRSDT(unsigned char*)+0x128>
c000f36f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f376:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f37a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f37e:	eb 24                	jmp    c000f3a4 <findRSDT(unsigned char*)+0x14c>
c000f380:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f385:	83 f8 02             	cmp    eax,0x2
c000f388:	75 12                	jne    c000f39c <findRSDT(unsigned char*)+0x144>
c000f38a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f391:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f395:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f399:	eb 09                	jmp    c000f3a4 <findRSDT(unsigned char*)+0x14c>
c000f39b:	90                   	nop
c000f39c:	b8 00 00 00 00       	mov    eax,0x0
c000f3a1:	eb 05                	jmp    c000f3a8 <findRSDT(unsigned char*)+0x150>
c000f3a3:	90                   	nop
c000f3a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3a8:	83 c4 50             	add    esp,0x50
c000f3ab:	5b                   	pop    ebx
c000f3ac:	5e                   	pop    esi
c000f3ad:	5f                   	pop    edi
c000f3ae:	c3                   	ret    
c000f3af:	90                   	nop

c000f3b0 <findDataTable(unsigned char*, char*)>:
c000f3b0:	83 ec 1c             	sub    esp,0x1c
c000f3b3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3be:	83 e0 04             	and    eax,0x4
c000f3c1:	0f b6 c0             	movzx  eax,al
c000f3c4:	85 c0                	test   eax,eax
c000f3c6:	75 08                	jne    c000f3d0 <findDataTable(unsigned char*, char*)+0x20>
c000f3c8:	b8 00 00 00 00       	mov    eax,0x0
c000f3cd:	eb 5d                	jmp    c000f42c <findDataTable(unsigned char*, char*)+0x7c>
c000f3cf:	90                   	nop
c000f3d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3d8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f3dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3e1:	7d 41                	jge    c000f424 <findDataTable(unsigned char*, char*)+0x74>
c000f3e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3e7:	c1 e0 03             	shl    eax,0x3
c000f3ea:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3ef:	83 ec 04             	sub    esp,0x4
c000f3f2:	6a 04                	push   0x4
c000f3f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f8:	50                   	push   eax
c000f3f9:	e8 82 0f ff ff       	call   c0000380 <memcmp>
c000f3fe:	83 c4 10             	add    esp,0x10
c000f401:	85 c0                	test   eax,eax
c000f403:	0f 94 c0             	sete   al
c000f406:	0f b6 c0             	movzx  eax,al
c000f409:	85 c0                	test   eax,eax
c000f40b:	74 0f                	je     c000f41c <findDataTable(unsigned char*, char*)+0x6c>
c000f40d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f411:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f418:	eb 12                	jmp    c000f42c <findDataTable(unsigned char*, char*)+0x7c>
c000f41a:	66 90                	xchg   ax,ax
c000f41c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f421:	eb b5                	jmp    c000f3d8 <findDataTable(unsigned char*, char*)+0x28>
c000f423:	90                   	nop
c000f424:	b8 00 00 00 00       	mov    eax,0x0
c000f429:	8d 76 00             	lea    esi,[esi+0x0]
c000f42c:	83 c4 1c             	add    esp,0x1c
c000f42f:	c3                   	ret    

c000f430 <scanMADT()>:
c000f430:	53                   	push   ebx
c000f431:	83 ec 38             	sub    esp,0x38
c000f434:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f439:	25 00 04 00 00       	and    eax,0x400
c000f43e:	74 14                	je     c000f454 <scanMADT()+0x24>
c000f440:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f445:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f44b:	83 e2 fb             	and    edx,0xfffffffb
c000f44e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f454:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f459:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f45f:	83 e0 04             	and    eax,0x4
c000f462:	0f b6 c0             	movzx  eax,al
c000f465:	85 c0                	test   eax,eax
c000f467:	0f 84 6b 04 00 00    	je     c000f8d8 <scanMADT()+0x4a8>
c000f46d:	e8 e2 fa ff ff       	call   c000ef54 <findRSDP()>
c000f472:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f477:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f47c:	85 c0                	test   eax,eax
c000f47e:	75 1c                	jne    c000f49c <scanMADT()+0x6c>
c000f480:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f485:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f48b:	83 e2 fb             	and    edx,0xfffffffb
c000f48e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f494:	e9 47 04 00 00       	jmp    c000f8e0 <scanMADT()+0x4b0>
c000f499:	8d 76 00             	lea    esi,[esi+0x0]
c000f49c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4a1:	83 ec 0c             	sub    esp,0xc
c000f4a4:	50                   	push   eax
c000f4a5:	e8 ae fd ff ff       	call   c000f258 <findRSDT(unsigned char*)>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4b2:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4b7:	85 c0                	test   eax,eax
c000f4b9:	75 19                	jne    c000f4d4 <scanMADT()+0xa4>
c000f4bb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4c0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4c6:	83 e2 fb             	and    edx,0xfffffffb
c000f4c9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4cf:	e9 0c 04 00 00       	jmp    c000f8e0 <scanMADT()+0x4b0>
c000f4d4:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4d9:	83 ec 0c             	sub    esp,0xc
c000f4dc:	50                   	push   eax
c000f4dd:	e8 0a fb ff ff       	call   c000efec <loadACPITables(unsigned char*)>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4ea:	83 ec 08             	sub    esp,0x8
c000f4ed:	68 ac 1f 02 c0       	push   0xc0021fac
c000f4f2:	50                   	push   eax
c000f4f3:	e8 b8 fe ff ff       	call   c000f3b0 <findDataTable(unsigned char*, char*)>
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f504:	75 1a                	jne    c000f520 <scanMADT()+0xf0>
c000f506:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f50b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f511:	83 e2 fe             	and    edx,0xfffffffe
c000f514:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f51a:	e9 c1 03 00 00       	jmp    c000f8e0 <scanMADT()+0x4b0>
c000f51f:	90                   	nop
c000f520:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f528:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f52c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f52f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f533:	0f 87 a7 03 00 00    	ja     c000f8e0 <scanMADT()+0x4b0>
c000f539:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f541:	0f 87 99 03 00 00    	ja     c000f8e0 <scanMADT()+0x4b0>
c000f547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f54b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f553:	8d 50 01             	lea    edx,[eax+0x1]
c000f556:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f55a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f55e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f562:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f56a:	8d 50 01             	lea    edx,[eax+0x1]
c000f56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f571:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f575:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f579:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f57d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f582:	83 f8 02             	cmp    eax,0x2
c000f585:	0f 86 51 03 00 00    	jbe    c000f8dc <scanMADT()+0x4ac>
c000f58b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f590:	85 c0                	test   eax,eax
c000f592:	75 58                	jne    c000f5ec <scanMADT()+0x1bc>
c000f594:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f598:	8d 50 01             	lea    edx,[eax+0x1]
c000f59b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f59f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5a5:	0f b6 d2             	movzx  edx,dl
c000f5a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5ac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5b0:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ba:	8d 50 01             	lea    edx,[eax+0x1]
c000f5bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c1:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5c7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f5ca:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f5d0:	0f b6 d2             	movzx  edx,dl
c000f5d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5d7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5db:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5e6:	e9 d9 02 00 00       	jmp    c000f8c4 <scanMADT()+0x494>
c000f5eb:	90                   	nop
c000f5ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5f1:	83 f8 01             	cmp    eax,0x1
c000f5f4:	0f 85 1a 01 00 00    	jne    c000f714 <scanMADT()+0x2e4>
c000f5fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5fe:	8d 50 01             	lea    edx,[eax+0x1]
c000f601:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f605:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f60b:	0f b6 d2             	movzx  edx,dl
c000f60e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f612:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f616:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f61c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f625:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f629:	01 d0                	add    eax,edx
c000f62b:	83 c0 2c             	add    eax,0x2c
c000f62e:	8a 00                	mov    al,BYTE PTR [eax]
c000f630:	0f b6 d0             	movzx  edx,al
c000f633:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f637:	8d 48 01             	lea    ecx,[eax+0x1]
c000f63a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f63e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f642:	0f b6 c0             	movzx  eax,al
c000f645:	c1 e0 08             	shl    eax,0x8
c000f648:	89 d1                	mov    ecx,edx
c000f64a:	09 c1                	or     ecx,eax
c000f64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f650:	8d 50 02             	lea    edx,[eax+0x2]
c000f653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f657:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f65b:	0f b6 c0             	movzx  eax,al
c000f65e:	c1 e0 10             	shl    eax,0x10
c000f661:	09 c1                	or     ecx,eax
c000f663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f667:	8d 50 03             	lea    edx,[eax+0x3]
c000f66a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f66e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f672:	0f b6 c0             	movzx  eax,al
c000f675:	c1 e0 18             	shl    eax,0x18
c000f678:	09 c1                	or     ecx,eax
c000f67a:	89 ca                	mov    edx,ecx
c000f67c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f681:	0f b6 c0             	movzx  eax,al
c000f684:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f68b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f690:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f694:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f698:	01 d0                	add    eax,edx
c000f69a:	83 c0 2c             	add    eax,0x2c
c000f69d:	8a 00                	mov    al,BYTE PTR [eax]
c000f69f:	0f b6 d0             	movzx  edx,al
c000f6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6b1:	0f b6 c0             	movzx  eax,al
c000f6b4:	c1 e0 08             	shl    eax,0x8
c000f6b7:	89 d1                	mov    ecx,edx
c000f6b9:	09 c1                	or     ecx,eax
c000f6bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6bf:	8d 50 02             	lea    edx,[eax+0x2]
c000f6c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6ca:	0f b6 c0             	movzx  eax,al
c000f6cd:	c1 e0 10             	shl    eax,0x10
c000f6d0:	09 c1                	or     ecx,eax
c000f6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d6:	8d 50 03             	lea    edx,[eax+0x3]
c000f6d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6dd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6e1:	0f b6 c0             	movzx  eax,al
c000f6e4:	c1 e0 18             	shl    eax,0x18
c000f6e7:	09 c1                	or     ecx,eax
c000f6e9:	89 ca                	mov    edx,ecx
c000f6eb:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6f0:	0f b6 c0             	movzx  eax,al
c000f6f3:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6fa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6ff:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f704:	83 c0 01             	add    eax,0x1
c000f707:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f70c:	e9 b3 01 00 00       	jmp    c000f8c4 <scanMADT()+0x494>
c000f711:	8d 76 00             	lea    esi,[esi+0x0]
c000f714:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f719:	83 f8 02             	cmp    eax,0x2
c000f71c:	0f 85 ea 00 00 00    	jne    c000f80c <scanMADT()+0x3dc>
c000f722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f726:	8d 50 01             	lea    edx,[eax+0x1]
c000f729:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f72d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f731:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f735:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f739:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f73d:	8d 50 01             	lea    edx,[eax+0x1]
c000f740:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f744:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f748:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f74c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f750:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f754:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f758:	01 d0                	add    eax,edx
c000f75a:	83 c0 2c             	add    eax,0x2c
c000f75d:	8a 00                	mov    al,BYTE PTR [eax]
c000f75f:	0f b6 d0             	movzx  edx,al
c000f762:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f766:	8d 48 01             	lea    ecx,[eax+0x1]
c000f769:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f771:	0f b6 c0             	movzx  eax,al
c000f774:	c1 e0 08             	shl    eax,0x8
c000f777:	89 d1                	mov    ecx,edx
c000f779:	09 c1                	or     ecx,eax
c000f77b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77f:	8d 50 02             	lea    edx,[eax+0x2]
c000f782:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f786:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f78a:	0f b6 c0             	movzx  eax,al
c000f78d:	c1 e0 10             	shl    eax,0x10
c000f790:	09 c1                	or     ecx,eax
c000f792:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f796:	8d 50 03             	lea    edx,[eax+0x3]
c000f799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7a1:	0f b6 c0             	movzx  eax,al
c000f7a4:	c1 e0 18             	shl    eax,0x18
c000f7a7:	09 c8                	or     eax,ecx
c000f7a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7ad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ba:	01 d0                	add    eax,edx
c000f7bc:	83 c0 2c             	add    eax,0x2c
c000f7bf:	8a 00                	mov    al,BYTE PTR [eax]
c000f7c1:	0f b6 d0             	movzx  edx,al
c000f7c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c8:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7cf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7d3:	0f b6 c0             	movzx  eax,al
c000f7d6:	c1 e0 08             	shl    eax,0x8
c000f7d9:	09 d0                	or     eax,edx
c000f7db:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7e0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7e5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7ee:	88 90 c8 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc938],dl
c000f7f4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7f9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f7fe:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f806:	e9 b9 00 00 00       	jmp    c000f8c4 <scanMADT()+0x494>
c000f80b:	90                   	nop
c000f80c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f811:	83 f8 04             	cmp    eax,0x4
c000f814:	0f 85 9a 00 00 00    	jne    c000f8b4 <scanMADT()+0x484>
c000f81a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f81e:	8d 50 01             	lea    edx,[eax+0x1]
c000f821:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f825:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f829:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f82d:	0f b6 c0             	movzx  eax,al
c000f830:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f834:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f83c:	01 d0                	add    eax,edx
c000f83e:	83 c0 2c             	add    eax,0x2c
c000f841:	8a 00                	mov    al,BYTE PTR [eax]
c000f843:	0f b6 d0             	movzx  edx,al
c000f846:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f84a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f84d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f851:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f855:	0f b6 c0             	movzx  eax,al
c000f858:	c1 e0 08             	shl    eax,0x8
c000f85b:	09 d0                	or     eax,edx
c000f85d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f861:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86a:	8d 50 01             	lea    edx,[eax+0x1]
c000f86d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f871:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f875:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f879:	0f b6 c0             	movzx  eax,al
c000f87c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f884:	c1 e0 08             	shl    eax,0x8
c000f887:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f88b:	89 c1                	mov    ecx,eax
c000f88d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f891:	c1 e0 18             	shl    eax,0x18
c000f894:	89 c3                	mov    ebx,eax
c000f896:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f89b:	8d 50 01             	lea    edx,[eax+0x1]
c000f89e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f8a4:	09 d9                	or     ecx,ebx
c000f8a6:	89 ca                	mov    edx,ecx
c000f8a8:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8af:	eb 13                	jmp    c000f8c4 <scanMADT()+0x494>
c000f8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b9:	83 f8 05             	cmp    eax,0x5
c000f8bc:	75 06                	jne    c000f8c4 <scanMADT()+0x494>
c000f8be:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8c3:	90                   	nop
c000f8c4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f8c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8cd:	01 d0                	add    eax,edx
c000f8cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f8d3:	e9 50 fc ff ff       	jmp    c000f528 <scanMADT()+0xf8>
c000f8d8:	90                   	nop
c000f8d9:	eb 05                	jmp    c000f8e0 <scanMADT()+0x4b0>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f8e0:	83 c4 38             	add    esp,0x38
c000f8e3:	5b                   	pop    ebx
c000f8e4:	c3                   	ret    
c000f8e5:	90                   	nop
c000f8e6:	66 90                	xchg   ax,ax

c000f8e8 <ACPI::ACPI()>:
c000f8e8:	83 ec 0c             	sub    esp,0xc
c000f8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ef:	83 ec 08             	sub    esp,0x8
c000f8f2:	68 b1 1f 02 c0       	push   0xc0021fb1
c000f8f7:	50                   	push   eax
c000f8f8:	e8 3b d2 ff ff       	call   c000cb38 <Device::Device(char const*)>
c000f8fd:	83 c4 10             	add    esp,0x10
c000f900:	ba 20 21 02 c0       	mov    edx,0xc0022120
c000f905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f909:	89 10                	mov    DWORD PTR [eax],edx
c000f90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f90f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f91a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f928:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f932:	e8 f9 fa ff ff       	call   c000f430 <scanMADT()>
c000f937:	90                   	nop
c000f938:	83 c4 0c             	add    esp,0xc
c000f93b:	c3                   	ret    

c000f93c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f93c:	83 ec 2c             	sub    esp,0x2c
c000f93f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f943:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f947:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f94b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f94f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f954:	88 c8                	mov    al,cl
c000f956:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f95a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f95f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f967:	90                   	nop
c000f968:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f96c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f972:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f976:	0f 8d b0 00 00 00    	jge    c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f97c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f984:	83 c2 2a             	add    edx,0x2a
c000f987:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f98b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f990:	0f b7 c0             	movzx  eax,ax
c000f993:	39 c2                	cmp    edx,eax
c000f995:	0f 85 85 00 00 00    	jne    c000fa20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f99b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f99f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9a3:	83 c2 2a             	add    edx,0x2a
c000f9a6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9aa:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9af:	0f b6 c0             	movzx  eax,al
c000f9b2:	39 c2                	cmp    edx,eax
c000f9b4:	75 6a                	jne    c000fa20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9b6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9bb:	85 c0                	test   eax,eax
c000f9bd:	74 3d                	je     c000f9fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9c7:	83 c2 2a             	add    edx,0x2a
c000f9ca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f9ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9d5:	39 c2                	cmp    edx,eax
c000f9d7:	74 13                	je     c000f9ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f9d9:	83 ec 0c             	sub    esp,0xc
c000f9dc:	68 2c 1f 02 c0       	push   0xc0021f2c
c000f9e1:	e8 81 1b 00 00       	call   c0011567 <KePanic(char const*)>
c000f9e6:	83 c4 10             	add    esp,0x10
c000f9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9ec:	83 ec 0c             	sub    esp,0xc
c000f9ef:	68 b6 1f 02 c0       	push   0xc0021fb6
c000f9f4:	e8 6e 1b 00 00       	call   c0011567 <KePanic(char const*)>
c000f9f9:	83 c4 10             	add    esp,0x10
c000f9fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa08:	83 c2 2a             	add    edx,0x2a
c000fa0b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa0f:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa11:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa14:	89 01                	mov    DWORD PTR [ecx],eax
c000fa16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa19:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa1e:	66 90                	xchg   ax,ax
c000fa20:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa25:	e9 3e ff ff ff       	jmp    c000f968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa2a:	66 90                	xchg   ax,ax
c000fa2c:	90                   	nop
c000fa2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa31:	83 c4 2c             	add    esp,0x2c
c000fa34:	c2 04 00             	ret    0x4
c000fa37:	90                   	nop

c000fa38 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa38:	83 ec 1c             	sub    esp,0x1c
c000fa3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa3f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa47:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa4c:	88 c8                	mov    al,cl
c000fa4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa52:	88 d0                	mov    al,dl
c000fa54:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa5c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa66:	83 c2 2a             	add    edx,0x2a
c000fa69:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fa6d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fa71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa75:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa7f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa86:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fa8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa95:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa99:	83 c0 01             	add    eax,0x1
c000fa9c:	88 c1                	mov    cl,al
c000fa9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa2:	83 c2 2a             	add    edx,0x2a
c000faa5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000faa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faad:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000faba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fabe:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000facc:	8d 50 01             	lea    edx,[eax+0x1]
c000facf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fadd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fae3:	3d 00 02 00 00       	cmp    eax,0x200
c000fae8:	75 12                	jne    c000fafc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000faea:	83 ec 0c             	sub    esp,0xc
c000faed:	68 c5 1f 02 c0       	push   0xc0021fc5
c000faf2:	e8 70 1a 00 00       	call   c0011567 <KePanic(char const*)>
c000faf7:	83 c4 10             	add    esp,0x10
c000fafa:	66 90                	xchg   ax,ax
c000fafc:	90                   	nop
c000fafd:	83 c4 1c             	add    esp,0x1c
c000fb00:	c3                   	ret    
c000fb01:	90                   	nop
c000fb02:	66 90                	xchg   ax,ax

c000fb04 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb04:	b8 00 00 00 00       	mov    eax,0x0
c000fb09:	c3                   	ret    
c000fb0a:	66 90                	xchg   ax,ax

c000fb0c <ACPI::detectPCI()>:
c000fb0c:	53                   	push   ebx
c000fb0d:	83 ec 28             	sub    esp,0x28
c000fb10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb15:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb1a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb1f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb25:	83 e0 04             	and    eax,0x4
c000fb28:	0f b6 c0             	movzx  eax,al
c000fb2b:	85 c0                	test   eax,eax
c000fb2d:	74 2d                	je     c000fb5c <ACPI::detectPCI()+0x50>
c000fb2f:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb34:	83 ec 08             	sub    esp,0x8
c000fb37:	68 e2 1f 02 c0       	push   0xc0021fe2
c000fb3c:	50                   	push   eax
c000fb3d:	e8 6e f8 ff ff       	call   c000f3b0 <findDataTable(unsigned char*, char*)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb49:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb4e:	74 0c                	je     c000fb5c <ACPI::detectPCI()+0x50>
c000fb50:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb55:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb5a:	66 90                	xchg   ax,ax
c000fb5c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb68:	8a 00                	mov    al,BYTE PTR [eax]
c000fb6a:	0f b6 c0             	movzx  eax,al
c000fb6d:	83 f8 01             	cmp    eax,0x1
c000fb70:	75 0e                	jne    c000fb80 <ACPI::detectPCI()+0x74>
c000fb72:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb77:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb7c:	eb 2e                	jmp    c000fbac <ACPI::detectPCI()+0xa0>
c000fb7e:	66 90                	xchg   ax,ax
c000fb80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb84:	8a 00                	mov    al,BYTE PTR [eax]
c000fb86:	0f b6 c0             	movzx  eax,al
c000fb89:	83 f8 02             	cmp    eax,0x2
c000fb8c:	75 1e                	jne    c000fbac <ACPI::detectPCI()+0xa0>
c000fb8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb93:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb98:	85 c0                	test   eax,eax
c000fb9a:	74 10                	je     c000fbac <ACPI::detectPCI()+0xa0>
c000fb9c:	83 ec 0c             	sub    esp,0xc
c000fb9f:	68 5c 1f 02 c0       	push   0xc0021f5c
c000fba4:	e8 be 19 00 00       	call   c0011567 <KePanic(char const*)>
c000fba9:	83 c4 10             	add    esp,0x10
c000fbac:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fbb0:	83 f0 01             	xor    eax,0x1
c000fbb3:	0f b6 c0             	movzx  eax,al
c000fbb6:	85 c0                	test   eax,eax
c000fbb8:	74 46                	je     c000fc00 <ACPI::detectPCI()+0xf4>
c000fbba:	e8 71 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbc3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fbc8:	75 0e                	jne    c000fbd8 <ACPI::detectPCI()+0xcc>
c000fbca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbcf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbd4:	eb 2a                	jmp    c000fc00 <ACPI::detectPCI()+0xf4>
c000fbd6:	66 90                	xchg   ax,ax
c000fbd8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fbdd:	75 21                	jne    c000fc00 <ACPI::detectPCI()+0xf4>
c000fbdf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbe4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbe9:	85 c0                	test   eax,eax
c000fbeb:	74 13                	je     c000fc00 <ACPI::detectPCI()+0xf4>
c000fbed:	83 ec 0c             	sub    esp,0xc
c000fbf0:	68 5c 1f 02 c0       	push   0xc0021f5c
c000fbf5:	e8 6d 19 00 00       	call   c0011567 <KePanic(char const*)>
c000fbfa:	83 c4 10             	add    esp,0x10
c000fbfd:	8d 76 00             	lea    esi,[esi+0x0]
c000fc00:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc05:	85 c0                	test   eax,eax
c000fc07:	0f 84 87 00 00 00    	je     c000fc94 <ACPI::detectPCI()+0x188>
c000fc0d:	83 ec 0c             	sub    esp,0xc
c000fc10:	68 e7 1f 02 c0       	push   0xc0021fe7
c000fc15:	e8 4f 12 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c000fc1a:	83 c4 10             	add    esp,0x10
c000fc1d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc2c:	e8 a2 7e ff ff       	call   c0007ad3 <malloc>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	89 c3                	mov    ebx,eax
c000fc36:	83 ec 0c             	sub    esp,0xc
c000fc39:	53                   	push   ebx
c000fc3a:	e8 27 b5 00 00       	call   c001b166 <PCI::PCI()>
c000fc3f:	83 c4 10             	add    esp,0x10
c000fc42:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc4a:	83 ec 08             	sub    esp,0x8
c000fc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc51:	50                   	push   eax
c000fc52:	e8 49 cd ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c000fc57:	83 c4 10             	add    esp,0x10
c000fc5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc60:	83 c0 08             	add    eax,0x8
c000fc63:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc65:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc6a:	85 d2                	test   edx,edx
c000fc6c:	74 0a                	je     c000fc78 <ACPI::detectPCI()+0x16c>
c000fc6e:	ba 01 00 00 00       	mov    edx,0x1
c000fc73:	eb 0b                	jmp    c000fc80 <ACPI::detectPCI()+0x174>
c000fc75:	8d 76 00             	lea    esi,[esi+0x0]
c000fc78:	ba 02 00 00 00       	mov    edx,0x2
c000fc7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc80:	6a 00                	push   0x0
c000fc82:	6a 00                	push   0x0
c000fc84:	52                   	push   edx
c000fc85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc89:	ff d0                	call   eax
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	e9 91 00 00 00       	jmp    c000fd24 <ACPI::detectPCI()+0x218>
c000fc93:	90                   	nop
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	68 ff 1f 02 c0       	push   0xc0021fff
c000fc9c:	e8 c8 11 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fcab:	83 ec 0c             	sub    esp,0xc
c000fcae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcb2:	e8 1c 7e ff ff       	call   c0007ad3 <malloc>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	89 c3                	mov    ebx,eax
c000fcbc:	83 ec 0c             	sub    esp,0xc
c000fcbf:	53                   	push   ebx
c000fcc0:	e8 49 c0 00 00       	call   c001bd0e <IDE::IDE()>
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcd0:	83 ec 08             	sub    esp,0x8
c000fcd3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcd7:	50                   	push   eax
c000fcd8:	e8 c3 cc ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fce4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcff:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0e:	83 c0 08             	add    eax,0x8
c000fd11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd13:	6a 00                	push   0x0
c000fd15:	6a 00                	push   0x0
c000fd17:	6a 00                	push   0x0
c000fd19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd1d:	ff d0                	call   eax
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	66 90                	xchg   ax,ax
c000fd24:	90                   	nop
c000fd25:	83 c4 28             	add    esp,0x28
c000fd28:	5b                   	pop    ebx
c000fd29:	c3                   	ret    
c000fd2a:	66 90                	xchg   ax,ax

c000fd2c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd2c:	83 ec 1c             	sub    esp,0x1c
c000fd2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd33:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd36:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd3a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd3f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd44:	83 ec 08             	sub    esp,0x8
c000fd47:	52                   	push   edx
c000fd48:	50                   	push   eax
c000fd49:	e8 4c 74 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd55:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd5a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd5f:	83 ec 04             	sub    esp,0x4
c000fd62:	6a 01                	push   0x1
c000fd64:	52                   	push   edx
c000fd65:	50                   	push   eax
c000fd66:	e8 47 75 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd6b:	83 c4 10             	add    esp,0x10
c000fd6e:	90                   	nop
c000fd6f:	83 c4 1c             	add    esp,0x1c
c000fd72:	c3                   	ret    
c000fd73:	90                   	nop

c000fd74 <ACPI::sleep()>:
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd7c:	85 c0                	test   eax,eax
c000fd7e:	74 08                	je     c000fd88 <ACPI::sleep()+0x14>
c000fd80:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd85:	ff d0                	call   eax
c000fd87:	90                   	nop
c000fd88:	90                   	nop
c000fd89:	83 c4 0c             	add    esp,0xc
c000fd8c:	c3                   	ret    
c000fd8d:	90                   	nop
c000fd8e:	66 90                	xchg   ax,ax

c000fd90 <ACPI::open(int, int, void*)>:
c000fd90:	55                   	push   ebp
c000fd91:	89 e5                	mov    ebp,esp
c000fd93:	53                   	push   ebx
c000fd94:	81 ec 74 01 00 00    	sub    esp,0x174
c000fd9a:	83 ec 0c             	sub    esp,0xc
c000fd9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fda0:	e8 67 fd ff ff       	call   c000fb0c <ACPI::detectPCI()>
c000fda5:	83 c4 10             	add    esp,0x10
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	68 84 1f 02 c0       	push   0xc0021f84
c000fdb0:	e8 b4 10 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdbd:	8a 00                	mov    al,BYTE PTR [eax]
c000fdbf:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fdc2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fdc6:	83 f8 01             	cmp    eax,0x1
c000fdc9:	75 15                	jne    c000fde0 <ACPI::open(int, int, void*)+0x50>
c000fdcb:	83 ec 0c             	sub    esp,0xc
c000fdce:	68 14 20 02 c0       	push   0xc0022014
c000fdd3:	e8 b2 4d 00 00       	call   c0014b8a <Thr::loadKernelSymbolTable(char const*)>
c000fdd8:	83 c4 10             	add    esp,0x10
c000fddb:	eb 33                	jmp    c000fe10 <ACPI::open(int, int, void*)+0x80>
c000fddd:	8d 76 00             	lea    esi,[esi+0x0]
c000fde0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fde4:	3d bb 00 00 00       	cmp    eax,0xbb
c000fde9:	75 15                	jne    c000fe00 <ACPI::open(int, int, void*)+0x70>
c000fdeb:	83 ec 0c             	sub    esp,0xc
c000fdee:	68 32 20 02 c0       	push   0xc0022032
c000fdf3:	e8 92 4d 00 00       	call   c0014b8a <Thr::loadKernelSymbolTable(char const*)>
c000fdf8:	83 c4 10             	add    esp,0x10
c000fdfb:	eb 13                	jmp    c000fe10 <ACPI::open(int, int, void*)+0x80>
c000fdfd:	8d 76 00             	lea    esi,[esi+0x0]
c000fe00:	83 ec 0c             	sub    esp,0xc
c000fe03:	68 50 20 02 c0       	push   0xc0022050
c000fe08:	e8 5a 17 00 00       	call   c0011567 <KePanic(char const*)>
c000fe0d:	83 c4 10             	add    esp,0x10
c000fe10:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fe14:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fe1b:	83 ec 0c             	sub    esp,0xc
c000fe1e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fe21:	e8 ad 7c ff ff       	call   c0007ad3 <malloc>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	89 c3                	mov    ebx,eax
c000fe2b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe30:	83 ec 04             	sub    esp,0x4
c000fe33:	50                   	push   eax
c000fe34:	68 6a 20 02 c0       	push   0xc002206a
c000fe39:	53                   	push   ebx
c000fe3a:	e8 e3 bc ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fe45:	83 ec 08             	sub    esp,0x8
c000fe48:	6a 01                	push   0x1
c000fe4a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe4d:	e8 ee bc ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c000fe52:	83 c4 10             	add    esp,0x10
c000fe55:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fe58:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fe5c:	75 12                	jne    c000fe70 <ACPI::open(int, int, void*)+0xe0>
c000fe5e:	83 ec 0c             	sub    esp,0xc
c000fe61:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe64:	e8 35 bd ff ff       	call   c000bb9e <File::close()>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	eb 06                	jmp    c000fe74 <ACPI::open(int, int, void*)+0xe4>
c000fe6e:	66 90                	xchg   ax,ax
c000fe70:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe74:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fe78:	74 16                	je     c000fe90 <ACPI::open(int, int, void*)+0x100>
c000fe7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fe7d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe7f:	83 c0 08             	add    eax,0x8
c000fe82:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe84:	83 ec 0c             	sub    esp,0xc
c000fe87:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe8a:	ff d0                	call   eax
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	90                   	nop
c000fe90:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fe93:	83 f0 01             	xor    eax,0x1
c000fe96:	0f b6 c0             	movzx  eax,al
c000fe99:	85 c0                	test   eax,eax
c000fe9b:	74 3b                	je     c000fed8 <ACPI::open(int, int, void*)+0x148>
c000fe9d:	83 ec 0c             	sub    esp,0xc
c000fea0:	68 88 20 02 c0       	push   0xc0022088
c000fea5:	e8 bf 0f 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c000feaa:	83 c4 10             	add    esp,0x10
c000fead:	83 ec 04             	sub    esp,0x4
c000feb0:	6a 0c                	push   0xc
c000feb2:	68 a3 20 02 c0       	push   0xc00220a3
c000feb7:	68 b4 20 02 c0       	push   0xc00220b4
c000febc:	e8 21 3f 00 00       	call   c0013de2 <Reg::readIntWithDefault(char*, char*, int)>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fec7:	83 ec 0c             	sub    esp,0xc
c000feca:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fecd:	e8 48 99 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fed2:	83 c4 10             	add    esp,0x10
c000fed5:	8d 76 00             	lea    esi,[esi+0x0]
c000fed8:	83 ec 0c             	sub    esp,0xc
c000fedb:	68 15 0b 02 c0       	push   0xc0020b15
c000fee0:	e8 84 0f 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000feeb:	83 ec 08             	sub    esp,0x8
c000feee:	6a 13                	push   0x13
c000fef0:	50                   	push   eax
c000fef1:	e8 c2 cd ff ff       	call   c000ccb8 <getDevicesOfType(DeviceType)>
c000fef6:	83 c4 0c             	add    esp,0xc
c000fef9:	8d 76 00             	lea    esi,[esi+0x0]
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff02:	50                   	push   eax
c000ff03:	e8 08 00 01 00       	call   c001ff10 <LinkedList<Device>::isEmpty()>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	83 f0 01             	xor    eax,0x1
c000ff0e:	0f b6 c0             	movzx  eax,al
c000ff11:	85 c0                	test   eax,eax
c000ff13:	0f 84 1f 01 00 00    	je     c0010038 <ACPI::open(int, int, void*)+0x2a8>
c000ff19:	83 ec 0c             	sub    esp,0xc
c000ff1c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff1f:	50                   	push   eax
c000ff20:	e8 07 00 01 00       	call   c001ff2c <LinkedList<Device>::getFirstElement()>
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ff2b:	83 ec 0c             	sub    esp,0xc
c000ff2e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff31:	50                   	push   eax
c000ff32:	e8 fd ff 00 00       	call   c001ff34 <LinkedList<Device>::removeFirst()>
c000ff37:	83 c4 10             	add    esp,0x10
c000ff3a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ff3d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ff40:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ff43:	b8 24 00 00 00       	mov    eax,0x24
c000ff48:	83 e0 fc             	and    eax,0xfffffffc
c000ff4b:	89 c3                	mov    ebx,eax
c000ff4d:	b8 00 00 00 00       	mov    eax,0x0
c000ff52:	66 90                	xchg   ax,ax
c000ff54:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ff5b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ff62:	83 c0 04             	add    eax,0x4
c000ff65:	39 d8                	cmp    eax,ebx
c000ff67:	72 eb                	jb     c000ff54 <ACPI::open(int, int, void*)+0x1c4>
c000ff69:	83 ec 08             	sub    esp,0x8
c000ff6c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ff72:	50                   	push   eax
c000ff73:	83 ec 24             	sub    esp,0x24
c000ff76:	89 e1                	mov    ecx,esp
c000ff78:	b8 24 00 00 00       	mov    eax,0x24
c000ff7d:	83 e0 fc             	and    eax,0xfffffffc
c000ff80:	89 c3                	mov    ebx,eax
c000ff82:	b8 00 00 00 00       	mov    eax,0x0
c000ff87:	90                   	nop
c000ff88:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ff8f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ff92:	83 c0 04             	add    eax,0x4
c000ff95:	39 d8                	cmp    eax,ebx
c000ff97:	72 ef                	jb     c000ff88 <ACPI::open(int, int, void*)+0x1f8>
c000ff99:	e8 b0 b6 00 00       	call   c001b64e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ff9e:	83 c4 30             	add    esp,0x30
c000ffa1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ffa4:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ffa8:	0f 84 4e ff ff ff    	je     c000fefc <ACPI::open(int, int, void*)+0x16c>
c000ffae:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ffb5:	83 ec 0c             	sub    esp,0xc
c000ffb8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ffbb:	e8 13 7b ff ff       	call   c0007ad3 <malloc>
c000ffc0:	83 c4 10             	add    esp,0x10
c000ffc3:	89 c3                	mov    ebx,eax
c000ffc5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ffca:	83 ec 04             	sub    esp,0x4
c000ffcd:	50                   	push   eax
c000ffce:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ffd1:	53                   	push   ebx
c000ffd2:	e8 4b bb ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c000ffd7:	83 c4 10             	add    esp,0x10
c000ffda:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ffdd:	83 ec 0c             	sub    esp,0xc
c000ffe0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ffe3:	e8 1c be ff ff       	call   c000be04 <File::exists()>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	0f b6 c0             	movzx  eax,al
c000ffee:	85 c0                	test   eax,eax
c000fff0:	74 22                	je     c0010014 <ACPI::open(int, int, void*)+0x284>
c000fff2:	83 ec 08             	sub    esp,0x8
c000fff5:	6a 01                	push   0x1
c000fff7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fffa:	e8 0d 56 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	83 ec 08             	sub    esp,0x8
c0010005:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0010008:	50                   	push   eax
c0010009:	e8 3e 58 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c001000e:	83 c4 10             	add    esp,0x10
c0010011:	8d 76 00             	lea    esi,[esi+0x0]
c0010014:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0010018:	0f 84 de fe ff ff    	je     c000fefc <ACPI::open(int, int, void*)+0x16c>
c001001e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0010021:	8b 00                	mov    eax,DWORD PTR [eax]
c0010023:	83 c0 08             	add    eax,0x8
c0010026:	8b 00                	mov    eax,DWORD PTR [eax]
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001002e:	ff d0                	call   eax
c0010030:	83 c4 10             	add    esp,0x10
c0010033:	e9 c4 fe ff ff       	jmp    c000fefc <ACPI::open(int, int, void*)+0x16c>
c0010038:	83 ec 0c             	sub    esp,0xc
c001003b:	8d 45 b8             	lea    eax,[ebp-0x48]
c001003e:	50                   	push   eax
c001003f:	e8 c8 fe 00 00       	call   c001ff0c <LinkedList<Device>::~LinkedList()>
c0010044:	83 c4 10             	add    esp,0x10
c0010047:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001004d:	83 ec 08             	sub    esp,0x8
c0010050:	6a 01                	push   0x1
c0010052:	68 bb 20 02 c0       	push   0xc00220bb
c0010057:	e8 b0 55 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c001005c:	83 c4 10             	add    esp,0x10
c001005f:	83 ec 08             	sub    esp,0x8
c0010062:	53                   	push   ebx
c0010063:	50                   	push   eax
c0010064:	e8 e3 57 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010071:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010077:	83 e0 04             	and    eax,0x4
c001007a:	0f b6 c0             	movzx  eax,al
c001007d:	85 c0                	test   eax,eax
c001007f:	0f 84 e3 00 00 00    	je     c0010168 <ACPI::open(int, int, void*)+0x3d8>
c0010085:	83 ec 0c             	sub    esp,0xc
c0010088:	68 d8 20 02 c0       	push   0xc00220d8
c001008d:	e8 d7 0d 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0010092:	83 c4 10             	add    esp,0x10
c0010095:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001009c:	83 ec 0c             	sub    esp,0xc
c001009f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c00100a2:	e8 2c 7a ff ff       	call   c0007ad3 <malloc>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	89 c3                	mov    ebx,eax
c00100ac:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100b1:	83 ec 04             	sub    esp,0x4
c00100b4:	50                   	push   eax
c00100b5:	68 f5 20 02 c0       	push   0xc00220f5
c00100ba:	53                   	push   ebx
c00100bb:	e8 62 ba ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00100c6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100ca:	74 1c                	je     c00100e8 <ACPI::open(int, int, void*)+0x358>
c00100cc:	83 ec 0c             	sub    esp,0xc
c00100cf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00100d2:	e8 2d bd ff ff       	call   c000be04 <File::exists()>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	0f b6 c0             	movzx  eax,al
c00100dd:	85 c0                	test   eax,eax
c00100df:	74 07                	je     c00100e8 <ACPI::open(int, int, void*)+0x358>
c00100e1:	b0 01                	mov    al,0x1
c00100e3:	eb 07                	jmp    c00100ec <ACPI::open(int, int, void*)+0x35c>
c00100e5:	8d 76 00             	lea    esi,[esi+0x0]
c00100e8:	b0 00                	mov    al,0x0
c00100ea:	66 90                	xchg   ax,ax
c00100ec:	0f b6 c0             	movzx  eax,al
c00100ef:	85 c0                	test   eax,eax
c00100f1:	74 21                	je     c0010114 <ACPI::open(int, int, void*)+0x384>
c00100f3:	83 ec 08             	sub    esp,0x8
c00100f6:	6a 01                	push   0x1
c00100f8:	68 f5 20 02 c0       	push   0xc00220f5
c00100fd:	e8 0a 55 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c0010102:	83 c4 10             	add    esp,0x10
c0010105:	83 ec 08             	sub    esp,0x8
c0010108:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001010b:	50                   	push   eax
c001010c:	e8 3b 57 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010118:	74 1e                	je     c0010138 <ACPI::open(int, int, void*)+0x3a8>
c001011a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001011e:	74 18                	je     c0010138 <ACPI::open(int, int, void*)+0x3a8>
c0010120:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0010123:	8b 00                	mov    eax,DWORD PTR [eax]
c0010125:	83 c0 08             	add    eax,0x8
c0010128:	8b 00                	mov    eax,DWORD PTR [eax]
c001012a:	83 ec 0c             	sub    esp,0xc
c001012d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010130:	ff d0                	call   eax
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	8d 76 00             	lea    esi,[esi+0x0]
c0010138:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c001013d:	83 ec 08             	sub    esp,0x8
c0010140:	68 12 21 02 c0       	push   0xc0022112
c0010145:	50                   	push   eax
c0010146:	e8 65 f2 ff ff       	call   c000f3b0 <findDataTable(unsigned char*, char*)>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0010151:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0010155:	74 11                	je     c0010168 <ACPI::open(int, int, void*)+0x3d8>
c0010157:	83 ec 08             	sub    esp,0x8
c001015a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001015d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010160:	e8 c7 fb ff ff       	call   c000fd2c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010165:	83 c4 10             	add    esp,0x10
c0010168:	b8 00 00 00 00       	mov    eax,0x0
c001016d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010170:	c9                   	leave  
c0010171:	c3                   	ret    

c0010172 <CPU::close(int, int, void*)>:
c0010172:	31 c0                	xor    eax,eax
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010176:	60                   	pusha  
c0010177:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001017b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001017f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010183:	9c                   	pushf  
c0010184:	fa                   	cli    
c0010185:	0f 09                	wbinvd 
c0010187:	0f 30                	wrmsr  
c0010189:	9d                   	popf   
c001018a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001018e:	89 02                	mov    DWORD PTR [edx],eax
c0010190:	61                   	popa   
c0010191:	c3                   	ret    

c0010192 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010192:	60                   	pusha  
c0010193:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010197:	9c                   	pushf  
c0010198:	fa                   	cli    
c0010199:	0f 09                	wbinvd 
c001019b:	31 c0                	xor    eax,eax
c001019d:	31 d2                	xor    edx,edx
c001019f:	0f 32                	rdmsr  
c00101a1:	9d                   	popf   
c00101a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a6:	89 02                	mov    DWORD PTR [edx],eax
c00101a8:	61                   	popa   
c00101a9:	c3                   	ret    

c00101aa <CPU::AMD_K6_writeback(int, int, int)>:
c00101aa:	56                   	push   esi
c00101ab:	53                   	push   ebx
c00101ac:	83 ec 10             	sub    esp,0x10
c00101af:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00101b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101b8:	75 5d                	jne    c0010217 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101ba:	83 f8 08             	cmp    eax,0x8
c00101bd:	75 09                	jne    c00101c8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00101bf:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00101c4:	7e 13                	jle    c00101d9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00101c6:	eb 30                	jmp    c00101f8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00101c8:	83 f8 06             	cmp    eax,0x6
c00101cb:	7c 4a                	jl     c0010217 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101cd:	83 f8 07             	cmp    eax,0x7
c00101d0:	7e 07                	jle    c00101d9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00101d2:	83 f8 09             	cmp    eax,0x9
c00101d5:	74 21                	je     c00101f8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00101d7:	eb 3e                	jmp    c0010217 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101d9:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00101df:	89 e6                	mov    esi,esp
c00101e1:	56                   	push   esi
c00101e2:	68 82 00 00 c0       	push   0xc0000082
c00101e7:	e8 a6 ff ff ff       	call   c0010192 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00101ec:	c1 eb 15             	shr    ebx,0x15
c00101ef:	56                   	push   esi
c00101f0:	83 e3 7e             	and    ebx,0x7e
c00101f3:	6a 00                	push   0x0
c00101f5:	53                   	push   ebx
c00101f6:	eb 12                	jmp    c001020a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00101f8:	89 e3                	mov    ebx,esp
c00101fa:	53                   	push   ebx
c00101fb:	68 82 00 00 c0       	push   0xc0000082
c0010200:	e8 8d ff ff ff       	call   c0010192 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010205:	53                   	push   ebx
c0010206:	6a 00                	push   0x0
c0010208:	6a 00                	push   0x0
c001020a:	68 82 00 00 c0       	push   0xc0000082
c001020f:	e8 62 ff ff ff       	call   c0010176 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010214:	83 c4 18             	add    esp,0x18
c0010217:	83 c4 10             	add    esp,0x10
c001021a:	5b                   	pop    ebx
c001021b:	5e                   	pop    esi
c001021c:	c3                   	ret    
c001021d:	90                   	nop

c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001021e:	55                   	push   ebp
c001021f:	57                   	push   edi
c0010220:	56                   	push   esi
c0010221:	53                   	push   ebx
c0010222:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010226:	39 05 d8 36 02 c0    	cmp    DWORD PTR ds:0xc00236d8,eax
c001022c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010230:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010234:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010238:	75 23                	jne    c001025d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001023a:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c001023f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010243:	89 06                	mov    DWORD PTR [esi],eax
c0010245:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001024a:	89 07                	mov    DWORD PTR [edi],eax
c001024c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010251:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010254:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010259:	89 02                	mov    DWORD PTR [edx],eax
c001025b:	eb 3f                	jmp    c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001025d:	31 c9                	xor    ecx,ecx
c001025f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010263:	0f a2                	cpuid  
c0010265:	89 06                	mov    DWORD PTR [esi],eax
c0010267:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001026b:	89 1f                	mov    DWORD PTR [edi],ebx
c001026d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010270:	89 10                	mov    DWORD PTR [eax],edx
c0010272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010276:	a3 d8 36 02 c0       	mov    ds:0xc00236d8,eax
c001027b:	8b 06                	mov    eax,DWORD PTR [esi]
c001027d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010282:	8b 07                	mov    eax,DWORD PTR [edi]
c0010284:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010289:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001028c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010295:	8b 00                	mov    eax,DWORD PTR [eax]
c0010297:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001029c:	5b                   	pop    ebx
c001029d:	5e                   	pop    esi
c001029e:	5f                   	pop    edi
c001029f:	5d                   	pop    ebp
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <CPU::cpuidCheckEDX(unsigned int)>:
c00102a2:	83 ec 10             	sub    esp,0x10
c00102a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102a9:	50                   	push   eax
c00102aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102ae:	50                   	push   eax
c00102af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102b3:	50                   	push   eax
c00102b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102b8:	50                   	push   eax
c00102b9:	6a 01                	push   0x1
c00102bb:	e8 5e ff ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102c4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00102c8:	0f 95 c0             	setne  al
c00102cb:	83 c4 24             	add    esp,0x24
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <CPU::cpuidCheckECX(unsigned int)>:
c00102d0:	83 ec 10             	sub    esp,0x10
c00102d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102d7:	50                   	push   eax
c00102d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102dc:	50                   	push   eax
c00102dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e1:	50                   	push   eax
c00102e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e6:	50                   	push   eax
c00102e7:	6a 01                	push   0x1
c00102e9:	e8 30 ff ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102f2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00102f6:	0f 95 c0             	setne  al
c00102f9:	83 c4 24             	add    esp,0x24
c00102fc:	c3                   	ret    
c00102fd:	90                   	nop

c00102fe <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00102fe:	83 ec 10             	sub    esp,0x10
c0010301:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010305:	50                   	push   eax
c0010306:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001030a:	50                   	push   eax
c001030b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001030f:	50                   	push   eax
c0010310:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010314:	50                   	push   eax
c0010315:	6a 07                	push   0x7
c0010317:	e8 02 ff ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001031c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010320:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010324:	0f 95 c0             	setne  al
c0010327:	83 c4 24             	add    esp,0x24
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001032c:	83 ec 10             	sub    esp,0x10
c001032f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010333:	50                   	push   eax
c0010334:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010338:	50                   	push   eax
c0010339:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001033d:	50                   	push   eax
c001033e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010342:	50                   	push   eax
c0010343:	6a 07                	push   0x7
c0010345:	e8 d4 fe ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001034a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001034e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010352:	0f 95 c0             	setne  al
c0010355:	83 c4 24             	add    esp,0x24
c0010358:	c3                   	ret    
c0010359:	90                   	nop

c001035a <CPU::CPU()>:
c001035a:	83 ec 0c             	sub    esp,0xc
c001035d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010361:	83 ec 08             	sub    esp,0x8
c0010364:	68 35 22 02 c0       	push   0xc0022235
c0010369:	50                   	push   eax
c001036a:	e8 c9 c7 ff ff       	call   c000cb38 <Device::Device(char const*)>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c0010377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001037b:	89 10                	mov    DWORD PTR [eax],edx
c001037d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010381:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001038b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001038f:	05 78 01 00 00       	add    eax,0x178
c0010394:	83 ec 0c             	sub    esp,0xc
c0010397:	50                   	push   eax
c0010398:	e8 df 6f ff ff       	call   c000737c <GDT::GDT()>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a4:	05 7c 09 00 00       	add    eax,0x97c
c00103a9:	83 ec 0c             	sub    esp,0xc
c00103ac:	50                   	push   eax
c00103ad:	e8 1a 72 ff ff       	call   c00075cc <IDT::IDT()>
c00103b2:	83 c4 10             	add    esp,0x10
c00103b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b9:	05 7c 11 00 00       	add    eax,0x117c
c00103be:	83 ec 0c             	sub    esp,0xc
c00103c1:	50                   	push   eax
c00103c2:	e8 65 8b ff ff       	call   c0008f2c <TSS::TSS()>
c00103c7:	83 c4 10             	add    esp,0x10
c00103ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ce:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00103d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d9:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00103e3:	90                   	nop
c00103e4:	83 c4 0c             	add    esp,0xc
c00103e7:	c3                   	ret    

c00103e8 <CPU::displayFeatures()>:
c00103e8:	c3                   	ret    
c00103e9:	90                   	nop

c00103ea <CPU::detectFeatures()>:
c00103ea:	55                   	push   ebp
c00103eb:	57                   	push   edi
c00103ec:	56                   	push   esi
c00103ed:	53                   	push   ebx
c00103ee:	83 ec 30             	sub    esp,0x30
c00103f1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00103f5:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00103ff:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010405:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001040c:	6a 0d                	push   0xd
c001040e:	6a 00                	push   0x0
c0010410:	55                   	push   ebp
c0010411:	e8 da 00 ff ff       	call   c00004f0 <memset>
c0010416:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010425:	0f 84 db 05 00 00    	je     c0010a06 <CPU::detectFeatures()+0x61c>
c001042b:	83 ec 0c             	sub    esp,0xc
c001042e:	89 ef                	mov    edi,ebp
c0010430:	6a 10                	push   0x10
c0010432:	e8 6b fe ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0010437:	83 e0 01             	and    eax,0x1
c001043a:	8d 14 00             	lea    edx,[eax+eax*1]
c001043d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010443:	83 e0 fd             	and    eax,0xfffffffd
c0010446:	09 d0                	or     eax,edx
c0010448:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001044e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010455:	e8 48 fe ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c001045a:	83 e0 01             	and    eax,0x1
c001045d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010464:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001046a:	83 e0 fb             	and    eax,0xfffffffb
c001046d:	09 d0                	or     eax,edx
c001046f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010475:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001047c:	e8 21 fe ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0010481:	83 e0 01             	and    eax,0x1
c0010484:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001048b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010491:	83 e0 f7             	and    eax,0xfffffff7
c0010494:	09 d0                	or     eax,edx
c0010496:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001049c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00104a3:	e8 fa fd ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c00104a8:	83 e0 01             	and    eax,0x1
c00104ab:	c1 e0 04             	shl    eax,0x4
c00104ae:	89 c2                	mov    edx,eax
c00104b0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104b6:	83 e0 ef             	and    eax,0xffffffef
c00104b9:	09 d0                	or     eax,edx
c00104bb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00104c8:	e8 d5 fd ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c00104cd:	83 e0 01             	and    eax,0x1
c00104d0:	c1 e0 05             	shl    eax,0x5
c00104d3:	89 c2                	mov    edx,eax
c00104d5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104db:	83 e0 df             	and    eax,0xffffffdf
c00104de:	09 d0                	or     eax,edx
c00104e0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00104ed:	e8 b0 fd ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c00104f2:	83 e0 01             	and    eax,0x1
c00104f5:	8d 14 00             	lea    edx,[eax+eax*1]
c00104f8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00104fe:	83 e0 fd             	and    eax,0xfffffffd
c0010501:	09 d0                	or     eax,edx
c0010503:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010509:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010510:	e8 8d fd ff ff       	call   c00102a2 <CPU::cpuidCheckEDX(unsigned int)>
c0010515:	83 e0 01             	and    eax,0x1
c0010518:	c1 e0 06             	shl    eax,0x6
c001051b:	89 c2                	mov    edx,eax
c001051d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010523:	83 e0 bf             	and    eax,0xffffffbf
c0010526:	09 d0                	or     eax,edx
c0010528:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001052e:	58                   	pop    eax
c001052f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010533:	50                   	push   eax
c0010534:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010538:	50                   	push   eax
c0010539:	8d 74 24 28          	lea    esi,[esp+0x28]
c001053d:	56                   	push   esi
c001053e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010542:	50                   	push   eax
c0010543:	6a 00                	push   0x0
c0010545:	e8 d4 fc ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001054a:	b8 04 00 00 00       	mov    eax,0x4
c001054f:	89 c1                	mov    ecx,eax
c0010551:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010553:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010559:	89 c1                	mov    ecx,eax
c001055b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001055f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010561:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010567:	89 c1                	mov    ecx,eax
c0010569:	8d 74 24 38          	lea    esi,[esp+0x38]
c001056d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001056f:	83 c4 18             	add    esp,0x18
c0010572:	68 44 21 02 c0       	push   0xc0022144
c0010577:	55                   	push   ebp
c0010578:	e8 03 02 ff ff       	call   c0000780 <strcmp>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	85 c0                	test   eax,eax
c0010582:	75 0f                	jne    c0010593 <CPU::detectFeatures()+0x1a9>
c0010584:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001058e:	e9 22 02 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c0010593:	50                   	push   eax
c0010594:	50                   	push   eax
c0010595:	68 51 21 02 c0       	push   0xc0022151
c001059a:	55                   	push   ebp
c001059b:	e8 e0 01 ff ff       	call   c0000780 <strcmp>
c00105a0:	83 c4 10             	add    esp,0x10
c00105a3:	85 c0                	test   eax,eax
c00105a5:	74 dd                	je     c0010584 <CPU::detectFeatures()+0x19a>
c00105a7:	50                   	push   eax
c00105a8:	50                   	push   eax
c00105a9:	68 5e 21 02 c0       	push   0xc002215e
c00105ae:	55                   	push   ebp
c00105af:	e8 cc 01 ff ff       	call   c0000780 <strcmp>
c00105b4:	83 c4 10             	add    esp,0x10
c00105b7:	85 c0                	test   eax,eax
c00105b9:	74 2a                	je     c00105e5 <CPU::detectFeatures()+0x1fb>
c00105bb:	50                   	push   eax
c00105bc:	50                   	push   eax
c00105bd:	68 6b 21 02 c0       	push   0xc002216b
c00105c2:	55                   	push   ebp
c00105c3:	e8 b8 01 ff ff       	call   c0000780 <strcmp>
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	85 c0                	test   eax,eax
c00105cd:	74 16                	je     c00105e5 <CPU::detectFeatures()+0x1fb>
c00105cf:	50                   	push   eax
c00105d0:	50                   	push   eax
c00105d1:	68 78 21 02 c0       	push   0xc0022178
c00105d6:	55                   	push   ebp
c00105d7:	e8 a4 01 ff ff       	call   c0000780 <strcmp>
c00105dc:	83 c4 10             	add    esp,0x10
c00105df:	85 c0                	test   eax,eax
c00105e1:	74 48                	je     c001062b <CPU::detectFeatures()+0x241>
c00105e3:	eb 0f                	jmp    c00105f4 <CPU::detectFeatures()+0x20a>
c00105e5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00105ef:	e9 c1 01 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c00105f4:	50                   	push   eax
c00105f5:	50                   	push   eax
c00105f6:	68 85 21 02 c0       	push   0xc0022185
c00105fb:	55                   	push   ebp
c00105fc:	e8 7f 01 ff ff       	call   c0000780 <strcmp>
c0010601:	83 c4 10             	add    esp,0x10
c0010604:	85 c0                	test   eax,eax
c0010606:	74 23                	je     c001062b <CPU::detectFeatures()+0x241>
c0010608:	57                   	push   edi
c0010609:	57                   	push   edi
c001060a:	68 92 21 02 c0       	push   0xc0022192
c001060f:	55                   	push   ebp
c0010610:	e8 6b 01 ff ff       	call   c0000780 <strcmp>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	85 c0                	test   eax,eax
c001061a:	75 1e                	jne    c001063a <CPU::detectFeatures()+0x250>
c001061c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010626:	e9 8a 01 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001062b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010635:	e9 7b 01 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001063a:	56                   	push   esi
c001063b:	56                   	push   esi
c001063c:	68 9f 21 02 c0       	push   0xc002219f
c0010641:	55                   	push   ebp
c0010642:	e8 39 01 ff ff       	call   c0000780 <strcmp>
c0010647:	83 c4 10             	add    esp,0x10
c001064a:	85 c0                	test   eax,eax
c001064c:	75 0f                	jne    c001065d <CPU::detectFeatures()+0x273>
c001064e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010658:	e9 58 01 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001065d:	51                   	push   ecx
c001065e:	51                   	push   ecx
c001065f:	68 5e 21 02 c0       	push   0xc002215e
c0010664:	55                   	push   ebp
c0010665:	e8 16 01 ff ff       	call   c0000780 <strcmp>
c001066a:	83 c4 10             	add    esp,0x10
c001066d:	85 c0                	test   eax,eax
c001066f:	75 0f                	jne    c0010680 <CPU::detectFeatures()+0x296>
c0010671:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001067b:	e9 35 01 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c0010680:	52                   	push   edx
c0010681:	52                   	push   edx
c0010682:	68 ac 21 02 c0       	push   0xc00221ac
c0010687:	55                   	push   ebp
c0010688:	e8 f3 00 ff ff       	call   c0000780 <strcmp>
c001068d:	83 c4 10             	add    esp,0x10
c0010690:	85 c0                	test   eax,eax
c0010692:	75 0f                	jne    c00106a3 <CPU::detectFeatures()+0x2b9>
c0010694:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001069e:	e9 12 01 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c00106a3:	50                   	push   eax
c00106a4:	50                   	push   eax
c00106a5:	68 b9 21 02 c0       	push   0xc00221b9
c00106aa:	55                   	push   ebp
c00106ab:	e8 d0 00 ff ff       	call   c0000780 <strcmp>
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	85 c0                	test   eax,eax
c00106b5:	75 0f                	jne    c00106c6 <CPU::detectFeatures()+0x2dc>
c00106b7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00106c1:	e9 ef 00 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c00106c6:	50                   	push   eax
c00106c7:	50                   	push   eax
c00106c8:	68 c6 21 02 c0       	push   0xc00221c6
c00106cd:	55                   	push   ebp
c00106ce:	e8 ad 00 ff ff       	call   c0000780 <strcmp>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	85 c0                	test   eax,eax
c00106d8:	75 0f                	jne    c00106e9 <CPU::detectFeatures()+0x2ff>
c00106da:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00106e4:	e9 cc 00 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c00106e9:	50                   	push   eax
c00106ea:	50                   	push   eax
c00106eb:	68 d3 21 02 c0       	push   0xc00221d3
c00106f0:	55                   	push   ebp
c00106f1:	e8 8a 00 ff ff       	call   c0000780 <strcmp>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	85 c0                	test   eax,eax
c00106fb:	75 0f                	jne    c001070c <CPU::detectFeatures()+0x322>
c00106fd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010707:	e9 a9 00 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001070c:	50                   	push   eax
c001070d:	50                   	push   eax
c001070e:	68 e0 21 02 c0       	push   0xc00221e0
c0010713:	55                   	push   ebp
c0010714:	e8 67 00 ff ff       	call   c0000780 <strcmp>
c0010719:	83 c4 10             	add    esp,0x10
c001071c:	85 c0                	test   eax,eax
c001071e:	75 0f                	jne    c001072f <CPU::detectFeatures()+0x345>
c0010720:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001072a:	e9 86 00 00 00       	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001072f:	50                   	push   eax
c0010730:	50                   	push   eax
c0010731:	68 ed 21 02 c0       	push   0xc00221ed
c0010736:	55                   	push   ebp
c0010737:	e8 44 00 ff ff       	call   c0000780 <strcmp>
c001073c:	83 c4 10             	add    esp,0x10
c001073f:	85 c0                	test   eax,eax
c0010741:	75 0c                	jne    c001074f <CPU::detectFeatures()+0x365>
c0010743:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001074d:	eb 66                	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001074f:	50                   	push   eax
c0010750:	50                   	push   eax
c0010751:	68 fa 21 02 c0       	push   0xc00221fa
c0010756:	55                   	push   ebp
c0010757:	e8 24 00 ff ff       	call   c0000780 <strcmp>
c001075c:	83 c4 10             	add    esp,0x10
c001075f:	85 c0                	test   eax,eax
c0010761:	75 0c                	jne    c001076f <CPU::detectFeatures()+0x385>
c0010763:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001076d:	eb 46                	jmp    c00107b5 <CPU::detectFeatures()+0x3cb>
c001076f:	57                   	push   edi
c0010770:	57                   	push   edi
c0010771:	68 07 22 02 c0       	push   0xc0022207
c0010776:	55                   	push   ebp
c0010777:	e8 04 00 ff ff       	call   c0000780 <strcmp>
c001077c:	83 c4 10             	add    esp,0x10
c001077f:	85 c0                	test   eax,eax
c0010781:	74 e0                	je     c0010763 <CPU::detectFeatures()+0x379>
c0010783:	56                   	push   esi
c0010784:	56                   	push   esi
c0010785:	68 14 22 02 c0       	push   0xc0022214
c001078a:	55                   	push   ebp
c001078b:	e8 f0 ff fe ff       	call   c0000780 <strcmp>
c0010790:	83 c4 10             	add    esp,0x10
c0010793:	85 c0                	test   eax,eax
c0010795:	74 cc                	je     c0010763 <CPU::detectFeatures()+0x379>
c0010797:	51                   	push   ecx
c0010798:	51                   	push   ecx
c0010799:	68 21 22 02 c0       	push   0xc0022221
c001079e:	55                   	push   ebp
c001079f:	e8 dc ff fe ff       	call   c0000780 <strcmp>
c00107a4:	83 c4 10             	add    esp,0x10
c00107a7:	85 c0                	test   eax,eax
c00107a9:	74 b8                	je     c0010763 <CPU::detectFeatures()+0x379>
c00107ab:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00107b5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00107ba:	0f 86 be 00 00 00    	jbe    c001087e <CPU::detectFeatures()+0x494>
c00107c0:	83 ec 0c             	sub    esp,0xc
c00107c3:	68 80 00 00 00       	push   0x80
c00107c8:	e8 31 fb ff ff       	call   c00102fe <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107cd:	83 e0 01             	and    eax,0x1
c00107d0:	c1 e0 06             	shl    eax,0x6
c00107d3:	89 c2                	mov    edx,eax
c00107d5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00107db:	83 e0 bf             	and    eax,0xffffffbf
c00107de:	09 d0                	or     eax,edx
c00107e0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00107e6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00107ed:	e8 0c fb ff ff       	call   c00102fe <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107f2:	83 e0 01             	and    eax,0x1
c00107f5:	c1 e0 04             	shl    eax,0x4
c00107f8:	89 c2                	mov    edx,eax
c00107fa:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010800:	83 e0 ef             	and    eax,0xffffffef
c0010803:	09 d0                	or     eax,edx
c0010805:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001080b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010812:	e8 e7 fa ff ff       	call   c00102fe <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010817:	89 c2                	mov    edx,eax
c0010819:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001081f:	c1 e2 07             	shl    edx,0x7
c0010822:	83 e0 7f             	and    eax,0x7f
c0010825:	09 d0                	or     eax,edx
c0010827:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001082d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010834:	e8 f3 fa ff ff       	call   c001032c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010839:	83 e0 01             	and    eax,0x1
c001083c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010843:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010849:	83 e0 f7             	and    eax,0xfffffff7
c001084c:	09 d0                	or     eax,edx
c001084e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010854:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001085b:	e8 cc fa ff ff       	call   c001032c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	83 e0 01             	and    eax,0x1
c0010866:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001086d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010873:	83 e0 fb             	and    eax,0xfffffffb
c0010876:	09 d0                	or     eax,edx
c0010878:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001087e:	83 ec 0c             	sub    esp,0xc
c0010881:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010885:	50                   	push   eax
c0010886:	8d 44 24 28          	lea    eax,[esp+0x28]
c001088a:	50                   	push   eax
c001088b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001088f:	57                   	push   edi
c0010890:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010894:	56                   	push   esi
c0010895:	6a 01                	push   0x1
c0010897:	e8 82 f9 ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001089c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108a0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00108a6:	89 c1                	mov    ecx,eax
c00108a8:	83 e1 0f             	and    ecx,0xf
c00108ab:	83 e2 f0             	and    edx,0xfffffff0
c00108ae:	09 ca                	or     edx,ecx
c00108b0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00108b6:	89 c2                	mov    edx,eax
c00108b8:	c1 ea 04             	shr    edx,0x4
c00108bb:	83 e2 0f             	and    edx,0xf
c00108be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00108c2:	89 d1                	mov    ecx,edx
c00108c4:	83 c4 20             	add    esp,0x20
c00108c7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00108cd:	c1 e1 06             	shl    ecx,0x6
c00108d0:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00108d6:	09 ca                	or     edx,ecx
c00108d8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00108df:	89 c2                	mov    edx,eax
c00108e1:	c1 ea 08             	shr    edx,0x8
c00108e4:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00108ea:	83 e2 0f             	and    edx,0xf
c00108ed:	89 d5                	mov    ebp,edx
c00108ef:	83 e5 03             	and    ebp,0x3
c00108f2:	c1 e5 06             	shl    ebp,0x6
c00108f5:	83 e1 3f             	and    ecx,0x3f
c00108f8:	09 e9                	or     ecx,ebp
c00108fa:	89 d5                	mov    ebp,edx
c00108fc:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010902:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010908:	c1 ed 02             	shr    ebp,0x2
c001090b:	83 e1 c0             	and    ecx,0xffffffc0
c001090e:	09 e9                	or     ecx,ebp
c0010910:	89 c5                	mov    ebp,eax
c0010912:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010918:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001091e:	c1 ed 08             	shr    ebp,0x8
c0010921:	83 e5 30             	and    ebp,0x30
c0010924:	83 e1 cf             	and    ecx,0xffffffcf
c0010927:	09 e9                	or     ecx,ebp
c0010929:	83 fa 06             	cmp    edx,0x6
c001092c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010932:	74 05                	je     c0010939 <CPU::detectFeatures()+0x54f>
c0010934:	83 fa 0f             	cmp    edx,0xf
c0010937:	75 64                	jne    c001099d <CPU::detectFeatures()+0x5b3>
c0010939:	89 c1                	mov    ecx,eax
c001093b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010941:	c1 e9 10             	shr    ecx,0x10
c0010944:	c1 e1 04             	shl    ecx,0x4
c0010947:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001094b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010951:	0f b6 c9             	movzx  ecx,cl
c0010954:	c1 e1 06             	shl    ecx,0x6
c0010957:	09 e9                	or     ecx,ebp
c0010959:	83 fa 0f             	cmp    edx,0xf
c001095c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010963:	75 38                	jne    c001099d <CPU::detectFeatures()+0x5b3>
c0010965:	c1 e8 14             	shr    eax,0x14
c0010968:	83 c0 0f             	add    eax,0xf
c001096b:	0f b6 c0             	movzx  eax,al
c001096e:	89 c2                	mov    edx,eax
c0010970:	c1 e8 02             	shr    eax,0x2
c0010973:	83 e2 03             	and    edx,0x3
c0010976:	89 d1                	mov    ecx,edx
c0010978:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001097e:	c1 e1 06             	shl    ecx,0x6
c0010981:	83 e2 3f             	and    edx,0x3f
c0010984:	09 ca                	or     edx,ecx
c0010986:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001098c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010992:	83 e2 c0             	and    edx,0xffffffc0
c0010995:	09 d0                	or     eax,edx
c0010997:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001099d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109a3:	83 ec 0c             	sub    esp,0xc
c00109a6:	83 c8 07             	or     eax,0x7
c00109a9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109af:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109b3:	50                   	push   eax
c00109b4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00109b8:	55                   	push   ebp
c00109b9:	57                   	push   edi
c00109ba:	56                   	push   esi
c00109bb:	68 00 00 00 80       	push   0x80000000
c00109c0:	e8 59 f8 ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109c5:	83 c4 20             	add    esp,0x20
c00109c8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00109d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00109d4:	76 1e                	jbe    c00109f4 <CPU::detectFeatures()+0x60a>
c00109d6:	83 ec 0c             	sub    esp,0xc
c00109d9:	50                   	push   eax
c00109da:	55                   	push   ebp
c00109db:	57                   	push   edi
c00109dc:	56                   	push   esi
c00109dd:	68 01 00 00 80       	push   0x80000001
c00109e2:	e8 37 f8 ff ff       	call   c001021e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109e7:	83 c4 20             	add    esp,0x20
c00109ea:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00109f4:	52                   	push   edx
c00109f5:	52                   	push   edx
c00109f6:	68 2d 22 02 c0       	push   0xc002222d
c00109fb:	53                   	push   ebx
c00109fc:	e8 29 c1 ff ff       	call   c000cb2a <Device::setName(char const*)>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	eb 69                	jmp    c0010a6f <CPU::detectFeatures()+0x685>
c0010a06:	50                   	push   eax
c0010a07:	50                   	push   eax
c0010a08:	68 92 21 02 c0       	push   0xc0022192
c0010a0d:	55                   	push   ebp
c0010a0e:	e8 3d fc fe ff       	call   c0000650 <strcpy>
c0010a13:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a1d:	e8 a1 f7 fe ff       	call   c00001c3 <is486>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	85 c0                	test   eax,eax
c0010a27:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a2d:	74 1f                	je     c0010a4e <CPU::detectFeatures()+0x664>
c0010a2f:	83 c8 07             	or     eax,0x7
c0010a32:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a38:	0f 20 c0             	mov    eax,cr0
c0010a3b:	83 e0 14             	and    eax,0x14
c0010a3e:	83 f8 04             	cmp    eax,0x4
c0010a41:	75 10                	jne    c0010a53 <CPU::detectFeatures()+0x669>
c0010a43:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a49:	83 e0 fd             	and    eax,0xfffffffd
c0010a4c:	eb 1b                	jmp    c0010a69 <CPU::detectFeatures()+0x67f>
c0010a4e:	83 e0 f8             	and    eax,0xfffffff8
c0010a51:	eb df                	jmp    c0010a32 <CPU::detectFeatures()+0x648>
c0010a53:	e8 46 f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a58:	83 e0 01             	and    eax,0x1
c0010a5b:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a5e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a64:	83 e0 fd             	and    eax,0xfffffffd
c0010a67:	09 d0                	or     eax,edx
c0010a69:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a6f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010a76:	74 17                	je     c0010a8f <CPU::detectFeatures()+0x6a5>
c0010a78:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010a7e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010a84:	83 c8 10             	or     eax,0x10
c0010a87:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010a8d:	eb 20                	jmp    c0010aaf <CPU::detectFeatures()+0x6c5>
c0010a8f:	e8 0a f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a94:	83 e0 01             	and    eax,0x1
c0010a97:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a9a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010aa0:	83 e0 fd             	and    eax,0xfffffffd
c0010aa3:	09 d0                	or     eax,edx
c0010aa5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010aab:	a8 02                	test   al,0x2
c0010aad:	75 c9                	jne    c0010a78 <CPU::detectFeatures()+0x68e>
c0010aaf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010ab6:	83 c4 2c             	add    esp,0x2c
c0010ab9:	5b                   	pop    ebx
c0010aba:	5e                   	pop    esi
c0010abb:	5f                   	pop    edi
c0010abc:	5d                   	pop    ebp
c0010abd:	c3                   	ret    

c0010abe <CPU::setupSMEP()>:
c0010abe:	0f 20 e0             	mov    eax,cr4
c0010ac1:	0d 00 00 10 00       	or     eax,0x100000
c0010ac6:	0f 22 e0             	mov    cr4,eax
c0010ac9:	c3                   	ret    

c0010aca <CPU::setupUMIP()>:
c0010aca:	0f 20 e0             	mov    eax,cr4
c0010acd:	80 cc 08             	or     ah,0x8
c0010ad0:	0f 22 e0             	mov    cr4,eax
c0010ad3:	c3                   	ret    

c0010ad4 <CPU::setupTSC()>:
c0010ad4:	0f 20 e0             	mov    eax,cr4
c0010ad7:	83 c8 04             	or     eax,0x4
c0010ada:	0f 22 e0             	mov    cr4,eax
c0010add:	c3                   	ret    

c0010ade <CPU::setupLargePages()>:
c0010ade:	0f 20 e0             	mov    eax,cr4
c0010ae1:	83 c8 10             	or     eax,0x10
c0010ae4:	0f 22 e0             	mov    cr4,eax
c0010ae7:	c3                   	ret    

c0010ae8 <CPU::setupPAT()>:
c0010ae8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010aed:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010af4:	74 2c                	je     c0010b22 <CPU::setupPAT()+0x3a>
c0010af6:	53                   	push   ebx
c0010af7:	83 ec 10             	sub    esp,0x10
c0010afa:	68 77 02 00 00       	push   0x277
c0010aff:	50                   	push   eax
c0010b00:	e8 dd 65 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010b05:	83 e2 f8             	and    edx,0xfffffff8
c0010b08:	83 ca 01             	or     edx,0x1
c0010b0b:	52                   	push   edx
c0010b0c:	50                   	push   eax
c0010b0d:	68 77 02 00 00       	push   0x277
c0010b12:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b18:	e8 f1 65 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b1d:	83 c4 28             	add    esp,0x28
c0010b20:	5b                   	pop    ebx
c0010b21:	c3                   	ret    
c0010b22:	c3                   	ret    
c0010b23:	90                   	nop

c0010b24 <CPU::setupMTRR()>:
c0010b24:	c3                   	ret    
c0010b25:	90                   	nop

c0010b26 <CPU::setupGlobalPages()>:
c0010b26:	0f 20 e0             	mov    eax,cr4
c0010b29:	0c 80                	or     al,0x80
c0010b2b:	0f 22 e0             	mov    cr4,eax
c0010b2e:	c3                   	ret    
c0010b2f:	90                   	nop

c0010b30 <CPU::allowUsermodeDataAccess()>:
c0010b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b34:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b3b:	74 03                	je     c0010b40 <CPU::allowUsermodeDataAccess()+0x10>
c0010b3d:	0f 01 cb             	stac   
c0010b40:	c3                   	ret    
c0010b41:	90                   	nop

c0010b42 <CPU::prohibitUsermodeDataAccess()>:
c0010b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b46:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b4d:	74 03                	je     c0010b52 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010b4f:	0f 01 ca             	clac   
c0010b52:	c3                   	ret    
c0010b53:	90                   	nop

c0010b54 <CPU::setupSMAP()>:
c0010b54:	0f 20 e0             	mov    eax,cr4
c0010b57:	0d 00 00 20 00       	or     eax,0x200000
c0010b5c:	0f 22 e0             	mov    cr4,eax
c0010b5f:	eb e1                	jmp    c0010b42 <CPU::prohibitUsermodeDataAccess()>
c0010b61:	90                   	nop

c0010b62 <CPU::setupFeatures()>:
c0010b62:	53                   	push   ebx
c0010b63:	83 ec 08             	sub    esp,0x8
c0010b66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b6a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010b71:	74 18                	je     c0010b8b <CPU::setupFeatures()+0x29>
c0010b73:	83 ec 0c             	sub    esp,0xc
c0010b76:	68 39 22 02 c0       	push   0xc0022239
c0010b7b:	e8 8a 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b83:	e8 42 ff ff ff       	call   c0010aca <CPU::setupUMIP()>
c0010b88:	83 c4 10             	add    esp,0x10
c0010b8b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010b92:	74 18                	je     c0010bac <CPU::setupFeatures()+0x4a>
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	68 43 22 02 c0       	push   0xc0022243
c0010b9c:	e8 69 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010ba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ba4:	e8 2b ff ff ff       	call   c0010ad4 <CPU::setupTSC()>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010bb3:	74 18                	je     c0010bcd <CPU::setupFeatures()+0x6b>
c0010bb5:	83 ec 0c             	sub    esp,0xc
c0010bb8:	68 4c 22 02 c0       	push   0xc002224c
c0010bbd:	e8 48 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bc5:	e8 14 ff ff ff       	call   c0010ade <CPU::setupLargePages()>
c0010bca:	83 c4 10             	add    esp,0x10
c0010bcd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010bd4:	74 18                	je     c0010bee <CPU::setupFeatures()+0x8c>
c0010bd6:	83 ec 0c             	sub    esp,0xc
c0010bd9:	68 55 22 02 c0       	push   0xc0022255
c0010bde:	e8 27 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010be3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be6:	e8 3b ff ff ff       	call   c0010b26 <CPU::setupGlobalPages()>
c0010beb:	83 c4 10             	add    esp,0x10
c0010bee:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010bf5:	74 18                	je     c0010c0f <CPU::setupFeatures()+0xad>
c0010bf7:	83 ec 0c             	sub    esp,0xc
c0010bfa:	68 67 22 02 c0       	push   0xc0022267
c0010bff:	e8 06 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c07:	e8 dc fe ff ff       	call   c0010ae8 <CPU::setupPAT()>
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c16:	74 11                	je     c0010c29 <CPU::setupFeatures()+0xc7>
c0010c18:	c7 44 24 10 70 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022270
c0010c20:	83 c4 08             	add    esp,0x8
c0010c23:	5b                   	pop    ebx
c0010c24:	e9 e1 9c ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010c29:	83 c4 08             	add    esp,0x8
c0010c2c:	5b                   	pop    ebx
c0010c2d:	c3                   	ret    

c0010c2e <CPU::open(int, int, void*)>:
c0010c2e:	55                   	push   ebp
c0010c2f:	57                   	push   edi
c0010c30:	56                   	push   esi
c0010c31:	53                   	push   ebx
c0010c32:	83 ec 18             	sub    esp,0x18
c0010c35:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010c3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010c41:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010c47:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010c4d:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010c53:	50                   	push   eax
c0010c54:	e8 85 67 ff ff       	call   c00073de <GDT::setup()>
c0010c59:	83 c4 0c             	add    esp,0xc
c0010c5c:	6a 00                	push   0x0
c0010c5e:	68 ef be ad de       	push   0xdeadbeef
c0010c63:	55                   	push   ebp
c0010c64:	e8 07 83 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010c69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010c6c:	e8 df 82 ff ff       	call   c0008f50 <TSS::flush()>
c0010c71:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010c77:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c7a:	e8 c3 69 ff ff       	call   c0007642 <IDT::setup()>
c0010c7f:	b8 00 04 00 00       	mov    eax,0x400
c0010c84:	0f 23 f8             	mov    db7,eax
c0010c87:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010c91:	e8 4c 71 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010c96:	83 c4 10             	add    esp,0x10
c0010c99:	85 f6                	test   esi,esi
c0010c9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010ca1:	89 38                	mov    DWORD PTR [eax],edi
c0010ca3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010ca9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010cac:	74 10                	je     c0010cbe <CPU::open(int, int, void*)+0x90>
c0010cae:	50                   	push   eax
c0010caf:	50                   	push   eax
c0010cb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010cb6:	56                   	push   esi
c0010cb7:	e8 d0 8b ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010cbc:	eb 0d                	jmp    c0010ccb <CPU::open(int, int, void*)+0x9d>
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	68 7a 22 02 c0       	push   0xc002227a
c0010cc6:	e8 9c 08 00 00       	call   c0011567 <KePanic(char const*)>
c0010ccb:	83 c4 10             	add    esp,0x10
c0010cce:	83 ec 0c             	sub    esp,0xc
c0010cd1:	68 88 22 02 c0       	push   0xc0022288
c0010cd6:	e8 8e 01 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0010cdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cde:	e8 07 f7 ff ff       	call   c00103ea <CPU::detectFeatures()>
c0010ce3:	c7 04 24 ab 22 02 c0 	mov    DWORD PTR [esp],0xc00222ab
c0010cea:	e8 7a 01 00 00       	call   c0010e69 <KeSetBootMessage(char const*)>
c0010cef:	e8 43 74 00 00       	call   c0018137 <HalInitialise()>
c0010cf4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010cf9:	83 e0 10             	and    eax,0x10
c0010cfc:	83 f8 01             	cmp    eax,0x1
c0010cff:	19 c0                	sbb    eax,eax
c0010d01:	83 e0 46             	and    eax,0x46
c0010d04:	83 c0 1e             	add    eax,0x1e
c0010d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d0a:	e8 c2 d6 ff ff       	call   c000e3d1 <setupTimer(int)>
c0010d0f:	83 c4 10             	add    esp,0x10
c0010d12:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d19:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d1f:	74 0c                	je     c0010d2d <CPU::open(int, int, void*)+0xff>
c0010d21:	83 ec 0c             	sub    esp,0xc
c0010d24:	53                   	push   ebx
c0010d25:	e8 38 fe ff ff       	call   c0010b62 <CPU::setupFeatures()>
c0010d2a:	83 c4 10             	add    esp,0x10
c0010d2d:	83 c4 0c             	add    esp,0xc
c0010d30:	31 c0                	xor    eax,eax
c0010d32:	5b                   	pop    ebx
c0010d33:	5e                   	pop    esi
c0010d34:	5f                   	pop    edi
c0010d35:	5d                   	pop    ebp
c0010d36:	c3                   	ret    

c0010d37 <KeInitialiseAtexit()>:
c0010d37:	83 ec 10             	sub    esp,0x10
c0010d3a:	6a 60                	push   0x60
c0010d3c:	6a 00                	push   0x0
c0010d3e:	68 20 be 02 c0       	push   0xc002be20
c0010d43:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010d4d:	e8 9e f7 fe ff       	call   c00004f0 <memset>
c0010d52:	83 c4 1c             	add    esp,0x1c
c0010d55:	c3                   	ret    

c0010d56 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010d56:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010d5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010d5f:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010d66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d6a:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010d71:	40                   	inc    eax
c0010d72:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010d77:	83 f8 17             	cmp    eax,0x17
c0010d7a:	7e 0d                	jle    c0010d89 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010d7c:	c7 44 24 04 ec 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222ec
c0010d84:	e9 de 07 00 00       	jmp    c0011567 <KePanic(char const*)>
c0010d89:	c3                   	ret    

c0010d8a <KeExecuteAtexit()>:
c0010d8a:	53                   	push   ebx
c0010d8b:	31 db                	xor    ebx,ebx
c0010d8d:	83 ec 08             	sub    esp,0x8
c0010d90:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010d96:	7e 50                	jle    c0010de8 <KeExecuteAtexit()+0x5e>
c0010d98:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010d9f:	85 c0                	test   eax,eax
c0010da1:	74 42                	je     c0010de5 <KeExecuteAtexit()+0x5b>
c0010da3:	51                   	push   ecx
c0010da4:	50                   	push   eax
c0010da5:	53                   	push   ebx
c0010da6:	68 05 23 02 c0       	push   0xc0022305
c0010dab:	e8 5a 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010db0:	58                   	pop    eax
c0010db1:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010db8:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010dbf:	c7 04 24 27 23 02 c0 	mov    DWORD PTR [esp],0xc0022327
c0010dc6:	e8 3f 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010dcb:	c7 04 24 87 34 02 c0 	mov    DWORD PTR [esp],0xc0023487
c0010dd2:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010ddd:	e8 28 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	43                   	inc    ebx
c0010de6:	eb a8                	jmp    c0010d90 <KeExecuteAtexit()+0x6>
c0010de8:	83 c4 08             	add    esp,0x8
c0010deb:	5b                   	pop    ebx
c0010dec:	c3                   	ret    

c0010ded <KeDisplaySplashScreen()>:
c0010ded:	55                   	push   ebp
c0010dee:	bd 05 00 00 00       	mov    ebp,0x5
c0010df3:	57                   	push   edi
c0010df4:	bf 0a 00 00 00       	mov    edi,0xa
c0010df9:	56                   	push   esi
c0010dfa:	31 f6                	xor    esi,esi
c0010dfc:	53                   	push   ebx
c0010dfd:	31 db                	xor    ebx,ebx
c0010dff:	83 ec 0c             	sub    esp,0xc
c0010e02:	0f b6 96 e0 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc920]
c0010e09:	85 d2                	test   edx,edx
c0010e0b:	89 d0                	mov    eax,edx
c0010e0d:	74 52                	je     c0010e61 <KeDisplaySplashScreen()+0x74>
c0010e0f:	80 bb 16 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc8ea],0xdb
c0010e16:	75 13                	jne    c0010e2b <KeDisplaySplashScreen()+0x3e>
c0010e18:	0f b6 8b 15 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc8eb]
c0010e1f:	83 e1 fe             	and    ecx,0xfffffffe
c0010e22:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010e28:	75 01                	jne    c0010e2b <KeDisplaySplashScreen()+0x3e>
c0010e2a:	47                   	inc    edi
c0010e2b:	83 fa 0d             	cmp    edx,0xd
c0010e2e:	74 28                	je     c0010e58 <KeDisplaySplashScreen()+0x6b>
c0010e30:	83 fa 0a             	cmp    edx,0xa
c0010e33:	75 0a                	jne    c0010e3f <KeDisplaySplashScreen()+0x52>
c0010e35:	45                   	inc    ebp
c0010e36:	bf 0a 00 00 00       	mov    edi,0xa
c0010e3b:	31 db                	xor    ebx,ebx
c0010e3d:	eb 19                	jmp    c0010e58 <KeDisplaySplashScreen()+0x6b>
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	0f be c0             	movsx  eax,al
c0010e45:	55                   	push   ebp
c0010e46:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010e49:	43                   	inc    ebx
c0010e4a:	52                   	push   edx
c0010e4b:	6a 00                	push   0x0
c0010e4d:	6a 0e                	push   0xe
c0010e4f:	50                   	push   eax
c0010e50:	e8 5f 7f 00 00       	call   c0018db4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010e55:	83 c4 20             	add    esp,0x20
c0010e58:	46                   	inc    esi
c0010e59:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010e5f:	75 a1                	jne    c0010e02 <KeDisplaySplashScreen()+0x15>
c0010e61:	83 c4 0c             	add    esp,0xc
c0010e64:	5b                   	pop    ebx
c0010e65:	5e                   	pop    esi
c0010e66:	5f                   	pop    edi
c0010e67:	5d                   	pop    ebp
c0010e68:	c3                   	ret    

c0010e69 <KeSetBootMessage(char const*)>:
c0010e69:	57                   	push   edi
c0010e6a:	56                   	push   esi
c0010e6b:	53                   	push   ebx
c0010e6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010e72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010e79:	68 9e 00 00 00       	push   0x9e
c0010e7e:	6a 00                	push   0x0
c0010e80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010e84:	56                   	push   esi
c0010e85:	e8 66 f6 fe ff       	call   c00004f0 <memset>
c0010e8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e8d:	e8 ee f6 fe ff       	call   c0000580 <strlen>
c0010e92:	ba 50 00 00 00       	mov    edx,0x50
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	31 c9                	xor    ecx,ecx
c0010e9c:	29 c2                	sub    edx,eax
c0010e9e:	83 e2 fe             	and    edx,0xfffffffe
c0010ea1:	01 f2                	add    edx,esi
c0010ea3:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ea8:	84 c0                	test   al,al
c0010eaa:	74 0a                	je     c0010eb6 <KeSetBootMessage(char const*)+0x4d>
c0010eac:	80 cc 0f             	or     ah,0xf
c0010eaf:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010eb3:	41                   	inc    ecx
c0010eb4:	eb ed                	jmp    c0010ea3 <KeSetBootMessage(char const*)+0x3a>
c0010eb6:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010ebb:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ec2:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010ec8:	5b                   	pop    ebx
c0010ec9:	5e                   	pop    esi
c0010eca:	5f                   	pop    edi
c0010ecb:	c3                   	ret    

c0010ecc <Krnl::handlePowerButton()>:
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	e8 ee 06 00 00       	call   c00115c2 <KeHandlePowerButton()>
c0010ed4:	90                   	nop
c0010ed5:	83 c4 0c             	add    esp,0xc
c0010ed8:	c3                   	ret    
c0010ed9:	8d 76 00             	lea    esi,[esi+0x0]

c0010edc <Krnl::handleSleepButton()>:
c0010edc:	83 ec 0c             	sub    esp,0xc
c0010edf:	e8 13 07 00 00       	call   c00115f7 <KeHandleSleepButton()>
c0010ee4:	90                   	nop
c0010ee5:	83 c4 0c             	add    esp,0xc
c0010ee8:	c3                   	ret    

c0010ee9 <KeCalculateCRC32(unsigned char*, int)>:
c0010ee9:	53                   	push   ebx
c0010eea:	83 c8 ff             	or     eax,0xffffffff
c0010eed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010ef1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010ef5:	01 cb                	add    ebx,ecx
c0010ef7:	39 d9                	cmp    ecx,ebx
c0010ef9:	74 15                	je     c0010f10 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010efb:	41                   	inc    ecx
c0010efc:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010eff:	31 c2                	xor    edx,eax
c0010f01:	c1 e8 08             	shr    eax,0x8
c0010f04:	0f b6 d2             	movzx  edx,dl
c0010f07:	33 04 95 40 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc7c0]
c0010f0e:	eb e7                	jmp    c0010ef7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f10:	5b                   	pop    ebx
c0010f11:	f7 d0                	not    eax
c0010f13:	c3                   	ret    

c0010f14 <EnvVarContainer::getEnv(char const*)>:
c0010f14:	57                   	push   edi
c0010f15:	56                   	push   esi
c0010f16:	53                   	push   ebx
c0010f17:	31 db                	xor    ebx,ebx
c0010f19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f1d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f1f:	7e 2b                	jle    c0010f4c <EnvVarContainer::getEnv(char const*)+0x38>
c0010f21:	50                   	push   eax
c0010f22:	50                   	push   eax
c0010f23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f26:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010f2d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010f30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010f34:	e8 47 f8 fe ff       	call   c0000780 <strcmp>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	85 c0                	test   eax,eax
c0010f3e:	75 09                	jne    c0010f49 <EnvVarContainer::getEnv(char const*)+0x35>
c0010f40:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f43:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010f47:	eb 05                	jmp    c0010f4e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010f49:	43                   	inc    ebx
c0010f4a:	eb d1                	jmp    c0010f1d <EnvVarContainer::getEnv(char const*)+0x9>
c0010f4c:	31 c0                	xor    eax,eax
c0010f4e:	5b                   	pop    ebx
c0010f4f:	5e                   	pop    esi
c0010f50:	5f                   	pop    edi
c0010f51:	c3                   	ret    

c0010f52 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010f52:	55                   	push   ebp
c0010f53:	57                   	push   edi
c0010f54:	56                   	push   esi
c0010f55:	53                   	push   ebx
c0010f56:	83 ec 28             	sub    esp,0x28
c0010f59:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f5d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f61:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f65:	56                   	push   esi
c0010f66:	e8 15 f6 fe ff       	call   c0000580 <strlen>
c0010f6b:	40                   	inc    eax
c0010f6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f6f:	e8 5f 6b ff ff       	call   c0007ad3 <malloc>
c0010f74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f7b:	e8 00 f6 fe ff       	call   c0000580 <strlen>
c0010f80:	40                   	inc    eax
c0010f81:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f84:	e8 4a 6b ff ff       	call   c0007ad3 <malloc>
c0010f89:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f90:	e8 eb f5 fe ff       	call   c0000580 <strlen>
c0010f95:	83 c4 0c             	add    esp,0xc
c0010f98:	40                   	inc    eax
c0010f99:	50                   	push   eax
c0010f9a:	6a 00                	push   0x0
c0010f9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010fa0:	e8 4b f5 fe ff       	call   c00004f0 <memset>
c0010fa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fa8:	e8 d3 f5 fe ff       	call   c0000580 <strlen>
c0010fad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fb1:	8d 48 01             	lea    ecx,[eax+0x1]
c0010fb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fb9:	89 de                	mov    esi,ebx
c0010fbb:	e8 c0 f5 fe ff       	call   c0000580 <strlen>
c0010fc0:	83 c4 0c             	add    esp,0xc
c0010fc3:	40                   	inc    eax
c0010fc4:	50                   	push   eax
c0010fc5:	6a 00                	push   0x0
c0010fc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fcb:	e8 20 f5 fe ff       	call   c00004f0 <memset>
c0010fd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fd3:	e8 a8 f5 fe ff       	call   c0000580 <strlen>
c0010fd8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010fdc:	8d 48 01             	lea    ecx,[eax+0x1]
c0010fdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fe4:	40                   	inc    eax
c0010fe5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fe8:	c1 e0 03             	shl    eax,0x3
c0010feb:	5a                   	pop    edx
c0010fec:	59                   	pop    ecx
c0010fed:	50                   	push   eax
c0010fee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010ff1:	e8 c9 6a ff ff       	call   c0007abf <realloc>
c0010ff6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ff9:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ffd:	b9 08 00 00 00       	mov    ecx,0x8
c0011002:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011005:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011009:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001100b:	83 c4 2c             	add    esp,0x2c
c001100e:	5b                   	pop    ebx
c001100f:	5e                   	pop    esi
c0011010:	5f                   	pop    edi
c0011011:	5d                   	pop    ebp
c0011012:	c3                   	ret    
c0011013:	90                   	nop

c0011014 <EnvVarContainer::deleteEnv(char const*)>:
c0011014:	c3                   	ret    
c0011015:	90                   	nop

c0011016 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011016:	55                   	push   ebp
c0011017:	57                   	push   edi
c0011018:	56                   	push   esi
c0011019:	53                   	push   ebx
c001101a:	81 ec 38 01 00 00    	sub    esp,0x138
c0011020:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011027:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001102e:	68 14 01 00 00       	push   0x114
c0011033:	e8 9b 6a ff ff       	call   c0007ad3 <malloc>
c0011038:	83 c4 0c             	add    esp,0xc
c001103b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001103e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011045:	89 c3                	mov    ebx,eax
c0011047:	50                   	push   eax
c0011048:	e8 d5 aa ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c001104d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011050:	e8 af ad ff ff       	call   c000be04 <File::exists()>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	84 c0                	test   al,al
c001105a:	75 31                	jne    c001108d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001105c:	50                   	push   eax
c001105d:	50                   	push   eax
c001105e:	6a 12                	push   0x12
c0011060:	53                   	push   ebx
c0011061:	e8 da aa ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0011066:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011068:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001106b:	89 34 24             	mov    DWORD PTR [esp],esi
c001106e:	e8 0d f5 fe ff       	call   c0000580 <strlen>
c0011073:	5a                   	pop    edx
c0011074:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011078:	52                   	push   edx
c0011079:	31 d2                	xor    edx,edx
c001107b:	56                   	push   esi
c001107c:	52                   	push   edx
c001107d:	50                   	push   eax
c001107e:	53                   	push   ebx
c001107f:	ff d7                	call   edi
c0011081:	83 c4 14             	add    esp,0x14
c0011084:	53                   	push   ebx
c0011085:	e8 14 ab ff ff       	call   c000bb9e <File::close()>
c001108a:	83 c4 10             	add    esp,0x10
c001108d:	56                   	push   esi
c001108e:	31 f6                	xor    esi,esi
c0011090:	68 00 01 00 00       	push   0x100
c0011095:	6a 00                	push   0x0
c0011097:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001109b:	50                   	push   eax
c001109c:	e8 4f f4 fe ff       	call   c00004f0 <memset>
c00110a1:	5f                   	pop    edi
c00110a2:	58                   	pop    eax
c00110a3:	6a 01                	push   0x1
c00110a5:	53                   	push   ebx
c00110a6:	e8 95 aa ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c00110ab:	83 c4 10             	add    esp,0x10
c00110ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00110b6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00110be:	83 ec 0c             	sub    esp,0xc
c00110c1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00110c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110c7:	52                   	push   edx
c00110c8:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00110cc:	51                   	push   ecx
c00110cd:	6a 00                	push   0x0
c00110cf:	6a 01                	push   0x1
c00110d1:	53                   	push   ebx
c00110d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110d5:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00110da:	83 c4 20             	add    esp,0x20
c00110dd:	85 c0                	test   eax,eax
c00110df:	89 c1                	mov    ecx,eax
c00110e1:	0f 84 36 01 00 00    	je     c001121d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00110e7:	83 f8 0d             	cmp    eax,0xd
c00110ea:	0f 84 22 01 00 00    	je     c0011212 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00110f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00110f5:	0f 84 f0 00 00 00    	je     c00111eb <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00110fb:	83 f8 0a             	cmp    eax,0xa
c00110fe:	74 13                	je     c0011113 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011100:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011105:	74 0c                	je     c0011113 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011107:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001110d:	0f 8e f6 00 00 00    	jle    c0011209 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011117:	83 ec 0c             	sub    esp,0xc
c001111a:	8d 78 01             	lea    edi,[eax+0x1]
c001111d:	57                   	push   edi
c001111e:	e8 b0 69 ff ff       	call   c0007ad3 <malloc>
c0011123:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011127:	8d 56 04             	lea    edx,[esi+0x4]
c001112a:	89 14 24             	mov    DWORD PTR [esp],edx
c001112d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011131:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011135:	e8 99 69 ff ff       	call   c0007ad3 <malloc>
c001113a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001113e:	83 c4 0c             	add    esp,0xc
c0011141:	57                   	push   edi
c0011142:	6a 00                	push   0x0
c0011144:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011148:	e8 a3 f3 fe ff       	call   c00004f0 <memset>
c001114d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011151:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011155:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011159:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115b:	83 c4 0c             	add    esp,0xc
c001115e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011162:	52                   	push   edx
c0011163:	6a 00                	push   0x0
c0011165:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011169:	e8 82 f3 fe ff       	call   c00004f0 <memset>
c001116e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011172:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011176:	89 34 24             	mov    DWORD PTR [esp],esi
c0011179:	e8 02 f4 fe ff       	call   c0000580 <strlen>
c001117e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011182:	89 c1                	mov    ecx,eax
c0011184:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011186:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011189:	83 c4 10             	add    esp,0x10
c001118c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001118f:	40                   	inc    eax
c0011190:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011193:	85 d2                	test   edx,edx
c0011195:	75 0c                	jne    c00111a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011197:	83 ec 0c             	sub    esp,0xc
c001119a:	6a 08                	push   0x8
c001119c:	e8 32 69 ff ff       	call   c0007ad3 <malloc>
c00111a1:	eb 0c                	jmp    c00111af <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00111a3:	51                   	push   ecx
c00111a4:	51                   	push   ecx
c00111a5:	c1 e0 03             	shl    eax,0x3
c00111a8:	50                   	push   eax
c00111a9:	52                   	push   edx
c00111aa:	e8 10 69 ff ff       	call   c0007abf <realloc>
c00111af:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00111b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00111bb:	8d 74 24 18          	lea    esi,[esp+0x18]
c00111bf:	b9 08 00 00 00       	mov    ecx,0x8
c00111c4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00111c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111ca:	50                   	push   eax
c00111cb:	31 f6                	xor    esi,esi
c00111cd:	68 00 01 00 00       	push   0x100
c00111d2:	6a 00                	push   0x0
c00111d4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111d8:	50                   	push   eax
c00111d9:	e8 12 f3 fe ff       	call   c00004f0 <memset>
c00111de:	83 c4 10             	add    esp,0x10
c00111e1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111e9:	eb 27                	jmp    c0011212 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111eb:	83 f8 3d             	cmp    eax,0x3d
c00111ee:	74 1e                	je     c001120e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00111f0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111f6:	7f 07                	jg     c00111ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00111f8:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00111fc:	46                   	inc    esi
c00111fd:	eb 13                	jmp    c0011212 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111ff:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011207:	eb 09                	jmp    c0011212 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011209:	83 f8 3d             	cmp    eax,0x3d
c001120c:	75 ea                	jne    c00111f8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001120e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011212:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011217:	0f 85 99 fe ff ff    	jne    c00110b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001121d:	83 ec 0c             	sub    esp,0xc
c0011220:	53                   	push   ebx
c0011221:	e8 78 a9 ff ff       	call   c000bb9e <File::close()>
c0011226:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011228:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001122b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001122e:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011234:	5b                   	pop    ebx
c0011235:	5e                   	pop    esi
c0011236:	5f                   	pop    edi
c0011237:	5d                   	pop    ebp
c0011238:	c3                   	ret    
c0011239:	90                   	nop

c001123a <EnvVarContainer::__loadSystem()>:
c001123a:	83 ec 10             	sub    esp,0x10
c001123d:	68 40 3c 02 c0       	push   0xc0023c40
c0011242:	68 2c 23 02 c0       	push   0xc002232c
c0011247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124b:	e8 c6 fd ff ff       	call   c0011016 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011250:	83 c4 1c             	add    esp,0x1c
c0011253:	c3                   	ret    

c0011254 <EnvVarContainer::__loadUser()>:
c0011254:	c3                   	ret    
c0011255:	90                   	nop

c0011256 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011268:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001126b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001126f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011276:	90                   	nop
c0011277:	c3                   	ret    

c0011278 <EnvVarContainer::~EnvVarContainer()>:
c0011278:	83 ec 0c             	sub    esp,0xc
c001127b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011282:	85 c0                	test   eax,eax
c0011284:	74 1d                	je     c00112a3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128a:	8b 00                	mov    eax,DWORD PTR [eax]
c001128c:	85 c0                	test   eax,eax
c001128e:	74 13                	je     c00112a3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011297:	83 ec 0c             	sub    esp,0xc
c001129a:	50                   	push   eax
c001129b:	e8 43 68 ff ff       	call   c0007ae3 <free>
c00112a0:	83 c4 10             	add    esp,0x10
c00112a3:	90                   	nop
c00112a4:	83 c4 0c             	add    esp,0xc
c00112a7:	c3                   	ret    

c00112a8 <KeGetEnv(Process*, char const*)>:
c00112a8:	53                   	push   ebx
c00112a9:	83 ec 08             	sub    esp,0x8
c00112ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b0:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00112b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112ba:	74 04                	je     c00112c0 <KeGetEnv(Process*, char const*)+0x18>
c00112bc:	85 c0                	test   eax,eax
c00112be:	75 0b                	jne    c00112cb <KeGetEnv(Process*, char const*)+0x23>
c00112c0:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00112c5:	85 c0                	test   eax,eax
c00112c7:	75 19                	jne    c00112e2 <KeGetEnv(Process*, char const*)+0x3a>
c00112c9:	eb 27                	jmp    c00112f2 <KeGetEnv(Process*, char const*)+0x4a>
c00112cb:	52                   	push   edx
c00112cc:	52                   	push   edx
c00112cd:	53                   	push   ebx
c00112ce:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00112d4:	e8 3b fc ff ff       	call   c0010f14 <EnvVarContainer::getEnv(char const*)>
c00112d9:	83 c4 10             	add    esp,0x10
c00112dc:	85 c0                	test   eax,eax
c00112de:	75 28                	jne    c0011308 <KeGetEnv(Process*, char const*)+0x60>
c00112e0:	eb de                	jmp    c00112c0 <KeGetEnv(Process*, char const*)+0x18>
c00112e2:	52                   	push   edx
c00112e3:	52                   	push   edx
c00112e4:	53                   	push   ebx
c00112e5:	50                   	push   eax
c00112e6:	e8 29 fc ff ff       	call   c0010f14 <EnvVarContainer::getEnv(char const*)>
c00112eb:	83 c4 10             	add    esp,0x10
c00112ee:	85 c0                	test   eax,eax
c00112f0:	75 16                	jne    c0011308 <KeGetEnv(Process*, char const*)+0x60>
c00112f2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00112f6:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00112fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00112ff:	83 c4 08             	add    esp,0x8
c0011302:	5b                   	pop    ebx
c0011303:	e9 0c fc ff ff       	jmp    c0010f14 <EnvVarContainer::getEnv(char const*)>
c0011308:	83 c4 08             	add    esp,0x8
c001130b:	5b                   	pop    ebx
c001130c:	c3                   	ret    

c001130d <KeSetEnvSystem(char const*, char const*)>:
c001130d:	83 ec 10             	sub    esp,0x10
c0011310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011314:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011318:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001131e:	e8 2f fc ff ff       	call   c0010f52 <EnvVarContainer::setEnv(char const*, char const*)>
c0011323:	83 c4 1c             	add    esp,0x1c
c0011326:	c3                   	ret    

c0011327 <KeSetEnvUser(char const*, char const*)>:
c0011327:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001132c:	85 c0                	test   eax,eax
c001132e:	74 15                	je     c0011345 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011330:	83 ec 10             	sub    esp,0x10
c0011333:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001133b:	50                   	push   eax
c001133c:	e8 11 fc ff ff       	call   c0010f52 <EnvVarContainer::setEnv(char const*, char const*)>
c0011341:	83 c4 1c             	add    esp,0x1c
c0011344:	c3                   	ret    
c0011345:	c3                   	ret    

c0011346 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001134a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011354:	e9 f9 fb ff ff       	jmp    c0010f52 <EnvVarContainer::setEnv(char const*, char const*)>

c0011359 <KeDeleteEnvSystem(char const*)>:
c0011359:	c3                   	ret    

c001135a <KeDeleteEnvUser(char const*)>:
c001135a:	c3                   	ret    

c001135b <KeDeleteEnvProcess(Process*, char const*)>:
c001135b:	c3                   	ret    

c001135c <KeNewProcessEnv(Process*)>:
c001135c:	83 ec 28             	sub    esp,0x28
c001135f:	6a 0c                	push   0xc
c0011361:	e8 6d 67 ff ff       	call   c0007ad3 <malloc>
c0011366:	5a                   	pop    edx
c0011367:	59                   	pop    ecx
c0011368:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001136c:	50                   	push   eax
c001136d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011371:	e8 e0 fe ff ff       	call   c0011256 <EnvVarContainer::EnvVarContainer(Process*)>
c0011376:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001137a:	83 c4 2c             	add    esp,0x2c
c001137d:	c3                   	ret    

c001137e <KeCopyProcessEnv(Process*, Process*)>:
c001137e:	57                   	push   edi
c001137f:	56                   	push   esi
c0011380:	53                   	push   ebx
c0011381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011385:	83 ec 0c             	sub    esp,0xc
c0011388:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001138e:	6a 0c                	push   0xc
c0011390:	e8 3e 67 ff ff       	call   c0007ad3 <malloc>
c0011395:	89 c3                	mov    ebx,eax
c0011397:	58                   	pop    eax
c0011398:	5a                   	pop    edx
c0011399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001139d:	53                   	push   ebx
c001139e:	e8 b3 fe ff ff       	call   c0011256 <EnvVarContainer::EnvVarContainer(Process*)>
c00113a3:	8b 07                	mov    eax,DWORD PTR [edi]
c00113a5:	89 03                	mov    DWORD PTR [ebx],eax
c00113a7:	c1 e0 03             	shl    eax,0x3
c00113aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00113ad:	e8 21 67 ff ff       	call   c0007ad3 <malloc>
c00113b2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00113b5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00113b7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00113ba:	89 c7                	mov    edi,eax
c00113bc:	c1 e1 03             	shl    ecx,0x3
c00113bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	89 d8                	mov    eax,ebx
c00113c6:	5b                   	pop    ebx
c00113c7:	5e                   	pop    esi
c00113c8:	5f                   	pop    edi
c00113c9:	c3                   	ret    

c00113ca <KeLoadSystemEnv()>:
c00113ca:	53                   	push   ebx
c00113cb:	83 ec 14             	sub    esp,0x14
c00113ce:	6a 0c                	push   0xc
c00113d0:	e8 fe 66 ff ff       	call   c0007ad3 <malloc>
c00113d5:	89 c3                	mov    ebx,eax
c00113d7:	58                   	pop    eax
c00113d8:	5a                   	pop    edx
c00113d9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00113df:	53                   	push   ebx
c00113e0:	e8 71 fe ff ff       	call   c0011256 <EnvVarContainer::EnvVarContainer(Process*)>
c00113e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113e8:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00113ee:	e8 47 fe ff ff       	call   c001123a <EnvVarContainer::__loadSystem()>
c00113f3:	83 c4 18             	add    esp,0x18
c00113f6:	5b                   	pop    ebx
c00113f7:	c3                   	ret    

c00113f8 <KeLoadUserEnv()>:
c00113f8:	53                   	push   ebx
c00113f9:	83 ec 14             	sub    esp,0x14
c00113fc:	6a 0c                	push   0xc
c00113fe:	e8 d0 66 ff ff       	call   c0007ad3 <malloc>
c0011403:	89 c3                	mov    ebx,eax
c0011405:	58                   	pop    eax
c0011406:	5a                   	pop    edx
c0011407:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001140d:	53                   	push   ebx
c001140e:	e8 43 fe ff ff       	call   c0011256 <EnvVarContainer::EnvVarContainer(Process*)>
c0011413:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011419:	83 c4 18             	add    esp,0x18
c001141c:	5b                   	pop    ebx
c001141d:	c3                   	ret    

c001141e <KeFlushEnv()>:
c001141e:	c3                   	ret    

c001141f <KeGetProcessTotalEnvCount(Process*)>:
c001141f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011423:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011429:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001142f:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011434:	8b 00                	mov    eax,DWORD PTR [eax]
c0011436:	03 01                	add    eax,DWORD PTR [ecx]
c0011438:	85 d2                	test   edx,edx
c001143a:	74 02                	je     c001143e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001143c:	03 02                	add    eax,DWORD PTR [edx]
c001143e:	c3                   	ret    

c001143f <KeGetProcessEnvPair(Process*, int)>:
c001143f:	57                   	push   edi
c0011440:	56                   	push   esi
c0011441:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011447:	53                   	push   ebx
c0011448:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001144c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011450:	85 f6                	test   esi,esi
c0011452:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011456:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001145c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001145e:	75 16                	jne    c0011476 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011460:	39 c2                	cmp    edx,eax
c0011462:	7c 16                	jl     c001147a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011464:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001146a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001146c:	01 c6                	add    esi,eax
c001146e:	39 d6                	cmp    esi,edx
c0011470:	7e 3c                	jle    c00114ae <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011472:	29 c2                	sub    edx,eax
c0011474:	eb 04                	jmp    c001147a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011476:	39 c2                	cmp    edx,eax
c0011478:	7d 05                	jge    c001147f <KeGetProcessEnvPair(Process*, int)+0x40>
c001147a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001147d:	eb 20                	jmp    c001149f <KeGetProcessEnvPair(Process*, int)+0x60>
c001147f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011481:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011484:	39 d1                	cmp    ecx,edx
c0011486:	7e 04                	jle    c001148c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011488:	29 c2                	sub    edx,eax
c001148a:	eb 10                	jmp    c001149c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001148c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011492:	03 0e                	add    ecx,DWORD PTR [esi]
c0011494:	39 d1                	cmp    ecx,edx
c0011496:	7e 16                	jle    c00114ae <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011498:	29 c2                	sub    edx,eax
c001149a:	29 fa                	sub    edx,edi
c001149c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001149f:	8d 14 d0             	lea    edx,[eax+edx*8]
c00114a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00114a4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00114a7:	89 03                	mov    DWORD PTR [ebx],eax
c00114a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00114ac:	eb 1d                	jmp    c00114cb <KeGetProcessEnvPair(Process*, int)+0x8c>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	68 4e 23 02 c0       	push   0xc002234e
c00114b6:	e8 ac 00 00 00       	call   c0011567 <KePanic(char const*)>
c00114bb:	83 c4 10             	add    esp,0x10
c00114be:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00114c4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00114cb:	89 d8                	mov    eax,ebx
c00114cd:	5b                   	pop    ebx
c00114ce:	5e                   	pop    esi
c00114cf:	5f                   	pop    edi
c00114d0:	c2 04 00             	ret    0x4

c00114d3 <CPU::current()>:
c00114d3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00114d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114de:	c3                   	ret    

c00114df <operator new(unsigned long)>:
c00114df:	e9 ef 65 ff ff       	jmp    c0007ad3 <malloc>

c00114e4 <operator delete(void*)>:
c00114e4:	e9 0a 66 ff ff       	jmp    c0007af3 <rfree>

c00114e9 <disableIRQs()>:
c00114e9:	fa                   	cli    
c00114ea:	c3                   	ret    

c00114eb <enableIRQs()>:
c00114eb:	fb                   	sti    
c00114ec:	c3                   	ret    

c00114ed <lockScheduler()>:
c00114ed:	fa                   	cli    
c00114ee:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00114f4:	c3                   	ret    

c00114f5 <unlockScheduler()>:
c00114f5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00114fa:	48                   	dec    eax
c00114fb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011500:	75 01                	jne    c0011503 <unlockScheduler()+0xe>
c0011502:	fb                   	sti    
c0011503:	c3                   	ret    

c0011504 <lockStuff()>:
c0011504:	fa                   	cli    
c0011505:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001150b:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011511:	c3                   	ret    

c0011512 <unlockStuff()>:
c0011512:	83 ec 0c             	sub    esp,0xc
c0011515:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001151a:	48                   	dec    eax
c001151b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011520:	75 18                	jne    c001153a <unlockStuff()+0x28>
c0011522:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011529:	74 0f                	je     c001153a <unlockStuff()+0x28>
c001152b:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011535:	e8 3e 4b 00 00       	call   c0016078 <schedule()>
c001153a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001153f:	48                   	dec    eax
c0011540:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011545:	75 01                	jne    c0011548 <unlockStuff()+0x36>
c0011547:	fb                   	sti    
c0011548:	83 c4 0c             	add    esp,0xc
c001154b:	c3                   	ret    

c001154c <Virt::getAKernelVAS()>:
c001154c:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011551:	c3                   	ret    

c0011552 <__not_memcpy>:
c0011552:	57                   	push   edi
c0011553:	56                   	push   esi
c0011554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011558:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001155c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011560:	89 c7                	mov    edi,eax
c0011562:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011564:	5e                   	pop    esi
c0011565:	5f                   	pop    edi
c0011566:	c3                   	ret    

c0011567 <KePanic(char const*)>:
c0011567:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001156e:	e9 95 6a 00 00       	jmp    c0018008 <HalPanic(char const*)>

c0011573 <KePowerThread(void*)>:
c0011573:	83 ec 0c             	sub    esp,0xc
c0011576:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001157b:	48                   	dec    eax
c001157c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011581:	75 01                	jne    c0011584 <KePowerThread(void*)+0x11>
c0011583:	fb                   	sti    
c0011584:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001158b:	83 ec 0c             	sub    esp,0xc
c001158e:	6a 0a                	push   0xa
c0011590:	e8 13 4e 00 00       	call   c00163a8 <sleep(unsigned int)>
c0011595:	83 c4 10             	add    esp,0x10
c0011598:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001159f:	eb e3                	jmp    c0011584 <KePowerThread(void*)+0x11>

c00115a1 <KeChangePowerSettings(PowerSettings)>:
c00115a1:	57                   	push   edi
c00115a2:	b9 09 00 00 00       	mov    ecx,0x9
c00115a7:	56                   	push   esi
c00115a8:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00115ad:	fc                   	cld    
c00115ae:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00115b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115b4:	5e                   	pop    esi
c00115b5:	5f                   	pop    edi
c00115b6:	c3                   	ret    

c00115b7 <KeUserIOReceived()>:
c00115b7:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00115c1:	c3                   	ret    

c00115c2 <KeHandlePowerButton()>:
c00115c2:	83 ec 0c             	sub    esp,0xc
c00115c5:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00115ca:	83 f8 02             	cmp    eax,0x2
c00115cd:	75 10                	jne    c00115df <KeHandlePowerButton()+0x1d>
c00115cf:	83 ec 0c             	sub    esp,0xc
c00115d2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115d8:	e8 6d 5b ff ff       	call   c000714a <Computer::shutdown()>
c00115dd:	eb 11                	jmp    c00115f0 <KeHandlePowerButton()+0x2e>
c00115df:	48                   	dec    eax
c00115e0:	75 11                	jne    c00115f3 <KeHandlePowerButton()+0x31>
c00115e2:	83 ec 0c             	sub    esp,0xc
c00115e5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115eb:	e8 8a 5b ff ff       	call   c000717a <Computer::sleep()>
c00115f0:	83 c4 10             	add    esp,0x10
c00115f3:	83 c4 0c             	add    esp,0xc
c00115f6:	c3                   	ret    

c00115f7 <KeHandleSleepButton()>:
c00115f7:	83 ec 0c             	sub    esp,0xc
c00115fa:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00115ff:	83 f8 02             	cmp    eax,0x2
c0011602:	75 10                	jne    c0011614 <KeHandleSleepButton()+0x1d>
c0011604:	83 ec 0c             	sub    esp,0xc
c0011607:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001160d:	e8 38 5b ff ff       	call   c000714a <Computer::shutdown()>
c0011612:	eb 11                	jmp    c0011625 <KeHandleSleepButton()+0x2e>
c0011614:	48                   	dec    eax
c0011615:	75 11                	jne    c0011628 <KeHandleSleepButton()+0x31>
c0011617:	83 ec 0c             	sub    esp,0xc
c001161a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011620:	e8 55 5b ff ff       	call   c000717a <Computer::sleep()>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	83 c4 0c             	add    esp,0xc
c001162b:	c3                   	ret    

c001162c <KeSetupPowerManager()>:
c001162c:	83 ec 0c             	sub    esp,0xc
c001162f:	68 f0 00 00 00       	push   0xf0
c0011634:	6a 00                	push   0x0
c0011636:	68 73 15 01 c0       	push   0xc0011573
c001163b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011641:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001164b:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011652:	e8 d5 47 00 00       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c0011657:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011661:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001166b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011675:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001167f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011689:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011693:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001169d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00116a7:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00116b1:	83 c4 1c             	add    esp,0x1c
c00116b4:	c3                   	ret    

c00116b5 <KeRand()>:
c00116b5:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00116bf:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00116c9:	53                   	push   ebx
c00116ca:	01 c1                	add    ecx,eax
c00116cc:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00116d1:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c00116d7:	01 ca                	add    edx,ecx
c00116d9:	05 ef 04 b5 00       	add    eax,0xb504ef
c00116de:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00116e3:	83 d2 00             	adc    edx,0x0
c00116e6:	0f b7 da             	movzx  ebx,dx
c00116e9:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00116ef:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00116f3:	5b                   	pop    ebx
c00116f4:	c3                   	ret    

c00116f5 <KeSeedRand(unsigned int)>:
c00116f5:	53                   	push   ebx
c00116f6:	83 ec 08             	sub    esp,0x8
c00116f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116fd:	e8 25 6c 00 00       	call   c0018327 <HalGetRand()>
c0011702:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001170c:	31 d8                	xor    eax,ebx
c001170e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011713:	e8 9d ff ff ff       	call   c00116b5 <KeRand()>
c0011718:	83 c4 08             	add    esp,0x8
c001171b:	5b                   	pop    ebx
c001171c:	eb 97                	jmp    c00116b5 <KeRand()>

c001171e <KeInitRand()>:
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	e8 f6 69 00 00       	call   c001811c <HalQueryPerformanceCounter()>
c0011726:	0f 20 da             	mov    edx,cr3
c0011729:	0f 22 da             	mov    cr3,edx
c001172c:	0f 20 da             	mov    edx,cr3
c001172f:	0f 22 da             	mov    cr3,edx
c0011732:	0f 20 da             	mov    edx,cr3
c0011735:	0f 22 da             	mov    cr3,edx
c0011738:	0f 20 da             	mov    edx,cr3
c001173b:	0f 22 da             	mov    cr3,edx
c001173e:	83 ec 0c             	sub    esp,0xc
c0011741:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011746:	50                   	push   eax
c0011747:	e8 a9 ff ff ff       	call   c00116f5 <KeSeedRand(unsigned int)>
c001174c:	83 c4 1c             	add    esp,0x1c
c001174f:	c3                   	ret    

c0011750 <KeResolveCompatibilitySymbol(char*)>:
c0011750:	83 ec 0c             	sub    esp,0xc
c0011753:	83 ec 08             	sub    esp,0x8
c0011756:	68 68 23 02 c0       	push   0xc0022368
c001175b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001175f:	e8 1c f0 fe ff       	call   c0000780 <strcmp>
c0011764:	83 c4 10             	add    esp,0x10
c0011767:	85 c0                	test   eax,eax
c0011769:	0f 94 c0             	sete   al
c001176c:	0f b6 c0             	movzx  eax,al
c001176f:	85 c0                	test   eax,eax
c0011771:	74 0d                	je     c0011780 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011773:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011778:	e9 8b 01 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001177d:	8d 76 00             	lea    esi,[esi+0x0]
c0011780:	83 ec 08             	sub    esp,0x8
c0011783:	68 71 23 02 c0       	push   0xc0022371
c0011788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001178c:	e8 ef ef fe ff       	call   c0000780 <strcmp>
c0011791:	83 c4 10             	add    esp,0x10
c0011794:	85 c0                	test   eax,eax
c0011796:	0f 94 c0             	sete   al
c0011799:	0f b6 c0             	movzx  eax,al
c001179c:	85 c0                	test   eax,eax
c001179e:	74 0c                	je     c00117ac <KeResolveCompatibilitySymbol(char*)+0x5c>
c00117a0:	b8 30 f7 01 c0       	mov    eax,0xc001f730
c00117a5:	e9 5e 01 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117aa:	66 90                	xchg   ax,ax
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	68 7b 23 02 c0       	push   0xc002237b
c00117b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b8:	e8 c3 ef fe ff       	call   c0000780 <strcmp>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	85 c0                	test   eax,eax
c00117c2:	0f 94 c0             	sete   al
c00117c5:	0f b6 c0             	movzx  eax,al
c00117c8:	85 c0                	test   eax,eax
c00117ca:	74 0c                	je     c00117d8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00117cc:	b8 64 f4 01 c0       	mov    eax,0xc001f464
c00117d1:	e9 32 01 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117d6:	66 90                	xchg   ax,ax
c00117d8:	83 ec 08             	sub    esp,0x8
c00117db:	68 84 23 02 c0       	push   0xc0022384
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 97 ef fe ff       	call   c0000780 <strcmp>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	85 c0                	test   eax,eax
c00117ee:	0f 94 c0             	sete   al
c00117f1:	0f b6 c0             	movzx  eax,al
c00117f4:	85 c0                	test   eax,eax
c00117f6:	74 0c                	je     c0011804 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00117f8:	b8 67 15 01 c0       	mov    eax,0xc0011567
c00117fd:	e9 06 01 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011802:	66 90                	xchg   ax,ax
c0011804:	83 ec 08             	sub    esp,0x8
c0011807:	68 97 23 02 c0       	push   0xc0022397
c001180c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011810:	e8 6b ef fe ff       	call   c0000780 <strcmp>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	85 c0                	test   eax,eax
c001181a:	0f 94 c0             	sete   al
c001181d:	0f b6 c0             	movzx  eax,al
c0011820:	85 c0                	test   eax,eax
c0011822:	74 0c                	je     c0011830 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011824:	b8 69 0e 01 c0       	mov    eax,0xc0010e69
c0011829:	e9 da 00 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001182e:	66 90                	xchg   ax,ax
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	68 b4 23 02 c0       	push   0xc00223b4
c0011838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183c:	e8 3f ef fe ff       	call   c0000780 <strcmp>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	85 c0                	test   eax,eax
c0011846:	0f 94 c0             	sete   al
c0011849:	0f b6 c0             	movzx  eax,al
c001184c:	85 c0                	test   eax,eax
c001184e:	74 0c                	je     c001185c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011850:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c0011855:	e9 ae 00 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001185a:	66 90                	xchg   ax,ax
c001185c:	83 ec 08             	sub    esp,0x8
c001185f:	68 be 23 02 c0       	push   0xc00223be
c0011864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011868:	e8 13 ef fe ff       	call   c0000780 <strcmp>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	85 c0                	test   eax,eax
c0011872:	0f 94 c0             	sete   al
c0011875:	0f b6 c0             	movzx  eax,al
c0011878:	85 c0                	test   eax,eax
c001187a:	74 0c                	je     c0011888 <KeResolveCompatibilitySymbol(char*)+0x138>
c001187c:	b8 b0 f5 01 c0       	mov    eax,0xc001f5b0
c0011881:	e9 82 00 00 00       	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011886:	66 90                	xchg   ax,ax
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	68 c7 23 02 c0       	push   0xc00223c7
c0011890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011894:	e8 e7 ee fe ff       	call   c0000780 <strcmp>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	85 c0                	test   eax,eax
c001189e:	0f 94 c0             	sete   al
c00118a1:	0f b6 c0             	movzx  eax,al
c00118a4:	85 c0                	test   eax,eax
c00118a6:	74 08                	je     c00118b0 <KeResolveCompatibilitySymbol(char*)+0x160>
c00118a8:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00118ad:	eb 59                	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118af:	90                   	nop
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	68 df 23 02 c0       	push   0xc00223df
c00118b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118bc:	e8 bf ee fe ff       	call   c0000780 <strcmp>
c00118c1:	83 c4 10             	add    esp,0x10
c00118c4:	85 c0                	test   eax,eax
c00118c6:	0f 94 c0             	sete   al
c00118c9:	0f b6 c0             	movzx  eax,al
c00118cc:	85 c0                	test   eax,eax
c00118ce:	74 08                	je     c00118d8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00118d0:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00118d5:	eb 31                	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118d7:	90                   	nop
c00118d8:	83 ec 08             	sub    esp,0x8
c00118db:	68 ec 23 02 c0       	push   0xc00223ec
c00118e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e4:	e8 97 ee fe ff       	call   c0000780 <strcmp>
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	85 c0                	test   eax,eax
c00118ee:	0f 94 c0             	sete   al
c00118f1:	0f b6 c0             	movzx  eax,al
c00118f4:	85 c0                	test   eax,eax
c00118f6:	74 08                	je     c0011900 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00118f8:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00118fd:	eb 09                	jmp    c0011908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ff:	90                   	nop
c0011900:	b8 00 00 00 00       	mov    eax,0x0
c0011905:	8d 76 00             	lea    esi,[esi+0x0]
c0011908:	83 c4 0c             	add    esp,0xc
c001190b:	c3                   	ret    

c001190c <KiSigKill(int)>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	6a 00                	push   0x0
c0011911:	6a 00                	push   0x0
c0011913:	6a ff                	push   0xffffffff
c0011915:	6a 01                	push   0x1
c0011917:	e8 36 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001191c:	83 c4 1c             	add    esp,0x1c
c001191f:	c3                   	ret    

c0011920 <KiDefaultSignalHandlerIgnore(int)>:
c0011920:	c3                   	ret    

c0011921 <KiDefaultSignalHandlerPause(int)>:
c0011921:	57                   	push   edi
c0011922:	b9 07 00 00 00       	mov    ecx,0x7
c0011927:	56                   	push   esi
c0011928:	be 35 24 02 c0       	mov    esi,0xc0022435
c001192d:	83 ec 24             	sub    esp,0x24
c0011930:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011934:	fc                   	cld    
c0011935:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011937:	8d 44 24 04          	lea    eax,[esp+0x4]
c001193b:	50                   	push   eax
c001193c:	6a 00                	push   0x0
c001193e:	6a 00                	push   0x0
c0011940:	6a 27                	push   0x27
c0011942:	e8 0b 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011947:	83 c4 34             	add    esp,0x34
c001194a:	5e                   	pop    esi
c001194b:	5f                   	pop    edi
c001194c:	c3                   	ret    

c001194d <KiDefaultSignalHandlerResume(int)>:
c001194d:	57                   	push   edi
c001194e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011953:	56                   	push   esi
c0011954:	be 51 24 02 c0       	mov    esi,0xc0022451
c0011959:	83 ec 24             	sub    esp,0x24
c001195c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011960:	fc                   	cld    
c0011961:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011963:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011967:	50                   	push   eax
c0011968:	6a 00                	push   0x0
c001196a:	6a 00                	push   0x0
c001196c:	6a 27                	push   0x27
c001196e:	e8 df 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011973:	83 c4 34             	add    esp,0x34
c0011976:	5e                   	pop    esi
c0011977:	5f                   	pop    edi
c0011978:	c3                   	ret    

c0011979 <KeDeinitSignals(SigHandlerBlock*)>:
c0011979:	e9 65 61 ff ff       	jmp    c0007ae3 <free>

c001197e <KeInitSignals()>:
c001197e:	53                   	push   ebx
c001197f:	83 ec 14             	sub    esp,0x14
c0011982:	68 c8 00 00 00       	push   0xc8
c0011987:	e8 47 61 ff ff       	call   c0007ad3 <malloc>
c001198c:	83 c4 0c             	add    esp,0xc
c001198f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011999:	89 c3                	mov    ebx,eax
c001199b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00119a5:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00119ab:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00119af:	6a 20                	push   0x20
c00119b1:	6a 00                	push   0x0
c00119b3:	50                   	push   eax
c00119b4:	e8 37 eb fe ff       	call   c00004f0 <memset>
c00119b9:	83 c4 0c             	add    esp,0xc
c00119bc:	6a 44                	push   0x44
c00119be:	6a 00                	push   0x0
c00119c0:	53                   	push   ebx
c00119c1:	e8 2a eb fe ff       	call   c00004f0 <memset>
c00119c6:	83 c4 18             	add    esp,0x18
c00119c9:	89 d8                	mov    eax,ebx
c00119cb:	5b                   	pop    ebx
c00119cc:	c3                   	ret    

c00119cd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00119cd:	53                   	push   ebx
c00119ce:	b8 01 00 00 00       	mov    eax,0x1
c00119d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00119d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00119db:	83 f9 10             	cmp    ecx,0x10
c00119de:	7f 21                	jg     c0011a01 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00119e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00119e7:	89 03                	mov    DWORD PTR [ebx],eax
c00119e9:	b8 01 00 00 00       	mov    eax,0x1
c00119ee:	d3 e0                	shl    eax,cl
c00119f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00119f4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00119f7:	31 c0                	xor    eax,eax
c00119f9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a01:	5b                   	pop    ebx
c0011a02:	c3                   	ret    

c0011a03 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a03:	55                   	push   ebp
c0011a04:	57                   	push   edi
c0011a05:	bf 08 00 00 00       	mov    edi,0x8
c0011a0a:	56                   	push   esi
c0011a0b:	53                   	push   ebx
c0011a0c:	83 ec 18             	sub    esp,0x18
c0011a0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a13:	68 6e 24 02 c0       	push   0xc002246e
c0011a18:	e8 ed 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	31 c9                	xor    ecx,ecx
c0011a22:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a29:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011a2f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011a33:	99                   	cdq    
c0011a34:	f7 ff                	idiv   edi
c0011a36:	8d 42 24             	lea    eax,[edx+0x24]
c0011a39:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011a3d:	85 f6                	test   esi,esi
c0011a3f:	75 1a                	jne    c0011a5b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011a41:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a45:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011a49:	50                   	push   eax
c0011a4a:	50                   	push   eax
c0011a4b:	52                   	push   edx
c0011a4c:	68 7f 24 02 c0       	push   0xc002247f
c0011a51:	e8 b4 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	eb 1b                	jmp    c0011a76 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011a5b:	41                   	inc    ecx
c0011a5c:	83 f9 08             	cmp    ecx,0x8
c0011a5f:	75 ce                	jne    c0011a2f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	be 01 00 00 00       	mov    esi,0x1
c0011a69:	68 a0 24 02 c0       	push   0xc00224a0
c0011a6e:	e8 97 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a73:	83 c4 10             	add    esp,0x10
c0011a76:	83 c4 0c             	add    esp,0xc
c0011a79:	89 f0                	mov    eax,esi
c0011a7b:	5b                   	pop    ebx
c0011a7c:	5e                   	pop    esi
c0011a7d:	5f                   	pop    edi
c0011a7e:	5d                   	pop    ebp
c0011a7f:	c3                   	ret    

c0011a80 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011a80:	55                   	push   ebp
c0011a81:	57                   	push   edi
c0011a82:	56                   	push   esi
c0011a83:	53                   	push   ebx
c0011a84:	51                   	push   ecx
c0011a85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a89:	85 db                	test   ebx,ebx
c0011a8b:	0f 84 bc 00 00 00    	je     c0011b4d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a91:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011a98:	0f 84 af 00 00 00    	je     c0011b4d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a9e:	31 c9                	xor    ecx,ecx
c0011aa0:	bf 08 00 00 00       	mov    edi,0x8
c0011aa5:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011aab:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011aae:	99                   	cdq    
c0011aaf:	f7 ff                	idiv   edi
c0011ab1:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011ab8:	85 ed                	test   ebp,ebp
c0011aba:	0f 84 9e 00 00 00    	je     c0011b5e <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011ac0:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011ac6:	89 e9                	mov    ecx,ebp
c0011ac8:	bf 01 00 00 00       	mov    edi,0x1
c0011acd:	d3 e7                	shl    edi,cl
c0011acf:	31 c9                	xor    ecx,ecx
c0011ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ad4:	b8 01 00 00 00       	mov    eax,0x1
c0011ad9:	d3 e0                	shl    eax,cl
c0011adb:	85 04 24             	test   DWORD PTR [esp],eax
c0011ade:	74 06                	je     c0011ae6 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011ae0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011ae4:	75 67                	jne    c0011b4d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ae6:	41                   	inc    ecx
c0011ae7:	83 f9 11             	cmp    ecx,0x11
c0011aea:	75 e8                	jne    c0011ad4 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011aec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011aef:	46                   	inc    esi
c0011af0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011af6:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b01:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b08:	09 f8                	or     eax,edi
c0011b0a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b10:	31 c0                	xor    eax,eax
c0011b12:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b1a:	74 09                	je     c0011b25 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b1c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b23:	eb 06                	jmp    c0011b2b <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011b25:	40                   	inc    eax
c0011b26:	83 f8 08             	cmp    eax,0x8
c0011b29:	75 e7                	jne    c0011b12 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011b2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b2f:	83 fd 09             	cmp    ebp,0x9
c0011b32:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011b35:	89 2a                	mov    DWORD PTR [edx],ebp
c0011b37:	75 07                	jne    c0011b40 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011b39:	b8 0c 19 01 c0       	mov    eax,0xc001190c
c0011b3e:	eb 31                	jmp    c0011b71 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b40:	83 f8 01             	cmp    eax,0x1
c0011b43:	75 0c                	jne    c0011b51 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011b45:	f7 d7                	not    edi
c0011b47:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011b4d:	31 c0                	xor    eax,eax
c0011b4f:	eb 20                	jmp    c0011b71 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b51:	85 c0                	test   eax,eax
c0011b53:	75 1c                	jne    c0011b71 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b55:	8b 04 ad a0 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc360]
c0011b5c:	eb 13                	jmp    c0011b71 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b5e:	41                   	inc    ecx
c0011b5f:	46                   	inc    esi
c0011b60:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b66:	83 f9 08             	cmp    ecx,0x8
c0011b69:	0f 85 36 ff ff ff    	jne    c0011aa5 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011b6f:	eb dc                	jmp    c0011b4d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b71:	5a                   	pop    edx
c0011b72:	5b                   	pop    ebx
c0011b73:	5e                   	pop    esi
c0011b74:	5f                   	pop    edi
c0011b75:	5d                   	pop    ebp
c0011b76:	c3                   	ret    

c0011b77 <KiCheckSignalZ>:
c0011b77:	83 ec 10             	sub    esp,0x10
c0011b7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011b7e:	50                   	push   eax
c0011b7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b87:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b8d:	e8 ee fe ff ff       	call   c0011a80 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011b92:	5a                   	pop    edx
c0011b93:	31 d2                	xor    edx,edx
c0011b95:	59                   	pop    ecx
c0011b96:	85 c0                	test   eax,eax
c0011b98:	74 19                	je     c0011bb3 <KiCheckSignalZ+0x3c>
c0011b9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011ba0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011ba3:	89 02                	mov    DWORD PTR [edx],eax
c0011ba5:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011bac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011bb3:	89 d0                	mov    eax,edx
c0011bb5:	83 c4 10             	add    esp,0x10
c0011bb8:	c3                   	ret    

c0011bb9 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011bb9:	56                   	push   esi
c0011bba:	53                   	push   ebx
c0011bbb:	bb 01 00 00 00       	mov    ebx,0x1
c0011bc0:	52                   	push   edx
c0011bc1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011bc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011bc9:	d3 e3                	shl    ebx,cl
c0011bcb:	83 f9 10             	cmp    ecx,0x10
c0011bce:	7f 08                	jg     c0011bd8 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011bd0:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011bd6:	75 10                	jne    c0011be8 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011bd8:	83 ec 0c             	sub    esp,0xc
c0011bdb:	68 b1 24 02 c0       	push   0xc00224b1
c0011be0:	e8 82 f9 ff ff       	call   c0011567 <KePanic(char const*)>
c0011be5:	83 c4 10             	add    esp,0x10
c0011be8:	f7 d3                	not    ebx
c0011bea:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011bf0:	58                   	pop    eax
c0011bf1:	5b                   	pop    ebx
c0011bf2:	5e                   	pop    esi
c0011bf3:	c3                   	ret    

c0011bf4 <KiFinishSignalZ>:
c0011bf4:	53                   	push   ebx
c0011bf5:	83 ec 10             	sub    esp,0x10
c0011bf8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bfc:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011bff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c07:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c0d:	e8 a7 ff ff ff       	call   c0011bb9 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c12:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c18:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011c26:	83 c4 18             	add    esp,0x18
c0011c29:	5b                   	pop    ebx
c0011c2a:	c3                   	ret    

c0011c2b <SysSeekDir(regs*)>:
c0011c2b:	31 c0                	xor    eax,eax
c0011c2d:	31 d2                	xor    edx,edx
c0011c2f:	c3                   	ret    

c0011c30 <SysTellDir(regs*)>:
c0011c30:	31 c0                	xor    eax,eax
c0011c32:	31 d2                	xor    edx,edx
c0011c34:	c3                   	ret    

c0011c35 <SysVerify(regs*)>:
c0011c35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c39:	31 d2                	xor    edx,edx
c0011c3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c3e:	c3                   	ret    

c0011c3f <SysGetArgc(regs*)>:
c0011c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c47:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011c4d:	89 c2                	mov    edx,eax
c0011c4f:	c1 fa 1f             	sar    edx,0x1f
c0011c52:	c3                   	ret    

c0011c53 <SysTTYName(regs*)>:
c0011c53:	b8 01 00 00 00       	mov    eax,0x1
c0011c58:	31 d2                	xor    edx,edx
c0011c5a:	c3                   	ret    

c0011c5b <SysFormatDisk(regs*)>:
c0011c5b:	56                   	push   esi
c0011c5c:	53                   	push   ebx
c0011c5d:	83 ec 04             	sub    esp,0x4
c0011c60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c64:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011c6a:	eb 2a                	jmp    c0011c96 <SysFormatDisk(regs*)+0x3b>
c0011c6c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011c6f:	83 ec 0c             	sub    esp,0xc
c0011c72:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c75:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c77:	51                   	push   ecx
c0011c78:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011c7b:	51                   	push   ecx
c0011c7c:	50                   	push   eax
c0011c7d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011c84:	50                   	push   eax
c0011c85:	53                   	push   ebx
c0011c86:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011c89:	83 c4 20             	add    esp,0x20
c0011c8c:	83 f8 08             	cmp    eax,0x8
c0011c8f:	89 c1                	mov    ecx,eax
c0011c91:	75 14                	jne    c0011ca7 <SysFormatDisk(regs*)+0x4c>
c0011c93:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c96:	85 db                	test   ebx,ebx
c0011c98:	75 d2                	jne    c0011c6c <SysFormatDisk(regs*)+0x11>
c0011c9a:	b8 03 00 00 00       	mov    eax,0x3
c0011c9f:	31 d2                	xor    edx,edx
c0011ca1:	83 c4 04             	add    esp,0x4
c0011ca4:	5b                   	pop    ebx
c0011ca5:	5e                   	pop    esi
c0011ca6:	c3                   	ret    
c0011ca7:	85 c0                	test   eax,eax
c0011ca9:	74 13                	je     c0011cbe <SysFormatDisk(regs*)+0x63>
c0011cab:	31 d2                	xor    edx,edx
c0011cad:	83 f9 09             	cmp    ecx,0x9
c0011cb0:	b8 01 00 00 00       	mov    eax,0x1
c0011cb5:	74 ea                	je     c0011ca1 <SysFormatDisk(regs*)+0x46>
c0011cb7:	b8 02 00 00 00       	mov    eax,0x2
c0011cbc:	eb e1                	jmp    c0011c9f <SysFormatDisk(regs*)+0x44>
c0011cbe:	31 c0                	xor    eax,eax
c0011cc0:	eb dd                	jmp    c0011c9f <SysFormatDisk(regs*)+0x44>

c0011cc2 <SysSetDiskVolumeLabel(regs*)>:
c0011cc2:	56                   	push   esi
c0011cc3:	53                   	push   ebx
c0011cc4:	83 ec 04             	sub    esp,0x4
c0011cc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ccb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011cce:	83 f8 19             	cmp    eax,0x19
c0011cd1:	77 33                	ja     c0011d06 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cd3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011cda:	85 c9                	test   ecx,ecx
c0011cdc:	74 28                	je     c0011d06 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cde:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ce1:	85 db                	test   ebx,ebx
c0011ce3:	74 21                	je     c0011d06 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ce5:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011ceb:	85 d2                	test   edx,edx
c0011ced:	74 17                	je     c0011d06 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cef:	8b 32                	mov    esi,DWORD PTR [edx]
c0011cf1:	53                   	push   ebx
c0011cf2:	50                   	push   eax
c0011cf3:	51                   	push   ecx
c0011cf4:	52                   	push   edx
c0011cf5:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	83 c4 04             	add    esp,0x4
c0011cfe:	5b                   	pop    ebx
c0011cff:	5e                   	pop    esi
c0011d00:	89 c2                	mov    edx,eax
c0011d02:	c1 fa 1f             	sar    edx,0x1f
c0011d05:	c3                   	ret    
c0011d06:	83 c4 04             	add    esp,0x4
c0011d09:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d0e:	5b                   	pop    ebx
c0011d0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d14:	5e                   	pop    esi
c0011d15:	c3                   	ret    

c0011d16 <SysGetDiskVolumeLabel(regs*)>:
c0011d16:	57                   	push   edi
c0011d17:	56                   	push   esi
c0011d18:	53                   	push   ebx
c0011d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d1d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011d20:	83 fa 19             	cmp    edx,0x19
c0011d23:	77 3c                	ja     c0011d61 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d25:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011d2c:	85 c9                	test   ecx,ecx
c0011d2e:	74 31                	je     c0011d61 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d30:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011d33:	85 db                	test   ebx,ebx
c0011d35:	74 2a                	je     c0011d61 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d37:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d3a:	85 f6                	test   esi,esi
c0011d3c:	74 23                	je     c0011d61 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d3e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011d44:	85 c0                	test   eax,eax
c0011d46:	74 19                	je     c0011d61 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d48:	83 ec 0c             	sub    esp,0xc
c0011d4b:	8b 38                	mov    edi,DWORD PTR [eax]
c0011d4d:	56                   	push   esi
c0011d4e:	53                   	push   ebx
c0011d4f:	52                   	push   edx
c0011d50:	51                   	push   ecx
c0011d51:	50                   	push   eax
c0011d52:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011d55:	83 c4 20             	add    esp,0x20
c0011d58:	5b                   	pop    ebx
c0011d59:	5e                   	pop    esi
c0011d5a:	89 c2                	mov    edx,eax
c0011d5c:	c1 fa 1f             	sar    edx,0x1f
c0011d5f:	5f                   	pop    edi
c0011d60:	c3                   	ret    
c0011d61:	5b                   	pop    ebx
c0011d62:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d6c:	5e                   	pop    esi
c0011d6d:	5f                   	pop    edi
c0011d6e:	c3                   	ret    

c0011d6f <SysShutdown(regs*)>:
c0011d6f:	57                   	push   edi
c0011d70:	56                   	push   esi
c0011d71:	83 ec 04             	sub    esp,0x4
c0011d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d78:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d7b:	85 c0                	test   eax,eax
c0011d7d:	74 1e                	je     c0011d9d <SysShutdown(regs*)+0x2e>
c0011d7f:	83 f8 01             	cmp    eax,0x1
c0011d82:	74 5f                	je     c0011de3 <SysShutdown(regs*)+0x74>
c0011d84:	83 f8 02             	cmp    eax,0x2
c0011d87:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d8c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d91:	74 32                	je     c0011dc5 <SysShutdown(regs*)+0x56>
c0011d93:	83 c4 04             	add    esp,0x4
c0011d96:	89 f0                	mov    eax,esi
c0011d98:	5e                   	pop    esi
c0011d99:	89 fa                	mov    edx,edi
c0011d9b:	5f                   	pop    edi
c0011d9c:	c3                   	ret    
c0011d9d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011da2:	be ff ff ff ff       	mov    esi,0xffffffff
c0011da7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011dac:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dae:	6a 00                	push   0x0
c0011db0:	6a 00                	push   0x0
c0011db2:	6a 00                	push   0x0
c0011db4:	50                   	push   eax
c0011db5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	89 f0                	mov    eax,esi
c0011dbd:	83 c4 04             	add    esp,0x4
c0011dc0:	89 fa                	mov    edx,edi
c0011dc2:	5e                   	pop    esi
c0011dc3:	5f                   	pop    edi
c0011dc4:	c3                   	ret    
c0011dc5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011dca:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dcc:	6a 00                	push   0x0
c0011dce:	6a 00                	push   0x0
c0011dd0:	6a 01                	push   0x1
c0011dd2:	50                   	push   eax
c0011dd3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	89 f0                	mov    eax,esi
c0011ddb:	83 c4 04             	add    esp,0x4
c0011dde:	89 fa                	mov    edx,edi
c0011de0:	5e                   	pop    esi
c0011de1:	5f                   	pop    edi
c0011de2:	c3                   	ret    
c0011de3:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011de8:	85 c0                	test   eax,eax
c0011dea:	74 02                	je     c0011dee <SysShutdown(regs*)+0x7f>
c0011dec:	ff d0                	call   eax
c0011dee:	31 f6                	xor    esi,esi
c0011df0:	83 c4 04             	add    esp,0x4
c0011df3:	89 f0                	mov    eax,esi
c0011df5:	31 ff                	xor    edi,edi
c0011df7:	5e                   	pop    esi
c0011df8:	89 fa                	mov    edx,edi
c0011dfa:	5f                   	pop    edi
c0011dfb:	c3                   	ret    

c0011dfc <SysRealpath(regs*)>:
c0011dfc:	53                   	push   ebx
c0011dfd:	83 ec 08             	sub    esp,0x8
c0011e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e04:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e07:	85 c9                	test   ecx,ecx
c0011e09:	74 36                	je     c0011e41 <SysRealpath(regs*)+0x45>
c0011e0b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e0e:	31 d2                	xor    edx,edx
c0011e10:	b8 01 00 00 00       	mov    eax,0x1
c0011e15:	85 db                	test   ebx,ebx
c0011e17:	75 05                	jne    c0011e1e <SysRealpath(regs*)+0x22>
c0011e19:	83 c4 08             	add    esp,0x8
c0011e1c:	5b                   	pop    ebx
c0011e1d:	c3                   	ret    
c0011e1e:	6a 00                	push   0x0
c0011e20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e28:	05 0c 01 00 00       	add    eax,0x10c
c0011e2d:	50                   	push   eax
c0011e2e:	51                   	push   ecx
c0011e2f:	53                   	push   ebx
c0011e30:	e8 e1 99 ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	31 c0                	xor    eax,eax
c0011e3a:	31 d2                	xor    edx,edx
c0011e3c:	83 c4 08             	add    esp,0x8
c0011e3f:	5b                   	pop    ebx
c0011e40:	c3                   	ret    
c0011e41:	b8 01 00 00 00       	mov    eax,0x1
c0011e46:	31 d2                	xor    edx,edx
c0011e48:	eb f2                	jmp    c0011e3c <SysRealpath(regs*)+0x40>

c0011e4a <SysReadDir(regs*)>:
c0011e4a:	53                   	push   ebx
c0011e4b:	83 ec 18             	sub    esp,0x18
c0011e4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e52:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e55:	83 f8 02             	cmp    eax,0x2
c0011e58:	76 4f                	jbe    c0011ea9 <SysReadDir(regs*)+0x5f>
c0011e5a:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e61:	77 52                	ja     c0011eb5 <SysReadDir(regs*)+0x6b>
c0011e63:	83 ec 0c             	sub    esp,0xc
c0011e66:	50                   	push   eax
c0011e67:	e8 2f 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e6c:	83 c4 10             	add    esp,0x10
c0011e6f:	85 c0                	test   eax,eax
c0011e71:	74 42                	je     c0011eb5 <SysReadDir(regs*)+0x6b>
c0011e73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e7b:	83 ec 0c             	sub    esp,0xc
c0011e7e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e82:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e84:	51                   	push   ecx
c0011e85:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e88:	51                   	push   ecx
c0011e89:	6a 00                	push   0x0
c0011e8b:	68 10 01 00 00       	push   0x110
c0011e90:	50                   	push   eax
c0011e91:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e94:	83 c4 20             	add    esp,0x20
c0011e97:	85 c0                	test   eax,eax
c0011e99:	89 c1                	mov    ecx,eax
c0011e9b:	74 27                	je     c0011ec4 <SysReadDir(regs*)+0x7a>
c0011e9d:	31 d2                	xor    edx,edx
c0011e9f:	83 f9 07             	cmp    ecx,0x7
c0011ea2:	b8 02 00 00 00       	mov    eax,0x2
c0011ea7:	75 16                	jne    c0011ebf <SysReadDir(regs*)+0x75>
c0011ea9:	b8 01 00 00 00       	mov    eax,0x1
c0011eae:	31 d2                	xor    edx,edx
c0011eb0:	83 c4 18             	add    esp,0x18
c0011eb3:	5b                   	pop    ebx
c0011eb4:	c3                   	ret    
c0011eb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eba:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ebf:	83 c4 18             	add    esp,0x18
c0011ec2:	5b                   	pop    ebx
c0011ec3:	c3                   	ret    
c0011ec4:	31 c0                	xor    eax,eax
c0011ec6:	31 d2                	xor    edx,edx
c0011ec8:	eb e6                	jmp    c0011eb0 <SysReadDir(regs*)+0x66>

c0011eca <SysIsATTY(regs*)>:
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ed4:	83 f8 02             	cmp    eax,0x2
c0011ed7:	76 07                	jbe    c0011ee0 <SysIsATTY(regs*)+0x16>
c0011ed9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ede:	75 26                	jne    c0011f06 <SysIsATTY(regs*)+0x3c>
c0011ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ee8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011eee:	85 c0                	test   eax,eax
c0011ef0:	74 24                	je     c0011f16 <SysIsATTY(regs*)+0x4c>
c0011ef2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	50                   	push   eax
c0011ef8:	ff 12                	call   DWORD PTR [edx]
c0011efa:	83 c4 10             	add    esp,0x10
c0011efd:	31 d2                	xor    edx,edx
c0011eff:	83 c4 0c             	add    esp,0xc
c0011f02:	0f b6 c0             	movzx  eax,al
c0011f05:	c3                   	ret    
c0011f06:	83 ec 0c             	sub    esp,0xc
c0011f09:	50                   	push   eax
c0011f0a:	e8 8c 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	85 c0                	test   eax,eax
c0011f14:	75 dc                	jne    c0011ef2 <SysIsATTY(regs*)+0x28>
c0011f16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f20:	83 c4 0c             	add    esp,0xc
c0011f23:	c3                   	ret    

c0011f24 <SysSeek(regs*)>:
c0011f24:	56                   	push   esi
c0011f25:	53                   	push   ebx
c0011f26:	83 ec 04             	sub    esp,0x4
c0011f29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f2d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f30:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011f33:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011f39:	77 33                	ja     c0011f6e <SysSeek(regs*)+0x4a>
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	51                   	push   ecx
c0011f3f:	e8 57 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f44:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f47:	83 c4 0c             	add    esp,0xc
c0011f4a:	31 db                	xor    ebx,ebx
c0011f4c:	53                   	push   ebx
c0011f4d:	51                   	push   ecx
c0011f4e:	50                   	push   eax
c0011f4f:	e8 aa 9c ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	85 c0                	test   eax,eax
c0011f59:	0f 95 c0             	setne  al
c0011f5c:	31 d2                	xor    edx,edx
c0011f5e:	0f b6 c0             	movzx  eax,al
c0011f61:	f7 d8                	neg    eax
c0011f63:	83 d2 00             	adc    edx,0x0
c0011f66:	83 c4 04             	add    esp,0x4
c0011f69:	5b                   	pop    ebx
c0011f6a:	f7 da                	neg    edx
c0011f6c:	5e                   	pop    esi
c0011f6d:	c3                   	ret    
c0011f6e:	83 c4 04             	add    esp,0x4
c0011f71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f76:	5b                   	pop    ebx
c0011f77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f7c:	5e                   	pop    esi
c0011f7d:	c3                   	ret    

c0011f7e <SysTell(regs*)>:
c0011f7e:	53                   	push   ebx
c0011f7f:	83 ec 08             	sub    esp,0x8
c0011f82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f86:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f89:	83 f8 02             	cmp    eax,0x2
c0011f8c:	76 4e                	jbe    c0011fdc <SysTell(regs*)+0x5e>
c0011f8e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f93:	76 19                	jbe    c0011fae <SysTell(regs*)+0x30>
c0011f95:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f98:	31 d2                	xor    edx,edx
c0011f9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fa0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fa7:	83 c4 08             	add    esp,0x8
c0011faa:	31 c0                	xor    eax,eax
c0011fac:	5b                   	pop    ebx
c0011fad:	c3                   	ret    
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	50                   	push   eax
c0011fb2:	e8 e4 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fb7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011fba:	5a                   	pop    edx
c0011fbb:	59                   	pop    ecx
c0011fbc:	53                   	push   ebx
c0011fbd:	50                   	push   eax
c0011fbe:	e8 e7 9c ff ff       	call   c000bcaa <File::tell(unsigned long long*)>
c0011fc3:	83 c4 10             	add    esp,0x10
c0011fc6:	85 c0                	test   eax,eax
c0011fc8:	0f 95 c0             	setne  al
c0011fcb:	31 d2                	xor    edx,edx
c0011fcd:	0f b6 c0             	movzx  eax,al
c0011fd0:	f7 d8                	neg    eax
c0011fd2:	83 d2 00             	adc    edx,0x0
c0011fd5:	83 c4 08             	add    esp,0x8
c0011fd8:	5b                   	pop    ebx
c0011fd9:	f7 da                	neg    edx
c0011fdb:	c3                   	ret    
c0011fdc:	83 c4 08             	add    esp,0x8
c0011fdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fe4:	5b                   	pop    ebx
c0011fe5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fea:	c3                   	ret    

c0011feb <SysSize(regs*)>:
c0011feb:	53                   	push   ebx
c0011fec:	83 ec 18             	sub    esp,0x18
c0011fef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ff3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ff6:	83 f8 02             	cmp    eax,0x2
c0011ff9:	76 54                	jbe    c001204f <SysSize(regs*)+0x64>
c0011ffb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012000:	76 19                	jbe    c001201b <SysSize(regs*)+0x30>
c0012002:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012005:	31 d2                	xor    edx,edx
c0012007:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001200d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012014:	83 c4 18             	add    esp,0x18
c0012017:	31 c0                	xor    eax,eax
c0012019:	5b                   	pop    ebx
c001201a:	c3                   	ret    
c001201b:	83 ec 0c             	sub    esp,0xc
c001201e:	50                   	push   eax
c001201f:	e8 77 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012024:	83 c4 0c             	add    esp,0xc
c0012027:	8d 54 24 13          	lea    edx,[esp+0x13]
c001202b:	52                   	push   edx
c001202c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001202f:	52                   	push   edx
c0012030:	50                   	push   eax
c0012031:	e8 0c 9e ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c0012036:	83 c4 10             	add    esp,0x10
c0012039:	85 c0                	test   eax,eax
c001203b:	0f 95 c0             	setne  al
c001203e:	31 d2                	xor    edx,edx
c0012040:	0f b6 c0             	movzx  eax,al
c0012043:	f7 d8                	neg    eax
c0012045:	83 d2 00             	adc    edx,0x0
c0012048:	83 c4 18             	add    esp,0x18
c001204b:	5b                   	pop    ebx
c001204c:	f7 da                	neg    edx
c001204e:	c3                   	ret    
c001204f:	83 c4 18             	add    esp,0x18
c0012052:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012057:	5b                   	pop    ebx
c0012058:	ba ff ff ff ff       	mov    edx,0xffffffff
c001205d:	c3                   	ret    

c001205e <SysSizeFromFilename(regs*)>:
c001205e:	55                   	push   ebp
c001205f:	57                   	push   edi
c0012060:	56                   	push   esi
c0012061:	53                   	push   ebx
c0012062:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012068:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001206f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012072:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012075:	85 f6                	test   esi,esi
c0012077:	89 f8                	mov    eax,edi
c0012079:	74 09                	je     c0012084 <SysSizeFromFilename(regs*)+0x26>
c001207b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012081:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012084:	83 f8 02             	cmp    eax,0x2
c0012087:	0f 86 ca 00 00 00    	jbe    c0012157 <SysSizeFromFilename(regs*)+0xf9>
c001208d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012092:	76 1f                	jbe    c00120b3 <SysSizeFromFilename(regs*)+0x55>
c0012094:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012097:	31 d2                	xor    edx,edx
c0012099:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001209f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120a6:	31 c0                	xor    eax,eax
c00120a8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00120ae:	5b                   	pop    ebx
c00120af:	5e                   	pop    esi
c00120b0:	5f                   	pop    edi
c00120b1:	5d                   	pop    ebp
c00120b2:	c3                   	ret    
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	68 14 01 00 00       	push   0x114
c00120bb:	e8 13 5a ff ff       	call   c0007ad3 <malloc>
c00120c0:	6a 01                	push   0x1
c00120c2:	89 c5                	mov    ebp,eax
c00120c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120c9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00120cc:	51                   	push   ecx
c00120cd:	57                   	push   edi
c00120ce:	55                   	push   ebp
c00120cf:	e8 70 99 ff ff       	call   c000ba44 <File::File(char const*, Process*, bool)>
c00120d4:	83 c4 1c             	add    esp,0x1c
c00120d7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00120db:	50                   	push   eax
c00120dc:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120df:	53                   	push   ebx
c00120e0:	55                   	push   ebp
c00120e1:	e8 5c 9d ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c00120e6:	83 c4 10             	add    esp,0x10
c00120e9:	85 ed                	test   ebp,ebp
c00120eb:	89 c3                	mov    ebx,eax
c00120ed:	74 0d                	je     c00120fc <SysSizeFromFilename(regs*)+0x9e>
c00120ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120f2:	83 ec 0c             	sub    esp,0xc
c00120f5:	55                   	push   ebp
c00120f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	85 db                	test   ebx,ebx
c00120fe:	75 57                	jne    c0012157 <SysSizeFromFilename(regs*)+0xf9>
c0012100:	6a 00                	push   0x0
c0012102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012107:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001210a:	05 0c 01 00 00       	add    eax,0x10c
c001210f:	50                   	push   eax
c0012110:	57                   	push   edi
c0012111:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0012118:	53                   	push   ebx
c0012119:	e8 f8 96 ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001211e:	58                   	pop    eax
c001211f:	5a                   	pop    edx
c0012120:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012124:	50                   	push   eax
c0012125:	53                   	push   ebx
c0012126:	e8 53 91 ff ff       	call   c000b27e <KeDereferenceSymlink(char const*, char*)>
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	ba 00 00 00 00       	mov    edx,0x0
c0012133:	83 f8 01             	cmp    eax,0x1
c0012136:	b8 00 00 00 00       	mov    eax,0x0
c001213b:	74 2f                	je     c001216c <SysSizeFromFilename(regs*)+0x10e>
c001213d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012142:	74 3b                	je     c001217f <SysSizeFromFilename(regs*)+0x121>
c0012144:	85 f6                	test   esi,esi
c0012146:	0f 84 5c ff ff ff    	je     c00120a8 <SysSizeFromFilename(regs*)+0x4a>
c001214c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012152:	e9 51 ff ff ff       	jmp    c00120a8 <SysSizeFromFilename(regs*)+0x4a>
c0012157:	81 c4 4c 02 00 00    	add    esp,0x24c
c001215d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012162:	5b                   	pop    ebx
c0012163:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012168:	5e                   	pop    esi
c0012169:	5f                   	pop    edi
c001216a:	5d                   	pop    ebp
c001216b:	c3                   	ret    
c001216c:	85 f6                	test   esi,esi
c001216e:	0f 84 34 ff ff ff    	je     c00120a8 <SysSizeFromFilename(regs*)+0x4a>
c0012174:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001217a:	e9 29 ff ff ff       	jmp    c00120a8 <SysSizeFromFilename(regs*)+0x4a>
c001217f:	85 f6                	test   esi,esi
c0012181:	0f 84 21 ff ff ff    	je     c00120a8 <SysSizeFromFilename(regs*)+0x4a>
c0012187:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001218d:	e9 16 ff ff ff       	jmp    c00120a8 <SysSizeFromFilename(regs*)+0x4a>

c0012192 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012192:	55                   	push   ebp
c0012193:	57                   	push   edi
c0012194:	56                   	push   esi
c0012195:	53                   	push   ebx
c0012196:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001219c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00121a3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121a6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121a9:	85 f6                	test   esi,esi
c00121ab:	89 f8                	mov    eax,edi
c00121ad:	74 09                	je     c00121b8 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00121af:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121b8:	83 f8 02             	cmp    eax,0x2
c00121bb:	0f 86 ca 00 00 00    	jbe    c001228b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00121c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121c6:	76 1f                	jbe    c00121e7 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00121c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121cb:	31 d2                	xor    edx,edx
c00121cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121da:	31 c0                	xor    eax,eax
c00121dc:	81 c4 4c 02 00 00    	add    esp,0x24c
c00121e2:	5b                   	pop    ebx
c00121e3:	5e                   	pop    esi
c00121e4:	5f                   	pop    edi
c00121e5:	5d                   	pop    ebp
c00121e6:	c3                   	ret    
c00121e7:	83 ec 0c             	sub    esp,0xc
c00121ea:	68 14 01 00 00       	push   0x114
c00121ef:	e8 df 58 ff ff       	call   c0007ad3 <malloc>
c00121f4:	6a 00                	push   0x0
c00121f6:	89 c5                	mov    ebp,eax
c00121f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121fd:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012200:	51                   	push   ecx
c0012201:	57                   	push   edi
c0012202:	55                   	push   ebp
c0012203:	e8 3c 98 ff ff       	call   c000ba44 <File::File(char const*, Process*, bool)>
c0012208:	83 c4 1c             	add    esp,0x1c
c001220b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001220f:	50                   	push   eax
c0012210:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012213:	53                   	push   ebx
c0012214:	55                   	push   ebp
c0012215:	e8 28 9c ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c001221a:	83 c4 10             	add    esp,0x10
c001221d:	85 ed                	test   ebp,ebp
c001221f:	89 c3                	mov    ebx,eax
c0012221:	74 0d                	je     c0012230 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0012223:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012226:	83 ec 0c             	sub    esp,0xc
c0012229:	55                   	push   ebp
c001222a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001222d:	83 c4 10             	add    esp,0x10
c0012230:	85 db                	test   ebx,ebx
c0012232:	75 57                	jne    c001228b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012234:	6a 00                	push   0x0
c0012236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001223b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001223e:	05 0c 01 00 00       	add    eax,0x10c
c0012243:	50                   	push   eax
c0012244:	57                   	push   edi
c0012245:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001224c:	53                   	push   ebx
c001224d:	e8 c4 95 ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012252:	58                   	pop    eax
c0012253:	5a                   	pop    edx
c0012254:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012258:	50                   	push   eax
c0012259:	53                   	push   ebx
c001225a:	e8 1f 90 ff ff       	call   c000b27e <KeDereferenceSymlink(char const*, char*)>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	ba 00 00 00 00       	mov    edx,0x0
c0012267:	83 f8 01             	cmp    eax,0x1
c001226a:	b8 00 00 00 00       	mov    eax,0x0
c001226f:	74 2f                	je     c00122a0 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012271:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012276:	74 3b                	je     c00122b3 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012278:	85 f6                	test   esi,esi
c001227a:	0f 84 5c ff ff ff    	je     c00121dc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012280:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012286:	e9 51 ff ff ff       	jmp    c00121dc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001228b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012291:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012296:	5b                   	pop    ebx
c0012297:	ba ff ff ff ff       	mov    edx,0xffffffff
c001229c:	5e                   	pop    esi
c001229d:	5f                   	pop    edi
c001229e:	5d                   	pop    ebp
c001229f:	c3                   	ret    
c00122a0:	85 f6                	test   esi,esi
c00122a2:	0f 84 34 ff ff ff    	je     c00121dc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122a8:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122ae:	e9 29 ff ff ff       	jmp    c00121dc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122b3:	85 f6                	test   esi,esi
c00122b5:	0f 84 21 ff ff ff    	je     c00121dc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122bb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122c1:	e9 16 ff ff ff       	jmp    c00121dc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00122c6 <SysClose(regs*)>:
c00122c6:	53                   	push   ebx
c00122c7:	83 ec 08             	sub    esp,0x8
c00122ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00122d1:	83 f8 02             	cmp    eax,0x2
c00122d4:	76 41                	jbe    c0012317 <SysClose(regs*)+0x51>
c00122d6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00122dc:	83 fa 01             	cmp    edx,0x1
c00122df:	76 2d                	jbe    c001230e <SysClose(regs*)+0x48>
c00122e1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122e6:	77 2f                	ja     c0012317 <SysClose(regs*)+0x51>
c00122e8:	83 ec 0c             	sub    esp,0xc
c00122eb:	50                   	push   eax
c00122ec:	e8 aa 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00122f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00122f4:	89 c3                	mov    ebx,eax
c00122f6:	e8 a3 98 ff ff       	call   c000bb9e <File::close()>
c00122fb:	83 c4 10             	add    esp,0x10
c00122fe:	85 db                	test   ebx,ebx
c0012300:	74 0c                	je     c001230e <SysClose(regs*)+0x48>
c0012302:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012304:	83 ec 0c             	sub    esp,0xc
c0012307:	53                   	push   ebx
c0012308:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001230b:	83 c4 10             	add    esp,0x10
c001230e:	83 c4 08             	add    esp,0x8
c0012311:	31 c0                	xor    eax,eax
c0012313:	5b                   	pop    ebx
c0012314:	31 d2                	xor    edx,edx
c0012316:	c3                   	ret    
c0012317:	83 c4 08             	add    esp,0x8
c001231a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001231f:	5b                   	pop    ebx
c0012320:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012325:	c3                   	ret    

c0012326 <SysOpenDir(regs*)>:
c0012326:	56                   	push   esi
c0012327:	53                   	push   ebx
c0012328:	83 ec 04             	sub    esp,0x4
c001232b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001232f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012332:	85 c9                	test   ecx,ecx
c0012334:	74 5d                	je     c0012393 <SysOpenDir(regs*)+0x6d>
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	68 14 01 00 00       	push   0x114
c001233e:	e8 90 57 ff ff       	call   c0007ad3 <malloc>
c0012343:	83 c4 0c             	add    esp,0xc
c0012346:	89 c6                	mov    esi,eax
c0012348:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001234d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012350:	50                   	push   eax
c0012351:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012354:	52                   	push   edx
c0012355:	56                   	push   esi
c0012356:	e8 a7 9c ff ff       	call   c000c002 <Directory::Directory(char const*, Process*)>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	85 f6                	test   esi,esi
c0012360:	74 31                	je     c0012393 <SysOpenDir(regs*)+0x6d>
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	56                   	push   esi
c0012366:	e8 5f 9d ff ff       	call   c000c0ca <Directory::open()>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	85 c0                	test   eax,eax
c0012370:	75 21                	jne    c0012393 <SysOpenDir(regs*)+0x6d>
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	56                   	push   esi
c0012376:	e8 23 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001237b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	89 02                	mov    DWORD PTR [edx],eax
c0012383:	c1 f8 1f             	sar    eax,0x1f
c0012386:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012389:	83 c4 04             	add    esp,0x4
c001238c:	31 c0                	xor    eax,eax
c001238e:	5b                   	pop    ebx
c001238f:	31 d2                	xor    edx,edx
c0012391:	5e                   	pop    esi
c0012392:	c3                   	ret    
c0012393:	83 c4 04             	add    esp,0x4
c0012396:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001239b:	5b                   	pop    ebx
c001239c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123a1:	5e                   	pop    esi
c00123a2:	c3                   	ret    

c00123a3 <SysMakeDir(regs*)>:
c00123a3:	56                   	push   esi
c00123a4:	53                   	push   ebx
c00123a5:	83 ec 10             	sub    esp,0x10
c00123a8:	68 14 01 00 00       	push   0x114
c00123ad:	e8 21 57 ff ff       	call   c0007ad3 <malloc>
c00123b2:	83 c4 0c             	add    esp,0xc
c00123b5:	89 c3                	mov    ebx,eax
c00123b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123bf:	50                   	push   eax
c00123c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123c4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00123c7:	52                   	push   edx
c00123c8:	53                   	push   ebx
c00123c9:	e8 34 9c ff ff       	call   c000c002 <Directory::Directory(char const*, Process*)>
c00123ce:	83 c4 10             	add    esp,0x10
c00123d1:	85 db                	test   ebx,ebx
c00123d3:	74 2c                	je     c0012401 <SysMakeDir(regs*)+0x5e>
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	53                   	push   ebx
c00123d9:	e8 cc 9e ff ff       	call   c000c2aa <Directory::create()>
c00123de:	89 c6                	mov    esi,eax
c00123e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	31 c0                	xor    eax,eax
c00123ed:	85 f6                	test   esi,esi
c00123ef:	0f 95 c0             	setne  al
c00123f2:	31 d2                	xor    edx,edx
c00123f4:	f7 d8                	neg    eax
c00123f6:	83 d2 00             	adc    edx,0x0
c00123f9:	83 c4 04             	add    esp,0x4
c00123fc:	5b                   	pop    ebx
c00123fd:	f7 da                	neg    edx
c00123ff:	5e                   	pop    esi
c0012400:	c3                   	ret    
c0012401:	83 c4 04             	add    esp,0x4
c0012404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012409:	5b                   	pop    ebx
c001240a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001240f:	5e                   	pop    esi
c0012410:	c3                   	ret    

c0012411 <SysCloseDir(regs*)>:
c0012411:	53                   	push   ebx
c0012412:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012417:	83 ec 08             	sub    esp,0x8
c001241a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001241e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012421:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012426:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012429:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001242f:	77 2a                	ja     c001245b <SysCloseDir(regs*)+0x4a>
c0012431:	83 ec 0c             	sub    esp,0xc
c0012434:	51                   	push   ecx
c0012435:	e8 61 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001243a:	89 04 24             	mov    DWORD PTR [esp],eax
c001243d:	89 c3                	mov    ebx,eax
c001243f:	e8 e2 9c ff ff       	call   c000c126 <Directory::close()>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	85 db                	test   ebx,ebx
c0012449:	74 0c                	je     c0012457 <SysCloseDir(regs*)+0x46>
c001244b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	53                   	push   ebx
c0012451:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	31 c0                	xor    eax,eax
c0012459:	31 d2                	xor    edx,edx
c001245b:	83 c4 08             	add    esp,0x8
c001245e:	5b                   	pop    ebx
c001245f:	c3                   	ret    

c0012460 <SysWait(regs*)>:
c0012460:	83 ec 10             	sub    esp,0x10
c0012463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012467:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001246a:	52                   	push   edx
c001246b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001246e:	51                   	push   ecx
c001246f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012472:	50                   	push   eax
c0012473:	e8 38 3e 00 00       	call   c00162b0 <waitTask(int, int*, int)>
c0012478:	83 c4 1c             	add    esp,0x1c
c001247b:	89 c2                	mov    edx,eax
c001247d:	c1 fa 1f             	sar    edx,0x1f
c0012480:	c3                   	ret    

c0012481 <SysNotImpl(regs*)>:
c0012481:	83 ec 18             	sub    esp,0x18
c0012484:	68 c2 24 02 c0       	push   0xc00224c2
c0012489:	e8 d9 f0 ff ff       	call   c0011567 <KePanic(char const*)>
c001248e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012493:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012498:	83 c4 1c             	add    esp,0x1c
c001249b:	c3                   	ret    

c001249c <SysPanic(regs*)>:
c001249c:	83 ec 18             	sub    esp,0x18
c001249f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124a3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00124a6:	50                   	push   eax
c00124a7:	e8 bb f0 ff ff       	call   c0011567 <KePanic(char const*)>
c00124ac:	b8 01 00 00 00       	mov    eax,0x1
c00124b1:	31 d2                	xor    edx,edx
c00124b3:	83 c4 1c             	add    esp,0x1c
c00124b6:	c3                   	ret    

c00124b7 <SysRmdir(regs*)>:
c00124b7:	56                   	push   esi
c00124b8:	53                   	push   ebx
c00124b9:	83 ec 10             	sub    esp,0x10
c00124bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124c0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124c3:	68 14 01 00 00       	push   0x114
c00124c8:	e8 06 56 ff ff       	call   c0007ad3 <malloc>
c00124cd:	6a 00                	push   0x0
c00124cf:	89 c3                	mov    ebx,eax
c00124d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d9:	50                   	push   eax
c00124da:	56                   	push   esi
c00124db:	53                   	push   ebx
c00124dc:	e8 63 95 ff ff       	call   c000ba44 <File::File(char const*, Process*, bool)>
c00124e1:	83 c4 14             	add    esp,0x14
c00124e4:	53                   	push   ebx
c00124e5:	e8 24 98 ff ff       	call   c000bd0e <File::unlink()>
c00124ea:	83 c4 10             	add    esp,0x10
c00124ed:	85 db                	test   ebx,ebx
c00124ef:	89 c6                	mov    esi,eax
c00124f1:	74 0c                	je     c00124ff <SysRmdir(regs*)+0x48>
c00124f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124f5:	83 ec 0c             	sub    esp,0xc
c00124f8:	53                   	push   ebx
c00124f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124fc:	83 c4 10             	add    esp,0x10
c00124ff:	31 c0                	xor    eax,eax
c0012501:	85 f6                	test   esi,esi
c0012503:	0f 95 c0             	setne  al
c0012506:	31 d2                	xor    edx,edx
c0012508:	f7 d8                	neg    eax
c001250a:	83 d2 00             	adc    edx,0x0
c001250d:	83 c4 04             	add    esp,0x4
c0012510:	5b                   	pop    ebx
c0012511:	f7 da                	neg    edx
c0012513:	5e                   	pop    esi
c0012514:	c3                   	ret    

c0012515 <SysUnlink(regs*)>:
c0012515:	56                   	push   esi
c0012516:	53                   	push   ebx
c0012517:	83 ec 10             	sub    esp,0x10
c001251a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001251e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012521:	68 14 01 00 00       	push   0x114
c0012526:	e8 a8 55 ff ff       	call   c0007ad3 <malloc>
c001252b:	6a 00                	push   0x0
c001252d:	89 c3                	mov    ebx,eax
c001252f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012534:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012537:	50                   	push   eax
c0012538:	56                   	push   esi
c0012539:	53                   	push   ebx
c001253a:	e8 05 95 ff ff       	call   c000ba44 <File::File(char const*, Process*, bool)>
c001253f:	83 c4 14             	add    esp,0x14
c0012542:	53                   	push   ebx
c0012543:	e8 c6 97 ff ff       	call   c000bd0e <File::unlink()>
c0012548:	83 c4 10             	add    esp,0x10
c001254b:	85 db                	test   ebx,ebx
c001254d:	89 c6                	mov    esi,eax
c001254f:	74 0c                	je     c001255d <SysUnlink(regs*)+0x48>
c0012551:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	53                   	push   ebx
c0012557:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001255a:	83 c4 10             	add    esp,0x10
c001255d:	31 c0                	xor    eax,eax
c001255f:	85 f6                	test   esi,esi
c0012561:	0f 95 c0             	setne  al
c0012564:	31 d2                	xor    edx,edx
c0012566:	f7 d8                	neg    eax
c0012568:	83 d2 00             	adc    edx,0x0
c001256b:	83 c4 04             	add    esp,0x4
c001256e:	5b                   	pop    ebx
c001256f:	f7 da                	neg    edx
c0012571:	5e                   	pop    esi
c0012572:	c3                   	ret    

c0012573 <SysGetArgv(regs*)>:
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001257a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001257d:	85 c0                	test   eax,eax
c001257f:	78 2c                	js     c00125ad <SysGetArgv(regs*)+0x3a>
c0012581:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012587:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001258a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012590:	7d 1b                	jge    c00125ad <SysGetArgv(regs*)+0x3a>
c0012592:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012599:	85 c0                	test   eax,eax
c001259b:	74 18                	je     c00125b5 <SysGetArgv(regs*)+0x42>
c001259d:	83 ec 08             	sub    esp,0x8
c00125a0:	50                   	push   eax
c00125a1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00125a4:	50                   	push   eax
c00125a5:	e8 a6 e0 fe ff       	call   c0000650 <strcpy>
c00125aa:	83 c4 10             	add    esp,0x10
c00125ad:	31 c0                	xor    eax,eax
c00125af:	31 d2                	xor    edx,edx
c00125b1:	83 c4 0c             	add    esp,0xc
c00125b4:	c3                   	ret    
c00125b5:	b8 01 00 00 00       	mov    eax,0x1
c00125ba:	31 d2                	xor    edx,edx
c00125bc:	83 c4 0c             	add    esp,0xc
c00125bf:	c3                   	ret    

c00125c0 <SysUSleep(regs*)>:
c00125c0:	83 ec 1c             	sub    esp,0x1c
c00125c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125c7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00125ca:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00125cd:	6a 00                	push   0x0
c00125cf:	6a 64                	push   0x64
c00125d1:	52                   	push   edx
c00125d2:	50                   	push   eax
c00125d3:	e8 58 d1 00 00       	call   c001f730 <__udivdi3>
c00125d8:	83 c4 14             	add    esp,0x14
c00125db:	50                   	push   eax
c00125dc:	e8 b3 3d 00 00       	call   c0016394 <milliTenthSleep(unsigned int)>
c00125e1:	31 c0                	xor    eax,eax
c00125e3:	31 d2                	xor    edx,edx
c00125e5:	83 c4 1c             	add    esp,0x1c
c00125e8:	c3                   	ret    

c00125e9 <SysSpawn(regs*)>:
c00125e9:	56                   	push   esi
c00125ea:	53                   	push   ebx
c00125eb:	83 ec 04             	sub    esp,0x4
c00125ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125f2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125f5:	85 f6                	test   esi,esi
c00125f7:	75 0a                	jne    c0012603 <SysSpawn(regs*)+0x1a>
c00125f9:	83 c4 04             	add    esp,0x4
c00125fc:	31 c0                	xor    eax,eax
c00125fe:	5b                   	pop    ebx
c00125ff:	31 d2                	xor    edx,edx
c0012601:	5e                   	pop    esi
c0012602:	c3                   	ret    
c0012603:	83 ec 0c             	sub    esp,0xc
c0012606:	68 24 07 00 00       	push   0x724
c001260b:	e8 c3 54 ff ff       	call   c0007ad3 <malloc>
c0012610:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012613:	83 c4 10             	add    esp,0x10
c0012616:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012619:	89 c6                	mov    esi,eax
c001261b:	31 c0                	xor    eax,eax
c001261d:	85 c9                	test   ecx,ecx
c001261f:	75 08                	jne    c0012629 <SysSpawn(regs*)+0x40>
c0012621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012626:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012629:	52                   	push   edx
c001262a:	50                   	push   eax
c001262b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001262e:	50                   	push   eax
c001262f:	56                   	push   esi
c0012630:	e8 c7 33 00 00       	call   c00159fc <Process::Process(char const*, Process*, char**)>
c0012635:	83 c4 10             	add    esp,0x10
c0012638:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001263f:	75 b8                	jne    c00125f9 <SysSpawn(regs*)+0x10>
c0012641:	83 ec 0c             	sub    esp,0xc
c0012644:	56                   	push   esi
c0012645:	e8 ea 38 00 00       	call   c0015f34 <Process::createUserThread()>
c001264a:	8b 06                	mov    eax,DWORD PTR [esi]
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	83 c4 04             	add    esp,0x4
c0012652:	5b                   	pop    ebx
c0012653:	89 c2                	mov    edx,eax
c0012655:	c1 fa 1f             	sar    edx,0x1f
c0012658:	5e                   	pop    esi
c0012659:	c3                   	ret    

c001265a <SysGetEnv(regs*)>:
c001265a:	57                   	push   edi
c001265b:	56                   	push   esi
c001265c:	53                   	push   ebx
c001265d:	83 ec 1c             	sub    esp,0x1c
c0012660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012665:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012669:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001266c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001266f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012672:	51                   	push   ecx
c0012673:	e8 a7 ed ff ff       	call   c001141f <KeGetProcessTotalEnvCount(Process*)>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	39 c7                	cmp    edi,eax
c001267d:	7c 12                	jl     c0012691 <SysGetEnv(regs*)+0x37>
c001267f:	31 c0                	xor    eax,eax
c0012681:	31 d2                	xor    edx,edx
c0012683:	85 f6                	test   esi,esi
c0012685:	74 03                	je     c001268a <SysGetEnv(regs*)+0x30>
c0012687:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	5b                   	pop    ebx
c001268e:	5e                   	pop    esi
c001268f:	5f                   	pop    edi
c0012690:	c3                   	ret    
c0012691:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012695:	83 ec 04             	sub    esp,0x4
c0012698:	57                   	push   edi
c0012699:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001269f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00126a2:	57                   	push   edi
c00126a3:	50                   	push   eax
c00126a4:	e8 96 ed ff ff       	call   c001143f <KeGetProcessEnvPair(Process*, int)>
c00126a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126b4:	83 c4 0c             	add    esp,0xc
c00126b7:	85 d2                	test   edx,edx
c00126b9:	75 23                	jne    c00126de <SysGetEnv(regs*)+0x84>
c00126bb:	83 ec 0c             	sub    esp,0xc
c00126be:	50                   	push   eax
c00126bf:	e8 bc de fe ff       	call   c0000580 <strlen>
c00126c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00126c7:	89 c3                	mov    ebx,eax
c00126c9:	e8 b2 de fe ff       	call   c0000580 <strlen>
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	31 d2                	xor    edx,edx
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00126da:	5b                   	pop    ebx
c00126db:	5e                   	pop    esi
c00126dc:	5f                   	pop    edi
c00126dd:	c3                   	ret    
c00126de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126e1:	83 ec 08             	sub    esp,0x8
c00126e4:	50                   	push   eax
c00126e5:	56                   	push   esi
c00126e6:	e8 65 df fe ff       	call   c0000650 <strcpy>
c00126eb:	58                   	pop    eax
c00126ec:	5a                   	pop    edx
c00126ed:	68 dc 24 02 c0       	push   0xc00224dc
c00126f2:	56                   	push   esi
c00126f3:	e8 78 e1 fe ff       	call   c0000870 <strcat>
c00126f8:	59                   	pop    ecx
c00126f9:	5b                   	pop    ebx
c00126fa:	57                   	push   edi
c00126fb:	56                   	push   esi
c00126fc:	e8 6f e1 fe ff       	call   c0000870 <strcat>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	31 c0                	xor    eax,eax
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	31 d2                	xor    edx,edx
c001270b:	5b                   	pop    ebx
c001270c:	5e                   	pop    esi
c001270d:	5f                   	pop    edi
c001270e:	c3                   	ret    

c001270f <SysSetFatAttrib(regs*)>:
c001270f:	57                   	push   edi
c0012710:	56                   	push   esi
c0012711:	53                   	push   ebx
c0012712:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012716:	83 ec 0c             	sub    esp,0xc
c0012719:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001271c:	68 14 01 00 00       	push   0x114
c0012721:	e8 ad 53 ff ff       	call   c0007ad3 <malloc>
c0012726:	83 c4 0c             	add    esp,0xc
c0012729:	89 c3                	mov    ebx,eax
c001272b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012730:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012733:	50                   	push   eax
c0012734:	57                   	push   edi
c0012735:	53                   	push   ebx
c0012736:	e8 e7 93 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c001273b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001273e:	83 c4 0c             	add    esp,0xc
c0012741:	0f b6 d4             	movzx  edx,ah
c0012744:	0f b6 c0             	movzx  eax,al
c0012747:	52                   	push   edx
c0012748:	50                   	push   eax
c0012749:	53                   	push   ebx
c001274a:	e8 59 96 ff ff       	call   c000bda8 <File::chfatattr(unsigned char, unsigned char)>
c001274f:	83 c4 10             	add    esp,0x10
c0012752:	85 db                	test   ebx,ebx
c0012754:	89 c6                	mov    esi,eax
c0012756:	74 0c                	je     c0012764 <SysSetFatAttrib(regs*)+0x55>
c0012758:	8b 03                	mov    eax,DWORD PTR [ebx]
c001275a:	83 ec 0c             	sub    esp,0xc
c001275d:	53                   	push   ebx
c001275e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	5b                   	pop    ebx
c0012765:	31 c0                	xor    eax,eax
c0012767:	85 f6                	test   esi,esi
c0012769:	0f 95 c0             	setne  al
c001276c:	31 d2                	xor    edx,edx
c001276e:	5e                   	pop    esi
c001276f:	f7 d8                	neg    eax
c0012771:	83 d2 00             	adc    edx,0x0
c0012774:	f7 da                	neg    edx
c0012776:	5f                   	pop    edi
c0012777:	c3                   	ret    

c0012778 <SysPipe(regs*)>:
c0012778:	57                   	push   edi
c0012779:	56                   	push   esi
c001277a:	53                   	push   ebx
c001277b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277f:	83 ec 0c             	sub    esp,0xc
c0012782:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012785:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012788:	6a 20                	push   0x20
c001278a:	e8 44 53 ff ff       	call   c0007ad3 <malloc>
c001278f:	89 c3                	mov    ebx,eax
c0012791:	58                   	pop    eax
c0012792:	5a                   	pop    edx
c0012793:	68 00 50 00 00       	push   0x5000
c0012798:	53                   	push   ebx
c0012799:	e8 a0 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c001279e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127a1:	e8 f8 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00127a6:	89 07                	mov    DWORD PTR [edi],eax
c00127a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127ab:	e8 ee 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	31 d2                	xor    edx,edx
c00127b5:	89 06                	mov    DWORD PTR [esi],eax
c00127b7:	31 c0                	xor    eax,eax
c00127b9:	5b                   	pop    ebx
c00127ba:	5e                   	pop    esi
c00127bb:	5f                   	pop    edi
c00127bc:	c3                   	ret    

c00127bd <SysGetUnixTime(regs*)>:
c00127bd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00127c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127cc:	e9 1d 9d ff ff       	jmp    c000c4ee <Clock::timeInSecondsLocal()>

c00127d1 <string_ends_with(char const*, char const*)>:
c00127d1:	57                   	push   edi
c00127d2:	56                   	push   esi
c00127d3:	53                   	push   ebx
c00127d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127d8:	83 ec 0c             	sub    esp,0xc
c00127db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00127df:	53                   	push   ebx
c00127e0:	e8 9b dd fe ff       	call   c0000580 <strlen>
c00127e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127e8:	89 c6                	mov    esi,eax
c00127ea:	e8 91 dd fe ff       	call   c0000580 <strlen>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	31 d2                	xor    edx,edx
c00127f4:	39 c6                	cmp    esi,eax
c00127f6:	7d 06                	jge    c00127fe <string_ends_with(char const*, char const*)+0x2d>
c00127f8:	5b                   	pop    ebx
c00127f9:	89 d0                	mov    eax,edx
c00127fb:	5e                   	pop    esi
c00127fc:	5f                   	pop    edi
c00127fd:	c3                   	ret    
c00127fe:	83 ec 08             	sub    esp,0x8
c0012801:	29 c6                	sub    esi,eax
c0012803:	57                   	push   edi
c0012804:	01 f3                	add    ebx,esi
c0012806:	53                   	push   ebx
c0012807:	e8 74 df fe ff       	call   c0000780 <strcmp>
c001280c:	83 c4 10             	add    esp,0x10
c001280f:	31 d2                	xor    edx,edx
c0012811:	5b                   	pop    ebx
c0012812:	5e                   	pop    esi
c0012813:	85 c0                	test   eax,eax
c0012815:	5f                   	pop    edi
c0012816:	0f 94 c2             	sete   dl
c0012819:	89 d0                	mov    eax,edx
c001281b:	c3                   	ret    

c001281c <SysOpen(regs*)>:
c001281c:	56                   	push   esi
c001281d:	53                   	push   ebx
c001281e:	81 ec 04 01 00 00    	sub    esp,0x104
c0012824:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001282b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001282e:	85 c0                	test   eax,eax
c0012830:	0f 84 c4 01 00 00    	je     c00129fa <SysOpen(regs*)+0x1de>
c0012836:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012839:	85 c0                	test   eax,eax
c001283b:	0f 84 b9 01 00 00    	je     c00129fa <SysOpen(regs*)+0x1de>
c0012841:	6a 00                	push   0x0
c0012843:	68 de 24 02 c0       	push   0xc00224de
c0012848:	50                   	push   eax
c0012849:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001284d:	56                   	push   esi
c001284e:	e8 c3 8f ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012853:	89 34 24             	mov    DWORD PTR [esp],esi
c0012856:	e8 25 dd fe ff       	call   c0000580 <strlen>
c001285b:	83 c4 10             	add    esp,0x10
c001285e:	83 e8 01             	sub    eax,0x1
c0012861:	74 29                	je     c001288c <SysOpen(regs*)+0x70>
c0012863:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012867:	83 fa 2e             	cmp    edx,0x2e
c001286a:	74 1c                	je     c0012888 <SysOpen(regs*)+0x6c>
c001286c:	83 fa 3a             	cmp    edx,0x3a
c001286f:	74 17                	je     c0012888 <SysOpen(regs*)+0x6c>
c0012871:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012875:	83 e8 01             	sub    eax,0x1
c0012878:	74 12                	je     c001288c <SysOpen(regs*)+0x70>
c001287a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001287e:	83 fa 3a             	cmp    edx,0x3a
c0012881:	74 05                	je     c0012888 <SysOpen(regs*)+0x6c>
c0012883:	83 fa 2e             	cmp    edx,0x2e
c0012886:	75 e9                	jne    c0012871 <SysOpen(regs*)+0x55>
c0012888:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001288c:	83 ec 08             	sub    esp,0x8
c001288f:	68 e2 24 02 c0       	push   0xc00224e2
c0012894:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012897:	50                   	push   eax
c0012898:	e8 34 ff ff ff       	call   c00127d1 <string_ends_with(char const*, char const*)>
c001289d:	83 c4 10             	add    esp,0x10
c00128a0:	85 c0                	test   eax,eax
c00128a2:	74 1d                	je     c00128c1 <SysOpen(regs*)+0xa5>
c00128a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128a7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00128ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128b4:	81 c4 04 01 00 00    	add    esp,0x104
c00128ba:	31 c0                	xor    eax,eax
c00128bc:	5b                   	pop    ebx
c00128bd:	31 d2                	xor    edx,edx
c00128bf:	5e                   	pop    esi
c00128c0:	c3                   	ret    
c00128c1:	83 ec 08             	sub    esp,0x8
c00128c4:	68 e7 24 02 c0       	push   0xc00224e7
c00128c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128cc:	50                   	push   eax
c00128cd:	e8 ff fe ff ff       	call   c00127d1 <string_ends_with(char const*, char const*)>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	85 c0                	test   eax,eax
c00128d7:	75 cb                	jne    c00128a4 <SysOpen(regs*)+0x88>
c00128d9:	83 ec 08             	sub    esp,0x8
c00128dc:	68 e3 24 02 c0       	push   0xc00224e3
c00128e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e4:	50                   	push   eax
c00128e5:	e8 96 de fe ff       	call   c0000780 <strcmp>
c00128ea:	83 c4 10             	add    esp,0x10
c00128ed:	85 c0                	test   eax,eax
c00128ef:	74 b3                	je     c00128a4 <SysOpen(regs*)+0x88>
c00128f1:	83 ec 08             	sub    esp,0x8
c00128f4:	68 e2 24 02 c0       	push   0xc00224e2
c00128f9:	56                   	push   esi
c00128fa:	e8 d2 fe ff ff       	call   c00127d1 <string_ends_with(char const*, char const*)>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	85 c0                	test   eax,eax
c0012904:	75 9e                	jne    c00128a4 <SysOpen(regs*)+0x88>
c0012906:	83 ec 08             	sub    esp,0x8
c0012909:	68 ec 24 02 c0       	push   0xc00224ec
c001290e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012911:	50                   	push   eax
c0012912:	e8 ba fe ff ff       	call   c00127d1 <string_ends_with(char const*, char const*)>
c0012917:	83 c4 10             	add    esp,0x10
c001291a:	85 c0                	test   eax,eax
c001291c:	0f 85 eb 00 00 00    	jne    c0012a0d <SysOpen(regs*)+0x1f1>
c0012922:	83 ec 08             	sub    esp,0x8
c0012925:	68 f1 24 02 c0       	push   0xc00224f1
c001292a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001292d:	50                   	push   eax
c001292e:	e8 9e fe ff ff       	call   c00127d1 <string_ends_with(char const*, char const*)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	85 c0                	test   eax,eax
c0012938:	0f 85 cf 00 00 00    	jne    c0012a0d <SysOpen(regs*)+0x1f1>
c001293e:	83 ec 08             	sub    esp,0x8
c0012941:	68 ed 24 02 c0       	push   0xc00224ed
c0012946:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012949:	51                   	push   ecx
c001294a:	e8 31 de fe ff       	call   c0000780 <strcmp>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	85 c0                	test   eax,eax
c0012954:	0f 84 b3 00 00 00    	je     c0012a0d <SysOpen(regs*)+0x1f1>
c001295a:	83 ec 08             	sub    esp,0x8
c001295d:	68 ec 24 02 c0       	push   0xc00224ec
c0012962:	56                   	push   esi
c0012963:	e8 69 fe ff ff       	call   c00127d1 <string_ends_with(char const*, char const*)>
c0012968:	83 c4 10             	add    esp,0x10
c001296b:	85 c0                	test   eax,eax
c001296d:	0f 85 9a 00 00 00    	jne    c0012a0d <SysOpen(regs*)+0x1f1>
c0012973:	83 ec 0c             	sub    esp,0xc
c0012976:	68 14 01 00 00       	push   0x114
c001297b:	e8 53 51 ff ff       	call   c0007ad3 <malloc>
c0012980:	83 c4 0c             	add    esp,0xc
c0012983:	89 c6                	mov    esi,eax
c0012985:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001298a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001298d:	50                   	push   eax
c001298e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012991:	52                   	push   edx
c0012992:	56                   	push   esi
c0012993:	e8 8a 91 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0012998:	83 c4 10             	add    esp,0x10
c001299b:	85 f6                	test   esi,esi
c001299d:	74 5b                	je     c00129fa <SysOpen(regs*)+0x1de>
c001299f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00129a2:	0f b6 c2             	movzx  eax,dl
c00129a5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00129a8:	89 d0                	mov    eax,edx
c00129aa:	83 e0 01             	and    eax,0x1
c00129ad:	f6 c2 02             	test   dl,0x2
c00129b0:	74 03                	je     c00129b5 <SysOpen(regs*)+0x199>
c00129b2:	83 c8 02             	or     eax,0x2
c00129b5:	f6 c2 04             	test   dl,0x4
c00129b8:	74 03                	je     c00129bd <SysOpen(regs*)+0x1a1>
c00129ba:	83 c8 04             	or     eax,0x4
c00129bd:	f6 c2 08             	test   dl,0x8
c00129c0:	74 03                	je     c00129c5 <SysOpen(regs*)+0x1a9>
c00129c2:	83 c8 0a             	or     eax,0xa
c00129c5:	80 e2 10             	and    dl,0x10
c00129c8:	74 03                	je     c00129cd <SysOpen(regs*)+0x1b1>
c00129ca:	83 c8 12             	or     eax,0x12
c00129cd:	83 ec 08             	sub    esp,0x8
c00129d0:	50                   	push   eax
c00129d1:	56                   	push   esi
c00129d2:	e8 69 91 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	85 c0                	test   eax,eax
c00129dc:	75 1c                	jne    c00129fa <SysOpen(regs*)+0x1de>
c00129de:	83 ec 0c             	sub    esp,0xc
c00129e1:	56                   	push   esi
c00129e2:	e8 b7 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00129e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00129ea:	83 c4 10             	add    esp,0x10
c00129ed:	89 02                	mov    DWORD PTR [edx],eax
c00129ef:	c1 f8 1f             	sar    eax,0x1f
c00129f2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00129f5:	e9 ba fe ff ff       	jmp    c00128b4 <SysOpen(regs*)+0x98>
c00129fa:	81 c4 04 01 00 00    	add    esp,0x104
c0012a00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a05:	5b                   	pop    ebx
c0012a06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a0b:	5e                   	pop    esi
c0012a0c:	c3                   	ret    
c0012a0d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a10:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a16:	e9 92 fe ff ff       	jmp    c00128ad <SysOpen(regs*)+0x91>

c0012a1b <KeSystemCall(regs*, void*)>:
c0012a1b:	53                   	push   ebx
c0012a1c:	83 ec 08             	sub    esp,0x8
c0012a1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a23:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a26:	83 f8 3e             	cmp    eax,0x3e
c0012a29:	77 16                	ja     c0012a41 <KeSystemCall(regs*, void*)+0x26>
c0012a2b:	8b 14 85 00 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc300]
c0012a32:	85 d2                	test   edx,edx
c0012a34:	74 0b                	je     c0012a41 <KeSystemCall(regs*, void*)+0x26>
c0012a36:	83 ec 0c             	sub    esp,0xc
c0012a39:	53                   	push   ebx
c0012a3a:	ff d2                	call   edx
c0012a3c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a3f:	eb 0d                	jmp    c0012a4e <KeSystemCall(regs*, void*)+0x33>
c0012a41:	52                   	push   edx
c0012a42:	52                   	push   edx
c0012a43:	50                   	push   eax
c0012a44:	68 f6 24 02 c0       	push   0xc00224f6
c0012a49:	e8 bc 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012a4e:	83 c4 10             	add    esp,0x10
c0012a51:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a56:	83 c4 08             	add    esp,0x8
c0012a59:	31 d2                	xor    edx,edx
c0012a5b:	5b                   	pop    ebx
c0012a5c:	c3                   	ret    
c0012a5d:	66 90                	xchg   ax,ax
c0012a5f:	90                   	nop

c0012a60 <KeSwitchEndian16(unsigned short)>:
c0012a60:	83 ec 04             	sub    esp,0x4
c0012a63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a67:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012a6b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a6f:	c1 f8 08             	sar    eax,0x8
c0012a72:	89 c2                	mov    edx,eax
c0012a74:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a78:	c1 e0 08             	shl    eax,0x8
c0012a7b:	09 d0                	or     eax,edx
c0012a7d:	83 c4 04             	add    esp,0x4
c0012a80:	c3                   	ret    
c0012a81:	8d 76 00             	lea    esi,[esi+0x0]

c0012a84 <KeSwitchEndian32(unsigned int)>:
c0012a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a88:	c1 e8 18             	shr    eax,0x18
c0012a8b:	89 c2                	mov    edx,eax
c0012a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a91:	c1 e0 08             	shl    eax,0x8
c0012a94:	25 00 00 ff 00       	and    eax,0xff0000
c0012a99:	09 c2                	or     edx,eax
c0012a9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a9f:	c1 e8 08             	shr    eax,0x8
c0012aa2:	25 00 ff 00 00       	and    eax,0xff00
c0012aa7:	09 c2                	or     edx,eax
c0012aa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aad:	c1 e0 18             	shl    eax,0x18
c0012ab0:	09 d0                	or     eax,edx
c0012ab2:	c3                   	ret    
c0012ab3:	90                   	nop

c0012ab4 <EthernetCRC32(unsigned char*, int)>:
c0012ab4:	83 ec 10             	sub    esp,0x10
c0012ab7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012abc:	75 0a                	jne    c0012ac8 <EthernetCRC32(unsigned char*, int)+0x14>
c0012abe:	b8 00 00 00 00       	mov    eax,0x0
c0012ac3:	e9 8c 00 00 00       	jmp    c0012b54 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012ac8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012acd:	7f 09                	jg     c0012ad8 <EthernetCRC32(unsigned char*, int)+0x24>
c0012acf:	b8 00 00 00 00       	mov    eax,0x0
c0012ad4:	eb 7e                	jmp    c0012b54 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012ad6:	66 90                	xchg   ax,ax
c0012ad8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012ae0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012aec:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012af0:	7d 5a                	jge    c0012b4c <EthernetCRC32(unsigned char*, int)+0x98>
c0012af2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012afa:	01 d0                	add    eax,edx
c0012afc:	8a 00                	mov    al,BYTE PTR [eax]
c0012afe:	0f b6 c0             	movzx  eax,al
c0012b01:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b10:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b15:	7f 2d                	jg     c0012b44 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1b:	83 e0 01             	and    eax,0x1
c0012b1e:	74 10                	je     c0012b30 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b24:	d1 e8                	shr    eax,1
c0012b26:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b2b:	eb 0b                	jmp    c0012b38 <EthernetCRC32(unsigned char*, int)+0x84>
c0012b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b34:	d1 e8                	shr    eax,1
c0012b36:	66 90                	xchg   ax,ax
c0012b38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b3c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b41:	eb cd                	jmp    c0012b10 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b43:	90                   	nop
c0012b44:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012b49:	eb 9d                	jmp    c0012ae8 <EthernetCRC32(unsigned char*, int)+0x34>
c0012b4b:	90                   	nop
c0012b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b50:	f7 d0                	not    eax
c0012b52:	66 90                	xchg   ax,ax
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	c3                   	ret    

c0012b58 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012b58:	83 ec 2c             	sub    esp,0x2c
c0012b5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b5f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b73:	0f b7 c0             	movzx  eax,ax
c0012b76:	3d 06 08 00 00       	cmp    eax,0x806
c0012b7b:	75 13                	jne    c0012b90 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012b7d:	83 ec 0c             	sub    esp,0xc
c0012b80:	68 0a 25 02 c0       	push   0xc002250a
c0012b85:	e8 80 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b8a:	83 c4 10             	add    esp,0x10
c0012b8d:	eb 25                	jmp    c0012bb4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b8f:	90                   	nop
c0012b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b97:	0f b7 c0             	movzx  eax,ax
c0012b9a:	3d 00 08 00 00       	cmp    eax,0x800
c0012b9f:	75 13                	jne    c0012bb4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ba1:	83 ec 0c             	sub    esp,0xc
c0012ba4:	68 20 25 02 c0       	push   0xc0022520
c0012ba9:	e8 5c 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012bae:	83 c4 10             	add    esp,0x10
c0012bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb4:	90                   	nop
c0012bb5:	83 c4 2c             	add    esp,0x2c
c0012bb8:	c3                   	ret    

c0012bb9 <CmOpen(char const*)>:
c0012bb9:	57                   	push   edi
c0012bba:	56                   	push   esi
c0012bbb:	53                   	push   ebx
c0012bbc:	83 ec 1c             	sub    esp,0x1c
c0012bbf:	6a 30                	push   0x30
c0012bc1:	e8 0d 4f ff ff       	call   c0007ad3 <malloc>
c0012bc6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bcd:	89 c3                	mov    ebx,eax
c0012bcf:	e8 ff 4e ff ff       	call   c0007ad3 <malloc>
c0012bd4:	83 c4 0c             	add    esp,0xc
c0012bd7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012bdd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012be1:	89 c6                	mov    esi,eax
c0012be3:	50                   	push   eax
c0012be4:	e8 39 8f ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0012be9:	83 c4 0c             	add    esp,0xc
c0012bec:	89 33                	mov    DWORD PTR [ebx],esi
c0012bee:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012bf2:	50                   	push   eax
c0012bf3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bf7:	50                   	push   eax
c0012bf8:	56                   	push   esi
c0012bf9:	e8 44 92 ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c0012bfe:	5a                   	pop    edx
c0012bff:	59                   	pop    ecx
c0012c00:	6a 01                	push   0x1
c0012c02:	ff 33                	push   DWORD PTR [ebx]
c0012c04:	e8 37 8f ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0012c09:	5e                   	pop    esi
c0012c0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c0e:	e8 c0 4e ff ff       	call   c0007ad3 <malloc>
c0012c13:	5a                   	pop    edx
c0012c14:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c18:	89 c7                	mov    edi,eax
c0012c1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c1e:	56                   	push   esi
c0012c1f:	57                   	push   edi
c0012c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c28:	50                   	push   eax
c0012c29:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c2c:	83 c4 14             	add    esp,0x14
c0012c2f:	ff 33                	push   DWORD PTR [ebx]
c0012c31:	e8 68 8f ff ff       	call   c000bb9e <File::close()>
c0012c36:	59                   	pop    ecx
c0012c37:	58                   	pop    eax
c0012c38:	6a 13                	push   0x13
c0012c3a:	ff 33                	push   DWORD PTR [ebx]
c0012c3c:	e8 ff 8e ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0012c41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c43:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c45:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c48:	57                   	push   edi
c0012c49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c51:	50                   	push   eax
c0012c52:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c55:	83 c4 14             	add    esp,0x14
c0012c58:	57                   	push   edi
c0012c59:	e8 85 4e ff ff       	call   c0007ae3 <free>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012c64:	75 10                	jne    c0012c76 <CmOpen(char const*)+0xbd>
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	68 35 25 02 c0       	push   0xc0022535
c0012c6e:	e8 f4 e8 ff ff       	call   c0011567 <KePanic(char const*)>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	50                   	push   eax
c0012c77:	6a 00                	push   0x0
c0012c79:	6a 00                	push   0x0
c0012c7b:	ff 33                	push   DWORD PTR [ebx]
c0012c7d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c80:	e8 79 8f ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012c85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c87:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c89:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c8c:	57                   	push   edi
c0012c8d:	6a 00                	push   0x0
c0012c8f:	6a 2b                	push   0x2b
c0012c91:	50                   	push   eax
c0012c92:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c95:	83 c4 1c             	add    esp,0x1c
c0012c98:	6a 00                	push   0x0
c0012c9a:	6a 00                	push   0x0
c0012c9c:	ff 33                	push   DWORD PTR [ebx]
c0012c9e:	e8 5b 8f ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012ca3:	83 c4 0c             	add    esp,0xc
c0012ca6:	6a 08                	push   0x8
c0012ca8:	68 46 25 02 c0       	push   0xc0022546
c0012cad:	57                   	push   edi
c0012cae:	e8 cd d6 fe ff       	call   c0000380 <memcmp>
c0012cb3:	83 c4 10             	add    esp,0x10
c0012cb6:	85 c0                	test   eax,eax
c0012cb8:	74 10                	je     c0012cca <CmOpen(char const*)+0x111>
c0012cba:	83 ec 0c             	sub    esp,0xc
c0012cbd:	68 4f 25 02 c0       	push   0xc002254f
c0012cc2:	e8 a0 e8 ff ff       	call   c0011567 <KePanic(char const*)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	89 d8                	mov    eax,ebx
c0012cd3:	5b                   	pop    ebx
c0012cd4:	5e                   	pop    esi
c0012cd5:	5f                   	pop    edi
c0012cd6:	c3                   	ret    

c0012cd7 <CmClose(Reghive_Tag*)>:
c0012cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cdb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012cdf:	74 0b                	je     c0012cec <CmClose(Reghive_Tag*)+0x15>
c0012ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ce7:	e9 b2 8e ff ff       	jmp    c000bb9e <File::close()>
c0012cec:	c3                   	ret    

c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ced:	53                   	push   ebx
c0012cee:	83 ec 18             	sub    esp,0x18
c0012cf1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cf5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012cf9:	74 29                	je     c0012d24 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012cfb:	50                   	push   eax
c0012cfc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d01:	99                   	cdq    
c0012d02:	52                   	push   edx
c0012d03:	50                   	push   eax
c0012d04:	ff 33                	push   DWORD PTR [ebx]
c0012d06:	e8 f3 8e ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012d0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d0d:	5a                   	pop    edx
c0012d0e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d12:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d14:	51                   	push   ecx
c0012d15:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d19:	6a 00                	push   0x0
c0012d1b:	6a 2b                	push   0x2b
c0012d1d:	50                   	push   eax
c0012d1e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d21:	83 c4 20             	add    esp,0x20
c0012d24:	83 c4 18             	add    esp,0x18
c0012d27:	5b                   	pop    ebx
c0012d28:	c3                   	ret    

c0012d29 <CmGetString(Reghive_Tag*, int, char*)>:
c0012d29:	55                   	push   ebp
c0012d2a:	57                   	push   edi
c0012d2b:	56                   	push   esi
c0012d2c:	53                   	push   ebx
c0012d2d:	31 db                	xor    ebx,ebx
c0012d2f:	83 ec 70             	sub    esp,0x70
c0012d32:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012d36:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d3d:	50                   	push   eax
c0012d3e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012d45:	55                   	push   ebp
c0012d46:	e8 a2 ff ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012d53:	c1 e0 08             	shl    eax,0x8
c0012d56:	89 c2                	mov    edx,eax
c0012d58:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012d5d:	09 d0                	or     eax,edx
c0012d5f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012d64:	c1 e0 08             	shl    eax,0x8
c0012d67:	09 d0                	or     eax,edx
c0012d69:	74 25                	je     c0012d90 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012d6b:	52                   	push   edx
c0012d6c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012d70:	52                   	push   edx
c0012d71:	6b fb 0d             	imul   edi,ebx,0xd
c0012d74:	50                   	push   eax
c0012d75:	55                   	push   ebp
c0012d76:	e8 72 ff ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d7b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012d7f:	b9 27 00 00 00       	mov    ecx,0x27
c0012d84:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012d8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	83 c3 03             	add    ebx,0x3
c0012d93:	83 fb 15             	cmp    ebx,0x15
c0012d96:	75 b6                	jne    c0012d4e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012d98:	83 c4 6c             	add    esp,0x6c
c0012d9b:	5b                   	pop    ebx
c0012d9c:	5e                   	pop    esi
c0012d9d:	5f                   	pop    edi
c0012d9e:	5d                   	pop    ebp
c0012d9f:	c3                   	ret    

c0012da0 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012da0:	83 ec 40             	sub    esp,0x40
c0012da3:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012da7:	50                   	push   eax
c0012da8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012db0:	e8 38 ff ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db5:	83 c4 10             	add    esp,0x10
c0012db8:	83 c8 ff             	or     eax,0xffffffff
c0012dbb:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012dc0:	75 19                	jne    c0012ddb <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012dc2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012dc7:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012dcc:	c1 e0 08             	shl    eax,0x8
c0012dcf:	09 c2                	or     edx,eax
c0012dd1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012dd6:	c1 e0 10             	shl    eax,0x10
c0012dd9:	09 d0                	or     eax,edx
c0012ddb:	83 c4 3c             	add    esp,0x3c
c0012dde:	c3                   	ret    

c0012ddf <CmGetNext(Reghive_Tag*, int)>:
c0012ddf:	83 ec 40             	sub    esp,0x40
c0012de2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012de6:	50                   	push   eax
c0012de7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012deb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012def:	e8 f9 fe ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012df4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012df9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012dfe:	c1 e0 08             	shl    eax,0x8
c0012e01:	09 c2                	or     edx,eax
c0012e03:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e08:	83 c4 4c             	add    esp,0x4c
c0012e0b:	c1 e0 10             	shl    eax,0x10
c0012e0e:	09 d0                	or     eax,edx
c0012e10:	c3                   	ret    

c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e11:	53                   	push   ebx
c0012e12:	83 ec 18             	sub    esp,0x18
c0012e15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e19:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e1d:	74 29                	je     c0012e48 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e1f:	50                   	push   eax
c0012e20:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e25:	99                   	cdq    
c0012e26:	52                   	push   edx
c0012e27:	50                   	push   eax
c0012e28:	ff 33                	push   DWORD PTR [ebx]
c0012e2a:	e8 cf 8d ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e31:	5a                   	pop    edx
c0012e32:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e36:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e38:	51                   	push   ecx
c0012e39:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e3d:	6a 00                	push   0x0
c0012e3f:	6a 2b                	push   0x2b
c0012e41:	50                   	push   eax
c0012e42:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e45:	83 c4 20             	add    esp,0x20
c0012e48:	83 c4 18             	add    esp,0x18
c0012e4b:	5b                   	pop    ebx
c0012e4c:	c3                   	ret    

c0012e4d <CmFreeExtent(Reghive_Tag*, int)>:
c0012e4d:	53                   	push   ebx
c0012e4e:	83 ec 3c             	sub    esp,0x3c
c0012e51:	6a 2b                	push   0x2b
c0012e53:	6a 00                	push   0x0
c0012e55:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e59:	53                   	push   ebx
c0012e5a:	e8 91 d6 fe ff       	call   c00004f0 <memset>
c0012e5f:	83 c4 0c             	add    esp,0xc
c0012e62:	53                   	push   ebx
c0012e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e6b:	e8 a1 ff ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e70:	83 c4 48             	add    esp,0x48
c0012e73:	5b                   	pop    ebx
c0012e74:	c3                   	ret    

c0012e75 <CmUpdateHeader(Reghive_Tag*)>:
c0012e75:	83 ec 0c             	sub    esp,0xc
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e80:	74 10                	je     c0012e92 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e82:	52                   	push   edx
c0012e83:	8d 50 05             	lea    edx,[eax+0x5]
c0012e86:	52                   	push   edx
c0012e87:	6a 00                	push   0x0
c0012e89:	50                   	push   eax
c0012e8a:	e8 82 ff ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8f:	83 c4 10             	add    esp,0x10
c0012e92:	83 c4 0c             	add    esp,0xc
c0012e95:	c3                   	ret    

c0012e96 <CmExpand(Reghive_Tag*, int)>:
c0012e96:	55                   	push   ebp
c0012e97:	57                   	push   edi
c0012e98:	83 cf ff             	or     edi,0xffffffff
c0012e9b:	56                   	push   esi
c0012e9c:	53                   	push   ebx
c0012e9d:	83 ec 3c             	sub    esp,0x3c
c0012ea0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ea4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ea8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012eac:	74 59                	je     c0012f07 <CmExpand(Reghive_Tag*, int)+0x71>
c0012eae:	50                   	push   eax
c0012eaf:	31 d2                	xor    edx,edx
c0012eb1:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012eb5:	31 ff                	xor    edi,edi
c0012eb7:	52                   	push   edx
c0012eb8:	50                   	push   eax
c0012eb9:	ff 33                	push   DWORD PTR [ebx]
c0012ebb:	e8 3e 8d ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012ec0:	83 c4 0c             	add    esp,0xc
c0012ec3:	6a 2b                	push   0x2b
c0012ec5:	6a 00                	push   0x0
c0012ec7:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012ecb:	55                   	push   ebp
c0012ecc:	e8 1f d6 fe ff       	call   c00004f0 <memset>
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	39 f7                	cmp    edi,esi
c0012ed6:	7d 1b                	jge    c0012ef3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012ed8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eda:	83 ec 0c             	sub    esp,0xc
c0012edd:	47                   	inc    edi
c0012ede:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012ee2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ee4:	51                   	push   ecx
c0012ee5:	55                   	push   ebp
c0012ee6:	6a 00                	push   0x0
c0012ee8:	6a 2b                	push   0x2b
c0012eea:	50                   	push   eax
c0012eeb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012eee:	83 c4 20             	add    esp,0x20
c0012ef1:	eb e1                	jmp    c0012ed4 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012ef3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012ef6:	83 ec 0c             	sub    esp,0xc
c0012ef9:	01 fe                	add    esi,edi
c0012efb:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012efe:	53                   	push   ebx
c0012eff:	e8 71 ff ff ff       	call   c0012e75 <CmUpdateHeader(Reghive_Tag*)>
c0012f04:	83 c4 10             	add    esp,0x10
c0012f07:	83 c4 3c             	add    esp,0x3c
c0012f0a:	89 f8                	mov    eax,edi
c0012f0c:	5b                   	pop    ebx
c0012f0d:	5e                   	pop    esi
c0012f0e:	5f                   	pop    edi
c0012f0f:	5d                   	pop    ebp
c0012f10:	c3                   	ret    

c0012f11 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f11:	55                   	push   ebp
c0012f12:	57                   	push   edi
c0012f13:	56                   	push   esi
c0012f14:	53                   	push   ebx
c0012f15:	83 cb ff             	or     ebx,0xffffffff
c0012f18:	83 ec 1c             	sub    esp,0x1c
c0012f1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f1f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f23:	74 68                	je     c0012f8d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f25:	51                   	push   ecx
c0012f26:	be 2b 00 00 00       	mov    esi,0x2b
c0012f2b:	6a 00                	push   0x0
c0012f2d:	31 ff                	xor    edi,edi
c0012f2f:	6a 00                	push   0x0
c0012f31:	31 db                	xor    ebx,ebx
c0012f33:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f36:	e8 c3 8c ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012f3b:	83 c4 10             	add    esp,0x10
c0012f3e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f41:	76 3b                	jbe    c0012f7e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f46:	83 ec 0c             	sub    esp,0xc
c0012f49:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f4f:	51                   	push   ecx
c0012f50:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012f54:	51                   	push   ecx
c0012f55:	6a 00                	push   0x0
c0012f57:	6a 01                	push   0x1
c0012f59:	50                   	push   eax
c0012f5a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012f5d:	83 c4 20             	add    esp,0x20
c0012f60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012f65:	74 26                	je     c0012f8d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f67:	52                   	push   edx
c0012f68:	43                   	inc    ebx
c0012f69:	57                   	push   edi
c0012f6a:	56                   	push   esi
c0012f6b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f6e:	e8 8b 8c ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0012f73:	83 c6 2b             	add    esi,0x2b
c0012f76:	83 d7 00             	adc    edi,0x0
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	eb c0                	jmp    c0012f3e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012f7e:	50                   	push   eax
c0012f7f:	50                   	push   eax
c0012f80:	6a 40                	push   0x40
c0012f82:	55                   	push   ebp
c0012f83:	e8 0e ff ff ff       	call   c0012e96 <CmExpand(Reghive_Tag*, int)>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	89 c3                	mov    ebx,eax
c0012f8d:	83 c4 1c             	add    esp,0x1c
c0012f90:	89 d8                	mov    eax,ebx
c0012f92:	5b                   	pop    ebx
c0012f93:	5e                   	pop    esi
c0012f94:	5f                   	pop    edi
c0012f95:	5d                   	pop    ebp
c0012f96:	c3                   	ret    

c0012f97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012f97:	55                   	push   ebp
c0012f98:	57                   	push   edi
c0012f99:	56                   	push   esi
c0012f9a:	53                   	push   ebx
c0012f9b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012fa1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012fa8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012faf:	e8 5d ff ff ff       	call   c0012f11 <CmFindUnusedExtent(Reghive_Tag*)>
c0012fb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fb8:	83 c4 0c             	add    esp,0xc
c0012fbb:	6a 2b                	push   0x2b
c0012fbd:	6a 00                	push   0x0
c0012fbf:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012fc3:	55                   	push   ebp
c0012fc4:	e8 27 d5 fe ff       	call   c00004f0 <memset>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	85 db                	test   ebx,ebx
c0012fce:	74 12                	je     c0012fe2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012fd0:	51                   	push   ecx
c0012fd1:	55                   	push   ebp
c0012fd2:	53                   	push   ebx
c0012fd3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012fda:	e8 0e fd ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fdf:	83 c4 10             	add    esp,0x10
c0012fe2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012fe6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012fed:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012ff2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ff4:	85 db                	test   ebx,ebx
c0012ff6:	74 49                	je     c0013041 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ff8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012ffd:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013002:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013006:	c1 e0 08             	shl    eax,0x8
c0013009:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001300f:	09 c8                	or     eax,ecx
c0013011:	74 11                	je     c0013024 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013013:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013017:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001301b:	c1 e8 10             	shr    eax,0x10
c001301e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013022:	eb 0f                	jmp    c0013033 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013024:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013029:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001302e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013033:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013037:	c1 ea 08             	shr    edx,0x8
c001303a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001303f:	eb 0f                	jmp    c0013050 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013041:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013046:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001304b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013050:	52                   	push   edx
c0013051:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013055:	50                   	push   eax
c0013056:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001305a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013061:	e8 ab fd ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	85 db                	test   ebx,ebx
c001306b:	74 12                	je     c001307f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001306d:	50                   	push   eax
c001306e:	55                   	push   ebp
c001306f:	53                   	push   ebx
c0013070:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013077:	e8 95 fd ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013083:	83 c4 7c             	add    esp,0x7c
c0013086:	5b                   	pop    ebx
c0013087:	5e                   	pop    esi
c0013088:	5f                   	pop    edi
c0013089:	5d                   	pop    ebp
c001308a:	c3                   	ret    

c001308b <CmSetString(Reghive_Tag*, int, char const*)>:
c001308b:	55                   	push   ebp
c001308c:	57                   	push   edi
c001308d:	56                   	push   esi
c001308e:	53                   	push   ebx
c001308f:	bb 27 00 00 00       	mov    ebx,0x27
c0013094:	81 ec 88 00 00 00    	sub    esp,0x88
c001309a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00130a1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00130a8:	e8 d3 d4 fe ff       	call   c0000580 <strlen>
c00130ad:	8d 48 26             	lea    ecx,[eax+0x26]
c00130b0:	89 c8                	mov    eax,ecx
c00130b2:	99                   	cdq    
c00130b3:	f7 fb                	idiv   ebx
c00130b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00130c2:	7e 10                	jle    c00130d4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	68 60 25 02 c0       	push   0xc0022560
c00130cc:	e8 96 e4 ff ff       	call   c0011567 <KePanic(char const*)>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	53                   	push   ebx
c00130d5:	31 ed                	xor    ebp,ebp
c00130d7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00130db:	53                   	push   ebx
c00130dc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130e3:	57                   	push   edi
c00130e4:	e8 04 fc ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00130f0:	89 f0                	mov    eax,esi
c00130f2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00130f6:	c1 e0 08             	shl    eax,0x8
c00130f9:	09 c6                	or     esi,eax
c00130fb:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00130ff:	c1 e6 08             	shl    esi,0x8
c0013102:	09 c6                	or     esi,eax
c0013104:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0013108:	7e 72                	jle    c001317c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001310a:	85 f6                	test   esi,esi
c001310c:	75 25                	jne    c0013133 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001310e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013113:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013117:	50                   	push   eax
c0013118:	6a 00                	push   0x0
c001311a:	6a 00                	push   0x0
c001311c:	57                   	push   edi
c001311d:	e8 75 fe ff ff       	call   c0012f97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013122:	83 c4 10             	add    esp,0x10
c0013125:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013128:	89 c6                	mov    esi,eax
c001312a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001312d:	c1 f8 10             	sar    eax,0x10
c0013130:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013133:	51                   	push   ecx
c0013134:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013138:	52                   	push   edx
c0013139:	56                   	push   esi
c001313a:	57                   	push   edi
c001313b:	e8 ad fb ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013140:	83 c4 0c             	add    esp,0xc
c0013143:	6a 27                	push   0x27
c0013145:	6a 00                	push   0x0
c0013147:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001314b:	51                   	push   ecx
c001314c:	e8 9f d3 fe ff       	call   c00004f0 <memset>
c0013151:	6b c5 27             	imul   eax,ebp,0x27
c0013154:	83 c4 0c             	add    esp,0xc
c0013157:	6a 27                	push   0x27
c0013159:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013160:	50                   	push   eax
c0013161:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013165:	51                   	push   ecx
c0013166:	e8 25 d5 fe ff       	call   c0000690 <strncpy>
c001316b:	83 c4 0c             	add    esp,0xc
c001316e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013172:	52                   	push   edx
c0013173:	56                   	push   esi
c0013174:	57                   	push   edi
c0013175:	e8 97 fc ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001317a:	eb 19                	jmp    c0013195 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001317c:	85 f6                	test   esi,esi
c001317e:	74 18                	je     c0013198 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013180:	52                   	push   edx
c0013181:	52                   	push   edx
c0013182:	56                   	push   esi
c0013183:	57                   	push   edi
c0013184:	e8 c4 fc ff ff       	call   c0012e4d <CmFreeExtent(Reghive_Tag*, int)>
c0013189:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001318d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013191:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	45                   	inc    ebp
c0013199:	83 c3 03             	add    ebx,0x3
c001319c:	83 fd 07             	cmp    ebp,0x7
c001319f:	0f 85 47 ff ff ff    	jne    c00130ec <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00131a5:	50                   	push   eax
c00131a6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00131aa:	50                   	push   eax
c00131ab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131b2:	57                   	push   edi
c00131b3:	e8 59 fc ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131b8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00131be:	5b                   	pop    ebx
c00131bf:	5e                   	pop    esi
c00131c0:	5f                   	pop    edi
c00131c1:	5d                   	pop    ebp
c00131c2:	c3                   	ret    

c00131c3 <CmGetMatch(char*, char*, bool, bool*)>:
c00131c3:	56                   	push   esi
c00131c4:	53                   	push   ebx
c00131c5:	50                   	push   eax
c00131c6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00131cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00131cf:	74 25                	je     c00131f6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00131d1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00131d4:	31 db                	xor    ebx,ebx
c00131d6:	50                   	push   eax
c00131d7:	50                   	push   eax
c00131d8:	8d 04 9d 00 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc200]
c00131df:	50                   	push   eax
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 97 d5 fe ff       	call   c0000780 <strcmp>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	85 c0                	test   eax,eax
c00131ee:	74 2e                	je     c001321e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131f0:	43                   	inc    ebx
c00131f1:	83 fb 3f             	cmp    ebx,0x3f
c00131f4:	75 e0                	jne    c00131d6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00131f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00131f9:	31 db                	xor    ebx,ebx
c00131fb:	51                   	push   ecx
c00131fc:	51                   	push   ecx
c00131fd:	8d 04 9d 00 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc200]
c0013204:	50                   	push   eax
c0013205:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013209:	e8 72 d5 fe ff       	call   c0000780 <strcmp>
c001320e:	83 c4 10             	add    esp,0x10
c0013211:	85 c0                	test   eax,eax
c0013213:	74 09                	je     c001321e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013215:	43                   	inc    ebx
c0013216:	83 fb 3f             	cmp    ebx,0x3f
c0013219:	75 e0                	jne    c00131fb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001321b:	83 cb ff             	or     ebx,0xffffffff
c001321e:	5a                   	pop    edx
c001321f:	89 d8                	mov    eax,ebx
c0013221:	5b                   	pop    ebx
c0013222:	5e                   	pop    esi
c0013223:	c3                   	ret    

c0013224 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013224:	55                   	push   ebp
c0013225:	31 c0                	xor    eax,eax
c0013227:	57                   	push   edi
c0013228:	56                   	push   esi
c0013229:	53                   	push   ebx
c001322a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001322e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013232:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001323a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001323c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001323f:	83 fd 1f             	cmp    ebp,0x1f
c0013242:	7f 0b                	jg     c001324f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013244:	0f b6 c2             	movzx  eax,dl
c0013247:	d3 e0                	shl    eax,cl
c0013249:	09 07                	or     DWORD PTR [edi],eax
c001324b:	b0 01                	mov    al,0x1
c001324d:	01 33                	add    DWORD PTR [ebx],esi
c001324f:	5b                   	pop    ebx
c0013250:	5e                   	pop    esi
c0013251:	5f                   	pop    edi
c0013252:	5d                   	pop    ebp
c0013253:	c3                   	ret    

c0013254 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013254:	57                   	push   edi
c0013255:	56                   	push   esi
c0013256:	53                   	push   ebx
c0013257:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001325b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001325f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013263:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013267:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013269:	7c 17                	jl     c0013282 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001326b:	8b 17                	mov    edx,DWORD PTR [edi]
c001326d:	b8 01 00 00 00       	mov    eax,0x1
c0013272:	d3 e0                	shl    eax,cl
c0013274:	48                   	dec    eax
c0013275:	21 d0                	and    eax,edx
c0013277:	d3 ea                	shr    edx,cl
c0013279:	89 17                	mov    DWORD PTR [edi],edx
c001327b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001327d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013280:	eb 05                	jmp    c0013287 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013282:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013285:	31 c0                	xor    eax,eax
c0013287:	5b                   	pop    ebx
c0013288:	5e                   	pop    esi
c0013289:	5f                   	pop    edi
c001328a:	c3                   	ret    

c001328b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001328b:	83 ec 40             	sub    esp,0x40
c001328e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013292:	50                   	push   eax
c0013293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001329b:	e8 4d fa ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00132a4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00132a8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00132ac:	89 10                	mov    DWORD PTR [eax],edx
c00132ae:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00132b1:	83 c4 4c             	add    esp,0x4c
c00132b4:	c3                   	ret    

c00132b5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00132b5:	55                   	push   ebp
c00132b6:	57                   	push   edi
c00132b7:	56                   	push   esi
c00132b8:	53                   	push   ebx
c00132b9:	83 ec 40             	sub    esp,0x40
c00132bc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00132c0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00132c4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00132c8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00132cc:	53                   	push   ebx
c00132cd:	56                   	push   esi
c00132ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132d2:	e8 16 fa ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132d7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00132db:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00132df:	83 c4 0c             	add    esp,0xc
c00132e2:	53                   	push   ebx
c00132e3:	56                   	push   esi
c00132e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132e8:	e8 24 fb ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132ed:	83 c4 4c             	add    esp,0x4c
c00132f0:	5b                   	pop    ebx
c00132f1:	5e                   	pop    esi
c00132f2:	5f                   	pop    edi
c00132f3:	5d                   	pop    ebp
c00132f4:	c3                   	ret    

c00132f5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00132f5:	55                   	push   ebp
c00132f6:	57                   	push   edi
c00132f7:	56                   	push   esi
c00132f8:	31 f6                	xor    esi,esi
c00132fa:	53                   	push   ebx
c00132fb:	31 db                	xor    ebx,ebx
c00132fd:	83 ec 40             	sub    esp,0x40
c0013300:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013308:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013310:	6a 12                	push   0x12
c0013312:	68 ee 00 00 00       	push   0xee
c0013317:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001331b:	e8 d0 d1 fe ff       	call   c00004f0 <memset>
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013327:	6a 08                	push   0x8
c0013329:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001332d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013331:	50                   	push   eax
c0013332:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013336:	55                   	push   ebp
c0013337:	57                   	push   edi
c0013338:	e8 e7 fe ff ff       	call   c0013224 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001333d:	83 c4 10             	add    esp,0x10
c0013340:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013344:	50                   	push   eax
c0013345:	6a 06                	push   0x6
c0013347:	55                   	push   ebp
c0013348:	57                   	push   edi
c0013349:	e8 06 ff ff ff       	call   c0013254 <CmGetShift(unsigned int*, int*, int, bool*)>
c001334e:	83 c4 10             	add    esp,0x10
c0013351:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013356:	74 07                	je     c001335f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013358:	46                   	inc    esi
c0013359:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001335d:	eb e1                	jmp    c0013340 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001335f:	43                   	inc    ebx
c0013360:	83 fb 12             	cmp    ebx,0x12
c0013363:	75 c2                	jne    c0013327 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013365:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013369:	31 f6                	xor    esi,esi
c001336b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001336e:	50                   	push   eax
c001336f:	50                   	push   eax
c0013370:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013375:	46                   	inc    esi
c0013376:	8d 04 85 00 3e 02 c0 	lea    eax,[eax*4-0x3ffdc200]
c001337d:	50                   	push   eax
c001337e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013382:	e8 e9 d4 fe ff       	call   c0000870 <strcat>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	83 fe 18             	cmp    esi,0x18
c001338d:	75 df                	jne    c001336e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001338f:	83 c4 3c             	add    esp,0x3c
c0013392:	31 c0                	xor    eax,eax
c0013394:	5b                   	pop    ebx
c0013395:	5e                   	pop    esi
c0013396:	5f                   	pop    edi
c0013397:	5d                   	pop    ebp
c0013398:	c3                   	ret    

c0013399 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013399:	83 ec 40             	sub    esp,0x40
c001339c:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133a0:	50                   	push   eax
c00133a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133a9:	e8 3f f9 ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133ae:	58                   	pop    eax
c00133af:	5a                   	pop    edx
c00133b0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00133b4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00133b8:	50                   	push   eax
c00133b9:	e8 37 ff ff ff       	call   c00132f5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00133be:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00133c3:	83 c4 4c             	add    esp,0x4c
c00133c6:	c3                   	ret    

c00133c7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00133c7:	55                   	push   ebp
c00133c8:	57                   	push   edi
c00133c9:	56                   	push   esi
c00133ca:	53                   	push   ebx
c00133cb:	31 db                	xor    ebx,ebx
c00133cd:	83 ec 70             	sub    esp,0x70
c00133d0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00133d7:	6a 30                	push   0x30
c00133d9:	6a 00                	push   0x0
c00133db:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00133df:	56                   	push   esi
c00133e0:	e8 0b d1 fe ff       	call   c00004f0 <memset>
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	83 ec 0c             	sub    esp,0xc
c00133eb:	57                   	push   edi
c00133ec:	e8 8f d1 fe ff       	call   c0000580 <strlen>
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	39 d8                	cmp    eax,ebx
c00133f6:	76 16                	jbe    c001340e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00133f8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00133fc:	83 ec 0c             	sub    esp,0xc
c00133ff:	50                   	push   eax
c0013400:	e8 5b d5 fe ff       	call   c0000960 <toupper>
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001340b:	43                   	inc    ebx
c001340c:	eb da                	jmp    c00133e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001340e:	52                   	push   edx
c001340f:	31 db                	xor    ebx,ebx
c0013411:	6a 18                	push   0x18
c0013413:	31 ff                	xor    edi,edi
c0013415:	6a 3f                	push   0x3f
c0013417:	8d 44 24 24          	lea    eax,[esp+0x24]
c001341b:	50                   	push   eax
c001341c:	e8 cf d0 fe ff       	call   c00004f0 <memset>
c0013421:	83 c4 10             	add    esp,0x10
c0013424:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0013428:	8d 74 24 10          	lea    esi,[esp+0x10]
c001342c:	84 c0                	test   al,al
c001342e:	0f 84 af 00 00 00    	je     c00134e3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013434:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013438:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001343b:	83 ec 0c             	sub    esp,0xc
c001343e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013443:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013447:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001344b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013450:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013454:	56                   	push   esi
c0013455:	e8 26 d1 fe ff       	call   c0000580 <strlen>
c001345a:	83 c4 10             	add    esp,0x10
c001345d:	85 c0                	test   eax,eax
c001345f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013463:	74 0b                	je     c0013470 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013465:	50                   	push   eax
c0013466:	6a 01                	push   0x1
c0013468:	56                   	push   esi
c0013469:	8d 44 24 20          	lea    eax,[esp+0x20]
c001346d:	50                   	push   eax
c001346e:	eb 0a                	jmp    c001347a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013470:	50                   	push   eax
c0013471:	6a 00                	push   0x0
c0013473:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013477:	50                   	push   eax
c0013478:	6a 00                	push   0x0
c001347a:	e8 44 fd ff ff       	call   c00131c3 <CmGetMatch(char*, char*, bool, bool*)>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	83 f8 ff             	cmp    eax,0xffffffff
c0013485:	75 1a                	jne    c00134a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013487:	83 ec 0c             	sub    esp,0xc
c001348a:	68 75 25 02 c0       	push   0xc0022575
c001348f:	e8 d3 e0 ff ff       	call   c0011567 <KePanic(char const*)>
c0013494:	83 c4 10             	add    esp,0x10
c0013497:	b8 02 00 00 00       	mov    eax,0x2
c001349c:	e9 bb 00 00 00       	jmp    c001355c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00134a1:	83 ff 18             	cmp    edi,0x18
c00134a4:	75 1a                	jne    c00134c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00134a6:	83 ec 0c             	sub    esp,0xc
c00134a9:	68 8a 25 02 c0       	push   0xc002258a
c00134ae:	e8 b4 e0 ff ff       	call   c0011567 <KePanic(char const*)>
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	b8 01 00 00 00       	mov    eax,0x1
c00134bb:	e9 9c 00 00 00       	jmp    c001355c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00134c0:	47                   	inc    edi
c00134c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134c6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00134ca:	0f 45 dd             	cmovne ebx,ebp
c00134cd:	83 ec 0c             	sub    esp,0xc
c00134d0:	56                   	push   esi
c00134d1:	e8 aa d0 fe ff       	call   c0000580 <strlen>
c00134d6:	83 c4 10             	add    esp,0x10
c00134d9:	85 c0                	test   eax,eax
c00134db:	74 06                	je     c00134e3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134dd:	43                   	inc    ebx
c00134de:	e9 41 ff ff ff       	jmp    c0013424 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00134e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00134eb:	31 db                	xor    ebx,ebx
c00134ed:	31 ff                	xor    edi,edi
c00134ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00134f7:	50                   	push   eax
c00134f8:	6a 12                	push   0x12
c00134fa:	68 ee 00 00 00       	push   0xee
c00134ff:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013506:	e8 e5 cf fe ff       	call   c00004f0 <memset>
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013512:	83 fb 17             	cmp    ebx,0x17
c0013515:	7e 26                	jle    c001353d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013517:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001351b:	50                   	push   eax
c001351c:	6a 08                	push   0x8
c001351e:	55                   	push   ebp
c001351f:	56                   	push   esi
c0013520:	e8 2f fd ff ff       	call   c0013254 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001352d:	74 26                	je     c0013555 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001352f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013536:	4b                   	dec    ebx
c0013537:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001353a:	47                   	inc    edi
c001353b:	eb 1c                	jmp    c0013559 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001353d:	6a 06                	push   0x6
c001353f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013544:	50                   	push   eax
c0013545:	55                   	push   ebp
c0013546:	56                   	push   esi
c0013547:	e8 d8 fc ff ff       	call   c0013224 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	84 c0                	test   al,al
c0013551:	75 06                	jne    c0013559 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013553:	eb c2                	jmp    c0013517 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013555:	31 c0                	xor    eax,eax
c0013557:	eb 03                	jmp    c001355c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013559:	43                   	inc    ebx
c001355a:	eb b2                	jmp    c001350e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001355c:	83 c4 6c             	add    esp,0x6c
c001355f:	5b                   	pop    ebx
c0013560:	5e                   	pop    esi
c0013561:	5f                   	pop    edi
c0013562:	5d                   	pop    ebp
c0013563:	c3                   	ret    

c0013564 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013564:	53                   	push   ebx
c0013565:	83 ec 3c             	sub    esp,0x3c
c0013568:	6a 2b                	push   0x2b
c001356a:	6a 00                	push   0x0
c001356c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013570:	53                   	push   ebx
c0013571:	e8 7a cf fe ff       	call   c00004f0 <memset>
c0013576:	58                   	pop    eax
c0013577:	5a                   	pop    edx
c0013578:	8d 44 24 11          	lea    eax,[esp+0x11]
c001357c:	50                   	push   eax
c001357d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013581:	e8 41 fe ff ff       	call   c00133c7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013586:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001358b:	83 c4 0c             	add    esp,0xc
c001358e:	6a 15                	push   0x15
c0013590:	6a 00                	push   0x0
c0013592:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013596:	50                   	push   eax
c0013597:	e8 54 cf fe ff       	call   c00004f0 <memset>
c001359c:	53                   	push   ebx
c001359d:	6a 00                	push   0x0
c001359f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135a7:	e8 eb f9 ff ff       	call   c0012f97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00135ac:	83 c4 58             	add    esp,0x58
c00135af:	5b                   	pop    ebx
c00135b0:	c3                   	ret    

c00135b1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00135b1:	56                   	push   esi
c00135b2:	53                   	push   ebx
c00135b3:	83 ec 48             	sub    esp,0x48
c00135b6:	6a 12                	push   0x12
c00135b8:	68 ff 00 00 00       	push   0xff
c00135bd:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00135c1:	56                   	push   esi
c00135c2:	e8 29 cf fe ff       	call   c00004f0 <memset>
c00135c7:	5a                   	pop    edx
c00135c8:	59                   	pop    ecx
c00135c9:	56                   	push   esi
c00135ca:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00135ce:	e8 f4 fd ff ff       	call   c00133c7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135d3:	83 c4 10             	add    esp,0x10
c00135d6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00135da:	85 db                	test   ebx,ebx
c00135dc:	74 42                	je     c0013620 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00135de:	50                   	push   eax
c00135df:	8d 44 24 19          	lea    eax,[esp+0x19]
c00135e3:	50                   	push   eax
c00135e4:	53                   	push   ebx
c00135e5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135e9:	e8 ff f6 ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00135ee:	83 c4 0c             	add    esp,0xc
c00135f1:	6a 12                	push   0x12
c00135f3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00135f7:	50                   	push   eax
c00135f8:	56                   	push   esi
c00135f9:	e8 82 cd fe ff       	call   c0000380 <memcmp>
c00135fe:	83 c4 10             	add    esp,0x10
c0013601:	85 c0                	test   eax,eax
c0013603:	74 1e                	je     c0013623 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013605:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001360a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001360f:	c1 e3 08             	shl    ebx,0x8
c0013612:	09 d8                	or     eax,ebx
c0013614:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013619:	c1 e3 10             	shl    ebx,0x10
c001361c:	09 c3                	or     ebx,eax
c001361e:	eb ba                	jmp    c00135da <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013620:	83 cb ff             	or     ebx,0xffffffff
c0013623:	83 c4 44             	add    esp,0x44
c0013626:	89 d8                	mov    eax,ebx
c0013628:	5b                   	pop    ebx
c0013629:	5e                   	pop    esi
c001362a:	c3                   	ret    

c001362b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001362b:	57                   	push   edi
c001362c:	56                   	push   esi
c001362d:	53                   	push   ebx
c001362e:	83 ec 34             	sub    esp,0x34
c0013631:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013635:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013639:	6a 2b                	push   0x2b
c001363b:	6a 00                	push   0x0
c001363d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013641:	53                   	push   ebx
c0013642:	e8 a9 ce fe ff       	call   c00004f0 <memset>
c0013647:	58                   	pop    eax
c0013648:	5a                   	pop    edx
c0013649:	8d 44 24 11          	lea    eax,[esp+0x11]
c001364d:	50                   	push   eax
c001364e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013652:	e8 70 fd ff ff       	call   c00133c7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013657:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001365b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001365f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013663:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013667:	53                   	push   ebx
c0013668:	6a 00                	push   0x0
c001366a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001366e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013672:	e8 20 f9 ff ff       	call   c0012f97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013677:	83 c4 50             	add    esp,0x50
c001367a:	5b                   	pop    ebx
c001367b:	5e                   	pop    esi
c001367c:	5f                   	pop    edi
c001367d:	c3                   	ret    

c001367e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001367e:	55                   	push   ebp
c001367f:	57                   	push   edi
c0013680:	56                   	push   esi
c0013681:	53                   	push   ebx
c0013682:	83 ec 40             	sub    esp,0x40
c0013685:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013689:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001368d:	6a 2b                	push   0x2b
c001368f:	6a 00                	push   0x0
c0013691:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013695:	56                   	push   esi
c0013696:	e8 55 ce fe ff       	call   c00004f0 <memset>
c001369b:	5f                   	pop    edi
c001369c:	89 ef                	mov    edi,ebp
c001369e:	58                   	pop    eax
c001369f:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136a3:	50                   	push   eax
c00136a4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136a8:	e8 1a fd ff ff       	call   c00133c7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ad:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00136b2:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00136b7:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00136bc:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00136c1:	83 c4 10             	add    esp,0x10
c00136c4:	85 ed                	test   ebp,ebp
c00136c6:	74 14                	je     c00136dc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136c8:	51                   	push   ecx
c00136c9:	51                   	push   ecx
c00136ca:	57                   	push   edi
c00136cb:	53                   	push   ebx
c00136cc:	e8 0e f7 ff ff       	call   c0012ddf <CmGetNext(Reghive_Tag*, int)>
c00136d1:	83 c4 10             	add    esp,0x10
c00136d4:	85 c0                	test   eax,eax
c00136d6:	74 04                	je     c00136dc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136d8:	89 c7                	mov    edi,eax
c00136da:	eb e8                	jmp    c00136c4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00136dc:	56                   	push   esi
c00136dd:	6a 00                	push   0x0
c00136df:	57                   	push   edi
c00136e0:	53                   	push   ebx
c00136e1:	e8 b1 f8 ff ff       	call   c0012f97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136e6:	83 c4 0c             	add    esp,0xc
c00136e9:	56                   	push   esi
c00136ea:	50                   	push   eax
c00136eb:	89 c7                	mov    edi,eax
c00136ed:	53                   	push   ebx
c00136ee:	e8 fa f5 ff ff       	call   c0012ced <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136f3:	58                   	pop    eax
c00136f4:	5a                   	pop    edx
c00136f5:	6a 6c                	push   0x6c
c00136f7:	6a 00                	push   0x0
c00136f9:	6a 00                	push   0x0
c00136fb:	68 9b 25 02 c0       	push   0xc002259b
c0013700:	57                   	push   edi
c0013701:	53                   	push   ebx
c0013702:	e8 24 ff ff ff       	call   c001362b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013707:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001370b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001370f:	c1 e8 10             	shr    eax,0x10
c0013712:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013716:	83 c4 1c             	add    esp,0x1c
c0013719:	56                   	push   esi
c001371a:	57                   	push   edi
c001371b:	53                   	push   ebx
c001371c:	e8 f0 f6 ff ff       	call   c0012e11 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013721:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013726:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001372b:	c1 e0 08             	shl    eax,0x8
c001372e:	09 c2                	or     edx,eax
c0013730:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013735:	83 c4 4c             	add    esp,0x4c
c0013738:	5b                   	pop    ebx
c0013739:	5e                   	pop    esi
c001373a:	c1 e0 10             	shl    eax,0x10
c001373d:	09 d0                	or     eax,edx
c001373f:	5f                   	pop    edi
c0013740:	5d                   	pop    ebp
c0013741:	c3                   	ret    

c0013742 <zStrtok(char*, char const*)>:
c0013742:	55                   	push   ebp
c0013743:	57                   	push   edi
c0013744:	56                   	push   esi
c0013745:	53                   	push   ebx
c0013746:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001374a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001374e:	85 db                	test   ebx,ebx
c0013750:	74 2f                	je     c0013781 <zStrtok(char*, char const*)+0x3f>
c0013752:	85 c0                	test   eax,eax
c0013754:	75 09                	jne    c001375f <zStrtok(char*, char const*)+0x1d>
c0013756:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001375b:	85 c0                	test   eax,eax
c001375d:	74 50                	je     c00137af <zStrtok(char*, char const*)+0x6d>
c001375f:	31 c9                	xor    ecx,ecx
c0013761:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013765:	74 03                	je     c001376a <zStrtok(char*, char const*)+0x28>
c0013767:	41                   	inc    ecx
c0013768:	eb f7                	jmp    c0013761 <zStrtok(char*, char const*)+0x1f>
c001376a:	31 d2                	xor    edx,edx
c001376c:	39 ca                	cmp    edx,ecx
c001376e:	74 15                	je     c0013785 <zStrtok(char*, char const*)+0x43>
c0013770:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013774:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013777:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001377a:	39 ee                	cmp    esi,ebp
c001377c:	74 13                	je     c0013791 <zStrtok(char*, char const*)+0x4f>
c001377e:	42                   	inc    edx
c001377f:	eb eb                	jmp    c001376c <zStrtok(char*, char const*)+0x2a>
c0013781:	31 c0                	xor    eax,eax
c0013783:	eb 2a                	jmp    c00137af <zStrtok(char*, char const*)+0x6d>
c0013785:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001378f:	eb 1e                	jmp    c00137af <zStrtok(char*, char const*)+0x6d>
c0013791:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013794:	39 ce                	cmp    esi,ecx
c0013796:	75 0a                	jne    c00137a2 <zStrtok(char*, char const*)+0x60>
c0013798:	40                   	inc    eax
c0013799:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001379e:	89 d8                	mov    eax,ebx
c00137a0:	eb 0d                	jmp    c00137af <zStrtok(char*, char const*)+0x6d>
c00137a2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00137a5:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00137a9:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00137af:	5b                   	pop    ebx
c00137b0:	5e                   	pop    esi
c00137b1:	5f                   	pop    edi
c00137b2:	5d                   	pop    ebp
c00137b3:	c3                   	ret    

c00137b4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00137b4:	57                   	push   edi
c00137b5:	56                   	push   esi
c00137b6:	53                   	push   ebx
c00137b7:	81 ec 08 01 00 00    	sub    esp,0x108
c00137bd:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00137c4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00137cb:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00137cf:	53                   	push   ebx
c00137d0:	e8 7b ce fe ff       	call   c0000650 <strcpy>
c00137d5:	59                   	pop    ecx
c00137d6:	5e                   	pop    esi
c00137d7:	68 ff 28 02 c0       	push   0xc00228ff
c00137dc:	53                   	push   ebx
c00137dd:	bb 01 00 00 00       	mov    ebx,0x1
c00137e2:	e8 5b ff ff ff       	call   c0013742 <zStrtok(char*, char const*)>
c00137e7:	83 c4 10             	add    esp,0x10
c00137ea:	85 c0                	test   eax,eax
c00137ec:	74 3b                	je     c0013829 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137ee:	52                   	push   edx
c00137ef:	50                   	push   eax
c00137f0:	6a 01                	push   0x1
c00137f2:	57                   	push   edi
c00137f3:	e8 b9 fd ff ff       	call   c00135b1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00137f8:	59                   	pop    ecx
c00137f9:	5e                   	pop    esi
c00137fa:	89 c3                	mov    ebx,eax
c00137fc:	68 ff 28 02 c0       	push   0xc00228ff
c0013801:	6a 00                	push   0x0
c0013803:	e8 3a ff ff ff       	call   c0013742 <zStrtok(char*, char const*)>
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	85 c0                	test   eax,eax
c001380d:	89 c6                	mov    esi,eax
c001380f:	74 18                	je     c0013829 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013811:	52                   	push   edx
c0013812:	52                   	push   edx
c0013813:	53                   	push   ebx
c0013814:	57                   	push   edi
c0013815:	e8 86 f5 ff ff       	call   c0012da0 <CmEnterDirectory(Reghive_Tag*, int)>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	83 f8 ff             	cmp    eax,0xffffffff
c0013820:	89 c3                	mov    ebx,eax
c0013822:	74 05                	je     c0013829 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013824:	50                   	push   eax
c0013825:	56                   	push   esi
c0013826:	53                   	push   ebx
c0013827:	eb c9                	jmp    c00137f2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013829:	81 c4 00 01 00 00    	add    esp,0x100
c001382f:	89 d8                	mov    eax,ebx
c0013831:	5b                   	pop    ebx
c0013832:	5e                   	pop    esi
c0013833:	5f                   	pop    edi
c0013834:	c3                   	ret    

c0013835 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013835:	55                   	push   ebp
c0013836:	57                   	push   edi
c0013837:	56                   	push   esi
c0013838:	53                   	push   ebx
c0013839:	83 ec 5c             	sub    esp,0x5c
c001383c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013840:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013844:	85 db                	test   ebx,ebx
c0013846:	0f 8e 84 00 00 00    	jle    c00138d0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001384c:	57                   	push   edi
c001384d:	31 ed                	xor    ebp,ebp
c001384f:	6a 32                	push   0x32
c0013851:	6a 00                	push   0x0
c0013853:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013857:	57                   	push   edi
c0013858:	e8 93 cc fe ff       	call   c00004f0 <memset>
c001385d:	83 c4 0c             	add    esp,0xc
c0013860:	57                   	push   edi
c0013861:	53                   	push   ebx
c0013862:	56                   	push   esi
c0013863:	e8 31 fb ff ff       	call   c0013399 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013868:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001386c:	83 c4 10             	add    esp,0x10
c001386f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013873:	7d 13                	jge    c0013888 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	45                   	inc    ebp
c0013879:	68 a3 2c 02 c0       	push   0xc0022ca3
c001387e:	e8 87 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013883:	83 c4 10             	add    esp,0x10
c0013886:	eb e7                	jmp    c001386f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013888:	51                   	push   ecx
c0013889:	57                   	push   edi
c001388a:	53                   	push   ebx
c001388b:	68 a1 25 02 c0       	push   0xc00225a1
c0013890:	e8 75 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013895:	83 c4 10             	add    esp,0x10
c0013898:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001389d:	75 1e                	jne    c00138bd <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001389f:	52                   	push   edx
c00138a0:	52                   	push   edx
c00138a1:	53                   	push   ebx
c00138a2:	56                   	push   esi
c00138a3:	e8 f8 f4 ff ff       	call   c0012da0 <CmEnterDirectory(Reghive_Tag*, int)>
c00138a8:	83 c4 0c             	add    esp,0xc
c00138ab:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00138af:	8d 51 04             	lea    edx,[ecx+0x4]
c00138b2:	52                   	push   edx
c00138b3:	50                   	push   eax
c00138b4:	56                   	push   esi
c00138b5:	e8 7b ff ff ff       	call   c0013835 <CmDisplayTree(Reghive_Tag*, int, int)>
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	50                   	push   eax
c00138be:	50                   	push   eax
c00138bf:	53                   	push   ebx
c00138c0:	56                   	push   esi
c00138c1:	e8 19 f5 ff ff       	call   c0012ddf <CmGetNext(Reghive_Tag*, int)>
c00138c6:	83 c4 10             	add    esp,0x10
c00138c9:	89 c3                	mov    ebx,eax
c00138cb:	e9 74 ff ff ff       	jmp    c0013844 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00138d0:	83 c4 5c             	add    esp,0x5c
c00138d3:	5b                   	pop    ebx
c00138d4:	5e                   	pop    esi
c00138d5:	5f                   	pop    edi
c00138d6:	5d                   	pop    ebp
c00138d7:	c3                   	ret    

c00138d8 <CmSplitFinalSlashInPlace(char*)>:
c00138d8:	53                   	push   ebx
c00138d9:	83 ec 14             	sub    esp,0x14
c00138dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138e0:	53                   	push   ebx
c00138e1:	e8 9a cc fe ff       	call   c0000580 <strlen>
c00138e6:	83 c4 10             	add    esp,0x10
c00138e9:	48                   	dec    eax
c00138ea:	85 c0                	test   eax,eax
c00138ec:	74 15                	je     c0013903 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00138ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00138f2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00138f5:	75 09                	jne    c0013900 <CmSplitFinalSlashInPlace(char*)+0x28>
c00138f7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00138fa:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00138fe:	eb 05                	jmp    c0013905 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013900:	48                   	dec    eax
c0013901:	eb e7                	jmp    c00138ea <CmSplitFinalSlashInPlace(char*)+0x12>
c0013903:	31 c0                	xor    eax,eax
c0013905:	83 c4 08             	add    esp,0x8
c0013908:	5b                   	pop    ebx
c0013909:	c3                   	ret    

c001390a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001390a:	55                   	push   ebp
c001390b:	57                   	push   edi
c001390c:	56                   	push   esi
c001390d:	53                   	push   ebx
c001390e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013914:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001391b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001391e:	8d 43 01             	lea    eax,[ebx+0x1]
c0013921:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013925:	89 f0                	mov    eax,esi
c0013927:	3c 40                	cmp    al,0x40
c0013929:	75 1b                	jne    c0013946 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c001392b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001392e:	85 c0                	test   eax,eax
c0013930:	74 08                	je     c001393a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013932:	83 f8 3a             	cmp    eax,0x3a
c0013935:	74 03                	je     c001393a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013937:	43                   	inc    ebx
c0013938:	eb f1                	jmp    c001392b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c001393a:	85 c0                	test   eax,eax
c001393c:	0f 84 45 01 00 00    	je     c0013a87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013942:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013945:	43                   	inc    ebx
c0013946:	50                   	push   eax
c0013947:	6a 40                	push   0x40
c0013949:	6a 00                	push   0x0
c001394b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001394f:	50                   	push   eax
c0013950:	e8 9b cb fe ff       	call   c00004f0 <memset>
c0013955:	89 f1                	mov    ecx,esi
c0013957:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001395e:	31 c0                	xor    eax,eax
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	0f be f1             	movsx  esi,cl
c0013966:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013969:	85 d2                	test   edx,edx
c001396b:	89 d1                	mov    ecx,edx
c001396d:	0f 84 14 01 00 00    	je     c0013a87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013973:	3d c7 00 00 00       	cmp    eax,0xc7
c0013978:	0f 8f 09 01 00 00    	jg     c0013a87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001397e:	83 fa 0a             	cmp    edx,0xa
c0013981:	0f 85 f1 00 00 00    	jne    c0013a78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013987:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001398c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013991:	89 c8                	mov    eax,ecx
c0013993:	a8 df                	test   al,0xdf
c0013995:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001399a:	83 f9 23             	cmp    ecx,0x23
c001399d:	0f 94 c2             	sete   dl
c00139a0:	89 d5                	mov    ebp,edx
c00139a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00139a6:	09 ea                	or     edx,ebp
c00139a8:	80 e2 01             	and    dl,0x1
c00139ab:	75 47                	jne    c00139f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139ad:	83 e8 09             	sub    eax,0x9
c00139b0:	3c 01                	cmp    al,0x1
c00139b2:	76 40                	jbe    c00139f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139b4:	83 f9 5b             	cmp    ecx,0x5b
c00139b7:	75 42                	jne    c00139fb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00139b9:	83 fe 40             	cmp    esi,0x40
c00139bc:	75 36                	jne    c00139f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139be:	83 ec 0c             	sub    esp,0xc
c00139c1:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00139c5:	55                   	push   ebp
c00139c6:	e8 b5 cb fe ff       	call   c0000580 <strlen>
c00139cb:	83 c4 10             	add    esp,0x10
c00139ce:	83 f8 3f             	cmp    eax,0x3f
c00139d1:	0f 87 b0 00 00 00    	ja     c0013a87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139d7:	50                   	push   eax
c00139d8:	50                   	push   eax
c00139d9:	55                   	push   ebp
c00139da:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00139de:	55                   	push   ebp
c00139df:	e8 6c cc fe ff       	call   c0000650 <strcpy>
c00139e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00139e7:	e8 94 cb fe ff       	call   c0000580 <strlen>
c00139ec:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00139f1:	83 c4 10             	add    esp,0x10
c00139f4:	31 d2                	xor    edx,edx
c00139f6:	e9 84 00 00 00       	jmp    c0013a7f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00139fb:	83 fe 40             	cmp    esi,0x40
c00139fe:	74 06                	je     c0013a06 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013a00:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013a04:	eb 19                	jmp    c0013a1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a06:	51                   	push   ecx
c0013a07:	51                   	push   ecx
c0013a08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a0c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a10:	50                   	push   eax
c0013a11:	e8 6a cd fe ff       	call   c0000780 <strcmp>
c0013a16:	83 c4 10             	add    esp,0x10
c0013a19:	85 c0                	test   eax,eax
c0013a1b:	75 d7                	jne    c00139f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a1d:	eb e1                	jmp    c0013a00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013a1f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013a22:	85 c9                	test   ecx,ecx
c0013a24:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a29:	83 f9 3d             	cmp    ecx,0x3d
c0013a2c:	0f 94 c0             	sete   al
c0013a2f:	89 c5                	mov    ebp,eax
c0013a31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a35:	09 e8                	or     eax,ebp
c0013a37:	a8 01                	test   al,0x1
c0013a39:	89 c5                	mov    ebp,eax
c0013a3b:	75 03                	jne    c0013a40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013a3d:	42                   	inc    edx
c0013a3e:	eb df                	jmp    c0013a1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a40:	85 c9                	test   ecx,ecx
c0013a42:	74 43                	je     c0013a87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a48:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a4b:	52                   	push   edx
c0013a4c:	52                   	push   edx
c0013a4d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013a51:	50                   	push   eax
c0013a52:	53                   	push   ebx
c0013a53:	e8 28 cd fe ff       	call   c0000780 <strcmp>
c0013a58:	83 c4 10             	add    esp,0x10
c0013a5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a5f:	85 c0                	test   eax,eax
c0013a61:	75 91                	jne    c00139f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a63:	50                   	push   eax
c0013a64:	42                   	inc    edx
c0013a65:	50                   	push   eax
c0013a66:	52                   	push   edx
c0013a67:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013a6e:	e8 dd cb fe ff       	call   c0000650 <strcpy>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	eb 11                	jmp    c0013a89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013a78:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a7c:	8d 50 01             	lea    edx,[eax+0x1]
c0013a7f:	47                   	inc    edi
c0013a80:	89 d0                	mov    eax,edx
c0013a82:	e9 df fe ff ff       	jmp    c0013966 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013a87:	31 ed                	xor    ebp,ebp
c0013a89:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a8f:	89 e8                	mov    eax,ebp
c0013a91:	5b                   	pop    ebx
c0013a92:	5e                   	pop    esi
c0013a93:	5f                   	pop    edi
c0013a94:	5d                   	pop    ebp
c0013a95:	c3                   	ret    

c0013a96 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a96:	57                   	push   edi
c0013a97:	56                   	push   esi
c0013a98:	53                   	push   ebx
c0013a99:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a9f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013aa6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013aad:	53                   	push   ebx
c0013aae:	e8 cd ca fe ff       	call   c0000580 <strlen>
c0013ab3:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ab6:	89 c7                	mov    edi,eax
c0013ab8:	e8 c3 ca fe ff       	call   c0000580 <strlen>
c0013abd:	83 c4 10             	add    esp,0x10
c0013ac0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013ac4:	3d ff 00 00 00       	cmp    eax,0xff
c0013ac9:	0f 87 d3 00 00 00    	ja     c0013ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013acf:	57                   	push   edi
c0013ad0:	57                   	push   edi
c0013ad1:	56                   	push   esi
c0013ad2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013ad6:	56                   	push   esi
c0013ad7:	e8 74 cb fe ff       	call   c0000650 <strcpy>
c0013adc:	58                   	pop    eax
c0013add:	5a                   	pop    edx
c0013ade:	68 ff 28 02 c0       	push   0xc00228ff
c0013ae3:	56                   	push   esi
c0013ae4:	e8 87 cd fe ff       	call   c0000870 <strcat>
c0013ae9:	59                   	pop    ecx
c0013aea:	5f                   	pop    edi
c0013aeb:	53                   	push   ebx
c0013aec:	56                   	push   esi
c0013aed:	e8 7e cd fe ff       	call   c0000870 <strcat>
c0013af2:	58                   	pop    eax
c0013af3:	5a                   	pop    edx
c0013af4:	68 ab 25 02 c0       	push   0xc00225ab
c0013af9:	56                   	push   esi
c0013afa:	e8 71 cd fe ff       	call   c0000870 <strcat>
c0013aff:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b06:	e8 c8 3f ff ff       	call   c0007ad3 <malloc>
c0013b0b:	83 c4 0c             	add    esp,0xc
c0013b0e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b14:	56                   	push   esi
c0013b15:	50                   	push   eax
c0013b16:	89 c3                	mov    ebx,eax
c0013b18:	e8 05 80 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0013b1d:	83 c4 10             	add    esp,0x10
c0013b20:	85 db                	test   ebx,ebx
c0013b22:	74 7e                	je     c0013ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b24:	51                   	push   ecx
c0013b25:	51                   	push   ecx
c0013b26:	6a 01                	push   0x1
c0013b28:	53                   	push   ebx
c0013b29:	e8 12 80 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	85 c0                	test   eax,eax
c0013b33:	74 08                	je     c0013b3d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b35:	83 ec 0c             	sub    esp,0xc
c0013b38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3a:	53                   	push   ebx
c0013b3b:	eb 5f                	jmp    c0013b9c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b3d:	52                   	push   edx
c0013b3e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b42:	50                   	push   eax
c0013b43:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b47:	50                   	push   eax
c0013b48:	53                   	push   ebx
c0013b49:	e8 f4 82 ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c0013b4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	89 c1                	mov    ecx,eax
c0013b57:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013b5b:	74 31                	je     c0013b8e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	50                   	push   eax
c0013b61:	e8 6d 3f ff ff       	call   c0007ad3 <malloc>
c0013b66:	89 c6                	mov    esi,eax
c0013b68:	58                   	pop    eax
c0013b69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b6b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013b6f:	52                   	push   edx
c0013b70:	56                   	push   esi
c0013b71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b79:	53                   	push   ebx
c0013b7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b7d:	83 c4 20             	add    esp,0x20
c0013b80:	85 c0                	test   eax,eax
c0013b82:	75 0a                	jne    c0013b8e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b88:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b8c:	74 18                	je     c0013ba6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b8e:	83 ec 0c             	sub    esp,0xc
c0013b91:	53                   	push   ebx
c0013b92:	e8 07 80 ff ff       	call   c000bb9e <File::close()>
c0013b97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	31 c0                	xor    eax,eax
c0013ba4:	eb 3b                	jmp    c0013be1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013ba6:	83 ec 0c             	sub    esp,0xc
c0013ba9:	53                   	push   ebx
c0013baa:	e8 ef 7f ff ff       	call   c000bb9e <File::close()>
c0013baf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bb7:	83 c4 0c             	add    esp,0xc
c0013bba:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013bc1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013bc8:	56                   	push   esi
c0013bc9:	e8 3c fd ff ff       	call   c001390a <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013bce:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bd1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013bd5:	e8 09 3f ff ff       	call   c0007ae3 <free>
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013be1:	81 c4 20 01 00 00    	add    esp,0x120
c0013be7:	5b                   	pop    ebx
c0013be8:	5e                   	pop    esi
c0013be9:	5f                   	pop    edi
c0013bea:	c3                   	ret    

c0013beb <Reg::getLine(char*, char*, char*)>:
c0013beb:	57                   	push   edi
c0013bec:	56                   	push   esi
c0013bed:	53                   	push   ebx
c0013bee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013bf2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bfa:	57                   	push   edi
c0013bfb:	56                   	push   esi
c0013bfc:	53                   	push   ebx
c0013bfd:	68 b0 25 02 c0       	push   0xc00225b0
c0013c02:	e8 8f fe ff ff       	call   c0013a96 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c07:	83 c4 10             	add    esp,0x10
c0013c0a:	84 c0                	test   al,al
c0013c0c:	75 10                	jne    c0013c1e <Reg::getLine(char*, char*, char*)+0x33>
c0013c0e:	57                   	push   edi
c0013c0f:	56                   	push   esi
c0013c10:	53                   	push   ebx
c0013c11:	68 d5 25 02 c0       	push   0xc00225d5
c0013c16:	e8 7b fe ff ff       	call   c0013a96 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	5b                   	pop    ebx
c0013c1f:	5e                   	pop    esi
c0013c20:	5f                   	pop    edi
c0013c21:	c3                   	ret    

c0013c22 <Reg::readInt(char*, char*, int*)>:
c0013c22:	55                   	push   ebp
c0013c23:	57                   	push   edi
c0013c24:	56                   	push   esi
c0013c25:	53                   	push   ebx
c0013c26:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c2c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c30:	55                   	push   ebp
c0013c31:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c38:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c3f:	e8 a7 ff ff ff       	call   c0013beb <Reg::getLine(char*, char*, char*)>
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	84 c0                	test   al,al
c0013c49:	0f 84 b6 00 00 00    	je     c0013d05 <Reg::readInt(char*, char*, int*)+0xe3>
c0013c4f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c54:	83 fa 2b             	cmp    edx,0x2b
c0013c57:	74 0c                	je     c0013c65 <Reg::readInt(char*, char*, int*)+0x43>
c0013c59:	83 fa 2d             	cmp    edx,0x2d
c0013c5c:	75 0e                	jne    c0013c6c <Reg::readInt(char*, char*, int*)+0x4a>
c0013c5e:	ba 01 00 00 00       	mov    edx,0x1
c0013c63:	eb 0b                	jmp    c0013c70 <Reg::readInt(char*, char*, int*)+0x4e>
c0013c65:	ba 01 00 00 00       	mov    edx,0x1
c0013c6a:	eb 02                	jmp    c0013c6e <Reg::readInt(char*, char*, int*)+0x4c>
c0013c6c:	31 d2                	xor    edx,edx
c0013c6e:	31 c0                	xor    eax,eax
c0013c70:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013c75:	be 0a 00 00 00       	mov    esi,0xa
c0013c7a:	75 21                	jne    c0013c9d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c7c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c81:	83 f9 78             	cmp    ecx,0x78
c0013c84:	75 0a                	jne    c0013c90 <Reg::readInt(char*, char*, int*)+0x6e>
c0013c86:	83 c2 02             	add    edx,0x2
c0013c89:	be 10 00 00 00       	mov    esi,0x10
c0013c8e:	eb 0d                	jmp    c0013c9d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c90:	83 f9 62             	cmp    ecx,0x62
c0013c93:	75 08                	jne    c0013c9d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c95:	83 c2 02             	add    edx,0x2
c0013c98:	be 02 00 00 00       	mov    esi,0x2
c0013c9d:	01 d5                	add    ebp,edx
c0013c9f:	31 d2                	xor    edx,edx
c0013ca1:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013ca5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013ca9:	85 c9                	test   ecx,ecx
c0013cab:	0f 94 c3             	sete   bl
c0013cae:	83 f9 0d             	cmp    ecx,0xd
c0013cb1:	89 df                	mov    edi,ebx
c0013cb3:	0f 94 c3             	sete   bl
c0013cb6:	09 df                	or     edi,ebx
c0013cb8:	89 fb                	mov    ebx,edi
c0013cba:	83 e7 01             	and    edi,0x1
c0013cbd:	75 35                	jne    c0013cf4 <Reg::readInt(char*, char*, int*)+0xd2>
c0013cbf:	0f af d6             	imul   edx,esi
c0013cc2:	83 fe 10             	cmp    esi,0x10
c0013cc5:	75 26                	jne    c0013ced <Reg::readInt(char*, char*, int*)+0xcb>
c0013cc7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ccb:	83 ef 41             	sub    edi,0x41
c0013cce:	89 fb                	mov    ebx,edi
c0013cd0:	80 fb 05             	cmp    bl,0x5
c0013cd3:	77 06                	ja     c0013cdb <Reg::readInt(char*, char*, int*)+0xb9>
c0013cd5:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013cd9:	eb 16                	jmp    c0013cf1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013cdb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013cdf:	83 eb 61             	sub    ebx,0x61
c0013ce2:	80 fb 05             	cmp    bl,0x5
c0013ce5:	77 06                	ja     c0013ced <Reg::readInt(char*, char*, int*)+0xcb>
c0013ce7:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013ceb:	eb 04                	jmp    c0013cf1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013ced:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013cf1:	45                   	inc    ebp
c0013cf2:	eb ad                	jmp    c0013ca1 <Reg::readInt(char*, char*, int*)+0x7f>
c0013cf4:	84 c0                	test   al,al
c0013cf6:	74 02                	je     c0013cfa <Reg::readInt(char*, char*, int*)+0xd8>
c0013cf8:	f7 da                	neg    edx
c0013cfa:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d01:	89 10                	mov    DWORD PTR [eax],edx
c0013d03:	88 d8                	mov    al,bl
c0013d05:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d0b:	5b                   	pop    ebx
c0013d0c:	5e                   	pop    esi
c0013d0d:	5f                   	pop    edi
c0013d0e:	5d                   	pop    ebp
c0013d0f:	c3                   	ret    

c0013d10 <Reg::readString(char*, char*, char*, int)>:
c0013d10:	57                   	push   edi
c0013d11:	56                   	push   esi
c0013d12:	53                   	push   ebx
c0013d13:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d19:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d1d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d24:	57                   	push   edi
c0013d25:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d2c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d33:	e8 b3 fe ff ff       	call   c0013beb <Reg::getLine(char*, char*, char*)>
c0013d38:	83 c4 10             	add    esp,0x10
c0013d3b:	84 c0                	test   al,al
c0013d3d:	89 c6                	mov    esi,eax
c0013d3f:	74 44                	je     c0013d85 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d41:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d48:	31 c0                	xor    eax,eax
c0013d4a:	4a                   	dec    edx
c0013d4b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d4e:	84 c9                	test   cl,cl
c0013d50:	74 0f                	je     c0013d61 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d52:	39 c2                	cmp    edx,eax
c0013d54:	7e 0b                	jle    c0013d61 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d56:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d59:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013d5e:	40                   	inc    eax
c0013d5f:	eb ea                	jmp    c0013d4b <Reg::readString(char*, char*, char*, int)+0x3b>
c0013d61:	83 ec 0c             	sub    esp,0xc
c0013d64:	53                   	push   ebx
c0013d65:	e8 16 c8 fe ff       	call   c0000580 <strlen>
c0013d6a:	83 c4 10             	add    esp,0x10
c0013d6d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013d72:	75 11                	jne    c0013d85 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	53                   	push   ebx
c0013d78:	e8 03 c8 fe ff       	call   c0000580 <strlen>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d85:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d8b:	89 f0                	mov    eax,esi
c0013d8d:	5b                   	pop    ebx
c0013d8e:	5e                   	pop    esi
c0013d8f:	5f                   	pop    edi
c0013d90:	c3                   	ret    

c0013d91 <Reg::readBool(char*, char*, bool*)>:
c0013d91:	83 ec 20             	sub    esp,0x20
c0013d94:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d98:	50                   	push   eax
c0013d99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da1:	e8 7c fe ff ff       	call   c0013c22 <Reg::readInt(char*, char*, int*)>
c0013da6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013daa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013daf:	0f 95 02             	setne  BYTE PTR [edx]
c0013db2:	83 c4 2c             	add    esp,0x2c
c0013db5:	c3                   	ret    

c0013db6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013db6:	53                   	push   ebx
c0013db7:	83 ec 1c             	sub    esp,0x1c
c0013dba:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013dbe:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013dc2:	50                   	push   eax
c0013dc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dcb:	e8 c1 ff ff ff       	call   c0013d91 <Reg::readBool(char*, char*, bool*)>
c0013dd0:	83 c4 10             	add    esp,0x10
c0013dd3:	84 c0                	test   al,al
c0013dd5:	74 04                	je     c0013ddb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013dd7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013ddb:	83 c4 18             	add    esp,0x18
c0013dde:	88 d8                	mov    al,bl
c0013de0:	5b                   	pop    ebx
c0013de1:	c3                   	ret    

c0013de2 <Reg::readIntWithDefault(char*, char*, int)>:
c0013de2:	53                   	push   ebx
c0013de3:	83 ec 1c             	sub    esp,0x1c
c0013de6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013dea:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013dee:	50                   	push   eax
c0013def:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df7:	e8 26 fe ff ff       	call   c0013c22 <Reg::readInt(char*, char*, int*)>
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	84 c0                	test   al,al
c0013e01:	74 04                	je     c0013e07 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e07:	83 c4 18             	add    esp,0x18
c0013e0a:	89 d8                	mov    eax,ebx
c0013e0c:	5b                   	pop    ebx
c0013e0d:	c3                   	ret    

c0013e0e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e0e:	57                   	push   edi
c0013e0f:	56                   	push   esi
c0013e10:	53                   	push   ebx
c0013e11:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e1d:	56                   	push   esi
c0013e1e:	57                   	push   edi
c0013e1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e27:	e8 e4 fe ff ff       	call   c0013d10 <Reg::readString(char*, char*, char*, int)>
c0013e2c:	83 c4 10             	add    esp,0x10
c0013e2f:	84 c0                	test   al,al
c0013e31:	75 16                	jne    c0013e49 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e33:	50                   	push   eax
c0013e34:	56                   	push   esi
c0013e35:	6a 00                	push   0x0
c0013e37:	57                   	push   edi
c0013e38:	e8 b3 c6 fe ff       	call   c00004f0 <memset>
c0013e3d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e40:	89 de                	mov    esi,ebx
c0013e42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	89 df                	mov    edi,ebx
c0013e49:	5b                   	pop    ebx
c0013e4a:	89 f8                	mov    eax,edi
c0013e4c:	5e                   	pop    esi
c0013e4d:	5f                   	pop    edi
c0013e4e:	c3                   	ret    

c0013e4f <SysEject(regs*)>:
c0013e4f:	83 ec 0c             	sub    esp,0xc
c0013e52:	83 ca ff             	or     edx,0xffffffff
c0013e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e59:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e5c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e61:	83 e9 41             	sub    ecx,0x41
c0013e64:	83 f9 19             	cmp    ecx,0x19
c0013e67:	77 18                	ja     c0013e81 <SysEject(regs*)+0x32>
c0013e69:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013e70:	85 c9                	test   ecx,ecx
c0013e72:	74 0d                	je     c0013e81 <SysEject(regs*)+0x32>
c0013e74:	83 ec 0c             	sub    esp,0xc
c0013e77:	51                   	push   ecx
c0013e78:	e8 a3 9e ff ff       	call   c000dd20 <LogicalDisk::eject()>
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	99                   	cdq    
c0013e81:	83 c4 0c             	add    esp,0xc
c0013e84:	c3                   	ret    

c0013e85 <SysExit(regs*)>:
c0013e85:	83 ec 18             	sub    esp,0x18
c0013e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e8f:	e8 64 2b 00 00       	call   c00169f8 <terminateTask(int)>
c0013e94:	83 c8 ff             	or     eax,0xffffffff
c0013e97:	83 c4 1c             	add    esp,0x1c
c0013e9a:	89 c2                	mov    edx,eax
c0013e9c:	c3                   	ret    

c0013e9d <SysGetCwd(regs*)>:
c0013e9d:	83 ec 10             	sub    esp,0x10
c0013ea0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013ea7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013eaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eaf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013eb2:	e8 0b 79 ff ff       	call   c000b7c2 <Fs::getcwd(Process*, char*, int)>
c0013eb7:	83 c4 1c             	add    esp,0x1c
c0013eba:	99                   	cdq    
c0013ebb:	c3                   	ret    

c0013ebc <SysGetPID(regs*)>:
c0013ebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ec1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ec6:	99                   	cdq    
c0013ec7:	c3                   	ret    

c0013ec8 <SysGetRAMData(regs*)>:
c0013ec8:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013ed2:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ed8:	99                   	cdq    
c0013ed9:	f7 f9                	idiv   ecx
c0013edb:	c1 e0 18             	shl    eax,0x18
c0013ede:	09 c8                	or     eax,ecx
c0013ee0:	99                   	cdq    
c0013ee1:	c3                   	ret    

c0013ee2 <SysGetVGAPtr(regs*)>:
c0013ee2:	55                   	push   ebp
c0013ee3:	57                   	push   edi
c0013ee4:	56                   	push   esi
c0013ee5:	53                   	push   ebx
c0013ee6:	83 ec 18             	sub    esp,0x18
c0013ee9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013eed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ef0:	e8 cf 25 00 00       	call   c00164c4 <Thr::processFromPID(int)>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	89 c1                	mov    ecx,eax
c0013efa:	b8 01 00 00 00       	mov    eax,0x1
c0013eff:	85 c9                	test   ecx,ecx
c0013f01:	74 57                	je     c0013f5a <SysGetVGAPtr(regs*)+0x78>
c0013f03:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f07:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f0d:	74 0c                	je     c0013f1b <SysGetVGAPtr(regs*)+0x39>
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	55                   	push   ebp
c0013f13:	e8 57 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013f18:	83 c4 10             	add    esp,0x10
c0013f1b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f1e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f23:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f28:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f2e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f37:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f3a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f40:	50                   	push   eax
c0013f41:	50                   	push   eax
c0013f42:	68 f0 25 02 c0       	push   0xc00225f0
c0013f47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f4a:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f4f:	50                   	push   eax
c0013f50:	e8 fb c6 fe ff       	call   c0000650 <strcpy>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	31 c0                	xor    eax,eax
c0013f5a:	83 c4 0c             	add    esp,0xc
c0013f5d:	31 d2                	xor    edx,edx
c0013f5f:	5b                   	pop    ebx
c0013f60:	5e                   	pop    esi
c0013f61:	5f                   	pop    edi
c0013f62:	5d                   	pop    ebp
c0013f63:	c3                   	ret    

c0013f64 <SysKill(regs*)>:
c0013f64:	53                   	push   ebx
c0013f65:	83 ec 08             	sub    esp,0x8
c0013f68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f6c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013f70:	75 16                	jne    c0013f88 <SysKill(regs*)+0x24>
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	68 fa 25 02 c0       	push   0xc00225fa
c0013f7a:	e8 e8 d5 ff ff       	call   c0011567 <KePanic(char const*)>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	e9 89 00 00 00       	jmp    c0014010 <SysKill(regs*)+0xac>
c0013f87:	90                   	nop
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f90:	e8 87 bd 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f95:	8d 76 00             	lea    esi,[esi+0x0]
c0013f98:	83 c4 10             	add    esp,0x10
c0013f9b:	85 c0                	test   eax,eax
c0013f9d:	74 19                	je     c0013fb8 <SysKill(regs*)+0x54>
c0013f9f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fa2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fa5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fa7:	74 33                	je     c0013fdc <SysKill(regs*)+0x78>
c0013fa9:	52                   	push   edx
c0013faa:	52                   	push   edx
c0013fab:	50                   	push   eax
c0013fac:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fb1:	e8 86 c0 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fb6:	eb e0                	jmp    c0013f98 <SysKill(regs*)+0x34>
c0013fb8:	83 ec 0c             	sub    esp,0xc
c0013fbb:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013fc0:	e8 57 bd 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc8:	83 c4 10             	add    esp,0x10
c0013fcb:	85 c0                	test   eax,eax
c0013fcd:	74 41                	je     c0014010 <SysKill(regs*)+0xac>
c0013fcf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fd2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fd5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fd7:	75 27                	jne    c0014000 <SysKill(regs*)+0x9c>
c0013fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fdc:	51                   	push   ecx
c0013fdd:	51                   	push   ecx
c0013fde:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fe6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fe9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013fef:	e8 0f da ff ff       	call   c0011a03 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	31 c0                	xor    eax,eax
c0013ff9:	31 d2                	xor    edx,edx
c0013ffb:	eb 1b                	jmp    c0014018 <SysKill(regs*)+0xb4>
c0013ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0014000:	52                   	push   edx
c0014001:	52                   	push   edx
c0014002:	50                   	push   eax
c0014003:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014008:	e8 2f c0 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001400d:	eb b9                	jmp    c0013fc8 <SysKill(regs*)+0x64>
c001400f:	90                   	nop
c0014010:	83 c8 ff             	or     eax,0xffffffff
c0014013:	89 c2                	mov    edx,eax
c0014015:	8d 76 00             	lea    esi,[esi+0x0]
c0014018:	83 c4 08             	add    esp,0x8
c001401b:	5b                   	pop    ebx
c001401c:	c3                   	ret    

c001401d <SysLoadDLL(regs*)>:
c001401d:	56                   	push   esi
c001401e:	31 d2                	xor    edx,edx
c0014020:	53                   	push   ebx
c0014021:	b8 01 00 00 00       	mov    eax,0x1
c0014026:	51                   	push   ecx
c0014027:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001402b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001402f:	0f 84 8c 00 00 00    	je     c00140c1 <SysLoadDLL(regs*)+0xa4>
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	68 14 01 00 00       	push   0x114
c001403d:	e8 91 3a ff ff       	call   c0007ad3 <malloc>
c0014042:	83 c4 0c             	add    esp,0xc
c0014045:	89 c3                	mov    ebx,eax
c0014047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001404c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001404f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014052:	53                   	push   ebx
c0014053:	e8 ca 7a ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	31 d2                	xor    edx,edx
c001405d:	85 db                	test   ebx,ebx
c001405f:	b8 02 00 00 00       	mov    eax,0x2
c0014064:	74 5b                	je     c00140c1 <SysLoadDLL(regs*)+0xa4>
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	53                   	push   ebx
c001406a:	e8 95 7d ff ff       	call   c000be04 <File::exists()>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	84 c0                	test   al,al
c0014074:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014076:	75 11                	jne    c0014089 <SysLoadDLL(regs*)+0x6c>
c0014078:	83 ec 0c             	sub    esp,0xc
c001407b:	53                   	push   ebx
c001407c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	b8 03 00 00 00       	mov    eax,0x3
c0014087:	eb 36                	jmp    c00140bf <SysLoadDLL(regs*)+0xa2>
c0014089:	83 ec 0c             	sub    esp,0xc
c001408c:	53                   	push   ebx
c001408d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014090:	58                   	pop    eax
c0014091:	5a                   	pop    edx
c0014092:	6a 00                	push   0x0
c0014094:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014097:	e8 70 15 00 00       	call   c001560c <Thr::loadDLL(char const*, bool)>
c001409c:	83 c4 10             	add    esp,0x10
c001409f:	31 d2                	xor    edx,edx
c00140a1:	89 c1                	mov    ecx,eax
c00140a3:	b8 04 00 00 00       	mov    eax,0x4
c00140a8:	85 c9                	test   ecx,ecx
c00140aa:	74 15                	je     c00140c1 <SysLoadDLL(regs*)+0xa4>
c00140ac:	53                   	push   ebx
c00140ad:	53                   	push   ebx
c00140ae:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00140b4:	51                   	push   ecx
c00140b5:	e8 92 17 00 00       	call   c001584c <Thr::executeDLL(unsigned long, void*)>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	31 c0                	xor    eax,eax
c00140bf:	31 d2                	xor    edx,edx
c00140c1:	59                   	pop    ecx
c00140c2:	5b                   	pop    ebx
c00140c3:	5e                   	pop    esi
c00140c4:	c3                   	ret    

c00140c5 <SysRead(regs*)>:
c00140c5:	57                   	push   edi
c00140c6:	56                   	push   esi
c00140c7:	53                   	push   ebx
c00140c8:	83 ec 10             	sub    esp,0x10
c00140cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00140cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140d2:	83 f8 02             	cmp    eax,0x2
c00140d5:	77 10                	ja     c00140e7 <SysRead(regs*)+0x22>
c00140d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140df:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00140e5:	eb 0e                	jmp    c00140f5 <SysRead(regs*)+0x30>
c00140e7:	83 ec 0c             	sub    esp,0xc
c00140ea:	50                   	push   eax
c00140eb:	e8 ab 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	89 c1                	mov    ecx,eax
c00140f5:	83 c8 ff             	or     eax,0xffffffff
c00140f8:	85 c9                	test   ecx,ecx
c00140fa:	89 c2                	mov    edx,eax
c00140fc:	74 28                	je     c0014126 <SysRead(regs*)+0x61>
c00140fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	31 ff                	xor    edi,edi
c001410b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001410f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014111:	52                   	push   edx
c0014112:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014115:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014118:	57                   	push   edi
c0014119:	56                   	push   esi
c001411a:	51                   	push   ecx
c001411b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001411e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014122:	83 c4 20             	add    esp,0x20
c0014125:	99                   	cdq    
c0014126:	83 c4 10             	add    esp,0x10
c0014129:	5b                   	pop    ebx
c001412a:	5e                   	pop    esi
c001412b:	5f                   	pop    edi
c001412c:	c3                   	ret    

c001412d <SysRegisterSignal(regs*)>:
c001412d:	83 ec 18             	sub    esp,0x18
c0014130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014134:	6a 00                	push   0x0
c0014136:	6a 00                	push   0x0
c0014138:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001413b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001413e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014143:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014146:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001414c:	e8 7c d8 ff ff       	call   c00119cd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014151:	83 c4 2c             	add    esp,0x2c
c0014154:	99                   	cdq    
c0014155:	c3                   	ret    

c0014156 <SysRegistryGetTypeFromPath(regs*)>:
c0014156:	57                   	push   edi
c0014157:	56                   	push   esi
c0014158:	53                   	push   ebx
c0014159:	81 ec 38 01 00 00    	sub    esp,0x138
c001415f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014166:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014169:	68 1b 26 02 c0       	push   0xc002261b
c001416e:	e8 97 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014173:	5a                   	pop    edx
c0014174:	59                   	pop    ecx
c0014175:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014178:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001417b:	e8 34 f6 ff ff       	call   c00137b4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014180:	5f                   	pop    edi
c0014181:	5a                   	pop    edx
c0014182:	89 c6                	mov    esi,eax
c0014184:	50                   	push   eax
c0014185:	68 3b 26 02 c0       	push   0xc002263b
c001418a:	e8 7b 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	85 f6                	test   esi,esi
c0014194:	74 28                	je     c00141be <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014196:	50                   	push   eax
c0014197:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001419b:	57                   	push   edi
c001419c:	56                   	push   esi
c001419d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141a0:	e8 f4 f1 ff ff       	call   c0013399 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141a5:	83 c4 0c             	add    esp,0xc
c00141a8:	57                   	push   edi
c00141a9:	50                   	push   eax
c00141aa:	89 c3                	mov    ebx,eax
c00141ac:	68 43 26 02 c0       	push   0xc0022643
c00141b1:	e8 54 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141b6:	89 d8                	mov    eax,ebx
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	99                   	cdq    
c00141bc:	eb 05                	jmp    c00141c3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00141be:	83 c8 ff             	or     eax,0xffffffff
c00141c1:	89 c2                	mov    edx,eax
c00141c3:	81 c4 30 01 00 00    	add    esp,0x130
c00141c9:	5b                   	pop    ebx
c00141ca:	5e                   	pop    esi
c00141cb:	5f                   	pop    edi
c00141cc:	c3                   	ret    

c00141cd <SysRegistryReadExtent(regs*)>:
c00141cd:	83 ec 1c             	sub    esp,0x1c
c00141d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141d4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00141d7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00141da:	85 c0                	test   eax,eax
c00141dc:	79 1f                	jns    c00141fd <SysRegistryReadExtent(regs*)+0x30>
c00141de:	52                   	push   edx
c00141df:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00141e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141e8:	52                   	push   edx
c00141e9:	50                   	push   eax
c00141ea:	51                   	push   ecx
c00141eb:	e8 9b f0 ff ff       	call   c001328b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141f8:	83 c4 10             	add    esp,0x10
c00141fb:	eb 14                	jmp    c0014211 <SysRegistryReadExtent(regs*)+0x44>
c00141fd:	83 ec 04             	sub    esp,0x4
c0014200:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014203:	50                   	push   eax
c0014204:	51                   	push   ecx
c0014205:	e8 1f eb ff ff       	call   c0012d29 <CmGetString(Reghive_Tag*, int, char*)>
c001420a:	83 c4 10             	add    esp,0x10
c001420d:	31 c0                	xor    eax,eax
c001420f:	31 d2                	xor    edx,edx
c0014211:	83 c4 1c             	add    esp,0x1c
c0014214:	c3                   	ret    

c0014215 <SysRegistryPathToExtentLookup(regs*)>:
c0014215:	53                   	push   ebx
c0014216:	83 ec 10             	sub    esp,0x10
c0014219:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001421d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014220:	68 59 26 02 c0       	push   0xc0022659
c0014225:	e8 e0 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001422a:	58                   	pop    eax
c001422b:	5a                   	pop    edx
c001422c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001422f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014232:	e8 7d f5 ff ff       	call   c00137b4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014237:	83 c4 18             	add    esp,0x18
c001423a:	5b                   	pop    ebx
c001423b:	99                   	cdq    
c001423c:	c3                   	ret    

c001423d <SysRegistryEnterDirectory(regs*)>:
c001423d:	53                   	push   ebx
c001423e:	83 ec 10             	sub    esp,0x10
c0014241:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014245:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014248:	68 7c 26 02 c0       	push   0xc002267c
c001424d:	e8 b8 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014252:	58                   	pop    eax
c0014253:	5a                   	pop    edx
c0014254:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014257:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001425a:	e8 41 eb ff ff       	call   c0012da0 <CmEnterDirectory(Reghive_Tag*, int)>
c001425f:	83 c4 18             	add    esp,0x18
c0014262:	5b                   	pop    ebx
c0014263:	99                   	cdq    
c0014264:	c3                   	ret    

c0014265 <SysRegistryGetNext(regs*)>:
c0014265:	53                   	push   ebx
c0014266:	83 ec 10             	sub    esp,0x10
c0014269:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001426d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014270:	68 9a 26 02 c0       	push   0xc002269a
c0014275:	e8 90 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001427a:	58                   	pop    eax
c001427b:	5a                   	pop    edx
c001427c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001427f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014282:	e8 58 eb ff ff       	call   c0012ddf <CmGetNext(Reghive_Tag*, int)>
c0014287:	83 c4 18             	add    esp,0x18
c001428a:	5b                   	pop    ebx
c001428b:	99                   	cdq    
c001428c:	c3                   	ret    

c001428d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001428d:	57                   	push   edi
c001428e:	56                   	push   esi
c001428f:	53                   	push   ebx
c0014290:	81 ec 34 01 00 00    	sub    esp,0x134
c0014296:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001429d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142a1:	57                   	push   edi
c00142a2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142a5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142a8:	e8 ec f0 ff ff       	call   c0013399 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142ad:	89 c3                	mov    ebx,eax
c00142af:	58                   	pop    eax
c00142b0:	5a                   	pop    edx
c00142b1:	57                   	push   edi
c00142b2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00142b5:	e8 96 c3 fe ff       	call   c0000650 <strcpy>
c00142ba:	81 c4 40 01 00 00    	add    esp,0x140
c00142c0:	89 d8                	mov    eax,ebx
c00142c2:	5b                   	pop    ebx
c00142c3:	99                   	cdq    
c00142c4:	5e                   	pop    esi
c00142c5:	5f                   	pop    edi
c00142c6:	c3                   	ret    

c00142c7 <SysRegistryOpen(regs*)>:
c00142c7:	83 ec 18             	sub    esp,0x18
c00142ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142ce:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142d1:	e8 e3 e8 ff ff       	call   c0012bb9 <CmOpen(char const*)>
c00142d6:	83 c4 1c             	add    esp,0x1c
c00142d9:	99                   	cdq    
c00142da:	c3                   	ret    

c00142db <SysRegistryClose(regs*)>:
c00142db:	83 ec 18             	sub    esp,0x18
c00142de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142e5:	e8 ed e9 ff ff       	call   c0012cd7 <CmClose(Reghive_Tag*)>
c00142ea:	31 c0                	xor    eax,eax
c00142ec:	31 d2                	xor    edx,edx
c00142ee:	83 c4 1c             	add    esp,0x1c
c00142f1:	c3                   	ret    

c00142f2 <SysSbrk(regs*)>:
c00142f2:	56                   	push   esi
c00142f3:	53                   	push   ebx
c00142f4:	50                   	push   eax
c00142f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014301:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014304:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001430a:	85 db                	test   ebx,ebx
c001430c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001430f:	74 02                	je     c0014313 <SysSbrk(regs*)+0x21>
c0014311:	79 06                	jns    c0014319 <SysSbrk(regs*)+0x27>
c0014313:	89 f0                	mov    eax,esi
c0014315:	31 d2                	xor    edx,edx
c0014317:	eb 2a                	jmp    c0014343 <SysSbrk(regs*)+0x51>
c0014319:	83 c8 ff             	or     eax,0xffffffff
c001431c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014322:	89 c2                	mov    edx,eax
c0014324:	77 1d                	ja     c0014343 <SysSbrk(regs*)+0x51>
c0014326:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001432c:	50                   	push   eax
c001432d:	68 07 0c 00 00       	push   0xc07
c0014332:	c1 ea 0c             	shr    edx,0xc
c0014335:	52                   	push   edx
c0014336:	51                   	push   ecx
c0014337:	e8 ca 5a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001433c:	89 f0                	mov    eax,esi
c001433e:	31 d2                	xor    edx,edx
c0014340:	83 c4 10             	add    esp,0x10
c0014343:	59                   	pop    ecx
c0014344:	5b                   	pop    ebx
c0014345:	5e                   	pop    esi
c0014346:	c3                   	ret    

c0014347 <SysSetCwd(regs*)>:
c0014347:	83 ec 14             	sub    esp,0x14
c001434a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001434e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014351:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014356:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014359:	e8 45 7b ff ff       	call   c000bea3 <Fs::setcwd(Process*, char*)>
c001435e:	83 c4 1c             	add    esp,0x1c
c0014361:	99                   	cdq    
c0014362:	c3                   	ret    

c0014363 <SysSetTime(regs*)>:
c0014363:	55                   	push   ebp
c0014364:	31 c9                	xor    ecx,ecx
c0014366:	57                   	push   edi
c0014367:	bd 0c 00 00 00       	mov    ebp,0xc
c001436c:	56                   	push   esi
c001436d:	53                   	push   ebx
c001436e:	31 db                	xor    ebx,ebx
c0014370:	83 ec 10             	sub    esp,0x10
c0014373:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014377:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001437a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001437d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014380:	89 c2                	mov    edx,eax
c0014382:	c1 e8 05             	shr    eax,0x5
c0014385:	83 e2 1f             	and    edx,0x1f
c0014388:	42                   	inc    edx
c0014389:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001438f:	c1 e7 10             	shl    edi,0x10
c0014392:	88 d1                	mov    cl,dl
c0014394:	31 d2                	xor    edx,edx
c0014396:	f7 f5                	div    ebp
c0014398:	89 dd                	mov    ebp,ebx
c001439a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00143a0:	88 d5                	mov    ch,dl
c00143a2:	31 d2                	xor    edx,edx
c00143a4:	0f b7 c1             	movzx  eax,cx
c00143a7:	09 f8                	or     eax,edi
c00143a9:	bf 3c 00 00 00       	mov    edi,0x3c
c00143ae:	89 c1                	mov    ecx,eax
c00143b0:	89 f0                	mov    eax,esi
c00143b2:	f7 f7                	div    edi
c00143b4:	c1 e2 10             	shl    edx,0x10
c00143b7:	09 d5                	or     ebp,edx
c00143b9:	31 d2                	xor    edx,edx
c00143bb:	f7 f7                	div    edi
c00143bd:	89 eb                	mov    ebx,ebp
c00143bf:	bf 10 0e 00 00       	mov    edi,0xe10
c00143c4:	89 f0                	mov    eax,esi
c00143c6:	88 d7                	mov    bh,dl
c00143c8:	31 d2                	xor    edx,edx
c00143ca:	f7 f7                	div    edi
c00143cc:	bf 18 00 00 00       	mov    edi,0x18
c00143d1:	31 d2                	xor    edx,edx
c00143d3:	f7 f7                	div    edi
c00143d5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00143da:	88 d3                	mov    bl,dl
c00143dc:	53                   	push   ebx
c00143dd:	51                   	push   ecx
c00143de:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00143e4:	e8 cb 82 ff ff       	call   c000c6b4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00143e9:	83 c4 1c             	add    esp,0x1c
c00143ec:	31 d2                	xor    edx,edx
c00143ee:	5b                   	pop    ebx
c00143ef:	5e                   	pop    esi
c00143f0:	83 f0 01             	xor    eax,0x1
c00143f3:	5f                   	pop    edi
c00143f4:	0f b6 c0             	movzx  eax,al
c00143f7:	5d                   	pop    ebp
c00143f8:	c3                   	ret    

c00143f9 <SysSymlink(regs*)>:
c00143f9:	56                   	push   esi
c00143fa:	83 c8 ff             	or     eax,0xffffffff
c00143fd:	53                   	push   ebx
c00143fe:	89 c2                	mov    edx,eax
c0014400:	81 ec 24 01 00 00    	sub    esp,0x124
c0014406:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001440d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014411:	74 31                	je     c0014444 <SysSymlink(regs*)+0x4b>
c0014413:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014416:	85 c9                	test   ecx,ecx
c0014418:	74 2a                	je     c0014444 <SysSymlink(regs*)+0x4b>
c001441a:	6a 01                	push   0x1
c001441c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014421:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014424:	05 0c 01 00 00       	add    eax,0x10c
c0014429:	50                   	push   eax
c001442a:	51                   	push   ecx
c001442b:	8d 74 24 14          	lea    esi,[esp+0x14]
c001442f:	56                   	push   esi
c0014430:	e8 e1 73 ff ff       	call   c000b816 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014435:	58                   	pop    eax
c0014436:	5a                   	pop    edx
c0014437:	56                   	push   esi
c0014438:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001443b:	e8 e5 6f ff ff       	call   c000b425 <KeCreateSymlink(char const*, char const*)>
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	99                   	cdq    
c0014444:	81 c4 24 01 00 00    	add    esp,0x124
c001444a:	5b                   	pop    ebx
c001444b:	5e                   	pop    esi
c001444c:	c3                   	ret    

c001444d <SysTimezone(regs*)>:
c001444d:	53                   	push   ebx
c001444e:	83 ec 08             	sub    esp,0x8
c0014451:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014455:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014459:	75 17                	jne    c0014472 <SysTimezone(regs*)+0x25>
c001445b:	83 ec 0c             	sub    esp,0xc
c001445e:	68 b1 26 02 c0       	push   0xc00226b1
c0014463:	e8 a2 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014468:	83 c8 ff             	or     eax,0xffffffff
c001446b:	83 c4 10             	add    esp,0x10
c001446e:	89 c2                	mov    edx,eax
c0014470:	eb 20                	jmp    c0014492 <SysTimezone(regs*)+0x45>
c0014472:	83 ec 0c             	sub    esp,0xc
c0014475:	68 c6 26 02 c0       	push   0xc00226c6
c001447a:	e8 8b 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001447f:	58                   	pop    eax
c0014480:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014483:	e8 90 7f ff ff       	call   c000c418 <User::loadClockSettings(int)>
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	b8 01 00 00 00       	mov    eax,0x1
c0014490:	31 d2                	xor    edx,edx
c0014492:	83 c4 08             	add    esp,0x8
c0014495:	5b                   	pop    ebx
c0014496:	c3                   	ret    

c0014497 <SysTruncate(regs*)>:
c0014497:	55                   	push   ebp
c0014498:	57                   	push   edi
c0014499:	31 ff                	xor    edi,edi
c001449b:	56                   	push   esi
c001449c:	53                   	push   ebx
c001449d:	83 ec 0c             	sub    esp,0xc
c00144a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00144a7:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00144ab:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00144ae:	89 ce                	mov    esi,ecx
c00144b0:	0f 84 9a 00 00 00    	je     c0014550 <SysTruncate(regs*)+0xb9>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	68 14 01 00 00       	push   0x114
c00144be:	e8 10 36 ff ff       	call   c0007ad3 <malloc>
c00144c3:	83 c4 0c             	add    esp,0xc
c00144c6:	89 c3                	mov    ebx,eax
c00144c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144cd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144d0:	55                   	push   ebp
c00144d1:	53                   	push   ebx
c00144d2:	e8 4b 76 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	31 d2                	xor    edx,edx
c00144dc:	85 db                	test   ebx,ebx
c00144de:	b8 03 00 00 00       	mov    eax,0x3
c00144e3:	0f 84 a2 00 00 00    	je     c001458b <SysTruncate(regs*)+0xf4>
c00144e9:	51                   	push   ecx
c00144ea:	51                   	push   ecx
c00144eb:	6a 02                	push   0x2
c00144ed:	53                   	push   ebx
c00144ee:	e8 4d 76 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c00144f3:	83 c4 10             	add    esp,0x10
c00144f6:	85 c0                	test   eax,eax
c00144f8:	74 13                	je     c001450d <SysTruncate(regs*)+0x76>
c00144fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fc:	83 ec 0c             	sub    esp,0xc
c00144ff:	53                   	push   ebx
c0014500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	b8 04 00 00 00       	mov    eax,0x4
c001450b:	eb 7c                	jmp    c0014589 <SysTruncate(regs*)+0xf2>
c001450d:	52                   	push   edx
c001450e:	57                   	push   edi
c001450f:	56                   	push   esi
c0014510:	53                   	push   ebx
c0014511:	e8 3e 77 ff ff       	call   c000bc54 <File::truncate(unsigned long long)>
c0014516:	83 c4 10             	add    esp,0x10
c0014519:	85 c0                	test   eax,eax
c001451b:	74 1b                	je     c0014538 <SysTruncate(regs*)+0xa1>
c001451d:	83 ec 0c             	sub    esp,0xc
c0014520:	53                   	push   ebx
c0014521:	e8 78 76 ff ff       	call   c000bb9e <File::close()>
c0014526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001452b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001452e:	83 c4 10             	add    esp,0x10
c0014531:	b8 05 00 00 00       	mov    eax,0x5
c0014536:	eb 51                	jmp    c0014589 <SysTruncate(regs*)+0xf2>
c0014538:	83 ec 0c             	sub    esp,0xc
c001453b:	53                   	push   ebx
c001453c:	e8 5d 76 ff ff       	call   c000bb9e <File::close()>
c0014541:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014546:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	31 c0                	xor    eax,eax
c001454e:	eb 39                	jmp    c0014589 <SysTruncate(regs*)+0xf2>
c0014550:	31 d2                	xor    edx,edx
c0014552:	83 fd 02             	cmp    ebp,0x2
c0014555:	b8 01 00 00 00       	mov    eax,0x1
c001455a:	7e 2f                	jle    c001458b <SysTruncate(regs*)+0xf4>
c001455c:	83 ec 0c             	sub    esp,0xc
c001455f:	51                   	push   ecx
c0014560:	e8 36 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014565:	83 c4 10             	add    esp,0x10
c0014568:	31 d2                	xor    edx,edx
c001456a:	89 c1                	mov    ecx,eax
c001456c:	b8 02 00 00 00       	mov    eax,0x2
c0014571:	85 c9                	test   ecx,ecx
c0014573:	74 16                	je     c001458b <SysTruncate(regs*)+0xf4>
c0014575:	50                   	push   eax
c0014576:	57                   	push   edi
c0014577:	56                   	push   esi
c0014578:	51                   	push   ecx
c0014579:	e8 d6 76 ff ff       	call   c000bc54 <File::truncate(unsigned long long)>
c001457e:	83 c4 10             	add    esp,0x10
c0014581:	85 c0                	test   eax,eax
c0014583:	0f 95 c0             	setne  al
c0014586:	0f b6 c0             	movzx  eax,al
c0014589:	31 d2                	xor    edx,edx
c001458b:	83 c4 0c             	add    esp,0xc
c001458e:	5b                   	pop    ebx
c001458f:	5e                   	pop    esi
c0014590:	5f                   	pop    edi
c0014591:	5d                   	pop    ebp
c0014592:	c3                   	ret    

c0014593 <SysWrite(regs*)>:
c0014593:	57                   	push   edi
c0014594:	56                   	push   esi
c0014595:	53                   	push   ebx
c0014596:	83 ec 10             	sub    esp,0x10
c0014599:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001459d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145a0:	83 f8 02             	cmp    eax,0x2
c00145a3:	77 10                	ja     c00145b5 <SysWrite(regs*)+0x22>
c00145a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145ad:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00145b3:	eb 0e                	jmp    c00145c3 <SysWrite(regs*)+0x30>
c00145b5:	83 ec 0c             	sub    esp,0xc
c00145b8:	50                   	push   eax
c00145b9:	e8 dd 4e ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00145be:	83 c4 10             	add    esp,0x10
c00145c1:	89 c1                	mov    ecx,eax
c00145c3:	83 c8 ff             	or     eax,0xffffffff
c00145c6:	85 c9                	test   ecx,ecx
c00145c8:	89 c2                	mov    edx,eax
c00145ca:	74 28                	je     c00145f4 <SysWrite(regs*)+0x61>
c00145cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145d4:	83 ec 0c             	sub    esp,0xc
c00145d7:	31 ff                	xor    edi,edi
c00145d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00145dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00145df:	52                   	push   edx
c00145e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145e3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00145e6:	57                   	push   edi
c00145e7:	56                   	push   esi
c00145e8:	51                   	push   ecx
c00145e9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00145ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00145f0:	83 c4 20             	add    esp,0x20
c00145f3:	99                   	cdq    
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	5b                   	pop    ebx
c00145f8:	5e                   	pop    esi
c00145f9:	5f                   	pop    edi
c00145fa:	c3                   	ret    

c00145fb <SysWsbe(regs*)>:
c00145fb:	57                   	push   edi
c00145fc:	b9 0b 00 00 00       	mov    ecx,0xb
c0014601:	56                   	push   esi
c0014602:	be 05 27 02 c0       	mov    esi,0xc0022705
c0014607:	53                   	push   ebx
c0014608:	83 ec 30             	sub    esp,0x30
c001460b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001460f:	fc                   	cld    
c0014610:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014612:	83 ec 0c             	sub    esp,0xc
c0014615:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014619:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001461e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014621:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014627:	8b 06                	mov    eax,DWORD PTR [esi]
c0014629:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001462c:	57                   	push   edi
c001462d:	e8 4e bf fe ff       	call   c0000580 <strlen>
c0014632:	5a                   	pop    edx
c0014633:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014637:	52                   	push   edx
c0014638:	31 d2                	xor    edx,edx
c001463a:	57                   	push   edi
c001463b:	52                   	push   edx
c001463c:	50                   	push   eax
c001463d:	56                   	push   esi
c001463e:	ff d3                	call   ebx
c0014640:	83 c4 14             	add    esp,0x14
c0014643:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014647:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001464a:	e8 a9 23 00 00       	call   c00169f8 <terminateTask(int)>
c001464f:	83 c4 40             	add    esp,0x40
c0014652:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014657:	5b                   	pop    ebx
c0014658:	31 d2                	xor    edx,edx
c001465a:	5e                   	pop    esi
c001465b:	5f                   	pop    edi
c001465c:	c3                   	ret    

c001465d <SysYield(regs*)>:
c001465d:	83 ec 0c             	sub    esp,0xc
c0014660:	fa                   	cli    
c0014661:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014667:	e8 0c 1a 00 00       	call   c0016078 <schedule()>
c001466c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014671:	48                   	dec    eax
c0014672:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014677:	75 01                	jne    c001467a <SysYield(regs*)+0x1d>
c0014679:	fb                   	sti    
c001467a:	31 c0                	xor    eax,eax
c001467c:	31 d2                	xor    edx,edx
c001467e:	83 c4 0c             	add    esp,0xc
c0014681:	c3                   	ret    

c0014682 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014682:	55                   	push   ebp
c0014683:	57                   	push   edi
c0014684:	56                   	push   esi
c0014685:	53                   	push   ebx
c0014686:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001468c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014697:	74 3b                	je     c00146d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014699:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146a1:	74 31                	je     c00146d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00146a3:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146ab:	75 27                	jne    c00146d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00146ad:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00146b4:	05 00 10 00 00       	add    eax,0x1000
c00146b9:	89 c2                	mov    edx,eax
c00146bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146c0:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00146c7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00146cd:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00146d4:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00146db:	83 ec 0c             	sub    esp,0xc
c00146de:	6a 01                	push   0x1
c00146e0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00146e6:	e8 0a 4f ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00146f4:	89 c3                	mov    ebx,eax
c00146f6:	0f 86 26 01 00 00    	jbe    c0014822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00146fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014704:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001470b:	c1 ee 0c             	shr    esi,0xc
c001470e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014712:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014719:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014724:	29 ef                	sub    edi,ebp
c0014726:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001472a:	0f 83 f9 00 00 00    	jae    c0014829 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014730:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014736:	b8 00 10 00 00       	mov    eax,0x1000
c001473b:	0f 47 f8             	cmova  edi,eax
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014748:	31 d2                	xor    edx,edx
c001474a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001474c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014750:	50                   	push   eax
c0014751:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014755:	56                   	push   esi
c0014756:	52                   	push   edx
c0014757:	57                   	push   edi
c0014758:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001475f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014762:	83 c4 20             	add    esp,0x20
c0014765:	85 c0                	test   eax,eax
c0014767:	75 06                	jne    c001476f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014769:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001476d:	74 13                	je     c0014782 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001476f:	83 ec 0c             	sub    esp,0xc
c0014772:	53                   	push   ebx
c0014773:	e8 91 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014778:	83 c4 10             	add    esp,0x10
c001477b:	31 c0                	xor    eax,eax
c001477d:	e9 7c 01 00 00       	jmp    c00148fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014782:	fa                   	cli    
c0014783:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014789:	e8 54 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c001478e:	6a 07                	push   0x7
c0014790:	53                   	push   ebx
c0014791:	50                   	push   eax
c0014792:	89 c7                	mov    edi,eax
c0014794:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014799:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001479c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147a2:	e8 57 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00147a7:	83 c4 0c             	add    esp,0xc
c00147aa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147b1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147b7:	6a 00                	push   0x0
c00147b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147c7:	e8 98 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00147cc:	58                   	pop    eax
c00147cd:	5a                   	pop    edx
c00147ce:	68 07 0c 00 00       	push   0xc07
c00147d3:	55                   	push   ebp
c00147d4:	57                   	push   edi
c00147d5:	89 df                	mov    edi,ebx
c00147d7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00147de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147e4:	6a 00                	push   0x0
c00147e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147f4:	e8 69 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00147f9:	b9 00 10 00 00       	mov    ecx,0x1000
c00147fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014800:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014805:	83 c4 20             	add    esp,0x20
c0014808:	48                   	dec    eax
c0014809:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001480e:	85 c0                	test   eax,eax
c0014810:	75 01                	jne    c0014813 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014812:	fb                   	sti    
c0014813:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014817:	81 c5 00 10 00 00    	add    ebp,0x1000
c001481d:	e9 f0 fe ff ff       	jmp    c0014712 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014822:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014829:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014830:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014836:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001483c:	0f 86 ae 00 00 00    	jbe    c00148f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014842:	fa                   	cli    
c0014843:	51                   	push   ecx
c0014844:	31 ff                	xor    edi,edi
c0014846:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001484d:	c1 ee 0c             	shr    esi,0xc
c0014850:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014856:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001485c:	6a 00                	push   0x0
c001485e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014863:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014866:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001486c:	e8 f3 52 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014871:	83 c4 10             	add    esp,0x10
c0014874:	e8 69 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014879:	47                   	inc    edi
c001487a:	6a 07                	push   0x7
c001487c:	53                   	push   ebx
c001487d:	50                   	push   eax
c001487e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014882:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014888:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001488b:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014891:	e8 68 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014896:	58                   	pop    eax
c0014897:	5a                   	pop    edx
c0014898:	68 07 0c 00 00       	push   0xc07
c001489d:	55                   	push   ebp
c001489e:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148a8:	50                   	push   eax
c00148a9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148b0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148b6:	6a 00                	push   0x0
c00148b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148c6:	e8 97 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148cb:	83 c4 1c             	add    esp,0x1c
c00148ce:	68 00 10 00 00       	push   0x1000
c00148d3:	6a 00                	push   0x0
c00148d5:	53                   	push   ebx
c00148d6:	e8 15 bc fe ff       	call   c00004f0 <memset>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	39 fe                	cmp    esi,edi
c00148e0:	77 92                	ja     c0014874 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00148e2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148e7:	48                   	dec    eax
c00148e8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148ed:	75 01                	jne    c00148f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00148ef:	fb                   	sti    
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	53                   	push   ebx
c00148f4:	e8 10 50 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00148f9:	83 c4 10             	add    esp,0x10
c00148fc:	b0 01                	mov    al,0x1
c00148fe:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014904:	5b                   	pop    ebx
c0014905:	5e                   	pop    esi
c0014906:	5f                   	pop    edi
c0014907:	5d                   	pop    ebp
c0014908:	c3                   	ret    

c0014909 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014909:	55                   	push   ebp
c001490a:	57                   	push   edi
c001490b:	56                   	push   esi
c001490c:	53                   	push   ebx
c001490d:	83 ec 48             	sub    esp,0x48
c0014910:	68 14 01 00 00       	push   0x114
c0014915:	e8 b9 31 ff ff       	call   c0007ad3 <malloc>
c001491a:	83 c4 0c             	add    esp,0xc
c001491d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014921:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014925:	89 c7                	mov    edi,eax
c0014927:	50                   	push   eax
c0014928:	e8 f5 71 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c001492d:	58                   	pop    eax
c001492e:	5a                   	pop    edx
c001492f:	6a 01                	push   0x1
c0014931:	57                   	push   edi
c0014932:	e8 09 72 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	85 c0                	test   eax,eax
c001493c:	0f 85 4c 01 00 00    	jne    c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014942:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001494a:	83 ec 0c             	sub    esp,0xc
c001494d:	6a 34                	push   0x34
c001494f:	e8 7f 31 ff ff       	call   c0007ad3 <malloc>
c0014954:	89 c3                	mov    ebx,eax
c0014956:	58                   	pop    eax
c0014957:	8b 07                	mov    eax,DWORD PTR [edi]
c0014959:	8d 74 24 38          	lea    esi,[esp+0x38]
c001495d:	56                   	push   esi
c001495e:	53                   	push   ebx
c001495f:	6a 00                	push   0x0
c0014961:	6a 34                	push   0x34
c0014963:	57                   	push   edi
c0014964:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014967:	83 c4 20             	add    esp,0x20
c001496a:	85 c0                	test   eax,eax
c001496c:	0f 85 1c 01 00 00    	jne    c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014972:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014978:	0f 85 10 01 00 00    	jne    c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001497e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014981:	85 c0                	test   eax,eax
c0014983:	0f 84 05 01 00 00    	je     c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014989:	31 d2                	xor    edx,edx
c001498b:	55                   	push   ebp
c001498c:	52                   	push   edx
c001498d:	50                   	push   eax
c001498e:	57                   	push   edi
c001498f:	e8 6a 72 ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014994:	83 c4 10             	add    esp,0x10
c0014997:	85 c0                	test   eax,eax
c0014999:	0f 85 ef 00 00 00    	jne    c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001499f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00149a2:	83 ec 0c             	sub    esp,0xc
c00149a5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00149ad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149b1:	0f af c2             	imul   eax,edx
c00149b4:	50                   	push   eax
c00149b5:	e8 19 31 ff ff       	call   c0007ad3 <malloc>
c00149ba:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00149bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00149bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149c7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149cb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149cf:	0f af c2             	imul   eax,edx
c00149d2:	99                   	cdq    
c00149d3:	52                   	push   edx
c00149d4:	50                   	push   eax
c00149d5:	57                   	push   edi
c00149d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149d9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00149dc:	83 c4 20             	add    esp,0x20
c00149df:	85 c0                	test   eax,eax
c00149e1:	0f 84 a7 00 00 00    	je     c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149e7:	31 d2                	xor    edx,edx
c00149e9:	51                   	push   ecx
c00149ea:	52                   	push   edx
c00149eb:	50                   	push   eax
c00149ec:	57                   	push   edi
c00149ed:	e8 0c 72 ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c00149f2:	83 c4 10             	add    esp,0x10
c00149f5:	85 c0                	test   eax,eax
c00149f7:	0f 85 91 00 00 00    	jne    c0014a8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149fd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a01:	83 ec 0c             	sub    esp,0xc
c0014a04:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a08:	0f af c2             	imul   eax,edx
c0014a0b:	50                   	push   eax
c0014a0c:	e8 c2 30 ff ff       	call   c0007ad3 <malloc>
c0014a11:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014a13:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a1e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a22:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a26:	0f af c2             	imul   eax,edx
c0014a29:	99                   	cdq    
c0014a2a:	52                   	push   edx
c0014a2b:	50                   	push   eax
c0014a2c:	57                   	push   edi
c0014a2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a30:	83 c4 20             	add    esp,0x20
c0014a33:	31 c9                	xor    ecx,ecx
c0014a35:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a3d:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014a41:	0f b7 e9             	movzx  ebp,cx
c0014a44:	0f 83 86 00 00 00    	jae    c0014ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014a4a:	c1 e5 05             	shl    ebp,0x5
c0014a4d:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014a51:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014a55:	75 73                	jne    c0014aca <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014a57:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014a61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a65:	52                   	push   edx
c0014a66:	31 d2                	xor    edx,edx
c0014a68:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a6b:	52                   	push   edx
c0014a6c:	50                   	push   eax
c0014a6d:	57                   	push   edi
c0014a6e:	e8 8b 71 ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a7a:	85 c0                	test   eax,eax
c0014a7c:	74 17                	je     c0014a95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	68 31 27 02 c0       	push   0xc0022731
c0014a86:	e8 7f 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	31 c0                	xor    eax,eax
c0014a90:	e9 8b 00 00 00       	jmp    c0014b20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014a95:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014aa2:	50                   	push   eax
c0014aa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014aa7:	56                   	push   esi
c0014aa8:	57                   	push   edi
c0014aa9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014aad:	e8 d0 fb ff ff       	call   c0014682 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ab2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014ab6:	83 c4 20             	add    esp,0x20
c0014ab9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014abd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ac1:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014ac6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014aca:	41                   	inc    ecx
c0014acb:	e9 6d ff ff ff       	jmp    c0014a3d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014ad0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014adf:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014ae5:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014aeb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014af0:	05 00 10 00 00       	add    eax,0x1000
c0014af5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014afc:	e8 e2 2f ff ff       	call   c0007ae3 <free>
c0014b01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b04:	e8 da 2f ff ff       	call   c0007ae3 <free>
c0014b09:	58                   	pop    eax
c0014b0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b0e:	e8 d0 2f ff ff       	call   c0007ae3 <free>
c0014b13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b16:	e8 83 70 ff ff       	call   c000bb9e <File::close()>
c0014b1b:	83 c4 10             	add    esp,0x10
c0014b1e:	b0 01                	mov    al,0x1
c0014b20:	83 c4 3c             	add    esp,0x3c
c0014b23:	5b                   	pop    ebx
c0014b24:	5e                   	pop    esi
c0014b25:	5f                   	pop    edi
c0014b26:	5d                   	pop    ebp
c0014b27:	c3                   	ret    

c0014b28 <Thr::runtimeReferenceHelper()>:
c0014b28:	83 ec 18             	sub    esp,0x18
c0014b2b:	68 39 27 02 c0       	push   0xc0022739
c0014b30:	e8 d5 5d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014b35:	fa                   	cli    
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	eb fe                	jmp    c0014b39 <Thr::runtimeReferenceHelper()+0x11>

c0014b3b <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b3b:	57                   	push   edi
c0014b3c:	56                   	push   esi
c0014b3d:	53                   	push   ebx
c0014b3e:	31 db                	xor    ebx,ebx
c0014b40:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b46:	7e 3c                	jle    c0014b84 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b48:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b4f:	31 ff                	xor    edi,edi
c0014b51:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b58:	7e 27                	jle    c0014b81 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b5a:	50                   	push   eax
c0014b5b:	50                   	push   eax
c0014b5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b60:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b62:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b69:	50                   	push   eax
c0014b6a:	e8 11 bc fe ff       	call   c0000780 <strcmp>
c0014b6f:	83 c4 10             	add    esp,0x10
c0014b72:	85 c0                	test   eax,eax
c0014b74:	75 05                	jne    c0014b7b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b76:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b79:	eb 0b                	jmp    c0014b86 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b7b:	83 c6 10             	add    esi,0x10
c0014b7e:	47                   	inc    edi
c0014b7f:	eb d0                	jmp    c0014b51 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b81:	43                   	inc    ebx
c0014b82:	eb bc                	jmp    c0014b40 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b84:	31 c0                	xor    eax,eax
c0014b86:	5b                   	pop    ebx
c0014b87:	5e                   	pop    esi
c0014b88:	5f                   	pop    edi
c0014b89:	c3                   	ret    

c0014b8a <Thr::loadKernelSymbolTable(char const*)>:
c0014b8a:	55                   	push   ebp
c0014b8b:	57                   	push   edi
c0014b8c:	56                   	push   esi
c0014b8d:	53                   	push   ebx
c0014b8e:	83 ec 68             	sub    esp,0x68
c0014b91:	68 14 01 00 00       	push   0x114
c0014b96:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014b9c:	e8 32 2f ff ff       	call   c0007ad3 <malloc>
c0014ba1:	83 c4 0c             	add    esp,0xc
c0014ba4:	56                   	push   esi
c0014ba5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014ba9:	89 c3                	mov    ebx,eax
c0014bab:	50                   	push   eax
c0014bac:	e8 71 6f ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0014bb1:	5e                   	pop    esi
c0014bb2:	5f                   	pop    edi
c0014bb3:	6a 01                	push   0x1
c0014bb5:	53                   	push   ebx
c0014bb6:	e8 85 6f ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	85 c0                	test   eax,eax
c0014bc0:	74 0a                	je     c0014bcc <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014bc2:	83 ec 0c             	sub    esp,0xc
c0014bc5:	68 5b 27 02 c0       	push   0xc002275b
c0014bca:	eb 34                	jmp    c0014c00 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014bcc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014bd4:	83 ec 0c             	sub    esp,0xc
c0014bd7:	6a 34                	push   0x34
c0014bd9:	e8 f5 2e ff ff       	call   c0007ad3 <malloc>
c0014bde:	59                   	pop    ecx
c0014bdf:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014be3:	89 c7                	mov    edi,eax
c0014be5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014be7:	56                   	push   esi
c0014be8:	57                   	push   edi
c0014be9:	6a 00                	push   0x0
c0014beb:	6a 34                	push   0x34
c0014bed:	53                   	push   ebx
c0014bee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bf1:	83 c4 20             	add    esp,0x20
c0014bf4:	85 c0                	test   eax,eax
c0014bf6:	74 17                	je     c0014c0f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	68 72 27 02 c0       	push   0xc0022772
c0014c00:	e8 62 c9 ff ff       	call   c0011567 <KePanic(char const*)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	31 c0                	xor    eax,eax
c0014c0a:	e9 31 02 00 00       	jmp    c0014e40 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c0f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c15:	75 e1                	jne    c0014bf8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c17:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c1a:	85 c0                	test   eax,eax
c0014c1c:	74 da                	je     c0014bf8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c1e:	52                   	push   edx
c0014c1f:	31 d2                	xor    edx,edx
c0014c21:	52                   	push   edx
c0014c22:	50                   	push   eax
c0014c23:	53                   	push   ebx
c0014c24:	e8 d5 6f ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014c29:	83 c4 10             	add    esp,0x10
c0014c2c:	85 c0                	test   eax,eax
c0014c2e:	75 c8                	jne    c0014bf8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c30:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c34:	83 ec 0c             	sub    esp,0xc
c0014c37:	31 ed                	xor    ebp,ebp
c0014c39:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c3d:	0f af c2             	imul   eax,edx
c0014c40:	50                   	push   eax
c0014c41:	e8 8d 2e ff ff       	call   c0007ad3 <malloc>
c0014c46:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c48:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c53:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c5b:	0f af c2             	imul   eax,edx
c0014c5e:	99                   	cdq    
c0014c5f:	52                   	push   edx
c0014c60:	50                   	push   eax
c0014c61:	53                   	push   ebx
c0014c62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c65:	83 c4 20             	add    esp,0x20
c0014c68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c70:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c78:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c88:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c8c:	0f b7 f5             	movzx  esi,bp
c0014c8f:	0f 83 a7 00 00 00    	jae    c0014d3c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c95:	6b f6 28             	imul   esi,esi,0x28
c0014c98:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c9c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ca3:	50                   	push   eax
c0014ca4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014ca8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cac:	8b 16                	mov    edx,DWORD PTR [esi]
c0014cae:	6b c0 28             	imul   eax,eax,0x28
c0014cb1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014cb5:	89 d0                	mov    eax,edx
c0014cb7:	31 d2                	xor    edx,edx
c0014cb9:	52                   	push   edx
c0014cba:	50                   	push   eax
c0014cbb:	53                   	push   ebx
c0014cbc:	e8 3d 6f ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014cc1:	83 c4 0c             	add    esp,0xc
c0014cc4:	6a 20                	push   0x20
c0014cc6:	6a 00                	push   0x0
c0014cc8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ccc:	52                   	push   edx
c0014ccd:	e8 1e b8 fe ff       	call   c00004f0 <memset>
c0014cd2:	58                   	pop    eax
c0014cd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cd5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014cd9:	51                   	push   ecx
c0014cda:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014cde:	52                   	push   edx
c0014cdf:	6a 00                	push   0x0
c0014ce1:	6a 1f                	push   0x1f
c0014ce3:	53                   	push   ebx
c0014ce4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ce7:	83 c4 18             	add    esp,0x18
c0014cea:	68 89 27 02 c0       	push   0xc0022789
c0014cef:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cf3:	52                   	push   edx
c0014cf4:	e8 87 ba fe ff       	call   c0000780 <strcmp>
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	85 c0                	test   eax,eax
c0014cfe:	75 0f                	jne    c0014d0f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d00:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d0f:	50                   	push   eax
c0014d10:	50                   	push   eax
c0014d11:	68 91 27 02 c0       	push   0xc0022791
c0014d16:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d1a:	50                   	push   eax
c0014d1b:	e8 60 ba fe ff       	call   c0000780 <strcmp>
c0014d20:	83 c4 10             	add    esp,0x10
c0014d23:	85 c0                	test   eax,eax
c0014d25:	75 0f                	jne    c0014d36 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d36:	45                   	inc    ebp
c0014d37:	e9 4c ff ff ff       	jmp    c0014c88 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d41:	75 10                	jne    c0014d53 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d43:	83 ec 0c             	sub    esp,0xc
c0014d46:	68 99 27 02 c0       	push   0xc0022799
c0014d4b:	e8 17 c8 ff ff       	call   c0011567 <KePanic(char const*)>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d58:	75 10                	jne    c0014d6a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	68 99 27 02 c0       	push   0xc0022799
c0014d62:	e8 00 c8 ff ff       	call   c0011567 <KePanic(char const*)>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	50                   	push   eax
c0014d6b:	31 d2                	xor    edx,edx
c0014d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d71:	52                   	push   edx
c0014d72:	50                   	push   eax
c0014d73:	53                   	push   ebx
c0014d74:	e8 85 6e ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014d79:	5a                   	pop    edx
c0014d7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d7e:	e8 50 2d ff ff       	call   c0007ad3 <malloc>
c0014d83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d87:	31 c9                	xor    ecx,ecx
c0014d89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d8f:	5e                   	pop    esi
c0014d90:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d94:	55                   	push   ebp
c0014d95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d99:	51                   	push   ecx
c0014d9a:	52                   	push   edx
c0014d9b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d9f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014da3:	53                   	push   ebx
c0014da4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014da7:	83 c4 14             	add    esp,0x14
c0014daa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dae:	e8 20 2d ff ff       	call   c0007ad3 <malloc>
c0014db3:	89 c6                	mov    esi,eax
c0014db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014db7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dba:	56                   	push   esi
c0014dbb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014dbf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014dc3:	51                   	push   ecx
c0014dc4:	52                   	push   edx
c0014dc5:	53                   	push   ebx
c0014dc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dcd:	83 c4 1c             	add    esp,0x1c
c0014dd0:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014dd6:	c1 e8 04             	shr    eax,0x4
c0014dd9:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014de0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014de4:	31 d2                	xor    edx,edx
c0014de6:	52                   	push   edx
c0014de7:	50                   	push   eax
c0014de8:	53                   	push   ebx
c0014de9:	e8 10 6e ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014dee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014df0:	31 d2                	xor    edx,edx
c0014df2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014df5:	56                   	push   esi
c0014df6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dfa:	52                   	push   edx
c0014dfb:	50                   	push   eax
c0014dfc:	53                   	push   ebx
c0014dfd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e00:	83 c4 14             	add    esp,0x14
c0014e03:	53                   	push   ebx
c0014e04:	e8 95 6d ff ff       	call   c000bb9e <File::close()>
c0014e09:	5d                   	pop    ebp
c0014e0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e0e:	e8 d0 2c ff ff       	call   c0007ae3 <free>
c0014e13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e16:	e8 c8 2c ff ff       	call   c0007ae3 <free>
c0014e1b:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e24:	83 c4 10             	add    esp,0x10
c0014e27:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e2e:	8d 50 01             	lea    edx,[eax+0x1]
c0014e31:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e38:	b0 01                	mov    al,0x1
c0014e3a:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e40:	83 c4 5c             	add    esp,0x5c
c0014e43:	5b                   	pop    ebx
c0014e44:	5e                   	pop    esi
c0014e45:	5f                   	pop    edi
c0014e46:	5d                   	pop    ebp
c0014e47:	c3                   	ret    

c0014e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e48:	55                   	push   ebp
c0014e49:	57                   	push   edi
c0014e4a:	56                   	push   esi
c0014e4b:	53                   	push   ebx
c0014e4c:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e52:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e59:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014e5f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014e63:	68 14 01 00 00       	push   0x114
c0014e68:	e8 66 2c ff ff       	call   c0007ad3 <malloc>
c0014e6d:	83 c4 0c             	add    esp,0xc
c0014e70:	56                   	push   esi
c0014e71:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e78:	50                   	push   eax
c0014e79:	89 c3                	mov    ebx,eax
c0014e7b:	e8 a2 6c ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0014e80:	5f                   	pop    edi
c0014e81:	5d                   	pop    ebp
c0014e82:	6a 01                	push   0x1
c0014e84:	53                   	push   ebx
c0014e85:	e8 b6 6c ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	85 c0                	test   eax,eax
c0014e8f:	0f 85 b3 06 00 00    	jne    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e95:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	6a 34                	push   0x34
c0014ea2:	e8 2c 2c ff ff       	call   c0007ad3 <malloc>
c0014ea7:	5e                   	pop    esi
c0014ea8:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014eac:	89 c5                	mov    ebp,eax
c0014eae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eb0:	56                   	push   esi
c0014eb1:	55                   	push   ebp
c0014eb2:	6a 00                	push   0x0
c0014eb4:	6a 34                	push   0x34
c0014eb6:	53                   	push   ebx
c0014eb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eba:	83 c4 20             	add    esp,0x20
c0014ebd:	85 c0                	test   eax,eax
c0014ebf:	0f 85 83 06 00 00    	jne    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ec5:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014ecc:	0f 85 76 06 00 00    	jne    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ed2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014ed5:	85 c0                	test   eax,eax
c0014ed7:	0f 84 6b 06 00 00    	je     c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014edd:	31 d2                	xor    edx,edx
c0014edf:	51                   	push   ecx
c0014ee0:	52                   	push   edx
c0014ee1:	50                   	push   eax
c0014ee2:	53                   	push   ebx
c0014ee3:	e8 16 6d ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014ee8:	83 c4 10             	add    esp,0x10
c0014eeb:	85 c0                	test   eax,eax
c0014eed:	0f 85 55 06 00 00    	jne    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ef3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014ef6:	83 ec 0c             	sub    esp,0xc
c0014ef9:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014efd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f01:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f05:	0f af c2             	imul   eax,edx
c0014f08:	50                   	push   eax
c0014f09:	e8 c5 2b ff ff       	call   c0007ad3 <malloc>
c0014f0e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f10:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f1b:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014f1f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f23:	0f af c2             	imul   eax,edx
c0014f26:	99                   	cdq    
c0014f27:	52                   	push   edx
c0014f28:	50                   	push   eax
c0014f29:	53                   	push   ebx
c0014f2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f2d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014f30:	83 c4 20             	add    esp,0x20
c0014f33:	85 c0                	test   eax,eax
c0014f35:	0f 84 0d 06 00 00    	je     c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f3b:	52                   	push   edx
c0014f3c:	31 d2                	xor    edx,edx
c0014f3e:	52                   	push   edx
c0014f3f:	50                   	push   eax
c0014f40:	53                   	push   ebx
c0014f41:	e8 b8 6c ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014f46:	83 c4 10             	add    esp,0x10
c0014f49:	85 c0                	test   eax,eax
c0014f4b:	0f 85 f7 05 00 00    	jne    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f51:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f55:	83 ec 0c             	sub    esp,0xc
c0014f58:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f5c:	0f af c2             	imul   eax,edx
c0014f5f:	50                   	push   eax
c0014f60:	e8 6e 2b ff ff       	call   c0007ad3 <malloc>
c0014f65:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f67:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f72:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f76:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f7a:	0f af c2             	imul   eax,edx
c0014f7d:	99                   	cdq    
c0014f7e:	52                   	push   edx
c0014f7f:	50                   	push   eax
c0014f80:	53                   	push   ebx
c0014f81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f84:	83 c4 20             	add    esp,0x20
c0014f87:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014f8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014f90:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014f94:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014f98:	73 78                	jae    c0015012 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014f9a:	c1 e7 05             	shl    edi,0x5
c0014f9d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014fa1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014fa4:	75 63                	jne    c0015009 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014fa6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014fa9:	31 d2                	xor    edx,edx
c0014fab:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fb2:	50                   	push   eax
c0014fb3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014fb6:	52                   	push   edx
c0014fb7:	50                   	push   eax
c0014fb8:	53                   	push   ebx
c0014fb9:	e8 40 6c ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	85 c0                	test   eax,eax
c0014fc3:	0f 85 7f 05 00 00    	jne    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fc9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fd0:	83 ec 0c             	sub    esp,0xc
c0014fd3:	31 d2                	xor    edx,edx
c0014fd5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014fd9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fdb:	01 c6                	add    esi,eax
c0014fdd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fe4:	50                   	push   eax
c0014fe5:	56                   	push   esi
c0014fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fea:	52                   	push   edx
c0014feb:	50                   	push   eax
c0014fec:	53                   	push   ebx
c0014fed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ff0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014ff3:	83 c4 1c             	add    esp,0x1c
c0014ff6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014ff9:	50                   	push   eax
c0014ffa:	6a 00                	push   0x0
c0014ffc:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0015000:	56                   	push   esi
c0015001:	e8 ea b4 fe ff       	call   c00004f0 <memset>
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	66 ff 04 24          	inc    WORD PTR [esp]
c001500d:	e9 7b ff ff ff       	jmp    c0014f8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015012:	50                   	push   eax
c0015013:	68 00 01 00 00       	push   0x100
c0015018:	6a 00                	push   0x0
c001501a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001501e:	50                   	push   eax
c001501f:	e8 cc b4 fe ff       	call   c00004f0 <memset>
c0015024:	83 c4 0c             	add    esp,0xc
c0015027:	68 00 01 00 00       	push   0x100
c001502c:	6a 00                	push   0x0
c001502e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015035:	50                   	push   eax
c0015036:	e8 b5 b4 fe ff       	call   c00004f0 <memset>
c001503b:	83 c4 10             	add    esp,0x10
c001503e:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015045:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001504c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015054:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001505c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015064:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001506c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015070:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015074:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015079:	0f 83 16 01 00 00    	jae    c0015195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001507f:	6b ff 28             	imul   edi,edi,0x28
c0015082:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015086:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015089:	51                   	push   ecx
c001508a:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001508e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015092:	8b 07                	mov    eax,DWORD PTR [edi]
c0015094:	6b d2 28             	imul   edx,edx,0x28
c0015097:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001509b:	31 d2                	xor    edx,edx
c001509d:	52                   	push   edx
c001509e:	50                   	push   eax
c001509f:	53                   	push   ebx
c00150a0:	e8 59 6b ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c00150a5:	83 c4 0c             	add    esp,0xc
c00150a8:	6a 20                	push   0x20
c00150aa:	6a 00                	push   0x0
c00150ac:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150b3:	51                   	push   ecx
c00150b4:	e8 37 b4 fe ff       	call   c00004f0 <memset>
c00150b9:	58                   	pop    eax
c00150ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150bc:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150c0:	52                   	push   edx
c00150c1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150c8:	51                   	push   ecx
c00150c9:	6a 00                	push   0x0
c00150cb:	6a 1f                	push   0x1f
c00150cd:	53                   	push   ebx
c00150ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150d1:	83 c4 1c             	add    esp,0x1c
c00150d4:	6a 09                	push   0x9
c00150d6:	68 b3 27 02 c0       	push   0xc00227b3
c00150db:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150e2:	51                   	push   ecx
c00150e3:	e8 98 b2 fe ff       	call   c0000380 <memcmp>
c00150e8:	83 c4 10             	add    esp,0x10
c00150eb:	85 c0                	test   eax,eax
c00150ed:	75 1a                	jne    c0015109 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00150ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150f2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00150f5:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150f9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150fc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015103:	89 d0                	mov    eax,edx
c0015105:	40                   	inc    eax
c0015106:	89 04 24             	mov    DWORD PTR [esp],eax
c0015109:	52                   	push   edx
c001510a:	6a 09                	push   0x9
c001510c:	68 bd 27 02 c0       	push   0xc00227bd
c0015111:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015118:	50                   	push   eax
c0015119:	e8 62 b2 fe ff       	call   c0000380 <memcmp>
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	85 c0                	test   eax,eax
c0015123:	75 1a                	jne    c001513f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015125:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015128:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001512b:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001512f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015132:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015139:	89 c8                	mov    eax,ecx
c001513b:	40                   	inc    eax
c001513c:	89 04 24             	mov    DWORD PTR [esp],eax
c001513f:	50                   	push   eax
c0015140:	50                   	push   eax
c0015141:	68 89 27 02 c0       	push   0xc0022789
c0015146:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001514d:	50                   	push   eax
c001514e:	e8 2d b6 fe ff       	call   c0000780 <strcmp>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	85 c0                	test   eax,eax
c0015158:	75 0b                	jne    c0015165 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c001515a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001515e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015165:	50                   	push   eax
c0015166:	50                   	push   eax
c0015167:	68 91 27 02 c0       	push   0xc0022791
c001516c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015173:	50                   	push   eax
c0015174:	e8 07 b6 fe ff       	call   c0000780 <strcmp>
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	85 c0                	test   eax,eax
c001517e:	75 0b                	jne    c001518b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015180:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015184:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001518b:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015190:	e9 d7 fe ff ff       	jmp    c001506c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015195:	50                   	push   eax
c0015196:	31 d2                	xor    edx,edx
c0015198:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001519c:	52                   	push   edx
c001519d:	50                   	push   eax
c001519e:	53                   	push   ebx
c001519f:	e8 5a 6a ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c00151a4:	58                   	pop    eax
c00151a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151a9:	e8 25 29 ff ff       	call   c0007ad3 <malloc>
c00151ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151b0:	31 d2                	xor    edx,edx
c00151b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00151b6:	58                   	pop    eax
c00151b7:	8d 74 24 54          	lea    esi,[esp+0x54]
c00151bb:	56                   	push   esi
c00151bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c4:	52                   	push   edx
c00151c5:	50                   	push   eax
c00151c6:	53                   	push   ebx
c00151c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151ca:	83 c4 14             	add    esp,0x14
c00151cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151d1:	e8 fd 28 ff ff       	call   c0007ad3 <malloc>
c00151d6:	31 d2                	xor    edx,edx
c00151d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00151dc:	83 c4 0c             	add    esp,0xc
c00151df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151e3:	52                   	push   edx
c00151e4:	50                   	push   eax
c00151e5:	53                   	push   ebx
c00151e6:	e8 13 6a ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c00151eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151ed:	31 d2                	xor    edx,edx
c00151ef:	89 34 24             	mov    DWORD PTR [esp],esi
c00151f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151fa:	52                   	push   edx
c00151fb:	50                   	push   eax
c00151fc:	53                   	push   ebx
c00151fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015200:	83 c4 20             	add    esp,0x20
c0015203:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015208:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015210:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015214:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015218:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001521b:	0f 84 2b 03 00 00    	je     c001554c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015221:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015228:	31 d2                	xor    edx,edx
c001522a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001522e:	c1 e8 03             	shr    eax,0x3
c0015231:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015235:	51                   	push   ecx
c0015236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001523a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001523e:	52                   	push   edx
c001523f:	50                   	push   eax
c0015240:	53                   	push   ebx
c0015241:	e8 b8 69 ff ff       	call   c000bbfe <File::seek(unsigned long long)>
c0015246:	5e                   	pop    esi
c0015247:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001524b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015252:	e8 7c 28 ff ff       	call   c0007ad3 <malloc>
c0015257:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015259:	31 d2                	xor    edx,edx
c001525b:	89 c7                	mov    edi,eax
c001525d:	58                   	pop    eax
c001525e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015262:	50                   	push   eax
c0015263:	57                   	push   edi
c0015264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015268:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001526f:	52                   	push   edx
c0015270:	50                   	push   eax
c0015271:	53                   	push   ebx
c0015272:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015275:	83 c4 20             	add    esp,0x20
c0015278:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015280:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015284:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015288:	0f 8d a5 02 00 00    	jge    c0015533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001528e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015293:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015297:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c001529a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001529e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152a2:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00152a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152aa:	c1 e8 08             	shr    eax,0x8
c00152ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00152b1:	89 c2                	mov    edx,eax
c00152b3:	c1 e2 04             	shl    edx,0x4
c00152b6:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00152ba:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00152bd:	85 f6                	test   esi,esi
c00152bf:	0f 85 cf 00 00 00    	jne    c0015394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152c5:	83 ec 0c             	sub    esp,0xc
c00152c8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00152cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d0:	03 02                	add    eax,DWORD PTR [edx]
c00152d2:	50                   	push   eax
c00152d3:	e8 63 f8 ff ff       	call   c0014b3b <Thr::getAddressOfKernelSymbol(char const*)>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152df:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00152e4:	85 c0                	test   eax,eax
c00152e6:	89 c6                	mov    esi,eax
c00152e8:	0f 85 a6 00 00 00    	jne    c0015394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152ee:	83 ec 0c             	sub    esp,0xc
c00152f1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00152f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f9:	03 02                	add    eax,DWORD PTR [edx]
c00152fb:	50                   	push   eax
c00152fc:	e8 4f c4 ff ff       	call   c0011750 <KeResolveCompatibilitySymbol(char*)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015308:	85 c0                	test   eax,eax
c001530a:	89 c6                	mov    esi,eax
c001530c:	0f 85 82 00 00 00    	jne    c0015394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015312:	50                   	push   eax
c0015313:	50                   	push   eax
c0015314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015318:	03 02                	add    eax,DWORD PTR [edx]
c001531a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001531e:	50                   	push   eax
c001531f:	68 c7 27 02 c0       	push   0xc00227c7
c0015324:	e8 e1 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015329:	58                   	pop    eax
c001532a:	5a                   	pop    edx
c001532b:	68 e1 27 02 c0       	push   0xc00227e1
c0015330:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015337:	51                   	push   ecx
c0015338:	e8 13 b3 fe ff       	call   c0000650 <strcpy>
c001533d:	59                   	pop    ecx
c001533e:	58                   	pop    eax
c001533f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015347:	03 02                	add    eax,DWORD PTR [edx]
c0015349:	50                   	push   eax
c001534a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015351:	51                   	push   ecx
c0015352:	e8 19 b5 fe ff       	call   c0000870 <strcat>
c0015357:	58                   	pop    eax
c0015358:	5a                   	pop    edx
c0015359:	68 77 28 02 c0       	push   0xc0022877
c001535e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015365:	51                   	push   ecx
c0015366:	e8 05 b5 fe ff       	call   c0000870 <strcat>
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015373:	0f 84 77 01 00 00    	je     c00154f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015379:	83 ec 0c             	sub    esp,0xc
c001537c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015383:	51                   	push   ecx
c0015384:	e8 de c1 ff ff       	call   c0011567 <KePanic(char const*)>
c0015389:	83 c4 10             	add    esp,0x10
c001538c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015390:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015394:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015399:	83 f8 01             	cmp    eax,0x1
c001539c:	0f 85 9b 00 00 00    	jne    c001543d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00153a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153a6:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00153ad:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00153b1:	01 d0                	add    eax,edx
c00153b3:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00153bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00153bf:	0f 94 c0             	sete   al
c00153c2:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00153ca:	0f 94 c1             	sete   cl
c00153cd:	09 c1                	or     ecx,eax
c00153cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153d3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00153d8:	0f b6 c9             	movzx  ecx,cl
c00153db:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dd:	74 41                	je     c0015420 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00153df:	8d 14 06             	lea    edx,[esi+eax*1]
c00153e2:	85 c9                	test   ecx,ecx
c00153e4:	75 15                	jne    c00153fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00153e6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153ea:	66 83 f8 0c          	cmp    ax,0xc
c00153ee:	76 05                	jbe    c00153f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00153f0:	b8 0c 00 00 00       	mov    eax,0xc
c00153f5:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153f9:	76 37                	jbe    c0015432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153fb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015400:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015404:	0f 84 e6 00 00 00    	je     c00154f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001540a:	83 ec 0c             	sub    esp,0xc
c001540d:	68 f8 27 02 c0       	push   0xc00227f8
c0015412:	e8 50 c1 ff ff       	call   c0011567 <KePanic(char const*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001541e:	eb 12                	jmp    c0015432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015420:	01 c2                	add    edx,eax
c0015422:	85 c9                	test   ecx,ecx
c0015424:	75 0c                	jne    c0015432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015426:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001542a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001542e:	77 02                	ja     c0015432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015430:	01 f2                	add    edx,esi
c0015432:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015436:	89 10                	mov    DWORD PTR [eax],edx
c0015438:	e9 ed 00 00 00       	jmp    c001552a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001543d:	83 f8 02             	cmp    eax,0x2
c0015440:	0f 85 81 00 00 00    	jne    c00154c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015446:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001544d:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015451:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015455:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001545d:	74 21                	je     c0015480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001545f:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015467:	74 17                	je     c0015480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015469:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001546d:	ba 0a 00 00 00       	mov    edx,0xa
c0015472:	83 f9 0e             	cmp    ecx,0xe
c0015475:	77 03                	ja     c001547a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015477:	8d 51 fc             	lea    edx,[ecx-0x4]
c001547a:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001547e:	76 1f                	jbe    c001549f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015480:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015485:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015489:	74 65                	je     c00154f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001548b:	83 ec 0c             	sub    esp,0xc
c001548e:	68 14 28 02 c0       	push   0xc0022814
c0015493:	e8 cf c0 ff ff       	call   c0011567 <KePanic(char const*)>
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001549f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00154a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00154a6:	74 15                	je     c00154bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00154a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00154ac:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00154b3:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00154b7:	01 d1                	add    ecx,edx
c00154b9:	01 ce                	add    esi,ecx
c00154bb:	eb 06                	jmp    c00154c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00154bd:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00154c1:	01 d6                	add    esi,edx
c00154c3:	89 30                	mov    DWORD PTR [eax],esi
c00154c5:	eb 63                	jmp    c001552a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154c7:	56                   	push   esi
c00154c8:	56                   	push   esi
c00154c9:	50                   	push   eax
c00154ca:	68 30 28 02 c0       	push   0xc0022830
c00154cf:	e8 36 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154dc:	74 12                	je     c00154f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154de:	83 ec 0c             	sub    esp,0xc
c00154e1:	68 3b 28 02 c0       	push   0xc002283b
c00154e6:	e8 7c c0 ff ff       	call   c0011567 <KePanic(char const*)>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	eb 3a                	jmp    c001552a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	53                   	push   ebx
c00154f4:	e8 a5 66 ff ff       	call   c000bb9e <File::close()>
c00154f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015501:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015504:	e8 da 25 ff ff       	call   c0007ae3 <free>
c0015509:	59                   	pop    ecx
c001550a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001550e:	e8 d0 25 ff ff       	call   c0007ae3 <free>
c0015513:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015516:	e8 c8 25 ff ff       	call   c0007ae3 <free>
c001551b:	5b                   	pop    ebx
c001551c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015520:	e8 be 25 ff ff       	call   c0007ae3 <free>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	eb 1e                	jmp    c0015548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001552a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001552e:	e9 4d fd ff ff       	jmp    c0015280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015533:	83 ec 0c             	sub    esp,0xc
c0015536:	57                   	push   edi
c0015537:	e8 a7 25 ff ff       	call   c0007ae3 <free>
c001553c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015540:	83 c4 10             	add    esp,0x10
c0015543:	e9 cc fc ff ff       	jmp    c0015214 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015548:	31 c0                	xor    eax,eax
c001554a:	eb 32                	jmp    c001557e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	53                   	push   ebx
c0015550:	e8 49 66 ff ff       	call   c000bb9e <File::close()>
c0015555:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015557:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001555a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001555d:	58                   	pop    eax
c001555e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015562:	e8 7c 25 ff ff       	call   c0007ae3 <free>
c0015567:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001556a:	e8 74 25 ff ff       	call   c0007ae3 <free>
c001556f:	5a                   	pop    edx
c0015570:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015574:	e8 6a 25 ff ff       	call   c0007ae3 <free>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	b0 01                	mov    al,0x1
c001557e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015584:	5b                   	pop    ebx
c0015585:	5e                   	pop    esi
c0015586:	5f                   	pop    edi
c0015587:	5d                   	pop    ebp
c0015588:	c3                   	ret    

c0015589 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015589:	56                   	push   esi
c001558a:	31 d2                	xor    edx,edx
c001558c:	53                   	push   ebx
c001558d:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015593:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015597:	39 d3                	cmp    ebx,edx
c0015599:	7e 1b                	jle    c00155b6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001559b:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155a2:	39 c8                	cmp    eax,ecx
c00155a4:	77 0d                	ja     c00155b3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155a6:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155ad:	01 c6                	add    esi,eax
c00155af:	39 ce                	cmp    esi,ecx
c00155b1:	77 05                	ja     c00155b8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155b3:	42                   	inc    edx
c00155b4:	eb e1                	jmp    c0015597 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00155b6:	31 c0                	xor    eax,eax
c00155b8:	5b                   	pop    ebx
c00155b9:	5e                   	pop    esi
c00155ba:	c3                   	ret    

c00155bb <Thr::getDriverNameFromAddress(unsigned long)>:
c00155bb:	53                   	push   ebx
c00155bc:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155c2:	31 c0                	xor    eax,eax
c00155c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155c8:	39 c3                	cmp    ebx,eax
c00155ca:	7e 22                	jle    c00155ee <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155cc:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00155d3:	39 ca                	cmp    edx,ecx
c00155d5:	77 14                	ja     c00155eb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155d7:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00155de:	39 ca                	cmp    edx,ecx
c00155e0:	76 09                	jbe    c00155eb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155e2:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00155e9:	eb 05                	jmp    c00155f0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00155eb:	40                   	inc    eax
c00155ec:	eb da                	jmp    c00155c8 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00155ee:	31 c0                	xor    eax,eax
c00155f0:	5b                   	pop    ebx
c00155f1:	c3                   	ret    

c00155f2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00155f2:	53                   	push   ebx
c00155f3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155f7:	53                   	push   ebx
c00155f8:	e8 8c ff ff ff       	call   c0015589 <Thr::getDriverBaseFromAddress(unsigned long)>
c00155fd:	5a                   	pop    edx
c00155fe:	31 d2                	xor    edx,edx
c0015600:	85 c0                	test   eax,eax
c0015602:	74 04                	je     c0015608 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015604:	89 da                	mov    edx,ebx
c0015606:	29 c2                	sub    edx,eax
c0015608:	5b                   	pop    ebx
c0015609:	89 d0                	mov    eax,edx
c001560b:	c3                   	ret    

c001560c <Thr::loadDLL(char const*, bool)>:
c001560c:	55                   	push   ebp
c001560d:	57                   	push   edi
c001560e:	56                   	push   esi
c001560f:	53                   	push   ebx
c0015610:	81 ec 34 01 00 00    	sub    esp,0x134
c0015616:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001561d:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015624:	56                   	push   esi
c0015625:	68 53 28 02 c0       	push   0xc0022853
c001562a:	e8 db 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001562f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015636:	e8 98 24 ff ff       	call   c0007ad3 <malloc>
c001563b:	83 c4 0c             	add    esp,0xc
c001563e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015644:	56                   	push   esi
c0015645:	50                   	push   eax
c0015646:	89 c3                	mov    ebx,eax
c0015648:	e8 d5 64 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	85 db                	test   ebx,ebx
c0015652:	75 3c                	jne    c0015690 <Thr::loadDLL(char const*, bool)+0x84>
c0015654:	89 e8                	mov    eax,ebp
c0015656:	84 c0                	test   al,al
c0015658:	0f 84 e1 01 00 00    	je     c001583f <Thr::loadDLL(char const*, bool)+0x233>
c001565e:	50                   	push   eax
c001565f:	50                   	push   eax
c0015660:	68 64 28 02 c0       	push   0xc0022864
c0015665:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015669:	57                   	push   edi
c001566a:	e8 e1 af fe ff       	call   c0000650 <strcpy>
c001566f:	58                   	pop    eax
c0015670:	5a                   	pop    edx
c0015671:	56                   	push   esi
c0015672:	57                   	push   edi
c0015673:	e8 f8 b1 fe ff       	call   c0000870 <strcat>
c0015678:	59                   	pop    ecx
c0015679:	58                   	pop    eax
c001567a:	68 77 28 02 c0       	push   0xc0022877
c001567f:	57                   	push   edi
c0015680:	e8 eb b1 fe ff       	call   c0000870 <strcat>
c0015685:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015688:	e8 da be ff ff       	call   c0011567 <KePanic(char const*)>
c001568d:	83 c4 10             	add    esp,0x10
c0015690:	50                   	push   eax
c0015691:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015695:	50                   	push   eax
c0015696:	8d 44 24 20          	lea    eax,[esp+0x20]
c001569a:	50                   	push   eax
c001569b:	53                   	push   ebx
c001569c:	e8 a1 67 ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c00156a1:	83 c4 10             	add    esp,0x10
c00156a4:	85 db                	test   ebx,ebx
c00156a6:	74 0c                	je     c00156b4 <Thr::loadDLL(char const*, bool)+0xa8>
c00156a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156aa:	83 ec 0c             	sub    esp,0xc
c00156ad:	53                   	push   ebx
c00156ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156b9:	75 0a                	jne    c00156c5 <Thr::loadDLL(char const*, bool)+0xb9>
c00156bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156bf:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156c3:	75 3e                	jne    c0015703 <Thr::loadDLL(char const*, bool)+0xf7>
c00156c5:	89 e8                	mov    eax,ebp
c00156c7:	31 db                	xor    ebx,ebx
c00156c9:	84 c0                	test   al,al
c00156cb:	0f 84 6e 01 00 00    	je     c001583f <Thr::loadDLL(char const*, bool)+0x233>
c00156d1:	50                   	push   eax
c00156d2:	50                   	push   eax
c00156d3:	68 64 28 02 c0       	push   0xc0022864
c00156d8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156dc:	53                   	push   ebx
c00156dd:	e8 6e af fe ff       	call   c0000650 <strcpy>
c00156e2:	58                   	pop    eax
c00156e3:	5a                   	pop    edx
c00156e4:	56                   	push   esi
c00156e5:	53                   	push   ebx
c00156e6:	e8 85 b1 fe ff       	call   c0000870 <strcat>
c00156eb:	59                   	pop    ecx
c00156ec:	5f                   	pop    edi
c00156ed:	68 77 28 02 c0       	push   0xc0022877
c00156f2:	53                   	push   ebx
c00156f3:	e8 78 b1 fe ff       	call   c0000870 <strcat>
c00156f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156fb:	e8 67 be ff ff       	call   c0011567 <KePanic(char const*)>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	53                   	push   ebx
c0015704:	6a 03                	push   0x3
c0015706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001570a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001570e:	05 ff 0f 00 00       	add    eax,0xfff
c0015713:	83 d2 00             	adc    edx,0x0
c0015716:	0f ac d0 0c          	shrd   eax,edx,0xc
c001571a:	50                   	push   eax
c001571b:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015721:	e8 e0 46 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015726:	89 c3                	mov    ebx,eax
c0015728:	58                   	pop    eax
c0015729:	5a                   	pop    edx
c001572a:	53                   	push   ebx
c001572b:	68 b2 0d 02 c0       	push   0xc0020db2
c0015730:	e8 d5 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015735:	89 34 24             	mov    DWORD PTR [esp],esi
c0015738:	e8 43 ae fe ff       	call   c0000580 <strlen>
c001573d:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c0015743:	40                   	inc    eax
c0015744:	89 04 24             	mov    DWORD PTR [esp],eax
c0015747:	e8 87 23 ff ff       	call   c0007ad3 <malloc>
c001574c:	59                   	pop    ecx
c001574d:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c0015754:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015759:	5f                   	pop    edi
c001575a:	56                   	push   esi
c001575b:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015762:	e8 e9 ae fe ff       	call   c0000650 <strcpy>
c0015767:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001576c:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015773:	8d 50 01             	lea    edx,[eax+0x1]
c0015776:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001577c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015780:	83 c4 0c             	add    esp,0xc
c0015783:	6a 01                	push   0x1
c0015785:	53                   	push   ebx
c0015786:	56                   	push   esi
c0015787:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001578e:	e8 b5 f6 ff ff       	call   c0014e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015793:	83 c4 10             	add    esp,0x10
c0015796:	89 c7                	mov    edi,eax
c0015798:	89 f8                	mov    eax,edi
c001579a:	83 f0 01             	xor    eax,0x1
c001579d:	84 c0                	test   al,al
c001579f:	74 18                	je     c00157b9 <Thr::loadDLL(char const*, bool)+0x1ad>
c00157a1:	89 e8                	mov    eax,ebp
c00157a3:	84 c0                	test   al,al
c00157a5:	74 12                	je     c00157b9 <Thr::loadDLL(char const*, bool)+0x1ad>
c00157a7:	83 ec 0c             	sub    esp,0xc
c00157aa:	68 79 28 02 c0       	push   0xc0022879
c00157af:	e8 b3 bd ff ff       	call   c0011567 <KePanic(char const*)>
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	eb 06                	jmp    c00157bf <Thr::loadDLL(char const*, bool)+0x1b3>
c00157b9:	89 f8                	mov    eax,edi
c00157bb:	84 c0                	test   al,al
c00157bd:	75 10                	jne    c00157cf <Thr::loadDLL(char const*, bool)+0x1c3>
c00157bf:	83 ec 0c             	sub    esp,0xc
c00157c2:	68 98 28 02 c0       	push   0xc0022898
c00157c7:	e8 9b bd ff ff       	call   c0011567 <KePanic(char const*)>
c00157cc:	83 c4 10             	add    esp,0x10
c00157cf:	31 f6                	xor    esi,esi
c00157d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00157d9:	05 ff 0f 00 00       	add    eax,0xfff
c00157de:	83 d2 00             	adc    edx,0x0
c00157e1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00157e9:	c1 ea 0c             	shr    edx,0xc
c00157ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00157f0:	ba 00 00 00 00       	mov    edx,0x0
c00157f5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00157f9:	89 d0                	mov    eax,edx
c00157fb:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00157ff:	73 32                	jae    c0015833 <Thr::loadDLL(char const*, bool)+0x227>
c0015801:	50                   	push   eax
c0015802:	50                   	push   eax
c0015803:	89 f0                	mov    eax,esi
c0015805:	c1 e0 0c             	shl    eax,0xc
c0015808:	01 d8                	add    eax,ebx
c001580a:	50                   	push   eax
c001580b:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015811:	e8 d4 40 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015816:	83 c4 10             	add    esp,0x10
c0015819:	8b 00                	mov    eax,DWORD PTR [eax]
c001581b:	a8 60                	test   al,0x60
c001581d:	75 11                	jne    c0015830 <Thr::loadDLL(char const*, bool)+0x224>
c001581f:	83 ec 0c             	sub    esp,0xc
c0015822:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015827:	50                   	push   eax
c0015828:	e8 4c 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c001582d:	83 c4 10             	add    esp,0x10
c0015830:	46                   	inc    esi
c0015831:	eb 9e                	jmp    c00157d1 <Thr::loadDLL(char const*, bool)+0x1c5>
c0015833:	89 f8                	mov    eax,edi
c0015835:	84 c0                	test   al,al
c0015837:	b8 00 00 00 00       	mov    eax,0x0
c001583c:	0f 44 d8             	cmove  ebx,eax
c001583f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015845:	89 d8                	mov    eax,ebx
c0015847:	5b                   	pop    ebx
c0015848:	5e                   	pop    esi
c0015849:	5f                   	pop    edi
c001584a:	5d                   	pop    ebp
c001584b:	c3                   	ret    

c001584c <Thr::executeDLL(unsigned long, void*)>:
c001584c:	56                   	push   esi
c001584d:	53                   	push   ebx
c001584e:	52                   	push   edx
c001584f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015857:	85 db                	test   ebx,ebx
c0015859:	75 10                	jne    c001586b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001585b:	83 ec 0c             	sub    esp,0xc
c001585e:	68 b4 28 02 c0       	push   0xc00228b4
c0015863:	e8 ff bc ff ff       	call   c0011567 <KePanic(char const*)>
c0015868:	83 c4 10             	add    esp,0x10
c001586b:	50                   	push   eax
c001586c:	50                   	push   eax
c001586d:	53                   	push   ebx
c001586e:	68 de 28 02 c0       	push   0xc00228de
c0015873:	e8 92 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015878:	89 d8                	mov    eax,ebx
c001587a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001587e:	83 c4 14             	add    esp,0x14
c0015881:	5b                   	pop    ebx
c0015882:	5e                   	pop    esi
c0015883:	ff e0                	jmp    eax
c0015885:	66 90                	xchg   ax,ax
c0015887:	90                   	nop

c0015888 <userModeEntryPoint(void*)>:
c0015888:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001588d:	83 e8 01             	sub    eax,0x1
c0015890:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015895:	75 01                	jne    c0015898 <userModeEntryPoint(void*)+0x10>
c0015897:	fb                   	sti    
c0015898:	fb                   	sti    
c0015899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158ab:	e9 8f a9 fe ff       	jmp    c000023f <goToUsermode>

c00158b0 <changeTSS>:
c00158b0:	83 ec 14             	sub    esp,0x14
c00158b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158bb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158c0:	c1 e2 15             	shl    edx,0x15
c00158c3:	29 d0                	sub    eax,edx
c00158c5:	50                   	push   eax
c00158c6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00158cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158d1:	05 7c 11 00 00       	add    eax,0x117c
c00158d6:	50                   	push   eax
c00158d7:	e8 60 36 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00158dc:	83 c4 1c             	add    esp,0x1c
c00158df:	c3                   	ret    

c00158e0 <switchToThread(ThreadControlBlock*)>:
c00158e0:	57                   	push   edi
c00158e1:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00158e7:	56                   	push   esi
c00158e8:	53                   	push   ebx
c00158e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158ed:	85 c9                	test   ecx,ecx
c00158ef:	0f 85 8b 00 00 00    	jne    c0015980 <switchToThread(ThreadControlBlock*)+0xa0>
c00158f5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00158f9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00158ff:	74 7b                	je     c001597c <switchToThread(ThreadControlBlock*)+0x9c>
c0015901:	b8 00 04 00 00       	mov    eax,0x400
c0015906:	29 d0                	sub    eax,edx
c0015908:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001590b:	d1 f8                	sar    eax,1
c001590d:	01 d0                	add    eax,edx
c001590f:	90                   	nop
c0015910:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015913:	e8 04 28 00 00       	call   c001811c <HalQueryPerformanceCounter()>
c0015918:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c001591d:	89 c6                	mov    esi,eax
c001591f:	89 d7                	mov    edi,edx
c0015921:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015927:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c001592c:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015932:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015938:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c001593e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015944:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c001594a:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015950:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015953:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015956:	01 c6                	add    esi,eax
c0015958:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001595b:	11 d7                	adc    edi,edx
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015963:	53                   	push   ebx
c0015964:	e8 0e a9 fe ff       	call   c0000277 <switchToThreadASM>
c0015969:	0f 20 c0             	mov    eax,cr0
c001596c:	83 c8 08             	or     eax,0x8
c001596f:	0f 22 c0             	mov    cr0,eax
c0015972:	83 c4 10             	add    esp,0x10
c0015975:	5b                   	pop    ebx
c0015976:	5e                   	pop    esi
c0015977:	5f                   	pop    edi
c0015978:	c3                   	ret    
c0015979:	8d 76 00             	lea    esi,[esi+0x0]
c001597c:	31 c0                	xor    eax,eax
c001597e:	eb 90                	jmp    c0015910 <switchToThread(ThreadControlBlock*)+0x30>
c0015980:	5b                   	pop    ebx
c0015981:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001598b:	5e                   	pop    esi
c001598c:	5f                   	pop    edi
c001598d:	c3                   	ret    
c001598e:	66 90                	xchg   ax,ax

c0015990 <Process::addArgs(char**)>:
c0015990:	57                   	push   edi
c0015991:	56                   	push   esi
c0015992:	53                   	push   ebx
c0015993:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015997:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001599b:	85 f6                	test   esi,esi
c001599d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00159a7:	74 4f                	je     c00159f8 <Process::addArgs(char**)+0x68>
c00159a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00159ab:	85 c0                	test   eax,eax
c00159ad:	74 49                	je     c00159f8 <Process::addArgs(char**)+0x68>
c00159af:	31 db                	xor    ebx,ebx
c00159b1:	8d 76 00             	lea    esi,[esi+0x0]
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	50                   	push   eax
c00159b8:	e8 c3 ab fe ff       	call   c0000580 <strlen>
c00159bd:	83 c0 01             	add    eax,0x1
c00159c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00159c3:	e8 0b 21 ff ff       	call   c0007ad3 <malloc>
c00159c8:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00159cf:	5a                   	pop    edx
c00159d0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00159d3:	83 c3 01             	add    ebx,0x1
c00159d6:	59                   	pop    ecx
c00159d7:	52                   	push   edx
c00159d8:	50                   	push   eax
c00159d9:	e8 72 ac fe ff       	call   c0000650 <strcpy>
c00159de:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00159e4:	83 c4 10             	add    esp,0x10
c00159e7:	83 c1 01             	add    ecx,0x1
c00159ea:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00159f0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00159f3:	85 c0                	test   eax,eax
c00159f5:	75 bd                	jne    c00159b4 <Process::addArgs(char**)+0x24>
c00159f7:	90                   	nop
c00159f8:	5b                   	pop    ebx
c00159f9:	5e                   	pop    esi
c00159fa:	5f                   	pop    edi
c00159fb:	c3                   	ret    

c00159fc <Process::Process(char const*, Process*, char**)>:
c00159fc:	56                   	push   esi
c00159fd:	53                   	push   ebx
c00159fe:	83 ec 14             	sub    esp,0x14
c0015a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a05:	05 0c 02 00 00       	add    eax,0x20c
c0015a0a:	bb 07 00 00 00       	mov    ebx,0x7
c0015a0f:	89 c6                	mov    esi,eax
c0015a11:	8d 76 00             	lea    esi,[esi+0x0]
c0015a14:	85 db                	test   ebx,ebx
c0015a16:	78 14                	js     c0015a2c <Process::Process(char const*, Process*, char**)+0x30>
c0015a18:	83 ec 0c             	sub    esp,0xc
c0015a1b:	56                   	push   esi
c0015a1c:	e8 27 a6 00 00       	call   c0020048 <ThreadControlBlock::ThreadControlBlock()>
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	83 c6 5f             	add    esi,0x5f
c0015a27:	83 eb 01             	sub    ebx,0x1
c0015a2a:	eb e8                	jmp    c0015a14 <Process::Process(char const*, Process*, char**)+0x18>
c0015a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a30:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a3b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a42:	83 ec 0c             	sub    esp,0xc
c0015a45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a49:	e8 0e b9 ff ff       	call   c001135c <KeNewProcessEnv(Process*)>
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	89 c2                	mov    edx,eax
c0015a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a57:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a61:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a6a:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0015a6f:	8d 50 01             	lea    edx,[eax+0x1]
c0015a72:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c0015a78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a7c:	89 02                	mov    DWORD PTR [edx],eax
c0015a7e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a86:	83 ec 0c             	sub    esp,0xc
c0015a89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a8d:	e8 41 20 ff ff       	call   c0007ad3 <malloc>
c0015a92:	83 c4 10             	add    esp,0x10
c0015a95:	89 c3                	mov    ebx,eax
c0015a97:	83 ec 08             	sub    esp,0x8
c0015a9a:	6a 00                	push   0x0
c0015a9c:	53                   	push   ebx
c0015a9d:	e8 b0 45 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015aaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ac5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015acb:	e8 ae be ff ff       	call   c001197e <KeInitSignals()>
c0015ad0:	89 c2                	mov    edx,eax
c0015ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ae6:	85 c0                	test   eax,eax
c0015ae8:	74 42                	je     c0015b2c <Process::Process(char const*, Process*, char**)+0x130>
c0015aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015af4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015afe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b08:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b0e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b18:	05 0c 01 00 00       	add    eax,0x10c
c0015b1d:	83 ec 08             	sub    esp,0x8
c0015b20:	52                   	push   edx
c0015b21:	50                   	push   eax
c0015b22:	e8 29 ab fe ff       	call   c0000650 <strcpy>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	eb 64                	jmp    c0015b90 <Process::Process(char const*, Process*, char**)+0x194>
c0015b2c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b34:	83 ec 0c             	sub    esp,0xc
c0015b37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b3b:	e8 93 1f ff ff       	call   c0007ad3 <malloc>
c0015b40:	83 c4 10             	add    esp,0x10
c0015b43:	89 c3                	mov    ebx,eax
c0015b45:	83 ec 08             	sub    esp,0x8
c0015b48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b4c:	53                   	push   ebx
c0015b4d:	e8 1a 31 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015b52:	83 c4 10             	add    esp,0x10
c0015b55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b59:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b69:	83 ec 0c             	sub    esp,0xc
c0015b6c:	50                   	push   eax
c0015b6d:	e8 a8 29 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015b72:	83 c4 10             	add    esp,0x10
c0015b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b79:	05 0c 01 00 00       	add    eax,0x10c
c0015b7e:	83 ec 08             	sub    esp,0x8
c0015b81:	68 fd 28 02 c0       	push   0xc00228fd
c0015b86:	50                   	push   eax
c0015b87:	e8 c4 aa fe ff       	call   c0000650 <strcpy>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	90                   	nop
c0015b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b94:	83 c0 0c             	add    eax,0xc
c0015b97:	83 ec 08             	sub    esp,0x8
c0015b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b9e:	50                   	push   eax
c0015b9f:	e8 ac aa fe ff       	call   c0000650 <strcpy>
c0015ba4:	83 c4 10             	add    esp,0x10
c0015ba7:	83 ec 08             	sub    esp,0x8
c0015baa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb2:	e8 d9 fd ff ff       	call   c0015990 <Process::addArgs(char**)>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	83 ec 08             	sub    esp,0x8
c0015bbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc5:	e8 3f ed ff ff       	call   c0014909 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015bd1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015bd5:	83 f0 01             	xor    eax,0x1
c0015bd8:	88 c2                	mov    dl,al
c0015bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bde:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015be4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015be9:	83 ec 04             	sub    esp,0x4
c0015bec:	50                   	push   eax
c0015bed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf1:	68 54 29 02 c0       	push   0xc0022954
c0015bf6:	e8 0f 4d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	90                   	nop
c0015bff:	83 c4 14             	add    esp,0x14
c0015c02:	5b                   	pop    ebx
c0015c03:	5e                   	pop    esi
c0015c04:	c3                   	ret    
c0015c05:	90                   	nop
c0015c06:	66 90                	xchg   ax,ax

c0015c08 <Process::Process(bool, char const*, Process*, char**)>:
c0015c08:	56                   	push   esi
c0015c09:	53                   	push   ebx
c0015c0a:	83 ec 24             	sub    esp,0x24
c0015c0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c11:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c19:	05 0c 02 00 00       	add    eax,0x20c
c0015c1e:	bb 07 00 00 00       	mov    ebx,0x7
c0015c23:	89 c6                	mov    esi,eax
c0015c25:	8d 76 00             	lea    esi,[esi+0x0]
c0015c28:	85 db                	test   ebx,ebx
c0015c2a:	78 14                	js     c0015c40 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c2c:	83 ec 0c             	sub    esp,0xc
c0015c2f:	56                   	push   esi
c0015c30:	e8 13 a4 00 00       	call   c0020048 <ThreadControlBlock::ThreadControlBlock()>
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	83 c6 5f             	add    esi,0x5f
c0015c3b:	83 eb 01             	sub    ebx,0x1
c0015c3e:	eb e8                	jmp    c0015c28 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c44:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c4f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c56:	83 ec 0c             	sub    esp,0xc
c0015c59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c5d:	e8 fa b6 ff ff       	call   c001135c <KeNewProcessEnv(Process*)>
c0015c62:	83 c4 10             	add    esp,0x10
c0015c65:	89 c2                	mov    edx,eax
c0015c67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c6b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c75:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c7e:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0015c83:	8d 50 01             	lea    edx,[eax+0x1]
c0015c86:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c0015c8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c90:	89 02                	mov    DWORD PTR [edx],eax
c0015c92:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ca1:	e8 2d 1e ff ff       	call   c0007ad3 <malloc>
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	89 c3                	mov    ebx,eax
c0015cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cb0:	83 ec 08             	sub    esp,0x8
c0015cb3:	50                   	push   eax
c0015cb4:	53                   	push   ebx
c0015cb5:	e8 98 43 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015cba:	83 c4 10             	add    esp,0x10
c0015cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015cd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015cdd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015ce3:	e8 96 bc ff ff       	call   c001197e <KeInitSignals()>
c0015ce8:	89 c2                	mov    edx,eax
c0015cea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cee:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cfe:	85 c0                	test   eax,eax
c0015d00:	74 42                	je     c0015d44 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d06:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d0c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d16:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d26:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d30:	05 0c 01 00 00       	add    eax,0x10c
c0015d35:	83 ec 08             	sub    esp,0x8
c0015d38:	52                   	push   edx
c0015d39:	50                   	push   eax
c0015d3a:	e8 11 a9 fe ff       	call   c0000650 <strcpy>
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	eb 64                	jmp    c0015da8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d44:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d53:	e8 7b 1d ff ff       	call   c0007ad3 <malloc>
c0015d58:	83 c4 10             	add    esp,0x10
c0015d5b:	89 c3                	mov    ebx,eax
c0015d5d:	83 ec 08             	sub    esp,0x8
c0015d60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d64:	53                   	push   ebx
c0015d65:	e8 02 2f ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d71:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d81:	83 ec 0c             	sub    esp,0xc
c0015d84:	50                   	push   eax
c0015d85:	e8 90 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d91:	05 0c 01 00 00       	add    eax,0x10c
c0015d96:	83 ec 08             	sub    esp,0x8
c0015d99:	68 fd 28 02 c0       	push   0xc00228fd
c0015d9e:	50                   	push   eax
c0015d9f:	e8 ac a8 fe ff       	call   c0000650 <strcpy>
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	90                   	nop
c0015da8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dac:	83 c0 0c             	add    eax,0xc
c0015daf:	83 ec 08             	sub    esp,0x8
c0015db2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015db6:	50                   	push   eax
c0015db7:	e8 94 a8 fe ff       	call   c0000650 <strcpy>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	83 ec 08             	sub    esp,0x8
c0015dc2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015dca:	e8 c1 fb ff ff       	call   c0015990 <Process::addArgs(char**)>
c0015dcf:	83 c4 10             	add    esp,0x10
c0015dd2:	90                   	nop
c0015dd3:	83 c4 24             	add    esp,0x24
c0015dd6:	5b                   	pop    ebx
c0015dd7:	5e                   	pop    esi
c0015dd8:	c3                   	ret    
c0015dd9:	8d 76 00             	lea    esi,[esi+0x0]

c0015ddc <taskStartupFunction>:
c0015ddc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015de4:	c3                   	ret    
c0015de5:	90                   	nop
c0015de6:	66 90                	xchg   ax,ax

c0015de8 <Semaphore::Semaphore(int)>:
c0015de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015df0:	89 10                	mov    DWORD PTR [eax],edx
c0015df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015dfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e13:	90                   	nop
c0015e14:	c3                   	ret    
c0015e15:	90                   	nop
c0015e16:	66 90                	xchg   ax,ax

c0015e18 <Mutex::Mutex()>:
c0015e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e1c:	6a 01                	push   0x1
c0015e1e:	50                   	push   eax
c0015e1f:	e8 c4 ff ff ff       	call   c0015de8 <Semaphore::Semaphore(int)>
c0015e24:	83 c4 08             	add    esp,0x8
c0015e27:	90                   	nop
c0015e28:	c3                   	ret    
c0015e29:	90                   	nop
c0015e2a:	66 90                	xchg   ax,ax

c0015e2c <Process::createThread(void (*)(void*), void*, int)>:
c0015e2c:	57                   	push   edi
c0015e2d:	31 c9                	xor    ecx,ecx
c0015e2f:	56                   	push   esi
c0015e30:	53                   	push   ebx
c0015e31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e35:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e3c:	89 f2                	mov    edx,esi
c0015e3e:	66 90                	xchg   ax,ax
c0015e40:	0f b7 c2             	movzx  eax,dx
c0015e43:	80 e2 01             	and    dl,0x1
c0015e46:	74 14                	je     c0015e5c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e48:	d1 f8                	sar    eax,1
c0015e4a:	83 c1 01             	add    ecx,0x1
c0015e4d:	83 f9 10             	cmp    ecx,0x10
c0015e50:	89 c2                	mov    edx,eax
c0015e52:	75 ec                	jne    c0015e40 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e54:	31 db                	xor    ebx,ebx
c0015e56:	89 d8                	mov    eax,ebx
c0015e58:	5b                   	pop    ebx
c0015e59:	5e                   	pop    esi
c0015e5a:	5f                   	pop    edi
c0015e5b:	c3                   	ret    
c0015e5c:	b8 01 00 00 00       	mov    eax,0x1
c0015e61:	d3 e0                	shl    eax,cl
c0015e63:	09 c6                	or     esi,eax
c0015e65:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e6c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015e6f:	c1 e0 05             	shl    eax,0x5
c0015e72:	29 c8                	sub    eax,ecx
c0015e74:	01 d8                	add    eax,ebx
c0015e76:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e7d:	75 0d                	jne    c0015e8c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e7f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e89:	8d 76 00             	lea    esi,[esi+0x0]
c0015e8c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e92:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015e95:	83 ec 0c             	sub    esp,0xc
c0015e98:	c1 e6 05             	shl    esi,0x5
c0015e9b:	29 ce                	sub    esi,ecx
c0015e9d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ea0:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015ea3:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ea9:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015eaf:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015eb5:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015ebc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015ec2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ec6:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ecc:	89 ca                	mov    edx,ecx
c0015ece:	f7 da                	neg    edx
c0015ed0:	c1 e2 15             	shl    edx,0x15
c0015ed3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015ed9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015edf:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015ee3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015eed:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015ef3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ef7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015efd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f07:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f11:	68 00 01 00 00       	push   0x100
c0015f16:	e8 b8 1b ff ff       	call   c0007ad3 <malloc>
c0015f1b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015f1e:	58                   	pop    eax
c0015f1f:	5a                   	pop    edx
c0015f20:	53                   	push   ebx
c0015f21:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f26:	e8 b5 9e 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f2b:	83 c4 10             	add    esp,0x10
c0015f2e:	89 d8                	mov    eax,ebx
c0015f30:	5b                   	pop    ebx
c0015f31:	5e                   	pop    esi
c0015f32:	5f                   	pop    edi
c0015f33:	c3                   	ret    

c0015f34 <Process::createUserThread()>:
c0015f34:	83 ec 0c             	sub    esp,0xc
c0015f37:	68 80 00 00 00       	push   0x80
c0015f3c:	6a 00                	push   0x0
c0015f3e:	68 88 58 01 c0       	push   0xc0015888
c0015f43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f47:	50                   	push   eax
c0015f48:	e8 df fe ff ff       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c0015f4d:	83 c4 1c             	add    esp,0x1c
c0015f50:	c3                   	ret    
c0015f51:	8d 76 00             	lea    esi,[esi+0x0]

c0015f54 <setupMultitasking(void (*)())>:
c0015f54:	56                   	push   esi
c0015f55:	53                   	push   ebx
c0015f56:	83 ec 04             	sub    esp,0x4
c0015f59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f5d:	eb 11                	jmp    c0015f70 <setupMultitasking(void (*)())+0x1c>
c0015f5f:	90                   	nop
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f68:	e8 b7 9d 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f78:	e8 83 9d 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f7d:	83 c4 10             	add    esp,0x10
c0015f80:	84 c0                	test   al,al
c0015f82:	74 dc                	je     c0015f60 <setupMultitasking(void (*)())+0xc>
c0015f84:	83 ec 0c             	sub    esp,0xc
c0015f87:	68 24 07 00 00       	push   0x724
c0015f8c:	e8 42 1b ff ff       	call   c0007ad3 <malloc>
c0015f91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f98:	6a 00                	push   0x0
c0015f9a:	68 01 29 02 c0       	push   0xc0022901
c0015f9f:	6a 01                	push   0x1
c0015fa1:	50                   	push   eax
c0015fa2:	89 c3                	mov    ebx,eax
c0015fa4:	e8 5f fc ff ff       	call   c0015c08 <Process::Process(bool, char const*, Process*, char**)>
c0015fa9:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015faf:	83 c4 14             	add    esp,0x14
c0015fb2:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015fb8:	50                   	push   eax
c0015fb9:	e8 b1 27 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015fbe:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015fc5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015fcf:	83 c8 01             	or     eax,0x1
c0015fd2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015fd9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fdf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015fe2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015fec:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015ff2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015ffc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016002:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001600c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016016:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001601c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016022:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001602c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016036:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001603d:	e8 91 1a ff ff       	call   c0007ad3 <malloc>
c0016042:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016048:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001604e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016054:	5a                   	pop    edx
c0016055:	59                   	pop    ecx
c0016056:	68 fd 28 02 c0       	push   0xc00228fd
c001605b:	50                   	push   eax
c001605c:	e8 ef a5 fe ff       	call   c0000650 <strcpy>
c0016061:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016068:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001606c:	83 c4 14             	add    esp,0x14
c001606f:	5b                   	pop    ebx
c0016070:	5e                   	pop    esi
c0016071:	e9 f3 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016076:	66 90                	xchg   ax,ax

c0016078 <schedule()>:
c0016078:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001607e:	85 d2                	test   edx,edx
c0016080:	74 0e                	je     c0016090 <schedule()+0x18>
c0016082:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001608c:	c3                   	ret    
c001608d:	8d 76 00             	lea    esi,[esi+0x0]
c0016090:	53                   	push   ebx
c0016091:	83 ec 14             	sub    esp,0x14
c0016094:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016099:	e8 62 9c 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	84 c0                	test   al,al
c00160a3:	75 3f                	jne    c00160e4 <schedule()+0x6c>
c00160a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160ad:	83 fa 01             	cmp    edx,0x1
c00160b0:	74 3a                	je     c00160ec <schedule()+0x74>
c00160b2:	66 90                	xchg   ax,ax
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160bc:	e8 5b 9c 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160c1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00160c8:	89 c3                	mov    ebx,eax
c00160ca:	e8 55 9c 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160cf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00160d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160d9:	e8 02 f8 ff ff       	call   c00158e0 <switchToThread(ThreadControlBlock*)>
c00160de:	83 c4 10             	add    esp,0x10
c00160e1:	8d 76 00             	lea    esi,[esi+0x0]
c00160e4:	83 c4 08             	add    esp,0x8
c00160e7:	5b                   	pop    ebx
c00160e8:	c3                   	ret    
c00160e9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00160f3:	83 ec 08             	sub    esp,0x8
c00160f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160fb:	50                   	push   eax
c00160fc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016101:	e8 da 9c 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016106:	83 c4 10             	add    esp,0x10
c0016109:	eb a9                	jmp    c00160b4 <schedule()+0x3c>
c001610b:	90                   	nop

c001610c <Semaphore::tryAcquire()>:
c001610c:	53                   	push   ebx
c001610d:	83 ec 08             	sub    esp,0x8
c0016110:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016114:	fa                   	cli    
c0016115:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001611b:	8d 42 01             	lea    eax,[edx+0x1]
c001611e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016123:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016128:	8d 58 01             	lea    ebx,[eax+0x1]
c001612b:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016131:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016134:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016136:	7c 2c                	jl     c0016164 <Semaphore::tryAcquire()+0x58>
c0016138:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001613d:	85 c0                	test   eax,eax
c001613f:	75 0b                	jne    c001614c <Semaphore::tryAcquire()+0x40>
c0016141:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016146:	85 c0                	test   eax,eax
c0016148:	75 5a                	jne    c00161a4 <Semaphore::tryAcquire()+0x98>
c001614a:	66 90                	xchg   ax,ax
c001614c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016152:	31 c0                	xor    eax,eax
c0016154:	85 d2                	test   edx,edx
c0016156:	75 04                	jne    c001615c <Semaphore::tryAcquire()+0x50>
c0016158:	fb                   	sti    
c0016159:	8d 76 00             	lea    esi,[esi+0x0]
c001615c:	83 c4 08             	add    esp,0x8
c001615f:	5b                   	pop    ebx
c0016160:	c3                   	ret    
c0016161:	8d 76 00             	lea    esi,[esi+0x0]
c0016164:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016169:	83 c3 01             	add    ebx,0x1
c001616c:	85 c0                	test   eax,eax
c001616e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016171:	75 21                	jne    c0016194 <Semaphore::tryAcquire()+0x88>
c0016173:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016179:	85 c9                	test   ecx,ecx
c001617b:	74 17                	je     c0016194 <Semaphore::tryAcquire()+0x88>
c001617d:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016187:	e8 ec fe ff ff       	call   c0016078 <schedule()>
c001618c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016191:	8d 50 ff             	lea    edx,[eax-0x1]
c0016194:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001619a:	85 d2                	test   edx,edx
c001619c:	b0 01                	mov    al,0x1
c001619e:	75 bc                	jne    c001615c <Semaphore::tryAcquire()+0x50>
c00161a0:	eb b6                	jmp    c0016158 <Semaphore::tryAcquire()+0x4c>
c00161a2:	66 90                	xchg   ax,ax
c00161a4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161ae:	e8 c5 fe ff ff       	call   c0016078 <schedule()>
c00161b3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161b8:	8d 50 ff             	lea    edx,[eax-0x1]
c00161bb:	31 c0                	xor    eax,eax
c00161bd:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161c3:	85 d2                	test   edx,edx
c00161c5:	75 95                	jne    c001615c <Semaphore::tryAcquire()+0x50>
c00161c7:	eb 8f                	jmp    c0016158 <Semaphore::tryAcquire()+0x4c>
c00161c9:	90                   	nop
c00161ca:	66 90                	xchg   ax,ax

c00161cc <Semaphore::assertLocked(char const*)>:
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161d3:	fa                   	cli    
c00161d4:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00161da:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161df:	83 c1 01             	add    ecx,0x1
c00161e2:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00161e8:	8d 48 01             	lea    ecx,[eax+0x1]
c00161eb:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00161f1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00161f3:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00161f6:	7c 28                	jl     c0016220 <Semaphore::assertLocked(char const*)+0x54>
c00161f8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161fd:	85 c0                	test   eax,eax
c00161ff:	75 0b                	jne    c001620c <Semaphore::assertLocked(char const*)+0x40>
c0016201:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016206:	85 c0                	test   eax,eax
c0016208:	75 32                	jne    c001623c <Semaphore::assertLocked(char const*)+0x70>
c001620a:	66 90                	xchg   ax,ax
c001620c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016211:	83 e8 01             	sub    eax,0x1
c0016214:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016219:	75 01                	jne    c001621c <Semaphore::assertLocked(char const*)+0x50>
c001621b:	fb                   	sti    
c001621c:	83 c4 0c             	add    esp,0xc
c001621f:	c3                   	ret    
c0016220:	83 ec 0c             	sub    esp,0xc
c0016223:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016227:	52                   	push   edx
c0016228:	e8 3a b3 ff ff       	call   c0011567 <KePanic(char const*)>
c001622d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	83 e8 01             	sub    eax,0x1
c0016238:	eb be                	jmp    c00161f8 <Semaphore::assertLocked(char const*)+0x2c>
c001623a:	66 90                	xchg   ax,ax
c001623c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016246:	e8 2d fe ff ff       	call   c0016078 <schedule()>
c001624b:	eb bf                	jmp    c001620c <Semaphore::assertLocked(char const*)+0x40>
c001624d:	8d 76 00             	lea    esi,[esi+0x0]

c0016250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016250:	83 ec 0c             	sub    esp,0xc
c0016253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016258:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001625c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001625f:	e8 14 fe ff ff       	call   c0016078 <schedule()>
c0016264:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016269:	83 e8 01             	sub    eax,0x1
c001626c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016271:	75 01                	jne    c0016274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016273:	fb                   	sti    
c0016274:	83 c4 0c             	add    esp,0xc
c0016277:	c3                   	ret    

c0016278 <blockTask(TaskState)>:
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	fa                   	cli    
c001627c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016285:	83 c0 01             	add    eax,0x1
c0016288:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001628d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016292:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016295:	e8 de fd ff ff       	call   c0016078 <schedule()>
c001629a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001629f:	83 e8 01             	sub    eax,0x1
c00162a2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162a7:	75 03                	jne    c00162ac <blockTask(TaskState)+0x34>
c00162a9:	fb                   	sti    
c00162aa:	66 90                	xchg   ax,ax
c00162ac:	83 c4 0c             	add    esp,0xc
c00162af:	c3                   	ret    

c00162b0 <waitTask(int, int*, int)>:
c00162b0:	83 ec 18             	sub    esp,0x18
c00162b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162bc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00162bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00162cb:	6a 07                	push   0x7
c00162cd:	e8 a6 ff ff ff       	call   c0016278 <blockTask(TaskState)>
c00162d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d7:	83 c4 10             	add    esp,0x10
c00162da:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00162dd:	85 d2                	test   edx,edx
c00162df:	74 0b                	je     c00162ec <waitTask(int, int*, int)+0x3c>
c00162e1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00162e4:	89 02                	mov    DWORD PTR [edx],eax
c00162e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162eb:	90                   	nop
c00162ec:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00162ef:	83 c4 0c             	add    esp,0xc
c00162f2:	c3                   	ret    
c00162f3:	90                   	nop

c00162f4 <milliTenthSleepUntil(unsigned int)>:
c00162f4:	83 ec 0c             	sub    esp,0xc
c00162f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fb:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016301:	76 05                	jbe    c0016308 <milliTenthSleepUntil(unsigned int)+0x14>
c0016303:	90                   	nop
c0016304:	83 c4 0c             	add    esp,0xc
c0016307:	c3                   	ret    
c0016308:	fa                   	cli    
c0016309:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001630f:	83 ec 08             	sub    esp,0x8
c0016312:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016318:	83 c2 01             	add    edx,0x1
c001631b:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016321:	83 c1 01             	add    ecx,0x1
c0016324:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001632a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016330:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016338:	50                   	push   eax
c0016339:	68 d8 c6 02 c0       	push   0xc002c6d8
c001633e:	e8 9d 9a 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016343:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001634a:	e8 29 ff ff ff       	call   c0016278 <blockTask(TaskState)>
c001634f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	83 e8 01             	sub    eax,0x1
c001635a:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001635f:	85 c0                	test   eax,eax
c0016361:	75 09                	jne    c001636c <milliTenthSleepUntil(unsigned int)+0x78>
c0016363:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016368:	85 c0                	test   eax,eax
c001636a:	75 14                	jne    c0016380 <milliTenthSleepUntil(unsigned int)+0x8c>
c001636c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016371:	83 e8 01             	sub    eax,0x1
c0016374:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016379:	75 89                	jne    c0016304 <milliTenthSleepUntil(unsigned int)+0x10>
c001637b:	fb                   	sti    
c001637c:	83 c4 0c             	add    esp,0xc
c001637f:	c3                   	ret    
c0016380:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001638a:	e8 e9 fc ff ff       	call   c0016078 <schedule()>
c001638f:	eb db                	jmp    c001636c <milliTenthSleepUntil(unsigned int)+0x78>
c0016391:	8d 76 00             	lea    esi,[esi+0x0]

c0016394 <milliTenthSleep(unsigned int)>:
c0016394:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016398:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c001639d:	01 c2                	add    edx,eax
c001639f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163a3:	e9 4c ff ff ff       	jmp    c00162f4 <milliTenthSleepUntil(unsigned int)>

c00163a8 <sleep(unsigned int)>:
c00163a8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00163b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163b4:	eb de                	jmp    c0016394 <milliTenthSleep(unsigned int)>
c00163b6:	66 90                	xchg   ax,ax

c00163b8 <Semaphore::acquire()>:
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163bf:	fa                   	cli    
c00163c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163c5:	83 c0 01             	add    eax,0x1
c00163c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163cd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163d2:	8d 48 01             	lea    ecx,[eax+0x1]
c00163d5:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163db:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00163de:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00163e0:	7d 2e                	jge    c0016410 <Semaphore::acquire()+0x58>
c00163e2:	83 c1 01             	add    ecx,0x1
c00163e5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00163e8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163ed:	85 c0                	test   eax,eax
c00163ef:	75 0b                	jne    c00163fc <Semaphore::acquire()+0x44>
c00163f1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163f6:	85 c0                	test   eax,eax
c00163f8:	75 66                	jne    c0016460 <Semaphore::acquire()+0xa8>
c00163fa:	66 90                	xchg   ax,ax
c00163fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016401:	83 e8 01             	sub    eax,0x1
c0016404:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016409:	75 01                	jne    c001640c <Semaphore::acquire()+0x54>
c001640b:	fb                   	sti    
c001640c:	83 c4 0c             	add    esp,0xc
c001640f:	c3                   	ret    
c0016410:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016415:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001641c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001641f:	85 c9                	test   ecx,ecx
c0016421:	74 51                	je     c0016474 <Semaphore::acquire()+0xbc>
c0016423:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016426:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001642c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001642f:	90                   	nop
c0016430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016435:	83 ec 0c             	sub    esp,0xc
c0016438:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001643b:	68 80 29 02 c0       	push   0xc0022980
c0016440:	e8 c5 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016445:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001644c:	e8 27 fe ff ff       	call   c0016278 <blockTask(TaskState)>
c0016451:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016456:	83 c4 10             	add    esp,0x10
c0016459:	83 e8 01             	sub    eax,0x1
c001645c:	eb 8a                	jmp    c00163e8 <Semaphore::acquire()+0x30>
c001645e:	66 90                	xchg   ax,ax
c0016460:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001646a:	e8 09 fc ff ff       	call   c0016078 <schedule()>
c001646f:	eb 8b                	jmp    c00163fc <Semaphore::acquire()+0x44>
c0016471:	8d 76 00             	lea    esi,[esi+0x0]
c0016474:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016479:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001647c:	eb b2                	jmp    c0016430 <Semaphore::acquire()+0x78>
c001647e:	66 90                	xchg   ax,ax

c0016480 <taskReturned>:
c0016480:	83 ec 18             	sub    esp,0x18
c0016483:	68 a0 29 02 c0       	push   0xc00229a0
c0016488:	e8 da b0 ff ff       	call   c0011567 <KePanic(char const*)>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	6a 02                	push   0x2
c0016495:	e8 de fd ff ff       	call   c0016278 <blockTask(TaskState)>
c001649a:	fa                   	cli    
c001649b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164a0:	83 c0 01             	add    eax,0x1
c00164a3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164a8:	e8 cb fb ff ff       	call   c0016078 <schedule()>
c00164ad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164b2:	83 c4 10             	add    esp,0x10
c00164b5:	83 e8 01             	sub    eax,0x1
c00164b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164bd:	85 c0                	test   eax,eax
c00164bf:	75 cf                	jne    c0016490 <taskReturned+0x10>
c00164c1:	fb                   	sti    
c00164c2:	eb cc                	jmp    c0016490 <taskReturned+0x10>

c00164c4 <Thr::processFromPID(int)>:
c00164c4:	57                   	push   edi
c00164c5:	56                   	push   esi
c00164c6:	53                   	push   ebx
c00164c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164cb:	fa                   	cli    
c00164cc:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00164d2:	83 ec 0c             	sub    esp,0xc
c00164d5:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164da:	83 c1 01             	add    ecx,0x1
c00164dd:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00164e3:	e8 34 98 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	89 c7                	mov    edi,eax
c00164ed:	eb 15                	jmp    c0016504 <Thr::processFromPID(int)+0x40>
c00164ef:	90                   	nop
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164f8:	e8 1f 98 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	39 f8                	cmp    eax,edi
c0016502:	74 50                	je     c0016554 <Thr::processFromPID(int)+0x90>
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	68 e4 c6 02 c0       	push   0xc002c6e4
c001650c:	e8 0b 98 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016511:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016518:	89 c3                	mov    ebx,eax
c001651a:	e8 05 98 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001651f:	58                   	pop    eax
c0016520:	5a                   	pop    edx
c0016521:	53                   	push   ebx
c0016522:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016527:	e8 b4 98 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001652c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	39 30                	cmp    DWORD PTR [eax],esi
c0016534:	75 ba                	jne    c00164f0 <Thr::processFromPID(int)+0x2c>
c0016536:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001653b:	83 e8 01             	sub    eax,0x1
c001653e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016543:	74 0b                	je     c0016550 <Thr::processFromPID(int)+0x8c>
c0016545:	8d 76 00             	lea    esi,[esi+0x0]
c0016548:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001654b:	90                   	nop
c001654c:	5b                   	pop    ebx
c001654d:	5e                   	pop    esi
c001654e:	5f                   	pop    edi
c001654f:	c3                   	ret    
c0016550:	fb                   	sti    
c0016551:	eb f5                	jmp    c0016548 <Thr::processFromPID(int)+0x84>
c0016553:	90                   	nop
c0016554:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016559:	8d 50 ff             	lea    edx,[eax-0x1]
c001655c:	31 c0                	xor    eax,eax
c001655e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016564:	85 d2                	test   edx,edx
c0016566:	75 e4                	jne    c001654c <Thr::processFromPID(int)+0x88>
c0016568:	fb                   	sti    
c0016569:	5b                   	pop    ebx
c001656a:	5e                   	pop    esi
c001656b:	5f                   	pop    edi
c001656c:	c3                   	ret    
c001656d:	8d 76 00             	lea    esi,[esi+0x0]

c0016570 <unblockTask(ThreadControlBlock*)>:
c0016570:	53                   	push   ebx
c0016571:	83 ec 08             	sub    esp,0x8
c0016574:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016578:	fa                   	cli    
c0016579:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001657e:	83 c0 01             	add    eax,0x1
c0016581:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016586:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016589:	85 c0                	test   eax,eax
c001658b:	74 67                	je     c00165f4 <unblockTask(ThreadControlBlock*)+0x84>
c001658d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016590:	83 f8 01             	cmp    eax,0x1
c0016593:	74 37                	je     c00165cc <unblockTask(ThreadControlBlock*)+0x5c>
c0016595:	83 ec 0c             	sub    esp,0xc
c0016598:	68 e4 c6 02 c0       	push   0xc002c6e4
c001659d:	e8 7a 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	85 c0                	test   eax,eax
c00165a7:	75 1b                	jne    c00165c4 <unblockTask(ThreadControlBlock*)+0x54>
c00165a9:	eb 5d                	jmp    c0016608 <unblockTask(ThreadControlBlock*)+0x98>
c00165ab:	90                   	nop
c00165ac:	83 ec 08             	sub    esp,0x8
c00165af:	50                   	push   eax
c00165b0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165b5:	e8 82 9a 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165ba:	83 c4 10             	add    esp,0x10
c00165bd:	85 c0                	test   eax,eax
c00165bf:	74 47                	je     c0016608 <unblockTask(ThreadControlBlock*)+0x98>
c00165c1:	8d 76 00             	lea    esi,[esi+0x0]
c00165c4:	39 c3                	cmp    ebx,eax
c00165c6:	75 e4                	jne    c00165ac <unblockTask(ThreadControlBlock*)+0x3c>
c00165c8:	eb 12                	jmp    c00165dc <unblockTask(ThreadControlBlock*)+0x6c>
c00165ca:	66 90                	xchg   ax,ax
c00165cc:	83 ec 0c             	sub    esp,0xc
c00165cf:	68 1f 29 02 c0       	push   0xc002291f
c00165d4:	e8 31 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00165d9:	83 c4 10             	add    esp,0x10
c00165dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165e1:	83 e8 01             	sub    eax,0x1
c00165e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165e9:	75 01                	jne    c00165ec <unblockTask(ThreadControlBlock*)+0x7c>
c00165eb:	fb                   	sti    
c00165ec:	83 c4 08             	add    esp,0x8
c00165ef:	5b                   	pop    ebx
c00165f0:	c3                   	ret    
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	68 08 29 02 c0       	push   0xc0022908
c00165fc:	e8 09 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016601:	83 c4 10             	add    esp,0x10
c0016604:	eb d6                	jmp    c00165dc <unblockTask(ThreadControlBlock*)+0x6c>
c0016606:	66 90                	xchg   ax,ax
c0016608:	83 ec 08             	sub    esp,0x8
c001660b:	53                   	push   ebx
c001660c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016611:	e8 ca 97 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016616:	83 c4 10             	add    esp,0x10
c0016619:	eb c1                	jmp    c00165dc <unblockTask(ThreadControlBlock*)+0x6c>
c001661b:	90                   	nop

c001661c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001661c:	55                   	push   ebp
c001661d:	57                   	push   edi
c001661e:	56                   	push   esi
c001661f:	53                   	push   ebx
c0016620:	83 ec 1c             	sub    esp,0x1c
c0016623:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016627:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001662a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016630:	85 ed                	test   ebp,ebp
c0016632:	7e 28                	jle    c001665c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016634:	31 f6                	xor    esi,esi
c0016636:	66 90                	xchg   ax,ax
c0016638:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001663f:	83 ec 0c             	sub    esp,0xc
c0016642:	83 c6 01             	add    esi,0x1
c0016645:	57                   	push   edi
c0016646:	e8 98 14 ff ff       	call   c0007ae3 <free>
c001664b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016657:	7f df                	jg     c0016638 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016659:	8d 76 00             	lea    esi,[esi+0x0]
c001665c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016666:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001666b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001666e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016671:	d3 c0                	rol    eax,cl
c0016673:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001667a:	21 c8                	and    eax,ecx
c001667c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016683:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016686:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001668e:	89 f7                	mov    edi,esi
c0016690:	0f 85 72 01 00 00    	jne    c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016696:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001669c:	85 ed                	test   ebp,ebp
c001669e:	74 1c                	je     c00166bc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	55                   	push   ebp
c00166a4:	e8 cf ab ff ff       	call   c0011278 <EnvVarContainer::~EnvVarContainer()>
c00166a9:	59                   	pop    ecx
c00166aa:	5e                   	pop    esi
c00166ab:	6a 0c                	push   0xc
c00166ad:	55                   	push   ebp
c00166ae:	e8 59 41 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00166b3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	89 f7                	mov    edi,esi
c00166bb:	90                   	nop
c00166bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166c2:	85 c0                	test   eax,eax
c00166c4:	0f 84 b2 00 00 00    	je     c001677c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166ca:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166d1:	31 c9                	xor    ecx,ecx
c00166d3:	eb 17                	jmp    c00166ec <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00166d5:	8d 76 00             	lea    esi,[esi+0x0]
c00166d8:	83 c1 01             	add    ecx,0x1
c00166db:	83 f9 10             	cmp    ecx,0x10
c00166de:	0f 84 98 00 00 00    	je     c001677c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00166f3:	d3 fa                	sar    edx,cl
c00166f5:	80 e2 01             	and    dl,0x1
c00166f8:	74 de                	je     c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166fa:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00166fd:	c1 e2 05             	shl    edx,0x5
c0016700:	29 ca                	sub    edx,ecx
c0016702:	01 d0                	add    eax,edx
c0016704:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001670a:	83 fd 07             	cmp    ebp,0x7
c001670d:	75 c9                	jne    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001670f:	05 40 02 00 00       	add    eax,0x240
c0016714:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016717:	83 fd ff             	cmp    ebp,0xffffffff
c001671a:	0f 8c f0 00 00 00    	jl     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016720:	0f 84 ae 01 00 00    	je     c00168d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016726:	85 ed                	test   ebp,ebp
c0016728:	0f 84 92 01 00 00    	je     c00168c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001672e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016730:	75 a6                	jne    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016732:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016736:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001673c:	01 d0                	add    eax,edx
c001673e:	66 90                	xchg   ax,ax
c0016740:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001674d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016750:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016756:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001675d:	50                   	push   eax
c001675e:	e8 0d fe ff ff       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016769:	89 f7                	mov    edi,esi
c001676b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001676f:	83 c1 01             	add    ecx,0x1
c0016772:	83 f9 10             	cmp    ecx,0x10
c0016775:	0f 85 69 ff ff ff    	jne    c00166e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001677b:	90                   	nop
c001677c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016782:	85 c0                	test   eax,eax
c0016784:	74 62                	je     c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016786:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001678c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016792:	74 54                	je     c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	68 e4 c6 02 c0       	push   0xc002c6e4
c001679c:	e8 7b 95 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167a1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167a8:	89 c7                	mov    edi,eax
c00167aa:	e8 51 95 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167af:	83 c4 10             	add    esp,0x10
c00167b2:	84 c0                	test   al,al
c00167b4:	0f 84 ce 00 00 00    	je     c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167bf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167c5:	85 d2                	test   edx,edx
c00167c7:	74 0f                	je     c00167d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00167c9:	8b 02                	mov    eax,DWORD PTR [edx]
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	52                   	push   edx
c00167cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167d2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167d5:	83 c4 10             	add    esp,0x10
c00167d8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00167e2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00167e5:	8d 76 00             	lea    esi,[esi+0x0]
c00167e8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00167ee:	85 db                	test   ebx,ebx
c00167f0:	74 16                	je     c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167f2:	83 ec 0c             	sub    esp,0xc
c00167f5:	53                   	push   ebx
c00167f6:	e8 95 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c00167fb:	58                   	pop    eax
c00167fc:	5a                   	pop    edx
c00167fd:	6a 14                	push   0x14
c00167ff:	53                   	push   ebx
c0016800:	e8 07 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	83 c4 1c             	add    esp,0x1c
c001680b:	5b                   	pop    ebx
c001680c:	5e                   	pop    esi
c001680d:	5f                   	pop    edi
c001680e:	5d                   	pop    ebp
c001680f:	c3                   	ret    
c0016810:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016814:	83 ec 0c             	sub    esp,0xc
c0016817:	68 d4 29 02 c0       	push   0xc00229d4
c001681c:	e8 46 ad ff ff       	call   c0011567 <KePanic(char const*)>
c0016821:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016824:	83 c4 10             	add    esp,0x10
c0016827:	89 f7                	mov    edi,esi
c0016829:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001682d:	e9 a6 fe ff ff       	jmp    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016832:	66 90                	xchg   ax,ax
c0016834:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001683a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016840:	75 1e                	jne    c0016860 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	68 3c 2a 02 c0       	push   0xc0022a3c
c001684a:	e8 bb 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001684f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016856:	e8 1d fa ff ff       	call   c0016278 <blockTask(TaskState)>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	66 90                	xchg   ax,ax
c0016860:	83 ec 08             	sub    esp,0x8
c0016863:	56                   	push   esi
c0016864:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016869:	e8 72 95 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001686e:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016875:	e8 a2 94 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001687a:	83 c4 10             	add    esp,0x10
c001687d:	39 f8                	cmp    eax,edi
c001687f:	0f 84 37 ff ff ff    	je     c00167bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016885:	8d 76 00             	lea    esi,[esi+0x0]
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016890:	e8 87 94 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016895:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001689c:	89 c6                	mov    esi,eax
c001689e:	e8 81 94 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	39 f3                	cmp    ebx,esi
c00168a8:	74 b6                	je     c0016860 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168aa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168b0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168b6:	75 a8                	jne    c0016860 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168b8:	e9 77 ff ff ff       	jmp    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168bd:	8d 76 00             	lea    esi,[esi+0x0]
c00168c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168c4:	83 ec 0c             	sub    esp,0xc
c00168c7:	68 08 2a 02 c0       	push   0xc0022a08
c00168cc:	e9 4b ff ff ff       	jmp    c001681c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00168d1:	8d 76 00             	lea    esi,[esi+0x0]
c00168d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168d8:	8b 36                	mov    esi,DWORD PTR [esi]
c00168da:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00168dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168e0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00168e6:	01 d7                	add    edi,edx
c00168e8:	89 f8                	mov    eax,edi
c00168ea:	e9 51 fe ff ff       	jmp    c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00168ef:	90                   	nop

c00168f0 <cleanerTaskFunction(void*)>:
c00168f0:	53                   	push   ebx
c00168f1:	83 ec 08             	sub    esp,0x8
c00168f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168f9:	83 e8 01             	sub    eax,0x1
c00168fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016901:	75 01                	jne    c0016904 <cleanerTaskFunction(void*)+0x14>
c0016903:	fb                   	sti    
c0016904:	fa                   	cli    
c0016905:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001690a:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016911:	8d 50 01             	lea    edx,[eax+0x1]
c0016914:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001691a:	0f 84 c4 00 00 00    	je     c00169e4 <cleanerTaskFunction(void*)+0xf4>
c0016920:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016925:	85 c0                	test   eax,eax
c0016927:	75 03                	jne    c001692c <cleanerTaskFunction(void*)+0x3c>
c0016929:	fb                   	sti    
c001692a:	66 90                	xchg   ax,ax
c001692c:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016933:	fa                   	cli    
c0016934:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001693a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016940:	83 c2 01             	add    edx,0x1
c0016943:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016949:	83 c1 01             	add    ecx,0x1
c001694c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016952:	fa                   	cli    
c0016953:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016959:	83 c3 01             	add    ebx,0x1
c001695c:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016962:	eb 28                	jmp    c001698c <cleanerTaskFunction(void*)+0x9c>
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	68 cc c6 02 c0       	push   0xc002c6cc
c001696c:	e8 ab 93 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016971:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016978:	89 c3                	mov    ebx,eax
c001697a:	e8 a5 93 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001697f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016982:	e8 95 fc ff ff       	call   c001661c <cleanupTerminatedTask(ThreadControlBlock*)>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	66 90                	xchg   ax,ax
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016994:	e8 67 93 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016999:	83 c4 10             	add    esp,0x10
c001699c:	84 c0                	test   al,al
c001699e:	74 c4                	je     c0016964 <cleanerTaskFunction(void*)+0x74>
c00169a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169a5:	83 e8 01             	sub    eax,0x1
c00169a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169ad:	75 01                	jne    c00169b0 <cleanerTaskFunction(void*)+0xc0>
c00169af:	fb                   	sti    
c00169b0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169b5:	83 e8 01             	sub    eax,0x1
c00169b8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169bd:	0f 85 31 ff ff ff    	jne    c00168f4 <cleanerTaskFunction(void*)+0x4>
c00169c3:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00169c8:	85 c0                	test   eax,eax
c00169ca:	0f 84 24 ff ff ff    	je     c00168f4 <cleanerTaskFunction(void*)+0x4>
c00169d0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00169da:	e8 99 f6 ff ff       	call   c0016078 <schedule()>
c00169df:	e9 10 ff ff ff       	jmp    c00168f4 <cleanerTaskFunction(void*)+0x4>
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	6a 02                	push   0x2
c00169e9:	e8 62 f8 ff ff       	call   c0016250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169ee:	83 c4 10             	add    esp,0x10
c00169f1:	e9 36 ff ff ff       	jmp    c001692c <cleanerTaskFunction(void*)+0x3c>
c00169f6:	66 90                	xchg   ax,ax

c00169f8 <terminateTask(int)>:
c00169f8:	83 ec 14             	sub    esp,0x14
c00169fb:	fa                   	cli    
c00169fc:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a02:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a08:	83 c2 01             	add    edx,0x1
c0016a0b:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a11:	83 c1 01             	add    ecx,0x1
c0016a14:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a1a:	fa                   	cli    
c0016a1b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a24:	83 c0 01             	add    eax,0x1
c0016a27:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a31:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a39:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a3c:	50                   	push   eax
c0016a3d:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a42:	e8 99 93 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a4c:	83 c4 10             	add    esp,0x10
c0016a4f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a56:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a5b:	85 c0                	test   eax,eax
c0016a5d:	74 65                	je     c0016ac4 <terminateTask(int)+0xcc>
c0016a5f:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a66:	83 ec 0c             	sub    esp,0xc
c0016a69:	50                   	push   eax
c0016a6a:	e8 01 fb ff ff       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c0016a6f:	83 c4 10             	add    esp,0x10
c0016a72:	66 90                	xchg   ax,ax
c0016a74:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a79:	83 e8 01             	sub    eax,0x1
c0016a7c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a81:	75 01                	jne    c0016a84 <terminateTask(int)+0x8c>
c0016a83:	fb                   	sti    
c0016a84:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a89:	83 e8 01             	sub    eax,0x1
c0016a8c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a91:	75 09                	jne    c0016a9c <terminateTask(int)+0xa4>
c0016a93:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016a9a:	75 3c                	jne    c0016ad8 <terminateTask(int)+0xe0>
c0016a9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aa1:	83 e8 01             	sub    eax,0x1
c0016aa4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa9:	75 01                	jne    c0016aac <terminateTask(int)+0xb4>
c0016aab:	fb                   	sti    
c0016aac:	fa                   	cli    
c0016aad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ab2:	83 c0 01             	add    eax,0x1
c0016ab5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aba:	66 90                	xchg   ax,ax
c0016abc:	e8 b7 f5 ff ff       	call   c0016078 <schedule()>
c0016ac1:	eb d9                	jmp    c0016a9c <terminateTask(int)+0xa4>
c0016ac3:	90                   	nop
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	68 36 29 02 c0       	push   0xc0022936
c0016acc:	e8 39 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016ad1:	83 c4 10             	add    esp,0x10
c0016ad4:	eb 9e                	jmp    c0016a74 <terminateTask(int)+0x7c>
c0016ad6:	66 90                	xchg   ax,ax
c0016ad8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ae2:	eb d8                	jmp    c0016abc <terminateTask(int)+0xc4>

c0016ae4 <Thr::terminateFromIRQ(int)>:
c0016ae4:	83 ec 18             	sub    esp,0x18
c0016ae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aeb:	50                   	push   eax
c0016aec:	e8 07 ff ff ff       	call   c00169f8 <terminateTask(int)>
c0016af1:	90                   	nop
c0016af2:	66 90                	xchg   ax,ax

c0016af4 <Semaphore::release()>:
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016afb:	fa                   	cli    
c0016afc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b01:	83 c0 01             	add    eax,0x1
c0016b04:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b09:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b11:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b17:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b1a:	85 c9                	test   ecx,ecx
c0016b1c:	74 42                	je     c0016b60 <Semaphore::release()+0x6c>
c0016b1e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b21:	83 ec 0c             	sub    esp,0xc
c0016b24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b27:	51                   	push   ecx
c0016b28:	e8 43 fa ff ff       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c0016b2d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b32:	83 c4 10             	add    esp,0x10
c0016b35:	83 e8 01             	sub    eax,0x1
c0016b38:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b3d:	85 c0                	test   eax,eax
c0016b3f:	75 0b                	jne    c0016b4c <Semaphore::release()+0x58>
c0016b41:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b46:	85 c0                	test   eax,eax
c0016b48:	75 22                	jne    c0016b6c <Semaphore::release()+0x78>
c0016b4a:	66 90                	xchg   ax,ax
c0016b4c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b51:	83 e8 01             	sub    eax,0x1
c0016b54:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b59:	75 01                	jne    c0016b5c <Semaphore::release()+0x68>
c0016b5b:	fb                   	sti    
c0016b5c:	83 c4 0c             	add    esp,0xc
c0016b5f:	c3                   	ret    
c0016b60:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b63:	83 e9 01             	sub    ecx,0x1
c0016b66:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b69:	eb cd                	jmp    c0016b38 <Semaphore::release()+0x44>
c0016b6b:	90                   	nop
c0016b6c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b76:	e8 fd f4 ff ff       	call   c0016078 <schedule()>
c0016b7b:	eb cf                	jmp    c0016b4c <Semaphore::release()+0x58>
c0016b7d:	8d 76 00             	lea    esi,[esi+0x0]

c0016b80 <__static_initialization_and_destruction_0(int, int)>:
c0016b80:	83 ec 0c             	sub    esp,0xc
c0016b83:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b88:	0f 85 8e 00 00 00    	jne    c0016c1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b8e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b96:	0f 85 80 00 00 00    	jne    c0016c1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b9c:	83 ec 0c             	sub    esp,0xc
c0016b9f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016ba4:	e8 eb 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ba9:	83 c4 10             	add    esp,0x10
c0016bac:	83 ec 04             	sub    esp,0x4
c0016baf:	68 0c 36 02 c0       	push   0xc002360c
c0016bb4:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016bb9:	68 44 00 02 c0       	push   0xc0020044
c0016bbe:	e8 f9 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	83 ec 0c             	sub    esp,0xc
c0016bc9:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bce:	e8 c1 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	83 ec 04             	sub    esp,0x4
c0016bd9:	68 0c 36 02 c0       	push   0xc002360c
c0016bde:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016be3:	68 44 00 02 c0       	push   0xc0020044
c0016be8:	e8 cf 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016bed:	83 c4 10             	add    esp,0x10
c0016bf0:	83 ec 0c             	sub    esp,0xc
c0016bf3:	68 cc c6 02 c0       	push   0xc002c6cc
c0016bf8:	e8 97 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bfd:	83 c4 10             	add    esp,0x10
c0016c00:	83 ec 04             	sub    esp,0x4
c0016c03:	68 0c 36 02 c0       	push   0xc002360c
c0016c08:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c0d:	68 44 00 02 c0       	push   0xc0020044
c0016c12:	e8 a5 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016c17:	83 c4 10             	add    esp,0x10
c0016c1a:	66 90                	xchg   ax,ax
c0016c1c:	90                   	nop
c0016c1d:	83 c4 0c             	add    esp,0xc
c0016c20:	c3                   	ret    
c0016c21:	8d 76 00             	lea    esi,[esi+0x0]

c0016c24 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	83 ec 08             	sub    esp,0x8
c0016c2a:	68 ff ff 00 00       	push   0xffff
c0016c2f:	6a 01                	push   0x1
c0016c31:	e8 4a ff ff ff       	call   c0016b80 <__static_initialization_and_destruction_0(int, int)>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	83 c4 0c             	add    esp,0xc
c0016c3c:	c3                   	ret    

c0016c3d <Vm::inbv(unsigned short)>:
c0016c3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c41:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c46:	75 06                	jne    c0016c4e <Vm::inbv(unsigned short)+0x11>
c0016c48:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c4d:	c3                   	ret    
c0016c4e:	ec                   	in     al,dx
c0016c4f:	c3                   	ret    

c0016c50 <Vm::outbv(unsigned short, unsigned char)>:
c0016c50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c58:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c5d:	75 25                	jne    c0016c84 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c5f:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c65:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c6b:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c6e:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016c74:	83 fa 20             	cmp    edx,0x20
c0016c77:	75 0c                	jne    c0016c85 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c79:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016c83:	c3                   	ret    
c0016c84:	ee                   	out    dx,al
c0016c85:	c3                   	ret    

c0016c86 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c90:	c1 e0 04             	shl    eax,0x4
c0016c93:	01 d0                	add    eax,edx
c0016c95:	c3                   	ret    

c0016c96 <Vm::getSegment(unsigned int)>:
c0016c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9a:	c1 e8 10             	shr    eax,0x10
c0016c9d:	c3                   	ret    

c0016c9e <Vm::getOffset(unsigned int)>:
c0016c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ca2:	c3                   	ret    

c0016ca3 <Vm::mainloop2()>:
c0016ca3:	83 ec 18             	sub    esp,0x18
c0016ca6:	fa                   	cli    
c0016ca7:	6a 02                	push   0x2
c0016ca9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016caf:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016cb6:	e8 95 f5 ff ff       	call   c0016250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016cc4:	52                   	push   edx
c0016cc5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016cc9:	52                   	push   edx
c0016cca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016cce:	52                   	push   edx
c0016ccf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016cd3:	50                   	push   eax
c0016cd4:	e8 36 95 fe ff       	call   c000020f <goToVM86>
c0016cd9:	83 c4 2c             	add    esp,0x2c
c0016cdc:	c3                   	ret    

c0016cdd <Vm::mainVm8086Loop(void*)>:
c0016cdd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ce2:	48                   	dec    eax
c0016ce3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ce8:	75 01                	jne    c0016ceb <Vm::mainVm8086Loop(void*)+0xe>
c0016cea:	fb                   	sti    
c0016ceb:	eb b6                	jmp    c0016ca3 <Vm::mainloop2()>

c0016ced <Vm::mainloop3(unsigned long)>:
c0016ced:	83 ec 18             	sub    esp,0x18
c0016cf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cf4:	fa                   	cli    
c0016cf5:	6a 02                	push   0x2
c0016cf7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cfd:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d04:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d09:	e8 42 f5 ff ff       	call   c0016250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d0e:	83 c4 1c             	add    esp,0x1c
c0016d11:	eb 90                	jmp    c0016ca3 <Vm::mainloop2()>

c0016d13 <Vm::initialise8086()>:
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	68 80 00 00 00       	push   0x80
c0016d1b:	6a 00                	push   0x0
c0016d1d:	68 dd 6c 01 c0       	push   0xc0016cdd
c0016d22:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d28:	e8 ff f0 ff ff       	call   c0015e2c <Process::createThread(void (*)(void*), void*, int)>
c0016d2d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d34:	68 00 01 00 00       	push   0x100
c0016d39:	6a 00                	push   0x0
c0016d3b:	6a 00                	push   0x0
c0016d3d:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d42:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d4d:	e8 b6 31 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d52:	83 c4 2c             	add    esp,0x2c
c0016d55:	c3                   	ret    

c0016d56 <Vm::finish8086()>:
c0016d56:	53                   	push   ebx
c0016d57:	83 ec 08             	sub    esp,0x8
c0016d5a:	fa                   	cli    
c0016d5b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d61:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d68:	75 15                	jne    c0016d7f <Vm::finish8086()+0x29>
c0016d6a:	e8 09 f3 ff ff       	call   c0016078 <schedule()>
c0016d6f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d74:	48                   	dec    eax
c0016d75:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d7a:	75 de                	jne    c0016d5a <Vm::finish8086()+0x4>
c0016d7c:	fb                   	sti    
c0016d7d:	eb db                	jmp    c0016d5a <Vm::finish8086()+0x4>
c0016d7f:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016d8f:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016d95:	e8 d6 f7 ff ff       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c0016d9a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	8d 50 ff             	lea    edx,[eax-0x1]
c0016da5:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016dab:	85 d2                	test   edx,edx
c0016dad:	75 01                	jne    c0016db0 <Vm::finish8086()+0x5a>
c0016daf:	fb                   	sti    
c0016db0:	83 c4 08             	add    esp,0x8
c0016db3:	89 d8                	mov    eax,ebx
c0016db5:	5b                   	pop    ebx
c0016db6:	c3                   	ret    

c0016db7 <Vm::getOutput8086(unsigned char*)>:
c0016db7:	57                   	push   edi
c0016db8:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016dbe:	56                   	push   esi
c0016dbf:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016dc4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016dc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dca:	5e                   	pop    esi
c0016dcb:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016dd0:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016dda:	5f                   	pop    edi
c0016ddb:	c3                   	ret    

c0016ddc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ddc:	55                   	push   ebp
c0016ddd:	57                   	push   edi
c0016dde:	56                   	push   esi
c0016ddf:	53                   	push   ebx
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016de7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016deb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016def:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016df3:	fa                   	cli    
c0016df4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dfa:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e01:	75 15                	jne    c0016e18 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e03:	e8 70 f2 ff ff       	call   c0016078 <schedule()>
c0016e08:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e0d:	48                   	dec    eax
c0016e0e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e13:	75 de                	jne    c0016df3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e15:	fb                   	sti    
c0016e16:	eb db                	jmp    c0016df3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e18:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e22:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e27:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e2b:	0f b7 ff             	movzx  edi,di
c0016e2e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e32:	0f b7 f6             	movzx  esi,si
c0016e35:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e39:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e3d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e41:	50                   	push   eax
c0016e42:	6a 20                	push   0x20
c0016e44:	6a 00                	push   0x0
c0016e46:	68 40 c7 02 c0       	push   0xc002c740
c0016e4b:	e8 a0 96 fe ff       	call   c00004f0 <memset>
c0016e50:	5a                   	pop    edx
c0016e51:	59                   	pop    ecx
c0016e52:	57                   	push   edi
c0016e53:	56                   	push   esi
c0016e54:	e8 2d fe ff ff       	call   c0016c86 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e60:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e64:	89 c7                	mov    edi,eax
c0016e66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e68:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e6f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e74:	48                   	dec    eax
c0016e75:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e7a:	75 01                	jne    c0016e7d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e7c:	fb                   	sti    
c0016e7d:	83 ec 0c             	sub    esp,0xc
c0016e80:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e86:	e8 e5 f6 ff ff       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c0016e8b:	83 c4 1c             	add    esp,0x1c
c0016e8e:	b0 01                	mov    al,0x1
c0016e90:	5b                   	pop    ebx
c0016e91:	5e                   	pop    esi
c0016e92:	5f                   	pop    edi
c0016e93:	5d                   	pop    ebp
c0016e94:	c3                   	ret    

c0016e95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e95:	55                   	push   ebp
c0016e96:	57                   	push   edi
c0016e97:	56                   	push   esi
c0016e98:	53                   	push   ebx
c0016e99:	83 ec 34             	sub    esp,0x34
c0016e9c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ea0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ea4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ea8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016eac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016eb4:	68 64 2a 02 c0       	push   0xc0022a64
c0016eb9:	e8 4c 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016ebe:	83 c4 10             	add    esp,0x10
c0016ec1:	fa                   	cli    
c0016ec2:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016ec8:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ece:	84 db                	test   bl,bl
c0016ed0:	75 15                	jne    c0016ee7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016ed2:	e8 a1 f1 ff ff       	call   c0016078 <schedule()>
c0016ed7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016edc:	48                   	dec    eax
c0016edd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ee2:	75 dd                	jne    c0016ec1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ee4:	fb                   	sti    
c0016ee5:	eb da                	jmp    c0016ec1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ee7:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ef1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ef5:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016efa:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016efe:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f02:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f06:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f0a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f0e:	50                   	push   eax
c0016f0f:	6a 20                	push   0x20
c0016f11:	6a 00                	push   0x0
c0016f13:	68 40 c7 02 c0       	push   0xc002c740
c0016f18:	e8 d3 95 fe ff       	call   c00004f0 <memset>
c0016f1d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f24:	e8 aa 0b ff ff       	call   c0007ad3 <malloc>
c0016f29:	83 c4 0c             	add    esp,0xc
c0016f2c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f36:	89 c5                	mov    ebp,eax
c0016f38:	50                   	push   eax
c0016f39:	e8 e4 4b ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c0016f3e:	83 c4 10             	add    esp,0x10
c0016f41:	85 ed                	test   ebp,ebp
c0016f43:	75 0a                	jne    c0016f4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	68 86 2a 02 c0       	push   0xc0022a86
c0016f4d:	eb 2b                	jmp    c0016f7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f4f:	50                   	push   eax
c0016f50:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f54:	50                   	push   eax
c0016f55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f59:	50                   	push   eax
c0016f5a:	55                   	push   ebp
c0016f5b:	e8 e2 4e ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c0016f60:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f64:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f68:	83 c4 10             	add    esp,0x10
c0016f6b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f70:	74 27                	je     c0016f99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f72:	83 ec 0c             	sub    esp,0xc
c0016f75:	68 9a 2a 02 c0       	push   0xc0022a9a
c0016f7a:	e8 e8 a5 ff ff       	call   c0011567 <KePanic(char const*)>
c0016f7f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	48                   	dec    eax
c0016f88:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f8d:	85 c0                	test   eax,eax
c0016f8f:	75 01                	jne    c0016f92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f91:	fb                   	sti    
c0016f92:	31 db                	xor    ebx,ebx
c0016f94:	e9 90 00 00 00       	jmp    c0017029 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f99:	51                   	push   ecx
c0016f9a:	51                   	push   ecx
c0016f9b:	6a 01                	push   0x1
c0016f9d:	55                   	push   ebp
c0016f9e:	e8 9d 4b ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0016fa3:	83 c4 10             	add    esp,0x10
c0016fa6:	85 c0                	test   eax,eax
c0016fa8:	74 26                	je     c0016fd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016faa:	83 ec 0c             	sub    esp,0xc
c0016fad:	68 b3 2a 02 c0       	push   0xc0022ab3
c0016fb2:	e8 b0 a5 ff ff       	call   c0011567 <KePanic(char const*)>
c0016fb7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fbc:	83 c4 10             	add    esp,0x10
c0016fbf:	48                   	dec    eax
c0016fc0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fc5:	85 c0                	test   eax,eax
c0016fc7:	75 c9                	jne    c0016f92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016fc9:	fb                   	sti    
c0016fca:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016fce:	eb 59                	jmp    c0017029 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fd0:	50                   	push   eax
c0016fd1:	0f b7 ff             	movzx  edi,di
c0016fd4:	50                   	push   eax
c0016fd5:	0f b7 f6             	movzx  esi,si
c0016fd8:	57                   	push   edi
c0016fd9:	56                   	push   esi
c0016fda:	e8 a7 fc ff ff       	call   c0016c86 <Vm::realToLinear(unsigned short, unsigned short)>
c0016fdf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fe2:	5a                   	pop    edx
c0016fe3:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016fe7:	56                   	push   esi
c0016fe8:	50                   	push   eax
c0016fe9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ff1:	55                   	push   ebp
c0016ff2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ff5:	83 c4 14             	add    esp,0x14
c0016ff8:	55                   	push   ebp
c0016ff9:	e8 a0 4b ff ff       	call   c000bb9e <File::close()>
c0016ffe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c001700d:	48                   	dec    eax
c001700e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017013:	85 c0                	test   eax,eax
c0017015:	75 01                	jne    c0017018 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017017:	fb                   	sti    
c0017018:	83 ec 0c             	sub    esp,0xc
c001701b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017021:	e8 4a f5 ff ff       	call   c0016570 <unblockTask(ThreadControlBlock*)>
c0017026:	83 c4 10             	add    esp,0x10
c0017029:	83 c4 2c             	add    esp,0x2c
c001702c:	88 d8                	mov    al,bl
c001702e:	5b                   	pop    ebx
c001702f:	5e                   	pop    esi
c0017030:	5f                   	pop    edi
c0017031:	5d                   	pop    ebp
c0017032:	c3                   	ret    

c0017033 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017033:	57                   	push   edi
c0017034:	56                   	push   esi
c0017035:	53                   	push   ebx
c0017036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001703e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017042:	83 e8 06             	sub    eax,0x6
c0017045:	0f b7 c0             	movzx  eax,ax
c0017048:	50                   	push   eax
c0017049:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001704e:	50                   	push   eax
c001704f:	e8 32 fc ff ff       	call   c0016c86 <Vm::realToLinear(unsigned short, unsigned short)>
c0017054:	5a                   	pop    edx
c0017055:	59                   	pop    ecx
c0017056:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017059:	8d 51 fa             	lea    edx,[ecx-0x6]
c001705c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001705f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017065:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017068:	8d 51 02             	lea    edx,[ecx+0x2]
c001706b:	66 89 10             	mov    WORD PTR [eax],dx
c001706e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017072:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017076:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001707a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001707d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017081:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017087:	89 f1                	mov    ecx,esi
c0017089:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001708d:	89 f2                	mov    edx,esi
c001708f:	0f b6 d6             	movzx  edx,dh
c0017092:	0f b6 f1             	movzx  esi,cl
c0017095:	74 0a                	je     c00170a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0017097:	c1 e2 08             	shl    edx,0x8
c001709a:	09 f2                	or     edx,esi
c001709c:	80 ce 02             	or     dh,0x2
c001709f:	eb 08                	jmp    c00170a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00170a1:	c1 e2 08             	shl    edx,0x8
c00170a4:	09 f2                	or     edx,esi
c00170a6:	80 e6 fd             	and    dh,0xfd
c00170a9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170b2:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170b6:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00170be:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00170c1:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00170c9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00170cc:	5b                   	pop    ebx
c00170cd:	5e                   	pop    esi
c00170ce:	5f                   	pop    edi
c00170cf:	c3                   	ret    

c00170d0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00170d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170d5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170da:	c1 e0 04             	shl    eax,0x4
c00170dd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00170e0:	c3                   	ret    

c00170e1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00170e1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170e6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170eb:	c1 e0 04             	shl    eax,0x4
c00170ee:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00170f2:	c3                   	ret    

c00170f3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00170f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170fd:	c1 e0 04             	shl    eax,0x4
c0017100:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017103:	c3                   	ret    

c0017104 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017104:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017109:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001710e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017112:	c1 e0 04             	shl    eax,0x4
c0017115:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017118:	c3                   	ret    

c0017119 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017119:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001711e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017123:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017127:	c1 e0 04             	shl    eax,0x4
c001712a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001712e:	c3                   	ret    

c001712f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001712f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017134:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017139:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001713d:	c1 e0 04             	shl    eax,0x4
c0017140:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017143:	c3                   	ret    

c0017144 <Vm::faultHandler(regs*)>:
c0017144:	55                   	push   ebp
c0017145:	57                   	push   edi
c0017146:	56                   	push   esi
c0017147:	53                   	push   ebx
c0017148:	83 ec 2c             	sub    esp,0x2c
c001714b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001714f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017152:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017156:	0f b7 f8             	movzx  edi,ax
c0017159:	0f b7 c0             	movzx  eax,ax
c001715c:	52                   	push   edx
c001715d:	50                   	push   eax
c001715e:	e8 23 fb ff ff       	call   c0016c86 <Vm::realToLinear(unsigned short, unsigned short)>
c0017163:	5a                   	pop    edx
c0017164:	59                   	pop    ecx
c0017165:	89 c1                	mov    ecx,eax
c0017167:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001716a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001716e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017177:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001717a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001717e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017187:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001718b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001718f:	e8 f2 fa ff ff       	call   c0016c86 <Vm::realToLinear(unsigned short, unsigned short)>
c0017194:	5e                   	pop    esi
c0017195:	be 06 00 00 00       	mov    esi,0x6
c001719a:	5d                   	pop    ebp
c001719b:	31 ed                	xor    ebp,ebp
c001719d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171a2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00171a5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00171ab:	0f 84 74 02 00 00    	je     c0017425 <Vm::faultHandler(regs*)+0x2e1>
c00171b1:	0f 87 94 00 00 00    	ja     c001724b <Vm::faultHandler(regs*)+0x107>
c00171b7:	83 fa 66             	cmp    edx,0x66
c00171ba:	0f 84 e2 01 00 00    	je     c00173a2 <Vm::faultHandler(regs*)+0x25e>
c00171c0:	77 47                	ja     c0017209 <Vm::faultHandler(regs*)+0xc5>
c00171c2:	83 fa 36             	cmp    edx,0x36
c00171c5:	0f 84 ca 01 00 00    	je     c0017395 <Vm::faultHandler(regs*)+0x251>
c00171cb:	77 1a                	ja     c00171e7 <Vm::faultHandler(regs*)+0xa3>
c00171cd:	83 fa 26             	cmp    edx,0x26
c00171d0:	0f 84 98 01 00 00    	je     c001736e <Vm::faultHandler(regs*)+0x22a>
c00171d6:	83 fa 2e             	cmp    edx,0x2e
c00171d9:	0f 85 27 06 00 00    	jne    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c00171df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171e2:	31 f6                	xor    esi,esi
c00171e4:	41                   	inc    ecx
c00171e5:	eb bb                	jmp    c00171a2 <Vm::faultHandler(regs*)+0x5e>
c00171e7:	83 fa 64             	cmp    edx,0x64
c00171ea:	0f 84 8b 01 00 00    	je     c001737b <Vm::faultHandler(regs*)+0x237>
c00171f0:	0f 87 92 01 00 00    	ja     c0017388 <Vm::faultHandler(regs*)+0x244>
c00171f6:	83 fa 3e             	cmp    edx,0x3e
c00171f9:	0f 85 07 06 00 00    	jne    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c00171ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017202:	be 01 00 00 00       	mov    esi,0x1
c0017207:	eb db                	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c0017209:	83 fa 6d             	cmp    edx,0x6d
c001720c:	0f 84 34 03 00 00    	je     c0017546 <Vm::faultHandler(regs*)+0x402>
c0017212:	77 17                	ja     c001722b <Vm::faultHandler(regs*)+0xe7>
c0017214:	83 fa 67             	cmp    edx,0x67
c0017217:	0f 84 92 01 00 00    	je     c00173af <Vm::faultHandler(regs*)+0x26b>
c001721d:	83 fa 6c             	cmp    edx,0x6c
c0017220:	0f 84 b1 02 00 00    	je     c00174d7 <Vm::faultHandler(regs*)+0x393>
c0017226:	e9 db 05 00 00       	jmp    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c001722b:	83 fa 6f             	cmp    edx,0x6f
c001722e:	0f 84 40 04 00 00    	je     c0017674 <Vm::faultHandler(regs*)+0x530>
c0017234:	0f 82 a2 03 00 00    	jb     c00175dc <Vm::faultHandler(regs*)+0x498>
c001723a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017240:	0f 84 76 01 00 00    	je     c00173bc <Vm::faultHandler(regs*)+0x278>
c0017246:	e9 bb 05 00 00       	jmp    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c001724b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017251:	0f 84 57 05 00 00    	je     c00177ae <Vm::faultHandler(regs*)+0x66a>
c0017257:	0f 87 a9 00 00 00    	ja     c0017306 <Vm::faultHandler(regs*)+0x1c2>
c001725d:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017263:	0f 84 d6 04 00 00    	je     c001773f <Vm::faultHandler(regs*)+0x5fb>
c0017269:	77 78                	ja     c00172e3 <Vm::faultHandler(regs*)+0x19f>
c001726b:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017271:	0f 84 0e 02 00 00    	je     c0017485 <Vm::faultHandler(regs*)+0x341>
c0017277:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001727d:	0f 85 83 05 00 00    	jne    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c0017283:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017287:	89 d1                	mov    ecx,edx
c0017289:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001728c:	c1 e1 08             	shl    ecx,0x8
c001728f:	09 ca                	or     edx,ecx
c0017291:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017294:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017298:	89 d1                	mov    ecx,edx
c001729a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001729e:	c1 e1 08             	shl    ecx,0x8
c00172a1:	09 ca                	or     edx,ecx
c00172a3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00172a6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00172aa:	89 d1                	mov    ecx,edx
c00172ac:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00172b0:	c1 e1 08             	shl    ecx,0x8
c00172b3:	09 ca                	or     edx,ecx
c00172b5:	81 ca 00 02 02 00    	or     edx,0x20200
c00172bb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172be:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00172c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172c8:	d1 e8                	shr    eax,1
c00172ca:	83 e0 01             	and    eax,0x1
c00172cd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172d0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172d3:	83 c0 06             	add    eax,0x6
c00172d6:	25 ff ff 00 00       	and    eax,0xffff
c00172db:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00172de:	e9 1f 05 00 00       	jmp    c0017802 <Vm::faultHandler(regs*)+0x6be>
c00172e3:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00172e9:	0f 84 95 04 00 00    	je     c0017784 <Vm::faultHandler(regs*)+0x640>
c00172ef:	0f 82 66 04 00 00    	jb     c001775b <Vm::faultHandler(regs*)+0x617>
c00172f5:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00172fb:	0f 84 9a 04 00 00    	je     c001779b <Vm::faultHandler(regs*)+0x657>
c0017301:	e9 00 05 00 00       	jmp    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c0017306:	81 fa ef 00 00 00    	cmp    edx,0xef
c001730c:	0f 84 dd 04 00 00    	je     c00177ef <Vm::faultHandler(regs*)+0x6ab>
c0017312:	77 2e                	ja     c0017342 <Vm::faultHandler(regs*)+0x1fe>
c0017314:	81 fa ed 00 00 00    	cmp    edx,0xed
c001731a:	0f 84 aa 04 00 00    	je     c00177ca <Vm::faultHandler(regs*)+0x686>
c0017320:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017326:	0f 85 da 04 00 00    	jne    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c001732c:	50                   	push   eax
c001732d:	50                   	push   eax
c001732e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017332:	50                   	push   eax
c0017333:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017337:	50                   	push   eax
c0017338:	e8 13 f9 ff ff       	call   c0016c50 <Vm::outbv(unsigned short, unsigned char)>
c001733d:	e9 a5 04 00 00       	jmp    c00177e7 <Vm::faultHandler(regs*)+0x6a3>
c0017342:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017348:	0f 84 6d 01 00 00    	je     c00174bb <Vm::faultHandler(regs*)+0x377>
c001734e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017354:	0f 84 6f 01 00 00    	je     c00174c9 <Vm::faultHandler(regs*)+0x385>
c001735a:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017360:	0f 85 a0 04 00 00    	jne    c0017806 <Vm::faultHandler(regs*)+0x6c2>
c0017366:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017369:	e9 76 fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c001736e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017371:	be 02 00 00 00       	mov    esi,0x2
c0017376:	e9 69 fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c001737b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001737e:	be 03 00 00 00       	mov    esi,0x3
c0017383:	e9 5c fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c0017388:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001738b:	be 04 00 00 00       	mov    esi,0x4
c0017390:	e9 4f fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c0017395:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017398:	be 05 00 00 00       	mov    esi,0x5
c001739d:	e9 42 fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c00173a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173a5:	bd 01 00 00 00       	mov    ebp,0x1
c00173aa:	e9 35 fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c00173af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173b2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00173b7:	e9 28 fe ff ff       	jmp    c00171e4 <Vm::faultHandler(regs*)+0xa0>
c00173bc:	83 e5 01             	and    ebp,0x1
c00173bf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173c6:	74 30                	je     c00173f8 <Vm::faultHandler(regs*)+0x2b4>
c00173c8:	83 e9 04             	sub    ecx,0x4
c00173cb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173d1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173d7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173da:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00173dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173e3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173e7:	0f 84 12 04 00 00    	je     c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00173ed:	80 ce 02             	or     dh,0x2
c00173f0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00173f3:	e9 07 04 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00173f8:	83 e9 02             	sub    ecx,0x2
c00173fb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017401:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017404:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017408:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001740e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017412:	74 05                	je     c0017419 <Vm::faultHandler(regs*)+0x2d5>
c0017414:	80 ce 02             	or     dh,0x2
c0017417:	eb 03                	jmp    c001741c <Vm::faultHandler(regs*)+0x2d8>
c0017419:	80 e6 fd             	and    dh,0xfd
c001741c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017420:	e9 da 03 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c0017425:	83 e5 01             	and    ebp,0x1
c0017428:	74 2a                	je     c0017454 <Vm::faultHandler(regs*)+0x310>
c001742a:	8b 10                	mov    edx,DWORD PTR [eax]
c001742c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017432:	81 ca 00 02 02 00    	or     edx,0x20200
c0017438:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001743b:	8b 00                	mov    eax,DWORD PTR [eax]
c001743d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017443:	c1 e8 09             	shr    eax,0x9
c0017446:	83 e0 01             	and    eax,0x1
c0017449:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001744c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001744f:	83 c0 04             	add    eax,0x4
c0017452:	eb 24                	jmp    c0017478 <Vm::faultHandler(regs*)+0x334>
c0017454:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017457:	81 ca 00 02 02 00    	or     edx,0x20200
c001745d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017460:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017463:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017469:	c1 e8 09             	shr    eax,0x9
c001746c:	83 e0 01             	and    eax,0x1
c001746f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017472:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017475:	83 c0 02             	add    eax,0x2
c0017478:	25 ff ff 00 00       	and    eax,0xffff
c001747d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017480:	e9 7a 03 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c0017485:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017489:	3d ee 00 00 00       	cmp    eax,0xee
c001748e:	75 10                	jne    c00174a0 <Vm::faultHandler(regs*)+0x35c>
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017496:	e8 52 f8 ff ff       	call   c0016ced <Vm::mainloop3(unsigned long)>
c001749b:	e9 4a 03 00 00       	jmp    c00177ea <Vm::faultHandler(regs*)+0x6a6>
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00174a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174ab:	51                   	push   ecx
c00174ac:	50                   	push   eax
c00174ad:	53                   	push   ebx
c00174ae:	e8 80 fb ff ff       	call   c0017033 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00174b3:	83 c4 20             	add    esp,0x20
c00174b6:	e9 47 03 00 00       	jmp    c0017802 <Vm::faultHandler(regs*)+0x6be>
c00174bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174c0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00174c4:	e9 36 03 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00174c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174ce:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00174d2:	e9 28 03 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00174d7:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174dc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174df:	74 2b                	je     c001750c <Vm::faultHandler(regs*)+0x3c8>
c00174e1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00174e8:	76 22                	jbe    c001750c <Vm::faultHandler(regs*)+0x3c8>
c00174ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174ee:	50                   	push   eax
c00174ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174f3:	50                   	push   eax
c00174f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174f8:	50                   	push   eax
c00174f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174fd:	50                   	push   eax
c00174fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017502:	50                   	push   eax
c0017503:	6a 6c                	push   0x6c
c0017505:	6a 6c                	push   0x6c
c0017507:	e9 c0 01 00 00       	jmp    c00176cc <Vm::faultHandler(regs*)+0x588>
c001750c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017510:	83 ec 0c             	sub    esp,0xc
c0017513:	0f b7 f6             	movzx  esi,si
c0017516:	50                   	push   eax
c0017517:	e8 21 f7 ff ff       	call   c0016c3d <Vm::inbv(unsigned short)>
c001751c:	83 c4 0c             	add    esp,0xc
c001751f:	0f b6 c0             	movzx  eax,al
c0017522:	50                   	push   eax
c0017523:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017527:	50                   	push   eax
c0017528:	56                   	push   esi
c0017529:	e8 d6 fb ff ff       	call   c0017104 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001752e:	83 c4 10             	add    esp,0x10
c0017531:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017534:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017538:	74 03                	je     c001753d <Vm::faultHandler(regs*)+0x3f9>
c001753a:	48                   	dec    eax
c001753b:	eb 01                	jmp    c001753e <Vm::faultHandler(regs*)+0x3fa>
c001753d:	40                   	inc    eax
c001753e:	0f b7 c0             	movzx  eax,ax
c0017541:	e9 8e 00 00 00       	jmp    c00175d4 <Vm::faultHandler(regs*)+0x490>
c0017546:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001754b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001754e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017551:	74 29                	je     c001757c <Vm::faultHandler(regs*)+0x438>
c0017553:	3d ff ff 00 00       	cmp    eax,0xffff
c0017558:	76 22                	jbe    c001757c <Vm::faultHandler(regs*)+0x438>
c001755a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001755e:	50                   	push   eax
c001755f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017563:	50                   	push   eax
c0017564:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017568:	50                   	push   eax
c0017569:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001756d:	50                   	push   eax
c001756e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017572:	50                   	push   eax
c0017573:	6a 6d                	push   0x6d
c0017575:	6a 6d                	push   0x6d
c0017577:	e9 50 01 00 00       	jmp    c00176cc <Vm::faultHandler(regs*)+0x588>
c001757c:	83 e5 01             	and    ebp,0x1
c001757f:	0f b7 c8             	movzx  ecx,ax
c0017582:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017585:	0f b7 f6             	movzx  esi,si
c0017588:	74 1e                	je     c00175a8 <Vm::faultHandler(regs*)+0x464>
c001758a:	ed                   	in     eax,dx
c001758b:	55                   	push   ebp
c001758c:	50                   	push   eax
c001758d:	51                   	push   ecx
c001758e:	56                   	push   esi
c001758f:	e8 9b fb ff ff       	call   c001712f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017594:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	8d 50 04             	lea    edx,[eax+0x4]
c001759d:	83 e8 04             	sub    eax,0x4
c00175a0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00175a6:	eb 20                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x484>
c00175a8:	66 ed                	in     ax,dx
c00175aa:	57                   	push   edi
c00175ab:	0f b7 c0             	movzx  eax,ax
c00175ae:	50                   	push   eax
c00175af:	51                   	push   ecx
c00175b0:	56                   	push   esi
c00175b1:	e8 63 fb ff ff       	call   c0017119 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00175b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175b9:	83 c4 10             	add    esp,0x10
c00175bc:	8d 50 02             	lea    edx,[eax+0x2]
c00175bf:	83 e8 02             	sub    eax,0x2
c00175c2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00175c8:	25 ff ff 00 00       	and    eax,0xffff
c00175cd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175d1:	0f 44 c2             	cmove  eax,edx
c00175d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00175d7:	e9 23 02 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00175dc:	8d 46 ff             	lea    eax,[esi-0x1]
c00175df:	0f b6 f0             	movzx  esi,al
c00175e2:	83 fe 05             	cmp    esi,0x5
c00175e5:	77 23                	ja     c001760a <Vm::faultHandler(regs*)+0x4c6>
c00175e7:	ff 24 b5 28 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4d8]
c00175ee:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00175f3:	eb 15                	jmp    c001760a <Vm::faultHandler(regs*)+0x4c6>
c00175f5:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00175f9:	eb 0f                	jmp    c001760a <Vm::faultHandler(regs*)+0x4c6>
c00175fb:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00175ff:	eb 09                	jmp    c001760a <Vm::faultHandler(regs*)+0x4c6>
c0017601:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017605:	eb 03                	jmp    c001760a <Vm::faultHandler(regs*)+0x4c6>
c0017607:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001760a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001760f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017612:	74 29                	je     c001763d <Vm::faultHandler(regs*)+0x4f9>
c0017614:	3d ff ff 00 00       	cmp    eax,0xffff
c0017619:	76 22                	jbe    c001763d <Vm::faultHandler(regs*)+0x4f9>
c001761b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001761f:	50                   	push   eax
c0017620:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017624:	50                   	push   eax
c0017625:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017629:	50                   	push   eax
c001762a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001762e:	50                   	push   eax
c001762f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017633:	50                   	push   eax
c0017634:	6a 6e                	push   0x6e
c0017636:	6a 6e                	push   0x6e
c0017638:	e9 8f 00 00 00       	jmp    c00176cc <Vm::faultHandler(regs*)+0x588>
c001763d:	52                   	push   edx
c001763e:	0f b7 c0             	movzx  eax,ax
c0017641:	52                   	push   edx
c0017642:	50                   	push   eax
c0017643:	57                   	push   edi
c0017644:	e8 87 fa ff ff       	call   c00170d0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017649:	59                   	pop    ecx
c001764a:	5e                   	pop    esi
c001764b:	0f b6 c0             	movzx  eax,al
c001764e:	50                   	push   eax
c001764f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017653:	50                   	push   eax
c0017654:	e8 f7 f5 ff ff       	call   c0016c50 <Vm::outbv(unsigned short, unsigned char)>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001765f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017663:	74 03                	je     c0017668 <Vm::faultHandler(regs*)+0x524>
c0017665:	48                   	dec    eax
c0017666:	eb 01                	jmp    c0017669 <Vm::faultHandler(regs*)+0x525>
c0017668:	40                   	inc    eax
c0017669:	0f b7 c0             	movzx  eax,ax
c001766c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001766f:	e9 8b 01 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c0017674:	8d 46 ff             	lea    eax,[esi-0x1]
c0017677:	0f b6 f0             	movzx  esi,al
c001767a:	83 fe 05             	cmp    esi,0x5
c001767d:	77 1e                	ja     c001769d <Vm::faultHandler(regs*)+0x559>
c001767f:	ff 24 b5 40 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4c0]
c0017686:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001768a:	eb 11                	jmp    c001769d <Vm::faultHandler(regs*)+0x559>
c001768c:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001768f:	eb 0c                	jmp    c001769d <Vm::faultHandler(regs*)+0x559>
c0017691:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017694:	eb 07                	jmp    c001769d <Vm::faultHandler(regs*)+0x559>
c0017696:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017699:	eb 02                	jmp    c001769d <Vm::faultHandler(regs*)+0x559>
c001769b:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001769d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176a2:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176a5:	74 37                	je     c00176de <Vm::faultHandler(regs*)+0x59a>
c00176a7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00176ad:	76 2f                	jbe    c00176de <Vm::faultHandler(regs*)+0x59a>
c00176af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176b3:	50                   	push   eax
c00176b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176b8:	50                   	push   eax
c00176b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176bd:	50                   	push   eax
c00176be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176c2:	50                   	push   eax
c00176c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176c7:	50                   	push   eax
c00176c8:	6a 6f                	push   0x6f
c00176ca:	6a 6f                	push   0x6f
c00176cc:	68 cc 2a 02 c0       	push   0xc0022acc
c00176d1:	e8 34 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00176d6:	83 c4 20             	add    esp,0x20
c00176d9:	e9 86 01 00 00       	jmp    c0017864 <Vm::faultHandler(regs*)+0x720>
c00176de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00176e1:	0f b7 d7             	movzx  edx,di
c00176e4:	0f b7 c6             	movzx  eax,si
c00176e7:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00176ea:	81 e1 00 04 00 00    	and    ecx,0x400
c00176f0:	83 e5 01             	and    ebp,0x1
c00176f3:	74 1c                	je     c0017711 <Vm::faultHandler(regs*)+0x5cd>
c00176f5:	55                   	push   ebp
c00176f6:	55                   	push   ebp
c00176f7:	50                   	push   eax
c00176f8:	52                   	push   edx
c00176f9:	e8 f5 f9 ff ff       	call   c00170f3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	89 fa                	mov    edx,edi
c0017703:	ef                   	out    dx,eax
c0017704:	8d 46 04             	lea    eax,[esi+0x4]
c0017707:	83 ee 04             	sub    esi,0x4
c001770a:	25 ff ff 00 00       	and    eax,0xffff
c001770f:	eb 1b                	jmp    c001772c <Vm::faultHandler(regs*)+0x5e8>
c0017711:	55                   	push   ebp
c0017712:	55                   	push   ebp
c0017713:	50                   	push   eax
c0017714:	52                   	push   edx
c0017715:	e8 c7 f9 ff ff       	call   c00170e1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	89 fa                	mov    edx,edi
c001771f:	66 ef                	out    dx,ax
c0017721:	8d 46 02             	lea    eax,[esi+0x2]
c0017724:	83 ee 02             	sub    esi,0x2
c0017727:	25 ff ff 00 00       	and    eax,0xffff
c001772c:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017732:	85 c9                	test   ecx,ecx
c0017734:	0f 44 f0             	cmove  esi,eax
c0017737:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001773a:	e9 c0 00 00 00       	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c001773f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017746:	83 ec 0c             	sub    esp,0xc
c0017749:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001774d:	50                   	push   eax
c001774e:	e8 ea f4 ff ff       	call   c0016c3d <Vm::inbv(unsigned short)>
c0017753:	0f b6 c0             	movzx  eax,al
c0017756:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017759:	eb 3a                	jmp    c0017795 <Vm::faultHandler(regs*)+0x651>
c001775b:	83 e5 01             	and    ebp,0x1
c001775e:	74 07                	je     c0017767 <Vm::faultHandler(regs*)+0x623>
c0017760:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017764:	ed                   	in     eax,dx
c0017765:	eb 14                	jmp    c001777b <Vm::faultHandler(regs*)+0x637>
c0017767:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001776a:	66 31 f6             	xor    si,si
c001776d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017770:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017774:	66 ed                	in     ax,dx
c0017776:	0f b7 c0             	movzx  eax,ax
c0017779:	09 f0                	or     eax,esi
c001777b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001777e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017782:	eb 7e                	jmp    c0017802 <Vm::faultHandler(regs*)+0x6be>
c0017784:	52                   	push   edx
c0017785:	52                   	push   edx
c0017786:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001778a:	50                   	push   eax
c001778b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001778f:	50                   	push   eax
c0017790:	e8 bb f4 ff ff       	call   c0016c50 <Vm::outbv(unsigned short, unsigned char)>
c0017795:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017799:	eb 4f                	jmp    c00177ea <Vm::faultHandler(regs*)+0x6a6>
c001779b:	83 e5 01             	and    ebp,0x1
c001779e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177a1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177a5:	74 03                	je     c00177aa <Vm::faultHandler(regs*)+0x666>
c00177a7:	ef                   	out    dx,eax
c00177a8:	eb d4                	jmp    c001777e <Vm::faultHandler(regs*)+0x63a>
c00177aa:	66 ef                	out    dx,ax
c00177ac:	eb d0                	jmp    c001777e <Vm::faultHandler(regs*)+0x63a>
c00177ae:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177b2:	83 ec 0c             	sub    esp,0xc
c00177b5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177bc:	50                   	push   eax
c00177bd:	e8 7b f4 ff ff       	call   c0016c3d <Vm::inbv(unsigned short)>
c00177c2:	0f b6 c0             	movzx  eax,al
c00177c5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177c8:	eb 1d                	jmp    c00177e7 <Vm::faultHandler(regs*)+0x6a3>
c00177ca:	83 e5 01             	and    ebp,0x1
c00177cd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177d0:	74 03                	je     c00177d5 <Vm::faultHandler(regs*)+0x691>
c00177d2:	ed                   	in     eax,dx
c00177d3:	eb 0d                	jmp    c00177e2 <Vm::faultHandler(regs*)+0x69e>
c00177d5:	66 ed                	in     ax,dx
c00177d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00177da:	0f b7 c0             	movzx  eax,ax
c00177dd:	66 31 d2             	xor    dx,dx
c00177e0:	09 d0                	or     eax,edx
c00177e2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177e5:	eb 18                	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00177e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00177ea:	83 c4 10             	add    esp,0x10
c00177ed:	eb 13                	jmp    c0017802 <Vm::faultHandler(regs*)+0x6be>
c00177ef:	83 e5 01             	and    ebp,0x1
c00177f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177f5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177f8:	74 03                	je     c00177fd <Vm::faultHandler(regs*)+0x6b9>
c00177fa:	ef                   	out    dx,eax
c00177fb:	eb 02                	jmp    c00177ff <Vm::faultHandler(regs*)+0x6bb>
c00177fd:	66 ef                	out    dx,ax
c00177ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017802:	b0 01                	mov    al,0x1
c0017804:	eb 60                	jmp    c0017866 <Vm::faultHandler(regs*)+0x722>
c0017806:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001780a:	50                   	push   eax
c001780b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001780f:	50                   	push   eax
c0017810:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017814:	50                   	push   eax
c0017815:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017819:	50                   	push   eax
c001781a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001781e:	50                   	push   eax
c001781f:	52                   	push   edx
c0017820:	52                   	push   edx
c0017821:	68 f9 2a 02 c0       	push   0xc0022af9
c0017826:	e8 df 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001782b:	83 c4 20             	add    esp,0x20
c001782e:	83 ec 0c             	sub    esp,0xc
c0017831:	6a 60                	push   0x60
c0017833:	e8 05 f4 ff ff       	call   c0016c3d <Vm::inbv(unsigned short)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	0f b6 d0             	movzx  edx,al
c001783e:	83 fa 1c             	cmp    edx,0x1c
c0017841:	74 05                	je     c0017848 <Vm::faultHandler(regs*)+0x704>
c0017843:	83 fa 5a             	cmp    edx,0x5a
c0017846:	75 e6                	jne    c001782e <Vm::faultHandler(regs*)+0x6ea>
c0017848:	0f b6 c0             	movzx  eax,al
c001784b:	83 f8 1c             	cmp    eax,0x1c
c001784e:	74 05                	je     c0017855 <Vm::faultHandler(regs*)+0x711>
c0017850:	83 f8 5a             	cmp    eax,0x5a
c0017853:	75 0f                	jne    c0017864 <Vm::faultHandler(regs*)+0x720>
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	6a 60                	push   0x60
c001785a:	e8 de f3 ff ff       	call   c0016c3d <Vm::inbv(unsigned short)>
c001785f:	83 c4 10             	add    esp,0x10
c0017862:	eb e4                	jmp    c0017848 <Vm::faultHandler(regs*)+0x704>
c0017864:	31 c0                	xor    eax,eax
c0017866:	83 c4 2c             	add    esp,0x2c
c0017869:	5b                   	pop    ebx
c001786a:	5e                   	pop    esi
c001786b:	5f                   	pop    edi
c001786c:	5d                   	pop    ebp
c001786d:	c3                   	ret    

c001786e <noCopro(unsigned long)>:
c001786e:	c3                   	ret    

c001786f <nmiHandler(regs*, void*)>:
c001786f:	83 ec 0c             	sub    esp,0xc
c0017872:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017877:	83 ec 0c             	sub    esp,0xc
c001787a:	50                   	push   eax
c001787b:	e8 56 fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017880:	83 c4 10             	add    esp,0x10
c0017883:	90                   	nop
c0017884:	83 c4 0c             	add    esp,0xc
c0017887:	c3                   	ret    

c0017888 <doubleFault(regs*, void*)>:
c0017888:	55                   	push   ebp
c0017889:	89 e5                	mov    ebp,esp
c001788b:	83 ec 08             	sub    esp,0x8
c001788e:	83 ec 0c             	sub    esp,0xc
c0017891:	68 58 2b 02 c0       	push   0xc0022b58
c0017896:	e8 cc 9c ff ff       	call   c0011567 <KePanic(char const*)>
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	90                   	nop
c001789f:	c9                   	leave  
c00178a0:	c3                   	ret    

c00178a1 <displayDebugInfo(regs*)>:
c00178a1:	83 ec 1c             	sub    esp,0x1c
c00178a4:	0f 20 c0             	mov    eax,cr0
c00178a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178ab:	0f 20 d0             	mov    eax,cr2
c00178ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178b2:	0f 20 d8             	mov    eax,cr3
c00178b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178b9:	0f 20 e0             	mov    eax,cr4
c00178bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00178bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00178c6:	83 ec 08             	sub    esp,0x8
c00178c9:	50                   	push   eax
c00178ca:	68 74 2b 02 c0       	push   0xc0022b74
c00178cf:	e8 36 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00178de:	83 ec 08             	sub    esp,0x8
c00178e1:	50                   	push   eax
c00178e2:	68 65 2b 02 c0       	push   0xc0022b65
c00178e7:	e8 1e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178ec:	83 c4 10             	add    esp,0x10
c00178ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00178f6:	83 ec 08             	sub    esp,0x8
c00178f9:	50                   	push   eax
c00178fa:	68 70 2b 02 c0       	push   0xc0022b70
c00178ff:	e8 06 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001790e:	83 ec 08             	sub    esp,0x8
c0017911:	50                   	push   eax
c0017912:	68 7f 2b 02 c0       	push   0xc0022b7f
c0017917:	e8 ee 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001791c:	83 c4 10             	add    esp,0x10
c001791f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017923:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017926:	83 ec 08             	sub    esp,0x8
c0017929:	50                   	push   eax
c001792a:	68 8a 2b 02 c0       	push   0xc0022b8a
c001792f:	e8 d6 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017934:	83 c4 10             	add    esp,0x10
c0017937:	83 ec 08             	sub    esp,0x8
c001793a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001793e:	68 95 2b 02 c0       	push   0xc0022b95
c0017943:	e8 c2 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017948:	83 c4 10             	add    esp,0x10
c001794b:	83 ec 08             	sub    esp,0x8
c001794e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017952:	68 a0 2b 02 c0       	push   0xc0022ba0
c0017957:	e8 ae 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001795c:	83 c4 10             	add    esp,0x10
c001795f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017963:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017966:	c1 e0 05             	shl    eax,0x5
c0017969:	8d 90 20 3f 02 c0    	lea    edx,[eax-0x3ffdc0e0]
c001796f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017973:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017976:	83 ec 04             	sub    esp,0x4
c0017979:	52                   	push   edx
c001797a:	50                   	push   eax
c001797b:	68 ab 2b 02 c0       	push   0xc0022bab
c0017980:	e8 85 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001798d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017993:	83 ec 0c             	sub    esp,0xc
c0017996:	50                   	push   eax
c0017997:	e8 d3 0d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c001799c:	83 c4 10             	add    esp,0x10
c001799f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179aa:	83 ec 08             	sub    esp,0x8
c00179ad:	68 ba 2b 02 c0       	push   0xc0022bba
c00179b2:	50                   	push   eax
c00179b3:	e8 f4 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179b8:	83 c4 10             	add    esp,0x10
c00179bb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179ca:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179cd:	83 ec 08             	sub    esp,0x8
c00179d0:	52                   	push   edx
c00179d1:	50                   	push   eax
c00179d2:	e8 8f 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179e5:	83 ec 08             	sub    esp,0x8
c00179e8:	68 c8 2b 02 c0       	push   0xc0022bc8
c00179ed:	50                   	push   eax
c00179ee:	e8 b9 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a01:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a06:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a08:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a0b:	83 c2 0c             	add    edx,0xc
c0017a0e:	83 ec 08             	sub    esp,0x8
c0017a11:	52                   	push   edx
c0017a12:	50                   	push   eax
c0017a13:	e8 94 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a26:	83 ec 08             	sub    esp,0x8
c0017a29:	68 d1 2b 02 c0       	push   0xc0022bd1
c0017a2e:	50                   	push   eax
c0017a2f:	e8 78 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a46:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a49:	83 ec 08             	sub    esp,0x8
c0017a4c:	52                   	push   edx
c0017a4d:	50                   	push   eax
c0017a4e:	e8 13 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a61:	83 ec 08             	sub    esp,0x8
c0017a64:	68 d9 2b 02 c0       	push   0xc0022bd9
c0017a69:	50                   	push   eax
c0017a6a:	e8 3d 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a6f:	83 c4 10             	add    esp,0x10
c0017a72:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a81:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017a84:	83 ec 08             	sub    esp,0x8
c0017a87:	52                   	push   edx
c0017a88:	50                   	push   eax
c0017a89:	e8 d8 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9c:	83 ec 08             	sub    esp,0x8
c0017a9f:	68 e1 2b 02 c0       	push   0xc0022be1
c0017aa4:	50                   	push   eax
c0017aa5:	e8 02 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aaa:	83 c4 10             	add    esp,0x10
c0017aad:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017abc:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017abf:	83 ec 08             	sub    esp,0x8
c0017ac2:	52                   	push   edx
c0017ac3:	50                   	push   eax
c0017ac4:	e8 9d 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad7:	83 ec 08             	sub    esp,0x8
c0017ada:	68 e9 2b 02 c0       	push   0xc0022be9
c0017adf:	50                   	push   eax
c0017ae0:	e8 c7 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ae5:	83 c4 10             	add    esp,0x10
c0017ae8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017af7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017afa:	83 ec 08             	sub    esp,0x8
c0017afd:	52                   	push   edx
c0017afe:	50                   	push   eax
c0017aff:	e8 62 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b12:	83 ec 08             	sub    esp,0x8
c0017b15:	68 f1 2b 02 c0       	push   0xc0022bf1
c0017b1a:	50                   	push   eax
c0017b1b:	e8 8c 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b32:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b35:	83 ec 08             	sub    esp,0x8
c0017b38:	52                   	push   edx
c0017b39:	50                   	push   eax
c0017b3a:	e8 27 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b47:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4d:	83 ec 08             	sub    esp,0x8
c0017b50:	68 f9 2b 02 c0       	push   0xc0022bf9
c0017b55:	50                   	push   eax
c0017b56:	e8 51 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b6d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b70:	83 ec 08             	sub    esp,0x8
c0017b73:	52                   	push   edx
c0017b74:	50                   	push   eax
c0017b75:	e8 ec 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b88:	83 ec 08             	sub    esp,0x8
c0017b8b:	68 01 2c 02 c0       	push   0xc0022c01
c0017b90:	50                   	push   eax
c0017b91:	e8 16 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba4:	83 ec 08             	sub    esp,0x8
c0017ba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bab:	50                   	push   eax
c0017bac:	e8 b5 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bbf:	83 ec 08             	sub    esp,0x8
c0017bc2:	68 0a 2c 02 c0       	push   0xc0022c0a
c0017bc7:	50                   	push   eax
c0017bc8:	e8 df 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bd5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bdb:	83 ec 08             	sub    esp,0x8
c0017bde:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017be2:	50                   	push   eax
c0017be3:	e8 7e 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017be8:	83 c4 10             	add    esp,0x10
c0017beb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf6:	83 ec 08             	sub    esp,0x8
c0017bf9:	68 12 2c 02 c0       	push   0xc0022c12
c0017bfe:	50                   	push   eax
c0017bff:	e8 a8 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c04:	83 c4 10             	add    esp,0x10
c0017c07:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c12:	83 ec 08             	sub    esp,0x8
c0017c15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c19:	50                   	push   eax
c0017c1a:	e8 47 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	fa                   	cli    
c0017c23:	f4                   	hlt    
c0017c24:	eb fe                	jmp    c0017c24 <displayDebugInfo(regs*)+0x383>

c0017c26 <HalSystemIdle()>:
c0017c26:	56                   	push   esi
c0017c27:	53                   	push   ebx
c0017c28:	83 ec 14             	sub    esp,0x14
c0017c2b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c36:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c3c:	83 e0 04             	and    eax,0x4
c0017c3f:	0f b6 c0             	movzx  eax,al
c0017c42:	85 c0                	test   eax,eax
c0017c44:	0f 95 c0             	setne  al
c0017c47:	0f b6 c0             	movzx  eax,al
c0017c4a:	85 c0                	test   eax,eax
c0017c4c:	74 4c                	je     c0017c9a <HalSystemIdle()+0x74>
c0017c4e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c53:	83 ec 08             	sub    esp,0x8
c0017c56:	68 e1 00 00 00       	push   0xe1
c0017c5b:	50                   	push   eax
c0017c5c:	e8 81 f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017c61:	83 c4 10             	add    esp,0x10
c0017c64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c6c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c75:	83 e2 02             	and    edx,0x2
c0017c78:	89 d3                	mov    ebx,edx
c0017c7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c7e:	83 e2 00             	and    edx,0x0
c0017c81:	89 d6                	mov    esi,edx
c0017c83:	56                   	push   esi
c0017c84:	53                   	push   ebx
c0017c85:	68 e1 00 00 00       	push   0xe1
c0017c8a:	50                   	push   eax
c0017c8b:	e8 7e f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c90:	83 c4 10             	add    esp,0x10
c0017c93:	e8 fc 84 fe ff       	call   c0000194 <doTPAUSE>
c0017c98:	eb 01                	jmp    c0017c9b <HalSystemIdle()+0x75>
c0017c9a:	f4                   	hlt    
c0017c9b:	90                   	nop
c0017c9c:	83 c4 14             	add    esp,0x14
c0017c9f:	5b                   	pop    ebx
c0017ca0:	5e                   	pop    esi
c0017ca1:	c3                   	ret    

c0017ca2 <displayProgramFault(char const*)>:
c0017ca2:	83 ec 0c             	sub    esp,0xc
c0017ca5:	83 ec 0c             	sub    esp,0xc
c0017ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cac:	e8 59 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017cb1:	83 c4 10             	add    esp,0x10
c0017cb4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc4:	85 c0                	test   eax,eax
c0017cc6:	74 21                	je     c0017ce9 <displayProgramFault(char const*)+0x47>
c0017cc8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ccf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cd8:	6a 04                	push   0x4
c0017cda:	6a 0f                	push   0xf
c0017cdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ce0:	50                   	push   eax
c0017ce1:	e8 38 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	90                   	nop
c0017cea:	83 c4 0c             	add    esp,0xc
c0017ced:	c3                   	ret    

c0017cee <gpFault(regs*, void*)>:
c0017cee:	83 ec 1c             	sub    esp,0x1c
c0017cf1:	c7 05 74 c7 02 c0 44 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017144
c0017cfb:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d00:	85 c0                	test   eax,eax
c0017d02:	74 1e                	je     c0017d22 <gpFault(regs*, void*)+0x34>
c0017d04:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d09:	83 ec 0c             	sub    esp,0xc
c0017d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d10:	ff d0                	call   eax
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d19:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d1e:	85 c0                	test   eax,eax
c0017d20:	75 2e                	jne    c0017d50 <gpFault(regs*, void*)+0x62>
c0017d22:	83 ec 0c             	sub    esp,0xc
c0017d25:	68 1a 2c 02 c0       	push   0xc0022c1a
c0017d2a:	e8 73 ff ff ff       	call   c0017ca2 <displayProgramFault(char const*)>
c0017d2f:	83 c4 10             	add    esp,0x10
c0017d32:	83 ec 0c             	sub    esp,0xc
c0017d35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d39:	e8 63 fb ff ff       	call   c00178a1 <displayDebugInfo(regs*)>
c0017d3e:	83 c4 10             	add    esp,0x10
c0017d41:	83 ec 0c             	sub    esp,0xc
c0017d44:	6a 00                	push   0x0
c0017d46:	e8 99 ed ff ff       	call   c0016ae4 <Thr::terminateFromIRQ(int)>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	eb 01                	jmp    c0017d51 <gpFault(regs*, void*)+0x63>
c0017d50:	90                   	nop
c0017d51:	83 c4 1c             	add    esp,0x1c
c0017d54:	c3                   	ret    

c0017d55 <pgFault(regs*, void*)>:
c0017d55:	83 ec 1c             	sub    esp,0x1c
c0017d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d5c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d5f:	0f 20 d0             	mov    eax,cr2
c0017d62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d6a:	83 ec 04             	sub    esp,0x4
c0017d6d:	52                   	push   edx
c0017d6e:	50                   	push   eax
c0017d6f:	68 f8 2c 02 c0       	push   0xc0022cf8
c0017d74:	e8 91 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d79:	83 c4 10             	add    esp,0x10
c0017d7c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d83:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d86:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d8c:	0f 20 d2             	mov    edx,cr2
c0017d8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d97:	83 ec 08             	sub    esp,0x8
c0017d9a:	52                   	push   edx
c0017d9b:	50                   	push   eax
c0017d9c:	e8 d9 25 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	0f b6 c0             	movzx  eax,al
c0017da7:	85 c0                	test   eax,eax
c0017da9:	75 2e                	jne    c0017dd9 <pgFault(regs*, void*)+0x84>
c0017dab:	83 ec 0c             	sub    esp,0xc
c0017dae:	68 33 2c 02 c0       	push   0xc0022c33
c0017db3:	e8 ea fe ff ff       	call   c0017ca2 <displayProgramFault(char const*)>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	83 ec 0c             	sub    esp,0xc
c0017dbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dc2:	e8 da fa ff ff       	call   c00178a1 <displayDebugInfo(regs*)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	83 ec 0c             	sub    esp,0xc
c0017dcd:	6a 00                	push   0x0
c0017dcf:	e8 10 ed ff ff       	call   c0016ae4 <Thr::terminateFromIRQ(int)>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	eb 01                	jmp    c0017dda <pgFault(regs*, void*)+0x85>
c0017dd9:	90                   	nop
c0017dda:	83 c4 1c             	add    esp,0x1c
c0017ddd:	c3                   	ret    

c0017dde <otherISRHandler(regs*, void*)>:
c0017dde:	83 ec 0c             	sub    esp,0xc
c0017de1:	83 ec 0c             	sub    esp,0xc
c0017de4:	68 20 2d 02 c0       	push   0xc0022d20
c0017de9:	e8 b4 fe ff ff       	call   c0017ca2 <displayProgramFault(char const*)>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017df8:	e8 a4 fa ff ff       	call   c00178a1 <displayDebugInfo(regs*)>
c0017dfd:	83 c4 10             	add    esp,0x10
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	6a 00                	push   0x0
c0017e05:	e8 da ec ff ff       	call   c0016ae4 <Thr::terminateFromIRQ(int)>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	90                   	nop
c0017e0e:	83 c4 0c             	add    esp,0xc
c0017e11:	c3                   	ret    

c0017e12 <opcodeFault(regs*, void*)>:
c0017e12:	55                   	push   ebp
c0017e13:	89 e5                	mov    ebp,esp
c0017e15:	83 ec 08             	sub    esp,0x8
c0017e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e1e:	83 ec 08             	sub    esp,0x8
c0017e21:	50                   	push   eax
c0017e22:	68 3e 2c 02 c0       	push   0xc0022c3e
c0017e27:	e8 de 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e3a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e40:	0f b6 c0             	movzx  eax,al
c0017e43:	85 c0                	test   eax,eax
c0017e45:	74 21                	je     c0017e68 <opcodeFault(regs*, void*)+0x56>
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	68 48 2d 02 c0       	push   0xc0022d48
c0017e4f:	e8 b6 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e5d:	8d 50 19             	lea    edx,[eax+0x19]
c0017e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e63:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e66:	eb 2b                	jmp    c0017e93 <opcodeFault(regs*, void*)+0x81>
c0017e68:	83 ec 0c             	sub    esp,0xc
c0017e6b:	68 4c 2c 02 c0       	push   0xc0022c4c
c0017e70:	e8 2d fe ff ff       	call   c0017ca2 <displayProgramFault(char const*)>
c0017e75:	83 c4 10             	add    esp,0x10
c0017e78:	83 ec 0c             	sub    esp,0xc
c0017e7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e7e:	e8 1e fa ff ff       	call   c00178a1 <displayDebugInfo(regs*)>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	83 ec 0c             	sub    esp,0xc
c0017e89:	6a 00                	push   0x0
c0017e8b:	e8 54 ec ff ff       	call   c0016ae4 <Thr::terminateFromIRQ(int)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	c9                   	leave  
c0017e94:	c3                   	ret    

c0017e95 <i386SaveCoprocessor(void*)>:
c0017e95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e99:	83 c0 3f             	add    eax,0x3f
c0017e9c:	83 e0 c0             	and    eax,0xffffffc0
c0017e9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ea3:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017ea9 <i386LoadCoprocessor(void*)>:
c0017ea9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ead:	83 c0 3f             	add    eax,0x3f
c0017eb0:	83 e0 c0             	and    eax,0xffffffc0
c0017eb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017eb7:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017ebd <x87EmulHandler(regs*, void*)>:
c0017ebd:	53                   	push   ebx
c0017ebe:	83 ec 08             	sub    esp,0x8
c0017ec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ec6:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017eca:	74 10                	je     c0017edc <x87EmulHandler(regs*, void*)+0x1f>
c0017ecc:	83 ec 0c             	sub    esp,0xc
c0017ecf:	68 59 2c 02 c0       	push   0xc0022c59
c0017ed4:	e8 8e 96 ff ff       	call   c0011567 <KePanic(char const*)>
c0017ed9:	83 c4 10             	add    esp,0x10
c0017edc:	0f 20 c0             	mov    eax,cr0
c0017edf:	a8 08                	test   al,0x8
c0017ee1:	74 59                	je     c0017f3c <x87EmulHandler(regs*, void*)+0x7f>
c0017ee3:	0f 06                	clts   
c0017ee5:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017eea:	85 c0                	test   eax,eax
c0017eec:	74 0e                	je     c0017efc <x87EmulHandler(regs*, void*)+0x3f>
c0017eee:	83 ec 0c             	sub    esp,0xc
c0017ef1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ef4:	e8 9c ff ff ff       	call   c0017e95 <i386SaveCoprocessor(void*)>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f02:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f06:	75 12                	jne    c0017f1a <x87EmulHandler(regs*, void*)+0x5d>
c0017f08:	83 ec 0c             	sub    esp,0xc
c0017f0b:	68 40 02 00 00       	push   0x240
c0017f10:	e8 be fb fe ff       	call   c0007ad3 <malloc>
c0017f15:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f18:	eb 10                	jmp    c0017f2a <x87EmulHandler(regs*, void*)+0x6d>
c0017f1a:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f1f:	83 ec 0c             	sub    esp,0xc
c0017f22:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f25:	e8 7f ff ff ff       	call   c0017ea9 <i386LoadCoprocessor(void*)>
c0017f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f2f:	83 c4 10             	add    esp,0x10
c0017f32:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f37:	83 c4 08             	add    esp,0x8
c0017f3a:	5b                   	pop    ebx
c0017f3b:	c3                   	ret    
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	68 6d 2c 02 c0       	push   0xc0022c6d
c0017f44:	e8 c1 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017f49:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f51:	83 c4 18             	add    esp,0x18
c0017f54:	5b                   	pop    ebx
c0017f55:	e9 8a eb ff ff       	jmp    c0016ae4 <Thr::terminateFromIRQ(int)>

c0017f5a <HalInitialiseCoprocessor()>:
c0017f5a:	83 ec 10             	sub    esp,0x10
c0017f5d:	6a 00                	push   0x0
c0017f5f:	68 bd 7e 01 c0       	push   0xc0017ebd
c0017f64:	6a 07                	push   0x7
c0017f66:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f70:	e8 61 4f ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f75:	e8 a6 70 00 00       	call   c001f020 <avxDetect>
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	85 c0                	test   eax,eax
c0017f7f:	74 1c                	je     c0017f9d <HalInitialiseCoprocessor()+0x43>
c0017f81:	c7 05 70 c7 02 c0 4a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f04a
c0017f8b:	c7 05 6c c7 02 c0 5b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f05b
c0017f95:	83 c4 0c             	add    esp,0xc
c0017f98:	e9 cf 70 00 00       	jmp    c001f06c <avxInit>
c0017f9d:	e8 0e 74 00 00       	call   c001f3b0 <absolutelyNoChanceInHell>
c0017fa2:	85 c0                	test   eax,eax
c0017fa4:	74 1c                	je     c0017fc2 <HalInitialiseCoprocessor()+0x68>
c0017fa6:	c7 05 70 c7 02 c0 c8 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3c8
c0017fb0:	c7 05 6c c7 02 c0 d0 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3d0
c0017fba:	83 c4 0c             	add    esp,0xc
c0017fbd:	e9 16 74 00 00       	jmp    c001f3d8 <sseInit>
c0017fc2:	e8 2f 74 00 00       	call   c001f3f6 <x87Detect>
c0017fc7:	85 c0                	test   eax,eax
c0017fc9:	74 1c                	je     c0017fe7 <HalInitialiseCoprocessor()+0x8d>
c0017fcb:	c7 05 70 c7 02 c0 11 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f411
c0017fd5:	c7 05 6c c7 02 c0 18 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f418
c0017fdf:	83 c4 0c             	add    esp,0xc
c0017fe2:	e9 38 74 00 00       	jmp    c001f41f <x87Init>
c0017fe7:	c7 05 70 c7 02 c0 6e 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001786e
c0017ff1:	c7 05 6c c7 02 c0 6e 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001786e
c0017ffb:	0f 20 c0             	mov    eax,cr0
c0017ffe:	83 c8 04             	or     eax,0x4
c0018001:	0f 22 c0             	mov    cr0,eax
c0018004:	83 c4 0c             	add    esp,0xc
c0018007:	c3                   	ret    

c0018008 <HalPanic(char const*)>:
c0018008:	53                   	push   ebx
c0018009:	83 ec 10             	sub    esp,0x10
c001800c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018010:	fa                   	cli    
c0018011:	53                   	push   ebx
c0018012:	68 83 2c 02 c0       	push   0xc0022c83
c0018017:	e8 ee 28 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001801c:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	85 c0                	test   eax,eax
c0018026:	74 09                	je     c0018031 <HalPanic(char const*)+0x29>
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	53                   	push   ebx
c001802c:	ff d0                	call   eax
c001802e:	83 c4 10             	add    esp,0x10
c0018031:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018036:	85 c0                	test   eax,eax
c0018038:	0f 84 dc 00 00 00    	je     c001811a <HalPanic(char const*)+0x112>
c001803e:	52                   	push   edx
c001803f:	6a 01                	push   0x1
c0018041:	6a 0f                	push   0xf
c0018043:	50                   	push   eax
c0018044:	e8 81 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018049:	59                   	pop    ecx
c001804a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018050:	e8 65 07 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0018055:	58                   	pop    eax
c0018056:	5a                   	pop    edx
c0018057:	68 64 0e 02 c0       	push   0xc0020e64
c001805c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018062:	e8 9b 05 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0018067:	83 c4 0c             	add    esp,0xc
c001806a:	6a 01                	push   0x1
c001806c:	6a 0f                	push   0xf
c001806e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018074:	e8 51 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018079:	59                   	pop    ecx
c001807a:	58                   	pop    eax
c001807b:	68 9c 2c 02 c0       	push   0xc0022c9c
c0018080:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018086:	e8 21 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001808b:	83 c4 0c             	add    esp,0xc
c001808e:	6a 0f                	push   0xf
c0018090:	6a 01                	push   0x1
c0018092:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018098:	e8 2d 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001809d:	58                   	pop    eax
c001809e:	5a                   	pop    edx
c001809f:	68 a5 2c 02 c0       	push   0xc0022ca5
c00180a4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180aa:	e8 fd 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180af:	83 c4 0c             	add    esp,0xc
c00180b2:	6a 01                	push   0x1
c00180b4:	6a 0f                	push   0xf
c00180b6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180bc:	e8 09 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180c1:	59                   	pop    ecx
c00180c2:	58                   	pop    eax
c00180c3:	68 e9 2c 02 c0       	push   0xc0022ce9
c00180c8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ce:	e8 d9 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180d3:	58                   	pop    eax
c00180d4:	5a                   	pop    edx
c00180d5:	68 b2 2c 02 c0       	push   0xc0022cb2
c00180da:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180e0:	e8 c7 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180e5:	59                   	pop    ecx
c00180e6:	58                   	pop    eax
c00180e7:	68 ec 2c 02 c0       	push   0xc0022cec
c00180ec:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f2:	e8 b5 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180f7:	58                   	pop    eax
c00180f8:	5a                   	pop    edx
c00180f9:	53                   	push   ebx
c00180fa:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018100:	e8 a7 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018105:	59                   	pop    ecx
c0018106:	5b                   	pop    ebx
c0018107:	68 e9 2c 02 c0       	push   0xc0022ce9
c001810c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018112:	e8 95 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018117:	83 c4 10             	add    esp,0x10
c001811a:	eb fe                	jmp    c001811a <HalPanic(char const*)+0x112>

c001811c <HalQueryPerformanceCounter()>:
c001811c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018121:	31 d2                	xor    edx,edx
c0018123:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018129:	31 c0                	xor    eax,eax
c001812b:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018132:	74 02                	je     c0018136 <HalQueryPerformanceCounter()+0x1a>
c0018134:	0f 31                	rdtsc  
c0018136:	c3                   	ret    

c0018137 <HalInitialise()>:
c0018137:	53                   	push   ebx
c0018138:	83 ec 08             	sub    esp,0x8
c001813b:	e8 cd 4f ff ff       	call   c000d10d <setupINTS()>
c0018140:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018145:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c001814c:	75 0f                	jne    c001815d <HalInitialise()+0x26>
c001814e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018154:	83 e2 fe             	and    edx,0xfffffffe
c0018157:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001815d:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018164:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001816a:	83 e2 fe             	and    edx,0xfffffffe
c001816d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018173:	e8 a0 02 00 00       	call   c0018418 <picOpen()>
c0018178:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001817f:	74 0a                	je     c001818b <HalInitialise()+0x54>
c0018181:	e8 e2 01 00 00       	call   c0018368 <picDisable()>
c0018186:	e8 0d 68 00 00       	call   c001e998 <apicOpen()>
c001818b:	50                   	push   eax
c001818c:	bb 0f 00 00 00       	mov    ebx,0xf
c0018191:	6a 00                	push   0x0
c0018193:	68 de 7d 01 c0       	push   0xc0017dde
c0018198:	6a 00                	push   0x0
c001819a:	e8 37 4d ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001819f:	83 c4 0c             	add    esp,0xc
c00181a2:	6a 00                	push   0x0
c00181a4:	68 de 7d 01 c0       	push   0xc0017dde
c00181a9:	6a 01                	push   0x1
c00181ab:	e8 26 4d ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181b0:	83 c4 0c             	add    esp,0xc
c00181b3:	6a 00                	push   0x0
c00181b5:	68 6f 78 01 c0       	push   0xc001786f
c00181ba:	6a 02                	push   0x2
c00181bc:	e8 15 4d ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181c1:	83 c4 0c             	add    esp,0xc
c00181c4:	6a 00                	push   0x0
c00181c6:	68 de 7d 01 c0       	push   0xc0017dde
c00181cb:	6a 03                	push   0x3
c00181cd:	e8 04 4d ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d2:	83 c4 0c             	add    esp,0xc
c00181d5:	6a 00                	push   0x0
c00181d7:	68 de 7d 01 c0       	push   0xc0017dde
c00181dc:	6a 04                	push   0x4
c00181de:	e8 f3 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181e3:	83 c4 0c             	add    esp,0xc
c00181e6:	6a 00                	push   0x0
c00181e8:	68 de 7d 01 c0       	push   0xc0017dde
c00181ed:	6a 05                	push   0x5
c00181ef:	e8 e2 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f4:	83 c4 0c             	add    esp,0xc
c00181f7:	6a 00                	push   0x0
c00181f9:	68 12 7e 01 c0       	push   0xc0017e12
c00181fe:	6a 06                	push   0x6
c0018200:	e8 d1 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018205:	83 c4 0c             	add    esp,0xc
c0018208:	6a 00                	push   0x0
c001820a:	68 88 78 01 c0       	push   0xc0017888
c001820f:	6a 08                	push   0x8
c0018211:	e8 c0 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018216:	83 c4 0c             	add    esp,0xc
c0018219:	6a 00                	push   0x0
c001821b:	68 de 7d 01 c0       	push   0xc0017dde
c0018220:	6a 09                	push   0x9
c0018222:	e8 af 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018227:	83 c4 0c             	add    esp,0xc
c001822a:	6a 00                	push   0x0
c001822c:	68 de 7d 01 c0       	push   0xc0017dde
c0018231:	6a 0a                	push   0xa
c0018233:	e8 9e 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018238:	83 c4 0c             	add    esp,0xc
c001823b:	6a 00                	push   0x0
c001823d:	68 de 7d 01 c0       	push   0xc0017dde
c0018242:	6a 0b                	push   0xb
c0018244:	e8 8d 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018249:	83 c4 0c             	add    esp,0xc
c001824c:	6a 00                	push   0x0
c001824e:	68 ee 7c 01 c0       	push   0xc0017cee
c0018253:	6a 0d                	push   0xd
c0018255:	e8 7c 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825a:	83 c4 0c             	add    esp,0xc
c001825d:	6a 00                	push   0x0
c001825f:	68 55 7d 01 c0       	push   0xc0017d55
c0018264:	6a 0e                	push   0xe
c0018266:	e8 6b 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	50                   	push   eax
c001826f:	6a 00                	push   0x0
c0018271:	68 de 7d 01 c0       	push   0xc0017dde
c0018276:	53                   	push   ebx
c0018277:	43                   	inc    ebx
c0018278:	e8 59 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001827d:	83 c4 10             	add    esp,0x10
c0018280:	83 fb 1e             	cmp    ebx,0x1e
c0018283:	75 e9                	jne    c001826e <HalInitialise()+0x137>
c0018285:	50                   	push   eax
c0018286:	6a 00                	push   0x0
c0018288:	68 1b 2a 01 c0       	push   0xc0012a1b
c001828d:	6a 60                	push   0x60
c001828f:	e8 42 4c ff ff       	call   c000ced6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018294:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018299:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182a3:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00182aa:	e8 24 f8 fe ff       	call   c0007ad3 <malloc>
c00182af:	89 04 24             	mov    DWORD PTR [esp],eax
c00182b2:	89 c3                	mov    ebx,eax
c00182b4:	e8 37 09 00 00       	call   c0018bf0 <RTC::RTC()>
c00182b9:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00182c3:	5a                   	pop    edx
c00182c4:	59                   	pop    ecx
c00182c5:	53                   	push   ebx
c00182c6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182cc:	e8 cf 46 ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c00182d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182d3:	6a 00                	push   0x0
c00182d5:	6a 00                	push   0x0
c00182d7:	6a 00                	push   0x0
c00182d9:	53                   	push   ebx
c00182da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182dd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182e2:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00182e8:	83 c4 28             	add    esp,0x28
c00182eb:	5b                   	pop    ebx
c00182ec:	c3                   	ret    

c00182ed <HalMakeBeep(int)>:
c00182ed:	53                   	push   ebx
c00182ee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00182f2:	85 db                	test   ebx,ebx
c00182f4:	75 07                	jne    c00182fd <HalMakeBeep(int)+0x10>
c00182f6:	e4 61                	in     al,0x61
c00182f8:	83 e0 fc             	and    eax,0xfffffffc
c00182fb:	eb 26                	jmp    c0018323 <HalMakeBeep(int)+0x36>
c00182fd:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018302:	99                   	cdq    
c0018303:	f7 fb                	idiv   ebx
c0018305:	89 c1                	mov    ecx,eax
c0018307:	b0 b6                	mov    al,0xb6
c0018309:	e6 43                	out    0x43,al
c001830b:	88 c8                	mov    al,cl
c001830d:	e6 42                	out    0x42,al
c001830f:	89 c8                	mov    eax,ecx
c0018311:	c1 e8 08             	shr    eax,0x8
c0018314:	e6 42                	out    0x42,al
c0018316:	e4 61                	in     al,0x61
c0018318:	89 c2                	mov    edx,eax
c001831a:	83 ca 03             	or     edx,0x3
c001831d:	38 d0                	cmp    al,dl
c001831f:	74 04                	je     c0018325 <HalMakeBeep(int)+0x38>
c0018321:	88 d0                	mov    al,dl
c0018323:	e6 61                	out    0x61,al
c0018325:	5b                   	pop    ebx
c0018326:	c3                   	ret    

c0018327 <HalGetRand()>:
c0018327:	31 c0                	xor    eax,eax
c0018329:	c3                   	ret    

c001832a <HalEndOfInterrupt(int)>:
c001832a:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018331:	74 23                	je     c0018356 <HalEndOfInterrupt(int)+0x2c>
c0018333:	83 ec 14             	sub    esp,0x14
c0018336:	6a 1b                	push   0x1b
c0018338:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001833e:	e8 9f ed fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0018343:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018348:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018352:	83 c4 1c             	add    esp,0x1c
c0018355:	c3                   	ret    
c0018356:	e9 41 02 00 00       	jmp    c001859c <picEOI(int)>

c001835b <HalRestart()>:
c001835b:	c3                   	ret    

c001835c <HalShutdown()>:
c001835c:	c3                   	ret    

c001835d <HalSleep()>:
c001835d:	c3                   	ret    
c001835e:	66 90                	xchg   ax,ax

c0018360 <picIoWait()>:
c0018360:	eb 00                	jmp    c0018362 <picIoWait()+0x2>
c0018362:	eb 00                	jmp    c0018364 <picIoWait()+0x4>
c0018364:	90                   	nop
c0018365:	c3                   	ret    
c0018366:	66 90                	xchg   ax,ax

c0018368 <picDisable()>:
c0018368:	83 ec 10             	sub    esp,0x10
c001836b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018372:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018377:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001837b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018380:	ee                   	out    dx,al
c0018381:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018388:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001838d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018391:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018396:	ee                   	out    dx,al
c0018397:	90                   	nop
c0018398:	83 c4 10             	add    esp,0x10
c001839b:	c3                   	ret    

c001839c <picGetIRQReg(int)>:
c001839c:	83 ec 10             	sub    esp,0x10
c001839f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183a3:	0f b6 c0             	movzx  eax,al
c00183a6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00183ad:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00183b1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00183b5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00183ba:	ee                   	out    dx,al
c00183bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183bf:	0f b6 c0             	movzx  eax,al
c00183c2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00183c9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183d1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00183d6:	ee                   	out    dx,al
c00183d7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00183de:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00183e3:	89 c2                	mov    edx,eax
c00183e5:	ec                   	in     al,dx
c00183e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00183ea:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183ee:	0f b6 c0             	movzx  eax,al
c00183f1:	c1 e0 08             	shl    eax,0x8
c00183f4:	89 c1                	mov    ecx,eax
c00183f6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00183fd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018402:	89 c2                	mov    edx,eax
c0018404:	ec                   	in     al,dx
c0018405:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018409:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001840d:	0f b6 c0             	movzx  eax,al
c0018410:	09 c8                	or     eax,ecx
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	c3                   	ret    
c0018416:	66 90                	xchg   ax,ax

c0018418 <picOpen()>:
c0018418:	83 ec 50             	sub    esp,0x50
c001841b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018422:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018427:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001842b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001842f:	ee                   	out    dx,al
c0018430:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018437:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001843c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018444:	ee                   	out    dx,al
c0018445:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001844d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018455:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001845c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018460:	89 c2                	mov    edx,eax
c0018462:	ec                   	in     al,dx
c0018463:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018467:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001846b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001846f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001847a:	89 c2                	mov    edx,eax
c001847c:	ec                   	in     al,dx
c001847d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018481:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018485:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018489:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018490:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018495:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018499:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001849d:	ee                   	out    dx,al
c001849e:	e8 bd fe ff ff       	call   c0018360 <picIoWait()>
c00184a3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00184aa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00184af:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00184b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184b7:	ee                   	out    dx,al
c00184b8:	e8 a3 fe ff ff       	call   c0018360 <picIoWait()>
c00184bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00184c1:	0f b6 c0             	movzx  eax,al
c00184c4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00184cb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184d7:	ee                   	out    dx,al
c00184d8:	e8 83 fe ff ff       	call   c0018360 <picIoWait()>
c00184dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00184e1:	0f b6 c0             	movzx  eax,al
c00184e4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00184eb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00184ef:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00184f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00184f7:	ee                   	out    dx,al
c00184f8:	e8 63 fe ff ff       	call   c0018360 <picIoWait()>
c00184fd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018504:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018509:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001850d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018511:	ee                   	out    dx,al
c0018512:	e8 49 fe ff ff       	call   c0018360 <picIoWait()>
c0018517:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001851e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018523:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018527:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001852b:	ee                   	out    dx,al
c001852c:	e8 2f fe ff ff       	call   c0018360 <picIoWait()>
c0018531:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018538:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001853d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018541:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018545:	ee                   	out    dx,al
c0018546:	e8 15 fe ff ff       	call   c0018360 <picIoWait()>
c001854b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018552:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018557:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001855b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001855f:	ee                   	out    dx,al
c0018560:	e8 fb fd ff ff       	call   c0018360 <picIoWait()>
c0018565:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001856a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018571:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018575:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018579:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001857d:	ee                   	out    dx,al
c001857e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018583:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001858a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001858e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018592:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018596:	ee                   	out    dx,al
c0018597:	90                   	nop
c0018598:	83 c4 50             	add    esp,0x50
c001859b:	c3                   	ret    

c001859c <picEOI(int)>:
c001859c:	83 ec 10             	sub    esp,0x10
c001859f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185a4:	75 1e                	jne    c00185c4 <picEOI(int)+0x28>
c00185a6:	6a 0b                	push   0xb
c00185a8:	e8 ef fd ff ff       	call   c001839c <picGetIRQReg(int)>
c00185ad:	83 c4 04             	add    esp,0x4
c00185b0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00185b5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00185ba:	25 80 00 00 00       	and    eax,0x80
c00185bf:	74 73                	je     c0018634 <picEOI(int)+0x98>
c00185c1:	8d 76 00             	lea    esi,[esi+0x0]
c00185c4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00185c9:	75 31                	jne    c00185fc <picEOI(int)+0x60>
c00185cb:	6a 0b                	push   0xb
c00185cd:	e8 ca fd ff ff       	call   c001839c <picGetIRQReg(int)>
c00185d2:	83 c4 04             	add    esp,0x4
c00185d5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00185da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185de:	98                   	cwde   
c00185df:	85 c0                	test   eax,eax
c00185e1:	78 19                	js     c00185fc <picEOI(int)+0x60>
c00185e3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00185ea:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00185ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00185f3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00185f8:	ee                   	out    dx,al
c00185f9:	eb 3d                	jmp    c0018638 <picEOI(int)+0x9c>
c00185fb:	90                   	nop
c00185fc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018601:	7e 19                	jle    c001861c <picEOI(int)+0x80>
c0018603:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001860a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001860f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018613:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018618:	ee                   	out    dx,al
c0018619:	8d 76 00             	lea    esi,[esi+0x0]
c001861c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018623:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018628:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001862c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018631:	ee                   	out    dx,al
c0018632:	eb 04                	jmp    c0018638 <picEOI(int)+0x9c>
c0018634:	90                   	nop
c0018635:	8d 76 00             	lea    esi,[esi+0x0]
c0018638:	83 c4 10             	add    esp,0x10
c001863b:	c3                   	ret    

c001863c <RTC::open(int, int, void*)>:
c001863c:	31 c0                	xor    eax,eax
c001863e:	c3                   	ret    
c001863f:	90                   	nop

c0018640 <RTC::close(int, int, void*)>:
c0018640:	31 c0                	xor    eax,eax
c0018642:	c3                   	ret    
c0018643:	90                   	nop

c0018644 <RTC::timeInSecondsUTC()>:
c0018644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018648:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001864e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018654:	c3                   	ret    
c0018655:	90                   	nop

c0018656 <RTC::timeInDatetimeUTC()>:
c0018656:	53                   	push   ebx
c0018657:	83 ec 14             	sub    esp,0x14
c001865a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001865e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018662:	8b 10                	mov    edx,DWORD PTR [eax]
c0018664:	50                   	push   eax
c0018665:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018668:	83 c4 0c             	add    esp,0xc
c001866b:	52                   	push   edx
c001866c:	50                   	push   eax
c001866d:	53                   	push   ebx
c001866e:	e8 a1 40 ff ff       	call   c000c714 <secondsToDatetime(unsigned long long)>
c0018673:	89 d8                	mov    eax,ebx
c0018675:	83 c4 14             	add    esp,0x14
c0018678:	5b                   	pop    ebx
c0018679:	c2 04 00             	ret    0x4

c001867c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001867c:	56                   	push   esi
c001867d:	53                   	push   ebx
c001867e:	83 ec 14             	sub    esp,0x14
c0018681:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018685:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018687:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001868a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001868e:	52                   	push   edx
c001868f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018697:	50                   	push   eax
c0018698:	e8 77 40 ff ff       	call   c000c714 <secondsToDatetime(unsigned long long)>
c001869d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00186a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00186ad:	89 f0                	mov    eax,esi
c00186af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00186b3:	83 c4 20             	add    esp,0x20
c00186b6:	5b                   	pop    ebx
c00186b7:	5e                   	pop    esi
c00186b8:	ff e0                	jmp    eax

c00186ba <RTC::~RTC()>:
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c00186c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186c6:	89 10                	mov    DWORD PTR [eax],edx
c00186c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186cc:	83 ec 0c             	sub    esp,0xc
c00186cf:	50                   	push   eax
c00186d0:	e8 cb 3d ff ff       	call   c000c4a0 <Clock::~Clock()>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	90                   	nop
c00186d9:	83 c4 0c             	add    esp,0xc
c00186dc:	c3                   	ret    
c00186dd:	90                   	nop

c00186de <RTC::~RTC()>:
c00186de:	83 ec 0c             	sub    esp,0xc
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186e8:	e8 cd ff ff ff       	call   c00186ba <RTC::~RTC()>
c00186ed:	83 c4 10             	add    esp,0x10
c00186f0:	83 ec 08             	sub    esp,0x8
c00186f3:	68 60 01 00 00       	push   0x160
c00186f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186fc:	e8 0b 21 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	83 c4 0c             	add    esp,0xc
c0018707:	c3                   	ret    

c0018708 <RTC::get_update_in_progress_flag()>:
c0018708:	83 ec 14             	sub    esp,0x14
c001870b:	6a 0a                	push   0xa
c001870d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018713:	e8 82 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018718:	83 c4 1c             	add    esp,0x1c
c001871b:	0f b6 c0             	movzx  eax,al
c001871e:	c1 e8 07             	shr    eax,0x7
c0018721:	c3                   	ret    

c0018722 <RTC::completeRTCRefresh()>:
c0018722:	55                   	push   ebp
c0018723:	57                   	push   edi
c0018724:	56                   	push   esi
c0018725:	53                   	push   ebx
c0018726:	83 ec 3c             	sub    esp,0x3c
c0018729:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018736:	e8 cd ff ff ff       	call   c0018708 <RTC::get_update_in_progress_flag()>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	84 c0                	test   al,al
c0018740:	74 0e                	je     c0018750 <RTC::completeRTCRefresh()+0x2e>
c0018742:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018748:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001874e:	73 df                	jae    c001872f <RTC::completeRTCRefresh()+0xd>
c0018750:	50                   	push   eax
c0018751:	50                   	push   eax
c0018752:	6a 00                	push   0x0
c0018754:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001875a:	e8 3b ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001875f:	89 c7                	mov    edi,eax
c0018761:	58                   	pop    eax
c0018762:	5a                   	pop    edx
c0018763:	6a 02                	push   0x2
c0018765:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001876b:	e8 2a ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018770:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018774:	59                   	pop    ecx
c0018775:	5b                   	pop    ebx
c0018776:	6a 04                	push   0x4
c0018778:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001877e:	e8 17 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018783:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018787:	5e                   	pop    esi
c0018788:	5d                   	pop    ebp
c0018789:	6a 07                	push   0x7
c001878b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018791:	e8 04 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018796:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001879a:	58                   	pop    eax
c001879b:	5a                   	pop    edx
c001879c:	6a 08                	push   0x8
c001879e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187a4:	e8 f1 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187a9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00187ad:	59                   	pop    ecx
c00187ae:	5b                   	pop    ebx
c00187af:	6a 09                	push   0x9
c00187b1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b7:	e8 de e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187bc:	0f b6 c0             	movzx  eax,al
c00187bf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187cc:	83 ec 0c             	sub    esp,0xc
c00187cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187d3:	e8 30 ff ff ff       	call   c0018708 <RTC::get_update_in_progress_flag()>
c00187d8:	83 c4 10             	add    esp,0x10
c00187db:	84 c0                	test   al,al
c00187dd:	74 0e                	je     c00187ed <RTC::completeRTCRefresh()+0xcb>
c00187df:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187e5:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187eb:	73 df                	jae    c00187cc <RTC::completeRTCRefresh()+0xaa>
c00187ed:	51                   	push   ecx
c00187ee:	51                   	push   ecx
c00187ef:	6a 00                	push   0x0
c00187f1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187f7:	e8 9e e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187fc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018800:	5b                   	pop    ebx
c0018801:	5e                   	pop    esi
c0018802:	6a 02                	push   0x2
c0018804:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880a:	e8 8b e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001880f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018813:	5d                   	pop    ebp
c0018814:	58                   	pop    eax
c0018815:	6a 04                	push   0x4
c0018817:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881d:	e8 78 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018822:	88 c3                	mov    bl,al
c0018824:	58                   	pop    eax
c0018825:	5a                   	pop    edx
c0018826:	6a 07                	push   0x7
c0018828:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001882e:	e8 67 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018833:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018837:	59                   	pop    ecx
c0018838:	5e                   	pop    esi
c0018839:	6a 08                	push   0x8
c001883b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018841:	e8 54 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018846:	5d                   	pop    ebp
c0018847:	89 c6                	mov    esi,eax
c0018849:	58                   	pop    eax
c001884a:	6a 09                	push   0x9
c001884c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018852:	e8 43 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018857:	89 f9                	mov    ecx,edi
c0018859:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001885d:	83 c4 10             	add    esp,0x10
c0018860:	0f b6 e8             	movzx  ebp,al
c0018863:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018868:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001886c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018870:	74 27                	je     c0018899 <RTC::completeRTCRefresh()+0x177>
c0018872:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018876:	89 f0                	mov    eax,esi
c0018878:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001887c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018880:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018884:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018888:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001888c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018890:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018894:	e9 2d ff ff ff       	jmp    c00187c6 <RTC::completeRTCRefresh()+0xa4>
c0018899:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001889e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188a2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188a6:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00188aa:	75 c6                	jne    c0018872 <RTC::completeRTCRefresh()+0x150>
c00188ac:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00188b1:	89 f1                	mov    ecx,esi
c00188b3:	0f b6 fb             	movzx  edi,bl
c00188b6:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188ba:	0f b6 c9             	movzx  ecx,cl
c00188bd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188c1:	89 f1                	mov    ecx,esi
c00188c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188c7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188cb:	0f 94 c2             	sete   dl
c00188ce:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00188d2:	0f 94 c0             	sete   al
c00188d5:	21 d0                	and    eax,edx
c00188d7:	31 d2                	xor    edx,edx
c00188d9:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00188dd:	0f 94 c2             	sete   dl
c00188e0:	85 c2                	test   edx,eax
c00188e2:	74 8e                	je     c0018872 <RTC::completeRTCRefresh()+0x150>
c00188e4:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00188e8:	75 88                	jne    c0018872 <RTC::completeRTCRefresh()+0x150>
c00188ea:	52                   	push   edx
c00188eb:	52                   	push   edx
c00188ec:	6a 0b                	push   0xb
c00188ee:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f4:	e8 a1 e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188f9:	83 c4 10             	add    esp,0x10
c00188fc:	a8 04                	test   al,0x4
c00188fe:	75 7a                	jne    c001897a <RTC::completeRTCRefresh()+0x258>
c0018900:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018904:	c1 ef 04             	shr    edi,0x4
c0018907:	83 e6 0f             	and    esi,0xf
c001890a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001890e:	c1 ed 04             	shr    ebp,0x4
c0018911:	6b ed 0a             	imul   ebp,ebp,0xa
c0018914:	c1 ea 04             	shr    edx,0x4
c0018917:	6b d2 0a             	imul   edx,edx,0xa
c001891a:	83 e1 0f             	and    ecx,0xf
c001891d:	01 d1                	add    ecx,edx
c001891f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018923:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018927:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001892b:	c1 ea 04             	shr    edx,0x4
c001892e:	6b d2 0a             	imul   edx,edx,0xa
c0018931:	83 e1 0f             	and    ecx,0xf
c0018934:	01 d1                	add    ecx,edx
c0018936:	89 fa                	mov    edx,edi
c0018938:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001893c:	83 e2 07             	and    edx,0x7
c001893f:	89 d9                	mov    ecx,ebx
c0018941:	6b d2 0a             	imul   edx,edx,0xa
c0018944:	83 e1 0f             	and    ecx,0xf
c0018947:	83 e3 80             	and    ebx,0xffffff80
c001894a:	01 d1                	add    ecx,edx
c001894c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018950:	09 cb                	or     ebx,ecx
c0018952:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018956:	c1 ea 04             	shr    edx,0x4
c0018959:	6b d2 0a             	imul   edx,edx,0xa
c001895c:	83 e1 0f             	and    ecx,0xf
c001895f:	01 d1                	add    ecx,edx
c0018961:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018965:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018969:	c1 ea 04             	shr    edx,0x4
c001896c:	6b d2 0a             	imul   edx,edx,0xa
c001896f:	01 d6                	add    esi,edx
c0018971:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018975:	83 e2 0f             	and    edx,0xf
c0018978:	01 d5                	add    ebp,edx
c001897a:	a8 02                	test   al,0x2
c001897c:	75 15                	jne    c0018993 <RTC::completeRTCRefresh()+0x271>
c001897e:	f6 c3 80             	test   bl,0x80
c0018981:	74 10                	je     c0018993 <RTC::completeRTCRefresh()+0x271>
c0018983:	83 e3 7f             	and    ebx,0x7f
c0018986:	b9 18 00 00 00       	mov    ecx,0x18
c001898b:	8d 43 0c             	lea    eax,[ebx+0xc]
c001898e:	99                   	cdq    
c001898f:	f7 f9                	idiv   ecx
c0018991:	88 d3                	mov    bl,dl
c0018993:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018999:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001899f:	77 06                	ja     c00189a7 <RTC::completeRTCRefresh()+0x285>
c00189a1:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00189a7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189ac:	31 c9                	xor    ecx,ecx
c00189ae:	31 d2                	xor    edx,edx
c00189b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00189b4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00189b8:	89 cd                	mov    ebp,ecx
c00189ba:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c00189be:	c1 e7 10             	shl    edi,0x10
c00189c1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00189c7:	c1 e0 10             	shl    eax,0x10
c00189ca:	09 c5                	or     ebp,eax
c00189cc:	89 e9                	mov    ecx,ebp
c00189ce:	0f b7 c2             	movzx  eax,dx
c00189d1:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00189d5:	09 f8                	or     eax,edi
c00189d7:	89 c2                	mov    edx,eax
c00189d9:	50                   	push   eax
c00189da:	50                   	push   eax
c00189db:	88 d9                	mov    cl,bl
c00189dd:	51                   	push   ecx
c00189de:	52                   	push   edx
c00189df:	e8 ab 3b ff ff       	call   c000c58f <datetimeToSeconds(datetime_t)>
c00189e4:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00189e8:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00189ee:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00189f4:	83 c4 4c             	add    esp,0x4c
c00189f7:	5b                   	pop    ebx
c00189f8:	5e                   	pop    esi
c00189f9:	5f                   	pop    edi
c00189fa:	5d                   	pop    ebp
c00189fb:	c3                   	ret    

c00189fc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00189fc:	55                   	push   ebp
c00189fd:	57                   	push   edi
c00189fe:	56                   	push   esi
c00189ff:	53                   	push   ebx
c0018a00:	83 ec 30             	sub    esp,0x30
c0018a03:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a07:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a0b:	6a 00                	push   0x0
c0018a0d:	6a 00                	push   0x0
c0018a0f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a15:	e8 98 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a1a:	83 c4 0c             	add    esp,0xc
c0018a1d:	6a 00                	push   0x0
c0018a1f:	6a 02                	push   0x2
c0018a21:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a27:	e8 86 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a2c:	89 f8                	mov    eax,edi
c0018a2e:	89 f9                	mov    ecx,edi
c0018a30:	0f b6 c4             	movzx  eax,ah
c0018a33:	31 d2                	xor    edx,edx
c0018a35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a39:	c1 e9 10             	shr    ecx,0x10
c0018a3c:	89 f0                	mov    eax,esi
c0018a3e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a42:	89 f0                	mov    eax,esi
c0018a44:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a48:	0f b6 c4             	movzx  eax,ah
c0018a4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a4f:	89 f0                	mov    eax,esi
c0018a51:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a55:	c1 e8 10             	shr    eax,0x10
c0018a58:	b9 64 00 00 00       	mov    ecx,0x64
c0018a5d:	f7 f1                	div    ecx
c0018a5f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a63:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a67:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a6b:	59                   	pop    ecx
c0018a6c:	5b                   	pop    ebx
c0018a6d:	89 fb                	mov    ebx,edi
c0018a6f:	6a 0b                	push   0xb
c0018a71:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a77:	e8 1e e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	a8 04                	test   al,0x4
c0018a81:	89 c5                	mov    ebp,eax
c0018a83:	75 6e                	jne    c0018af3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018a85:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a89:	31 d2                	xor    edx,edx
c0018a8b:	0f b6 c1             	movzx  eax,cl
c0018a8e:	b9 0a 00 00 00       	mov    ecx,0xa
c0018a93:	f7 f1                	div    ecx
c0018a95:	c1 e0 04             	shl    eax,0x4
c0018a98:	09 d0                	or     eax,edx
c0018a9a:	31 d2                	xor    edx,edx
c0018a9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018aa0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018aa5:	f7 f1                	div    ecx
c0018aa7:	c1 e0 04             	shl    eax,0x4
c0018aaa:	09 d0                	or     eax,edx
c0018aac:	31 d2                	xor    edx,edx
c0018aae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ab2:	0f b6 c3             	movzx  eax,bl
c0018ab5:	f7 f1                	div    ecx
c0018ab7:	c1 e0 04             	shl    eax,0x4
c0018aba:	09 d0                	or     eax,edx
c0018abc:	31 d2                	xor    edx,edx
c0018abe:	89 c3                	mov    ebx,eax
c0018ac0:	89 f0                	mov    eax,esi
c0018ac2:	0f b6 c0             	movzx  eax,al
c0018ac5:	f7 f1                	div    ecx
c0018ac7:	c1 e0 04             	shl    eax,0x4
c0018aca:	09 d0                	or     eax,edx
c0018acc:	31 d2                	xor    edx,edx
c0018ace:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018ad2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ad7:	f7 f1                	div    ecx
c0018ad9:	c1 e0 04             	shl    eax,0x4
c0018adc:	09 d0                	or     eax,edx
c0018ade:	31 d2                	xor    edx,edx
c0018ae0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ae8:	f7 f1                	div    ecx
c0018aea:	c1 e0 04             	shl    eax,0x4
c0018aed:	09 d0                	or     eax,edx
c0018aef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018af3:	83 e5 02             	and    ebp,0x2
c0018af6:	75 1e                	jne    c0018b16 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018af8:	0f b6 c3             	movzx  eax,bl
c0018afb:	83 f8 0b             	cmp    eax,0xb
c0018afe:	76 10                	jbe    c0018b10 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b00:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b03:	84 d2                	test   dl,dl
c0018b05:	88 d3                	mov    bl,dl
c0018b07:	75 02                	jne    c0018b0b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b09:	b3 0c                	mov    bl,0xc
c0018b0b:	83 cb 80             	or     ebx,0xffffff80
c0018b0e:	eb 06                	jmp    c0018b16 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b10:	85 c0                	test   eax,eax
c0018b12:	75 02                	jne    c0018b16 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b14:	b3 0c                	mov    bl,0xc
c0018b16:	50                   	push   eax
c0018b17:	0f b6 db             	movzx  ebx,bl
c0018b1a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b1f:	52                   	push   edx
c0018b20:	6a 00                	push   0x0
c0018b22:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b28:	e8 85 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b2d:	83 c4 0c             	add    esp,0xc
c0018b30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b35:	50                   	push   eax
c0018b36:	6a 02                	push   0x2
c0018b38:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b3e:	e8 6f e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b43:	83 c4 0c             	add    esp,0xc
c0018b46:	53                   	push   ebx
c0018b47:	6a 04                	push   0x4
c0018b49:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b4f:	e8 5e e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b54:	83 c4 0c             	add    esp,0xc
c0018b57:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b5c:	52                   	push   edx
c0018b5d:	6a 07                	push   0x7
c0018b5f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b65:	e8 48 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b6a:	83 c4 0c             	add    esp,0xc
c0018b6d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b72:	50                   	push   eax
c0018b73:	6a 08                	push   0x8
c0018b75:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b7b:	e8 32 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b80:	83 c4 0c             	add    esp,0xc
c0018b83:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018b88:	55                   	push   ebp
c0018b89:	6a 09                	push   0x9
c0018b8b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b91:	e8 1c e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b96:	5a                   	pop    edx
c0018b97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b9b:	e8 82 fb ff ff       	call   c0018722 <RTC::completeRTCRefresh()>
c0018ba0:	83 c4 3c             	add    esp,0x3c
c0018ba3:	b0 01                	mov    al,0x1
c0018ba5:	5b                   	pop    ebx
c0018ba6:	5e                   	pop    esi
c0018ba7:	5f                   	pop    edi
c0018ba8:	5d                   	pop    ebp
c0018ba9:	c3                   	ret    

c0018baa <rtcIRQHandler(regs*, void*)>:
c0018baa:	53                   	push   ebx
c0018bab:	83 ec 10             	sub    esp,0x10
c0018bae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018bb2:	6a 0c                	push   0xc
c0018bb4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bba:	e8 db e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	a8 80                	test   al,0x80
c0018bc4:	74 24                	je     c0018bea <rtcIRQHandler(regs*, void*)+0x40>
c0018bc6:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018bcd:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018bd4:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018bdb:	75 0d                	jne    c0018bea <rtcIRQHandler(regs*, void*)+0x40>
c0018bdd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018be1:	83 c4 08             	add    esp,0x8
c0018be4:	5b                   	pop    ebx
c0018be5:	e9 38 fb ff ff       	jmp    c0018722 <RTC::completeRTCRefresh()>
c0018bea:	83 c4 08             	add    esp,0x8
c0018bed:	5b                   	pop    ebx
c0018bee:	c3                   	ret    
c0018bef:	90                   	nop

c0018bf0 <RTC::RTC()>:
c0018bf0:	83 ec 1c             	sub    esp,0x1c
c0018bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bf7:	83 ec 08             	sub    esp,0x8
c0018bfa:	68 6b 2d 02 c0       	push   0xc0022d6b
c0018bff:	50                   	push   eax
c0018c00:	e8 65 38 ff ff       	call   c000c46a <Clock::Clock(char const*)>
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c0018c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c11:	89 10                	mov    DWORD PTR [eax],edx
c0018c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c17:	83 ec 0c             	sub    esp,0xc
c0018c1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c1e:	6a 01                	push   0x1
c0018c20:	68 aa 8b 01 c0       	push   0xc0018baa
c0018c25:	6a 08                	push   0x8
c0018c27:	50                   	push   eax
c0018c28:	e8 1f 3d ff ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c2d:	83 c4 20             	add    esp,0x20
c0018c30:	89 c2                	mov    edx,eax
c0018c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c36:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c3c:	fa                   	cli    
c0018c3d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c42:	83 c0 01             	add    eax,0x1
c0018c45:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c4a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c4f:	83 ec 08             	sub    esp,0x8
c0018c52:	6a 0b                	push   0xb
c0018c54:	50                   	push   eax
c0018c55:	e8 40 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018c5a:	83 c4 10             	add    esp,0x10
c0018c5d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c61:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c66:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c6a:	83 ca 10             	or     edx,0x10
c0018c6d:	0f b6 d2             	movzx  edx,dl
c0018c70:	83 ec 04             	sub    esp,0x4
c0018c73:	52                   	push   edx
c0018c74:	6a 0b                	push   0xb
c0018c76:	50                   	push   eax
c0018c77:	e8 36 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	83 ec 0c             	sub    esp,0xc
c0018c82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c86:	e8 97 fa ff ff       	call   c0018722 <RTC::completeRTCRefresh()>
c0018c8b:	83 c4 10             	add    esp,0x10
c0018c8e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c93:	83 e8 01             	sub    eax,0x1
c0018c96:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c9b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ca0:	85 c0                	test   eax,eax
c0018ca2:	75 01                	jne    c0018ca5 <RTC::RTC()+0xb5>
c0018ca4:	fb                   	sti    
c0018ca5:	90                   	nop
c0018ca6:	83 c4 1c             	add    esp,0x1c
c0018ca9:	c3                   	ret    
c0018caa:	66 90                	xchg   ax,ax

c0018cac <HalConsoleScroll(int, int)>:
c0018cac:	83 ec 10             	sub    esp,0x10
c0018caf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018cb7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018cbf:	90                   	nop
c0018cc0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018cc5:	0f 8f e1 00 00 00    	jg     c0018dac <HalConsoleScroll(int, int)+0x100>
c0018ccb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cd3:	90                   	nop
c0018cd4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018cdc:	0f 8f be 00 00 00    	jg     c0018da0 <HalConsoleScroll(int, int)+0xf4>
c0018ce2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ce6:	89 d0                	mov    eax,edx
c0018ce8:	c1 e0 02             	shl    eax,0x2
c0018ceb:	01 d0                	add    eax,edx
c0018ced:	c1 e0 05             	shl    eax,0x5
c0018cf0:	89 c2                	mov    edx,eax
c0018cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cf6:	01 d0                	add    eax,edx
c0018cf8:	89 c2                	mov    edx,eax
c0018cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cfe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d05:	89 d0                	mov    eax,edx
c0018d07:	c1 e0 02             	shl    eax,0x2
c0018d0a:	01 d0                	add    eax,edx
c0018d0c:	c1 e0 05             	shl    eax,0x5
c0018d0f:	89 c2                	mov    edx,eax
c0018d11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d15:	01 d0                	add    eax,edx
c0018d17:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d21:	01 d0                	add    eax,edx
c0018d23:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018d25:	88 10                	mov    BYTE PTR [eax],dl
c0018d27:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d2c:	75 66                	jne    c0018d94 <HalConsoleScroll(int, int)+0xe8>
c0018d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d32:	83 e0 01             	and    eax,0x1
c0018d35:	74 39                	je     c0018d70 <HalConsoleScroll(int, int)+0xc4>
c0018d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d3b:	83 e0 0f             	and    eax,0xf
c0018d3e:	88 c2                	mov    dl,al
c0018d40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d44:	c1 e0 04             	shl    eax,0x4
c0018d47:	09 d0                	or     eax,edx
c0018d49:	88 c1                	mov    cl,al
c0018d4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d4f:	89 d0                	mov    eax,edx
c0018d51:	c1 e0 02             	shl    eax,0x2
c0018d54:	01 d0                	add    eax,edx
c0018d56:	c1 e0 05             	shl    eax,0x5
c0018d59:	89 c2                	mov    edx,eax
c0018d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d5f:	01 d0                	add    eax,edx
c0018d61:	89 c2                	mov    edx,eax
c0018d63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d67:	01 d0                	add    eax,edx
c0018d69:	88 ca                	mov    dl,cl
c0018d6b:	88 10                	mov    BYTE PTR [eax],dl
c0018d6d:	eb 25                	jmp    c0018d94 <HalConsoleScroll(int, int)+0xe8>
c0018d6f:	90                   	nop
c0018d70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d74:	89 d0                	mov    eax,edx
c0018d76:	c1 e0 02             	shl    eax,0x2
c0018d79:	01 d0                	add    eax,edx
c0018d7b:	c1 e0 05             	shl    eax,0x5
c0018d7e:	89 c2                	mov    edx,eax
c0018d80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d84:	01 d0                	add    eax,edx
c0018d86:	89 c2                	mov    edx,eax
c0018d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d8c:	01 d0                	add    eax,edx
c0018d8e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018d91:	8d 76 00             	lea    esi,[esi+0x0]
c0018d94:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018d99:	e9 36 ff ff ff       	jmp    c0018cd4 <HalConsoleScroll(int, int)+0x28>
c0018d9e:	66 90                	xchg   ax,ax
c0018da0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018da5:	e9 16 ff ff ff       	jmp    c0018cc0 <HalConsoleScroll(int, int)+0x14>
c0018daa:	66 90                	xchg   ax,ax
c0018dac:	90                   	nop
c0018dad:	83 c4 10             	add    esp,0x10
c0018db0:	c3                   	ret    
c0018db1:	8d 76 00             	lea    esi,[esi+0x0]

c0018db4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018db4:	83 ec 14             	sub    esp,0x14
c0018db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dbb:	88 04 24             	mov    BYTE PTR [esp],al
c0018dbe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018dc1:	0f b6 c0             	movzx  eax,al
c0018dc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018dc8:	89 d1                	mov    ecx,edx
c0018dca:	83 e1 0f             	and    ecx,0xf
c0018dcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018dd1:	c1 e2 04             	shl    edx,0x4
c0018dd4:	0f b6 d2             	movzx  edx,dl
c0018dd7:	09 ca                	or     edx,ecx
c0018dd9:	c1 e2 08             	shl    edx,0x8
c0018ddc:	09 d0                	or     eax,edx
c0018dde:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018de3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018deb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018def:	89 d0                	mov    eax,edx
c0018df1:	c1 e0 02             	shl    eax,0x2
c0018df4:	01 d0                	add    eax,edx
c0018df6:	c1 e0 04             	shl    eax,0x4
c0018df9:	89 c2                	mov    edx,eax
c0018dfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dff:	01 d0                	add    eax,edx
c0018e01:	d1 e0                	shl    eax,1
c0018e03:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e0b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018e10:	66 89 10             	mov    WORD PTR [eax],dx
c0018e13:	90                   	nop
c0018e14:	83 c4 14             	add    esp,0x14
c0018e17:	c3                   	ret    

c0018e18 <HalConsoleCursorUpdate(int, int)>:
c0018e18:	83 ec 20             	sub    esp,0x20
c0018e1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e1f:	89 c2                	mov    edx,eax
c0018e21:	c1 e2 02             	shl    edx,0x2
c0018e24:	01 d0                	add    eax,edx
c0018e26:	c1 e0 04             	shl    eax,0x4
c0018e29:	89 c2                	mov    edx,eax
c0018e2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e2f:	01 d0                	add    eax,edx
c0018e31:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e36:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e3d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e4a:	ee                   	out    dx,al
c0018e4b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e50:	0f b6 c0             	movzx  eax,al
c0018e53:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e5a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e5e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e66:	ee                   	out    dx,al
c0018e67:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e6e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e7b:	ee                   	out    dx,al
c0018e7c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018e81:	c1 e8 08             	shr    eax,0x8
c0018e84:	0f b6 c0             	movzx  eax,al
c0018e87:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018e8e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018e92:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018e96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e9a:	ee                   	out    dx,al
c0018e9b:	90                   	nop
c0018e9c:	83 c4 20             	add    esp,0x20
c0018e9f:	c3                   	ret    

c0018ea0 <FAT::getName()>:
c0018ea0:	b8 bc 2d 02 c0       	mov    eax,0xc0022dbc
c0018ea5:	c3                   	ret    
c0018ea6:	66 90                	xchg   ax,ax

c0018ea8 <FAT::tell(void*, unsigned long long*)>:
c0018ea8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ead:	75 09                	jne    c0018eb8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018eaf:	b8 04 00 00 00       	mov    eax,0x4
c0018eb4:	c3                   	ret    
c0018eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ebd:	75 09                	jne    c0018ec8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018ebf:	b8 04 00 00 00       	mov    eax,0x4
c0018ec4:	c3                   	ret    
c0018ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ecc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ecf:	ba 00 00 00 00       	mov    edx,0x0
c0018ed4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ed8:	89 01                	mov    DWORD PTR [ecx],eax
c0018eda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018edd:	b8 00 00 00 00       	mov    eax,0x0
c0018ee2:	c3                   	ret    
c0018ee3:	90                   	nop

c0018ee4 <FAT::stat(void*, unsigned long long*)>:
c0018ee4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ee9:	75 09                	jne    c0018ef4 <FAT::stat(void*, unsigned long long*)+0x10>
c0018eeb:	b8 04 00 00 00       	mov    eax,0x4
c0018ef0:	c3                   	ret    
c0018ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ef9:	75 09                	jne    c0018f04 <FAT::stat(void*, unsigned long long*)+0x20>
c0018efb:	b8 04 00 00 00       	mov    eax,0x4
c0018f00:	c3                   	ret    
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]
c0018f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f0b:	ba 00 00 00 00       	mov    edx,0x0
c0018f10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f14:	89 01                	mov    DWORD PTR [ecx],eax
c0018f16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f19:	b8 00 00 00 00       	mov    eax,0x0
c0018f1e:	c3                   	ret    
c0018f1f:	90                   	nop

c0018f20 <FAT::~FAT()>:
c0018f20:	83 ec 0c             	sub    esp,0xc
c0018f23:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c0018f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f2c:	89 10                	mov    DWORD PTR [eax],edx
c0018f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f32:	83 ec 0c             	sub    esp,0xc
c0018f35:	50                   	push   eax
c0018f36:	e8 55 28 ff ff       	call   c000b790 <Filesystem::~Filesystem()>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	90                   	nop
c0018f3f:	83 c4 0c             	add    esp,0xc
c0018f42:	c3                   	ret    
c0018f43:	90                   	nop

c0018f44 <FAT::~FAT()>:
c0018f44:	83 ec 0c             	sub    esp,0xc
c0018f47:	83 ec 0c             	sub    esp,0xc
c0018f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f4e:	e8 cd ff ff ff       	call   c0018f20 <FAT::~FAT()>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	83 ec 08             	sub    esp,0x8
c0018f59:	6a 08                	push   0x8
c0018f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f5f:	e8 a8 18 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	83 c4 0c             	add    esp,0xc
c0018f6a:	c3                   	ret    
c0018f6b:	90                   	nop

c0018f6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f6c:	83 ec 1c             	sub    esp,0x1c
c0018f6f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f76:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f7f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f86:	83 f8 ff             	cmp    eax,0xffffffff
c0018f89:	75 35                	jne    c0018fc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018f8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f8f:	88 c2                	mov    dl,al
c0018f91:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f96:	01 d0                	add    eax,edx
c0018f98:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f9c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018fa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fa6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018fad:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fb6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018fbd:	eb 19                	jmp    c0018fd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018fbf:	90                   	nop
c0018fc0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fc4:	88 c2                	mov    dl,al
c0018fc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fca:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fd1:	01 d0                	add    eax,edx
c0018fd3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fd7:	90                   	nop
c0018fd8:	83 ec 04             	sub    esp,0x4
c0018fdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fe3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018fe7:	50                   	push   eax
c0018fe8:	e8 06 c0 fe ff       	call   c0004ff3 <f_getlabel>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ff4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ff9:	75 09                	jne    c0019004 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018ffb:	b8 00 00 00 00       	mov    eax,0x0
c0019000:	eb 0a                	jmp    c001900c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019002:	66 90                	xchg   ax,ax
c0019004:	b8 01 00 00 00       	mov    eax,0x1
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	83 c4 1c             	add    esp,0x1c
c001900f:	c3                   	ret    

c0019010 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019010:	53                   	push   ebx
c0019011:	83 ec 58             	sub    esp,0x58
c0019014:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001901c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019020:	b9 00 00 00 00       	mov    ecx,0x0
c0019025:	b8 3c 00 00 00       	mov    eax,0x3c
c001902a:	83 e0 f8             	and    eax,0xfffffff8
c001902d:	89 c3                	mov    ebx,eax
c001902f:	b8 00 00 00 00       	mov    eax,0x0
c0019034:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019038:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001903c:	83 c0 08             	add    eax,0x8
c001903f:	39 d8                	cmp    eax,ebx
c0019041:	72 f1                	jb     c0019034 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019043:	01 c2                	add    edx,eax
c0019045:	89 0a                	mov    DWORD PTR [edx],ecx
c0019047:	83 c2 04             	add    edx,0x4
c001904a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001904e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019055:	83 f8 ff             	cmp    eax,0xffffffff
c0019058:	75 36                	jne    c0019090 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001905a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001905e:	88 c2                	mov    dl,al
c0019060:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019065:	01 d0                	add    eax,edx
c0019067:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001906b:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019071:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019075:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001907c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019081:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019085:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001908c:	eb 1a                	jmp    c00190a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001908e:	66 90                	xchg   ax,ax
c0019090:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019094:	88 c2                	mov    dl,al
c0019096:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001909a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190a1:	01 d0                	add    eax,edx
c00190a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190a7:	90                   	nop
c00190a8:	83 ec 08             	sub    esp,0x8
c00190ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190b3:	50                   	push   eax
c00190b4:	e8 b7 77 fe ff       	call   c0000870 <strcat>
c00190b9:	83 c4 10             	add    esp,0x10
c00190bc:	83 ec 0c             	sub    esp,0xc
c00190bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190c3:	50                   	push   eax
c00190c4:	e8 7e c0 fe ff       	call   c0005147 <f_setlabel>
c00190c9:	83 c4 10             	add    esp,0x10
c00190cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00190d5:	75 09                	jne    c00190e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00190d7:	b8 00 00 00 00       	mov    eax,0x0
c00190dc:	eb 0a                	jmp    c00190e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00190de:	66 90                	xchg   ax,ax
c00190e0:	b8 01 00 00 00       	mov    eax,0x1
c00190e5:	8d 76 00             	lea    esi,[esi+0x0]
c00190e8:	83 c4 58             	add    esp,0x58
c00190eb:	5b                   	pop    ebx
c00190ec:	c3                   	ret    
c00190ed:	90                   	nop
c00190ee:	66 90                	xchg   ax,ax

c00190f0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00190f0:	83 ec 2c             	sub    esp,0x2c
c00190f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190fb:	83 ec 08             	sub    esp,0x8
c00190fe:	68 e0 2d 02 c0       	push   0xc0022de0
c0019103:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019107:	e8 74 76 fe ff       	call   c0000780 <strcmp>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	85 c0                	test   eax,eax
c0019111:	0f 94 c0             	sete   al
c0019114:	0f b6 c0             	movzx  eax,al
c0019117:	85 c0                	test   eax,eax
c0019119:	74 0d                	je     c0019128 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001911b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019123:	e9 c0 00 00 00       	jmp    c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019128:	83 ec 08             	sub    esp,0x8
c001912b:	68 d2 2d 02 c0       	push   0xc0022dd2
c0019130:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019134:	e8 47 76 fe ff       	call   c0000780 <strcmp>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	85 c0                	test   eax,eax
c001913e:	0f 94 c0             	sete   al
c0019141:	0f b6 c0             	movzx  eax,al
c0019144:	85 c0                	test   eax,eax
c0019146:	74 10                	je     c0019158 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019148:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019150:	e9 93 00 00 00       	jmp    c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019155:	8d 76 00             	lea    esi,[esi+0x0]
c0019158:	83 ec 08             	sub    esp,0x8
c001915b:	68 d8 2d 02 c0       	push   0xc0022dd8
c0019160:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019164:	e8 17 76 fe ff       	call   c0000780 <strcmp>
c0019169:	83 c4 10             	add    esp,0x10
c001916c:	85 c0                	test   eax,eax
c001916e:	0f 94 c0             	sete   al
c0019171:	0f b6 c0             	movzx  eax,al
c0019174:	85 c0                	test   eax,eax
c0019176:	74 0c                	je     c0019184 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019178:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019180:	eb 66                	jmp    c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019182:	66 90                	xchg   ax,ax
c0019184:	83 ec 08             	sub    esp,0x8
c0019187:	68 1c 05 02 c0       	push   0xc002051c
c001918c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019190:	e8 eb 75 fe ff       	call   c0000780 <strcmp>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	85 c0                	test   eax,eax
c001919a:	0f 94 c0             	sete   al
c001919d:	0f b6 c0             	movzx  eax,al
c00191a0:	85 c0                	test   eax,eax
c00191a2:	74 0c                	je     c00191b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191a4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191ac:	eb 3a                	jmp    c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ae:	66 90                	xchg   ax,ax
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	68 de 2d 02 c0       	push   0xc0022dde
c00191b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191bc:	e8 bf 75 fe ff       	call   c0000780 <strcmp>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	85 c0                	test   eax,eax
c00191c6:	0f 94 c0             	sete   al
c00191c9:	0f b6 c0             	movzx  eax,al
c00191cc:	85 c0                	test   eax,eax
c00191ce:	74 0c                	je     c00191dc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00191d0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00191d8:	eb 0e                	jmp    c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191da:	66 90                	xchg   ax,ax
c00191dc:	b8 08 00 00 00       	mov    eax,0x8
c00191e1:	e9 ea 00 00 00       	jmp    c00192d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00191e6:	66 90                	xchg   ax,ax
c00191e8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00191ef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00191f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191f8:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191ff:	83 f8 ff             	cmp    eax,0xffffffff
c0019202:	75 34                	jne    c0019238 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019204:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019208:	88 c2                	mov    dl,al
c001920a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001920f:	01 d0                	add    eax,edx
c0019211:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019215:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001921b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001921f:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019226:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001922b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001922f:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019236:	eb 18                	jmp    c0019250 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019238:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001923c:	88 c2                	mov    dl,al
c001923e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019242:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019249:	01 d0                	add    eax,edx
c001924b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001924f:	90                   	nop
c0019250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019254:	88 04 24             	mov    BYTE PTR [esp],al
c0019257:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001925b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001925f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019267:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001926c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019274:	83 ec 0c             	sub    esp,0xc
c0019277:	68 00 20 00 00       	push   0x2000
c001927c:	e8 52 e8 fe ff       	call   c0007ad3 <malloc>
c0019281:	83 c4 10             	add    esp,0x10
c0019284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019288:	68 00 20 00 00       	push   0x2000
c001928d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019291:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019295:	50                   	push   eax
c0019296:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001929a:	50                   	push   eax
c001929b:	e8 a4 c1 fe ff       	call   c0005444 <f_mkfs>
c00192a0:	83 c4 10             	add    esp,0x10
c00192a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192ac:	75 0a                	jne    c00192b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192ae:	b8 00 00 00 00       	mov    eax,0x0
c00192b3:	eb 1b                	jmp    c00192d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192b5:	8d 76 00             	lea    esi,[esi+0x0]
c00192b8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192bd:	75 09                	jne    c00192c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192bf:	b8 09 00 00 00       	mov    eax,0x9
c00192c4:	eb 0a                	jmp    c00192d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192c6:	66 90                	xchg   ax,ax
c00192c8:	b8 01 00 00 00       	mov    eax,0x1
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	83 c4 2c             	add    esp,0x2c
c00192d3:	c3                   	ret    

c00192d4 <FAT::tryMount(LogicalDisk*, int)>:
c00192d4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00192da:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192df:	83 f8 14             	cmp    eax,0x14
c00192e2:	75 18                	jne    c00192fc <FAT::tryMount(LogicalDisk*, int)+0x28>
c00192e4:	83 ec 0c             	sub    esp,0xc
c00192e7:	68 e4 2d 02 c0       	push   0xc0022de4
c00192ec:	e8 76 82 ff ff       	call   c0011567 <KePanic(char const*)>
c00192f1:	83 c4 10             	add    esp,0x10
c00192f4:	b0 00                	mov    al,0x0
c00192f6:	e9 ed 01 00 00       	jmp    c00194e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192fb:	90                   	nop
c00192fc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019303:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019309:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001930f:	3d 00 02 00 00       	cmp    eax,0x200
c0019314:	74 0a                	je     c0019320 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019316:	b0 00                	mov    al,0x0
c0019318:	e9 cb 01 00 00       	jmp    c00194e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001931d:	8d 76 00             	lea    esi,[esi+0x0]
c0019320:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019328:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001932f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019336:	83 f8 ff             	cmp    eax,0xffffffff
c0019339:	74 09                	je     c0019344 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001933b:	b0 01                	mov    al,0x1
c001933d:	e9 a6 01 00 00       	jmp    c00194e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019342:	66 90                	xchg   ax,ax
c0019344:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001934e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019356:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001935d:	88 c2                	mov    dl,al
c001935f:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019364:	01 d0                	add    eax,edx
c0019366:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001936d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019373:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001937a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019381:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019386:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001938d:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019394:	83 ec 0c             	sub    esp,0xc
c0019397:	68 34 02 00 00       	push   0x234
c001939c:	e8 32 e7 fe ff       	call   c0007ad3 <malloc>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193ab:	83 ec 04             	sub    esp,0x4
c00193ae:	6a 00                	push   0x0
c00193b0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193b7:	50                   	push   eax
c00193b8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193bf:	e8 7a a8 fe ff       	call   c0003c3e <f_mount>
c00193c4:	83 c4 10             	add    esp,0x10
c00193c7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193ce:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00193d6:	74 1c                	je     c00193f4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193e2:	e8 0c e7 fe ff       	call   c0007af3 <rfree>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	b0 00                	mov    al,0x0
c00193ec:	e9 f7 00 00 00       	jmp    c00194e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193f1:	8d 76 00             	lea    esi,[esi+0x0]
c00193f4:	83 ec 04             	sub    esp,0x4
c00193f7:	68 00 01 00 00       	push   0x100
c00193fc:	6a 00                	push   0x0
c00193fe:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019405:	50                   	push   eax
c0019406:	e8 e5 70 fe ff       	call   c00004f0 <memset>
c001940b:	83 c4 10             	add    esp,0x10
c001940e:	83 ec 08             	sub    esp,0x8
c0019411:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019418:	50                   	push   eax
c0019419:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019420:	50                   	push   eax
c0019421:	e8 4a 74 fe ff       	call   c0000870 <strcat>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	83 ec 08             	sub    esp,0x8
c001942c:	68 f2 2d 02 c0       	push   0xc0022df2
c0019431:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019438:	50                   	push   eax
c0019439:	e8 32 74 fe ff       	call   c0000870 <strcat>
c001943e:	83 c4 10             	add    esp,0x10
c0019441:	83 ec 04             	sub    esp,0x4
c0019444:	6a 01                	push   0x1
c0019446:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001944d:	50                   	push   eax
c001944e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019452:	50                   	push   eax
c0019453:	e8 48 a8 fe ff       	call   c0003ca0 <f_open>
c0019458:	83 c4 10             	add    esp,0x10
c001945b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019462:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019469:	85 c0                	test   eax,eax
c001946b:	74 0b                	je     c0019478 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001946d:	78 31                	js     c00194a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001946f:	83 e8 04             	sub    eax,0x4
c0019472:	83 f8 01             	cmp    eax,0x1
c0019475:	77 29                	ja     c00194a0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019477:	90                   	nop
c0019478:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019480:	83 ec 0c             	sub    esp,0xc
c0019483:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019487:	50                   	push   eax
c0019488:	e8 c3 af fe ff       	call   c0004450 <f_close>
c001948d:	83 c4 10             	add    esp,0x10
c0019490:	90                   	nop
c0019491:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019499:	85 c0                	test   eax,eax
c001949b:	74 43                	je     c00194e0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001949d:	eb 31                	jmp    c00194d0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001949f:	90                   	nop
c00194a0:	83 ec 0c             	sub    esp,0xc
c00194a3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194aa:	e8 44 e6 fe ff       	call   c0007af3 <rfree>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	83 ec 04             	sub    esp,0x4
c00194b5:	6a 00                	push   0x0
c00194b7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194be:	50                   	push   eax
c00194bf:	6a 00                	push   0x0
c00194c1:	e8 78 a7 fe ff       	call   c0003c3e <f_mount>
c00194c6:	83 c4 10             	add    esp,0x10
c00194c9:	b0 00                	mov    al,0x0
c00194cb:	eb 1b                	jmp    c00194e8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194cd:	8d 76 00             	lea    esi,[esi+0x0]
c00194d0:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194d5:	83 c0 01             	add    eax,0x1
c00194d8:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00194dd:	8d 76 00             	lea    esi,[esi+0x0]
c00194e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00194e7:	90                   	nop
c00194e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00194ee:	c3                   	ret    
c00194ef:	90                   	nop

c00194f0 <FAT::allocateSwapfile(char const*, int)>:
c00194f0:	55                   	push   ebp
c00194f1:	57                   	push   edi
c00194f2:	56                   	push   esi
c00194f3:	53                   	push   ebx
c00194f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00194fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019505:	83 ec 0c             	sub    esp,0xc
c0019508:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001950f:	e8 bf e5 fe ff       	call   c0007ad3 <malloc>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	89 c7                	mov    edi,eax
c0019519:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001951e:	83 ec 04             	sub    esp,0x4
c0019521:	50                   	push   eax
c0019522:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019529:	57                   	push   edi
c001952a:	e8 f3 25 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019539:	83 ec 04             	sub    esp,0x4
c001953c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019540:	50                   	push   eax
c0019541:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019545:	50                   	push   eax
c0019546:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001954d:	e8 f0 28 ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c0019552:	83 c4 10             	add    esp,0x10
c0019555:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001955c:	c1 e0 14             	shl    eax,0x14
c001955f:	89 c7                	mov    edi,eax
c0019561:	89 c5                	mov    ebp,eax
c0019563:	c1 fd 1f             	sar    ebp,0x1f
c0019566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001956a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001956e:	89 f9                	mov    ecx,edi
c0019570:	31 c1                	xor    ecx,eax
c0019572:	89 cb                	mov    ebx,ecx
c0019574:	89 e9                	mov    ecx,ebp
c0019576:	31 d1                	xor    ecx,edx
c0019578:	89 ce                	mov    esi,ecx
c001957a:	89 f0                	mov    eax,esi
c001957c:	09 d8                	or     eax,ebx
c001957e:	0f 84 9c 00 00 00    	je     c0019620 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019584:	83 ec 0c             	sub    esp,0xc
c0019587:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001958e:	e8 7b 27 ff ff       	call   c000bd0e <File::unlink()>
c0019593:	83 c4 10             	add    esp,0x10
c0019596:	83 ec 08             	sub    esp,0x8
c0019599:	6a 12                	push   0x12
c001959b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195a2:	e8 99 25 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c00195a7:	83 c4 10             	add    esp,0x10
c00195aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195c5:	c1 e0 14             	shl    eax,0x14
c00195c8:	83 ec 04             	sub    esp,0x4
c00195cb:	6a 01                	push   0x1
c00195cd:	50                   	push   eax
c00195ce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00195d5:	e8 fd bc fe ff       	call   c00052d7 <f_expand>
c00195da:	83 c4 10             	add    esp,0x10
c00195dd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00195e6:	83 c0 10             	add    eax,0x10
c00195e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00195eb:	83 ec 0c             	sub    esp,0xc
c00195ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195f2:	52                   	push   edx
c00195f3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00195f7:	52                   	push   edx
c00195f8:	6a 00                	push   0x0
c00195fa:	68 00 04 00 00       	push   0x400
c00195ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019606:	ff d0                	call   eax
c0019608:	83 c4 20             	add    esp,0x20
c001960b:	83 ec 0c             	sub    esp,0xc
c001960e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019615:	e8 84 25 ff ff       	call   c000bb9e <File::close()>
c001961a:	83 c4 10             	add    esp,0x10
c001961d:	8d 76 00             	lea    esi,[esi+0x0]
c0019620:	83 ec 08             	sub    esp,0x8
c0019623:	6a 01                	push   0x1
c0019625:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001962c:	e8 0f 25 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c0019631:	83 c4 10             	add    esp,0x10
c0019634:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001963b:	8b 00                	mov    eax,DWORD PTR [eax]
c001963d:	83 c0 0c             	add    eax,0xc
c0019640:	8b 00                	mov    eax,DWORD PTR [eax]
c0019642:	83 ec 0c             	sub    esp,0xc
c0019645:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019649:	52                   	push   edx
c001964a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001964e:	52                   	push   edx
c001964f:	6a 00                	push   0x0
c0019651:	6a 04                	push   0x4
c0019653:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001965a:	ff d0                	call   eax
c001965c:	83 c4 20             	add    esp,0x20
c001965f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019666:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001966c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019673:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001967a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001967d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019684:	83 ec 0c             	sub    esp,0xc
c0019687:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001968e:	e8 0b 25 ff ff       	call   c000bb9e <File::close()>
c0019693:	83 c4 10             	add    esp,0x10
c0019696:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001969d:	ba 00 00 00 00       	mov    edx,0x0
c00196a2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196a8:	5b                   	pop    ebx
c00196a9:	5e                   	pop    esi
c00196aa:	5f                   	pop    edi
c00196ab:	5d                   	pop    ebp
c00196ac:	c3                   	ret    
c00196ad:	90                   	nop
c00196ae:	66 90                	xchg   ax,ax

c00196b0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196b0:	57                   	push   edi
c00196b1:	56                   	push   esi
c00196b2:	53                   	push   ebx
c00196b3:	81 ec 50 02 00 00    	sub    esp,0x250
c00196b9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00196c1:	74 0d                	je     c00196d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00196c3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00196cb:	75 0f                	jne    c00196dc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	b8 04 00 00 00       	mov    eax,0x4
c00196d5:	e9 3a 01 00 00       	jmp    c0019814 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00196da:	66 90                	xchg   ax,ax
c00196dc:	83 ec 08             	sub    esp,0x8
c00196df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196e6:	50                   	push   eax
c00196e7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00196ee:	e8 29 b0 fe ff       	call   c000471c <f_readdir>
c00196f3:	83 c4 10             	add    esp,0x10
c00196f6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00196fd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019704:	83 ec 0c             	sub    esp,0xc
c0019707:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001970e:	83 c0 16             	add    eax,0x16
c0019711:	50                   	push   eax
c0019712:	e8 69 6e fe ff       	call   c0000580 <strlen>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	ba 00 00 00 00       	mov    edx,0x0
c001971f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019723:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019727:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001972e:	0f b6 c0             	movzx  eax,al
c0019731:	83 e0 10             	and    eax,0x10
c0019734:	74 0a                	je     c0019740 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019736:	b8 02 00 00 00       	mov    eax,0x2
c001973b:	eb 0b                	jmp    c0019748 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001973d:	8d 76 00             	lea    esi,[esi+0x0]
c0019740:	b8 01 00 00 00       	mov    eax,0x1
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001974c:	83 ec 08             	sub    esp,0x8
c001974f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019756:	83 c0 16             	add    eax,0x16
c0019759:	50                   	push   eax
c001975a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001975e:	83 c0 10             	add    eax,0x10
c0019761:	50                   	push   eax
c0019762:	e8 e9 6e fe ff       	call   c0000650 <strcpy>
c0019767:	83 c4 10             	add    esp,0x10
c001976a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019771:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019778:	8d 44 24 08          	lea    eax,[esp+0x8]
c001977c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019783:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001978a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019791:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019798:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001979f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197a6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197ad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197b4:	89 c6                	mov    esi,eax
c00197b6:	89 d7                	mov    edi,edx
c00197b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197ba:	89 c8                	mov    eax,ecx
c00197bc:	89 fa                	mov    edx,edi
c00197be:	89 f3                	mov    ebx,esi
c00197c0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00197c7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00197ce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00197d5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00197dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197e2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00197e9:	0f be c0             	movsx  eax,al
c00197ec:	85 c0                	test   eax,eax
c00197ee:	75 08                	jne    c00197f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00197f0:	b8 07 00 00 00       	mov    eax,0x7
c00197f5:	eb 1d                	jmp    c0019814 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197f7:	90                   	nop
c00197f8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00197ff:	85 c0                	test   eax,eax
c0019801:	75 09                	jne    c001980c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019803:	b8 00 00 00 00       	mov    eax,0x0
c0019808:	eb 0a                	jmp    c0019814 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001980a:	66 90                	xchg   ax,ax
c001980c:	b8 01 00 00 00       	mov    eax,0x1
c0019811:	8d 76 00             	lea    esi,[esi+0x0]
c0019814:	81 c4 50 02 00 00    	add    esp,0x250
c001981a:	5b                   	pop    ebx
c001981b:	5e                   	pop    esi
c001981c:	5f                   	pop    edi
c001981d:	c3                   	ret    
c001981e:	66 90                	xchg   ax,ax

c0019820 <FAT::read(void*, unsigned long, void*, int*)>:
c0019820:	83 ec 1c             	sub    esp,0x1c
c0019823:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019828:	74 0a                	je     c0019834 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001982a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001982f:	75 0b                	jne    c001983c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019831:	8d 76 00             	lea    esi,[esi+0x0]
c0019834:	b8 04 00 00 00       	mov    eax,0x4
c0019839:	eb 41                	jmp    c001987c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001983b:	90                   	nop
c001983c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019840:	50                   	push   eax
c0019841:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019845:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019849:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001984d:	e8 11 a7 fe ff       	call   c0003f63 <f_read>
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001985d:	89 c2                	mov    edx,eax
c001985f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019863:	89 10                	mov    DWORD PTR [eax],edx
c0019865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019869:	85 c0                	test   eax,eax
c001986b:	75 07                	jne    c0019874 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001986d:	b8 00 00 00 00       	mov    eax,0x0
c0019872:	eb 08                	jmp    c001987c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019874:	b8 01 00 00 00       	mov    eax,0x1
c0019879:	8d 76 00             	lea    esi,[esi+0x0]
c001987c:	83 c4 1c             	add    esp,0x1c
c001987f:	c3                   	ret    

c0019880 <FAT::write(void*, unsigned long, void*, int*)>:
c0019880:	83 ec 1c             	sub    esp,0x1c
c0019883:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019888:	74 0a                	je     c0019894 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001988a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001988f:	75 0b                	jne    c001989c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019891:	8d 76 00             	lea    esi,[esi+0x0]
c0019894:	b8 04 00 00 00       	mov    eax,0x4
c0019899:	eb 41                	jmp    c00198dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001989b:	90                   	nop
c001989c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198a0:	50                   	push   eax
c00198a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198ad:	e8 92 a8 fe ff       	call   c0004144 <f_write>
c00198b2:	83 c4 10             	add    esp,0x10
c00198b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198bd:	89 c2                	mov    edx,eax
c00198bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198c3:	89 10                	mov    DWORD PTR [eax],edx
c00198c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198c9:	85 c0                	test   eax,eax
c00198cb:	75 07                	jne    c00198d4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00198cd:	b8 00 00 00 00       	mov    eax,0x0
c00198d2:	eb 08                	jmp    c00198dc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198d4:	b8 01 00 00 00       	mov    eax,0x1
c00198d9:	8d 76 00             	lea    esi,[esi+0x0]
c00198dc:	83 c4 1c             	add    esp,0x1c
c00198df:	c3                   	ret    

c00198e0 <FAT::close(void*)>:
c00198e0:	83 ec 1c             	sub    esp,0x1c
c00198e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198e8:	75 0a                	jne    c00198f4 <FAT::close(void*)+0x14>
c00198ea:	b8 04 00 00 00       	mov    eax,0x4
c00198ef:	eb 3f                	jmp    c0019930 <FAT::close(void*)+0x50>
c00198f1:	8d 76 00             	lea    esi,[esi+0x0]
c00198f4:	83 ec 0c             	sub    esp,0xc
c00198f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198fb:	e8 50 ab fe ff       	call   c0004450 <f_close>
c0019900:	83 c4 10             	add    esp,0x10
c0019903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019907:	83 ec 0c             	sub    esp,0xc
c001990a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001990e:	e8 d0 e1 fe ff       	call   c0007ae3 <free>
c0019913:	83 c4 10             	add    esp,0x10
c0019916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001991a:	85 c0                	test   eax,eax
c001991c:	75 0a                	jne    c0019928 <FAT::close(void*)+0x48>
c001991e:	b8 00 00 00 00       	mov    eax,0x0
c0019923:	eb 0b                	jmp    c0019930 <FAT::close(void*)+0x50>
c0019925:	8d 76 00             	lea    esi,[esi+0x0]
c0019928:	b8 01 00 00 00       	mov    eax,0x1
c001992d:	8d 76 00             	lea    esi,[esi+0x0]
c0019930:	83 c4 1c             	add    esp,0x1c
c0019933:	c3                   	ret    

c0019934 <FAT::closeDir(void*)>:
c0019934:	83 ec 1c             	sub    esp,0x1c
c0019937:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001993c:	75 0a                	jne    c0019948 <FAT::closeDir(void*)+0x14>
c001993e:	b8 04 00 00 00       	mov    eax,0x4
c0019943:	eb 3f                	jmp    c0019984 <FAT::closeDir(void*)+0x50>
c0019945:	8d 76 00             	lea    esi,[esi+0x0]
c0019948:	83 ec 0c             	sub    esp,0xc
c001994b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001994f:	e8 a6 ad fe ff       	call   c00046fa <f_closedir>
c0019954:	83 c4 10             	add    esp,0x10
c0019957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001995b:	83 ec 0c             	sub    esp,0xc
c001995e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019962:	e8 7c e1 fe ff       	call   c0007ae3 <free>
c0019967:	83 c4 10             	add    esp,0x10
c001996a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001996e:	85 c0                	test   eax,eax
c0019970:	75 0a                	jne    c001997c <FAT::closeDir(void*)+0x48>
c0019972:	b8 00 00 00 00       	mov    eax,0x0
c0019977:	eb 0b                	jmp    c0019984 <FAT::closeDir(void*)+0x50>
c0019979:	8d 76 00             	lea    esi,[esi+0x0]
c001997c:	b8 01 00 00 00       	mov    eax,0x1
c0019981:	8d 76 00             	lea    esi,[esi+0x0]
c0019984:	83 c4 1c             	add    esp,0x1c
c0019987:	c3                   	ret    

c0019988 <FAT::truncate(void*, unsigned long long)>:
c0019988:	83 ec 2c             	sub    esp,0x2c
c001998b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001998f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019993:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199a0:	75 0a                	jne    c00199ac <FAT::truncate(void*, unsigned long long)+0x24>
c00199a2:	b8 04 00 00 00       	mov    eax,0x4
c00199a7:	eb 47                	jmp    c00199f0 <FAT::truncate(void*, unsigned long long)+0x68>
c00199a9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c3:	83 ec 08             	sub    esp,0x8
c00199c6:	50                   	push   eax
c00199c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199cb:	e8 af aa fe ff       	call   c000447f <f_lseek>
c00199d0:	83 c4 10             	add    esp,0x10
c00199d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199db:	85 c0                	test   eax,eax
c00199dd:	75 09                	jne    c00199e8 <FAT::truncate(void*, unsigned long long)+0x60>
c00199df:	b8 00 00 00 00       	mov    eax,0x0
c00199e4:	eb 0a                	jmp    c00199f0 <FAT::truncate(void*, unsigned long long)+0x68>
c00199e6:	66 90                	xchg   ax,ax
c00199e8:	b8 01 00 00 00       	mov    eax,0x1
c00199ed:	8d 76 00             	lea    esi,[esi+0x0]
c00199f0:	83 c4 2c             	add    esp,0x2c
c00199f3:	c3                   	ret    

c00199f4 <FAT::seek(void*, unsigned long long)>:
c00199f4:	83 ec 2c             	sub    esp,0x2c
c00199f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a07:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a0c:	75 0a                	jne    c0019a18 <FAT::seek(void*, unsigned long long)+0x24>
c0019a0e:	b8 04 00 00 00       	mov    eax,0x4
c0019a13:	eb 33                	jmp    c0019a48 <FAT::seek(void*, unsigned long long)+0x54>
c0019a15:	8d 76 00             	lea    esi,[esi+0x0]
c0019a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a1c:	83 ec 08             	sub    esp,0x8
c0019a1f:	50                   	push   eax
c0019a20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a24:	e8 56 aa fe ff       	call   c000447f <f_lseek>
c0019a29:	83 c4 10             	add    esp,0x10
c0019a2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a34:	85 c0                	test   eax,eax
c0019a36:	75 08                	jne    c0019a40 <FAT::seek(void*, unsigned long long)+0x4c>
c0019a38:	b8 00 00 00 00       	mov    eax,0x0
c0019a3d:	eb 09                	jmp    c0019a48 <FAT::seek(void*, unsigned long long)+0x54>
c0019a3f:	90                   	nop
c0019a40:	b8 01 00 00 00       	mov    eax,0x1
c0019a45:	8d 76 00             	lea    esi,[esi+0x0]
c0019a48:	83 c4 2c             	add    esp,0x2c
c0019a4b:	c3                   	ret    

c0019a4c <fatWrapperReadDisk>:
c0019a4c:	53                   	push   ebx
c0019a4d:	83 ec 18             	sub    esp,0x18
c0019a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a54:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a5d:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a6c:	ba 00 00 00 00       	mov    edx,0x0
c0019a71:	83 ec 0c             	sub    esp,0xc
c0019a74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a78:	53                   	push   ebx
c0019a79:	52                   	push   edx
c0019a7a:	50                   	push   eax
c0019a7b:	51                   	push   ecx
c0019a7c:	e8 09 43 ff ff       	call   c000dd8a <LogicalDisk::read(unsigned long long, int, void*)>
c0019a81:	83 c4 20             	add    esp,0x20
c0019a84:	83 c4 18             	add    esp,0x18
c0019a87:	5b                   	pop    ebx
c0019a88:	c3                   	ret    
c0019a89:	8d 76 00             	lea    esi,[esi+0x0]

c0019a8c <fatWrapperWriteDisk>:
c0019a8c:	53                   	push   ebx
c0019a8d:	83 ec 18             	sub    esp,0x18
c0019a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a9d:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019aa4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019aa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019aac:	ba 00 00 00 00       	mov    edx,0x0
c0019ab1:	83 ec 0c             	sub    esp,0xc
c0019ab4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ab8:	53                   	push   ebx
c0019ab9:	52                   	push   edx
c0019aba:	50                   	push   eax
c0019abb:	51                   	push   ecx
c0019abc:	e8 35 43 ff ff       	call   c000ddf6 <LogicalDisk::write(unsigned long long, int, void*)>
c0019ac1:	83 c4 20             	add    esp,0x20
c0019ac4:	83 c4 18             	add    esp,0x18
c0019ac7:	5b                   	pop    ebx
c0019ac8:	c3                   	ret    
c0019ac9:	8d 76 00             	lea    esi,[esi+0x0]

c0019acc <fatWrapperIoctl>:
c0019acc:	53                   	push   ebx
c0019acd:	83 ec 28             	sub    esp,0x28
c0019ad0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ad4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019ad8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019adc:	88 d0                	mov    al,dl
c0019ade:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ae2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ae7:	83 f8 02             	cmp    eax,0x2
c0019aea:	75 34                	jne    c0019b20 <fatWrapperIoctl+0x54>
c0019aec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019af0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019af4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019af9:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b00:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b06:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b0c:	89 c2                	mov    edx,eax
c0019b0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b12:	66 89 10             	mov    WORD PTR [eax],dx
c0019b15:	b8 00 00 00 00       	mov    eax,0x0
c0019b1a:	e9 c5 00 00 00       	jmp    c0019be4 <fatWrapperIoctl+0x118>
c0019b1f:	90                   	nop
c0019b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b25:	83 f8 01             	cmp    eax,0x1
c0019b28:	75 6a                	jne    c0019b94 <fatWrapperIoctl+0xc8>
c0019b2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b37:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b44:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b4a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b50:	89 c8                	mov    eax,ecx
c0019b52:	89 da                	mov    edx,ebx
c0019b54:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b58:	c1 e0 0a             	shl    eax,0xa
c0019b5b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b60:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b67:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b6d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b73:	89 cb                	mov    ebx,ecx
c0019b75:	c1 fb 1f             	sar    ebx,0x1f
c0019b78:	53                   	push   ebx
c0019b79:	51                   	push   ecx
c0019b7a:	52                   	push   edx
c0019b7b:	50                   	push   eax
c0019b7c:	e8 af 5b 00 00       	call   c001f730 <__udivdi3>
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	89 c2                	mov    edx,eax
c0019b86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b8a:	89 10                	mov    DWORD PTR [eax],edx
c0019b8c:	b8 00 00 00 00       	mov    eax,0x0
c0019b91:	eb 51                	jmp    c0019be4 <fatWrapperIoctl+0x118>
c0019b93:	90                   	nop
c0019b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b99:	85 c0                	test   eax,eax
c0019b9b:	75 07                	jne    c0019ba4 <fatWrapperIoctl+0xd8>
c0019b9d:	b8 00 00 00 00       	mov    eax,0x0
c0019ba2:	eb 40                	jmp    c0019be4 <fatWrapperIoctl+0x118>
c0019ba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba9:	83 f8 03             	cmp    eax,0x3
c0019bac:	75 1a                	jne    c0019bc8 <fatWrapperIoctl+0xfc>
c0019bae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bba:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bc0:	b8 00 00 00 00       	mov    eax,0x0
c0019bc5:	eb 1d                	jmp    c0019be4 <fatWrapperIoctl+0x118>
c0019bc7:	90                   	nop
c0019bc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bcd:	83 f8 04             	cmp    eax,0x4
c0019bd0:	75 0a                	jne    c0019bdc <fatWrapperIoctl+0x110>
c0019bd2:	b8 00 00 00 00       	mov    eax,0x0
c0019bd7:	eb 0b                	jmp    c0019be4 <fatWrapperIoctl+0x118>
c0019bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bdc:	b8 04 00 00 00       	mov    eax,0x4
c0019be1:	8d 76 00             	lea    esi,[esi+0x0]
c0019be4:	83 c4 28             	add    esp,0x28
c0019be7:	5b                   	pop    ebx
c0019be8:	c3                   	ret    
c0019be9:	90                   	nop
c0019bea:	66 90                	xchg   ax,ax

c0019bec <FAT::FAT()>:
c0019bec:	83 ec 1c             	sub    esp,0x1c
c0019bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bf3:	83 ec 0c             	sub    esp,0xc
c0019bf6:	50                   	push   eax
c0019bf7:	e8 70 1b ff ff       	call   c000b76c <Filesystem::Filesystem()>
c0019bfc:	83 c4 10             	add    esp,0x10
c0019bff:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c0019c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c08:	89 10                	mov    DWORD PTR [eax],edx
c0019c0a:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c1c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c21:	7f 19                	jg     c0019c3c <FAT::FAT()+0x50>
c0019c23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c27:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c32:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c37:	eb e3                	jmp    c0019c1c <FAT::FAT()+0x30>
c0019c39:	8d 76 00             	lea    esi,[esi+0x0]
c0019c3c:	90                   	nop
c0019c3d:	83 c4 1c             	add    esp,0x1c
c0019c40:	c3                   	ret    
c0019c41:	90                   	nop
c0019c42:	66 90                	xchg   ax,ax

c0019c44 <FAT::fixFilepath(char*)>:
c0019c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c48:	8a 00                	mov    al,BYTE PTR [eax]
c0019c4a:	0f be c0             	movsx  eax,al
c0019c4d:	83 f8 40             	cmp    eax,0x40
c0019c50:	7e 2e                	jle    c0019c80 <FAT::fixFilepath(char*)+0x3c>
c0019c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c56:	8a 00                	mov    al,BYTE PTR [eax]
c0019c58:	83 e8 41             	sub    eax,0x41
c0019c5b:	88 c2                	mov    dl,al
c0019c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c61:	88 10                	mov    BYTE PTR [eax],dl
c0019c63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c67:	8a 00                	mov    al,BYTE PTR [eax]
c0019c69:	0f be c0             	movsx  eax,al
c0019c6c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c73:	83 c0 30             	add    eax,0x30
c0019c76:	88 c2                	mov    dl,al
c0019c78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c7c:	88 10                	mov    BYTE PTR [eax],dl
c0019c7e:	66 90                	xchg   ax,ax
c0019c80:	90                   	nop
c0019c81:	c3                   	ret    
c0019c82:	66 90                	xchg   ax,ax

c0019c84 <FAT::open(char const*, void**, FileOpenMode)>:
c0019c84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c92:	74 0c                	je     c0019ca0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c9c:	75 0e                	jne    c0019cac <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c9e:	66 90                	xchg   ax,ax
c0019ca0:	b8 04 00 00 00       	mov    eax,0x4
c0019ca5:	e9 46 01 00 00       	jmp    c0019df0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019caa:	66 90                	xchg   ax,ax
c0019cac:	83 ec 08             	sub    esp,0x8
c0019caf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cba:	50                   	push   eax
c0019cbb:	e8 90 69 fe ff       	call   c0000650 <strcpy>
c0019cc0:	83 c4 10             	add    esp,0x10
c0019cc3:	83 ec 08             	sub    esp,0x8
c0019cc6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cca:	50                   	push   eax
c0019ccb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cd2:	e8 6d ff ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019cd7:	83 c4 10             	add    esp,0x10
c0019cda:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019ce2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ce9:	83 e0 01             	and    eax,0x1
c0019cec:	74 12                	je     c0019d00 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019cee:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cf5:	83 c8 01             	or     eax,0x1
c0019cf8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cff:	90                   	nop
c0019d00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d07:	83 e0 04             	and    eax,0x4
c0019d0a:	74 24                	je     c0019d30 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d0c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d13:	83 c8 30             	or     eax,0x30
c0019d16:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d1d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d24:	83 c8 02             	or     eax,0x2
c0019d27:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d2e:	66 90                	xchg   ax,ax
c0019d30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d37:	83 e0 02             	and    eax,0x2
c0019d3a:	74 14                	je     c0019d50 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d43:	83 c8 02             	or     eax,0x2
c0019d46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d57:	83 e0 08             	and    eax,0x8
c0019d5a:	74 14                	je     c0019d70 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d63:	83 c8 04             	or     eax,0x4
c0019d66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d77:	83 e0 10             	and    eax,0x10
c0019d7a:	74 14                	je     c0019d90 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d83:	83 c8 08             	or     eax,0x8
c0019d86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d90:	83 ec 0c             	sub    esp,0xc
c0019d93:	68 28 02 00 00       	push   0x228
c0019d98:	e8 36 dd fe ff       	call   c0007ad3 <malloc>
c0019d9d:	83 c4 10             	add    esp,0x10
c0019da0:	89 c2                	mov    edx,eax
c0019da2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019da9:	89 10                	mov    DWORD PTR [eax],edx
c0019dab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019db3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dbc:	83 ec 04             	sub    esp,0x4
c0019dbf:	52                   	push   edx
c0019dc0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019dc4:	52                   	push   edx
c0019dc5:	50                   	push   eax
c0019dc6:	e8 d5 9e fe ff       	call   c0003ca0 <f_open>
c0019dcb:	83 c4 10             	add    esp,0x10
c0019dce:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019dd5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ddd:	74 09                	je     c0019de8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019ddf:	b8 01 00 00 00       	mov    eax,0x1
c0019de4:	eb 0a                	jmp    c0019df0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019de6:	66 90                	xchg   ax,ax
c0019de8:	b8 00 00 00 00       	mov    eax,0x0
c0019ded:	8d 76 00             	lea    esi,[esi+0x0]
c0019df0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019df6:	c3                   	ret    
c0019df7:	90                   	nop

c0019df8 <FAT::openDir(char const*, void**)>:
c0019df8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e06:	74 0c                	je     c0019e14 <FAT::openDir(char const*, void**)+0x1c>
c0019e08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e10:	75 0e                	jne    c0019e20 <FAT::openDir(char const*, void**)+0x28>
c0019e12:	66 90                	xchg   ax,ax
c0019e14:	b8 04 00 00 00       	mov    eax,0x4
c0019e19:	e9 82 00 00 00       	jmp    c0019ea0 <FAT::openDir(char const*, void**)+0xa8>
c0019e1e:	66 90                	xchg   ax,ax
c0019e20:	83 ec 08             	sub    esp,0x8
c0019e23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e2e:	50                   	push   eax
c0019e2f:	e8 1c 68 fe ff       	call   c0000650 <strcpy>
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	83 ec 08             	sub    esp,0x8
c0019e3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e3e:	50                   	push   eax
c0019e3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e46:	e8 f9 fd ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	83 ec 0c             	sub    esp,0xc
c0019e51:	6a 30                	push   0x30
c0019e53:	e8 7b dc fe ff       	call   c0007ad3 <malloc>
c0019e58:	83 c4 10             	add    esp,0x10
c0019e5b:	89 c2                	mov    edx,eax
c0019e5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e64:	89 10                	mov    DWORD PTR [eax],edx
c0019e66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e6f:	83 ec 08             	sub    esp,0x8
c0019e72:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e76:	52                   	push   edx
c0019e77:	50                   	push   eax
c0019e78:	e8 b2 a7 fe ff       	call   c000462f <f_opendir>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e87:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e8f:	74 07                	je     c0019e98 <FAT::openDir(char const*, void**)+0xa0>
c0019e91:	b8 01 00 00 00       	mov    eax,0x1
c0019e96:	eb 08                	jmp    c0019ea0 <FAT::openDir(char const*, void**)+0xa8>
c0019e98:	b8 00 00 00 00       	mov    eax,0x0
c0019e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ea6:	c3                   	ret    
c0019ea7:	90                   	nop

c0019ea8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ea8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019eb6:	75 0c                	jne    c0019ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019eb8:	b8 04 00 00 00       	mov    eax,0x4
c0019ebd:	e9 d6 00 00 00       	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ec2:	66 90                	xchg   ax,ax
c0019ec4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ecc:	75 0a                	jne    c0019ed8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ece:	b8 04 00 00 00       	mov    eax,0x4
c0019ed3:	e9 c0 00 00 00       	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ed8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ee0:	75 0a                	jne    c0019eec <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019ee2:	b8 04 00 00 00       	mov    eax,0x4
c0019ee7:	e9 ac 00 00 00       	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019eec:	83 ec 08             	sub    esp,0x8
c0019eef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ef6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019efd:	50                   	push   eax
c0019efe:	e8 4d 67 fe ff       	call   c0000650 <strcpy>
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	83 ec 08             	sub    esp,0x8
c0019f09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f10:	50                   	push   eax
c0019f11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f18:	e8 27 fd ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019f1d:	83 c4 10             	add    esp,0x10
c0019f20:	83 ec 08             	sub    esp,0x8
c0019f23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f27:	50                   	push   eax
c0019f28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f2f:	50                   	push   eax
c0019f30:	e8 79 a8 fe ff       	call   c00047ae <f_stat>
c0019f35:	83 c4 10             	add    esp,0x10
c0019f38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f46:	85 c0                	test   eax,eax
c0019f48:	74 0a                	je     c0019f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f4a:	83 f8 04             	cmp    eax,0x4
c0019f4d:	74 39                	je     c0019f88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f4f:	eb 3f                	jmp    c0019f90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f58:	0f b6 c0             	movzx  eax,al
c0019f5b:	83 e0 10             	and    eax,0x10
c0019f5e:	0f 95 c2             	setne  dl
c0019f61:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f68:	88 10                	mov    BYTE PTR [eax],dl
c0019f6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f6e:	ba 00 00 00 00       	mov    edx,0x0
c0019f73:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f7a:	89 01                	mov    DWORD PTR [ecx],eax
c0019f7c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f7f:	b8 00 00 00 00       	mov    eax,0x0
c0019f84:	eb 12                	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f86:	66 90                	xchg   ax,ax
c0019f88:	b8 02 00 00 00       	mov    eax,0x2
c0019f8d:	eb 09                	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f8f:	90                   	nop
c0019f90:	b8 01 00 00 00       	mov    eax,0x1
c0019f95:	8d 76 00             	lea    esi,[esi+0x0]
c0019f98:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f9e:	c3                   	ret    
c0019f9f:	90                   	nop

c0019fa0 <FAT::unlink(char const*)>:
c0019fa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fa6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fae:	75 08                	jne    c0019fb8 <FAT::unlink(char const*)+0x18>
c0019fb0:	b8 04 00 00 00       	mov    eax,0x4
c0019fb5:	eb 61                	jmp    c001a018 <FAT::unlink(char const*)+0x78>
c0019fb7:	90                   	nop
c0019fb8:	83 ec 08             	sub    esp,0x8
c0019fbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fc6:	50                   	push   eax
c0019fc7:	e8 84 66 fe ff       	call   c0000650 <strcpy>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	83 ec 08             	sub    esp,0x8
c0019fd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fd6:	50                   	push   eax
c0019fd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fde:	e8 61 fc ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c0019fe3:	83 c4 10             	add    esp,0x10
c0019fe6:	83 ec 0c             	sub    esp,0xc
c0019fe9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fed:	50                   	push   eax
c0019fee:	e8 2d aa fe ff       	call   c0004a20 <f_unlink>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ffd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a004:	85 c0                	test   eax,eax
c001a006:	75 08                	jne    c001a010 <FAT::unlink(char const*)+0x70>
c001a008:	b8 00 00 00 00       	mov    eax,0x0
c001a00d:	eb 09                	jmp    c001a018 <FAT::unlink(char const*)+0x78>
c001a00f:	90                   	nop
c001a010:	b8 01 00 00 00       	mov    eax,0x1
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a01e:	c3                   	ret    
c001a01f:	90                   	nop

c001a020 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a020:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a026:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a02d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a034:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a038:	88 d0                	mov    al,dl
c001a03a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a03e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a046:	75 0c                	jne    c001a054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a048:	b8 04 00 00 00       	mov    eax,0x4
c001a04d:	e9 7e 01 00 00       	jmp    c001a1d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a052:	66 90                	xchg   ax,ax
c001a054:	83 ec 08             	sub    esp,0x8
c001a057:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a05e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a062:	50                   	push   eax
c001a063:	e8 e8 65 fe ff       	call   c0000650 <strcpy>
c001a068:	83 c4 10             	add    esp,0x10
c001a06b:	83 ec 08             	sub    esp,0x8
c001a06e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a072:	50                   	push   eax
c001a073:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a07a:	e8 c5 fb ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a07f:	83 c4 10             	add    esp,0x10
c001a082:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a08a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a092:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a097:	83 e0 01             	and    eax,0x1
c001a09a:	74 14                	je     c001a0b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a09c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0a3:	83 c8 01             	or     eax,0x1
c001a0a6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0b5:	83 e0 02             	and    eax,0x2
c001a0b8:	74 12                	je     c001a0cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a0ba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0c1:	83 c8 20             	or     eax,0x20
c001a0c4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0cb:	90                   	nop
c001a0cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0d1:	83 e0 04             	and    eax,0x4
c001a0d4:	74 12                	je     c001a0e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a0d6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0dd:	83 c8 04             	or     eax,0x4
c001a0e0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0e7:	90                   	nop
c001a0e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0ed:	83 e0 08             	and    eax,0x8
c001a0f0:	74 12                	je     c001a104 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a0f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0f9:	83 c8 02             	or     eax,0x2
c001a0fc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a103:	90                   	nop
c001a104:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a109:	83 e0 01             	and    eax,0x1
c001a10c:	74 12                	je     c001a120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a10e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a115:	83 c8 01             	or     eax,0x1
c001a118:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a11f:	90                   	nop
c001a120:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a125:	83 e0 02             	and    eax,0x2
c001a128:	74 12                	je     c001a13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a12a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a131:	83 c8 20             	or     eax,0x20
c001a134:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a13b:	90                   	nop
c001a13c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a141:	83 e0 04             	and    eax,0x4
c001a144:	74 12                	je     c001a158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a146:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a14d:	83 c8 04             	or     eax,0x4
c001a150:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a157:	90                   	nop
c001a158:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a15d:	83 e0 08             	and    eax,0x8
c001a160:	74 12                	je     c001a174 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a162:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a169:	83 c8 02             	or     eax,0x2
c001a16c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a173:	90                   	nop
c001a174:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a17b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a182:	09 d0                	or     eax,edx
c001a184:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a18b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a193:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a19b:	83 ec 04             	sub    esp,0x4
c001a19e:	52                   	push   edx
c001a19f:	50                   	push   eax
c001a1a0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1a4:	50                   	push   eax
c001a1a5:	e8 e9 ac fe ff       	call   c0004e93 <f_chmod>
c001a1aa:	83 c4 10             	add    esp,0x10
c001a1ad:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1b4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1bb:	85 c0                	test   eax,eax
c001a1bd:	75 09                	jne    c001a1c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a1bf:	b8 00 00 00 00       	mov    eax,0x0
c001a1c4:	eb 0a                	jmp    c001a1d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a1c6:	66 90                	xchg   ax,ax
c001a1c8:	b8 01 00 00 00       	mov    eax,0x1
c001a1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a1d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1d6:	c3                   	ret    
c001a1d7:	90                   	nop

c001a1d8 <FAT::rename(char const*, char const*)>:
c001a1d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1de:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1e6:	74 0c                	je     c001a1f4 <FAT::rename(char const*, char const*)+0x1c>
c001a1e8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1f0:	75 0e                	jne    c001a200 <FAT::rename(char const*, char const*)+0x28>
c001a1f2:	66 90                	xchg   ax,ax
c001a1f4:	b8 04 00 00 00       	mov    eax,0x4
c001a1f9:	e9 9e 00 00 00       	jmp    c001a29c <FAT::rename(char const*, char const*)+0xc4>
c001a1fe:	66 90                	xchg   ax,ax
c001a200:	83 ec 08             	sub    esp,0x8
c001a203:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a20a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a211:	50                   	push   eax
c001a212:	e8 39 64 fe ff       	call   c0000650 <strcpy>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	83 ec 08             	sub    esp,0x8
c001a21d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a224:	50                   	push   eax
c001a225:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a22c:	e8 13 fa ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	83 ec 08             	sub    esp,0x8
c001a237:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a23e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a242:	50                   	push   eax
c001a243:	e8 08 64 fe ff       	call   c0000650 <strcpy>
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	83 ec 08             	sub    esp,0x8
c001a24e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a252:	50                   	push   eax
c001a253:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a25a:	e8 e5 f9 ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a25f:	83 c4 10             	add    esp,0x10
c001a262:	83 ec 08             	sub    esp,0x8
c001a265:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a269:	50                   	push   eax
c001a26a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a271:	50                   	push   eax
c001a272:	e8 64 aa fe ff       	call   c0004cdb <f_rename>
c001a277:	83 c4 10             	add    esp,0x10
c001a27a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a281:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a288:	85 c0                	test   eax,eax
c001a28a:	75 08                	jne    c001a294 <FAT::rename(char const*, char const*)+0xbc>
c001a28c:	b8 00 00 00 00       	mov    eax,0x0
c001a291:	eb 09                	jmp    c001a29c <FAT::rename(char const*, char const*)+0xc4>
c001a293:	90                   	nop
c001a294:	b8 01 00 00 00       	mov    eax,0x1
c001a299:	8d 76 00             	lea    esi,[esi+0x0]
c001a29c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2a2:	c3                   	ret    
c001a2a3:	90                   	nop

c001a2a4 <FAT::mkdir(char const*)>:
c001a2a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2b2:	75 08                	jne    c001a2bc <FAT::mkdir(char const*)+0x18>
c001a2b4:	b8 04 00 00 00       	mov    eax,0x4
c001a2b9:	eb 61                	jmp    c001a31c <FAT::mkdir(char const*)+0x78>
c001a2bb:	90                   	nop
c001a2bc:	83 ec 08             	sub    esp,0x8
c001a2bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2ca:	50                   	push   eax
c001a2cb:	e8 80 63 fe ff       	call   c0000650 <strcpy>
c001a2d0:	83 c4 10             	add    esp,0x10
c001a2d3:	83 ec 08             	sub    esp,0x8
c001a2d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2da:	50                   	push   eax
c001a2db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2e2:	e8 5d f9 ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a2e7:	83 c4 10             	add    esp,0x10
c001a2ea:	83 ec 0c             	sub    esp,0xc
c001a2ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2f1:	50                   	push   eax
c001a2f2:	e8 49 a8 fe ff       	call   c0004b40 <f_mkdir>
c001a2f7:	83 c4 10             	add    esp,0x10
c001a2fa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a301:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a308:	85 c0                	test   eax,eax
c001a30a:	75 08                	jne    c001a314 <FAT::mkdir(char const*)+0x70>
c001a30c:	b8 00 00 00 00       	mov    eax,0x0
c001a311:	eb 09                	jmp    c001a31c <FAT::mkdir(char const*)+0x78>
c001a313:	90                   	nop
c001a314:	b8 01 00 00 00       	mov    eax,0x1
c001a319:	8d 76 00             	lea    esi,[esi+0x0]
c001a31c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a322:	c3                   	ret    
c001a323:	90                   	nop

c001a324 <FAT::exists(char const*)>:
c001a324:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a32a:	83 ec 08             	sub    esp,0x8
c001a32d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a334:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a338:	50                   	push   eax
c001a339:	e8 12 63 fe ff       	call   c0000650 <strcpy>
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	83 ec 08             	sub    esp,0x8
c001a344:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a348:	50                   	push   eax
c001a349:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a350:	e8 ef f8 ff ff       	call   c0019c44 <FAT::fixFilepath(char*)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	83 ec 08             	sub    esp,0x8
c001a35b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a362:	50                   	push   eax
c001a363:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a367:	50                   	push   eax
c001a368:	e8 41 a4 fe ff       	call   c00047ae <f_stat>
c001a36d:	83 c4 10             	add    esp,0x10
c001a370:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a377:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a37e:	85 c0                	test   eax,eax
c001a380:	75 06                	jne    c001a388 <FAT::exists(char const*)+0x64>
c001a382:	b0 01                	mov    al,0x1
c001a384:	eb 06                	jmp    c001a38c <FAT::exists(char const*)+0x68>
c001a386:	66 90                	xchg   ax,ax
c001a388:	b0 00                	mov    al,0x0
c001a38a:	66 90                	xchg   ax,ax
c001a38c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a392:	c3                   	ret    
c001a393:	90                   	nop

c001a394 <isoReadDiscSectorHelper>:
c001a394:	83 ec 2c             	sub    esp,0x2c
c001a397:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a39b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a39f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3a4:	83 e8 41             	sub    eax,0x41
c001a3a7:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3b2:	ba 00 00 00 00       	mov    edx,0x0
c001a3b7:	83 ec 0c             	sub    esp,0xc
c001a3ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3c2:	52                   	push   edx
c001a3c3:	50                   	push   eax
c001a3c4:	51                   	push   ecx
c001a3c5:	e8 c0 39 ff ff       	call   c000dd8a <LogicalDisk::read(unsigned long long, int, void*)>
c001a3ca:	83 c4 20             	add    esp,0x20
c001a3cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3d6:	74 0c                	je     c001a3e4 <isoReadDiscSectorHelper+0x50>
c001a3d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3dc:	c1 e0 0b             	shl    eax,0xb
c001a3df:	eb 0b                	jmp    c001a3ec <isoReadDiscSectorHelper+0x58>
c001a3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e4:	b8 00 00 00 00       	mov    eax,0x0
c001a3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ec:	83 c4 2c             	add    esp,0x2c
c001a3ef:	c3                   	ret    

c001a3f0 <iso_kprintf>:
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	83 ec 08             	sub    esp,0x8
c001a3f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3fa:	68 b6 2b 02 c0       	push   0xc0022bb6
c001a3ff:	e8 06 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	90                   	nop
c001a408:	83 c4 0c             	add    esp,0xc
c001a40b:	c3                   	ret    

c001a40c <iso_kprintfd>:
c001a40c:	83 ec 0c             	sub    esp,0xc
c001a40f:	83 ec 08             	sub    esp,0x8
c001a412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a416:	68 fa 12 02 c0       	push   0xc00212fa
c001a41b:	e8 ea 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	90                   	nop
c001a424:	83 c4 0c             	add    esp,0xc
c001a427:	c3                   	ret    

c001a428 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a428:	b8 08 00 00 00       	mov    eax,0x8
c001a42d:	c3                   	ret    

c001a42e <ISO9660::truncate(void*, unsigned long long)>:
c001a42e:	b8 01 00 00 00       	mov    eax,0x1
c001a433:	c3                   	ret    

c001a434 <ISO9660::getName()>:
c001a434:	b8 6c 2e 02 c0       	mov    eax,0xc0022e6c
c001a439:	c3                   	ret    

c001a43a <ISO9660::closeDir(void*)>:
c001a43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a440:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a443:	90                   	nop

c001a444 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a444:	b8 01 00 00 00       	mov    eax,0x1
c001a449:	c3                   	ret    

c001a44a <ISO9660::unlink(char const*)>:
c001a44a:	b8 01 00 00 00       	mov    eax,0x1
c001a44f:	c3                   	ret    

c001a450 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a450:	b8 03 00 00 00       	mov    eax,0x3
c001a455:	c3                   	ret    

c001a456 <ISO9660::rename(char const*, char const*)>:
c001a456:	b8 01 00 00 00       	mov    eax,0x1
c001a45b:	c3                   	ret    

c001a45c <ISO9660::mkdir(char const*)>:
c001a45c:	b8 01 00 00 00       	mov    eax,0x1
c001a461:	c3                   	ret    

c001a462 <ISO9660::~ISO9660()>:
c001a462:	83 ec 0c             	sub    esp,0xc
c001a465:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001a46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46e:	89 10                	mov    DWORD PTR [eax],edx
c001a470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	50                   	push   eax
c001a478:	e8 13 13 ff ff       	call   c000b790 <Filesystem::~Filesystem()>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	90                   	nop
c001a481:	83 c4 0c             	add    esp,0xc
c001a484:	c3                   	ret    
c001a485:	90                   	nop

c001a486 <ISO9660::~ISO9660()>:
c001a486:	83 ec 0c             	sub    esp,0xc
c001a489:	83 ec 0c             	sub    esp,0xc
c001a48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a490:	e8 cd ff ff ff       	call   c001a462 <ISO9660::~ISO9660()>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	83 ec 08             	sub    esp,0x8
c001a49b:	6a 08                	push   0x8
c001a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4a1:	e8 66 03 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a4a6:	83 c4 10             	add    esp,0x10
c001a4a9:	83 c4 0c             	add    esp,0xc
c001a4ac:	c3                   	ret    
c001a4ad:	90                   	nop

c001a4ae <ISO9660::exists(char const*)>:
c001a4ae:	83 ec 18             	sub    esp,0x18
c001a4b1:	68 87 2e 02 c0       	push   0xc0022e87
c001a4b6:	e8 ac 70 ff ff       	call   c0011567 <KePanic(char const*)>
c001a4bb:	31 c0                	xor    eax,eax
c001a4bd:	83 c4 1c             	add    esp,0x1c
c001a4c0:	c3                   	ret    
c001a4c1:	90                   	nop

c001a4c2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4c2:	56                   	push   esi
c001a4c3:	53                   	push   ebx
c001a4c4:	53                   	push   ebx
c001a4c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4cd:	85 db                	test   ebx,ebx
c001a4cf:	0f 84 ca 00 00 00    	je     c001a59f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4d5:	85 f6                	test   esi,esi
c001a4d7:	0f 84 c2 00 00 00    	je     c001a59f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4dd:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a4e2:	b8 03 00 00 00       	mov    eax,0x3
c001a4e7:	0f 85 b7 00 00 00    	jne    c001a5a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a4ef:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a4f5:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4fc:	74 1b                	je     c001a519 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a4fe:	85 c0                	test   eax,eax
c001a500:	74 10                	je     c001a512 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a502:	83 ec 0c             	sub    esp,0xc
c001a505:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a50a:	e8 58 70 ff ff       	call   c0011567 <KePanic(char const*)>
c001a50f:	83 c4 10             	add    esp,0x10
c001a512:	8a 03                	mov    al,BYTE PTR [ebx]
c001a514:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a519:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a51c:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a523:	85 c0                	test   eax,eax
c001a525:	74 09                	je     c001a530 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a527:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a52e:	74 48                	je     c001a578 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	68 b5 2e 02 c0       	push   0xc0022eb5
c001a538:	e8 cd 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a53d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a54a:	85 c0                	test   eax,eax
c001a54c:	74 17                	je     c001a565 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a54e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a555:	83 ec 0c             	sub    esp,0xc
c001a558:	68 d5 2e 02 c0       	push   0xc0022ed5
c001a55d:	e8 a8 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a56c:	83 ec 0c             	sub    esp,0xc
c001a56f:	50                   	push   eax
c001a570:	e8 f2 c4 fe ff       	call   c0006a67 <init_percd>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	51                   	push   ecx
c001a579:	83 c3 03             	add    ebx,0x3
c001a57c:	51                   	push   ecx
c001a57d:	6a 00                	push   0x0
c001a57f:	53                   	push   ebx
c001a580:	e8 a5 bf fe ff       	call   c000652a <iso_open>
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	89 c2                	mov    edx,eax
c001a58a:	b8 01 00 00 00       	mov    eax,0x1
c001a58f:	83 fa ff             	cmp    edx,0xffffffff
c001a592:	74 10                	je     c001a5a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a594:	83 c2 32             	add    edx,0x32
c001a597:	31 c0                	xor    eax,eax
c001a599:	01 d2                	add    edx,edx
c001a59b:	89 16                	mov    DWORD PTR [esi],edx
c001a59d:	eb 05                	jmp    c001a5a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a59f:	b8 04 00 00 00       	mov    eax,0x4
c001a5a4:	5a                   	pop    edx
c001a5a5:	5b                   	pop    ebx
c001a5a6:	5e                   	pop    esi
c001a5a7:	c3                   	ret    

c001a5a8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5a8:	53                   	push   ebx
c001a5a9:	83 ec 08             	sub    esp,0x8
c001a5ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5b4:	85 c0                	test   eax,eax
c001a5b6:	74 2d                	je     c001a5e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5b8:	85 db                	test   ebx,ebx
c001a5ba:	74 29                	je     c001a5e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5bc:	52                   	push   edx
c001a5bd:	b9 02 00 00 00       	mov    ecx,0x2
c001a5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5c6:	99                   	cdq    
c001a5c7:	f7 f9                	idiv   ecx
c001a5c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5cd:	83 e8 32             	sub    eax,0x32
c001a5d0:	50                   	push   eax
c001a5d1:	e8 fc bf fe ff       	call   c00065d2 <iso_read>
c001a5d6:	83 c4 10             	add    esp,0x10
c001a5d9:	89 03                	mov    DWORD PTR [ebx],eax
c001a5db:	09 d0                	or     eax,edx
c001a5dd:	0f 94 c0             	sete   al
c001a5e0:	0f b6 c0             	movzx  eax,al
c001a5e3:	eb 05                	jmp    c001a5ea <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a5e5:	b8 04 00 00 00       	mov    eax,0x4
c001a5ea:	83 c4 08             	add    esp,0x8
c001a5ed:	5b                   	pop    ebx
c001a5ee:	c3                   	ret    
c001a5ef:	90                   	nop

c001a5f0 <ISO9660::seek(void*, unsigned long long)>:
c001a5f0:	57                   	push   edi
c001a5f1:	b8 04 00 00 00       	mov    eax,0x4
c001a5f6:	56                   	push   esi
c001a5f7:	51                   	push   ecx
c001a5f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a600:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a604:	85 d2                	test   edx,edx
c001a606:	74 26                	je     c001a62e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a608:	89 d0                	mov    eax,edx
c001a60a:	b9 02 00 00 00       	mov    ecx,0x2
c001a60f:	6a 00                	push   0x0
c001a611:	99                   	cdq    
c001a612:	f7 f9                	idiv   ecx
c001a614:	57                   	push   edi
c001a615:	56                   	push   esi
c001a616:	83 e8 32             	sub    eax,0x32
c001a619:	50                   	push   eax
c001a61a:	e8 c9 c0 fe ff       	call   c00066e8 <iso_seek>
c001a61f:	83 c4 10             	add    esp,0x10
c001a622:	31 f0                	xor    eax,esi
c001a624:	31 fa                	xor    edx,edi
c001a626:	09 d0                	or     eax,edx
c001a628:	0f 95 c0             	setne  al
c001a62b:	0f b6 c0             	movzx  eax,al
c001a62e:	5a                   	pop    edx
c001a62f:	5e                   	pop    esi
c001a630:	5f                   	pop    edi
c001a631:	c3                   	ret    

c001a632 <ISO9660::tell(void*, unsigned long long*)>:
c001a632:	53                   	push   ebx
c001a633:	83 ec 08             	sub    esp,0x8
c001a636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a63a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a63e:	85 c0                	test   eax,eax
c001a640:	74 24                	je     c001a666 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a642:	85 db                	test   ebx,ebx
c001a644:	74 20                	je     c001a666 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a646:	b9 02 00 00 00       	mov    ecx,0x2
c001a64b:	99                   	cdq    
c001a64c:	f7 f9                	idiv   ecx
c001a64e:	83 ec 0c             	sub    esp,0xc
c001a651:	83 e8 32             	sub    eax,0x32
c001a654:	50                   	push   eax
c001a655:	e8 12 c1 fe ff       	call   c000676c <iso_tell>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	89 03                	mov    DWORD PTR [ebx],eax
c001a65f:	31 c0                	xor    eax,eax
c001a661:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a664:	eb 05                	jmp    c001a66b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a666:	b8 04 00 00 00       	mov    eax,0x4
c001a66b:	83 c4 08             	add    esp,0x8
c001a66e:	5b                   	pop    ebx
c001a66f:	c3                   	ret    

c001a670 <ISO9660::stat(void*, unsigned long long*)>:
c001a670:	56                   	push   esi
c001a671:	53                   	push   ebx
c001a672:	83 ec 10             	sub    esp,0x10
c001a675:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a679:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a67d:	68 f9 2e 02 c0       	push   0xc0022ef9
c001a682:	e8 83 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	85 db                	test   ebx,ebx
c001a68c:	74 2a                	je     c001a6b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a68e:	85 f6                	test   esi,esi
c001a690:	74 26                	je     c001a6b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a692:	89 d8                	mov    eax,ebx
c001a694:	b9 02 00 00 00       	mov    ecx,0x2
c001a699:	99                   	cdq    
c001a69a:	83 ec 0c             	sub    esp,0xc
c001a69d:	f7 f9                	idiv   ecx
c001a69f:	83 e8 32             	sub    eax,0x32
c001a6a2:	50                   	push   eax
c001a6a3:	e8 f5 c0 fe ff       	call   c000679d <iso_total>
c001a6a8:	83 c4 10             	add    esp,0x10
c001a6ab:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a6b2:	89 06                	mov    DWORD PTR [esi],eax
c001a6b4:	31 c0                	xor    eax,eax
c001a6b6:	eb 05                	jmp    c001a6bd <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6b8:	b8 04 00 00 00       	mov    eax,0x4
c001a6bd:	5a                   	pop    edx
c001a6be:	5b                   	pop    ebx
c001a6bf:	5e                   	pop    esi
c001a6c0:	c3                   	ret    
c001a6c1:	90                   	nop

c001a6c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6c2:	55                   	push   ebp
c001a6c3:	57                   	push   edi
c001a6c4:	56                   	push   esi
c001a6c5:	53                   	push   ebx
c001a6c6:	83 ec 18             	sub    esp,0x18
c001a6c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a6cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a6d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6d5:	68 01 2f 02 c0       	push   0xc0022f01
c001a6da:	e8 2b 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6df:	83 c4 10             	add    esp,0x10
c001a6e2:	85 ff                	test   edi,edi
c001a6e4:	0f 94 c0             	sete   al
c001a6e7:	85 f6                	test   esi,esi
c001a6e9:	0f 94 c2             	sete   dl
c001a6ec:	09 d0                	or     eax,edx
c001a6ee:	a8 01                	test   al,0x1
c001a6f0:	0f 85 dd 00 00 00    	jne    c001a7d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6f6:	85 db                	test   ebx,ebx
c001a6f8:	0f 84 d5 00 00 00    	je     c001a7d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a701:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a707:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a70e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a715:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a717:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a71d:	74 1b                	je     c001a73a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a71f:	85 c0                	test   eax,eax
c001a721:	74 10                	je     c001a733 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a723:	83 ec 0c             	sub    esp,0xc
c001a726:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a72b:	e8 37 6e ff ff       	call   c0011567 <KePanic(char const*)>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	8a 03                	mov    al,BYTE PTR [ebx]
c001a735:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a73a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a73d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a744:	85 c0                	test   eax,eax
c001a746:	74 09                	je     c001a751 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a748:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a74f:	74 51                	je     c001a7a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a751:	83 ec 0c             	sub    esp,0xc
c001a754:	68 09 2f 02 c0       	push   0xc0022f09
c001a759:	e8 ac 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a75e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a761:	83 c4 10             	add    esp,0x10
c001a764:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a76c:	74 21                	je     c001a78f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a76e:	83 ec 0c             	sub    esp,0xc
c001a771:	68 29 2f 02 c0       	push   0xc0022f29
c001a776:	e8 8f 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a77b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a77e:	83 c4 10             	add    esp,0x10
c001a781:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a788:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a78f:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a796:	83 ec 0c             	sub    esp,0xc
c001a799:	50                   	push   eax
c001a79a:	e8 c8 c2 fe ff       	call   c0006a67 <init_percd>
c001a79f:	83 c4 10             	add    esp,0x10
c001a7a2:	52                   	push   edx
c001a7a3:	83 c3 03             	add    ebx,0x3
c001a7a6:	52                   	push   edx
c001a7a7:	6a 00                	push   0x0
c001a7a9:	53                   	push   ebx
c001a7aa:	e8 7b bd fe ff       	call   c000652a <iso_open>
c001a7af:	83 c4 10             	add    esp,0x10
c001a7b2:	83 f8 ff             	cmp    eax,0xffffffff
c001a7b5:	89 c5                	mov    ebp,eax
c001a7b7:	75 21                	jne    c001a7da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7b9:	50                   	push   eax
c001a7ba:	50                   	push   eax
c001a7bb:	6a 01                	push   0x1
c001a7bd:	53                   	push   ebx
c001a7be:	e8 67 bd fe ff       	call   c000652a <iso_open>
c001a7c3:	83 c4 10             	add    esp,0x10
c001a7c6:	ba 02 00 00 00       	mov    edx,0x2
c001a7cb:	40                   	inc    eax
c001a7cc:	74 2b                	je     c001a7f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7ce:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a7d1:	eb 24                	jmp    c001a7f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a7d3:	ba 04 00 00 00       	mov    edx,0x4
c001a7d8:	eb 1f                	jmp    c001a7f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7da:	83 ec 0c             	sub    esp,0xc
c001a7dd:	50                   	push   eax
c001a7de:	e8 ba bf fe ff       	call   c000679d <iso_total>
c001a7e3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7ea:	89 07                	mov    DWORD PTR [edi],eax
c001a7ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a7ef:	e8 c0 bd fe ff       	call   c00065b4 <iso_close>
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	31 d2                	xor    edx,edx
c001a7f9:	83 c4 0c             	add    esp,0xc
c001a7fc:	89 d0                	mov    eax,edx
c001a7fe:	5b                   	pop    ebx
c001a7ff:	5e                   	pop    esi
c001a800:	5f                   	pop    edi
c001a801:	5d                   	pop    ebp
c001a802:	c3                   	ret    
c001a803:	90                   	nop

c001a804 <ISO9660::close(void*)>:
c001a804:	83 ec 0c             	sub    esp,0xc
c001a807:	b8 04 00 00 00       	mov    eax,0x4
c001a80c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a810:	85 d2                	test   edx,edx
c001a812:	74 1b                	je     c001a82f <ISO9660::close(void*)+0x2b>
c001a814:	89 d0                	mov    eax,edx
c001a816:	b9 02 00 00 00       	mov    ecx,0x2
c001a81b:	99                   	cdq    
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	f7 f9                	idiv   ecx
c001a821:	83 e8 32             	sub    eax,0x32
c001a824:	50                   	push   eax
c001a825:	e8 8a bd fe ff       	call   c00065b4 <iso_close>
c001a82a:	83 c4 10             	add    esp,0x10
c001a82d:	31 c0                	xor    eax,eax
c001a82f:	83 c4 0c             	add    esp,0xc
c001a832:	c3                   	ret    
c001a833:	90                   	nop

c001a834 <ISO9660::openDir(char const*, void**)>:
c001a834:	56                   	push   esi
c001a835:	53                   	push   ebx
c001a836:	50                   	push   eax
c001a837:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a83b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a83f:	85 db                	test   ebx,ebx
c001a841:	0f 84 bd 00 00 00    	je     c001a904 <ISO9660::openDir(char const*, void**)+0xd0>
c001a847:	85 f6                	test   esi,esi
c001a849:	0f 84 b5 00 00 00    	je     c001a904 <ISO9660::openDir(char const*, void**)+0xd0>
c001a84f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a851:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a857:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a85e:	74 1b                	je     c001a87b <ISO9660::openDir(char const*, void**)+0x47>
c001a860:	85 c0                	test   eax,eax
c001a862:	74 10                	je     c001a874 <ISO9660::openDir(char const*, void**)+0x40>
c001a864:	83 ec 0c             	sub    esp,0xc
c001a867:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a86c:	e8 f6 6c ff ff       	call   c0011567 <KePanic(char const*)>
c001a871:	83 c4 10             	add    esp,0x10
c001a874:	8a 03                	mov    al,BYTE PTR [ebx]
c001a876:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a87b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a87e:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a885:	85 c0                	test   eax,eax
c001a887:	74 10                	je     c001a899 <ISO9660::openDir(char const*, void**)+0x65>
c001a889:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a890:	74 1a                	je     c001a8ac <ISO9660::openDir(char const*, void**)+0x78>
c001a892:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a899:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	50                   	push   eax
c001a8a4:	e8 be c1 fe ff       	call   c0006a67 <init_percd>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	50                   	push   eax
c001a8ad:	83 c3 03             	add    ebx,0x3
c001a8b0:	50                   	push   eax
c001a8b1:	6a 01                	push   0x1
c001a8b3:	53                   	push   ebx
c001a8b4:	e8 71 bc fe ff       	call   c000652a <iso_open>
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	83 f8 ff             	cmp    eax,0xffffffff
c001a8bf:	89 c3                	mov    ebx,eax
c001a8c1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8c6:	75 1c                	jne    c001a8e4 <ISO9660::openDir(char const*, void**)+0xb0>
c001a8c8:	53                   	push   ebx
c001a8c9:	53                   	push   ebx
c001a8ca:	68 4d 2f 02 c0       	push   0xc0022f4d
c001a8cf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8d5:	e8 d2 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a8da:	83 c4 10             	add    esp,0x10
c001a8dd:	b8 01 00 00 00       	mov    eax,0x1
c001a8e2:	eb 25                	jmp    c001a909 <ISO9660::openDir(char const*, void**)+0xd5>
c001a8e4:	51                   	push   ecx
c001a8e5:	01 db                	add    ebx,ebx
c001a8e7:	51                   	push   ecx
c001a8e8:	83 c3 65             	add    ebx,0x65
c001a8eb:	68 60 2f 02 c0       	push   0xc0022f60
c001a8f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8f6:	e8 b1 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a8fb:	83 c4 10             	add    esp,0x10
c001a8fe:	31 c0                	xor    eax,eax
c001a900:	89 1e                	mov    DWORD PTR [esi],ebx
c001a902:	eb 05                	jmp    c001a909 <ISO9660::openDir(char const*, void**)+0xd5>
c001a904:	b8 04 00 00 00       	mov    eax,0x4
c001a909:	5a                   	pop    edx
c001a90a:	5b                   	pop    ebx
c001a90b:	5e                   	pop    esi
c001a90c:	c3                   	ret    
c001a90d:	90                   	nop

c001a90e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a90e:	55                   	push   ebp
c001a90f:	57                   	push   edi
c001a910:	56                   	push   esi
c001a911:	53                   	push   ebx
c001a912:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a918:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a91f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a926:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a92d:	85 db                	test   ebx,ebx
c001a92f:	0f 84 e4 00 00 00    	je     c001aa19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a935:	85 ed                	test   ebp,ebp
c001a937:	0f 84 dc 00 00 00    	je     c001aa19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a93d:	83 ec 0c             	sub    esp,0xc
c001a940:	68 73 2f 02 c0       	push   0xc0022f73
c001a945:	e8 c0 ff fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a94a:	89 d8                	mov    eax,ebx
c001a94c:	b9 02 00 00 00       	mov    ecx,0x2
c001a951:	99                   	cdq    
c001a952:	f7 f9                	idiv   ecx
c001a954:	83 e8 32             	sub    eax,0x32
c001a957:	89 04 24             	mov    DWORD PTR [esp],eax
c001a95a:	e8 90 be fe ff       	call   c00067ef <iso_readdir>
c001a95f:	83 c4 10             	add    esp,0x10
c001a962:	85 c0                	test   eax,eax
c001a964:	89 c3                	mov    ebx,eax
c001a966:	75 38                	jne    c001a9a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a968:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a96d:	53                   	push   ebx
c001a96e:	53                   	push   ebx
c001a96f:	68 7e 2f 02 c0       	push   0xc0022f7e
c001a974:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a97a:	e8 2d e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a97f:	83 c4 0c             	add    esp,0xc
c001a982:	68 10 01 00 00       	push   0x110
c001a987:	6a 00                	push   0x0
c001a989:	57                   	push   edi
c001a98a:	e8 61 5b fe ff       	call   c00004f0 <memset>
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	b8 01 00 00 00       	mov    eax,0x1
c001a997:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a99e:	eb 7e                	jmp    c001aa1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a9a0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9a6:	8d 70 08             	lea    esi,[eax+0x8]
c001a9a9:	83 ec 0c             	sub    esp,0xc
c001a9ac:	56                   	push   esi
c001a9ad:	e8 ce 5b fe ff       	call   c0000580 <strlen>
c001a9b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a9c5:	75 0a                	jne    c001a9d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a9c7:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a9ca:	b8 02 00 00 00       	mov    eax,0x2
c001a9cf:	74 05                	je     c001a9d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a9d1:	b8 01 00 00 00       	mov    eax,0x1
c001a9d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9da:	50                   	push   eax
c001a9db:	50                   	push   eax
c001a9dc:	56                   	push   esi
c001a9dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9e1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a9e5:	50                   	push   eax
c001a9e6:	e8 65 5c fe ff       	call   c0000650 <strcpy>
c001a9eb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a9f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9f4:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a9fb:	5a                   	pop    edx
c001a9fc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa01:	59                   	pop    ecx
c001aa02:	68 91 2f 02 c0       	push   0xc0022f91
c001aa07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa0d:	e8 9a e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	31 c0                	xor    eax,eax
c001aa17:	eb 05                	jmp    c001aa1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aa19:	b8 04 00 00 00       	mov    eax,0x4
c001aa1e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa24:	5b                   	pop    ebx
c001aa25:	5e                   	pop    esi
c001aa26:	5f                   	pop    edi
c001aa27:	5d                   	pop    ebp
c001aa28:	c3                   	ret    

c001aa29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa29:	57                   	push   edi
c001aa2a:	56                   	push   esi
c001aa2b:	53                   	push   ebx
c001aa2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa30:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa34:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa3e:	0f be cb             	movsx  ecx,bl
c001aa41:	75 0b                	jne    c001aa4e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa43:	0f be 05 c0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241c0
c001aa4a:	39 c8                	cmp    eax,ecx
c001aa4c:	74 47                	je     c001aa95 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa4e:	83 ec 0c             	sub    esp,0xc
c001aa51:	31 d2                	xor    edx,edx
c001aa53:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa58:	6a 01                	push   0x1
c001aa5a:	52                   	push   edx
c001aa5b:	56                   	push   esi
c001aa5c:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa63:	e8 22 33 ff ff       	call   c000dd8a <LogicalDisk::read(unsigned long long, int, void*)>
c001aa68:	83 c4 20             	add    esp,0x20
c001aa6b:	85 c0                	test   eax,eax
c001aa6d:	75 0e                	jne    c001aa7d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa6f:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa75:	88 1d c0 41 02 c0    	mov    BYTE PTR ds:0xc00241c0,bl
c001aa7b:	eb 18                	jmp    c001aa95 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa7d:	50                   	push   eax
c001aa7e:	68 00 08 00 00       	push   0x800
c001aa83:	6a 00                	push   0x0
c001aa85:	57                   	push   edi
c001aa86:	e8 65 5a fe ff       	call   c00004f0 <memset>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	b8 01 00 00 00       	mov    eax,0x1
c001aa93:	eb 0e                	jmp    c001aaa3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa95:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa9a:	b9 00 08 00 00       	mov    ecx,0x800
c001aa9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aaa1:	31 c0                	xor    eax,eax
c001aaa3:	5b                   	pop    ebx
c001aaa4:	5e                   	pop    esi
c001aaa5:	5f                   	pop    edi
c001aaa6:	c3                   	ret    
c001aaa7:	90                   	nop

c001aaa8 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aaa8:	53                   	push   ebx
c001aaa9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aaaf:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aab9:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aac0:	8d 58 41             	lea    ebx,[eax+0x41]
c001aac3:	0f be db             	movsx  ebx,bl
c001aac6:	53                   	push   ebx
c001aac7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aacb:	50                   	push   eax
c001aacc:	6a 10                	push   0x10
c001aace:	e8 56 ff ff ff       	call   c001aa29 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	31 d2                	xor    edx,edx
c001aad8:	85 c0                	test   eax,eax
c001aada:	75 33                	jne    c001ab0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aadc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aae1:	75 2c                	jne    c001ab0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aae3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aae8:	75 25                	jne    c001ab0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaea:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aaef:	75 1e                	jne    c001ab0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aaf6:	75 17                	jne    c001ab0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aafd:	75 10                	jne    c001ab0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaff:	83 ec 0c             	sub    esp,0xc
c001ab02:	53                   	push   ebx
c001ab03:	e8 5f bf fe ff       	call   c0006a67 <init_percd>
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	40                   	inc    eax
c001ab0c:	0f 95 c2             	setne  dl
c001ab0f:	81 c4 08 08 00 00    	add    esp,0x808
c001ab15:	88 d0                	mov    al,dl
c001ab17:	5b                   	pop    ebx
c001ab18:	c3                   	ret    
c001ab19:	90                   	nop

c001ab1a <ISO9660::ISO9660()>:
c001ab1a:	83 ec 0c             	sub    esp,0xc
c001ab1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab21:	83 ec 0c             	sub    esp,0xc
c001ab24:	50                   	push   eax
c001ab25:	e8 42 0c ff ff       	call   c000b76c <Filesystem::Filesystem()>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001ab32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab36:	89 10                	mov    DWORD PTR [eax],edx
c001ab38:	e8 3c c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001ab3d:	90                   	nop
c001ab3e:	83 c4 0c             	add    esp,0xc
c001ab41:	c3                   	ret    

c001ab42 <SoundCard::beginPlayback()>:
c001ab42:	c7 44 24 04 10 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023010
c001ab4a:	e9 18 6a ff ff       	jmp    c0011567 <KePanic(char const*)>
c001ab4f:	90                   	nop

c001ab50 <SoundCard::stopPlayback()>:
c001ab50:	c7 44 24 04 10 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023010
c001ab58:	e9 0a 6a ff ff       	jmp    c0011567 <KePanic(char const*)>
c001ab5d:	90                   	nop

c001ab5e <SoundCard::SoundCard(char const*)>:
c001ab5e:	83 ec 1c             	sub    esp,0x1c
c001ab61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab65:	83 ec 08             	sub    esp,0x8
c001ab68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab6c:	50                   	push   eax
c001ab6d:	e8 c6 1f ff ff       	call   c000cb38 <Device::Device(char const*)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	ba 5c 30 02 c0       	mov    edx,0xc002305c
c001ab7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab7e:	89 10                	mov    DWORD PTR [eax],edx
c001ab80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab84:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab9d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001aba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abab:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abcb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001abd0:	7f 1a                	jg     c001abec <SoundCard::SoundCard(char const*)+0x8e>
c001abd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abda:	83 c2 54             	add    edx,0x54
c001abdd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001abe5:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001abea:	eb df                	jmp    c001abcb <SoundCard::SoundCard(char const*)+0x6d>
c001abec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abf7:	90                   	nop
c001abf8:	83 c4 1c             	add    esp,0x1c
c001abfb:	c3                   	ret    

c001abfc <SoundCard::~SoundCard()>:
c001abfc:	83 ec 0c             	sub    esp,0xc
c001abff:	ba 5c 30 02 c0       	mov    edx,0xc002305c
c001ac04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac08:	89 10                	mov    DWORD PTR [eax],edx
c001ac0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0e:	83 ec 0c             	sub    esp,0xc
c001ac11:	50                   	push   eax
c001ac12:	e8 8b 1c ff ff       	call   c000c8a2 <Device::~Device()>
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	90                   	nop
c001ac1b:	83 c4 0c             	add    esp,0xc
c001ac1e:	c3                   	ret    
c001ac1f:	90                   	nop

c001ac20 <SoundCard::~SoundCard()>:
c001ac20:	83 ec 0c             	sub    esp,0xc
c001ac23:	83 ec 0c             	sub    esp,0xc
c001ac26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac2a:	e8 cd ff ff ff       	call   c001abfc <SoundCard::~SoundCard()>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	83 ec 08             	sub    esp,0x8
c001ac35:	68 e8 01 00 00       	push   0x1e8
c001ac3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac3e:	e8 c9 fb fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ac43:	83 c4 10             	add    esp,0x10
c001ac46:	83 c4 0c             	add    esp,0xc
c001ac49:	c3                   	ret    

c001ac4a <SoundCard::configureRates(int, int, int)>:
c001ac4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac4e:	31 c0                	xor    eax,eax
c001ac50:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac57:	75 20                	jne    c001ac79 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac5d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac67:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac71:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac77:	b0 01                	mov    al,0x1
c001ac79:	c3                   	ret    

c001ac7a <SoundCard::getSamples16(int, short*)>:
c001ac7a:	55                   	push   ebp
c001ac7b:	57                   	push   edi
c001ac7c:	31 ff                	xor    edi,edi
c001ac7e:	56                   	push   esi
c001ac7f:	53                   	push   ebx
c001ac80:	31 db                	xor    ebx,ebx
c001ac82:	83 ec 10             	sub    esp,0x10
c001ac85:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac89:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac8d:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac90:	50                   	push   eax
c001ac91:	6a 00                	push   0x0
c001ac93:	55                   	push   ebp
c001ac94:	e8 57 58 fe ff       	call   c00004f0 <memset>
c001ac99:	83 c4 10             	add    esp,0x10
c001ac9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca0:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001aca7:	85 c0                	test   eax,eax
c001aca9:	74 1a                	je     c001acc5 <SoundCard::getSamples16(int, short*)+0x4b>
c001acab:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acaf:	75 14                	jne    c001acc5 <SoundCard::getSamples16(int, short*)+0x4b>
c001acb1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acb5:	55                   	push   ebp
c001acb6:	56                   	push   esi
c001acb7:	50                   	push   eax
c001acb8:	e8 f3 02 00 00       	call   c001afb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	39 c3                	cmp    ebx,eax
c001acc2:	0f 4c d8             	cmovl  ebx,eax
c001acc5:	47                   	inc    edi
c001acc6:	83 ff 20             	cmp    edi,0x20
c001acc9:	75 d1                	jne    c001ac9c <SoundCard::getSamples16(int, short*)+0x22>
c001accb:	83 c4 0c             	add    esp,0xc
c001acce:	89 d8                	mov    eax,ebx
c001acd0:	5b                   	pop    ebx
c001acd1:	5e                   	pop    esi
c001acd2:	5f                   	pop    edi
c001acd3:	5d                   	pop    ebp
c001acd4:	c3                   	ret    
c001acd5:	90                   	nop

c001acd6 <SoundCard::getSamples32(int, int*)>:
c001acd6:	55                   	push   ebp
c001acd7:	57                   	push   edi
c001acd8:	31 ff                	xor    edi,edi
c001acda:	56                   	push   esi
c001acdb:	31 f6                	xor    esi,esi
c001acdd:	53                   	push   ebx
c001acde:	83 ec 10             	sub    esp,0x10
c001ace1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ace5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ace9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aced:	c1 e0 02             	shl    eax,0x2
c001acf0:	50                   	push   eax
c001acf1:	6a 00                	push   0x0
c001acf3:	55                   	push   ebp
c001acf4:	e8 f7 57 fe ff       	call   c00004f0 <memset>
c001acf9:	83 c4 10             	add    esp,0x10
c001acfc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad03:	85 c0                	test   eax,eax
c001ad05:	74 1a                	je     c001ad21 <SoundCard::getSamples32(int, int*)+0x4b>
c001ad07:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad0b:	75 14                	jne    c001ad21 <SoundCard::getSamples32(int, int*)+0x4b>
c001ad0d:	53                   	push   ebx
c001ad0e:	55                   	push   ebp
c001ad0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad13:	50                   	push   eax
c001ad14:	e8 67 03 00 00       	call   c001b080 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	39 c6                	cmp    esi,eax
c001ad1e:	0f 4c f0             	cmovl  esi,eax
c001ad21:	47                   	inc    edi
c001ad22:	83 ff 20             	cmp    edi,0x20
c001ad25:	75 d5                	jne    c001acfc <SoundCard::getSamples32(int, int*)+0x26>
c001ad27:	85 f6                	test   esi,esi
c001ad29:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad30:	75 0f                	jne    c001ad41 <SoundCard::getSamples32(int, int*)+0x6b>
c001ad32:	85 c0                	test   eax,eax
c001ad34:	74 1b                	je     c001ad51 <SoundCard::getSamples32(int, int*)+0x7b>
c001ad36:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	53                   	push   ebx
c001ad3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad3f:	eb 0d                	jmp    c001ad4e <SoundCard::getSamples32(int, int*)+0x78>
c001ad41:	85 c0                	test   eax,eax
c001ad43:	75 0c                	jne    c001ad51 <SoundCard::getSamples32(int, int*)+0x7b>
c001ad45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad47:	83 ec 0c             	sub    esp,0xc
c001ad4a:	53                   	push   ebx
c001ad4b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad4e:	83 c4 10             	add    esp,0x10
c001ad51:	83 c4 0c             	add    esp,0xc
c001ad54:	89 f0                	mov    eax,esi
c001ad56:	5b                   	pop    ebx
c001ad57:	5e                   	pop    esi
c001ad58:	5f                   	pop    edi
c001ad59:	5d                   	pop    ebp
c001ad5a:	c3                   	ret    
c001ad5b:	90                   	nop

c001ad5c <SoundCard::addChannel(SoundPort*)>:
c001ad5c:	83 ec 0c             	sub    esp,0xc
c001ad5f:	31 c0                	xor    eax,eax
c001ad61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad65:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad6d:	74 1b                	je     c001ad8a <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad6f:	40                   	inc    eax
c001ad70:	83 f8 20             	cmp    eax,0x20
c001ad73:	75 f0                	jne    c001ad65 <SoundCard::addChannel(SoundPort*)+0x9>
c001ad75:	83 ec 0c             	sub    esp,0xc
c001ad78:	68 35 30 02 c0       	push   0xc0023035
c001ad7d:	e8 e5 67 ff ff       	call   c0011567 <KePanic(char const*)>
c001ad82:	83 c4 10             	add    esp,0x10
c001ad85:	83 c8 ff             	or     eax,0xffffffff
c001ad88:	eb 0b                	jmp    c001ad95 <SoundCard::addChannel(SoundPort*)+0x39>
c001ad8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad8e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad95:	83 c4 0c             	add    esp,0xc
c001ad98:	c3                   	ret    
c001ad99:	90                   	nop

c001ad9a <SoundCard::removeChannel(int)>:
c001ad9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ada2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001adad:	c3                   	ret    
c001adae:	66 90                	xchg   ax,ax

c001adb0 <SoundPort::SoundPort(int, int, int, int)>:
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001adc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adce:	89 10                	mov    DWORD PTR [eax],edx
c001add0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001add8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001addb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001addf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ade3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ade6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001adeb:	75 13                	jne    c001ae00 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001adf3:	05 a0 0f 00 00       	add    eax,0xfa0
c001adf8:	d1 e0                	shl    eax,1
c001adfa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001adfe:	66 90                	xchg   ax,ax
c001ae00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae1d:	c1 e0 02             	shl    eax,0x2
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	50                   	push   eax
c001ae24:	e8 aa cc fe ff       	call   c0007ad3 <malloc>
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	89 c2                	mov    edx,eax
c001ae2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae35:	90                   	nop
c001ae36:	83 c4 0c             	add    esp,0xc
c001ae39:	c3                   	ret    
c001ae3a:	66 90                	xchg   ax,ax

c001ae3c <SoundPort::~SoundPort()>:
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae46:	85 c0                	test   eax,eax
c001ae48:	74 1e                	je     c001ae68 <SoundPort::~SoundPort()+0x2c>
c001ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae51:	83 ec 0c             	sub    esp,0xc
c001ae54:	50                   	push   eax
c001ae55:	e8 89 cc fe ff       	call   c0007ae3 <free>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae61:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae68:	90                   	nop
c001ae69:	83 c4 0c             	add    esp,0xc
c001ae6c:	c3                   	ret    
c001ae6d:	90                   	nop
c001ae6e:	66 90                	xchg   ax,ax

c001ae70 <SoundPort::unpause()>:
c001ae70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae74:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae78:	c3                   	ret    
c001ae79:	90                   	nop
c001ae7a:	66 90                	xchg   ax,ax

c001ae7c <SoundPort::pause()>:
c001ae7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae80:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae84:	c3                   	ret    
c001ae85:	90                   	nop
c001ae86:	66 90                	xchg   ax,ax

c001ae88 <SoundPort::getBufferUsed()>:
c001ae88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae8f:	c3                   	ret    

c001ae90 <SoundPort::getBufferSize()>:
c001ae90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae97:	c3                   	ret    

c001ae98 <SoundPort::buffer16(short*, int)>:
c001ae98:	55                   	push   ebp
c001ae99:	57                   	push   edi
c001ae9a:	56                   	push   esi
c001ae9b:	53                   	push   ebx
c001ae9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aea0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aea4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aea7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aeaa:	74 68                	je     c001af14 <SoundPort::buffer16(short*, int)+0x7c>
c001aeac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aeb0:	85 c9                	test   ecx,ecx
c001aeb2:	7e 60                	jle    c001af14 <SoundPort::buffer16(short*, int)+0x7c>
c001aeb4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aeb8:	8d 70 01             	lea    esi,[eax+0x1]
c001aebb:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aebe:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aec1:	c1 e1 0f             	shl    ecx,0xf
c001aec4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aec7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aeca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aecd:	74 4d                	je     c001af1c <SoundPort::buffer16(short*, int)+0x84>
c001aecf:	31 f6                	xor    esi,esi
c001aed1:	eb 21                	jmp    c001aef4 <SoundPort::buffer16(short*, int)+0x5c>
c001aed3:	90                   	nop
c001aed4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aed9:	8d 79 01             	lea    edi,[ecx+0x1]
c001aedc:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aedf:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aee2:	c1 e3 0f             	shl    ebx,0xf
c001aee5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aee8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aeeb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aeee:	74 1c                	je     c001af0c <SoundPort::buffer16(short*, int)+0x74>
c001aef0:	89 c6                	mov    esi,eax
c001aef2:	66 90                	xchg   ax,ax
c001aef4:	8d 46 01             	lea    eax,[esi+0x1]
c001aef7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aefb:	75 d7                	jne    c001aed4 <SoundPort::buffer16(short*, int)+0x3c>
c001aefd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af01:	8d 76 00             	lea    esi,[esi+0x0]
c001af04:	5b                   	pop    ebx
c001af05:	5e                   	pop    esi
c001af06:	5f                   	pop    edi
c001af07:	5d                   	pop    ebp
c001af08:	c3                   	ret    
c001af09:	8d 76 00             	lea    esi,[esi+0x0]
c001af0c:	5b                   	pop    ebx
c001af0d:	8d 46 02             	lea    eax,[esi+0x2]
c001af10:	5e                   	pop    esi
c001af11:	5f                   	pop    edi
c001af12:	5d                   	pop    ebp
c001af13:	c3                   	ret    
c001af14:	5b                   	pop    ebx
c001af15:	31 c0                	xor    eax,eax
c001af17:	5e                   	pop    esi
c001af18:	5f                   	pop    edi
c001af19:	5d                   	pop    ebp
c001af1a:	c3                   	ret    
c001af1b:	90                   	nop
c001af1c:	b8 01 00 00 00       	mov    eax,0x1
c001af21:	eb e1                	jmp    c001af04 <SoundPort::buffer16(short*, int)+0x6c>
c001af23:	90                   	nop

c001af24 <SoundPort::buffer32(int*, int)>:
c001af24:	55                   	push   ebp
c001af25:	57                   	push   edi
c001af26:	56                   	push   esi
c001af27:	53                   	push   ebx
c001af28:	83 ec 04             	sub    esp,0x4
c001af2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001af40:	74 5a                	je     c001af9c <SoundPort::buffer32(int*, int)+0x78>
c001af42:	85 c0                	test   eax,eax
c001af44:	7e 56                	jle    c001af9c <SoundPort::buffer32(int*, int)+0x78>
c001af46:	8d 71 01             	lea    esi,[ecx+0x1]
c001af49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af4c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af4f:	8b 37                	mov    esi,DWORD PTR [edi]
c001af51:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af54:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af57:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af5a:	74 4c                	je     c001afa8 <SoundPort::buffer32(int*, int)+0x84>
c001af5c:	31 f6                	xor    esi,esi
c001af5e:	eb 1c                	jmp    c001af7c <SoundPort::buffer32(int*, int)+0x58>
c001af60:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af63:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af66:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af69:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af6c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af70:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af73:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af76:	74 18                	je     c001af90 <SoundPort::buffer32(int*, int)+0x6c>
c001af78:	89 de                	mov    esi,ebx
c001af7a:	66 90                	xchg   ax,ax
c001af7c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af7f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af82:	75 dc                	jne    c001af60 <SoundPort::buffer32(int*, int)+0x3c>
c001af84:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af87:	90                   	nop
c001af88:	83 c4 04             	add    esp,0x4
c001af8b:	5b                   	pop    ebx
c001af8c:	5e                   	pop    esi
c001af8d:	5f                   	pop    edi
c001af8e:	5d                   	pop    ebp
c001af8f:	c3                   	ret    
c001af90:	8d 46 02             	lea    eax,[esi+0x2]
c001af93:	83 c4 04             	add    esp,0x4
c001af96:	5b                   	pop    ebx
c001af97:	5e                   	pop    esi
c001af98:	5f                   	pop    edi
c001af99:	5d                   	pop    ebp
c001af9a:	c3                   	ret    
c001af9b:	90                   	nop
c001af9c:	83 c4 04             	add    esp,0x4
c001af9f:	31 c0                	xor    eax,eax
c001afa1:	5b                   	pop    ebx
c001afa2:	5e                   	pop    esi
c001afa3:	5f                   	pop    edi
c001afa4:	5d                   	pop    ebp
c001afa5:	c3                   	ret    
c001afa6:	66 90                	xchg   ax,ax
c001afa8:	b8 01 00 00 00       	mov    eax,0x1
c001afad:	eb d9                	jmp    c001af88 <SoundPort::buffer32(int*, int)+0x64>
c001afaf:	90                   	nop

c001afb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afb0:	55                   	push   ebp
c001afb1:	57                   	push   edi
c001afb2:	56                   	push   esi
c001afb3:	53                   	push   ebx
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001afbb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afbf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001afc3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001afc7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001afcd:	39 03                	cmp    DWORD PTR [ebx],eax
c001afcf:	74 13                	je     c001afe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001afd1:	83 ec 0c             	sub    esp,0xc
c001afd4:	68 88 30 02 c0       	push   0xc0023088
c001afd9:	e8 89 65 ff ff       	call   c0011567 <KePanic(char const*)>
c001afde:	83 c4 10             	add    esp,0x10
c001afe1:	8d 76 00             	lea    esi,[esi+0x0]
c001afe4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001afea:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001afed:	74 11                	je     c001b000 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001afef:	83 ec 0c             	sub    esp,0xc
c001aff2:	68 c7 30 02 c0       	push   0xc00230c7
c001aff7:	e8 6b 65 ff ff       	call   c0011567 <KePanic(char const*)>
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	90                   	nop
c001b000:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b006:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b009:	74 11                	je     c001b01c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b00b:	83 ec 0c             	sub    esp,0xc
c001b00e:	68 c7 30 02 c0       	push   0xc00230c7
c001b013:	e8 4f 65 ff ff       	call   c0011567 <KePanic(char const*)>
c001b018:	83 c4 10             	add    esp,0x10
c001b01b:	90                   	nop
c001b01c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b01f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b023:	85 f6                	test   esi,esi
c001b025:	7e 2d                	jle    c001b054 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b027:	31 c0                	xor    eax,eax
c001b029:	8d 76 00             	lea    esi,[esi+0x0]
c001b02c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b02f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b032:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b038:	85 c9                	test   ecx,ecx
c001b03a:	0f 49 d1             	cmovns edx,ecx
c001b03d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b041:	c1 fa 0f             	sar    edx,0xf
c001b044:	01 d1                	add    ecx,edx
c001b046:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b04a:	83 c0 01             	add    eax,0x1
c001b04d:	39 f0                	cmp    eax,esi
c001b04f:	75 db                	jne    c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b051:	8d 76 00             	lea    esi,[esi+0x0]
c001b054:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b057:	83 ec 04             	sub    esp,0x4
c001b05a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b05d:	29 f0                	sub    eax,esi
c001b05f:	c1 e0 02             	shl    eax,0x2
c001b062:	50                   	push   eax
c001b063:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b066:	50                   	push   eax
c001b067:	52                   	push   edx
c001b068:	e8 63 53 fe ff       	call   c00003d0 <memmove>
c001b06d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b070:	29 f0                	sub    eax,esi
c001b072:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b075:	83 c4 1c             	add    esp,0x1c
c001b078:	89 f0                	mov    eax,esi
c001b07a:	5b                   	pop    ebx
c001b07b:	5e                   	pop    esi
c001b07c:	5f                   	pop    edi
c001b07d:	5d                   	pop    ebp
c001b07e:	c3                   	ret    
c001b07f:	90                   	nop

c001b080 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b080:	55                   	push   ebp
c001b081:	57                   	push   edi
c001b082:	56                   	push   esi
c001b083:	53                   	push   ebx
c001b084:	83 ec 0c             	sub    esp,0xc
c001b087:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b08b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b08f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b093:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b097:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b09d:	39 03                	cmp    DWORD PTR [ebx],eax
c001b09f:	74 13                	je     c001b0b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b0a1:	83 ec 0c             	sub    esp,0xc
c001b0a4:	68 a8 30 02 c0       	push   0xc00230a8
c001b0a9:	e8 b9 64 ff ff       	call   c0011567 <KePanic(char const*)>
c001b0ae:	83 c4 10             	add    esp,0x10
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b0ba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0bd:	74 11                	je     c001b0d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	68 e3 30 02 c0       	push   0xc00230e3
c001b0c7:	e8 9b 64 ff ff       	call   c0011567 <KePanic(char const*)>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	90                   	nop
c001b0d0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b0d6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0d9:	74 11                	je     c001b0ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b0db:	83 ec 0c             	sub    esp,0xc
c001b0de:	68 e3 30 02 c0       	push   0xc00230e3
c001b0e3:	e8 7f 64 ff ff       	call   c0011567 <KePanic(char const*)>
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	90                   	nop
c001b0ec:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b0ef:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b0f3:	85 ff                	test   edi,edi
c001b0f5:	7e 21                	jle    c001b118 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b0f7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b0fe:	31 c0                	xor    eax,eax
c001b100:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b103:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b106:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b109:	01 d5                	add    ebp,edx
c001b10b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b10e:	83 c0 04             	add    eax,0x4
c001b111:	39 c1                	cmp    ecx,eax
c001b113:	75 eb                	jne    c001b100 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b115:	8d 76 00             	lea    esi,[esi+0x0]
c001b118:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b11b:	83 ec 04             	sub    esp,0x4
c001b11e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b121:	29 f8                	sub    eax,edi
c001b123:	c1 e0 02             	shl    eax,0x2
c001b126:	50                   	push   eax
c001b127:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b12a:	50                   	push   eax
c001b12b:	52                   	push   edx
c001b12c:	e8 9f 52 fe ff       	call   c00003d0 <memmove>
c001b131:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b134:	29 f8                	sub    eax,edi
c001b136:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b139:	83 c4 1c             	add    esp,0x1c
c001b13c:	89 f8                	mov    eax,edi
c001b13e:	5b                   	pop    ebx
c001b13f:	5e                   	pop    esi
c001b140:	5f                   	pop    edi
c001b141:	5d                   	pop    ebp
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <PCI::open(int, int, void*)>:
c001b144:	83 ec 18             	sub    esp,0x18
c001b147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b14b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b14f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b155:	8b 10                	mov    edx,DWORD PTR [eax]
c001b157:	50                   	push   eax
c001b158:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b15b:	31 c0                	xor    eax,eax
c001b15d:	83 c4 1c             	add    esp,0x1c
c001b160:	c3                   	ret    
c001b161:	90                   	nop

c001b162 <PCI::close(int, int, void*)>:
c001b162:	31 c0                	xor    eax,eax
c001b164:	c3                   	ret    
c001b165:	90                   	nop

c001b166 <PCI::PCI()>:
c001b166:	83 ec 0c             	sub    esp,0xc
c001b169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16d:	83 ec 08             	sub    esp,0x8
c001b170:	68 ff 30 02 c0       	push   0xc00230ff
c001b175:	50                   	push   eax
c001b176:	e8 81 11 ff ff       	call   c000c2fc <Bus::Bus(char const*)>
c001b17b:	83 c4 10             	add    esp,0x10
c001b17e:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c001b183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b187:	89 10                	mov    DWORD PTR [eax],edx
c001b189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b18d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b19b:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1aa:	0f b6 d0             	movzx  edx,al
c001b1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1c2:	0f b6 d0             	movzx  edx,al
c001b1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1d8:	8d 50 01             	lea    edx,[eax+0x1]
c001b1db:	88 d1                	mov    cl,dl
c001b1dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1e1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b1e7:	0f b6 d0             	movzx  edx,al
c001b1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1f2:	83 c9 c0             	or     ecx,0xffffffc0
c001b1f5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1f9:	90                   	nop
c001b1fa:	83 c4 0c             	add    esp,0xc
c001b1fd:	c3                   	ret    

c001b1fe <PCI::readBAR8(unsigned int, int)>:
c001b1fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b202:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b206:	f6 c2 01             	test   dl,0x1
c001b209:	74 07                	je     c001b212 <PCI::readBAR8(unsigned int, int)+0x14>
c001b20b:	83 e2 fc             	and    edx,0xfffffffc
c001b20e:	01 c2                	add    edx,eax
c001b210:	ec                   	in     al,dx
c001b211:	c3                   	ret    
c001b212:	83 e2 f0             	and    edx,0xfffffff0
c001b215:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b218:	c3                   	ret    
c001b219:	90                   	nop

c001b21a <PCI::readBAR16(unsigned int, int)>:
c001b21a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b222:	f6 c2 01             	test   dl,0x1
c001b225:	74 08                	je     c001b22f <PCI::readBAR16(unsigned int, int)+0x15>
c001b227:	83 e2 fc             	and    edx,0xfffffffc
c001b22a:	01 c2                	add    edx,eax
c001b22c:	66 ed                	in     ax,dx
c001b22e:	c3                   	ret    
c001b22f:	83 e2 f0             	and    edx,0xfffffff0
c001b232:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b236:	c3                   	ret    
c001b237:	90                   	nop

c001b238 <PCI::readBAR32(unsigned int, int)>:
c001b238:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b23c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b240:	f6 c2 01             	test   dl,0x1
c001b243:	74 07                	je     c001b24c <PCI::readBAR32(unsigned int, int)+0x14>
c001b245:	83 e2 fc             	and    edx,0xfffffffc
c001b248:	01 c2                	add    edx,eax
c001b24a:	ed                   	in     eax,dx
c001b24b:	c3                   	ret    
c001b24c:	83 e2 f0             	and    edx,0xfffffff0
c001b24f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b252:	c3                   	ret    
c001b253:	90                   	nop

c001b254 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b25c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b260:	f6 c2 01             	test   dl,0x1
c001b263:	74 07                	je     c001b26c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b265:	83 e2 fc             	and    edx,0xfffffffc
c001b268:	01 ca                	add    edx,ecx
c001b26a:	ee                   	out    dx,al
c001b26b:	c3                   	ret    
c001b26c:	83 e2 f0             	and    edx,0xfffffff0
c001b26f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b272:	c3                   	ret    
c001b273:	90                   	nop

c001b274 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b274:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b27c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b280:	f6 c2 01             	test   dl,0x1
c001b283:	74 08                	je     c001b28d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b285:	83 e2 fc             	and    edx,0xfffffffc
c001b288:	01 ca                	add    edx,ecx
c001b28a:	66 ef                	out    dx,ax
c001b28c:	c3                   	ret    
c001b28d:	83 e2 f0             	and    edx,0xfffffff0
c001b290:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b294:	c3                   	ret    
c001b295:	90                   	nop

c001b296 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b29a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b29e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2a2:	f6 c2 01             	test   dl,0x1
c001b2a5:	74 07                	je     c001b2ae <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b2a7:	83 e2 fc             	and    edx,0xfffffffc
c001b2aa:	01 ca                	add    edx,ecx
c001b2ac:	ef                   	out    dx,eax
c001b2ad:	c3                   	ret    
c001b2ae:	83 e2 f0             	and    edx,0xfffffff0
c001b2b1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2b4:	c3                   	ret    
c001b2b5:	90                   	nop

c001b2b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2b6:	55                   	push   ebp
c001b2b7:	57                   	push   edi
c001b2b8:	56                   	push   esi
c001b2b9:	53                   	push   ebx
c001b2ba:	83 ec 0c             	sub    esp,0xc
c001b2bd:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2c2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2c6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2ca:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2ce:	83 fe 07             	cmp    esi,0x7
c001b2d1:	76 10                	jbe    c001b2e3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	68 07 31 02 c0       	push   0xc0023107
c001b2db:	e8 87 62 ff ff       	call   c0011567 <KePanic(char const*)>
c001b2e0:	83 c4 10             	add    esp,0x10
c001b2e3:	0f b6 db             	movzx  ebx,bl
c001b2e6:	83 fb 0f             	cmp    ebx,0xf
c001b2e9:	76 10                	jbe    c001b2fb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b2eb:	83 ec 0c             	sub    esp,0xc
c001b2ee:	68 37 31 02 c0       	push   0xc0023137
c001b2f3:	e8 6f 62 ff ff       	call   c0011567 <KePanic(char const*)>
c001b2f8:	83 c4 10             	add    esp,0x10
c001b2fb:	8d 04 36             	lea    eax,[esi+esi*1]
c001b2fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b303:	83 c8 f0             	or     eax,0xfffffff0
c001b306:	ee                   	out    dx,al
c001b307:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b30c:	89 e8                	mov    eax,ebp
c001b30e:	ee                   	out    dx,al
c001b30f:	89 f9                	mov    ecx,edi
c001b311:	89 d8                	mov    eax,ebx
c001b313:	0f b6 d9             	movzx  ebx,cl
c001b316:	83 c4 0c             	add    esp,0xc
c001b319:	c1 e0 08             	shl    eax,0x8
c001b31c:	83 e3 fc             	and    ebx,0xfffffffc
c001b31f:	09 d8                	or     eax,ebx
c001b321:	5b                   	pop    ebx
c001b322:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b327:	5e                   	pop    esi
c001b328:	5f                   	pop    edi
c001b329:	5d                   	pop    ebp
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b32c:	57                   	push   edi
c001b32d:	56                   	push   esi
c001b32e:	53                   	push   ebx
c001b32f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b333:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b337:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b33b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b33f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b345:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b349:	83 ff 01             	cmp    edi,0x1
c001b34c:	75 3f                	jne    c001b38d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b34e:	89 de                	mov    esi,ebx
c001b350:	0f b6 c0             	movzx  eax,al
c001b353:	c1 e0 10             	shl    eax,0x10
c001b356:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b35c:	0f b6 c9             	movzx  ecx,cl
c001b35f:	09 f0                	or     eax,esi
c001b361:	c1 e1 08             	shl    ecx,0x8
c001b364:	0f b6 d2             	movzx  edx,dl
c001b367:	c1 e2 0b             	shl    edx,0xb
c001b36a:	09 c8                	or     eax,ecx
c001b36c:	09 d0                	or     eax,edx
c001b36e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b373:	0d 00 00 00 80       	or     eax,0x80000000
c001b378:	ef                   	out    dx,eax
c001b379:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b37e:	ed                   	in     eax,dx
c001b37f:	83 e3 02             	and    ebx,0x2
c001b382:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b389:	d3 e8                	shr    eax,cl
c001b38b:	eb 44                	jmp    c001b3d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b38d:	83 ff 02             	cmp    edi,0x2
c001b390:	75 2d                	jne    c001b3bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b392:	83 ec 0c             	sub    esp,0xc
c001b395:	0f b6 fb             	movzx  edi,bl
c001b398:	57                   	push   edi
c001b399:	0f b6 c9             	movzx  ecx,cl
c001b39c:	51                   	push   ecx
c001b39d:	0f b6 d2             	movzx  edx,dl
c001b3a0:	52                   	push   edx
c001b3a1:	0f b6 c0             	movzx  eax,al
c001b3a4:	50                   	push   eax
c001b3a5:	56                   	push   esi
c001b3a6:	e8 0b ff ff ff       	call   c001b2b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3ab:	89 c2                	mov    edx,eax
c001b3ad:	ed                   	in     eax,dx
c001b3ae:	83 e3 02             	and    ebx,0x2
c001b3b1:	83 c4 20             	add    esp,0x20
c001b3b4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3bb:	d3 e8                	shr    eax,cl
c001b3bd:	eb 12                	jmp    c001b3d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3bf:	83 ec 0c             	sub    esp,0xc
c001b3c2:	68 67 31 02 c0       	push   0xc0023167
c001b3c7:	e8 9b 61 ff ff       	call   c0011567 <KePanic(char const*)>
c001b3cc:	83 c4 10             	add    esp,0x10
c001b3cf:	31 c0                	xor    eax,eax
c001b3d1:	5b                   	pop    ebx
c001b3d2:	5e                   	pop    esi
c001b3d3:	5f                   	pop    edi
c001b3d4:	c3                   	ret    
c001b3d5:	90                   	nop

c001b3d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b3d6:	83 ec 18             	sub    esp,0x18
c001b3d9:	6a 00                	push   0x0
c001b3db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e0:	50                   	push   eax
c001b3e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e6:	50                   	push   eax
c001b3e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3ec:	50                   	push   eax
c001b3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3f1:	e8 36 ff ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3f6:	83 c4 2c             	add    esp,0x2c
c001b3f9:	c3                   	ret    

c001b3fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3fa:	83 ec 18             	sub    esp,0x18
c001b3fd:	6a 0e                	push   0xe
c001b3ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b404:	50                   	push   eax
c001b405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40a:	50                   	push   eax
c001b40b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b410:	50                   	push   eax
c001b411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b415:	e8 12 ff ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b41a:	83 c4 2c             	add    esp,0x2c
c001b41d:	0f b6 c0             	movzx  eax,al
c001b420:	c3                   	ret    
c001b421:	90                   	nop

c001b422 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b422:	55                   	push   ebp
c001b423:	57                   	push   edi
c001b424:	56                   	push   esi
c001b425:	53                   	push   ebx
c001b426:	83 ec 18             	sub    esp,0x18
c001b429:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b42e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b433:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b438:	6a 0a                	push   0xa
c001b43a:	56                   	push   esi
c001b43b:	55                   	push   ebp
c001b43c:	57                   	push   edi
c001b43d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b441:	e8 e6 fe ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b446:	83 c4 14             	add    esp,0x14
c001b449:	6a 0a                	push   0xa
c001b44b:	56                   	push   esi
c001b44c:	55                   	push   ebp
c001b44d:	57                   	push   edi
c001b44e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b452:	89 c3                	mov    ebx,eax
c001b454:	0f b6 db             	movzx  ebx,bl
c001b457:	e8 d0 fe ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b45c:	83 c4 2c             	add    esp,0x2c
c001b45f:	25 00 ff 00 00       	and    eax,0xff00
c001b464:	09 d8                	or     eax,ebx
c001b466:	5b                   	pop    ebx
c001b467:	5e                   	pop    esi
c001b468:	5f                   	pop    edi
c001b469:	5d                   	pop    ebp
c001b46a:	c3                   	ret    
c001b46b:	90                   	nop

c001b46c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b46c:	83 ec 18             	sub    esp,0x18
c001b46f:	6a 08                	push   0x8
c001b471:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b476:	50                   	push   eax
c001b477:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47c:	50                   	push   eax
c001b47d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b482:	50                   	push   eax
c001b483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b487:	e8 a0 fe ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b48c:	83 c4 2c             	add    esp,0x2c
c001b48f:	0f b6 c4             	movzx  eax,ah
c001b492:	c3                   	ret    
c001b493:	90                   	nop

c001b494 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b494:	83 ec 18             	sub    esp,0x18
c001b497:	6a 08                	push   0x8
c001b499:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49e:	50                   	push   eax
c001b49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a4:	50                   	push   eax
c001b4a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4aa:	50                   	push   eax
c001b4ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4af:	e8 78 fe ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b4:	83 c4 2c             	add    esp,0x2c
c001b4b7:	c3                   	ret    

c001b4b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4b8:	83 ec 18             	sub    esp,0x18
c001b4bb:	6a 3c                	push   0x3c
c001b4bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c2:	50                   	push   eax
c001b4c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c8:	50                   	push   eax
c001b4c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ce:	50                   	push   eax
c001b4cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d3:	e8 54 fe ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d8:	83 c4 2c             	add    esp,0x2c
c001b4db:	c3                   	ret    

c001b4dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b4dc:	83 ec 18             	sub    esp,0x18
c001b4df:	6a 18                	push   0x18
c001b4e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e6:	50                   	push   eax
c001b4e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ec:	50                   	push   eax
c001b4ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f2:	50                   	push   eax
c001b4f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4f7:	e8 30 fe ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4fc:	83 c4 2c             	add    esp,0x2c
c001b4ff:	0f b6 c4             	movzx  eax,ah
c001b502:	c3                   	ret    
c001b503:	90                   	nop

c001b504 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b504:	55                   	push   ebp
c001b505:	57                   	push   edi
c001b506:	56                   	push   esi
c001b507:	53                   	push   ebx
c001b508:	83 ec 28             	sub    esp,0x28
c001b50b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b50f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b514:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b519:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b51e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b525:	8d 43 12             	lea    eax,[ebx+0x12]
c001b528:	83 c3 10             	add    ebx,0x10
c001b52b:	0f b6 c0             	movzx  eax,al
c001b52e:	0f b6 db             	movzx  ebx,bl
c001b531:	50                   	push   eax
c001b532:	51                   	push   ecx
c001b533:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b537:	57                   	push   edi
c001b538:	55                   	push   ebp
c001b539:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b53d:	e8 ea fd ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b542:	83 c4 14             	add    esp,0x14
c001b545:	53                   	push   ebx
c001b546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b54a:	51                   	push   ecx
c001b54b:	89 c6                	mov    esi,eax
c001b54d:	57                   	push   edi
c001b54e:	55                   	push   ebp
c001b54f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b553:	c1 e6 10             	shl    esi,0x10
c001b556:	e8 d1 fd ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b55b:	83 c4 3c             	add    esp,0x3c
c001b55e:	5b                   	pop    ebx
c001b55f:	0f b7 c0             	movzx  eax,ax
c001b562:	09 f0                	or     eax,esi
c001b564:	5e                   	pop    esi
c001b565:	5f                   	pop    edi
c001b566:	5d                   	pop    ebp
c001b567:	c3                   	ret    

c001b568 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b568:	55                   	push   ebp
c001b569:	57                   	push   edi
c001b56a:	56                   	push   esi
c001b56b:	53                   	push   ebx
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b573:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b577:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b57b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b57f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b585:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b589:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b58d:	83 f9 01             	cmp    ecx,0x1
c001b590:	75 5d                	jne    c001b5ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b592:	0f b6 c8             	movzx  ecx,al
c001b595:	89 f0                	mov    eax,esi
c001b597:	25 fc 00 00 00       	and    eax,0xfc
c001b59c:	0f b6 d2             	movzx  edx,dl
c001b59f:	c1 e1 10             	shl    ecx,0x10
c001b5a2:	c1 e2 0b             	shl    edx,0xb
c001b5a5:	09 c1                	or     ecx,eax
c001b5a7:	89 f8                	mov    eax,edi
c001b5a9:	0f b6 f8             	movzx  edi,al
c001b5ac:	c1 e7 08             	shl    edi,0x8
c001b5af:	09 f9                	or     ecx,edi
c001b5b1:	09 d1                	or     ecx,edx
c001b5b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5b8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5be:	89 c8                	mov    eax,ecx
c001b5c0:	ef                   	out    dx,eax
c001b5c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5c6:	ed                   	in     eax,dx
c001b5c7:	83 e6 02             	and    esi,0x2
c001b5ca:	0f b7 db             	movzx  ebx,bx
c001b5cd:	74 0a                	je     c001b5d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b5cf:	c1 e3 10             	shl    ebx,0x10
c001b5d2:	0f b7 d0             	movzx  edx,ax
c001b5d5:	09 d3                	or     ebx,edx
c001b5d7:	eb 05                	jmp    c001b5de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b5d9:	66 31 c0             	xor    ax,ax
c001b5dc:	09 c3                	or     ebx,eax
c001b5de:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5e3:	89 c8                	mov    eax,ecx
c001b5e5:	ef                   	out    dx,eax
c001b5e6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5eb:	89 d8                	mov    eax,ebx
c001b5ed:	eb 41                	jmp    c001b630 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b5ef:	83 f9 02             	cmp    ecx,0x2
c001b5f2:	75 45                	jne    c001b639 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b5f4:	89 f1                	mov    ecx,esi
c001b5f6:	83 ec 0c             	sub    esp,0xc
c001b5f9:	0f b6 f1             	movzx  esi,cl
c001b5fc:	89 f9                	mov    ecx,edi
c001b5fe:	56                   	push   esi
c001b5ff:	0f b6 f9             	movzx  edi,cl
c001b602:	57                   	push   edi
c001b603:	0f b6 d2             	movzx  edx,dl
c001b606:	52                   	push   edx
c001b607:	0f b6 c0             	movzx  eax,al
c001b60a:	50                   	push   eax
c001b60b:	55                   	push   ebp
c001b60c:	e8 a5 fc ff ff       	call   c001b2b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b611:	89 c2                	mov    edx,eax
c001b613:	ed                   	in     eax,dx
c001b614:	83 c4 20             	add    esp,0x20
c001b617:	f6 c2 02             	test   dl,0x2
c001b61a:	0f b7 db             	movzx  ebx,bx
c001b61d:	74 0c                	je     c001b62b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b61f:	0f b7 c8             	movzx  ecx,ax
c001b622:	89 d8                	mov    eax,ebx
c001b624:	c1 e0 10             	shl    eax,0x10
c001b627:	09 c8                	or     eax,ecx
c001b629:	eb 05                	jmp    c001b630 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b62b:	66 31 c0             	xor    ax,ax
c001b62e:	09 d8                	or     eax,ebx
c001b630:	ef                   	out    dx,eax
c001b631:	83 c4 0c             	add    esp,0xc
c001b634:	5b                   	pop    ebx
c001b635:	5e                   	pop    esi
c001b636:	5f                   	pop    edi
c001b637:	5d                   	pop    ebp
c001b638:	c3                   	ret    
c001b639:	c7 44 24 20 67 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023167
c001b641:	83 c4 0c             	add    esp,0xc
c001b644:	5b                   	pop    ebx
c001b645:	5e                   	pop    esi
c001b646:	5f                   	pop    edi
c001b647:	5d                   	pop    ebp
c001b648:	e9 1a 5f ff ff       	jmp    c0011567 <KePanic(char const*)>
c001b64d:	90                   	nop

c001b64e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b64e:	55                   	push   ebp
c001b64f:	57                   	push   edi
c001b650:	56                   	push   esi
c001b651:	53                   	push   ebx
c001b652:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b658:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b65f:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b666:	0f 85 bd 00 00 00    	jne    c001b729 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	68 14 01 00 00       	push   0x114
c001b674:	e8 5a c4 fe ff       	call   c0007ad3 <malloc>
c001b679:	83 c4 0c             	add    esp,0xc
c001b67c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b682:	68 6d 31 02 c0       	push   0xc002316d
c001b687:	50                   	push   eax
c001b688:	89 c3                	mov    ebx,eax
c001b68a:	e8 93 04 ff ff       	call   c000bb22 <File::File(char const*, Process*)>
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	85 db                	test   ebx,ebx
c001b694:	0f 84 6b 02 00 00    	je     c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b69a:	57                   	push   edi
c001b69b:	57                   	push   edi
c001b69c:	6a 01                	push   0x1
c001b69e:	53                   	push   ebx
c001b69f:	e8 9c 04 ff ff       	call   c000bb40 <File::open(FileOpenMode)>
c001b6a4:	83 c4 10             	add    esp,0x10
c001b6a7:	85 c0                	test   eax,eax
c001b6a9:	0f 85 56 02 00 00    	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6af:	52                   	push   edx
c001b6b0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6b4:	50                   	push   eax
c001b6b5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6b9:	50                   	push   eax
c001b6ba:	53                   	push   ebx
c001b6bb:	e8 82 07 ff ff       	call   c000be42 <File::stat(unsigned long long*, bool*)>
c001b6c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6c4:	40                   	inc    eax
c001b6c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6c8:	e8 06 c4 fe ff       	call   c0007ad3 <malloc>
c001b6cd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6d1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b6d5:	59                   	pop    ecx
c001b6d6:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b6db:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6dd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b6e1:	51                   	push   ecx
c001b6e2:	50                   	push   eax
c001b6e3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6eb:	53                   	push   ebx
c001b6ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6ef:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b6f3:	83 c4 20             	add    esp,0x20
c001b6f6:	89 c8                	mov    eax,ecx
c001b6f8:	99                   	cdq    
c001b6f9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b6fd:	0f 85 02 02 00 00    	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b703:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b707:	0f 85 f8 01 00 00    	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b70d:	83 ec 0c             	sub    esp,0xc
c001b710:	53                   	push   ebx
c001b711:	e8 88 04 ff ff       	call   c000bb9e <File::close()>
c001b716:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b71a:	83 c4 10             	add    esp,0x10
c001b71d:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b724:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b729:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b731:	31 c9                	xor    ecx,ecx
c001b733:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b73a:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b740:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b747:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b74d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b752:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b75a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b75f:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b76b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b773:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b777:	39 cd                	cmp    ebp,ecx
c001b779:	0f 8e 86 01 00 00    	jle    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b77f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b782:	d4 40                	aam    0x40
c001b784:	d5 39                	aad    0x39
c001b786:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b78a:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b78e:	d4 40                	aam    0x40
c001b790:	d5 39                	aad    0x39
c001b792:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b796:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b79a:	d4 40                	aam    0x40
c001b79c:	d5 39                	aad    0x39
c001b79e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7a2:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b7a6:	d4 40                	aam    0x40
c001b7a8:	d5 39                	aad    0x39
c001b7aa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7ae:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b7b2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7b6:	3c 56                	cmp    al,0x56
c001b7b8:	74 47                	je     c001b801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b7ba:	d4 40                	aam    0x40
c001b7bc:	d5 39                	aad    0x39
c001b7be:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b7c1:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b7c5:	0f b6 db             	movzx  ebx,bl
c001b7c8:	c1 e3 04             	shl    ebx,0x4
c001b7cb:	d4 40                	aam    0x40
c001b7cd:	d5 39                	aad    0x39
c001b7cf:	83 e8 30             	sub    eax,0x30
c001b7d2:	0f b6 c0             	movzx  eax,al
c001b7d5:	09 c3                	or     ebx,eax
c001b7d7:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b7db:	c1 e3 04             	shl    ebx,0x4
c001b7de:	d4 40                	aam    0x40
c001b7e0:	d5 39                	aad    0x39
c001b7e2:	83 e8 30             	sub    eax,0x30
c001b7e5:	0f b6 c0             	movzx  eax,al
c001b7e8:	09 c3                	or     ebx,eax
c001b7ea:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b7ee:	c1 e3 04             	shl    ebx,0x4
c001b7f1:	d4 40                	aam    0x40
c001b7f3:	d5 39                	aad    0x39
c001b7f5:	83 e8 30             	sub    eax,0x30
c001b7f8:	0f b6 c0             	movzx  eax,al
c001b7fb:	09 c3                	or     ebx,eax
c001b7fd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b801:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b805:	80 fb 58             	cmp    bl,0x58
c001b808:	74 49                	je     c001b853 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b80a:	88 d8                	mov    al,bl
c001b80c:	d4 40                	aam    0x40
c001b80e:	d5 39                	aad    0x39
c001b810:	83 e8 30             	sub    eax,0x30
c001b813:	0f b6 f8             	movzx  edi,al
c001b816:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b81a:	c1 e7 04             	shl    edi,0x4
c001b81d:	d4 40                	aam    0x40
c001b81f:	d5 39                	aad    0x39
c001b821:	83 e8 30             	sub    eax,0x30
c001b824:	0f b6 c0             	movzx  eax,al
c001b827:	09 c7                	or     edi,eax
c001b829:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b82d:	c1 e7 04             	shl    edi,0x4
c001b830:	d4 40                	aam    0x40
c001b832:	d5 39                	aad    0x39
c001b834:	83 e8 30             	sub    eax,0x30
c001b837:	0f b6 c0             	movzx  eax,al
c001b83a:	09 c7                	or     edi,eax
c001b83c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b840:	c1 e7 04             	shl    edi,0x4
c001b843:	d4 40                	aam    0x40
c001b845:	d5 39                	aad    0x39
c001b847:	83 e8 30             	sub    eax,0x30
c001b84a:	0f b6 c0             	movzx  eax,al
c001b84d:	09 c7                	or     edi,eax
c001b84f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b853:	8d 41 10             	lea    eax,[ecx+0x10]
c001b856:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b85a:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b85e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b862:	83 f9 0a             	cmp    ecx,0xa
c001b865:	74 07                	je     c001b86e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b867:	47                   	inc    edi
c001b868:	39 c5                	cmp    ebp,eax
c001b86a:	75 16                	jne    c001b882 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b86c:	89 e8                	mov    eax,ebp
c001b86e:	83 f9 0a             	cmp    ecx,0xa
c001b871:	0f 94 c1             	sete   cl
c001b874:	0f b6 c9             	movzx  ecx,cl
c001b877:	01 c1                	add    ecx,eax
c001b879:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b87e:	75 0f                	jne    c001b88f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b880:	eb 1c                	jmp    c001b89e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b882:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b885:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b889:	40                   	inc    eax
c001b88a:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b88d:	eb cb                	jmp    c001b85a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b88f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b893:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b898:	0f 85 d9 fe ff ff    	jne    c001b777 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b89e:	80 fb 58             	cmp    bl,0x58
c001b8a1:	74 10                	je     c001b8b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b8a3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b8a8:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b8ad:	0f 85 c4 fe ff ff    	jne    c001b777 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b8bb:	83 e8 30             	sub    eax,0x30
c001b8be:	c1 e0 04             	shl    eax,0x4
c001b8c1:	83 eb 30             	sub    ebx,0x30
c001b8c4:	09 d8                	or     eax,ebx
c001b8c6:	0f b6 c0             	movzx  eax,al
c001b8c9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8cd:	0f 85 a4 fe ff ff    	jne    c001b777 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8d7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b8db:	83 e8 30             	sub    eax,0x30
c001b8de:	c1 e0 04             	shl    eax,0x4
c001b8e1:	83 eb 30             	sub    ebx,0x30
c001b8e4:	09 d8                	or     eax,ebx
c001b8e6:	0f b6 c0             	movzx  eax,al
c001b8e9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b8ed:	0f 85 84 fe ff ff    	jne    c001b777 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8f3:	50                   	push   eax
c001b8f4:	50                   	push   eax
c001b8f5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8f9:	50                   	push   eax
c001b8fa:	56                   	push   esi
c001b8fb:	e8 50 4d fe ff       	call   c0000650 <strcpy>
c001b900:	83 c4 10             	add    esp,0x10
c001b903:	eb 05                	jmp    c001b90a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b905:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b908:	31 f6                	xor    esi,esi
c001b90a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b910:	89 f0                	mov    eax,esi
c001b912:	5b                   	pop    ebx
c001b913:	5e                   	pop    esi
c001b914:	5f                   	pop    edi
c001b915:	5d                   	pop    ebp
c001b916:	c3                   	ret    
c001b917:	90                   	nop

c001b918 <PCI::checkBus(unsigned char)>:
c001b918:	56                   	push   esi
c001b919:	53                   	push   ebx
c001b91a:	31 db                	xor    ebx,ebx
c001b91c:	51                   	push   ecx
c001b91d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b922:	52                   	push   edx
c001b923:	53                   	push   ebx
c001b924:	43                   	inc    ebx
c001b925:	56                   	push   esi
c001b926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b92a:	e8 0f 03 00 00       	call   c001bc3e <PCI::checkDevice(unsigned char, unsigned char)>
c001b92f:	83 c4 10             	add    esp,0x10
c001b932:	83 fb 20             	cmp    ebx,0x20
c001b935:	75 eb                	jne    c001b922 <PCI::checkBus(unsigned char)+0xa>
c001b937:	58                   	pop    eax
c001b938:	5b                   	pop    ebx
c001b939:	5e                   	pop    esi
c001b93a:	c3                   	ret    
c001b93b:	90                   	nop

c001b93c <PCI::foundDevice(PCIDeviceInfo)>:
c001b93c:	55                   	push   ebp
c001b93d:	57                   	push   edi
c001b93e:	56                   	push   esi
c001b93f:	53                   	push   ebx
c001b940:	83 ec 1c             	sub    esp,0x1c
c001b943:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b948:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b94c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b951:	0f 84 63 01 00 00    	je     c001baba <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b957:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b95c:	66 3d 06 04          	cmp    ax,0x406
c001b960:	75 2c                	jne    c001b98e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b962:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b967:	50                   	push   eax
c001b968:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b96d:	50                   	push   eax
c001b96e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b973:	50                   	push   eax
c001b974:	53                   	push   ebx
c001b975:	e8 62 fb ff ff       	call   c001b4dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b97a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b97e:	0f b6 c0             	movzx  eax,al
c001b981:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b985:	83 c4 2c             	add    esp,0x2c
c001b988:	5b                   	pop    ebx
c001b989:	5e                   	pop    esi
c001b98a:	5f                   	pop    edi
c001b98b:	5d                   	pop    ebp
c001b98c:	eb 8a                	jmp    c001b918 <PCI::checkBus(unsigned char)>
c001b98e:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b993:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b999:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b99d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b9a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b9a5:	85 d2                	test   edx,edx
c001b9a7:	74 34                	je     c001b9dd <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b9a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b9ac:	85 c9                	test   ecx,ecx
c001b9ae:	74 29                	je     c001b9d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b9b0:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b9b6:	31 f5                	xor    ebp,esi
c001b9b8:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b9be:	75 19                	jne    c001b9d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b9c0:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b9c6:	75 11                	jne    c001b9d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b9c8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b9d3:	0f 84 e1 00 00 00    	je     c001baba <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b9d9:	8b 12                	mov    edx,DWORD PTR [edx]
c001b9db:	eb c8                	jmp    c001b9a5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b9dd:	3d 01 06 00 00       	cmp    eax,0x601
c001b9e2:	75 19                	jne    c001b9fd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b9e4:	83 ec 0c             	sub    esp,0xc
c001b9e7:	68 64 01 00 00       	push   0x164
c001b9ec:	e8 e2 c0 fe ff       	call   c0007ad3 <malloc>
c001b9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9f4:	89 c5                	mov    ebp,eax
c001b9f6:	e8 ab 0e 00 00       	call   c001c8a6 <SATABus::SATABus()>
c001b9fb:	eb 1e                	jmp    c001ba1b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b9fd:	3d 01 01 00 00       	cmp    eax,0x101
c001ba02:	75 62                	jne    c001ba66 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001ba04:	83 ec 0c             	sub    esp,0xc
c001ba07:	68 70 02 00 00       	push   0x270
c001ba0c:	e8 c2 c0 fe ff       	call   c0007ad3 <malloc>
c001ba11:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba14:	89 c5                	mov    ebp,eax
c001ba16:	e8 f3 02 00 00       	call   c001bd0e <IDE::IDE()>
c001ba1b:	58                   	pop    eax
c001ba1c:	5a                   	pop    edx
c001ba1d:	55                   	push   ebp
c001ba1e:	53                   	push   ebx
c001ba1f:	e8 7c 0f ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c001ba24:	83 ec 1c             	sub    esp,0x1c
c001ba27:	b9 09 00 00 00       	mov    ecx,0x9
c001ba2c:	fc                   	cld    
c001ba2d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba31:	89 e7                	mov    edi,esp
c001ba33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba35:	55                   	push   ebp
c001ba36:	e8 ab 0e ff ff       	call   c000c8e6 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba3b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba3e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba42:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba4a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba52:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba5a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba5d:	83 c4 4c             	add    esp,0x4c
c001ba60:	5b                   	pop    ebx
c001ba61:	5e                   	pop    esi
c001ba62:	5f                   	pop    edi
c001ba63:	5d                   	pop    ebp
c001ba64:	ff e0                	jmp    eax
c001ba66:	83 ec 0c             	sub    esp,0xc
c001ba69:	68 58 01 00 00       	push   0x158
c001ba6e:	e8 60 c0 fe ff       	call   c0007ad3 <malloc>
c001ba73:	5a                   	pop    edx
c001ba74:	59                   	pop    ecx
c001ba75:	68 86 31 02 c0       	push   0xc0023186
c001ba7a:	50                   	push   eax
c001ba7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba7f:	e8 ba 11 ff ff       	call   c000cc3e <DriverlessDevice::DriverlessDevice(char const*)>
c001ba84:	5e                   	pop    esi
c001ba85:	5f                   	pop    edi
c001ba86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba8a:	50                   	push   eax
c001ba8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba8f:	53                   	push   ebx
c001ba90:	e8 0b 0f ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c001ba95:	83 c4 10             	add    esp,0x10
c001ba98:	b9 09 00 00 00       	mov    ecx,0x9
c001ba9d:	fc                   	cld    
c001ba9e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001baa2:	89 fe                	mov    esi,edi
c001baa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001baae:	83 c4 1c             	add    esp,0x1c
c001bab1:	5b                   	pop    ebx
c001bab2:	5e                   	pop    esi
c001bab3:	5f                   	pop    edi
c001bab4:	5d                   	pop    ebp
c001bab5:	e9 2c 0e ff ff       	jmp    c000c8e6 <Device::preOpenPCI(PCIDeviceInfo)>
c001baba:	83 c4 1c             	add    esp,0x1c
c001babd:	5b                   	pop    ebx
c001babe:	5e                   	pop    esi
c001babf:	5f                   	pop    edi
c001bac0:	5d                   	pop    ebp
c001bac1:	c3                   	ret    

c001bac2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bac2:	55                   	push   ebp
c001bac3:	57                   	push   edi
c001bac4:	56                   	push   esi
c001bac5:	53                   	push   ebx
c001bac6:	83 ec 68             	sub    esp,0x68
c001bac9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bad0:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bad4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bad8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001badf:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bae4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bae8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001baef:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001baf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001baf8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bafd:	6a 0c                	push   0xc
c001baff:	57                   	push   edi
c001bb00:	53                   	push   ebx
c001bb01:	56                   	push   esi
c001bb02:	55                   	push   ebp
c001bb03:	e8 24 f8 ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb08:	83 c4 20             	add    esp,0x20
c001bb0b:	57                   	push   edi
c001bb0c:	53                   	push   ebx
c001bb0d:	56                   	push   esi
c001bb0e:	55                   	push   ebp
c001bb0f:	e8 0e f9 ff ff       	call   c001b422 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb14:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb19:	57                   	push   edi
c001bb1a:	53                   	push   ebx
c001bb1b:	56                   	push   esi
c001bb1c:	55                   	push   ebp
c001bb1d:	e8 96 f9 ff ff       	call   c001b4b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb22:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb26:	83 c4 14             	add    esp,0x14
c001bb29:	6a 3c                	push   0x3c
c001bb2b:	57                   	push   edi
c001bb2c:	53                   	push   ebx
c001bb2d:	56                   	push   esi
c001bb2e:	55                   	push   ebp
c001bb2f:	e8 f8 f7 ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb34:	0f b6 c4             	movzx  eax,ah
c001bb37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb3b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb3f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb43:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb48:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb4e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb58:	83 c4 20             	add    esp,0x20
c001bb5b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb60:	74 30                	je     c001bb92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb62:	31 c0                	xor    eax,eax
c001bb64:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb68:	7e 28                	jle    c001bb92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb6a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb72:	39 cb                	cmp    ebx,ecx
c001bb74:	75 19                	jne    c001bb8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb76:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb7e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb82:	75 0b                	jne    c001bb8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb84:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb8b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb8f:	40                   	inc    eax
c001bb90:	eb d2                	jmp    c001bb64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb92:	31 d2                	xor    edx,edx
c001bb94:	83 ec 0c             	sub    esp,0xc
c001bb97:	57                   	push   edi
c001bb98:	53                   	push   ebx
c001bb99:	56                   	push   esi
c001bb9a:	52                   	push   edx
c001bb9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb9f:	55                   	push   ebp
c001bba0:	e8 5f f9 ff ff       	call   c001b504 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bba5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bba9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bbad:	42                   	inc    edx
c001bbae:	83 c4 20             	add    esp,0x20
c001bbb1:	83 fa 06             	cmp    edx,0x6
c001bbb4:	75 de                	jne    c001bb94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bbb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbba:	83 ec 0c             	sub    esp,0xc
c001bbbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbc1:	c1 e2 08             	shl    edx,0x8
c001bbc4:	0f b6 c4             	movzx  eax,ah
c001bbc7:	09 d0                	or     eax,edx
c001bbc9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbce:	6a 02                	push   0x2
c001bbd0:	57                   	push   edi
c001bbd1:	53                   	push   ebx
c001bbd2:	56                   	push   esi
c001bbd3:	55                   	push   ebp
c001bbd4:	e8 53 f7 ff ff       	call   c001b32c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbd9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbde:	83 c4 20             	add    esp,0x20
c001bbe1:	57                   	push   edi
c001bbe2:	53                   	push   ebx
c001bbe3:	56                   	push   esi
c001bbe4:	55                   	push   ebp
c001bbe5:	e8 82 f8 ff ff       	call   c001b46c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bbea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bbee:	57                   	push   edi
c001bbef:	53                   	push   ebx
c001bbf0:	56                   	push   esi
c001bbf1:	55                   	push   ebp
c001bbf2:	e8 df f7 ff ff       	call   c001b3d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbf7:	b9 09 00 00 00       	mov    ecx,0x9
c001bbfc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc01:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc05:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc09:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc0d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc11:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc15:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc19:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc1d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc21:	83 ec 0c             	sub    esp,0xc
c001bc24:	fc                   	cld    
c001bc25:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc29:	89 e7                	mov    edi,esp
c001bc2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc2d:	55                   	push   ebp
c001bc2e:	e8 09 fd ff ff       	call   c001b93c <PCI::foundDevice(PCIDeviceInfo)>
c001bc33:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc39:	5b                   	pop    ebx
c001bc3a:	5e                   	pop    esi
c001bc3b:	5f                   	pop    edi
c001bc3c:	5d                   	pop    ebp
c001bc3d:	c3                   	ret    

c001bc3e <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc3e:	55                   	push   ebp
c001bc3f:	57                   	push   edi
c001bc40:	56                   	push   esi
c001bc41:	53                   	push   ebx
c001bc42:	83 ec 0c             	sub    esp,0xc
c001bc45:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc4a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc4f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc53:	6a 00                	push   0x0
c001bc55:	56                   	push   esi
c001bc56:	57                   	push   edi
c001bc57:	55                   	push   ebp
c001bc58:	e8 79 f7 ff ff       	call   c001b3d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc5d:	6a 00                	push   0x0
c001bc5f:	56                   	push   esi
c001bc60:	57                   	push   edi
c001bc61:	55                   	push   ebp
c001bc62:	e8 5b fe ff ff       	call   c001bac2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc67:	83 c4 20             	add    esp,0x20
c001bc6a:	6a 00                	push   0x0
c001bc6c:	56                   	push   esi
c001bc6d:	57                   	push   edi
c001bc6e:	55                   	push   ebp
c001bc6f:	e8 86 f7 ff ff       	call   c001b3fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	a8 80                	test   al,0x80
c001bc79:	74 2d                	je     c001bca8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc7b:	bb 01 00 00 00       	mov    ebx,0x1
c001bc80:	53                   	push   ebx
c001bc81:	56                   	push   esi
c001bc82:	57                   	push   edi
c001bc83:	55                   	push   ebp
c001bc84:	e8 4d f7 ff ff       	call   c001b3d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	0f b7 c0             	movzx  eax,ax
c001bc8f:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc94:	74 0c                	je     c001bca2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc96:	53                   	push   ebx
c001bc97:	56                   	push   esi
c001bc98:	57                   	push   edi
c001bc99:	55                   	push   ebp
c001bc9a:	e8 23 fe ff ff       	call   c001bac2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc9f:	83 c4 10             	add    esp,0x10
c001bca2:	43                   	inc    ebx
c001bca3:	83 fb 08             	cmp    ebx,0x8
c001bca6:	75 d8                	jne    c001bc80 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bca8:	83 c4 0c             	add    esp,0xc
c001bcab:	5b                   	pop    ebx
c001bcac:	5e                   	pop    esi
c001bcad:	5f                   	pop    edi
c001bcae:	5d                   	pop    ebp
c001bcaf:	c3                   	ret    

c001bcb0 <PCI::detect()>:
c001bcb0:	56                   	push   esi
c001bcb1:	53                   	push   ebx
c001bcb2:	53                   	push   ebx
c001bcb3:	31 db                	xor    ebx,ebx
c001bcb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcb9:	6a 00                	push   0x0
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 00                	push   0x0
c001bcbf:	56                   	push   esi
c001bcc0:	e8 35 f7 ff ff       	call   c001b3fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcc5:	83 c4 10             	add    esp,0x10
c001bcc8:	a8 80                	test   al,0x80
c001bcca:	75 21                	jne    c001bced <PCI::detect()+0x3d>
c001bccc:	51                   	push   ecx
c001bccd:	51                   	push   ecx
c001bcce:	6a 00                	push   0x0
c001bcd0:	56                   	push   esi
c001bcd1:	e8 42 fc ff ff       	call   c001b918 <PCI::checkBus(unsigned char)>
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	eb 2a                	jmp    c001bd05 <PCI::detect()+0x55>
c001bcdb:	52                   	push   edx
c001bcdc:	52                   	push   edx
c001bcdd:	53                   	push   ebx
c001bcde:	43                   	inc    ebx
c001bcdf:	56                   	push   esi
c001bce0:	e8 33 fc ff ff       	call   c001b918 <PCI::checkBus(unsigned char)>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	83 fb 08             	cmp    ebx,0x8
c001bceb:	74 18                	je     c001bd05 <PCI::detect()+0x55>
c001bced:	53                   	push   ebx
c001bcee:	6a 00                	push   0x0
c001bcf0:	6a 00                	push   0x0
c001bcf2:	56                   	push   esi
c001bcf3:	e8 de f6 ff ff       	call   c001b3d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcf8:	83 c4 10             	add    esp,0x10
c001bcfb:	0f b7 c0             	movzx  eax,ax
c001bcfe:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd03:	74 d6                	je     c001bcdb <PCI::detect()+0x2b>
c001bd05:	58                   	pop    eax
c001bd06:	5b                   	pop    ebx
c001bd07:	5e                   	pop    esi
c001bd08:	c3                   	ret    
c001bd09:	90                   	nop

c001bd0a <IDE::close(int, int, void*)>:
c001bd0a:	83 c8 ff             	or     eax,0xffffffff
c001bd0d:	c3                   	ret    

c001bd0e <IDE::IDE()>:
c001bd0e:	83 ec 0c             	sub    esp,0xc
c001bd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd15:	83 ec 08             	sub    esp,0x8
c001bd18:	68 cc 31 02 c0       	push   0xc00231cc
c001bd1d:	50                   	push   eax
c001bd1e:	e8 c1 0f ff ff       	call   c000cce4 <HardDiskController::HardDiskController(char const*)>
c001bd23:	83 c4 10             	add    esp,0x10
c001bd26:	ba 5c 32 02 c0       	mov    edx,0xc002325c
c001bd2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2f:	89 10                	mov    DWORD PTR [eax],edx
c001bd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd35:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd3c:	90                   	nop
c001bd3d:	83 c4 0c             	add    esp,0xc
c001bd40:	c3                   	ret    
c001bd41:	90                   	nop

c001bd42 <IDE::prepareInterrupt(unsigned char)>:
c001bd42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd4b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd53:	c3                   	ret    

c001bd54 <selectDrive(unsigned char, unsigned char)>:
c001bd54:	c3                   	ret    
c001bd55:	90                   	nop

c001bd56 <IDE::getBase(unsigned char)>:
c001bd56:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd5f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd67:	c3                   	ret    

c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd68:	55                   	push   ebp
c001bd69:	57                   	push   edi
c001bd6a:	56                   	push   esi
c001bd6b:	53                   	push   ebx
c001bd6c:	83 ec 1c             	sub    esp,0x1c
c001bd6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bd77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd7f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd82:	80 f9 03             	cmp    cl,0x3
c001bd85:	77 4f                	ja     c001bdd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd8b:	0f b6 f2             	movzx  esi,dl
c001bd8e:	0f b6 db             	movzx  ebx,bl
c001bd91:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bd94:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd99:	80 ca 80             	or     dl,0x80
c001bd9c:	52                   	push   edx
c001bd9d:	6a 0c                	push   0xc
c001bd9f:	56                   	push   esi
c001bda0:	57                   	push   edi
c001bda1:	e8 c2 ff ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bdab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdaf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bdb3:	ee                   	out    dx,al
c001bdb4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bdb9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bdbd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bdc1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bdc9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bdcd:	83 c4 2c             	add    esp,0x2c
c001bdd0:	5b                   	pop    ebx
c001bdd1:	5e                   	pop    esi
c001bdd2:	5f                   	pop    edi
c001bdd3:	5d                   	pop    ebp
c001bdd4:	eb 92                	jmp    c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdd6:	0f b6 cb             	movzx  ecx,bl
c001bdd9:	83 f9 07             	cmp    ecx,0x7
c001bddc:	77 12                	ja     c001bdf0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdde:	0f b6 d2             	movzx  edx,dl
c001bde1:	0f b6 db             	movzx  ebx,bl
c001bde4:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bdec:	01 da                	add    edx,ebx
c001bdee:	eb 2f                	jmp    c001be1f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdf0:	83 f9 0d             	cmp    ecx,0xd
c001bdf3:	77 13                	ja     c001be08 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bdf5:	0f b6 d2             	movzx  edx,dl
c001bdf8:	0f b6 db             	movzx  ebx,bl
c001bdfb:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001be02:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be06:	eb 17                	jmp    c001be1f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be08:	83 f9 15             	cmp    ecx,0x15
c001be0b:	77 13                	ja     c001be20 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be0d:	0f b6 d2             	movzx  edx,dl
c001be10:	0f b6 db             	movzx  ebx,bl
c001be13:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001be1b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be1f:	ee                   	out    dx,al
c001be20:	83 c4 1c             	add    esp,0x1c
c001be23:	5b                   	pop    ebx
c001be24:	5e                   	pop    esi
c001be25:	5f                   	pop    edi
c001be26:	5d                   	pop    ebp
c001be27:	c3                   	ret    

c001be28 <IDE::read(unsigned char, unsigned char)>:
c001be28:	57                   	push   edi
c001be29:	56                   	push   esi
c001be2a:	53                   	push   ebx
c001be2b:	83 ec 10             	sub    esp,0x10
c001be2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001be3a:	8d 42 f8             	lea    eax,[edx-0x8]
c001be3d:	3c 03                	cmp    al,0x3
c001be3f:	77 48                	ja     c001be89 <IDE::read(unsigned char, unsigned char)+0x61>
c001be41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be45:	0f b6 f1             	movzx  esi,cl
c001be48:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001be4b:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001be50:	0c 80                	or     al,0x80
c001be52:	50                   	push   eax
c001be53:	6a 0c                	push   0xc
c001be55:	56                   	push   esi
c001be56:	53                   	push   ebx
c001be57:	e8 0c ff ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be60:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001be65:	0f b6 d2             	movzx  edx,dl
c001be68:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be6c:	ec                   	in     al,dx
c001be6d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001be71:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001be76:	52                   	push   edx
c001be77:	6a 0c                	push   0xc
c001be79:	56                   	push   esi
c001be7a:	53                   	push   ebx
c001be7b:	e8 e8 fe ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be80:	83 c4 20             	add    esp,0x20
c001be83:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be87:	eb 4c                	jmp    c001bed5 <IDE::read(unsigned char, unsigned char)+0xad>
c001be89:	0f b6 f2             	movzx  esi,dl
c001be8c:	83 fe 07             	cmp    esi,0x7
c001be8f:	77 12                	ja     c001bea3 <IDE::read(unsigned char, unsigned char)+0x7b>
c001be91:	0f b6 c9             	movzx  ecx,cl
c001be94:	0f b6 d2             	movzx  edx,dl
c001be97:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001be9f:	01 c2                	add    edx,eax
c001bea1:	eb 31                	jmp    c001bed4 <IDE::read(unsigned char, unsigned char)+0xac>
c001bea3:	83 fe 0d             	cmp    esi,0xd
c001bea6:	77 13                	ja     c001bebb <IDE::read(unsigned char, unsigned char)+0x93>
c001bea8:	0f b6 c9             	movzx  ecx,cl
c001beab:	0f b6 d2             	movzx  edx,dl
c001beae:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001beb5:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001beb9:	eb 19                	jmp    c001bed4 <IDE::read(unsigned char, unsigned char)+0xac>
c001bebb:	31 c0                	xor    eax,eax
c001bebd:	83 fe 15             	cmp    esi,0x15
c001bec0:	77 13                	ja     c001bed5 <IDE::read(unsigned char, unsigned char)+0xad>
c001bec2:	0f b6 c9             	movzx  ecx,cl
c001bec5:	0f b6 d2             	movzx  edx,dl
c001bec8:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bed0:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bed4:	ec                   	in     al,dx
c001bed5:	83 c4 10             	add    esp,0x10
c001bed8:	5b                   	pop    ebx
c001bed9:	5e                   	pop    esi
c001beda:	5f                   	pop    edi
c001bedb:	c3                   	ret    

c001bedc <IDE::waitInterrupt(unsigned char)>:
c001bedc:	55                   	push   ebp
c001bedd:	57                   	push   edi
c001bede:	56                   	push   esi
c001bedf:	53                   	push   ebx
c001bee0:	31 db                	xor    ebx,ebx
c001bee2:	83 ec 0c             	sub    esp,0xc
c001bee5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bee9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001beee:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bef6:	89 e8                	mov    eax,ebp
c001bef8:	84 c0                	test   al,al
c001befa:	75 30                	jne    c001bf2c <IDE::waitInterrupt(unsigned char)+0x50>
c001befc:	50                   	push   eax
c001befd:	6a 0c                	push   0xc
c001beff:	56                   	push   esi
c001bf00:	57                   	push   edi
c001bf01:	e8 22 ff ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001bf06:	83 c4 10             	add    esp,0x10
c001bf09:	a8 01                	test   al,0x1
c001bf0b:	75 27                	jne    c001bf34 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf0d:	f6 c3 04             	test   bl,0x4
c001bf10:	75 12                	jne    c001bf24 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf12:	83 fb 32             	cmp    ebx,0x32
c001bf15:	7e 0d                	jle    c001bf24 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf17:	83 ec 0c             	sub    esp,0xc
c001bf1a:	6a 64                	push   0x64
c001bf1c:	e8 73 a4 ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	83 fb 3c             	cmp    ebx,0x3c
c001bf27:	74 0b                	je     c001bf34 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf29:	43                   	inc    ebx
c001bf2a:	eb c2                	jmp    c001beee <IDE::waitInterrupt(unsigned char)+0x12>
c001bf2c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf34:	83 c4 0c             	add    esp,0xc
c001bf37:	89 e8                	mov    eax,ebp
c001bf39:	5b                   	pop    ebx
c001bf3a:	5e                   	pop    esi
c001bf3b:	5f                   	pop    edi
c001bf3c:	5d                   	pop    ebp
c001bf3d:	c3                   	ret    

c001bf3e <ideChannel0IRQHandler(regs*, void*)>:
c001bf3e:	83 ec 10             	sub    esp,0x10
c001bf41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf45:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf4c:	6a 07                	push   0x7
c001bf4e:	6a 00                	push   0x0
c001bf50:	50                   	push   eax
c001bf51:	e8 d2 fe ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001bf56:	83 c4 1c             	add    esp,0x1c
c001bf59:	c3                   	ret    

c001bf5a <ideChannel1IRQHandler(regs*, void*)>:
c001bf5a:	83 ec 10             	sub    esp,0x10
c001bf5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf61:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf68:	6a 07                	push   0x7
c001bf6a:	6a 01                	push   0x1
c001bf6c:	50                   	push   eax
c001bf6d:	e8 b6 fe ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001bf72:	83 c4 1c             	add    esp,0x1c
c001bf75:	c3                   	ret    

c001bf76 <IDE::enableIRQs(unsigned char, bool)>:
c001bf76:	57                   	push   edi
c001bf77:	b8 02 00 00 00       	mov    eax,0x2
c001bf7c:	56                   	push   esi
c001bf7d:	53                   	push   ebx
c001bf7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf87:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf8b:	74 02                	je     c001bf8f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf8d:	31 c0                	xor    eax,eax
c001bf8f:	0f b6 db             	movzx  ebx,bl
c001bf92:	bf 04 00 00 00       	mov    edi,0x4
c001bf97:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf9e:	50                   	push   eax
c001bf9f:	6a 0c                	push   0xc
c001bfa1:	53                   	push   ebx
c001bfa2:	56                   	push   esi
c001bfa3:	e8 c0 fd ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfa8:	83 c4 10             	add    esp,0x10
c001bfab:	50                   	push   eax
c001bfac:	6a 0c                	push   0xc
c001bfae:	53                   	push   ebx
c001bfaf:	56                   	push   esi
c001bfb0:	e8 73 fe ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001bfb5:	83 c4 10             	add    esp,0x10
c001bfb8:	4f                   	dec    edi
c001bfb9:	75 f0                	jne    c001bfab <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bfbb:	5b                   	pop    ebx
c001bfbc:	5e                   	pop    esi
c001bfbd:	5f                   	pop    edi
c001bfbe:	c3                   	ret    
c001bfbf:	90                   	nop

c001bfc0 <IDE::open(int, int, void*)>:
c001bfc0:	55                   	push   ebp
c001bfc1:	57                   	push   edi
c001bfc2:	56                   	push   esi
c001bfc3:	53                   	push   ebx
c001bfc4:	83 ec 1c             	sub    esp,0x1c
c001bfc7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfcb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bfd2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfdb:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bfe4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bfeb:	0f 85 da 02 00 00    	jne    c001c2cb <IDE::open(int, int, void*)+0x30b>
c001bff1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bff7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfff:	83 e0 7f             	and    eax,0x7f
c001c002:	83 f8 05             	cmp    eax,0x5
c001c005:	74 05                	je     c001c00c <IDE::open(int, int, void*)+0x4c>
c001c007:	83 f8 0f             	cmp    eax,0xf
c001c00a:	75 32                	jne    c001c03e <IDE::open(int, int, void*)+0x7e>
c001c00c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c012:	83 e0 fc             	and    eax,0xfffffffc
c001c015:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c01c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c022:	83 e0 fc             	and    eax,0xfffffffc
c001c025:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c02c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c032:	83 e0 fc             	and    eax,0xfffffffc
c001c035:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c03c:	eb 14                	jmp    c001c052 <IDE::open(int, int, void*)+0x92>
c001c03e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c048:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c052:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c059:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c05e:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c065:	89 fa                	mov    edx,edi
c001c067:	89 f1                	mov    ecx,esi
c001c069:	c1 e1 10             	shl    ecx,0x10
c001c06c:	89 e8                	mov    eax,ebp
c001c06e:	c1 e0 0b             	shl    eax,0xb
c001c071:	09 c1                	or     ecx,eax
c001c073:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c07a:	c1 e0 08             	shl    eax,0x8
c001c07d:	09 c1                	or     ecx,eax
c001c07f:	89 c8                	mov    eax,ecx
c001c081:	0d 08 00 00 80       	or     eax,0x80000008
c001c086:	ef                   	out    dx,eax
c001c087:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c08c:	ed                   	in     eax,dx
c001c08d:	c1 e8 10             	shr    eax,0x10
c001c090:	3d ff ff 00 00       	cmp    eax,0xffff
c001c095:	0f 84 f9 00 00 00    	je     c001c194 <IDE::open(int, int, void*)+0x1d4>
c001c09b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c0a1:	89 fa                	mov    edx,edi
c001c0a3:	89 c8                	mov    eax,ecx
c001c0a5:	ef                   	out    dx,eax
c001c0a6:	b0 fe                	mov    al,0xfe
c001c0a8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0ad:	ee                   	out    dx,al
c001c0ae:	89 c8                	mov    eax,ecx
c001c0b0:	89 fa                	mov    edx,edi
c001c0b2:	ef                   	out    dx,eax
c001c0b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c0b8:	ed                   	in     eax,dx
c001c0b9:	3c fe                	cmp    al,0xfe
c001c0bb:	0f 85 a4 00 00 00    	jne    c001c165 <IDE::open(int, int, void*)+0x1a5>
c001c0c1:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0c7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0ce:	74 30                	je     c001c100 <IDE::open(int, int, void*)+0x140>
c001c0d0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0d6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0da:	83 ec 0c             	sub    esp,0xc
c001c0dd:	40                   	inc    eax
c001c0de:	0f b6 c0             	movzx  eax,al
c001c0e1:	50                   	push   eax
c001c0e2:	55                   	push   ebp
c001c0e3:	56                   	push   esi
c001c0e4:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c0ea:	51                   	push   ecx
c001c0eb:	e8 4c 38 ff ff       	call   c000f93c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c0f0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c0f5:	83 c4 1c             	add    esp,0x1c
c001c0f8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0fe:	eb 0a                	jmp    c001c10a <IDE::open(int, int, void*)+0x14a>
c001c100:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c10a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c111:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c116:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c11d:	89 ea                	mov    edx,ebp
c001c11f:	c1 e1 10             	shl    ecx,0x10
c001c122:	c1 e0 08             	shl    eax,0x8
c001c125:	09 c1                	or     ecx,eax
c001c127:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c12e:	c1 e0 0b             	shl    eax,0xb
c001c131:	09 c1                	or     ecx,eax
c001c133:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c139:	89 c8                	mov    eax,ecx
c001c13b:	ef                   	out    dx,eax
c001c13c:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c142:	be fc 0c 00 00       	mov    esi,0xcfc
c001c147:	89 f2                	mov    edx,esi
c001c149:	89 f8                	mov    eax,edi
c001c14b:	ee                   	out    dx,al
c001c14c:	89 c8                	mov    eax,ecx
c001c14e:	89 ea                	mov    edx,ebp
c001c150:	ef                   	out    dx,eax
c001c151:	89 f2                	mov    edx,esi
c001c153:	ed                   	in     eax,dx
c001c154:	0f b6 c0             	movzx  eax,al
c001c157:	39 f8                	cmp    eax,edi
c001c159:	74 49                	je     c001c1a4 <IDE::open(int, int, void*)+0x1e4>
c001c15b:	83 ec 0c             	sub    esp,0xc
c001c15e:	68 e4 31 02 c0       	push   0xc00231e4
c001c163:	eb 37                	jmp    c001c19c <IDE::open(int, int, void*)+0x1dc>
c001c165:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c16e:	75 1a                	jne    c001c18a <IDE::open(int, int, void*)+0x1ca>
c001c170:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c175:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c17a:	74 05                	je     c001c181 <IDE::open(int, int, void*)+0x1c1>
c001c17c:	83 c0 80             	add    eax,0xffffff80
c001c17f:	75 09                	jne    c001c18a <IDE::open(int, int, void*)+0x1ca>
c001c181:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c188:	eb 1a                	jmp    c001c1a4 <IDE::open(int, int, void*)+0x1e4>
c001c18a:	83 ec 0c             	sub    esp,0xc
c001c18d:	68 ec 31 02 c0       	push   0xc00231ec
c001c192:	eb 08                	jmp    c001c19c <IDE::open(int, int, void*)+0x1dc>
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	68 1d 32 02 c0       	push   0xc002321d
c001c19c:	e8 c6 53 ff ff       	call   c0011567 <KePanic(char const*)>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c1ab:	74 1a                	je     c001c1c7 <IDE::open(int, int, void*)+0x207>
c001c1ad:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c1b3:	83 e0 fc             	and    eax,0xfffffffc
c001c1b6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c1bd:	83 c0 08             	add    eax,0x8
c001c1c0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1cd:	89 c2                	mov    edx,eax
c001c1cf:	83 e2 0f             	and    edx,0xf
c001c1d2:	83 fa 08             	cmp    edx,0x8
c001c1d5:	75 0a                	jne    c001c1e1 <IDE::open(int, int, void*)+0x221>
c001c1d7:	83 e8 02             	sub    eax,0x2
c001c1da:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1e1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c1e7:	89 c2                	mov    edx,eax
c001c1e9:	83 e2 0f             	and    edx,0xf
c001c1ec:	83 fa 08             	cmp    edx,0x8
c001c1ef:	75 0a                	jne    c001c1fb <IDE::open(int, int, void*)+0x23b>
c001c1f1:	83 e8 02             	sub    eax,0x2
c001c1f4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c1fb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c202:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c209:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c20c:	89 d0                	mov    eax,edx
c001c20e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c212:	8d 7a 01             	lea    edi,[edx+0x1]
c001c215:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c219:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c21d:	83 e1 3f             	and    ecx,0x3f
c001c220:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c224:	89 f9                	mov    ecx,edi
c001c226:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c22d:	8d 78 02             	lea    edi,[eax+0x2]
c001c230:	0f b6 c9             	movzx  ecx,cl
c001c233:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c236:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c23a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c23e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c242:	83 e2 3f             	and    edx,0x3f
c001c245:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c249:	89 f9                	mov    ecx,edi
c001c24b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c251:	8d 78 03             	lea    edi,[eax+0x3]
c001c254:	0f b6 d1             	movzx  edx,cl
c001c257:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c25a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c25e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c262:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c266:	83 e1 3f             	and    ecx,0x3f
c001c269:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c26d:	89 f9                	mov    ecx,edi
c001c26f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c275:	8d 78 04             	lea    edi,[eax+0x4]
c001c278:	0f b6 c9             	movzx  ecx,cl
c001c27b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c27e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c282:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c286:	89 fa                	mov    edx,edi
c001c288:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c28e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c292:	83 e2 3f             	and    edx,0x3f
c001c295:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c299:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c2a0:	66 85 f6             	test   si,si
c001c2a3:	74 65                	je     c001c30a <IDE::open(int, int, void*)+0x34a>
c001c2a5:	89 f9                	mov    ecx,edi
c001c2a7:	83 c0 05             	add    eax,0x5
c001c2aa:	0f b6 d1             	movzx  edx,cl
c001c2ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2b4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c2b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2be:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2c2:	83 e0 3f             	and    eax,0x3f
c001c2c5:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2c9:	eb 3f                	jmp    c001c30a <IDE::open(int, int, void*)+0x34a>
c001c2cb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2d2:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2d8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2df:	05 06 02 00 00       	add    eax,0x206
c001c2e4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2eb:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c2f2:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c2f9:	05 06 02 00 00       	add    eax,0x206
c001c2fe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c305:	e9 bd fe ff ff       	jmp    c001c1c7 <IDE::open(int, int, void*)+0x207>
c001c30a:	50                   	push   eax
c001c30b:	50                   	push   eax
c001c30c:	6a 00                	push   0x0
c001c30e:	53                   	push   ebx
c001c30f:	e8 2e fa ff ff       	call   c001bd42 <IDE::prepareInterrupt(unsigned char)>
c001c314:	5a                   	pop    edx
c001c315:	59                   	pop    ecx
c001c316:	6a 01                	push   0x1
c001c318:	53                   	push   ebx
c001c319:	e8 24 fa ff ff       	call   c001bd42 <IDE::prepareInterrupt(unsigned char)>
c001c31e:	83 c4 0c             	add    esp,0xc
c001c321:	6a 00                	push   0x0
c001c323:	6a 00                	push   0x0
c001c325:	53                   	push   ebx
c001c326:	e8 4b fc ff ff       	call   c001bf76 <IDE::enableIRQs(unsigned char, bool)>
c001c32b:	83 c4 0c             	add    esp,0xc
c001c32e:	6a 00                	push   0x0
c001c330:	6a 01                	push   0x1
c001c332:	53                   	push   ebx
c001c333:	e8 3e fc ff ff       	call   c001bf76 <IDE::enableIRQs(unsigned char, bool)>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c342:	74 34                	je     c001c378 <IDE::open(int, int, void*)+0x3b8>
c001c344:	83 ec 0c             	sub    esp,0xc
c001c347:	53                   	push   ebx
c001c348:	6a 01                	push   0x1
c001c34a:	68 3e bf 01 c0       	push   0xc001bf3e
c001c34f:	6a 0e                	push   0xe
c001c351:	53                   	push   ebx
c001c352:	e8 f5 05 ff ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c357:	83 c4 14             	add    esp,0x14
c001c35a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c360:	53                   	push   ebx
c001c361:	6a 01                	push   0x1
c001c363:	68 5a bf 01 c0       	push   0xc001bf5a
c001c368:	6a 0f                	push   0xf
c001c36a:	53                   	push   ebx
c001c36b:	e8 dc 05 ff ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c370:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c376:	eb 38                	jmp    c001c3b0 <IDE::open(int, int, void*)+0x3f0>
c001c378:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	53                   	push   ebx
c001c386:	6a 00                	push   0x0
c001c388:	68 3e bf 01 c0       	push   0xc001bf3e
c001c38d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c393:	53                   	push   ebx
c001c394:	e8 b3 05 ff ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c399:	83 c4 14             	add    esp,0x14
c001c39c:	53                   	push   ebx
c001c39d:	6a 00                	push   0x0
c001c39f:	68 5a bf 01 c0       	push   0xc001bf5a
c001c3a4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c3aa:	53                   	push   ebx
c001c3ab:	e8 9c 05 ff ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3b2:	83 c4 20             	add    esp,0x20
c001c3b5:	83 ec 0c             	sub    esp,0xc
c001c3b8:	53                   	push   ebx
c001c3b9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c3bc:	83 c4 0c             	add    esp,0xc
c001c3bf:	6a 07                	push   0x7
c001c3c1:	6a 00                	push   0x0
c001c3c3:	53                   	push   ebx
c001c3c4:	e8 5f fa ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c3c9:	83 c4 0c             	add    esp,0xc
c001c3cc:	6a 07                	push   0x7
c001c3ce:	6a 01                	push   0x1
c001c3d0:	53                   	push   ebx
c001c3d1:	e8 52 fa ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c3d6:	83 c4 0c             	add    esp,0xc
c001c3d9:	6a 01                	push   0x1
c001c3db:	6a 00                	push   0x0
c001c3dd:	53                   	push   ebx
c001c3de:	e8 93 fb ff ff       	call   c001bf76 <IDE::enableIRQs(unsigned char, bool)>
c001c3e3:	83 c4 0c             	add    esp,0xc
c001c3e6:	6a 01                	push   0x1
c001c3e8:	6a 01                	push   0x1
c001c3ea:	53                   	push   ebx
c001c3eb:	e8 86 fb ff ff       	call   c001bf76 <IDE::enableIRQs(unsigned char, bool)>
c001c3f0:	83 c4 2c             	add    esp,0x2c
c001c3f3:	31 c0                	xor    eax,eax
c001c3f5:	5b                   	pop    ebx
c001c3f6:	5e                   	pop    esi
c001c3f7:	5f                   	pop    edi
c001c3f8:	5d                   	pop    ebp
c001c3f9:	c3                   	ret    

c001c3fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c3fa:	55                   	push   ebp
c001c3fb:	57                   	push   edi
c001c3fc:	56                   	push   esi
c001c3fd:	53                   	push   ebx
c001c3fe:	83 ec 1c             	sub    esp,0x1c
c001c401:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c405:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c409:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c40d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c411:	8d 42 f8             	lea    eax,[edx-0x8]
c001c414:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c418:	3c 03                	cmp    al,0x3
c001c41a:	77 5a                	ja     c001c476 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c41c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c420:	0f b6 db             	movzx  ebx,bl
c001c423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c427:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c42a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c42f:	0c 80                	or     al,0x80
c001c431:	50                   	push   eax
c001c432:	6a 0c                	push   0xc
c001c434:	53                   	push   ebx
c001c435:	56                   	push   esi
c001c436:	e8 2d f9 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c43b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c43f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c444:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c448:	0f b6 d2             	movzx  edx,dl
c001c44b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c44f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c451:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c456:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c45a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c45e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c466:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c46a:	83 c4 2c             	add    esp,0x2c
c001c46d:	5b                   	pop    ebx
c001c46e:	5e                   	pop    esi
c001c46f:	5f                   	pop    edi
c001c470:	5d                   	pop    ebp
c001c471:	e9 f2 f8 ff ff       	jmp    c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c476:	0f b6 c2             	movzx  eax,dl
c001c479:	83 f8 07             	cmp    eax,0x7
c001c47c:	77 12                	ja     c001c490 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c47e:	0f b6 db             	movzx  ebx,bl
c001c481:	0f b6 c2             	movzx  eax,dl
c001c484:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c48c:	01 c2                	add    edx,eax
c001c48e:	eb 2f                	jmp    c001c4bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c490:	83 f8 0d             	cmp    eax,0xd
c001c493:	77 13                	ja     c001c4a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c495:	0f b6 db             	movzx  ebx,bl
c001c498:	0f b6 d2             	movzx  edx,dl
c001c49b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c4a2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c4a6:	eb 17                	jmp    c001c4bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4a8:	83 f8 15             	cmp    eax,0x15
c001c4ab:	77 14                	ja     c001c4c1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c4ad:	0f b6 db             	movzx  ebx,bl
c001c4b0:	0f b6 d2             	movzx  edx,dl
c001c4b3:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c4bb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4c1:	83 c4 1c             	add    esp,0x1c
c001c4c4:	5b                   	pop    ebx
c001c4c5:	5e                   	pop    esi
c001c4c6:	5f                   	pop    edi
c001c4c7:	5d                   	pop    ebp
c001c4c8:	c3                   	ret    
c001c4c9:	90                   	nop

c001c4ca <IDE::detect()>:
c001c4ca:	55                   	push   ebp
c001c4cb:	57                   	push   edi
c001c4cc:	56                   	push   esi
c001c4cd:	53                   	push   ebx
c001c4ce:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4d4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4db:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c4e2:	0f 85 9e 02 00 00    	jne    c001c786 <IDE::detect()+0x2bc>
c001c4e8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c4ef:	31 f6                	xor    esi,esi
c001c4f1:	31 ff                	xor    edi,edi
c001c4f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4fb:	89 f8                	mov    eax,edi
c001c4fd:	c1 e0 06             	shl    eax,0x6
c001c500:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c508:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c50c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c514:	c1 e0 04             	shl    eax,0x4
c001c517:	83 c8 a0             	or     eax,0xffffffa0
c001c51a:	0f b6 c0             	movzx  eax,al
c001c51d:	50                   	push   eax
c001c51e:	6a 06                	push   0x6
c001c520:	56                   	push   esi
c001c521:	53                   	push   ebx
c001c522:	e8 41 f8 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c527:	83 c4 0c             	add    esp,0xc
c001c52a:	6a 0c                	push   0xc
c001c52c:	56                   	push   esi
c001c52d:	53                   	push   ebx
c001c52e:	e8 f5 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c533:	83 c4 0c             	add    esp,0xc
c001c536:	6a 0c                	push   0xc
c001c538:	56                   	push   esi
c001c539:	53                   	push   ebx
c001c53a:	e8 e9 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c53f:	83 c4 0c             	add    esp,0xc
c001c542:	6a 0c                	push   0xc
c001c544:	56                   	push   esi
c001c545:	53                   	push   ebx
c001c546:	e8 dd f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c54b:	83 c4 0c             	add    esp,0xc
c001c54e:	6a 0c                	push   0xc
c001c550:	56                   	push   esi
c001c551:	53                   	push   ebx
c001c552:	e8 d1 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c557:	68 ec 00 00 00       	push   0xec
c001c55c:	6a 07                	push   0x7
c001c55e:	56                   	push   esi
c001c55f:	53                   	push   ebx
c001c560:	e8 03 f8 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c565:	83 c4 1c             	add    esp,0x1c
c001c568:	6a 0c                	push   0xc
c001c56a:	56                   	push   esi
c001c56b:	53                   	push   ebx
c001c56c:	e8 b7 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c571:	83 c4 0c             	add    esp,0xc
c001c574:	6a 0c                	push   0xc
c001c576:	56                   	push   esi
c001c577:	53                   	push   ebx
c001c578:	e8 ab f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c57d:	83 c4 0c             	add    esp,0xc
c001c580:	6a 0c                	push   0xc
c001c582:	56                   	push   esi
c001c583:	53                   	push   ebx
c001c584:	e8 9f f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c589:	83 c4 0c             	add    esp,0xc
c001c58c:	6a 0c                	push   0xc
c001c58e:	56                   	push   esi
c001c58f:	53                   	push   ebx
c001c590:	e8 93 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c595:	83 c4 0c             	add    esp,0xc
c001c598:	6a 0c                	push   0xc
c001c59a:	56                   	push   esi
c001c59b:	53                   	push   ebx
c001c59c:	e8 87 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c5a1:	83 c4 10             	add    esp,0x10
c001c5a4:	84 c0                	test   al,al
c001c5a6:	0f 84 61 01 00 00    	je     c001c70d <IDE::detect()+0x243>
c001c5ac:	31 ed                	xor    ebp,ebp
c001c5ae:	50                   	push   eax
c001c5af:	6a 0c                	push   0xc
c001c5b1:	56                   	push   esi
c001c5b2:	53                   	push   ebx
c001c5b3:	e8 70 f8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c5b8:	83 c4 10             	add    esp,0x10
c001c5bb:	a8 01                	test   al,0x1
c001c5bd:	0f 85 6b 01 00 00    	jne    c001c72e <IDE::detect()+0x264>
c001c5c3:	a8 80                	test   al,0x80
c001c5c5:	75 04                	jne    c001c5cb <IDE::detect()+0x101>
c001c5c7:	a8 08                	test   al,0x8
c001c5c9:	75 23                	jne    c001c5ee <IDE::detect()+0x124>
c001c5cb:	45                   	inc    ebp
c001c5cc:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c5d2:	7e da                	jle    c001c5ae <IDE::detect()+0xe4>
c001c5d4:	83 ec 0c             	sub    esp,0xc
c001c5d7:	6a 32                	push   0x32
c001c5d9:	e8 b6 9d ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c5e7:	75 c5                	jne    c001c5ae <IDE::detect()+0xe4>
c001c5e9:	e9 40 01 00 00       	jmp    c001c72e <IDE::detect()+0x264>
c001c5ee:	31 c9                	xor    ecx,ecx
c001c5f0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c5f4:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c5f8:	83 ec 0c             	sub    esp,0xc
c001c5fb:	68 80 00 00 00       	push   0x80
c001c600:	55                   	push   ebp
c001c601:	6a 00                	push   0x0
c001c603:	56                   	push   esi
c001c604:	53                   	push   ebx
c001c605:	e8 f0 fd ff ff       	call   c001c3fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c60a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c60f:	89 f8                	mov    eax,edi
c001c611:	c1 e0 06             	shl    eax,0x6
c001c614:	01 d8                	add    eax,ebx
c001c616:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c61d:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c624:	89 d1                	mov    ecx,edx
c001c626:	89 f2                	mov    edx,esi
c001c628:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c62e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c632:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c638:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c63c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c643:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c64b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c652:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c65a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c660:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c667:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c66d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c671:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c675:	83 c4 20             	add    esp,0x20
c001c678:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c67b:	83 c5 02             	add    ebp,0x2
c001c67e:	83 c0 02             	add    eax,0x2
c001c681:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c687:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c68a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c690:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c694:	75 e2                	jne    c001c678 <IDE::detect()+0x1ae>
c001c696:	89 f8                	mov    eax,edi
c001c698:	c1 e0 06             	shl    eax,0x6
c001c69b:	01 d8                	add    eax,ebx
c001c69d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c6a4:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c6ab:	c1 ea 09             	shr    edx,0x9
c001c6ae:	83 e2 01             	and    edx,0x1
c001c6b1:	80 e1 01             	and    cl,0x1
c001c6b4:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c6ba:	75 22                	jne    c001c6de <IDE::detect()+0x214>
c001c6bc:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6c3:	74 47                	je     c001c70c <IDE::detect()+0x242>
c001c6c5:	83 ec 0c             	sub    esp,0xc
c001c6c8:	68 7c 01 00 00       	push   0x17c
c001c6cd:	e8 01 b4 fe ff       	call   c0007ad3 <malloc>
c001c6d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6d5:	89 c5                	mov    ebp,eax
c001c6d7:	e8 16 05 00 00       	call   c001cbf2 <ATA::ATA()>
c001c6dc:	eb 17                	jmp    c001c6f5 <IDE::detect()+0x22b>
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	68 84 01 00 00       	push   0x184
c001c6e6:	e8 e8 b3 fe ff       	call   c0007ad3 <malloc>
c001c6eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6ee:	89 c5                	mov    ebp,eax
c001c6f0:	e8 6f 0e 00 00       	call   c001d564 <ATAPI::ATAPI()>
c001c6f5:	5a                   	pop    edx
c001c6f6:	59                   	pop    ecx
c001c6f7:	55                   	push   ebp
c001c6f8:	53                   	push   ebx
c001c6f9:	e8 a2 02 ff ff       	call   c000c9a0 <Device::addChild(Device*)>
c001c6fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c701:	53                   	push   ebx
c001c702:	57                   	push   edi
c001c703:	6a 00                	push   0x0
c001c705:	55                   	push   ebp
c001c706:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c709:	83 c4 20             	add    esp,0x20
c001c70c:	47                   	inc    edi
c001c70d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c712:	74 0d                	je     c001c721 <IDE::detect()+0x257>
c001c714:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c71c:	e9 da fd ff ff       	jmp    c001c4fb <IDE::detect()+0x31>
c001c721:	4e                   	dec    esi
c001c722:	74 62                	je     c001c786 <IDE::detect()+0x2bc>
c001c724:	be 01 00 00 00       	mov    esi,0x1
c001c729:	e9 c5 fd ff ff       	jmp    c001c4f3 <IDE::detect()+0x29>
c001c72e:	50                   	push   eax
c001c72f:	6a 04                	push   0x4
c001c731:	56                   	push   esi
c001c732:	53                   	push   ebx
c001c733:	e8 f0 f6 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c738:	83 c4 0c             	add    esp,0xc
c001c73b:	6a 05                	push   0x5
c001c73d:	56                   	push   esi
c001c73e:	53                   	push   ebx
c001c73f:	89 c5                	mov    ebp,eax
c001c741:	e8 e2 f6 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c746:	89 e9                	mov    ecx,ebp
c001c748:	83 c4 10             	add    esp,0x10
c001c74b:	0f b6 e9             	movzx  ebp,cl
c001c74e:	83 fd 14             	cmp    ebp,0x14
c001c751:	74 2d                	je     c001c780 <IDE::detect()+0x2b6>
c001c753:	83 fd 69             	cmp    ebp,0x69
c001c756:	75 b5                	jne    c001c70d <IDE::detect()+0x243>
c001c758:	3c 96                	cmp    al,0x96
c001c75a:	75 b1                	jne    c001c70d <IDE::detect()+0x243>
c001c75c:	68 a1 00 00 00       	push   0xa1
c001c761:	6a 07                	push   0x7
c001c763:	56                   	push   esi
c001c764:	53                   	push   ebx
c001c765:	e8 fe f5 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c76a:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c771:	e8 1e 9c ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	b1 01                	mov    cl,0x1
c001c77b:	e9 70 fe ff ff       	jmp    c001c5f0 <IDE::detect()+0x126>
c001c780:	3c eb                	cmp    al,0xeb
c001c782:	75 cf                	jne    c001c753 <IDE::detect()+0x289>
c001c784:	eb d6                	jmp    c001c75c <IDE::detect()+0x292>
c001c786:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c78c:	5b                   	pop    ebx
c001c78d:	5e                   	pop    esi
c001c78e:	5f                   	pop    edi
c001c78f:	5d                   	pop    ebp
c001c790:	c3                   	ret    
c001c791:	90                   	nop

c001c792 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c792:	55                   	push   ebp
c001c793:	57                   	push   edi
c001c794:	56                   	push   esi
c001c795:	53                   	push   ebx
c001c796:	83 ec 1c             	sub    esp,0x1c
c001c799:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c79d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c7a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c7a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7ad:	88 c3                	mov    bl,al
c001c7af:	25 ff 00 00 00       	and    eax,0xff
c001c7b4:	0f 84 88 00 00 00    	je     c001c842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7ba:	83 ec 0c             	sub    esp,0xc
c001c7bd:	89 c7                	mov    edi,eax
c001c7bf:	68 47 32 02 c0       	push   0xc0023247
c001c7c4:	e8 41 e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c7c9:	83 c4 10             	add    esp,0x10
c001c7cc:	83 ff 01             	cmp    edi,0x1
c001c7cf:	74 6b                	je     c001c83c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7d1:	83 ff 02             	cmp    edi,0x2
c001c7d4:	75 58                	jne    c001c82e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7d6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7db:	50                   	push   eax
c001c7dc:	6a 01                	push   0x1
c001c7de:	01 ff                	add    edi,edi
c001c7e0:	09 fe                	or     esi,edi
c001c7e2:	89 f0                	mov    eax,esi
c001c7e4:	0f b6 f0             	movzx  esi,al
c001c7e7:	c1 e6 06             	shl    esi,0x6
c001c7ea:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c7f2:	50                   	push   eax
c001c7f3:	55                   	push   ebp
c001c7f4:	e8 2f f6 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c7f9:	83 c4 10             	add    esp,0x10
c001c7fc:	a8 01                	test   al,0x1
c001c7fe:	74 02                	je     c001c802 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c800:	b3 07                	mov    bl,0x7
c001c802:	a8 02                	test   al,0x2
c001c804:	74 02                	je     c001c808 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c806:	b3 03                	mov    bl,0x3
c001c808:	a8 04                	test   al,0x4
c001c80a:	74 02                	je     c001c80e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c80c:	b3 14                	mov    bl,0x14
c001c80e:	a8 08                	test   al,0x8
c001c810:	74 02                	je     c001c814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c812:	b3 03                	mov    bl,0x3
c001c814:	a8 10                	test   al,0x10
c001c816:	74 02                	je     c001c81a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c818:	b3 15                	mov    bl,0x15
c001c81a:	a8 20                	test   al,0x20
c001c81c:	74 02                	je     c001c820 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c81e:	b3 03                	mov    bl,0x3
c001c820:	a8 40                	test   al,0x40
c001c822:	74 02                	je     c001c826 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c824:	b3 16                	mov    bl,0x16
c001c826:	a8 80                	test   al,0x80
c001c828:	74 18                	je     c001c842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c82a:	b3 0d                	mov    bl,0xd
c001c82c:	eb 14                	jmp    c001c842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c82e:	83 ff 03             	cmp    edi,0x3
c001c831:	74 0d                	je     c001c840 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c833:	83 ff 04             	cmp    edi,0x4
c001c836:	75 0a                	jne    c001c842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c838:	b3 08                	mov    bl,0x8
c001c83a:	eb 06                	jmp    c001c842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c83c:	b3 13                	mov    bl,0x13
c001c83e:	eb 02                	jmp    c001c842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c840:	b3 17                	mov    bl,0x17
c001c842:	83 c4 1c             	add    esp,0x1c
c001c845:	88 d8                	mov    al,bl
c001c847:	5b                   	pop    ebx
c001c848:	5e                   	pop    esi
c001c849:	5f                   	pop    edi
c001c84a:	5d                   	pop    ebp
c001c84b:	c3                   	ret    

c001c84c <IDE::polling(unsigned char, unsigned int)>:
c001c84c:	57                   	push   edi
c001c84d:	56                   	push   esi
c001c84e:	53                   	push   ebx
c001c84f:	bb 04 00 00 00       	mov    ebx,0x4
c001c854:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c858:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c85d:	52                   	push   edx
c001c85e:	6a 0c                	push   0xc
c001c860:	56                   	push   esi
c001c861:	57                   	push   edi
c001c862:	e8 c1 f5 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	4b                   	dec    ebx
c001c86b:	75 f0                	jne    c001c85d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c86d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c872:	50                   	push   eax
c001c873:	6a 0c                	push   0xc
c001c875:	56                   	push   esi
c001c876:	57                   	push   edi
c001c877:	e8 ac f5 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	a8 01                	test   al,0x1
c001c881:	75 17                	jne    c001c89a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c883:	a8 20                	test   al,0x20
c001c885:	75 0f                	jne    c001c896 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c887:	4b                   	dec    ebx
c001c888:	74 10                	je     c001c89a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c88a:	a8 80                	test   al,0x80
c001c88c:	75 e4                	jne    c001c872 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c88e:	a8 08                	test   al,0x8
c001c890:	74 e0                	je     c001c872 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c892:	31 c0                	xor    eax,eax
c001c894:	eb 06                	jmp    c001c89c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c896:	b0 01                	mov    al,0x1
c001c898:	eb 02                	jmp    c001c89c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c89a:	b0 02                	mov    al,0x2
c001c89c:	5b                   	pop    ebx
c001c89d:	5e                   	pop    esi
c001c89e:	5f                   	pop    edi
c001c89f:	c3                   	ret    

c001c8a0 <SATABus::close(int, int, void*)>:
c001c8a0:	31 c0                	xor    eax,eax
c001c8a2:	c3                   	ret    
c001c8a3:	90                   	nop

c001c8a4 <SATABus::detect()>:
c001c8a4:	c3                   	ret    
c001c8a5:	90                   	nop

c001c8a6 <SATABus::SATABus()>:
c001c8a6:	83 ec 0c             	sub    esp,0xc
c001c8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ad:	83 ec 08             	sub    esp,0x8
c001c8b0:	68 80 32 02 c0       	push   0xc0023280
c001c8b5:	50                   	push   eax
c001c8b6:	e8 29 04 ff ff       	call   c000cce4 <HardDiskController::HardDiskController(char const*)>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c001c8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c7:	89 10                	mov    DWORD PTR [eax],edx
c001c8c9:	83 ec 0c             	sub    esp,0xc
c001c8cc:	6a 50                	push   0x50
c001c8ce:	e8 de b5 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	89 c2                	mov    edx,eax
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c8e2:	83 ec 0c             	sub    esp,0xc
c001c8e5:	6a 50                	push   0x50
c001c8e7:	e8 09 cd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	89 c2                	mov    edx,eax
c001c8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8fb:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c900:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c904:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c90a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c90e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c914:	83 ec 0c             	sub    esp,0xc
c001c917:	6a 03                	push   0x3
c001c919:	6a 50                	push   0x50
c001c91b:	51                   	push   ecx
c001c91c:	52                   	push   edx
c001c91d:	50                   	push   eax
c001c91e:	e8 e5 d5 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c923:	83 c4 20             	add    esp,0x20
c001c926:	90                   	nop
c001c927:	83 c4 0c             	add    esp,0xc
c001c92a:	c3                   	ret    
c001c92b:	90                   	nop

c001c92c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c92c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c930:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c933:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c936:	09 c2                	or     edx,eax
c001c938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c93c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c942:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c944:	31 c0                	xor    eax,eax
c001c946:	c1 e9 08             	shr    ecx,0x8
c001c949:	83 e1 0f             	and    ecx,0xf
c001c94c:	39 c8                	cmp    eax,ecx
c001c94e:	74 0a                	je     c001c95a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c950:	f6 c2 01             	test   dl,0x1
c001c953:	74 08                	je     c001c95d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c955:	d1 ea                	shr    edx,1
c001c957:	40                   	inc    eax
c001c958:	eb f2                	jmp    c001c94c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c95a:	83 c8 ff             	or     eax,0xffffffff
c001c95d:	c3                   	ret    

c001c95e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c95e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c962:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c965:	89 c2                	mov    edx,eax
c001c967:	c1 ea 08             	shr    edx,0x8
c001c96a:	83 e2 0f             	and    edx,0xf
c001c96d:	4a                   	dec    edx
c001c96e:	75 32                	jne    c001c9a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c970:	83 e0 0f             	and    eax,0xf
c001c973:	83 f8 03             	cmp    eax,0x3
c001c976:	75 2a                	jne    c001c9a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c978:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c97b:	b8 02 00 00 00       	mov    eax,0x2
c001c980:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c986:	74 1c                	je     c001c9a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c988:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c98e:	b8 04 00 00 00       	mov    eax,0x4
c001c993:	74 0f                	je     c001c9a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c995:	31 c0                	xor    eax,eax
c001c997:	83 fa 03             	cmp    edx,0x3
c001c99a:	0f 94 c0             	sete   al
c001c99d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c9a1:	c3                   	ret    
c001c9a2:	31 c0                	xor    eax,eax
c001c9a4:	c3                   	ret    
c001c9a5:	90                   	nop

c001c9a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9ad:	0f ba e2 0f          	bt     edx,0xf
c001c9b1:	72 f7                	jb     c001c9aa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c9b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9b6:	83 ca 10             	or     edx,0x10
c001c9b9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9bf:	83 ca 01             	or     edx,0x1
c001c9c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9c5:	c3                   	ret    

c001c9c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9cd:	83 e2 fe             	and    edx,0xfffffffe
c001c9d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d6:	83 e2 ef             	and    edx,0xffffffef
c001c9d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9df:	0f ba e2 0e          	bt     edx,0xe
c001c9e3:	72 f7                	jb     c001c9dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9e8:	0f ba e2 0f          	bt     edx,0xf
c001c9ec:	72 ee                	jb     c001c9dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9ee:	c3                   	ret    
c001c9ef:	90                   	nop

c001c9f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c9f0:	55                   	push   ebp
c001c9f1:	57                   	push   edi
c001c9f2:	56                   	push   esi
c001c9f3:	53                   	push   ebx
c001c9f4:	83 ec 1c             	sub    esp,0x1c
c001c9f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9ff:	53                   	push   ebx
c001ca00:	57                   	push   edi
c001ca01:	e8 c0 ff ff ff       	call   c001c9c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca06:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca13:	c1 e5 0a             	shl    ebp,0xa
c001ca16:	01 e8                	add    eax,ebp
c001ca18:	89 03                	mov    DWORD PTR [ebx],eax
c001ca1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca1c:	68 00 04 00 00       	push   0x400
c001ca21:	6a 00                	push   0x0
c001ca23:	50                   	push   eax
c001ca24:	e8 c7 3a fe ff       	call   c00004f0 <memset>
c001ca29:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca2f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ca33:	83 c4 1c             	add    esp,0x1c
c001ca36:	01 e8                	add    eax,ebp
c001ca38:	89 03                	mov    DWORD PTR [ebx],eax
c001ca3a:	c1 e6 08             	shl    esi,0x8
c001ca3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca44:	81 c6 00 80 00 00    	add    esi,0x8000
c001ca4a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca50:	01 f0                	add    eax,esi
c001ca52:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca55:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca58:	68 00 01 00 00       	push   0x100
c001ca5d:	6a 00                	push   0x0
c001ca5f:	50                   	push   eax
c001ca60:	e8 8b 3a fe ff       	call   c00004f0 <memset>
c001ca65:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca6b:	31 d2                	xor    edx,edx
c001ca6d:	01 f0                	add    eax,esi
c001ca6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca72:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca79:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ca7f:	01 ee                	add    esi,ebp
c001ca81:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ca85:	83 c4 10             	add    esp,0x10
c001ca88:	c1 e5 0d             	shl    ebp,0xd
c001ca8b:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ca91:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ca97:	83 c6 20             	add    esi,0x20
c001ca9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca9e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001caa4:	01 e8                	add    eax,ebp
c001caa6:	01 d0                	add    eax,edx
c001caa8:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001caab:	52                   	push   edx
c001caac:	68 00 01 00 00       	push   0x100
c001cab1:	6a 00                	push   0x0
c001cab3:	50                   	push   eax
c001cab4:	e8 37 3a fe ff       	call   c00004f0 <memset>
c001cab9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cabf:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cac6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caca:	83 c4 10             	add    esp,0x10
c001cacd:	01 e8                	add    eax,ebp
c001cacf:	01 d0                	add    eax,edx
c001cad1:	81 c2 00 01 00 00    	add    edx,0x100
c001cad7:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cada:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cae0:	75 af                	jne    c001ca91 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cae2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cae9:	50                   	push   eax
c001caea:	50                   	push   eax
c001caeb:	53                   	push   ebx
c001caec:	57                   	push   edi
c001caed:	e8 b4 fe ff ff       	call   c001c9a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001caf2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001caf9:	83 c4 2c             	add    esp,0x2c
c001cafc:	5b                   	pop    ebx
c001cafd:	5e                   	pop    esi
c001cafe:	5f                   	pop    edi
c001caff:	5d                   	pop    ebp
c001cb00:	c3                   	ret    
c001cb01:	90                   	nop

c001cb02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb02:	55                   	push   ebp
c001cb03:	57                   	push   edi
c001cb04:	56                   	push   esi
c001cb05:	53                   	push   ebx
c001cb06:	31 db                	xor    ebx,ebx
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb0f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb13:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb16:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb1c:	74 7a                	je     c001cb98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb1e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb22:	89 d8                	mov    eax,ebx
c001cb24:	c1 e0 07             	shl    eax,0x7
c001cb27:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb2e:	55                   	push   ebp
c001cb2f:	56                   	push   esi
c001cb30:	e8 29 fe ff ff       	call   c001c95e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb35:	5a                   	pop    edx
c001cb36:	59                   	pop    ecx
c001cb37:	83 f8 01             	cmp    eax,0x1
c001cb3a:	75 21                	jne    c001cb5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb3c:	50                   	push   eax
c001cb3d:	53                   	push   ebx
c001cb3e:	55                   	push   ebp
c001cb3f:	56                   	push   esi
c001cb40:	e8 ab fe ff ff       	call   c001c9f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb45:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb4c:	e8 82 af fe ff       	call   c0007ad3 <malloc>
c001cb51:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb54:	89 c5                	mov    ebp,eax
c001cb56:	e8 c1 10 00 00       	call   c001dc1c <SATA::SATA()>
c001cb5b:	eb 24                	jmp    c001cb81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb5d:	83 f8 04             	cmp    eax,0x4
c001cb60:	75 36                	jne    c001cb98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb62:	51                   	push   ecx
c001cb63:	53                   	push   ebx
c001cb64:	55                   	push   ebp
c001cb65:	56                   	push   esi
c001cb66:	e8 85 fe ff ff       	call   c001c9f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb6b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb72:	e8 5c af fe ff       	call   c0007ad3 <malloc>
c001cb77:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb7a:	89 c5                	mov    ebp,eax
c001cb7c:	e8 f5 17 00 00       	call   c001e376 <SATAPI::SATAPI()>
c001cb81:	58                   	pop    eax
c001cb82:	5a                   	pop    edx
c001cb83:	55                   	push   ebp
c001cb84:	56                   	push   esi
c001cb85:	e8 16 fe fe ff       	call   c000c9a0 <Device::addChild(Device*)>
c001cb8a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb8d:	56                   	push   esi
c001cb8e:	6a 00                	push   0x0
c001cb90:	53                   	push   ebx
c001cb91:	55                   	push   ebp
c001cb92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb95:	83 c4 20             	add    esp,0x20
c001cb98:	d1 ef                	shr    edi,1
c001cb9a:	43                   	inc    ebx
c001cb9b:	83 fb 20             	cmp    ebx,0x20
c001cb9e:	0f 85 72 ff ff ff    	jne    c001cb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cba4:	83 c4 0c             	add    esp,0xc
c001cba7:	5b                   	pop    ebx
c001cba8:	5e                   	pop    esi
c001cba9:	5f                   	pop    edi
c001cbaa:	5d                   	pop    ebp
c001cbab:	c3                   	ret    

c001cbac <SATABus::open(int, int, void*)>:
c001cbac:	83 ec 14             	sub    esp,0x14
c001cbaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbb3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cbb9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cbbf:	52                   	push   edx
c001cbc0:	50                   	push   eax
c001cbc1:	e8 3c ff ff ff       	call   c001cb02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbc6:	31 c0                	xor    eax,eax
c001cbc8:	83 c4 1c             	add    esp,0x1c
c001cbcb:	c3                   	ret    

c001cbcc <ATA::close(int, int, void*)>:
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbd9:	85 c0                	test   eax,eax
c001cbdb:	74 0c                	je     c001cbe9 <ATA::close(int, int, void*)+0x1d>
c001cbdd:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	50                   	push   eax
c001cbe3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	31 c0                	xor    eax,eax
c001cbeb:	83 c4 0c             	add    esp,0xc
c001cbee:	c3                   	ret    
c001cbef:	90                   	nop

c001cbf0 <ATA::powerSaving(PowerSavingLevel)>:
c001cbf0:	c3                   	ret    
c001cbf1:	90                   	nop

c001cbf2 <ATA::ATA()>:
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf9:	83 ec 04             	sub    esp,0x4
c001cbfc:	68 00 02 00 00       	push   0x200
c001cc01:	68 79 33 02 c0       	push   0xc0023379
c001cc06:	50                   	push   eax
c001cc07:	e8 62 01 ff ff       	call   c000cd6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001cc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc18:	89 10                	mov    DWORD PTR [eax],edx
c001cc1a:	90                   	nop
c001cc1b:	83 c4 0c             	add    esp,0xc
c001cc1e:	c3                   	ret    
c001cc1f:	90                   	nop

c001cc20 <ATA::flush(bool)>:
c001cc20:	53                   	push   ebx
c001cc21:	83 ec 08             	sub    esp,0x8
c001cc24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc2d:	83 f8 01             	cmp    eax,0x1
c001cc30:	19 c0                	sbb    eax,eax
c001cc32:	83 e0 fd             	and    eax,0xfffffffd
c001cc35:	05 ea 00 00 00       	add    eax,0xea
c001cc3a:	50                   	push   eax
c001cc3b:	6a 07                	push   0x7
c001cc3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc44:	50                   	push   eax
c001cc45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc4b:	e8 18 f1 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc50:	83 c4 0c             	add    esp,0xc
c001cc53:	6a 00                	push   0x0
c001cc55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc5c:	50                   	push   eax
c001cc5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc63:	e8 e4 fb ff ff       	call   c001c84c <IDE::polling(unsigned char, unsigned int)>
c001cc68:	83 c4 18             	add    esp,0x18
c001cc6b:	5b                   	pop    ebx
c001cc6c:	c3                   	ret    
c001cc6d:	90                   	nop

c001cc6e <ATA::readyForCommand()>:
c001cc6e:	56                   	push   esi
c001cc6f:	53                   	push   ebx
c001cc70:	53                   	push   ebx
c001cc71:	31 db                	xor    ebx,ebx
c001cc73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc77:	51                   	push   ecx
c001cc78:	6a 0c                	push   0xc
c001cc7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc81:	50                   	push   eax
c001cc82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc88:	e8 9b f1 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	a8 88                	test   al,0x88
c001cc92:	74 1f                	je     c001ccb3 <ATA::readyForCommand()+0x45>
c001cc94:	43                   	inc    ebx
c001cc95:	83 fb 63             	cmp    ebx,0x63
c001cc98:	7e dd                	jle    c001cc77 <ATA::readyForCommand()+0x9>
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	6a 0a                	push   0xa
c001cc9f:	e8 f0 96 ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001cca4:	83 c4 10             	add    esp,0x10
c001cca7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ccad:	75 c8                	jne    c001cc77 <ATA::readyForCommand()+0x9>
c001ccaf:	31 c0                	xor    eax,eax
c001ccb1:	eb 02                	jmp    c001ccb5 <ATA::readyForCommand()+0x47>
c001ccb3:	b0 01                	mov    al,0x1
c001ccb5:	5a                   	pop    edx
c001ccb6:	5b                   	pop    ebx
c001ccb7:	5e                   	pop    esi
c001ccb8:	c3                   	ret    
c001ccb9:	90                   	nop

c001ccba <ATA::access(unsigned long long, int, void*, bool)>:
c001ccba:	55                   	push   ebp
c001ccbb:	57                   	push   edi
c001ccbc:	56                   	push   esi
c001ccbd:	53                   	push   ebx
c001ccbe:	83 ec 2c             	sub    esp,0x2c
c001ccc1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ccc5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ccc9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cccd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccd5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccd9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ccdd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cce3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cce7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cced:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ccf1:	c1 e0 06             	shl    eax,0x6
c001ccf4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ccfc:	74 5b                	je     c001cd59 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001ccfe:	89 fa                	mov    edx,edi
c001cd00:	89 f0                	mov    eax,esi
c001cd02:	c1 ea 1c             	shr    edx,0x1c
c001cd05:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cd09:	89 d1                	mov    ecx,edx
c001cd0b:	09 c1                	or     ecx,eax
c001cd0d:	74 25                	je     c001cd34 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd0f:	31 ed                	xor    ebp,ebp
c001cd11:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd18:	89 fa                	mov    edx,edi
c001cd1a:	89 f0                	mov    eax,esi
c001cd1c:	0f ad d0             	shrd   eax,edx,cl
c001cd1f:	d3 ea                	shr    edx,cl
c001cd21:	f6 c1 20             	test   cl,0x20
c001cd24:	74 02                	je     c001cd28 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd26:	89 d0                	mov    eax,edx
c001cd28:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd2c:	45                   	inc    ebp
c001cd2d:	83 fd 06             	cmp    ebp,0x6
c001cd30:	75 df                	jne    c001cd11 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd32:	eb 71                	jmp    c001cda5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cd34:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd39:	89 f0                	mov    eax,esi
c001cd3b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd42:	0f ac f8 10          	shrd   eax,edi,0x10
c001cd46:	bf 01 00 00 00       	mov    edi,0x1
c001cd4b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd4f:	c1 ee 18             	shr    esi,0x18
c001cd52:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd57:	eb 53                	jmp    c001cdac <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd59:	6a 00                	push   0x0
c001cd5b:	6a 3f                	push   0x3f
c001cd5d:	57                   	push   edi
c001cd5e:	56                   	push   esi
c001cd5f:	e8 cc 2a 00 00       	call   c001f830 <__umoddi3>
c001cd64:	83 c4 10             	add    esp,0x10
c001cd67:	40                   	inc    eax
c001cd68:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd6c:	6a 00                	push   0x0
c001cd6e:	68 f0 03 00 00       	push   0x3f0
c001cd73:	57                   	push   edi
c001cd74:	56                   	push   esi
c001cd75:	e8 b6 29 00 00       	call   c001f730 <__udivdi3>
c001cd7a:	83 c4 10             	add    esp,0x10
c001cd7d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd82:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd89:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd8e:	6a 00                	push   0x0
c001cd90:	6a 3f                	push   0x3f
c001cd92:	57                   	push   edi
c001cd93:	31 ff                	xor    edi,edi
c001cd95:	56                   	push   esi
c001cd96:	e8 95 29 00 00       	call   c001f730 <__udivdi3>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	83 e0 0f             	and    eax,0xf
c001cda1:	89 c6                	mov    esi,eax
c001cda3:	eb 07                	jmp    c001cdac <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cda5:	31 f6                	xor    esi,esi
c001cda7:	bf 02 00 00 00       	mov    edi,0x2
c001cdac:	50                   	push   eax
c001cdad:	6a 00                	push   0x0
c001cdaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb6:	50                   	push   eax
c001cdb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdbb:	e8 b6 f1 ff ff       	call   c001bf76 <IDE::enableIRQs(unsigned char, bool)>
c001cdc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdc3:	e8 a6 fe ff ff       	call   c001cc6e <ATA::readyForCommand()>
c001cdc8:	83 c4 10             	add    esp,0x10
c001cdcb:	84 c0                	test   al,al
c001cdcd:	75 0a                	jne    c001cdd9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cdcf:	be 01 00 00 00       	mov    esi,0x1
c001cdd4:	e9 9b 02 00 00       	jmp    c001d074 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cdd9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cddf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cde5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cdec:	c1 e0 04             	shl    eax,0x4
c001cdef:	09 c6                	or     esi,eax
c001cdf1:	f7 c7 03 00 00 00    	test   edi,0x3
c001cdf7:	75 05                	jne    c001cdfe <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cdf9:	83 ce a0             	or     esi,0xffffffa0
c001cdfc:	eb 03                	jmp    c001ce01 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cdfe:	83 ce e0             	or     esi,0xffffffe0
c001ce01:	89 f0                	mov    eax,esi
c001ce03:	0f b6 f0             	movzx  esi,al
c001ce06:	56                   	push   esi
c001ce07:	6a 06                	push   0x6
c001ce09:	51                   	push   ecx
c001ce0a:	52                   	push   edx
c001ce0b:	e8 58 ef ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce10:	83 c4 10             	add    esp,0x10
c001ce13:	6a 00                	push   0x0
c001ce15:	6a 01                	push   0x1
c001ce17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce1e:	50                   	push   eax
c001ce1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce25:	e8 3e ef ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce2a:	89 f8                	mov    eax,edi
c001ce2c:	83 c4 10             	add    esp,0x10
c001ce2f:	0f b6 f0             	movzx  esi,al
c001ce32:	83 fe 02             	cmp    esi,0x2
c001ce35:	75 6e                	jne    c001cea5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ce37:	6a 00                	push   0x0
c001ce39:	6a 08                	push   0x8
c001ce3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce42:	50                   	push   eax
c001ce43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce49:	e8 1a ef ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce53:	50                   	push   eax
c001ce54:	6a 09                	push   0x9
c001ce56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce5d:	50                   	push   eax
c001ce5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce64:	e8 ff ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce69:	83 c4 20             	add    esp,0x20
c001ce6c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce71:	50                   	push   eax
c001ce72:	6a 0a                	push   0xa
c001ce74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce7b:	50                   	push   eax
c001ce7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce82:	e8 e1 ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce87:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce8c:	50                   	push   eax
c001ce8d:	6a 0b                	push   0xb
c001ce8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce96:	50                   	push   eax
c001ce97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce9d:	e8 c6 ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea2:	83 c4 20             	add    esp,0x20
c001cea5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ceaa:	50                   	push   eax
c001ceab:	6a 02                	push   0x2
c001cead:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceb4:	50                   	push   eax
c001ceb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cebb:	e8 a8 ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cec5:	50                   	push   eax
c001cec6:	6a 03                	push   0x3
c001cec8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cecf:	50                   	push   eax
c001ced0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ced6:	e8 8d ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cedb:	83 c4 20             	add    esp,0x20
c001cede:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cee3:	50                   	push   eax
c001cee4:	6a 04                	push   0x4
c001cee6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceed:	50                   	push   eax
c001ceee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cef4:	e8 6f ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cef9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cefe:	50                   	push   eax
c001ceff:	6a 05                	push   0x5
c001cf01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf08:	50                   	push   eax
c001cf09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf0f:	e8 54 ee ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf14:	83 c4 20             	add    esp,0x20
c001cf17:	83 fe 02             	cmp    esi,0x2
c001cf1a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cf1f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cf24:	85 c9                	test   ecx,ecx
c001cf26:	74 07                	je     c001cf2f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cf28:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf2d:	75 47                	jne    c001cf76 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cf2f:	89 f8                	mov    eax,edi
c001cf31:	0f b6 f8             	movzx  edi,al
c001cf34:	31 c0                	xor    eax,eax
c001cf36:	83 ff 02             	cmp    edi,0x2
c001cf39:	0f 95 c0             	setne  al
c001cf3c:	89 c6                	mov    esi,eax
c001cf3e:	74 0c                	je     c001cf4c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cf40:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf45:	b8 30 00 00 00       	mov    eax,0x30
c001cf4a:	75 2f                	jne    c001cf7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf50:	83 f2 01             	xor    edx,0x1
c001cf53:	85 c9                	test   ecx,ecx
c001cf55:	74 09                	je     c001cf60 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cf57:	84 d2                	test   dl,dl
c001cf59:	b8 24 00 00 00       	mov    eax,0x24
c001cf5e:	75 1b                	jne    c001cf7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf60:	85 f6                	test   esi,esi
c001cf62:	0f 84 67 fe ff ff    	je     c001cdcf <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf68:	84 d2                	test   dl,dl
c001cf6a:	b8 20 00 00 00       	mov    eax,0x20
c001cf6f:	75 0a                	jne    c001cf7b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf71:	e9 59 fe ff ff       	jmp    c001cdcf <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf76:	b8 34 00 00 00       	mov    eax,0x34
c001cf7b:	50                   	push   eax
c001cf7c:	6a 07                	push   0x7
c001cf7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf85:	50                   	push   eax
c001cf86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8c:	e8 d7 ed ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf91:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cf9d:	85 f6                	test   esi,esi
c001cf9f:	0f 84 b5 00 00 00    	je     c001d05a <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cfa5:	50                   	push   eax
c001cfa6:	6a 01                	push   0x1
c001cfa8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfaf:	50                   	push   eax
c001cfb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb6:	e8 91 f8 ff ff       	call   c001c84c <IDE::polling(unsigned char, unsigned int)>
c001cfbb:	83 c4 10             	add    esp,0x10
c001cfbe:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cfc4:	0f b6 c0             	movzx  eax,al
c001cfc7:	85 c0                	test   eax,eax
c001cfc9:	74 1f                	je     c001cfea <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cfcb:	50                   	push   eax
c001cfcc:	89 c6                	mov    esi,eax
c001cfce:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cfd5:	0f b6 d2             	movzx  edx,dl
c001cfd8:	50                   	push   eax
c001cfd9:	52                   	push   edx
c001cfda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe0:	e8 ad f7 ff ff       	call   c001c792 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfe5:	e9 87 00 00 00       	jmp    c001d071 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cfea:	85 ed                	test   ebp,ebp
c001cfec:	74 3b                	je     c001d029 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cfee:	31 ff                	xor    edi,edi
c001cff0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cff4:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cff8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cffd:	50                   	push   eax
c001cffe:	50                   	push   eax
c001cfff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d006:	50                   	push   eax
c001d007:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d00d:	e8 44 ed ff ff       	call   c001bd56 <IDE::getBase(unsigned char)>
c001d012:	89 c2                	mov    edx,eax
c001d014:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d019:	66 ef                	out    dx,ax
c001d01b:	47                   	inc    edi
c001d01c:	83 c4 10             	add    esp,0x10
c001d01f:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d025:	75 c9                	jne    c001cff0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d027:	eb 23                	jmp    c001d04c <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d029:	51                   	push   ecx
c001d02a:	0f b6 d2             	movzx  edx,dl
c001d02d:	51                   	push   ecx
c001d02e:	52                   	push   edx
c001d02f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d035:	e8 1c ed ff ff       	call   c001bd56 <IDE::getBase(unsigned char)>
c001d03a:	b9 00 01 00 00       	mov    ecx,0x100
c001d03f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d043:	89 c2                	mov    edx,eax
c001d045:	fc                   	cld    
c001d046:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d049:	83 c4 10             	add    esp,0x10
c001d04c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d054:	4e                   	dec    esi
c001d055:	e9 43 ff ff ff       	jmp    c001cf9d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d05a:	31 f6                	xor    esi,esi
c001d05c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d061:	74 11                	je     c001d074 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d063:	50                   	push   eax
c001d064:	50                   	push   eax
c001d065:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d06a:	50                   	push   eax
c001d06b:	53                   	push   ebx
c001d06c:	e8 af fb ff ff       	call   c001cc20 <ATA::flush(bool)>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	83 c4 2c             	add    esp,0x2c
c001d077:	89 f0                	mov    eax,esi
c001d079:	5b                   	pop    ebx
c001d07a:	5e                   	pop    esi
c001d07b:	5f                   	pop    edi
c001d07c:	5d                   	pop    ebp
c001d07d:	c3                   	ret    

c001d07e <ATA::detectCHS()>:
c001d07e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d082:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d088:	c1 e0 06             	shl    eax,0x6
c001d08b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d091:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d09b:	c7 44 24 04 d0 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232d0
c001d0a3:	e9 bf 44 ff ff       	jmp    c0011567 <KePanic(char const*)>

c001d0a8 <ATA::open(int, int, void*)>:
c001d0a8:	53                   	push   ebx
c001d0a9:	83 ec 08             	sub    esp,0x8
c001d0ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0b8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d0be:	c1 e0 06             	shl    eax,0x6
c001d0c1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d0c7:	01 d0                	add    eax,edx
c001d0c9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d0d0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d0d6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d0dd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d0e7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0ee:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0f4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0fb:	75 0c                	jne    c001d109 <ATA::open(int, int, void*)+0x61>
c001d0fd:	83 ec 0c             	sub    esp,0xc
c001d100:	53                   	push   ebx
c001d101:	e8 78 ff ff ff       	call   c001d07e <ATA::detectCHS()>
c001d106:	83 c4 10             	add    esp,0x10
c001d109:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d10f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d115:	c1 e0 06             	shl    eax,0x6
c001d118:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d11f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d129:	d1 e8                	shr    eax,1
c001d12b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d131:	6a 04                	push   0x4
c001d133:	6a 0c                	push   0xc
c001d135:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d13c:	50                   	push   eax
c001d13d:	52                   	push   edx
c001d13e:	e8 25 ec ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d143:	90                   	nop
c001d144:	90                   	nop
c001d145:	6a 00                	push   0x0
c001d147:	6a 0c                	push   0xc
c001d149:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d150:	50                   	push   eax
c001d151:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d157:	e8 0c ec ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d15c:	83 c4 14             	add    esp,0x14
c001d15f:	53                   	push   ebx
c001d160:	e8 71 fc fe ff       	call   c000cdd6 <PhysicalDisk::startCache()>
c001d165:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d168:	e8 b5 0e ff ff       	call   c000e022 <createPartitionsForDisk(PhysicalDisk*)>
c001d16d:	83 c4 18             	add    esp,0x18
c001d170:	31 c0                	xor    eax,eax
c001d172:	5b                   	pop    ebx
c001d173:	c3                   	ret    

c001d174 <combineCharAndColour(char, unsigned char)>:
c001d174:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d179:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d17f:	c1 e0 08             	shl    eax,0x8
c001d182:	09 d0                	or     eax,edx
c001d184:	c3                   	ret    

c001d185 <combineColours(unsigned char, unsigned char)>:
c001d185:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d18a:	c1 e0 04             	shl    eax,0x4
c001d18d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d191:	c3                   	ret    

c001d192 <ATA::read(unsigned long long, int, void*)>:
c001d192:	55                   	push   ebp
c001d193:	57                   	push   edi
c001d194:	56                   	push   esi
c001d195:	be 04 00 00 00       	mov    esi,0x4
c001d19a:	53                   	push   ebx
c001d19b:	83 ec 0c             	sub    esp,0xc
c001d19e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d1a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1aa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1ae:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d1b1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d1b7:	0f 87 a1 01 00 00    	ja     c001d35e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1bd:	85 c9                	test   ecx,ecx
c001d1bf:	be 06 00 00 00       	mov    esi,0x6
c001d1c4:	0f 84 94 01 00 00    	je     c001d35e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1ca:	55                   	push   ebp
c001d1cb:	55                   	push   ebp
c001d1cc:	6a 00                	push   0x0
c001d1ce:	51                   	push   ecx
c001d1cf:	53                   	push   ebx
c001d1d0:	52                   	push   edx
c001d1d1:	50                   	push   eax
c001d1d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1d6:	e8 df fa ff ff       	call   c001ccba <ATA::access(unsigned long long, int, void*, bool)>
c001d1db:	83 c4 20             	add    esp,0x20
c001d1de:	85 c0                	test   eax,eax
c001d1e0:	89 c6                	mov    esi,eax
c001d1e2:	0f 85 71 01 00 00    	jne    c001d359 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1e8:	50                   	push   eax
c001d1e9:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1ee:	50                   	push   eax
c001d1ef:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1f5:	6a 0f                	push   0xf
c001d1f7:	6a 00                	push   0x0
c001d1f9:	89 da                	mov    edx,ebx
c001d1fb:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d201:	e8 7f ff ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001d206:	59                   	pop    ecx
c001d207:	b9 0a 00 00 00       	mov    ecx,0xa
c001d20c:	5b                   	pop    ebx
c001d20d:	0f b6 d8             	movzx  ebx,al
c001d210:	89 d0                	mov    eax,edx
c001d212:	53                   	push   ebx
c001d213:	99                   	cdq    
c001d214:	f7 fd                	idiv   ebp
c001d216:	99                   	cdq    
c001d217:	f7 f9                	idiv   ecx
c001d219:	83 c2 30             	add    edx,0x30
c001d21c:	0f b6 d2             	movzx  edx,dl
c001d21f:	52                   	push   edx
c001d220:	e8 4f ff ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d225:	5f                   	pop    edi
c001d226:	bf e8 03 00 00       	mov    edi,0x3e8
c001d22b:	5a                   	pop    edx
c001d22c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d232:	53                   	push   ebx
c001d233:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d238:	99                   	cdq    
c001d239:	f7 ff                	idiv   edi
c001d23b:	99                   	cdq    
c001d23c:	f7 f9                	idiv   ecx
c001d23e:	8d 42 30             	lea    eax,[edx+0x30]
c001d241:	0f b6 c0             	movzx  eax,al
c001d244:	50                   	push   eax
c001d245:	e8 2a ff ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d24a:	5f                   	pop    edi
c001d24b:	bf 64 00 00 00       	mov    edi,0x64
c001d250:	5a                   	pop    edx
c001d251:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d257:	53                   	push   ebx
c001d258:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d25d:	99                   	cdq    
c001d25e:	f7 ff                	idiv   edi
c001d260:	99                   	cdq    
c001d261:	f7 f9                	idiv   ecx
c001d263:	8d 42 30             	lea    eax,[edx+0x30]
c001d266:	0f b6 c0             	movzx  eax,al
c001d269:	50                   	push   eax
c001d26a:	e8 05 ff ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d26f:	5a                   	pop    edx
c001d270:	5a                   	pop    edx
c001d271:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d277:	53                   	push   ebx
c001d278:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d27d:	99                   	cdq    
c001d27e:	f7 f9                	idiv   ecx
c001d280:	99                   	cdq    
c001d281:	f7 f9                	idiv   ecx
c001d283:	8d 42 30             	lea    eax,[edx+0x30]
c001d286:	0f b6 c0             	movzx  eax,al
c001d289:	50                   	push   eax
c001d28a:	e8 e5 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d28f:	5a                   	pop    edx
c001d290:	5a                   	pop    edx
c001d291:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d297:	53                   	push   ebx
c001d298:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d29d:	99                   	cdq    
c001d29e:	f7 f9                	idiv   ecx
c001d2a0:	83 c2 30             	add    edx,0x30
c001d2a3:	0f b6 d2             	movzx  edx,dl
c001d2a6:	52                   	push   edx
c001d2a7:	e8 c8 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d2ac:	5a                   	pop    edx
c001d2ad:	5a                   	pop    edx
c001d2ae:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2b4:	53                   	push   ebx
c001d2b5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2ba:	99                   	cdq    
c001d2bb:	f7 fd                	idiv   ebp
c001d2bd:	99                   	cdq    
c001d2be:	f7 f9                	idiv   ecx
c001d2c0:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c3:	0f b6 c0             	movzx  eax,al
c001d2c6:	50                   	push   eax
c001d2c7:	e8 a8 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d2cc:	5d                   	pop    ebp
c001d2cd:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d2d2:	5a                   	pop    edx
c001d2d3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2d9:	53                   	push   ebx
c001d2da:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2df:	99                   	cdq    
c001d2e0:	f7 fd                	idiv   ebp
c001d2e2:	99                   	cdq    
c001d2e3:	f7 f9                	idiv   ecx
c001d2e5:	8d 42 30             	lea    eax,[edx+0x30]
c001d2e8:	0f b6 c0             	movzx  eax,al
c001d2eb:	50                   	push   eax
c001d2ec:	e8 83 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d2f1:	5d                   	pop    ebp
c001d2f2:	5a                   	pop    edx
c001d2f3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2f9:	53                   	push   ebx
c001d2fa:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2ff:	99                   	cdq    
c001d300:	f7 ff                	idiv   edi
c001d302:	99                   	cdq    
c001d303:	f7 f9                	idiv   ecx
c001d305:	8d 42 30             	lea    eax,[edx+0x30]
c001d308:	0f b6 c0             	movzx  eax,al
c001d30b:	50                   	push   eax
c001d30c:	e8 63 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d311:	5f                   	pop    edi
c001d312:	5d                   	pop    ebp
c001d313:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d319:	53                   	push   ebx
c001d31a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d31f:	99                   	cdq    
c001d320:	f7 f9                	idiv   ecx
c001d322:	99                   	cdq    
c001d323:	f7 f9                	idiv   ecx
c001d325:	8d 42 30             	lea    eax,[edx+0x30]
c001d328:	0f b6 c0             	movzx  eax,al
c001d32b:	50                   	push   eax
c001d32c:	e8 43 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d331:	5a                   	pop    edx
c001d332:	5f                   	pop    edi
c001d333:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d339:	53                   	push   ebx
c001d33a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d33f:	99                   	cdq    
c001d340:	f7 f9                	idiv   ecx
c001d342:	83 c2 30             	add    edx,0x30
c001d345:	0f b6 d2             	movzx  edx,dl
c001d348:	52                   	push   edx
c001d349:	e8 26 fe ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d34e:	83 c4 10             	add    esp,0x10
c001d351:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d357:	eb 05                	jmp    c001d35e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d359:	be 01 00 00 00       	mov    esi,0x1
c001d35e:	83 c4 0c             	add    esp,0xc
c001d361:	89 f0                	mov    eax,esi
c001d363:	5b                   	pop    ebx
c001d364:	5e                   	pop    esi
c001d365:	5f                   	pop    edi
c001d366:	5d                   	pop    ebp
c001d367:	c3                   	ret    

c001d368 <ATA::write(unsigned long long, int, void*)>:
c001d368:	55                   	push   ebp
c001d369:	57                   	push   edi
c001d36a:	56                   	push   esi
c001d36b:	be 04 00 00 00       	mov    esi,0x4
c001d370:	53                   	push   ebx
c001d371:	83 ec 0c             	sub    esp,0xc
c001d374:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d378:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d37c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d380:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d384:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d387:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d38d:	0f 87 9c 01 00 00    	ja     c001d52f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d393:	85 c9                	test   ecx,ecx
c001d395:	be 06 00 00 00       	mov    esi,0x6
c001d39a:	0f 84 8f 01 00 00    	je     c001d52f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d3a0:	55                   	push   ebp
c001d3a1:	55                   	push   ebp
c001d3a2:	6a 01                	push   0x1
c001d3a4:	51                   	push   ecx
c001d3a5:	53                   	push   ebx
c001d3a6:	52                   	push   edx
c001d3a7:	50                   	push   eax
c001d3a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3ac:	e8 09 f9 ff ff       	call   c001ccba <ATA::access(unsigned long long, int, void*, bool)>
c001d3b1:	83 c4 20             	add    esp,0x20
c001d3b4:	85 c0                	test   eax,eax
c001d3b6:	89 c6                	mov    esi,eax
c001d3b8:	0f 85 6c 01 00 00    	jne    c001d52a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d3be:	50                   	push   eax
c001d3bf:	bd 10 27 00 00       	mov    ebp,0x2710
c001d3c4:	50                   	push   eax
c001d3c5:	6a 0f                	push   0xf
c001d3c7:	6a 00                	push   0x0
c001d3c9:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d3cf:	e8 b1 fd ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001d3d4:	5a                   	pop    edx
c001d3d5:	59                   	pop    ecx
c001d3d6:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3db:	0f b6 d8             	movzx  ebx,al
c001d3de:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3e3:	53                   	push   ebx
c001d3e4:	99                   	cdq    
c001d3e5:	f7 fd                	idiv   ebp
c001d3e7:	99                   	cdq    
c001d3e8:	f7 f9                	idiv   ecx
c001d3ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ed:	0f b6 c0             	movzx  eax,al
c001d3f0:	50                   	push   eax
c001d3f1:	e8 7e fd ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d3f6:	5f                   	pop    edi
c001d3f7:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3fc:	5a                   	pop    edx
c001d3fd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d403:	53                   	push   ebx
c001d404:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d409:	99                   	cdq    
c001d40a:	f7 ff                	idiv   edi
c001d40c:	99                   	cdq    
c001d40d:	f7 f9                	idiv   ecx
c001d40f:	8d 42 30             	lea    eax,[edx+0x30]
c001d412:	0f b6 c0             	movzx  eax,al
c001d415:	50                   	push   eax
c001d416:	e8 59 fd ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d41b:	5f                   	pop    edi
c001d41c:	bf 64 00 00 00       	mov    edi,0x64
c001d421:	5a                   	pop    edx
c001d422:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d428:	53                   	push   ebx
c001d429:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d42e:	99                   	cdq    
c001d42f:	f7 ff                	idiv   edi
c001d431:	99                   	cdq    
c001d432:	f7 f9                	idiv   ecx
c001d434:	8d 42 30             	lea    eax,[edx+0x30]
c001d437:	0f b6 c0             	movzx  eax,al
c001d43a:	50                   	push   eax
c001d43b:	e8 34 fd ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d440:	5a                   	pop    edx
c001d441:	5a                   	pop    edx
c001d442:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d448:	53                   	push   ebx
c001d449:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d44e:	99                   	cdq    
c001d44f:	f7 f9                	idiv   ecx
c001d451:	99                   	cdq    
c001d452:	f7 f9                	idiv   ecx
c001d454:	8d 42 30             	lea    eax,[edx+0x30]
c001d457:	0f b6 c0             	movzx  eax,al
c001d45a:	50                   	push   eax
c001d45b:	e8 14 fd ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d460:	5a                   	pop    edx
c001d461:	5a                   	pop    edx
c001d462:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d468:	53                   	push   ebx
c001d469:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d46e:	99                   	cdq    
c001d46f:	f7 f9                	idiv   ecx
c001d471:	83 c2 30             	add    edx,0x30
c001d474:	0f b6 d2             	movzx  edx,dl
c001d477:	52                   	push   edx
c001d478:	e8 f7 fc ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d47d:	5a                   	pop    edx
c001d47e:	5a                   	pop    edx
c001d47f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d485:	53                   	push   ebx
c001d486:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d48b:	99                   	cdq    
c001d48c:	f7 fd                	idiv   ebp
c001d48e:	99                   	cdq    
c001d48f:	f7 f9                	idiv   ecx
c001d491:	8d 42 30             	lea    eax,[edx+0x30]
c001d494:	0f b6 c0             	movzx  eax,al
c001d497:	50                   	push   eax
c001d498:	e8 d7 fc ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d49d:	5d                   	pop    ebp
c001d49e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d4a3:	5a                   	pop    edx
c001d4a4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d4aa:	53                   	push   ebx
c001d4ab:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4b0:	99                   	cdq    
c001d4b1:	f7 fd                	idiv   ebp
c001d4b3:	99                   	cdq    
c001d4b4:	f7 f9                	idiv   ecx
c001d4b6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b9:	0f b6 c0             	movzx  eax,al
c001d4bc:	50                   	push   eax
c001d4bd:	e8 b2 fc ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d4c2:	5d                   	pop    ebp
c001d4c3:	5a                   	pop    edx
c001d4c4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d4ca:	53                   	push   ebx
c001d4cb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4d0:	99                   	cdq    
c001d4d1:	f7 ff                	idiv   edi
c001d4d3:	99                   	cdq    
c001d4d4:	f7 f9                	idiv   ecx
c001d4d6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4d9:	0f b6 c0             	movzx  eax,al
c001d4dc:	50                   	push   eax
c001d4dd:	e8 92 fc ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d4e2:	5f                   	pop    edi
c001d4e3:	5d                   	pop    ebp
c001d4e4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4ea:	53                   	push   ebx
c001d4eb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4f0:	99                   	cdq    
c001d4f1:	f7 f9                	idiv   ecx
c001d4f3:	99                   	cdq    
c001d4f4:	f7 f9                	idiv   ecx
c001d4f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4f9:	0f b6 c0             	movzx  eax,al
c001d4fc:	50                   	push   eax
c001d4fd:	e8 72 fc ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d502:	5a                   	pop    edx
c001d503:	5f                   	pop    edi
c001d504:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d50a:	53                   	push   ebx
c001d50b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d510:	99                   	cdq    
c001d511:	f7 f9                	idiv   ecx
c001d513:	83 c2 30             	add    edx,0x30
c001d516:	0f b6 d2             	movzx  edx,dl
c001d519:	52                   	push   edx
c001d51a:	e8 55 fc ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001d51f:	83 c4 10             	add    esp,0x10
c001d522:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d528:	eb 05                	jmp    c001d52f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d52a:	be 01 00 00 00       	mov    esi,0x1
c001d52f:	83 c4 0c             	add    esp,0xc
c001d532:	89 f0                	mov    eax,esi
c001d534:	5b                   	pop    ebx
c001d535:	5e                   	pop    esi
c001d536:	5f                   	pop    edi
c001d537:	5d                   	pop    ebp
c001d538:	c3                   	ret    
c001d539:	90                   	nop

c001d53a <ATAPI::write(unsigned long long, int, void*)>:
c001d53a:	b8 03 00 00 00       	mov    eax,0x3
c001d53f:	c3                   	ret    

c001d540 <ATAPI::close(int, int, void*)>:
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d547:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d54d:	85 c0                	test   eax,eax
c001d54f:	74 0c                	je     c001d55d <ATAPI::close(int, int, void*)+0x1d>
c001d551:	8b 10                	mov    edx,DWORD PTR [eax]
c001d553:	83 ec 0c             	sub    esp,0xc
c001d556:	50                   	push   eax
c001d557:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d55a:	83 c4 10             	add    esp,0x10
c001d55d:	31 c0                	xor    eax,eax
c001d55f:	83 c4 0c             	add    esp,0xc
c001d562:	c3                   	ret    
c001d563:	90                   	nop

c001d564 <ATAPI::ATAPI()>:
c001d564:	83 ec 0c             	sub    esp,0xc
c001d567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56b:	83 ec 04             	sub    esp,0x4
c001d56e:	68 00 08 00 00       	push   0x800
c001d573:	68 19 34 02 c0       	push   0xc0023419
c001d578:	50                   	push   eax
c001d579:	e8 f0 f7 fe ff       	call   c000cd6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	ba 34 33 02 c0       	mov    edx,0xc0023334
c001d586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58a:	89 10                	mov    DWORD PTR [eax],edx
c001d58c:	90                   	nop
c001d58d:	83 c4 0c             	add    esp,0xc
c001d590:	c3                   	ret    
c001d591:	90                   	nop

c001d592 <ATAPI::readyForCommand()>:
c001d592:	56                   	push   esi
c001d593:	53                   	push   ebx
c001d594:	53                   	push   ebx
c001d595:	31 db                	xor    ebx,ebx
c001d597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d59b:	51                   	push   ecx
c001d59c:	6a 0c                	push   0xc
c001d59e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5a5:	50                   	push   eax
c001d5a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5ac:	e8 77 e8 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	a8 88                	test   al,0x88
c001d5b6:	74 25                	je     c001d5dd <ATAPI::readyForCommand()+0x4b>
c001d5b8:	43                   	inc    ebx
c001d5b9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d5bf:	7e da                	jle    c001d59b <ATAPI::readyForCommand()+0x9>
c001d5c1:	83 ec 0c             	sub    esp,0xc
c001d5c4:	68 5e 01 00 00       	push   0x15e
c001d5c9:	e8 c6 8d ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001d5ce:	83 c4 10             	add    esp,0x10
c001d5d1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d5d7:	75 c2                	jne    c001d59b <ATAPI::readyForCommand()+0x9>
c001d5d9:	31 c0                	xor    eax,eax
c001d5db:	eb 02                	jmp    c001d5df <ATAPI::readyForCommand()+0x4d>
c001d5dd:	b0 01                	mov    al,0x1
c001d5df:	5a                   	pop    edx
c001d5e0:	5b                   	pop    ebx
c001d5e1:	5e                   	pop    esi
c001d5e2:	c3                   	ret    
c001d5e3:	90                   	nop

c001d5e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d5e4:	55                   	push   ebp
c001d5e5:	57                   	push   edi
c001d5e6:	56                   	push   esi
c001d5e7:	53                   	push   ebx
c001d5e8:	83 ec 20             	sub    esp,0x20
c001d5eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5f3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d5f7:	6a 01                	push   0x1
c001d5f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d600:	50                   	push   eax
c001d601:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d607:	e8 6a e9 ff ff       	call   c001bf76 <IDE::enableIRQs(unsigned char, bool)>
c001d60c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d613:	59                   	pop    ecx
c001d614:	5e                   	pop    esi
c001d615:	50                   	push   eax
c001d616:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d61c:	e8 21 e7 ff ff       	call   c001bd42 <IDE::prepareInterrupt(unsigned char)>
c001d621:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d624:	e8 69 ff ff ff       	call   c001d592 <ATAPI::readyForCommand()>
c001d629:	83 c4 10             	add    esp,0x10
c001d62c:	84 c0                	test   al,al
c001d62e:	75 0a                	jne    c001d63a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d630:	bb 01 00 00 00       	mov    ebx,0x1
c001d635:	e9 5f 02 00 00       	jmp    c001d899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d63a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d640:	c1 e0 04             	shl    eax,0x4
c001d643:	0f b6 c0             	movzx  eax,al
c001d646:	50                   	push   eax
c001d647:	6a 06                	push   0x6
c001d649:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d650:	50                   	push   eax
c001d651:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d657:	e8 0c e7 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d65c:	6a 00                	push   0x0
c001d65e:	6a 01                	push   0x1
c001d660:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d667:	50                   	push   eax
c001d668:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d66e:	e8 f5 e6 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d673:	83 c4 20             	add    esp,0x20
c001d676:	0f b6 c3             	movzx  eax,bl
c001d679:	50                   	push   eax
c001d67a:	0f b6 df             	movzx  ebx,bh
c001d67d:	6a 04                	push   0x4
c001d67f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d686:	50                   	push   eax
c001d687:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d68d:	e8 d6 e6 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d692:	53                   	push   ebx
c001d693:	6a 05                	push   0x5
c001d695:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d69c:	50                   	push   eax
c001d69d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a3:	e8 c0 e6 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a8:	83 c4 20             	add    esp,0x20
c001d6ab:	68 a0 00 00 00       	push   0xa0
c001d6b0:	6a 07                	push   0x7
c001d6b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b9:	50                   	push   eax
c001d6ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c0:	e8 a3 e6 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6c5:	83 c4 0c             	add    esp,0xc
c001d6c8:	6a 01                	push   0x1
c001d6ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6d1:	50                   	push   eax
c001d6d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d8:	e8 6f f1 ff ff       	call   c001c84c <IDE::polling(unsigned char, unsigned int)>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	0f b6 d8             	movzx  ebx,al
c001d6e3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6e9:	85 db                	test   ebx,ebx
c001d6eb:	74 20                	je     c001d70d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d6ed:	53                   	push   ebx
c001d6ee:	0f b6 c0             	movzx  eax,al
c001d6f1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6f8:	52                   	push   edx
c001d6f9:	50                   	push   eax
c001d6fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d700:	e8 8d f0 ff ff       	call   c001c792 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d705:	83 c4 10             	add    esp,0x10
c001d708:	e9 8c 01 00 00       	jmp    c001d899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d70d:	52                   	push   edx
c001d70e:	0f b6 c0             	movzx  eax,al
c001d711:	52                   	push   edx
c001d712:	50                   	push   eax
c001d713:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d719:	e8 38 e6 ff ff       	call   c001bd56 <IDE::getBase(unsigned char)>
c001d71e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d722:	b9 06 00 00 00       	mov    ecx,0x6
c001d727:	89 c2                	mov    edx,eax
c001d729:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d72c:	89 e8                	mov    eax,ebp
c001d72e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	0f b6 c0             	movzx  eax,al
c001d738:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d73c:	85 db                	test   ebx,ebx
c001d73e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d744:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d74b:	0f 84 eb 00 00 00    	je     c001d83c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d751:	55                   	push   ebp
c001d752:	55                   	push   ebp
c001d753:	52                   	push   edx
c001d754:	50                   	push   eax
c001d755:	e8 82 e7 ff ff       	call   c001bedc <IDE::waitInterrupt(unsigned char)>
c001d75a:	83 c4 10             	add    esp,0x10
c001d75d:	84 c0                	test   al,al
c001d75f:	0f 84 cb fe ff ff    	je     c001d630 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d765:	56                   	push   esi
c001d766:	56                   	push   esi
c001d767:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d76e:	50                   	push   eax
c001d76f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d775:	e8 c8 e5 ff ff       	call   c001bd42 <IDE::prepareInterrupt(unsigned char)>
c001d77a:	83 c4 0c             	add    esp,0xc
c001d77d:	6a 04                	push   0x4
c001d77f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d786:	50                   	push   eax
c001d787:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d78d:	e8 96 e6 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001d792:	83 c4 0c             	add    esp,0xc
c001d795:	6a 05                	push   0x5
c001d797:	89 c6                	mov    esi,eax
c001d799:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7a0:	50                   	push   eax
c001d7a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a7:	e8 7c e6 ff ff       	call   c001be28 <IDE::read(unsigned char, unsigned char)>
c001d7ac:	83 c4 10             	add    esp,0x10
c001d7af:	0f b6 e8             	movzx  ebp,al
c001d7b2:	89 f0                	mov    eax,esi
c001d7b4:	c1 e5 08             	shl    ebp,0x8
c001d7b7:	0f b6 f0             	movzx  esi,al
c001d7ba:	09 f5                	or     ebp,esi
c001d7bc:	31 f6                	xor    esi,esi
c001d7be:	d1 fd                	sar    ebp,1
c001d7c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d7c5:	74 5c                	je     c001d823 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d7c7:	39 ee                	cmp    esi,ebp
c001d7c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7d6:	75 0d                	jne    c001d7e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d7d8:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d7db:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d7df:	4b                   	dec    ebx
c001d7e0:	e9 57 ff ff ff       	jmp    c001d73c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d7e5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d7e9:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d7ed:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d7f2:	51                   	push   ecx
c001d7f3:	51                   	push   ecx
c001d7f4:	52                   	push   edx
c001d7f5:	50                   	push   eax
c001d7f6:	e8 5b e5 ff ff       	call   c001bd56 <IDE::getBase(unsigned char)>
c001d7fb:	89 c2                	mov    edx,eax
c001d7fd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d802:	66 ef                	out    dx,ax
c001d804:	46                   	inc    esi
c001d805:	83 c4 10             	add    esp,0x10
c001d808:	eb bd                	jmp    c001d7c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d80a:	51                   	push   ecx
c001d80b:	51                   	push   ecx
c001d80c:	52                   	push   edx
c001d80d:	50                   	push   eax
c001d80e:	e8 43 e5 ff ff       	call   c001bd56 <IDE::getBase(unsigned char)>
c001d813:	89 c2                	mov    edx,eax
c001d815:	66 ed                	in     ax,dx
c001d817:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d81b:	83 c4 10             	add    esp,0x10
c001d81e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d822:	46                   	inc    esi
c001d823:	39 ee                	cmp    esi,ebp
c001d825:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d82b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d832:	75 d6                	jne    c001d80a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d834:	01 f6                	add    esi,esi
c001d836:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d83a:	eb a3                	jmp    c001d7df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d83c:	51                   	push   ecx
c001d83d:	51                   	push   ecx
c001d83e:	52                   	push   edx
c001d83f:	50                   	push   eax
c001d840:	e8 97 e6 ff ff       	call   c001bedc <IDE::waitInterrupt(unsigned char)>
c001d845:	83 c4 10             	add    esp,0x10
c001d848:	84 c0                	test   al,al
c001d84a:	0f 84 e0 fd ff ff    	je     c001d630 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d850:	52                   	push   edx
c001d851:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d856:	52                   	push   edx
c001d857:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d85e:	50                   	push   eax
c001d85f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d865:	e8 d8 e4 ff ff       	call   c001bd42 <IDE::prepareInterrupt(unsigned char)>
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	50                   	push   eax
c001d86e:	50                   	push   eax
c001d86f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d876:	50                   	push   eax
c001d877:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d87d:	e8 d4 e4 ff ff       	call   c001bd56 <IDE::getBase(unsigned char)>
c001d882:	8d 50 07             	lea    edx,[eax+0x7]
c001d885:	ec                   	in     al,dx
c001d886:	83 c4 10             	add    esp,0x10
c001d889:	a8 88                	test   al,0x88
c001d88b:	74 0a                	je     c001d897 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d88d:	4b                   	dec    ebx
c001d88e:	75 dd                	jne    c001d86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d890:	bb 02 00 00 00       	mov    ebx,0x2
c001d895:	eb 02                	jmp    c001d899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d897:	31 db                	xor    ebx,ebx
c001d899:	83 c4 1c             	add    esp,0x1c
c001d89c:	89 d8                	mov    eax,ebx
c001d89e:	5b                   	pop    ebx
c001d89f:	5e                   	pop    esi
c001d8a0:	5f                   	pop    edi
c001d8a1:	5d                   	pop    ebp
c001d8a2:	c3                   	ret    
c001d8a3:	90                   	nop

c001d8a4 <ATAPI::diskRemoved()>:
c001d8a4:	53                   	push   ebx
c001d8a5:	83 ec 14             	sub    esp,0x14
c001d8a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d8ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d8b3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d8b9:	e8 52 04 ff ff       	call   c000dd10 <LogicalDisk::unmount()>
c001d8be:	58                   	pop    eax
c001d8bf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d8c5:	e8 2a 0e ff ff       	call   c000e6f4 <VCache::writeWriteBuffer()>
c001d8ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d8d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8d4:	83 c4 18             	add    esp,0x18
c001d8d7:	5b                   	pop    ebx
c001d8d8:	e9 07 0e ff ff       	jmp    c000e6e4 <VCache::invalidateReadBuffer()>
c001d8dd:	90                   	nop

c001d8de <ATAPI::eject()>:
c001d8de:	57                   	push   edi
c001d8df:	b9 03 00 00 00       	mov    ecx,0x3
c001d8e4:	53                   	push   ebx
c001d8e5:	83 ec 14             	sub    esp,0x14
c001d8e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8f0:	fc                   	cld    
c001d8f1:	31 c0                	xor    eax,eax
c001d8f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8f5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8fa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8ff:	50                   	push   eax
c001d900:	50                   	push   eax
c001d901:	6a 00                	push   0x0
c001d903:	6a 00                	push   0x0
c001d905:	6a 00                	push   0x0
c001d907:	6a 02                	push   0x2
c001d909:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d90d:	50                   	push   eax
c001d90e:	53                   	push   ebx
c001d90f:	e8 d0 fc ff ff       	call   c001d5e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d914:	83 c4 14             	add    esp,0x14
c001d917:	53                   	push   ebx
c001d918:	e8 87 ff ff ff       	call   c001d8a4 <ATAPI::diskRemoved()>
c001d91d:	83 c4 24             	add    esp,0x24
c001d920:	31 c0                	xor    eax,eax
c001d922:	5b                   	pop    ebx
c001d923:	5f                   	pop    edi
c001d924:	c3                   	ret    
c001d925:	90                   	nop

c001d926 <ATAPI::diskInserted()>:
c001d926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d92a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d931:	c3                   	ret    

c001d932 <ATAPI::detectMedia()>:
c001d932:	56                   	push   esi
c001d933:	53                   	push   ebx
c001d934:	83 ec 28             	sub    esp,0x28
c001d937:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d93b:	6a 0c                	push   0xc
c001d93d:	6a 00                	push   0x0
c001d93f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d943:	56                   	push   esi
c001d944:	e8 a7 2b fe ff       	call   c00004f0 <memset>
c001d949:	58                   	pop    eax
c001d94a:	5a                   	pop    edx
c001d94b:	6a 00                	push   0x0
c001d94d:	6a 00                	push   0x0
c001d94f:	6a 00                	push   0x0
c001d951:	6a 00                	push   0x0
c001d953:	56                   	push   esi
c001d954:	53                   	push   ebx
c001d955:	e8 8a fc ff ff       	call   c001d5e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d95a:	83 c4 1c             	add    esp,0x1c
c001d95d:	6a 0c                	push   0xc
c001d95f:	6a 00                	push   0x0
c001d961:	56                   	push   esi
c001d962:	e8 89 2b fe ff       	call   c00004f0 <memset>
c001d967:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d96c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d971:	59                   	pop    ecx
c001d972:	58                   	pop    eax
c001d973:	6a 01                	push   0x1
c001d975:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d979:	50                   	push   eax
c001d97a:	6a 00                	push   0x0
c001d97c:	6a 12                	push   0x12
c001d97e:	56                   	push   esi
c001d97f:	53                   	push   ebx
c001d980:	e8 5f fc ff ff       	call   c001d5e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d985:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d989:	83 c4 20             	add    esp,0x20
c001d98c:	83 e0 7f             	and    eax,0x7f
c001d98f:	83 f8 70             	cmp    eax,0x70
c001d992:	74 15                	je     c001d9a9 <ATAPI::detectMedia()+0x77>
c001d994:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d99b:	75 0c                	jne    c001d9a9 <ATAPI::detectMedia()+0x77>
c001d99d:	83 ec 0c             	sub    esp,0xc
c001d9a0:	53                   	push   ebx
c001d9a1:	e8 80 ff ff ff       	call   c001d926 <ATAPI::diskInserted()>
c001d9a6:	83 c4 10             	add    esp,0x10
c001d9a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d9ad:	83 e0 0f             	and    eax,0xf
c001d9b0:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d9b5:	0f b6 c0             	movzx  eax,al
c001d9b8:	75 19                	jne    c001d9d3 <ATAPI::detectMedia()+0xa1>
c001d9ba:	83 f8 02             	cmp    eax,0x2
c001d9bd:	75 14                	jne    c001d9d3 <ATAPI::detectMedia()+0xa1>
c001d9bf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9c6:	74 24                	je     c001d9ec <ATAPI::detectMedia()+0xba>
c001d9c8:	83 ec 0c             	sub    esp,0xc
c001d9cb:	53                   	push   ebx
c001d9cc:	e8 d3 fe ff ff       	call   c001d8a4 <ATAPI::diskRemoved()>
c001d9d1:	eb 16                	jmp    c001d9e9 <ATAPI::detectMedia()+0xb7>
c001d9d3:	85 c0                	test   eax,eax
c001d9d5:	75 15                	jne    c001d9ec <ATAPI::detectMedia()+0xba>
c001d9d7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9de:	75 0c                	jne    c001d9ec <ATAPI::detectMedia()+0xba>
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	53                   	push   ebx
c001d9e4:	e8 3d ff ff ff       	call   c001d926 <ATAPI::diskInserted()>
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	83 c4 24             	add    esp,0x24
c001d9ef:	5b                   	pop    ebx
c001d9f0:	5e                   	pop    esi
c001d9f1:	c3                   	ret    

c001d9f2 <ATAPI::open(int, int, void*)>:
c001d9f2:	56                   	push   esi
c001d9f3:	53                   	push   ebx
c001d9f4:	50                   	push   eax
c001d9f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da01:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da07:	c1 e0 06             	shl    eax,0x6
c001da0a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da10:	01 d0                	add    eax,edx
c001da12:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da19:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da1f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da26:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da30:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da3d:	6a 04                	push   0x4
c001da3f:	6a 0c                	push   0xc
c001da41:	51                   	push   ecx
c001da42:	52                   	push   edx
c001da43:	e8 20 e3 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da48:	90                   	nop
c001da49:	90                   	nop
c001da4a:	6a 00                	push   0x0
c001da4c:	6a 0c                	push   0xc
c001da4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da55:	50                   	push   eax
c001da56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da5c:	e8 07 e3 ff ff       	call   c001bd68 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da61:	83 c4 14             	add    esp,0x14
c001da64:	68 78 01 00 00       	push   0x178
c001da69:	e8 65 a0 fe ff       	call   c0007ad3 <malloc>
c001da6e:	83 c4 0c             	add    esp,0xc
c001da71:	6a 00                	push   0x0
c001da73:	68 ff ff ff 7f       	push   0x7fffffff
c001da78:	6a 00                	push   0x0
c001da7a:	6a 00                	push   0x0
c001da7c:	53                   	push   ebx
c001da7d:	68 cb 34 02 c0       	push   0xc00234cb
c001da82:	89 c6                	mov    esi,eax
c001da84:	50                   	push   eax
c001da85:	e8 c4 00 ff ff       	call   c000db4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da8a:	83 c4 14             	add    esp,0x14
c001da8d:	56                   	push   esi
c001da8e:	e8 7b 01 ff ff       	call   c000dc0e <LogicalDisk::assignDriveLetter()>
c001da93:	5a                   	pop    edx
c001da94:	59                   	pop    ecx
c001da95:	0f be c0             	movsx  eax,al
c001da98:	50                   	push   eax
c001da99:	68 1c 33 02 c0       	push   0xc002331c
c001da9e:	e8 67 ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001daa3:	58                   	pop    eax
c001daa4:	5a                   	pop    edx
c001daa5:	56                   	push   esi
c001daa6:	53                   	push   ebx
c001daa7:	e8 f4 ee fe ff       	call   c000c9a0 <Device::addChild(Device*)>
c001daac:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001dab2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dab5:	e8 1c f3 fe ff       	call   c000cdd6 <PhysicalDisk::startCache()>
c001daba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dac1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dac4:	e8 69 fe ff ff       	call   c001d932 <ATAPI::detectMedia()>
c001dac9:	83 c4 14             	add    esp,0x14
c001dacc:	31 c0                	xor    eax,eax
c001dace:	5b                   	pop    ebx
c001dacf:	5e                   	pop    esi
c001dad0:	c3                   	ret    
c001dad1:	90                   	nop

c001dad2 <ATAPI::read(unsigned long long, int, void*)>:
c001dad2:	55                   	push   ebp
c001dad3:	57                   	push   edi
c001dad4:	56                   	push   esi
c001dad5:	53                   	push   ebx
c001dad6:	83 ec 1c             	sub    esp,0x1c
c001dad9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dadd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dae1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dae5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daec:	74 3c                	je     c001db2a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001daee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001daf2:	b9 03 00 00 00       	mov    ecx,0x3
c001daf7:	fc                   	cld    
c001daf8:	31 c0                	xor    eax,eax
c001dafa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dafc:	89 e8                	mov    eax,ebp
c001dafe:	0f ce                	bswap  esi
c001db00:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db04:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db09:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db0d:	50                   	push   eax
c001db0e:	50                   	push   eax
c001db0f:	55                   	push   ebp
c001db10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db14:	c1 e5 0b             	shl    ebp,0xb
c001db17:	6a 00                	push   0x0
c001db19:	55                   	push   ebp
c001db1a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db1e:	50                   	push   eax
c001db1f:	53                   	push   ebx
c001db20:	e8 bf fa ff ff       	call   c001d5e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db25:	83 c4 20             	add    esp,0x20
c001db28:	eb 1a                	jmp    c001db44 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db2a:	83 ec 0c             	sub    esp,0xc
c001db2d:	53                   	push   ebx
c001db2e:	e8 ff fd ff ff       	call   c001d932 <ATAPI::detectMedia()>
c001db33:	83 c4 10             	add    esp,0x10
c001db36:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db3d:	75 af                	jne    c001daee <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db3f:	b8 02 00 00 00       	mov    eax,0x2
c001db44:	83 c4 1c             	add    esp,0x1c
c001db47:	5b                   	pop    ebx
c001db48:	5e                   	pop    esi
c001db49:	5f                   	pop    edi
c001db4a:	5d                   	pop    ebp
c001db4b:	c3                   	ret    

c001db4c <SATA::close(int, int, void*)>:
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db59:	85 c0                	test   eax,eax
c001db5b:	74 0c                	je     c001db69 <SATA::close(int, int, void*)+0x1d>
c001db5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001db5f:	83 ec 0c             	sub    esp,0xc
c001db62:	50                   	push   eax
c001db63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	31 c0                	xor    eax,eax
c001db6b:	83 c4 0c             	add    esp,0xc
c001db6e:	c3                   	ret    
c001db6f:	90                   	nop

c001db70 <SATA::powerSaving(PowerSavingLevel)>:
c001db70:	c3                   	ret    
c001db71:	90                   	nop

c001db72 <SATA::open(int, int, void*)>:
c001db72:	56                   	push   esi
c001db73:	53                   	push   ebx
c001db74:	50                   	push   eax
c001db75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db7d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db87:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db91:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db9b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dba5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbac:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dbb2:	e8 2b a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dbb7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dbbd:	89 c6                	mov    esi,eax
c001dbbf:	e8 1e a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001dbc4:	81 c6 00 10 00 00    	add    esi,0x1000
c001dbca:	39 c6                	cmp    esi,eax
c001dbcc:	74 10                	je     c001dbde <SATA::open(int, int, void*)+0x6c>
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	68 64 33 02 c0       	push   0xc0023364
c001dbd6:	e8 8c 39 ff ff       	call   c0011567 <KePanic(char const*)>
c001dbdb:	83 c4 10             	add    esp,0x10
c001dbde:	83 ec 0c             	sub    esp,0xc
c001dbe1:	6a 02                	push   0x2
c001dbe3:	e8 0d ba fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001dbe8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbee:	6a 03                	push   0x3
c001dbf0:	50                   	push   eax
c001dbf1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbf7:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbfd:	e8 fc c0 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc02:	83 c4 14             	add    esp,0x14
c001dc05:	53                   	push   ebx
c001dc06:	e8 cb f1 fe ff       	call   c000cdd6 <PhysicalDisk::startCache()>
c001dc0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc0e:	e8 0f 04 ff ff       	call   c000e022 <createPartitionsForDisk(PhysicalDisk*)>
c001dc13:	83 c4 14             	add    esp,0x14
c001dc16:	31 c0                	xor    eax,eax
c001dc18:	5b                   	pop    ebx
c001dc19:	5e                   	pop    esi
c001dc1a:	c3                   	ret    
c001dc1b:	90                   	nop

c001dc1c <SATA::SATA()>:
c001dc1c:	83 ec 0c             	sub    esp,0xc
c001dc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc23:	83 ec 04             	sub    esp,0x4
c001dc26:	68 00 02 00 00       	push   0x200
c001dc2b:	68 78 33 02 c0       	push   0xc0023378
c001dc30:	50                   	push   eax
c001dc31:	e8 38 f1 fe ff       	call   c000cd6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc36:	83 c4 10             	add    esp,0x10
c001dc39:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c001dc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc42:	89 10                	mov    DWORD PTR [eax],edx
c001dc44:	90                   	nop
c001dc45:	83 c4 0c             	add    esp,0xc
c001dc48:	c3                   	ret    
c001dc49:	90                   	nop

c001dc4a <SATA::access(unsigned long long, int, void*, bool)>:
c001dc4a:	55                   	push   ebp
c001dc4b:	57                   	push   edi
c001dc4c:	56                   	push   esi
c001dc4d:	53                   	push   ebx
c001dc4e:	83 ec 2c             	sub    esp,0x2c
c001dc51:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc55:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc62:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc6a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc72:	7e 10                	jle    c001dc84 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dc74:	83 ec 0c             	sub    esp,0xc
c001dc77:	68 88 33 02 c0       	push   0xc0023388
c001dc7c:	e8 e6 38 ff ff       	call   c0011567 <KePanic(char const*)>
c001dc81:	83 c4 10             	add    esp,0x10
c001dc84:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc8a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dc90:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dc96:	89 e8                	mov    eax,ebp
c001dc98:	c1 e0 07             	shl    eax,0x7
c001dc9b:	01 d0                	add    eax,edx
c001dc9d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dca7:	8d 45 02             	lea    eax,[ebp+0x2]
c001dcaa:	51                   	push   ecx
c001dcab:	c1 e0 07             	shl    eax,0x7
c001dcae:	51                   	push   ecx
c001dcaf:	01 d0                	add    eax,edx
c001dcb1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dcb5:	50                   	push   eax
c001dcb6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dcbc:	e8 6b ec ff ff       	call   c001c92c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dcc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dcc5:	83 c4 10             	add    esp,0x10
c001dcc8:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dccd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcd1:	0f 84 5b 01 00 00    	je     c001de32 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dcd7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dcdb:	c1 e0 09             	shl    eax,0x9
c001dcde:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dce3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dce7:	74 0e                	je     c001dcf7 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dce9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dcef:	89 c1                	mov    ecx,eax
c001dcf1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dcf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcf7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcfb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd01:	8d 45 02             	lea    eax,[ebp+0x2]
c001dd04:	c1 e0 07             	shl    eax,0x7
c001dd07:	01 d0                	add    eax,edx
c001dd09:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd0b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd11:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd1b:	c1 e1 05             	shl    ecx,0x5
c001dd1e:	01 c8                	add    eax,ecx
c001dd20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd24:	83 e1 01             	and    ecx,0x1
c001dd27:	89 ce                	mov    esi,ecx
c001dd29:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd2b:	c1 e6 06             	shl    esi,0x6
c001dd2e:	83 e1 bf             	and    ecx,0xffffffbf
c001dd31:	09 f1                	or     ecx,esi
c001dd33:	88 08                	mov    BYTE PTR [eax],cl
c001dd35:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd37:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd3d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd43:	89 08                	mov    DWORD PTR [eax],ecx
c001dd45:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd4b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd51:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd57:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd5a:	50                   	push   eax
c001dd5b:	68 90 00 00 00       	push   0x90
c001dd60:	6a 00                	push   0x0
c001dd62:	56                   	push   esi
c001dd63:	e8 88 27 fe ff       	call   c00004f0 <memset>
c001dd68:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd6e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd78:	83 c4 10             	add    esp,0x10
c001dd7b:	48                   	dec    eax
c001dd7c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd81:	89 c1                	mov    ecx,eax
c001dd83:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd89:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd8e:	09 c8                	or     eax,ecx
c001dd90:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd96:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd9c:	83 c8 80             	or     eax,0xffffff80
c001dd9f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dda5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dda8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ddac:	25 00 7f 00 00       	and    eax,0x7f00
c001ddb1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ddb6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ddbb:	66 89 06             	mov    WORD PTR [esi],ax
c001ddbe:	b0 35                	mov    al,0x35
c001ddc0:	75 02                	jne    c001ddc4 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001ddc2:	b0 25                	mov    al,0x25
c001ddc4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ddc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddcb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ddcf:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ddd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddd7:	c1 e8 10             	shr    eax,0x10
c001ddda:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dde1:	c1 e8 18             	shr    eax,0x18
c001dde4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dde7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ddeb:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ddee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddf2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ddf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddf9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddfd:	89 ee                	mov    esi,ebp
c001ddff:	31 c0                	xor    eax,eax
c001de01:	c1 e6 07             	shl    esi,0x7
c001de04:	01 d6                	add    esi,edx
c001de06:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de0c:	80 e1 88             	and    cl,0x88
c001de0f:	74 0a                	je     c001de1b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de11:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de16:	74 0a                	je     c001de22 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de18:	40                   	inc    eax
c001de19:	eb eb                	jmp    c001de06 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de1b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de20:	75 17                	jne    c001de39 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de22:	83 ec 0c             	sub    esp,0xc
c001de25:	68 c1 33 02 c0       	push   0xc00233c1
c001de2a:	e8 db ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	b8 01 00 00 00       	mov    eax,0x1
c001de37:	eb 5b                	jmp    c001de94 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de39:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001de3d:	c1 e5 07             	shl    ebp,0x7
c001de40:	b8 01 00 00 00       	mov    eax,0x1
c001de45:	01 ea                	add    edx,ebp
c001de47:	d3 e0                	shl    eax,cl
c001de49:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de4f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de55:	85 c8                	test   eax,ecx
c001de57:	74 16                	je     c001de6f <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001de59:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de5f:	0f ba e1 1e          	bt     ecx,0x1e
c001de63:	73 ea                	jae    c001de4f <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001de65:	83 ec 0c             	sub    esp,0xc
c001de68:	68 cf 33 02 c0       	push   0xc00233cf
c001de6d:	eb bb                	jmp    c001de2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de6f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de75:	0f ba e0 1e          	bt     eax,0x1e
c001de79:	72 b7                	jb     c001de32 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de7b:	31 c0                	xor    eax,eax
c001de7d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de82:	75 10                	jne    c001de94 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de84:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de8a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de94:	83 c4 2c             	add    esp,0x2c
c001de97:	5b                   	pop    ebx
c001de98:	5e                   	pop    esi
c001de99:	5f                   	pop    edi
c001de9a:	5d                   	pop    ebp
c001de9b:	c3                   	ret    

c001de9c <SATA::read(unsigned long long, int, void*)>:
c001de9c:	55                   	push   ebp
c001de9d:	57                   	push   edi
c001de9e:	56                   	push   esi
c001de9f:	be 04 00 00 00       	mov    esi,0x4
c001dea4:	53                   	push   ebx
c001dea5:	83 ec 0c             	sub    esp,0xc
c001dea8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001deac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001deb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001deb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001deb8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001debb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dec1:	0f 87 1a 02 00 00    	ja     c001e0e1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dec7:	85 c9                	test   ecx,ecx
c001dec9:	be 06 00 00 00       	mov    esi,0x6
c001dece:	0f 84 0d 02 00 00    	je     c001e0e1 <SATA::read(unsigned long long, int, void*)+0x245>
c001ded4:	56                   	push   esi
c001ded5:	56                   	push   esi
c001ded6:	6a 00                	push   0x0
c001ded8:	51                   	push   ecx
c001ded9:	53                   	push   ebx
c001deda:	52                   	push   edx
c001dedb:	50                   	push   eax
c001dedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dee0:	e8 65 fd ff ff       	call   c001dc4a <SATA::access(unsigned long long, int, void*, bool)>
c001dee5:	83 c4 20             	add    esp,0x20
c001dee8:	85 c0                	test   eax,eax
c001deea:	89 c6                	mov    esi,eax
c001deec:	0f 85 ea 01 00 00    	jne    c001e0dc <SATA::read(unsigned long long, int, void*)+0x240>
c001def2:	50                   	push   eax
c001def3:	50                   	push   eax
c001def4:	6a 0f                	push   0xf
c001def6:	6a 00                	push   0x0
c001def8:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001defe:	bb 0a 00 00 00       	mov    ebx,0xa
c001df03:	e8 7d f2 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001df08:	5a                   	pop    edx
c001df09:	59                   	pop    ecx
c001df0a:	b9 10 27 00 00       	mov    ecx,0x2710
c001df0f:	0f b6 c0             	movzx  eax,al
c001df12:	50                   	push   eax
c001df13:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df18:	99                   	cdq    
c001df19:	f7 f9                	idiv   ecx
c001df1b:	99                   	cdq    
c001df1c:	f7 fb                	idiv   ebx
c001df1e:	8d 42 30             	lea    eax,[edx+0x30]
c001df21:	0f b6 c0             	movzx  eax,al
c001df24:	50                   	push   eax
c001df25:	e8 4a f2 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001df2a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df30:	5f                   	pop    edi
c001df31:	5d                   	pop    ebp
c001df32:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df37:	6a 0f                	push   0xf
c001df39:	6a 00                	push   0x0
c001df3b:	e8 45 f2 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001df40:	5a                   	pop    edx
c001df41:	59                   	pop    ecx
c001df42:	0f b6 c0             	movzx  eax,al
c001df45:	50                   	push   eax
c001df46:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df4b:	99                   	cdq    
c001df4c:	f7 fd                	idiv   ebp
c001df4e:	99                   	cdq    
c001df4f:	f7 fb                	idiv   ebx
c001df51:	8d 42 30             	lea    eax,[edx+0x30]
c001df54:	0f b6 c0             	movzx  eax,al
c001df57:	50                   	push   eax
c001df58:	e8 17 f2 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001df5d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df63:	5f                   	pop    edi
c001df64:	bf 64 00 00 00       	mov    edi,0x64
c001df69:	58                   	pop    eax
c001df6a:	6a 0f                	push   0xf
c001df6c:	6a 00                	push   0x0
c001df6e:	e8 12 f2 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001df73:	5a                   	pop    edx
c001df74:	59                   	pop    ecx
c001df75:	0f b6 c0             	movzx  eax,al
c001df78:	50                   	push   eax
c001df79:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df7e:	99                   	cdq    
c001df7f:	f7 ff                	idiv   edi
c001df81:	99                   	cdq    
c001df82:	f7 fb                	idiv   ebx
c001df84:	8d 42 30             	lea    eax,[edx+0x30]
c001df87:	0f b6 c0             	movzx  eax,al
c001df8a:	50                   	push   eax
c001df8b:	e8 e4 f1 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001df90:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df96:	58                   	pop    eax
c001df97:	5a                   	pop    edx
c001df98:	6a 0f                	push   0xf
c001df9a:	6a 00                	push   0x0
c001df9c:	e8 e4 f1 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001dfa1:	59                   	pop    ecx
c001dfa2:	5a                   	pop    edx
c001dfa3:	0f b6 c0             	movzx  eax,al
c001dfa6:	50                   	push   eax
c001dfa7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfac:	99                   	cdq    
c001dfad:	f7 fb                	idiv   ebx
c001dfaf:	99                   	cdq    
c001dfb0:	f7 fb                	idiv   ebx
c001dfb2:	8d 42 30             	lea    eax,[edx+0x30]
c001dfb5:	0f b6 c0             	movzx  eax,al
c001dfb8:	50                   	push   eax
c001dfb9:	e8 b6 f1 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001dfbe:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dfc4:	59                   	pop    ecx
c001dfc5:	58                   	pop    eax
c001dfc6:	6a 0f                	push   0xf
c001dfc8:	6a 00                	push   0x0
c001dfca:	e8 b6 f1 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001dfcf:	5a                   	pop    edx
c001dfd0:	59                   	pop    ecx
c001dfd1:	0f b6 c0             	movzx  eax,al
c001dfd4:	50                   	push   eax
c001dfd5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfda:	99                   	cdq    
c001dfdb:	f7 fb                	idiv   ebx
c001dfdd:	83 c2 30             	add    edx,0x30
c001dfe0:	0f b6 d2             	movzx  edx,dl
c001dfe3:	52                   	push   edx
c001dfe4:	e8 8b f1 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001dfe9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfef:	58                   	pop    eax
c001dff0:	5a                   	pop    edx
c001dff1:	6a 0f                	push   0xf
c001dff3:	6a 00                	push   0x0
c001dff5:	e8 8b f1 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001dffa:	59                   	pop    ecx
c001dffb:	b9 10 27 00 00       	mov    ecx,0x2710
c001e000:	5a                   	pop    edx
c001e001:	0f b6 c0             	movzx  eax,al
c001e004:	50                   	push   eax
c001e005:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e00a:	99                   	cdq    
c001e00b:	f7 f9                	idiv   ecx
c001e00d:	99                   	cdq    
c001e00e:	f7 fb                	idiv   ebx
c001e010:	8d 42 30             	lea    eax,[edx+0x30]
c001e013:	0f b6 c0             	movzx  eax,al
c001e016:	50                   	push   eax
c001e017:	e8 58 f1 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e01c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e022:	59                   	pop    ecx
c001e023:	58                   	pop    eax
c001e024:	6a 0f                	push   0xf
c001e026:	6a 00                	push   0x0
c001e028:	e8 58 f1 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e02d:	5a                   	pop    edx
c001e02e:	59                   	pop    ecx
c001e02f:	0f b6 c0             	movzx  eax,al
c001e032:	50                   	push   eax
c001e033:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e038:	99                   	cdq    
c001e039:	f7 fd                	idiv   ebp
c001e03b:	99                   	cdq    
c001e03c:	f7 fb                	idiv   ebx
c001e03e:	8d 42 30             	lea    eax,[edx+0x30]
c001e041:	0f b6 c0             	movzx  eax,al
c001e044:	50                   	push   eax
c001e045:	e8 2a f1 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e04a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e050:	5d                   	pop    ebp
c001e051:	58                   	pop    eax
c001e052:	6a 0f                	push   0xf
c001e054:	6a 00                	push   0x0
c001e056:	e8 2a f1 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e05b:	5a                   	pop    edx
c001e05c:	59                   	pop    ecx
c001e05d:	0f b6 c0             	movzx  eax,al
c001e060:	50                   	push   eax
c001e061:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e066:	99                   	cdq    
c001e067:	f7 ff                	idiv   edi
c001e069:	99                   	cdq    
c001e06a:	f7 fb                	idiv   ebx
c001e06c:	8d 42 30             	lea    eax,[edx+0x30]
c001e06f:	0f b6 c0             	movzx  eax,al
c001e072:	50                   	push   eax
c001e073:	e8 fc f0 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e078:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e07e:	5f                   	pop    edi
c001e07f:	5d                   	pop    ebp
c001e080:	6a 0f                	push   0xf
c001e082:	6a 00                	push   0x0
c001e084:	e8 fc f0 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e089:	5a                   	pop    edx
c001e08a:	59                   	pop    ecx
c001e08b:	0f b6 c0             	movzx  eax,al
c001e08e:	50                   	push   eax
c001e08f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e094:	99                   	cdq    
c001e095:	f7 fb                	idiv   ebx
c001e097:	99                   	cdq    
c001e098:	f7 fb                	idiv   ebx
c001e09a:	8d 42 30             	lea    eax,[edx+0x30]
c001e09d:	0f b6 c0             	movzx  eax,al
c001e0a0:	50                   	push   eax
c001e0a1:	e8 ce f0 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e0a6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e0ac:	5f                   	pop    edi
c001e0ad:	5d                   	pop    ebp
c001e0ae:	6a 0f                	push   0xf
c001e0b0:	6a 00                	push   0x0
c001e0b2:	e8 ce f0 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e0b7:	5a                   	pop    edx
c001e0b8:	59                   	pop    ecx
c001e0b9:	0f b6 c0             	movzx  eax,al
c001e0bc:	50                   	push   eax
c001e0bd:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0c2:	99                   	cdq    
c001e0c3:	f7 fb                	idiv   ebx
c001e0c5:	83 c2 30             	add    edx,0x30
c001e0c8:	0f b6 d2             	movzx  edx,dl
c001e0cb:	52                   	push   edx
c001e0cc:	e8 a3 f0 ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e0d1:	83 c4 10             	add    esp,0x10
c001e0d4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e0da:	eb 05                	jmp    c001e0e1 <SATA::read(unsigned long long, int, void*)+0x245>
c001e0dc:	be 01 00 00 00       	mov    esi,0x1
c001e0e1:	83 c4 0c             	add    esp,0xc
c001e0e4:	89 f0                	mov    eax,esi
c001e0e6:	5b                   	pop    ebx
c001e0e7:	5e                   	pop    esi
c001e0e8:	5f                   	pop    edi
c001e0e9:	5d                   	pop    ebp
c001e0ea:	c3                   	ret    
c001e0eb:	90                   	nop

c001e0ec <SATA::write(unsigned long long, int, void*)>:
c001e0ec:	55                   	push   ebp
c001e0ed:	57                   	push   edi
c001e0ee:	56                   	push   esi
c001e0ef:	53                   	push   ebx
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e0fb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e103:	8d 70 ff             	lea    esi,[eax-0x1]
c001e106:	b8 04 00 00 00       	mov    eax,0x4
c001e10b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e111:	0f 87 2c 02 00 00    	ja     c001e343 <SATA::write(unsigned long long, int, void*)+0x257>
c001e117:	85 db                	test   ebx,ebx
c001e119:	b8 06 00 00 00       	mov    eax,0x6
c001e11e:	0f 84 1f 02 00 00    	je     c001e343 <SATA::write(unsigned long long, int, void*)+0x257>
c001e124:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e128:	c1 e6 09             	shl    esi,0x9
c001e12b:	01 de                	add    esi,ebx
c001e12d:	50                   	push   eax
c001e12e:	89 d7                	mov    edi,edx
c001e130:	50                   	push   eax
c001e131:	83 c7 01             	add    edi,0x1
c001e134:	6a 01                	push   0x1
c001e136:	89 cd                	mov    ebp,ecx
c001e138:	53                   	push   ebx
c001e139:	83 d5 00             	adc    ebp,0x0
c001e13c:	6a 01                	push   0x1
c001e13e:	81 c3 00 02 00 00    	add    ebx,0x200
c001e144:	51                   	push   ecx
c001e145:	52                   	push   edx
c001e146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e14a:	e8 fb fa ff ff       	call   c001dc4a <SATA::access(unsigned long long, int, void*, bool)>
c001e14f:	83 c4 20             	add    esp,0x20
c001e152:	39 f3                	cmp    ebx,esi
c001e154:	89 fa                	mov    edx,edi
c001e156:	89 e9                	mov    ecx,ebp
c001e158:	75 d3                	jne    c001e12d <SATA::write(unsigned long long, int, void*)+0x41>
c001e15a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e15e:	bd 10 27 00 00       	mov    ebp,0x2710
c001e163:	bb 0a 00 00 00       	mov    ebx,0xa
c001e168:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e16e:	50                   	push   eax
c001e16f:	50                   	push   eax
c001e170:	6a 0f                	push   0xf
c001e172:	6a 00                	push   0x0
c001e174:	e8 0c f0 ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e179:	5a                   	pop    edx
c001e17a:	59                   	pop    ecx
c001e17b:	0f b6 c0             	movzx  eax,al
c001e17e:	50                   	push   eax
c001e17f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e184:	99                   	cdq    
c001e185:	f7 fd                	idiv   ebp
c001e187:	99                   	cdq    
c001e188:	f7 fb                	idiv   ebx
c001e18a:	8d 42 30             	lea    eax,[edx+0x30]
c001e18d:	0f b6 c0             	movzx  eax,al
c001e190:	50                   	push   eax
c001e191:	e8 de ef ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e196:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e19c:	5e                   	pop    esi
c001e19d:	5f                   	pop    edi
c001e19e:	bf e8 03 00 00       	mov    edi,0x3e8
c001e1a3:	6a 0f                	push   0xf
c001e1a5:	6a 00                	push   0x0
c001e1a7:	e8 d9 ef ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e1ac:	5a                   	pop    edx
c001e1ad:	59                   	pop    ecx
c001e1ae:	0f b6 c0             	movzx  eax,al
c001e1b1:	50                   	push   eax
c001e1b2:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b7:	99                   	cdq    
c001e1b8:	f7 ff                	idiv   edi
c001e1ba:	99                   	cdq    
c001e1bb:	f7 fb                	idiv   ebx
c001e1bd:	8d 42 30             	lea    eax,[edx+0x30]
c001e1c0:	0f b6 c0             	movzx  eax,al
c001e1c3:	50                   	push   eax
c001e1c4:	e8 ab ef ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e1c9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e1cf:	5e                   	pop    esi
c001e1d0:	be 64 00 00 00       	mov    esi,0x64
c001e1d5:	58                   	pop    eax
c001e1d6:	6a 0f                	push   0xf
c001e1d8:	6a 00                	push   0x0
c001e1da:	e8 a6 ef ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e1df:	5a                   	pop    edx
c001e1e0:	59                   	pop    ecx
c001e1e1:	0f b6 c0             	movzx  eax,al
c001e1e4:	50                   	push   eax
c001e1e5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ea:	99                   	cdq    
c001e1eb:	f7 fe                	idiv   esi
c001e1ed:	99                   	cdq    
c001e1ee:	f7 fb                	idiv   ebx
c001e1f0:	8d 42 30             	lea    eax,[edx+0x30]
c001e1f3:	0f b6 c0             	movzx  eax,al
c001e1f6:	50                   	push   eax
c001e1f7:	e8 78 ef ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e1fc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e202:	58                   	pop    eax
c001e203:	5a                   	pop    edx
c001e204:	6a 0f                	push   0xf
c001e206:	6a 00                	push   0x0
c001e208:	e8 78 ef ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e20d:	59                   	pop    ecx
c001e20e:	5a                   	pop    edx
c001e20f:	0f b6 c0             	movzx  eax,al
c001e212:	50                   	push   eax
c001e213:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e218:	99                   	cdq    
c001e219:	f7 fb                	idiv   ebx
c001e21b:	99                   	cdq    
c001e21c:	f7 fb                	idiv   ebx
c001e21e:	8d 42 30             	lea    eax,[edx+0x30]
c001e221:	0f b6 c0             	movzx  eax,al
c001e224:	50                   	push   eax
c001e225:	e8 4a ef ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e22a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e230:	59                   	pop    ecx
c001e231:	58                   	pop    eax
c001e232:	6a 0f                	push   0xf
c001e234:	6a 00                	push   0x0
c001e236:	e8 4a ef ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e23b:	5a                   	pop    edx
c001e23c:	59                   	pop    ecx
c001e23d:	0f b6 c0             	movzx  eax,al
c001e240:	50                   	push   eax
c001e241:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e246:	99                   	cdq    
c001e247:	f7 fb                	idiv   ebx
c001e249:	83 c2 30             	add    edx,0x30
c001e24c:	0f b6 d2             	movzx  edx,dl
c001e24f:	52                   	push   edx
c001e250:	e8 1f ef ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e255:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e25b:	58                   	pop    eax
c001e25c:	5a                   	pop    edx
c001e25d:	6a 0f                	push   0xf
c001e25f:	6a 00                	push   0x0
c001e261:	e8 1f ef ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e266:	59                   	pop    ecx
c001e267:	5a                   	pop    edx
c001e268:	0f b6 c0             	movzx  eax,al
c001e26b:	50                   	push   eax
c001e26c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e271:	99                   	cdq    
c001e272:	f7 fd                	idiv   ebp
c001e274:	99                   	cdq    
c001e275:	f7 fb                	idiv   ebx
c001e277:	8d 42 30             	lea    eax,[edx+0x30]
c001e27a:	0f b6 c0             	movzx  eax,al
c001e27d:	50                   	push   eax
c001e27e:	e8 f1 ee ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e283:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e289:	59                   	pop    ecx
c001e28a:	5d                   	pop    ebp
c001e28b:	6a 0f                	push   0xf
c001e28d:	6a 00                	push   0x0
c001e28f:	e8 f1 ee ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e294:	5a                   	pop    edx
c001e295:	59                   	pop    ecx
c001e296:	0f b6 c0             	movzx  eax,al
c001e299:	50                   	push   eax
c001e29a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e29f:	99                   	cdq    
c001e2a0:	f7 ff                	idiv   edi
c001e2a2:	99                   	cdq    
c001e2a3:	f7 fb                	idiv   ebx
c001e2a5:	8d 42 30             	lea    eax,[edx+0x30]
c001e2a8:	0f b6 c0             	movzx  eax,al
c001e2ab:	50                   	push   eax
c001e2ac:	e8 c3 ee ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e2b1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e2b7:	5f                   	pop    edi
c001e2b8:	5d                   	pop    ebp
c001e2b9:	6a 0f                	push   0xf
c001e2bb:	6a 00                	push   0x0
c001e2bd:	e8 c3 ee ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e2c2:	5a                   	pop    edx
c001e2c3:	59                   	pop    ecx
c001e2c4:	0f b6 c0             	movzx  eax,al
c001e2c7:	50                   	push   eax
c001e2c8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2cd:	99                   	cdq    
c001e2ce:	f7 fe                	idiv   esi
c001e2d0:	99                   	cdq    
c001e2d1:	f7 fb                	idiv   ebx
c001e2d3:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d6:	0f b6 c0             	movzx  eax,al
c001e2d9:	50                   	push   eax
c001e2da:	e8 95 ee ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e2df:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2e5:	5e                   	pop    esi
c001e2e6:	5f                   	pop    edi
c001e2e7:	6a 0f                	push   0xf
c001e2e9:	6a 00                	push   0x0
c001e2eb:	e8 95 ee ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e2f0:	5d                   	pop    ebp
c001e2f1:	5a                   	pop    edx
c001e2f2:	0f b6 c0             	movzx  eax,al
c001e2f5:	50                   	push   eax
c001e2f6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2fb:	99                   	cdq    
c001e2fc:	f7 fb                	idiv   ebx
c001e2fe:	99                   	cdq    
c001e2ff:	f7 fb                	idiv   ebx
c001e301:	8d 42 30             	lea    eax,[edx+0x30]
c001e304:	0f b6 c0             	movzx  eax,al
c001e307:	50                   	push   eax
c001e308:	e8 67 ee ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e30d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e313:	59                   	pop    ecx
c001e314:	5e                   	pop    esi
c001e315:	6a 0f                	push   0xf
c001e317:	6a 00                	push   0x0
c001e319:	e8 67 ee ff ff       	call   c001d185 <combineColours(unsigned char, unsigned char)>
c001e31e:	5f                   	pop    edi
c001e31f:	5d                   	pop    ebp
c001e320:	0f b6 c0             	movzx  eax,al
c001e323:	50                   	push   eax
c001e324:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e329:	99                   	cdq    
c001e32a:	f7 fb                	idiv   ebx
c001e32c:	83 c2 30             	add    edx,0x30
c001e32f:	0f b6 d2             	movzx  edx,dl
c001e332:	52                   	push   edx
c001e333:	e8 3c ee ff ff       	call   c001d174 <combineCharAndColour(char, unsigned char)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e341:	31 c0                	xor    eax,eax
c001e343:	83 c4 0c             	add    esp,0xc
c001e346:	5b                   	pop    ebx
c001e347:	5e                   	pop    esi
c001e348:	5f                   	pop    edi
c001e349:	5d                   	pop    ebp
c001e34a:	c3                   	ret    
c001e34b:	90                   	nop

c001e34c <SATAPI::write(unsigned long long, int, void*)>:
c001e34c:	b8 03 00 00 00       	mov    eax,0x3
c001e351:	c3                   	ret    

c001e352 <SATAPI::close(int, int, void*)>:
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e359:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e35f:	85 c0                	test   eax,eax
c001e361:	74 0c                	je     c001e36f <SATAPI::close(int, int, void*)+0x1d>
c001e363:	8b 10                	mov    edx,DWORD PTR [eax]
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	50                   	push   eax
c001e369:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e36c:	83 c4 10             	add    esp,0x10
c001e36f:	31 c0                	xor    eax,eax
c001e371:	83 c4 0c             	add    esp,0xc
c001e374:	c3                   	ret    
c001e375:	90                   	nop

c001e376 <SATAPI::SATAPI()>:
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37d:	83 ec 04             	sub    esp,0x4
c001e380:	68 00 08 00 00       	push   0x800
c001e385:	68 18 34 02 c0       	push   0xc0023418
c001e38a:	50                   	push   eax
c001e38b:	e8 de e9 fe ff       	call   c000cd6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e390:	83 c4 10             	add    esp,0x10
c001e393:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39c:	89 10                	mov    DWORD PTR [eax],edx
c001e39e:	90                   	nop
c001e39f:	83 c4 0c             	add    esp,0xc
c001e3a2:	c3                   	ret    
c001e3a3:	90                   	nop

c001e3a4 <SATAPI::diskRemoved()>:
c001e3a4:	c3                   	ret    
c001e3a5:	90                   	nop

c001e3a6 <SATAPI::diskInserted()>:
c001e3a6:	83 ec 18             	sub    esp,0x18
c001e3a9:	68 24 34 02 c0       	push   0xc0023424
c001e3ae:	e8 57 c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e3b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3b7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e3be:	83 c4 1c             	add    esp,0x1c
c001e3c1:	c3                   	ret    

c001e3c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e3c2:	55                   	push   ebp
c001e3c3:	57                   	push   edi
c001e3c4:	56                   	push   esi
c001e3c5:	53                   	push   ebx
c001e3c6:	83 ec 34             	sub    esp,0x34
c001e3c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3cd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e3d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e3d5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e3d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3dd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3ed:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3f7:	83 c0 02             	add    eax,0x2
c001e3fa:	c1 e0 07             	shl    eax,0x7
c001e3fd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e401:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e405:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e409:	c1 e0 07             	shl    eax,0x7
c001e40c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e410:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e414:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e41e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e422:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e428:	e8 ff e4 ff ff       	call   c001c92c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e42d:	83 c4 10             	add    esp,0x10
c001e430:	89 c2                	mov    edx,eax
c001e432:	b8 01 00 00 00       	mov    eax,0x1
c001e437:	83 fa ff             	cmp    edx,0xffffffff
c001e43a:	0f 84 5f 02 00 00    	je     c001e69f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e440:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e448:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e44e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e450:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e456:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e45c:	89 d1                	mov    ecx,edx
c001e45e:	c1 e1 05             	shl    ecx,0x5
c001e461:	01 c8                	add    eax,ecx
c001e463:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e465:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e46b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e471:	89 08                	mov    DWORD PTR [eax],ecx
c001e473:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e479:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e47f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e485:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e488:	50                   	push   eax
c001e489:	68 90 00 00 00       	push   0x90
c001e48e:	6a 00                	push   0x0
c001e490:	53                   	push   ebx
c001e491:	e8 5a 20 fe ff       	call   c00004f0 <memset>
c001e496:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e499:	b9 0c 00 00 00       	mov    ecx,0xc
c001e49e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e4a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4a4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e4aa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e4ae:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e4b2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e4b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4bc:	48                   	dec    eax
c001e4bd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4c2:	89 c1                	mov    ecx,eax
c001e4c4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e4ca:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4cf:	09 c8                	or     eax,ecx
c001e4d1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e4d7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4dd:	83 c8 80             	or     eax,0xffffff80
c001e4e0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4e6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4e9:	25 00 7f 00 00       	and    eax,0x7f00
c001e4ee:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4f3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4fa:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e502:	c1 e8 10             	shr    eax,0x10
c001e505:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e50c:	c1 e8 18             	shr    eax,0x18
c001e50f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e512:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e516:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e519:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e51d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e520:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e524:	83 c4 10             	add    esp,0x10
c001e527:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e52b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e52f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e533:	31 c0                	xor    eax,eax
c001e535:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e53b:	80 e1 88             	and    cl,0x88
c001e53e:	74 0a                	je     c001e54a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e540:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e545:	74 0a                	je     c001e551 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e547:	40                   	inc    eax
c001e548:	eb eb                	jmp    c001e535 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e54a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e54f:	75 43                	jne    c001e594 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e551:	83 ec 0c             	sub    esp,0xc
c001e554:	68 3c 34 02 c0       	push   0xc002343c
c001e559:	e8 ac c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e55e:	58                   	pop    eax
c001e55f:	5a                   	pop    edx
c001e560:	68 51 34 02 c0       	push   0xc0023451
c001e565:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e56b:	e8 3c a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e570:	59                   	pop    ecx
c001e571:	5b                   	pop    ebx
c001e572:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e576:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e57c:	e8 45 e4 ff ff       	call   c001c9c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e581:	5e                   	pop    esi
c001e582:	5f                   	pop    edi
c001e583:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e587:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e58d:	e8 14 e4 ff ff       	call   c001c9a6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e592:	eb 48                	jmp    c001e5dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e594:	b8 01 00 00 00       	mov    eax,0x1
c001e599:	88 d1                	mov    cl,dl
c001e59b:	d3 e0                	shl    eax,cl
c001e59d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e5a2:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e5a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e5ac:	89 c7                	mov    edi,eax
c001e5ae:	c1 e3 07             	shl    ebx,0x7
c001e5b1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e5b5:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e5bb:	85 c7                	test   edi,eax
c001e5bd:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e5c3:	0f 84 a3 00 00 00    	je     c001e66c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e5c9:	0f ba e0 1e          	bt     eax,0x1e
c001e5cd:	73 1a                	jae    c001e5e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e5cf:	83 ec 0c             	sub    esp,0xc
c001e5d2:	68 63 34 02 c0       	push   0xc0023463
c001e5d7:	e8 2e c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e5dc:	83 c4 10             	add    esp,0x10
c001e5df:	b8 01 00 00 00       	mov    eax,0x1
c001e5e4:	e9 b6 00 00 00       	jmp    c001e69f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e5e9:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e5ef:	83 f8 0d             	cmp    eax,0xd
c001e5f2:	77 0a                	ja     c001e5fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e5f4:	83 ec 0c             	sub    esp,0xc
c001e5f7:	68 c8 00 00 00       	push   0xc8
c001e5fc:	eb 28                	jmp    c001e626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5fe:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e604:	83 f8 0d             	cmp    eax,0xd
c001e607:	77 0a                	ja     c001e613 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e609:	83 ec 0c             	sub    esp,0xc
c001e60c:	68 58 02 00 00       	push   0x258
c001e611:	eb 13                	jmp    c001e626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e613:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e619:	83 f8 06             	cmp    eax,0x6
c001e61c:	77 10                	ja     c001e62e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e61e:	83 ec 0c             	sub    esp,0xc
c001e621:	68 dc 05 00 00       	push   0x5dc
c001e626:	e8 69 7d ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001e62b:	83 c4 10             	add    esp,0x10
c001e62e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e632:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e635:	75 06                	jne    c001e63d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e637:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e63b:	74 15                	je     c001e652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e63d:	83 fe 06             	cmp    esi,0x6
c001e640:	77 10                	ja     c001e652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e642:	83 ec 0c             	sub    esp,0xc
c001e645:	68 c4 09 00 00       	push   0x9c4
c001e64a:	e8 45 7d ff ff       	call   c0016394 <milliTenthSleep(unsigned int)>
c001e64f:	83 c4 10             	add    esp,0x10
c001e652:	46                   	inc    esi
c001e653:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e659:	0f 85 56 ff ff ff    	jne    c001e5b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e65f:	83 ec 0c             	sub    esp,0xc
c001e662:	68 76 34 02 c0       	push   0xc0023476
c001e667:	e9 6b ff ff ff       	jmp    c001e5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e66c:	0f ba e0 1e          	bt     eax,0x1e
c001e670:	73 0d                	jae    c001e67f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e672:	83 ec 0c             	sub    esp,0xc
c001e675:	68 8a 34 02 c0       	push   0xc002348a
c001e67a:	e9 58 ff ff ff       	jmp    c001e5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e67f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e684:	74 17                	je     c001e69d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e686:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e68b:	74 10                	je     c001e69d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e68d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e693:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e697:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e69b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e69d:	31 c0                	xor    eax,eax
c001e69f:	83 c4 2c             	add    esp,0x2c
c001e6a2:	5b                   	pop    ebx
c001e6a3:	5e                   	pop    esi
c001e6a4:	5f                   	pop    edi
c001e6a5:	5d                   	pop    ebp
c001e6a6:	c3                   	ret    
c001e6a7:	90                   	nop

c001e6a8 <SATAPI::eject()>:
c001e6a8:	57                   	push   edi
c001e6a9:	b9 03 00 00 00       	mov    ecx,0x3
c001e6ae:	83 ec 18             	sub    esp,0x18
c001e6b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e6b5:	fc                   	cld    
c001e6b6:	31 c0                	xor    eax,eax
c001e6b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6ba:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e6bf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e6c4:	50                   	push   eax
c001e6c5:	6a 00                	push   0x0
c001e6c7:	6a 00                	push   0x0
c001e6c9:	6a 00                	push   0x0
c001e6cb:	6a 00                	push   0x0
c001e6cd:	6a 02                	push   0x2
c001e6cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6d3:	50                   	push   eax
c001e6d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6d8:	e8 e5 fc ff ff       	call   c001e3c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6dd:	83 c4 38             	add    esp,0x38
c001e6e0:	31 c0                	xor    eax,eax
c001e6e2:	5f                   	pop    edi
c001e6e3:	c3                   	ret    

c001e6e4 <SATAPI::detectMedia()>:
c001e6e4:	53                   	push   ebx
c001e6e5:	83 ec 14             	sub    esp,0x14
c001e6e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6f2:	e8 fd ff fe ff       	call   c000e6f4 <VCache::writeWriteBuffer()>
c001e6f7:	59                   	pop    ecx
c001e6f8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6fe:	e8 e1 ff fe ff       	call   c000e6e4 <VCache::invalidateReadBuffer()>
c001e703:	c7 04 24 9f 34 02 c0 	mov    DWORD PTR [esp],0xc002349f
c001e70a:	e8 fb c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	31 c0                	xor    eax,eax
c001e714:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e71b:	85 d2                	test   edx,edx
c001e71d:	74 0f                	je     c001e72e <SATAPI::detectMedia()+0x4a>
c001e71f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e725:	75 07                	jne    c001e72e <SATAPI::detectMedia()+0x4a>
c001e727:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e72e:	40                   	inc    eax
c001e72f:	83 f8 1a             	cmp    eax,0x1a
c001e732:	75 e0                	jne    c001e714 <SATAPI::detectMedia()+0x30>
c001e734:	83 c4 08             	add    esp,0x8
c001e737:	5b                   	pop    ebx
c001e738:	c3                   	ret    
c001e739:	90                   	nop

c001e73a <SATAPI::open(int, int, void*)>:
c001e73a:	56                   	push   esi
c001e73b:	53                   	push   ebx
c001e73c:	51                   	push   ecx
c001e73d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e745:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e74f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e759:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e763:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e76d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e774:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e77a:	e8 63 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e77f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e785:	89 c6                	mov    esi,eax
c001e787:	e8 56 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e78c:	81 c6 00 10 00 00    	add    esi,0x1000
c001e792:	39 c6                	cmp    esi,eax
c001e794:	74 10                	je     c001e7a6 <SATAPI::open(int, int, void*)+0x6c>
c001e796:	83 ec 0c             	sub    esp,0xc
c001e799:	68 b4 34 02 c0       	push   0xc00234b4
c001e79e:	e8 c4 2d ff ff       	call   c0011567 <KePanic(char const*)>
c001e7a3:	83 c4 10             	add    esp,0x10
c001e7a6:	83 ec 0c             	sub    esp,0xc
c001e7a9:	6a 02                	push   0x2
c001e7ab:	e8 45 ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e7b0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e7b6:	6a 03                	push   0x3
c001e7b8:	50                   	push   eax
c001e7b9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e7bf:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e7c5:	e8 34 b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e7ca:	83 c4 14             	add    esp,0x14
c001e7cd:	68 78 01 00 00       	push   0x178
c001e7d2:	e8 fc 92 fe ff       	call   c0007ad3 <malloc>
c001e7d7:	83 c4 0c             	add    esp,0xc
c001e7da:	6a 00                	push   0x0
c001e7dc:	68 ff ff ff 7f       	push   0x7fffffff
c001e7e1:	6a 00                	push   0x0
c001e7e3:	6a 00                	push   0x0
c001e7e5:	53                   	push   ebx
c001e7e6:	68 ca 34 02 c0       	push   0xc00234ca
c001e7eb:	89 c6                	mov    esi,eax
c001e7ed:	50                   	push   eax
c001e7ee:	e8 5b f3 fe ff       	call   c000db4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7f3:	83 c4 14             	add    esp,0x14
c001e7f6:	56                   	push   esi
c001e7f7:	e8 12 f4 fe ff       	call   c000dc0e <LogicalDisk::assignDriveLetter()>
c001e7fc:	5a                   	pop    edx
c001e7fd:	59                   	pop    ecx
c001e7fe:	0f be c0             	movsx  eax,al
c001e801:	50                   	push   eax
c001e802:	68 1c 33 02 c0       	push   0xc002331c
c001e807:	e8 fe c0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e80c:	58                   	pop    eax
c001e80d:	5a                   	pop    edx
c001e80e:	56                   	push   esi
c001e80f:	53                   	push   ebx
c001e810:	e8 8b e1 fe ff       	call   c000c9a0 <Device::addChild(Device*)>
c001e815:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e81b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e81e:	e8 b3 e5 fe ff       	call   c000cdd6 <PhysicalDisk::startCache()>
c001e823:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e82d:	e8 b2 fe ff ff       	call   c001e6e4 <SATAPI::detectMedia()>
c001e832:	83 c4 14             	add    esp,0x14
c001e835:	31 c0                	xor    eax,eax
c001e837:	5b                   	pop    ebx
c001e838:	5e                   	pop    esi
c001e839:	c3                   	ret    

c001e83a <SATAPI::read(unsigned long long, int, void*)>:
c001e83a:	55                   	push   ebp
c001e83b:	57                   	push   edi
c001e83c:	56                   	push   esi
c001e83d:	53                   	push   ebx
c001e83e:	83 ec 3c             	sub    esp,0x3c
c001e841:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e845:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e849:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e84d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e851:	83 fd 04             	cmp    ebp,0x4
c001e854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e858:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e85c:	7e 10                	jle    c001e86e <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e85e:	83 ec 0c             	sub    esp,0xc
c001e861:	68 d8 34 02 c0       	push   0xc00234d8
c001e866:	e8 fc 2c ff ff       	call   c0011567 <KePanic(char const*)>
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e874:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e87a:	51                   	push   ecx
c001e87b:	50                   	push   eax
c001e87c:	83 c0 02             	add    eax,0x2
c001e87f:	c1 e0 07             	shl    eax,0x7
c001e882:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e888:	50                   	push   eax
c001e889:	52                   	push   edx
c001e88a:	e8 61 e1 ff ff       	call   c001c9f0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e88f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e893:	b9 03 00 00 00       	mov    ecx,0x3
c001e898:	fc                   	cld    
c001e899:	31 c0                	xor    eax,eax
c001e89b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e89d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e8a2:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e8a7:	83 c4 0c             	add    esp,0xc
c001e8aa:	6a 00                	push   0x0
c001e8ac:	6a 00                	push   0x0
c001e8ae:	6a 00                	push   0x0
c001e8b0:	6a 00                	push   0x0
c001e8b2:	6a 02                	push   0x2
c001e8b4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e8b8:	50                   	push   eax
c001e8b9:	53                   	push   ebx
c001e8ba:	e8 03 fb ff ff       	call   c001e3c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8bf:	83 c4 20             	add    esp,0x20
c001e8c2:	85 c0                	test   eax,eax
c001e8c4:	89 c6                	mov    esi,eax
c001e8c6:	75 46                	jne    c001e90e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e8c8:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e8cc:	b9 03 00 00 00       	mov    ecx,0x3
c001e8d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8d7:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e8dc:	0f c8                	bswap  eax
c001e8de:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e8e2:	89 e8                	mov    eax,ebp
c001e8e4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8e8:	50                   	push   eax
c001e8e9:	55                   	push   ebp
c001e8ea:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e8ee:	c1 e5 0b             	shl    ebp,0xb
c001e8f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8f9:	55                   	push   ebp
c001e8fa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8fe:	50                   	push   eax
c001e8ff:	53                   	push   ebx
c001e900:	e8 bd fa ff ff       	call   c001e3c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e905:	83 c4 20             	add    esp,0x20
c001e908:	85 c0                	test   eax,eax
c001e90a:	89 c6                	mov    esi,eax
c001e90c:	74 0c                	je     c001e91a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	53                   	push   ebx
c001e912:	e8 cd fd ff ff       	call   c001e6e4 <SATAPI::detectMedia()>
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	83 c4 3c             	add    esp,0x3c
c001e91d:	89 f0                	mov    eax,esi
c001e91f:	5b                   	pop    ebx
c001e920:	5e                   	pop    esi
c001e921:	5f                   	pop    edi
c001e922:	5d                   	pop    ebp
c001e923:	c3                   	ret    

c001e924 <IOAPIC::close(int, int, void*)>:
c001e924:	b8 00 00 00 00       	mov    eax,0x0
c001e929:	c3                   	ret    

c001e92a <apicGetBase()>:
c001e92a:	55                   	push   ebp
c001e92b:	89 e5                	mov    ebp,esp
c001e92d:	83 ec 18             	sub    esp,0x18
c001e930:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e935:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e93b:	83 e0 08             	and    eax,0x8
c001e93e:	0f b6 c0             	movzx  eax,al
c001e941:	85 c0                	test   eax,eax
c001e943:	75 07                	jne    c001e94c <apicGetBase()+0x22>
c001e945:	b8 00 00 00 00       	mov    eax,0x0
c001e94a:	eb 21                	jmp    c001e96d <apicGetBase()+0x43>
c001e94c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e951:	83 ec 08             	sub    esp,0x8
c001e954:	6a 1b                	push   0x1b
c001e956:	50                   	push   eax
c001e957:	e8 86 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e95c:	83 c4 10             	add    esp,0x10
c001e95f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e962:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e965:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e968:	25 00 00 ff ff       	and    eax,0xffff0000
c001e96d:	c9                   	leave  
c001e96e:	c3                   	ret    
c001e96f:	90                   	nop

c001e970 <IOAPIC::IOAPIC()>:
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	83 ec 08             	sub    esp,0x8
c001e97a:	68 3c 35 02 c0       	push   0xc002353c
c001e97f:	50                   	push   eax
c001e980:	e8 b3 e1 fe ff       	call   c000cb38 <Device::Device(char const*)>
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	ba 4c 35 02 c0       	mov    edx,0xc002354c
c001e98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e991:	89 10                	mov    DWORD PTR [eax],edx
c001e993:	90                   	nop
c001e994:	83 c4 0c             	add    esp,0xc
c001e997:	c3                   	ret    

c001e998 <apicOpen()>:
c001e998:	55                   	push   ebp
c001e999:	89 e5                	mov    ebp,esp
c001e99b:	53                   	push   ebx
c001e99c:	83 ec 34             	sub    esp,0x34
c001e99f:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e9a4:	83 f0 01             	xor    eax,0x1
c001e9a7:	0f b6 c0             	movzx  eax,al
c001e9aa:	85 c0                	test   eax,eax
c001e9ac:	0f 84 a3 00 00 00    	je     c001ea55 <apicOpen()+0xbd>
c001e9b2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9b6:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e9bb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9bf:	0f b6 c0             	movzx  eax,al
c001e9c2:	39 c2                	cmp    edx,eax
c001e9c4:	0f 83 84 00 00 00    	jae    c001ea4e <apicOpen()+0xb6>
c001e9ca:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e9d1:	83 ec 0c             	sub    esp,0xc
c001e9d4:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e9d7:	e8 f7 90 fe ff       	call   c0007ad3 <malloc>
c001e9dc:	83 c4 10             	add    esp,0x10
c001e9df:	89 c3                	mov    ebx,eax
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	53                   	push   ebx
c001e9e5:	e8 86 ff ff ff       	call   c001e970 <IOAPIC::IOAPIC()>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9f7:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9fe:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea03:	83 c0 01             	add    eax,0x1
c001ea06:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea0b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea10:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea16:	83 ec 08             	sub    esp,0x8
c001ea19:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea1c:	50                   	push   eax
c001ea1d:	e8 7e df fe ff       	call   c000c9a0 <Device::addChild(Device*)>
c001ea22:	83 c4 10             	add    esp,0x10
c001ea25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2a:	83 c0 08             	add    eax,0x8
c001ea2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea33:	6a 00                	push   0x0
c001ea35:	6a 00                	push   0x0
c001ea37:	52                   	push   edx
c001ea38:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea3b:	ff d0                	call   eax
c001ea3d:	83 c4 10             	add    esp,0x10
c001ea40:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea43:	83 c0 01             	add    eax,0x1
c001ea46:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea49:	e9 68 ff ff ff       	jmp    c001e9b6 <apicOpen()+0x1e>
c001ea4e:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea55:	e8 d0 fe ff ff       	call   c001e92a <apicGetBase()>
c001ea5a:	05 f0 00 00 00       	add    eax,0xf0
c001ea5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea6a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea71:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea78:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea7b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea7e:	89 10                	mov    DWORD PTR [eax],edx
c001ea80:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea87:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea8c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea8f:	7d 7c                	jge    c001eb0d <apicOpen()+0x175>
c001ea91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea94:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea9b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea9e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eaa1:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eaa8:	c1 e8 08             	shr    eax,0x8
c001eaab:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eaaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eab2:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eab9:	c1 e8 18             	shr    eax,0x18
c001eabc:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eabf:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eac3:	3d ff 00 00 00       	cmp    eax,0xff
c001eac8:	75 3a                	jne    c001eb04 <apicOpen()+0x16c>
c001eaca:	e8 5b fe ff ff       	call   c001e92a <apicGetBase()>
c001eacf:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ead3:	83 fa 01             	cmp    edx,0x1
c001ead6:	75 07                	jne    c001eadf <apicOpen()+0x147>
c001ead8:	ba 60 03 00 00       	mov    edx,0x360
c001eadd:	eb 05                	jmp    c001eae4 <apicOpen()+0x14c>
c001eadf:	ba 50 03 00 00       	mov    edx,0x350
c001eae4:	01 d0                	add    eax,edx
c001eae6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eae9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaec:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eaf1:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eaf8:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eafc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaff:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb02:	89 10                	mov    DWORD PTR [eax],edx
c001eb04:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb08:	e9 7a ff ff ff       	jmp    c001ea87 <apicOpen()+0xef>
c001eb0d:	90                   	nop
c001eb0e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb11:	c9                   	leave  
c001eb12:	c3                   	ret    
c001eb13:	90                   	nop

c001eb14 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb14:	55                   	push   ebp
c001eb15:	89 e5                	mov    ebp,esp
c001eb17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb20:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb23:	72 1d                	jb     c001eb42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb28:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb31:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb37:	01 d0                	add    eax,edx
c001eb39:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb3c:	73 04                	jae    c001eb42 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb3e:	b0 01                	mov    al,0x1
c001eb40:	eb 02                	jmp    c001eb44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb42:	b0 00                	mov    al,0x0
c001eb44:	5d                   	pop    ebp
c001eb45:	c3                   	ret    

c001eb46 <IOAPIC::read(int)>:
c001eb46:	55                   	push   ebp
c001eb47:	89 e5                	mov    ebp,esp
c001eb49:	83 ec 10             	sub    esp,0x10
c001eb4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb4f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb5b:	0f b6 d0             	movzx  edx,al
c001eb5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb61:	89 10                	mov    DWORD PTR [eax],edx
c001eb63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb66:	83 c0 10             	add    eax,0x10
c001eb69:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6b:	c9                   	leave  
c001eb6c:	c3                   	ret    
c001eb6d:	90                   	nop

c001eb6e <IOAPIC::open(int, int, void*)>:
c001eb6e:	55                   	push   ebp
c001eb6f:	89 e5                	mov    ebp,esp
c001eb71:	57                   	push   edi
c001eb72:	56                   	push   esi
c001eb73:	53                   	push   ebx
c001eb74:	83 ec 04             	sub    esp,0x4
c001eb77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb86:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb8c:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb96:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb9f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eba5:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ebac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebaf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ebb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ebbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebc7:	0f b6 f0             	movzx  esi,al
c001ebca:	89 d0                	mov    eax,edx
c001ebcc:	ba 00 00 00 00       	mov    edx,0x0
c001ebd1:	89 c7                	mov    edi,eax
c001ebd3:	83 e7 ff             	and    edi,0xffffffff
c001ebd6:	89 f9                	mov    ecx,edi
c001ebd8:	0f b6 da             	movzx  ebx,dl
c001ebdb:	89 c8                	mov    eax,ecx
c001ebdd:	89 da                	mov    edx,ebx
c001ebdf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ebe2:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ebe5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebe9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebed:	83 e0 00             	and    eax,0x0
c001ebf0:	09 d0                	or     eax,edx
c001ebf2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebff:	8d 50 01             	lea    edx,[eax+0x1]
c001ec02:	88 d1                	mov    cl,dl
c001ec04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec07:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec0d:	0f b6 d0             	movzx  edx,al
c001ec10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec13:	83 c2 08             	add    edx,0x8
c001ec16:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec1a:	0f b6 c9             	movzx  ecx,cl
c001ec1d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec23:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec27:	6a 01                	push   0x1
c001ec29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec2c:	e8 15 ff ff ff       	call   c001eb46 <IOAPIC::read(int)>
c001ec31:	83 c4 08             	add    esp,0x8
c001ec34:	c1 f8 10             	sar    eax,0x10
c001ec37:	0f b6 c0             	movzx  eax,al
c001ec3a:	8d 50 01             	lea    edx,[eax+0x1]
c001ec3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec40:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec46:	b8 00 00 00 00       	mov    eax,0x0
c001ec4b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec4e:	5b                   	pop    ebx
c001ec4f:	5e                   	pop    esi
c001ec50:	5f                   	pop    edi
c001ec51:	5d                   	pop    ebp
c001ec52:	c3                   	ret    
c001ec53:	90                   	nop

c001ec54 <IOAPIC::write(int, int)>:
c001ec54:	55                   	push   ebp
c001ec55:	89 e5                	mov    ebp,esp
c001ec57:	83 ec 10             	sub    esp,0x10
c001ec5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec69:	0f b6 d0             	movzx  edx,al
c001ec6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec6f:	89 10                	mov    DWORD PTR [eax],edx
c001ec71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec74:	8d 50 10             	lea    edx,[eax+0x10]
c001ec77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec7a:	89 02                	mov    DWORD PTR [edx],eax
c001ec7c:	90                   	nop
c001ec7d:	c9                   	leave  
c001ec7e:	c3                   	ret    
c001ec7f:	90                   	nop

c001ec80 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec80:	55                   	push   ebp
c001ec81:	89 e5                	mov    ebp,esp
c001ec83:	53                   	push   ebx
c001ec84:	83 ec 2c             	sub    esp,0x2c
c001ec87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec8a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec8d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec90:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec93:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec96:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec99:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec9c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eca2:	88 d8                	mov    al,bl
c001eca4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001eca7:	88 c8                	mov    al,cl
c001eca9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ecac:	88 d0                	mov    al,dl
c001ecae:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ecb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecb5:	83 c0 08             	add    eax,0x8
c001ecb8:	d1 e0                	shl    eax,1
c001ecba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ecbd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecc1:	83 c0 08             	add    eax,0x8
c001ecc4:	d1 e0                	shl    eax,1
c001ecc6:	83 c0 01             	add    eax,0x1
c001ecc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001eccc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eccf:	50                   	push   eax
c001ecd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd3:	e8 6e fe ff ff       	call   c001eb46 <IOAPIC::read(int)>
c001ecd8:	83 c4 08             	add    esp,0x8
c001ecdb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ecde:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ece5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ece8:	c1 e0 18             	shl    eax,0x18
c001eceb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ecee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecf1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecf4:	52                   	push   edx
c001ecf5:	50                   	push   eax
c001ecf6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecf9:	e8 56 ff ff ff       	call   c001ec54 <IOAPIC::write(int, int)>
c001ecfe:	83 c4 0c             	add    esp,0xc
c001ed01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed04:	50                   	push   eax
c001ed05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed08:	e8 39 fe ff ff       	call   c001eb46 <IOAPIC::read(int)>
c001ed0d:	83 c4 08             	add    esp,0x8
c001ed10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed13:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed1a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed21:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed28:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed2c:	85 c0                	test   eax,eax
c001ed2e:	74 09                	je     c001ed39 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed30:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed37:	eb 07                	jmp    c001ed40 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed39:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed40:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed44:	85 c0                	test   eax,eax
c001ed46:	74 09                	je     c001ed51 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed48:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed4f:	eb 07                	jmp    c001ed58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed51:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed58:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed5f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed63:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed6c:	52                   	push   edx
c001ed6d:	50                   	push   eax
c001ed6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed71:	e8 de fe ff ff       	call   c001ec54 <IOAPIC::write(int, int)>
c001ed76:	83 c4 0c             	add    esp,0xc
c001ed79:	90                   	nop
c001ed7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed7d:	c9                   	leave  
c001ed7e:	c3                   	ret    
c001ed7f:	90                   	nop

c001ed80 <APICTimer::close(int, int, void*)>:
c001ed80:	b8 00 00 00 00       	mov    eax,0x0
c001ed85:	c3                   	ret    
c001ed86:	66 90                	xchg   ax,ax

c001ed88 <apicTimerHandler(regs*, void*)>:
c001ed88:	83 ec 0c             	sub    esp,0xc
c001ed8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed91:	b8 10 27 00 00       	mov    eax,0x2710
c001ed96:	ba 00 00 00 00       	mov    edx,0x0
c001ed9b:	f7 f1                	div    ecx
c001ed9d:	83 ec 0c             	sub    esp,0xc
c001eda0:	50                   	push   eax
c001eda1:	e8 66 f6 fe ff       	call   c000e40c <timerHandler(unsigned int)>
c001eda6:	83 c4 10             	add    esp,0x10
c001eda9:	90                   	nop
c001edaa:	83 c4 0c             	add    esp,0xc
c001edad:	c3                   	ret    
c001edae:	66 90                	xchg   ax,ax

c001edb0 <APICTimer::open(int, int, void*)>:
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb9:	83 c0 24             	add    eax,0x24
c001edbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001edbe:	83 ec 08             	sub    esp,0x8
c001edc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edc9:	ff d0                	call   eax
c001edcb:	83 c4 10             	add    esp,0x10
c001edce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ede4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001edea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	51                   	push   ecx
c001edf8:	6a 01                	push   0x1
c001edfa:	68 88 ed 01 c0       	push   0xc001ed88
c001edff:	52                   	push   edx
c001ee00:	50                   	push   eax
c001ee01:	e8 46 db fe ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee06:	83 c4 20             	add    esp,0x20
c001ee09:	89 c2                	mov    edx,eax
c001ee0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee15:	b8 00 00 00 00       	mov    eax,0x0
c001ee1a:	83 c4 0c             	add    esp,0xc
c001ee1d:	c3                   	ret    
c001ee1e:	66 90                	xchg   ax,ax

c001ee20 <APICTimer::write(int)>:
c001ee20:	83 ec 0c             	sub    esp,0xc
c001ee23:	83 ec 0c             	sub    esp,0xc
c001ee26:	68 70 35 02 c0       	push   0xc0023570
c001ee2b:	e8 37 27 ff ff       	call   c0011567 <KePanic(char const*)>
c001ee30:	83 c4 10             	add    esp,0x10
c001ee33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee41:	90                   	nop
c001ee42:	83 c4 0c             	add    esp,0xc
c001ee45:	c3                   	ret    
c001ee46:	66 90                	xchg   ax,ax

c001ee48 <APICTimer::APICTimer()>:
c001ee48:	83 ec 0c             	sub    esp,0xc
c001ee4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4f:	83 ec 08             	sub    esp,0x8
c001ee52:	68 80 35 02 c0       	push   0xc0023580
c001ee57:	50                   	push   eax
c001ee58:	e8 e3 f4 fe ff       	call   c000e340 <Timer::Timer(char const*)>
c001ee5d:	83 c4 10             	add    esp,0x10
c001ee60:	ba 94 35 02 c0       	mov    edx,0xc0023594
c001ee65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee69:	89 10                	mov    DWORD PTR [eax],edx
c001ee6b:	90                   	nop
c001ee6c:	83 c4 0c             	add    esp,0xc
c001ee6f:	c3                   	ret    

c001ee70 <PIT::write(int)>:
c001ee70:	83 ec 10             	sub    esp,0x10
c001ee73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee85:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee8a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee8f:	89 c2                	mov    edx,eax
c001ee91:	c1 fa 1f             	sar    edx,0x1f
c001ee94:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee9c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eea3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eea8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eeac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eeb1:	ee                   	out    dx,al
c001eeb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eeb6:	0f b6 c0             	movzx  eax,al
c001eeb9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eec0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eec4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eec8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eecd:	ee                   	out    dx,al
c001eece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eed2:	c1 f8 08             	sar    eax,0x8
c001eed5:	0f b6 c0             	movzx  eax,al
c001eed8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eedf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eee3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eee7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eeec:	ee                   	out    dx,al
c001eeed:	90                   	nop
c001eeee:	83 c4 10             	add    esp,0x10
c001eef1:	c3                   	ret    
c001eef2:	66 90                	xchg   ax,ax

c001eef4 <pitHandler(regs*, void*)>:
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eefd:	b8 10 27 00 00       	mov    eax,0x2710
c001ef02:	89 c2                	mov    edx,eax
c001ef04:	c1 fa 1f             	sar    edx,0x1f
c001ef07:	f7 f9                	idiv   ecx
c001ef09:	83 ec 0c             	sub    esp,0xc
c001ef0c:	50                   	push   eax
c001ef0d:	e8 fa f4 fe ff       	call   c000e40c <timerHandler(unsigned int)>
c001ef12:	83 c4 10             	add    esp,0x10
c001ef15:	90                   	nop
c001ef16:	83 c4 0c             	add    esp,0xc
c001ef19:	c3                   	ret    
c001ef1a:	66 90                	xchg   ax,ax

c001ef1c <PIT::open(int, int, void*)>:
c001ef1c:	83 ec 0c             	sub    esp,0xc
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef25:	83 c0 24             	add    eax,0x24
c001ef28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef2a:	83 ec 08             	sub    esp,0x8
c001ef2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef35:	ff d0                	call   eax
c001ef37:	83 c4 10             	add    esp,0x10
c001ef3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3e:	83 ec 0c             	sub    esp,0xc
c001ef41:	6a 00                	push   0x0
c001ef43:	6a 01                	push   0x1
c001ef45:	68 f4 ee 01 c0       	push   0xc001eef4
c001ef4a:	6a 00                	push   0x0
c001ef4c:	50                   	push   eax
c001ef4d:	e8 fa d9 fe ff       	call   c000c94c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef52:	83 c4 20             	add    esp,0x20
c001ef55:	89 c2                	mov    edx,eax
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef61:	b8 00 00 00 00       	mov    eax,0x0
c001ef66:	83 c4 0c             	add    esp,0xc
c001ef69:	c3                   	ret    
c001ef6a:	66 90                	xchg   ax,ax

c001ef6c <PIT::close(int, int, void*)>:
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef73:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef81:	6a 01                	push   0x1
c001ef83:	68 f4 ee 01 c0       	push   0xc001eef4
c001ef88:	6a 00                	push   0x0
c001ef8a:	50                   	push   eax
c001ef8b:	e8 f2 d9 fe ff       	call   c000c982 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef90:	83 c4 10             	add    esp,0x10
c001ef93:	b8 00 00 00 00       	mov    eax,0x0
c001ef98:	83 c4 0c             	add    esp,0xc
c001ef9b:	c3                   	ret    

c001ef9c <PIT::PIT()>:
c001ef9c:	83 ec 0c             	sub    esp,0xc
c001ef9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa3:	83 ec 08             	sub    esp,0x8
c001efa6:	68 bc 35 02 c0       	push   0xc00235bc
c001efab:	50                   	push   eax
c001efac:	e8 8f f3 fe ff       	call   c000e340 <Timer::Timer(char const*)>
c001efb1:	83 c4 10             	add    esp,0x10
c001efb4:	ba e4 35 02 c0       	mov    edx,0xc00235e4
c001efb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbd:	89 10                	mov    DWORD PTR [eax],edx
c001efbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efc9:	0f b6 d0             	movzx  edx,al
c001efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efe1:	0f b6 d0             	movzx  edx,al
c001efe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eff7:	8d 50 01             	lea    edx,[eax+0x1]
c001effa:	88 d1                	mov    cl,dl
c001effc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f000:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f006:	0f b6 d0             	movzx  edx,al
c001f009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f011:	83 e1 3f             	and    ecx,0x3f
c001f014:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f018:	90                   	nop
c001f019:	83 c4 0c             	add    esp,0xc
c001f01c:	c3                   	ret    
c001f01d:	66 90                	xchg   ax,ax
c001f01f:	90                   	nop

c001f020 <avxDetect>:
c001f020:	b8 01 00 00 00       	mov    eax,0x1
c001f025:	0f a2                	cpuid  
c001f027:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f02d:	74 15                	je     c001f044 <avxDetect.noAVX>
c001f02f:	b8 01 00 00 00       	mov    eax,0x1
c001f034:	0f a2                	cpuid  
c001f036:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f03c:	74 06                	je     c001f044 <avxDetect.noAVX>
c001f03e:	b8 01 00 00 00       	mov    eax,0x1
c001f043:	c3                   	ret    

c001f044 <avxDetect.noAVX>:
c001f044:	b8 00 00 00 00       	mov    eax,0x0
c001f049:	c3                   	ret    

c001f04a <avxSave>:
c001f04a:	53                   	push   ebx
c001f04b:	52                   	push   edx
c001f04c:	31 c0                	xor    eax,eax
c001f04e:	48                   	dec    eax
c001f04f:	89 c2                	mov    edx,eax
c001f051:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f055:	0f ae 23             	xsave  [ebx]
c001f058:	5a                   	pop    edx
c001f059:	5b                   	pop    ebx
c001f05a:	c3                   	ret    

c001f05b <avxLoad>:
c001f05b:	53                   	push   ebx
c001f05c:	52                   	push   edx
c001f05d:	31 c0                	xor    eax,eax
c001f05f:	48                   	dec    eax
c001f060:	89 c2                	mov    edx,eax
c001f062:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f066:	0f ae 2b             	xrstor [ebx]
c001f069:	5a                   	pop    edx
c001f06a:	5b                   	pop    ebx
c001f06b:	c3                   	ret    

c001f06c <avxInit>:
c001f06c:	e8 67 03 00 00       	call   c001f3d8 <sseInit>
c001f071:	50                   	push   eax
c001f072:	51                   	push   ecx
c001f073:	0f 20 e0             	mov    eax,cr4
c001f076:	0d 00 00 04 00       	or     eax,0x40000
c001f07b:	0f 22 e0             	mov    cr4,eax
c001f07e:	31 c9                	xor    ecx,ecx
c001f080:	0f 01 d0             	xgetbv 
c001f083:	0d 07 00 00 00       	or     eax,0x7
c001f088:	0f 01 d1             	xsetbv 
c001f08b:	59                   	pop    ecx
c001f08c:	58                   	pop    eax
c001f08d:	c3                   	ret    

c001f08e <avxClose>:
c001f08e:	c3                   	ret    

c001f08f <wouldSheSayYes>:
c001f08f:	c3                   	ret    
c001f090:	49                   	dec    ecx
c001f091:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f095:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f099:	75 20                	jne    c001f0bb <isr0+0xb>
c001f09b:	4e                   	dec    esi
c001f09c:	79 61                	jns    c001f0ff <isr7+0x3>
c001f09e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f0a3:	66 90                	xchg   ax,ax
c001f0a5:	66 90                	xchg   ax,ax
c001f0a7:	66 90                	xchg   ax,ax
c001f0a9:	66 90                	xchg   ax,ax
c001f0ab:	66 90                	xchg   ax,ax
c001f0ad:	66 90                	xchg   ax,ax
c001f0af:	90                   	nop

c001f0b0 <isr0>:
c001f0b0:	fa                   	cli    
c001f0b1:	68 00 00 00 00       	push   0x0
c001f0b6:	68 00 00 00 00       	push   0x0
c001f0bb:	e9 56 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0c0 <isr1>:
c001f0c0:	fa                   	cli    
c001f0c1:	6a 00                	push   0x0
c001f0c3:	6a 01                	push   0x1
c001f0c5:	e9 4c 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0ca <isr2>:
c001f0ca:	fa                   	cli    
c001f0cb:	6a 00                	push   0x0
c001f0cd:	6a 02                	push   0x2
c001f0cf:	e9 42 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0d4 <isr3>:
c001f0d4:	fa                   	cli    
c001f0d5:	6a 00                	push   0x0
c001f0d7:	6a 03                	push   0x3
c001f0d9:	e9 38 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0de <isr4>:
c001f0de:	fa                   	cli    
c001f0df:	6a 00                	push   0x0
c001f0e1:	6a 04                	push   0x4
c001f0e3:	e9 2e 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0e8 <isr5>:
c001f0e8:	fa                   	cli    
c001f0e9:	6a 00                	push   0x0
c001f0eb:	6a 05                	push   0x5
c001f0ed:	e9 24 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0f2 <isr6>:
c001f0f2:	fa                   	cli    
c001f0f3:	6a 00                	push   0x0
c001f0f5:	6a 06                	push   0x6
c001f0f7:	e9 1a 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0fc <isr7>:
c001f0fc:	fa                   	cli    
c001f0fd:	6a 00                	push   0x0
c001f0ff:	6a 07                	push   0x7
c001f101:	e9 10 01 00 00       	jmp    c001f216 <int_common_stub>

c001f106 <isr8>:
c001f106:	fa                   	cli    
c001f107:	6a 08                	push   0x8
c001f109:	e9 08 01 00 00       	jmp    c001f216 <int_common_stub>

c001f10e <isr9>:
c001f10e:	fa                   	cli    
c001f10f:	6a 00                	push   0x0
c001f111:	6a 09                	push   0x9
c001f113:	e9 fe 00 00 00       	jmp    c001f216 <int_common_stub>

c001f118 <isr10>:
c001f118:	fa                   	cli    
c001f119:	6a 0a                	push   0xa
c001f11b:	e9 f6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f120 <isr11>:
c001f120:	fa                   	cli    
c001f121:	6a 0b                	push   0xb
c001f123:	e9 ee 00 00 00       	jmp    c001f216 <int_common_stub>

c001f128 <isr12>:
c001f128:	fa                   	cli    
c001f129:	6a 0c                	push   0xc
c001f12b:	e9 e6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f130 <isr13>:
c001f130:	fa                   	cli    
c001f131:	6a 0d                	push   0xd
c001f133:	53                   	push   ebx
c001f134:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f138:	81 fb 06 f3 01 c0    	cmp    ebx,0xc001f306
c001f13e:	5b                   	pop    ebx
c001f13f:	0f 84 c3 01 00 00    	je     c001f308 <finishSignal2>
c001f145:	e9 cc 00 00 00       	jmp    c001f216 <int_common_stub>

c001f14a <isr14>:
c001f14a:	fa                   	cli    
c001f14b:	6a 0e                	push   0xe
c001f14d:	e9 c4 00 00 00       	jmp    c001f216 <int_common_stub>

c001f152 <isr15>:
c001f152:	fa                   	cli    
c001f153:	6a 00                	push   0x0
c001f155:	6a 0f                	push   0xf
c001f157:	e9 ba 00 00 00       	jmp    c001f216 <int_common_stub>

c001f15c <isr16>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 10                	push   0x10
c001f161:	e9 b0 00 00 00       	jmp    c001f216 <int_common_stub>

c001f166 <isr17>:
c001f166:	fa                   	cli    
c001f167:	6a 00                	push   0x0
c001f169:	6a 11                	push   0x11
c001f16b:	e9 a6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f170 <isr18>:
c001f170:	fa                   	cli    
c001f171:	6a 00                	push   0x0
c001f173:	6a 12                	push   0x12
c001f175:	e9 9c 00 00 00       	jmp    c001f216 <int_common_stub>

c001f17a <irq3>:
c001f17a:	fa                   	cli    
c001f17b:	6a 00                	push   0x0
c001f17d:	6a 23                	push   0x23
c001f17f:	e9 92 00 00 00       	jmp    c001f216 <int_common_stub>

c001f184 <irq4>:
c001f184:	fa                   	cli    
c001f185:	6a 00                	push   0x0
c001f187:	6a 24                	push   0x24
c001f189:	e9 88 00 00 00       	jmp    c001f216 <int_common_stub>

c001f18e <irq5>:
c001f18e:	fa                   	cli    
c001f18f:	6a 00                	push   0x0
c001f191:	6a 25                	push   0x25
c001f193:	e9 7e 00 00 00       	jmp    c001f216 <int_common_stub>

c001f198 <irq6>:
c001f198:	fa                   	cli    
c001f199:	6a 00                	push   0x0
c001f19b:	6a 26                	push   0x26
c001f19d:	e9 74 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1a2 <irq7>:
c001f1a2:	fa                   	cli    
c001f1a3:	6a 00                	push   0x0
c001f1a5:	6a 27                	push   0x27
c001f1a7:	e9 6a 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1ac <irq8>:
c001f1ac:	fa                   	cli    
c001f1ad:	6a 00                	push   0x0
c001f1af:	6a 28                	push   0x28
c001f1b1:	e9 60 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1b6 <irq9>:
c001f1b6:	fa                   	cli    
c001f1b7:	6a 00                	push   0x0
c001f1b9:	6a 29                	push   0x29
c001f1bb:	e9 56 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1c0 <irq10>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 2a                	push   0x2a
c001f1c5:	e9 4c 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1ca <irq11>:
c001f1ca:	fa                   	cli    
c001f1cb:	6a 00                	push   0x0
c001f1cd:	6a 2b                	push   0x2b
c001f1cf:	e9 42 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1d4 <irq12>:
c001f1d4:	fa                   	cli    
c001f1d5:	6a 00                	push   0x0
c001f1d7:	6a 2c                	push   0x2c
c001f1d9:	e9 38 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1de <irq13>:
c001f1de:	fa                   	cli    
c001f1df:	6a 00                	push   0x0
c001f1e1:	6a 2d                	push   0x2d
c001f1e3:	e9 2e 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1e8 <irq14>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 00                	push   0x0
c001f1eb:	6a 2e                	push   0x2e
c001f1ed:	e9 24 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1f2 <irq15>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 2f                	push   0x2f
c001f1f7:	e9 1a 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1fc <irq1>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 21                	push   0x21
c001f201:	eb 13                	jmp    c001f216 <int_common_stub>

c001f203 <irq2>:
c001f203:	fa                   	cli    
c001f204:	6a 00                	push   0x0
c001f206:	6a 22                	push   0x22
c001f208:	eb 0c                	jmp    c001f216 <int_common_stub>

c001f20a <isr96>:
c001f20a:	6a 00                	push   0x0
c001f20c:	6a 60                	push   0x60
c001f20e:	fb                   	sti    
c001f20f:	eb 37                	jmp    c001f248 <syscall_common_stub>

c001f211 <irq0>:
c001f211:	fa                   	cli    
c001f212:	6a 00                	push   0x0
c001f214:	6a 20                	push   0x20

c001f216 <int_common_stub>:
c001f216:	60                   	pusha  
c001f217:	1e                   	push   ds
c001f218:	06                   	push   es
c001f219:	0f a0                	push   fs
c001f21b:	0f a8                	push   gs
c001f21d:	66 b8 10 00          	mov    ax,0x10
c001f221:	66 8e d8             	mov    ds,ax
c001f224:	66 8e c0             	mov    es,ax
c001f227:	66 8e e0             	mov    fs,ax
c001f22a:	66 8e e8             	mov    gs,ax
c001f22d:	54                   	push   esp
c001f22e:	fc                   	cld    
c001f22f:	e8 18 dc fe ff       	call   c000ce4c <int_handler>
c001f234:	81 c4 04 00 00 00    	add    esp,0x4
c001f23a:	0f a9                	pop    gs
c001f23c:	0f a1                	pop    fs
c001f23e:	07                   	pop    es
c001f23f:	1f                   	pop    ds
c001f240:	61                   	popa   
c001f241:	81 c4 08 00 00 00    	add    esp,0x8
c001f247:	cf                   	iret   

c001f248 <syscall_common_stub>:
c001f248:	60                   	pusha  
c001f249:	1e                   	push   ds
c001f24a:	06                   	push   es
c001f24b:	0f a0                	push   fs
c001f24d:	0f a8                	push   gs
c001f24f:	66 b8 10 00          	mov    ax,0x10
c001f253:	66 8e d8             	mov    ds,ax
c001f256:	66 8e c0             	mov    es,ax
c001f259:	66 8e e0             	mov    fs,ax
c001f25c:	66 8e e8             	mov    gs,ax
c001f25f:	54                   	push   esp
c001f260:	fc                   	cld    
c001f261:	e8 e6 db fe ff       	call   c000ce4c <int_handler>
c001f266:	81 c4 04 00 00 00    	add    esp,0x4
c001f26c:	0f a9                	pop    gs
c001f26e:	0f a1                	pop    fs
c001f270:	07                   	pop    es
c001f271:	1f                   	pop    ds
c001f272:	e8 00 29 ff ff       	call   c0011b77 <KiCheckSignalZ>
c001f277:	3d 00 00 00 00       	cmp    eax,0x0
c001f27c:	0f 84 c0 00 00 00    	je     c001f342 <skipSignals>
c001f282:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f287:	61                   	popa   
c001f288:	53                   	push   ebx
c001f289:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f28f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f292:	5b                   	pop    ebx
c001f293:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f298:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f29b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f29e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f2a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f2a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f2a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f2aa:	81 c4 08 00 00 00    	add    esp,0x8
c001f2b0:	5e                   	pop    esi
c001f2b1:	5b                   	pop    ebx
c001f2b2:	59                   	pop    ecx
c001f2b3:	5a                   	pop    edx
c001f2b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f2b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f2ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f2bd:	52                   	push   edx
c001f2be:	51                   	push   ecx
c001f2bf:	53                   	push   ebx
c001f2c0:	56                   	push   esi
c001f2c1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f2c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f2ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f2cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f2d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f2d6:	60                   	pusha  
c001f2d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f2dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2e0:	89 e3                	mov    ebx,esp
c001f2e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2e5:	52                   	push   edx
c001f2e6:	68 06 f3 01 c0       	push   0xc001f306
c001f2eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2ee:	89 dc                	mov    esp,ebx
c001f2f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2f3:	68 23 00 00 00       	push   0x23
c001f2f8:	51                   	push   ecx
c001f2f9:	68 02 02 00 00       	push   0x202
c001f2fe:	68 1b 00 00 00       	push   0x1b
c001f303:	ff 36                	push   DWORD PTR [esi]
c001f305:	cf                   	iret   

c001f306 <finishSignal>:
c001f306:	cd 0f                	int    0xf

c001f308 <finishSignal2>:
c001f308:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f30e:	e8 e1 28 ff ff       	call   c0011bf4 <KiFinishSignalZ>
c001f313:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f319:	68 23 00 00 00       	push   0x23
c001f31e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f321:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f324:	68 1b 00 00 00       	push   0x1b
c001f329:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f32c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f32f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f332:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f335:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f338:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f33b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f33e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f341:	cf                   	iret   

c001f342 <skipSignals>:
c001f342:	61                   	popa   
c001f343:	81 c4 08 00 00 00    	add    esp,0x8
c001f349:	cf                   	iret   
c001f34a:	90                   	nop
c001f34b:	90                   	nop

c001f34c <irq16>:
c001f34c:	fa                   	cli    
c001f34d:	6a 00                	push   0x0
c001f34f:	6a 30                	push   0x30
c001f351:	e9 c0 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f356 <irq17>:
c001f356:	fa                   	cli    
c001f357:	6a 00                	push   0x0
c001f359:	6a 31                	push   0x31
c001f35b:	e9 b6 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f360 <irq18>:
c001f360:	fa                   	cli    
c001f361:	6a 00                	push   0x0
c001f363:	6a 32                	push   0x32
c001f365:	e9 ac fe ff ff       	jmp    c001f216 <int_common_stub>

c001f36a <irq19>:
c001f36a:	fa                   	cli    
c001f36b:	6a 00                	push   0x0
c001f36d:	6a 33                	push   0x33
c001f36f:	e9 a2 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f374 <irq20>:
c001f374:	fa                   	cli    
c001f375:	6a 00                	push   0x0
c001f377:	6a 34                	push   0x34
c001f379:	e9 98 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f37e <irq21>:
c001f37e:	fa                   	cli    
c001f37f:	6a 00                	push   0x0
c001f381:	6a 35                	push   0x35
c001f383:	e9 8e fe ff ff       	jmp    c001f216 <int_common_stub>

c001f388 <irq22>:
c001f388:	fa                   	cli    
c001f389:	6a 00                	push   0x0
c001f38b:	6a 36                	push   0x36
c001f38d:	e9 84 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f392 <irq23>:
c001f392:	fa                   	cli    
c001f393:	6a 00                	push   0x0
c001f395:	6a 37                	push   0x37
c001f397:	e9 7a fe ff ff       	jmp    c001f216 <int_common_stub>
c001f39c:	66 90                	xchg   ax,ax
c001f39e:	66 90                	xchg   ax,ax

c001f3a0 <i386GetRDRAND>:
c001f3a0:	b9 64 00 00 00       	mov    ecx,0x64

c001f3a5 <retry>:
c001f3a5:	0f c7 f0             	rdrand eax
c001f3a8:	72 05                	jb     c001f3af <retry.done>
c001f3aa:	e2 f9                	loop   c001f3a5 <retry>

c001f3ac <retry.fail>:
c001f3ac:	31 c0                	xor    eax,eax
c001f3ae:	c3                   	ret    

c001f3af <retry.done>:
c001f3af:	c3                   	ret    

c001f3b0 <absolutelyNoChanceInHell>:
c001f3b0:	b8 01 00 00 00       	mov    eax,0x1
c001f3b5:	0f a2                	cpuid  
c001f3b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f3bd:	74 06                	je     c001f3c5 <sseDetect.noSSE>
c001f3bf:	b8 01 00 00 00       	mov    eax,0x1
c001f3c4:	c3                   	ret    

c001f3c5 <sseDetect.noSSE>:
c001f3c5:	31 c0                	xor    eax,eax
c001f3c7:	c3                   	ret    

c001f3c8 <sseSave>:
c001f3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3cc:	0f ae 00             	fxsave [eax]
c001f3cf:	c3                   	ret    

c001f3d0 <sseLoad>:
c001f3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3d4:	0f ae 08             	fxrstor [eax]
c001f3d7:	c3                   	ret    

c001f3d8 <sseInit>:
c001f3d8:	e8 42 00 00 00       	call   c001f41f <x87Init>
c001f3dd:	0f 20 e0             	mov    eax,cr4
c001f3e0:	66 0d 00 06          	or     ax,0x600
c001f3e4:	0f 22 e0             	mov    cr4,eax
c001f3e7:	c3                   	ret    

c001f3e8 <sseClose>:
c001f3e8:	c3                   	ret    
c001f3e9:	66 90                	xchg   ax,ax
c001f3eb:	66 90                	xchg   ax,ax
c001f3ed:	66 90                	xchg   ax,ax
c001f3ef:	90                   	nop

c001f3f0 <value_37F>:
c001f3f0:	7f 03                	jg     c001f3f5 <value_37A+0x1>

c001f3f2 <value_37E>:
c001f3f2:	7e 03                	jle    c001f3f7 <x87Detect+0x1>

c001f3f4 <value_37A>:
c001f3f4:	7a 03                	jp     c001f3f9 <x87Detect+0x3>

c001f3f6 <x87Detect>:
c001f3f6:	b8 01 00 00 00       	mov    eax,0x1
c001f3fb:	0f a2                	cpuid  
c001f3fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f403:	74 06                	je     c001f40b <x87Detect.nox87>
c001f405:	b8 01 00 00 00       	mov    eax,0x1
c001f40a:	c3                   	ret    

c001f40b <x87Detect.nox87>:
c001f40b:	b8 00 00 00 00       	mov    eax,0x0
c001f410:	c3                   	ret    

c001f411 <x87Save>:
c001f411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f415:	dd 30                	fnsave [eax]
c001f417:	c3                   	ret    

c001f418 <x87Load>:
c001f418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41c:	dd 20                	frstor [eax]
c001f41e:	c3                   	ret    

c001f41f <x87Init>:
c001f41f:	0f 20 c0             	mov    eax,cr0
c001f422:	66 25 fb ff          	and    ax,0xfffb
c001f426:	66 0d 22 00          	or     ax,0x22
c001f42a:	0f 22 c0             	mov    cr0,eax
c001f42d:	db e3                	fninit 
c001f42f:	0f 06                	clts   
c001f431:	d9 2d f4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3f4
c001f437:	c3                   	ret    

c001f438 <x87Close>:
c001f438:	c3                   	ret    
c001f439:	66 90                	xchg   ax,ax
c001f43b:	90                   	nop

c001f43c <__do_global_ctors_aux>:
c001f43c:	a1 f0 03 02 c0       	mov    eax,ds:0xc00203f0
c001f441:	83 f8 ff             	cmp    eax,0xffffffff
c001f444:	74 1a                	je     c001f460 <__do_global_ctors_aux+0x24>
c001f446:	55                   	push   ebp
c001f447:	89 e5                	mov    ebp,esp
c001f449:	53                   	push   ebx
c001f44a:	52                   	push   edx
c001f44b:	bb f0 03 02 c0       	mov    ebx,0xc00203f0
c001f450:	ff d0                	call   eax
c001f452:	83 eb 04             	sub    ebx,0x4
c001f455:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f457:	83 f8 ff             	cmp    eax,0xffffffff
c001f45a:	75 f4                	jne    c001f450 <__do_global_ctors_aux+0x14>
c001f45c:	58                   	pop    eax
c001f45d:	5b                   	pop    ebx
c001f45e:	5d                   	pop    ebp
c001f45f:	c3                   	ret    
c001f460:	c3                   	ret    
c001f461:	66 90                	xchg   ax,ax
c001f463:	90                   	nop

c001f464 <__divdi3>:
c001f464:	55                   	push   ebp
c001f465:	57                   	push   edi
c001f466:	56                   	push   esi
c001f467:	53                   	push   ebx
c001f468:	83 ec 1c             	sub    esp,0x1c
c001f46b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f46f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f473:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f476:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f47a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f47e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f482:	85 db                	test   ebx,ebx
c001f484:	0f 88 8e 00 00 00    	js     c001f518 <__divdi3+0xb4>
c001f48a:	89 dd                	mov    ebp,ebx
c001f48c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f494:	89 d3                	mov    ebx,edx
c001f496:	85 d2                	test   edx,edx
c001f498:	79 0d                	jns    c001f4a7 <__divdi3+0x43>
c001f49a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f49e:	f7 d8                	neg    eax
c001f4a0:	83 d2 00             	adc    edx,0x0
c001f4a3:	f7 da                	neg    edx
c001f4a5:	89 d3                	mov    ebx,edx
c001f4a7:	89 c7                	mov    edi,eax
c001f4a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4ac:	85 db                	test   ebx,ebx
c001f4ae:	75 48                	jne    c001f4f8 <__divdi3+0x94>
c001f4b0:	39 ef                	cmp    edi,ebp
c001f4b2:	76 24                	jbe    c001f4d8 <__divdi3+0x74>
c001f4b4:	89 ea                	mov    edx,ebp
c001f4b6:	f7 f7                	div    edi
c001f4b8:	89 c1                	mov    ecx,eax
c001f4ba:	31 f6                	xor    esi,esi
c001f4bc:	89 c8                	mov    eax,ecx
c001f4be:	89 f2                	mov    edx,esi
c001f4c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4c4:	85 c9                	test   ecx,ecx
c001f4c6:	74 07                	je     c001f4cf <__divdi3+0x6b>
c001f4c8:	f7 d8                	neg    eax
c001f4ca:	83 d2 00             	adc    edx,0x0
c001f4cd:	f7 da                	neg    edx
c001f4cf:	83 c4 1c             	add    esp,0x1c
c001f4d2:	5b                   	pop    ebx
c001f4d3:	5e                   	pop    esi
c001f4d4:	5f                   	pop    edi
c001f4d5:	5d                   	pop    ebp
c001f4d6:	c3                   	ret    
c001f4d7:	90                   	nop
c001f4d8:	85 ff                	test   edi,edi
c001f4da:	75 0b                	jne    c001f4e7 <__divdi3+0x83>
c001f4dc:	b8 01 00 00 00       	mov    eax,0x1
c001f4e1:	31 d2                	xor    edx,edx
c001f4e3:	f7 f3                	div    ebx
c001f4e5:	89 c7                	mov    edi,eax
c001f4e7:	31 d2                	xor    edx,edx
c001f4e9:	89 e8                	mov    eax,ebp
c001f4eb:	f7 f7                	div    edi
c001f4ed:	89 c6                	mov    esi,eax
c001f4ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4f2:	f7 f7                	div    edi
c001f4f4:	89 c1                	mov    ecx,eax
c001f4f6:	eb c4                	jmp    c001f4bc <__divdi3+0x58>
c001f4f8:	39 eb                	cmp    ebx,ebp
c001f4fa:	77 3c                	ja     c001f538 <__divdi3+0xd4>
c001f4fc:	0f bd f3             	bsr    esi,ebx
c001f4ff:	83 f6 1f             	xor    esi,0x1f
c001f502:	75 40                	jne    c001f544 <__divdi3+0xe0>
c001f504:	39 eb                	cmp    ebx,ebp
c001f506:	72 09                	jb     c001f511 <__divdi3+0xad>
c001f508:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f50b:	0f 87 97 00 00 00    	ja     c001f5a8 <__divdi3+0x144>
c001f511:	b9 01 00 00 00       	mov    ecx,0x1
c001f516:	eb a4                	jmp    c001f4bc <__divdi3+0x58>
c001f518:	f7 d9                	neg    ecx
c001f51a:	83 d3 00             	adc    ebx,0x0
c001f51d:	f7 db                	neg    ebx
c001f51f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f522:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f526:	89 dd                	mov    ebp,ebx
c001f528:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f530:	e9 5f ff ff ff       	jmp    c001f494 <__divdi3+0x30>
c001f535:	8d 76 00             	lea    esi,[esi+0x0]
c001f538:	31 f6                	xor    esi,esi
c001f53a:	31 c9                	xor    ecx,ecx
c001f53c:	e9 7b ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f541:	8d 76 00             	lea    esi,[esi+0x0]
c001f544:	b8 20 00 00 00       	mov    eax,0x20
c001f549:	29 f0                	sub    eax,esi
c001f54b:	89 f1                	mov    ecx,esi
c001f54d:	d3 e3                	shl    ebx,cl
c001f54f:	89 fa                	mov    edx,edi
c001f551:	88 c1                	mov    cl,al
c001f553:	d3 ea                	shr    edx,cl
c001f555:	09 da                	or     edx,ebx
c001f557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f55b:	89 f1                	mov    ecx,esi
c001f55d:	d3 e7                	shl    edi,cl
c001f55f:	89 eb                	mov    ebx,ebp
c001f561:	88 c1                	mov    cl,al
c001f563:	d3 eb                	shr    ebx,cl
c001f565:	89 f1                	mov    ecx,esi
c001f567:	d3 e5                	shl    ebp,cl
c001f569:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f56c:	88 c1                	mov    cl,al
c001f56e:	d3 ea                	shr    edx,cl
c001f570:	09 d5                	or     ebp,edx
c001f572:	89 e8                	mov    eax,ebp
c001f574:	89 da                	mov    edx,ebx
c001f576:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f57a:	89 d3                	mov    ebx,edx
c001f57c:	89 c5                	mov    ebp,eax
c001f57e:	f7 e7                	mul    edi
c001f580:	39 d3                	cmp    ebx,edx
c001f582:	72 18                	jb     c001f59c <__divdi3+0x138>
c001f584:	74 0a                	je     c001f590 <__divdi3+0x12c>
c001f586:	89 e9                	mov    ecx,ebp
c001f588:	31 f6                	xor    esi,esi
c001f58a:	e9 2d ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f58f:	90                   	nop
c001f590:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f593:	89 f1                	mov    ecx,esi
c001f595:	d3 e7                	shl    edi,cl
c001f597:	39 c7                	cmp    edi,eax
c001f599:	73 eb                	jae    c001f586 <__divdi3+0x122>
c001f59b:	90                   	nop
c001f59c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f59f:	31 f6                	xor    esi,esi
c001f5a1:	e9 16 ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f5a6:	66 90                	xchg   ax,ax
c001f5a8:	31 c9                	xor    ecx,ecx
c001f5aa:	e9 0d ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f5af:	90                   	nop

c001f5b0 <__moddi3>:
c001f5b0:	55                   	push   ebp
c001f5b1:	57                   	push   edi
c001f5b2:	56                   	push   esi
c001f5b3:	53                   	push   ebx
c001f5b4:	83 ec 2c             	sub    esp,0x2c
c001f5b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f5bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f5bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f5c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f5c7:	85 db                	test   ebx,ebx
c001f5c9:	0f 88 85 00 00 00    	js     c001f654 <__moddi3+0xa4>
c001f5cf:	89 de                	mov    esi,ebx
c001f5d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	85 d2                	test   edx,edx
c001f5dd:	79 09                	jns    c001f5e8 <__moddi3+0x38>
c001f5df:	f7 d8                	neg    eax
c001f5e1:	83 d2 00             	adc    edx,0x0
c001f5e4:	f7 da                	neg    edx
c001f5e6:	89 d7                	mov    edi,edx
c001f5e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5ec:	89 cd                	mov    ebp,ecx
c001f5ee:	85 ff                	test   edi,edi
c001f5f0:	75 52                	jne    c001f644 <__moddi3+0x94>
c001f5f2:	89 c3                	mov    ebx,eax
c001f5f4:	39 f0                	cmp    eax,esi
c001f5f6:	76 24                	jbe    c001f61c <__moddi3+0x6c>
c001f5f8:	89 c8                	mov    eax,ecx
c001f5fa:	89 f2                	mov    edx,esi
c001f5fc:	f7 f3                	div    ebx
c001f5fe:	89 d6                	mov    esi,edx
c001f600:	89 f0                	mov    eax,esi
c001f602:	31 d2                	xor    edx,edx
c001f604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f608:	85 c9                	test   ecx,ecx
c001f60a:	74 07                	je     c001f613 <__moddi3+0x63>
c001f60c:	f7 d8                	neg    eax
c001f60e:	83 d2 00             	adc    edx,0x0
c001f611:	f7 da                	neg    edx
c001f613:	83 c4 2c             	add    esp,0x2c
c001f616:	5b                   	pop    ebx
c001f617:	5e                   	pop    esi
c001f618:	5f                   	pop    edi
c001f619:	5d                   	pop    ebp
c001f61a:	c3                   	ret    
c001f61b:	90                   	nop
c001f61c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f620:	85 db                	test   ebx,ebx
c001f622:	75 0d                	jne    c001f631 <__moddi3+0x81>
c001f624:	b8 01 00 00 00       	mov    eax,0x1
c001f629:	31 d2                	xor    edx,edx
c001f62b:	f7 f7                	div    edi
c001f62d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f631:	89 f0                	mov    eax,esi
c001f633:	31 d2                	xor    edx,edx
c001f635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f639:	f7 f7                	div    edi
c001f63b:	89 e8                	mov    eax,ebp
c001f63d:	f7 f7                	div    edi
c001f63f:	89 d6                	mov    esi,edx
c001f641:	eb bd                	jmp    c001f600 <__moddi3+0x50>
c001f643:	90                   	nop
c001f644:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f648:	39 f7                	cmp    edi,esi
c001f64a:	76 20                	jbe    c001f66c <__moddi3+0xbc>
c001f64c:	89 c8                	mov    eax,ecx
c001f64e:	89 f2                	mov    edx,esi
c001f650:	eb b2                	jmp    c001f604 <__moddi3+0x54>
c001f652:	66 90                	xchg   ax,ax
c001f654:	f7 d9                	neg    ecx
c001f656:	83 d3 00             	adc    ebx,0x0
c001f659:	f7 db                	neg    ebx
c001f65b:	89 de                	mov    esi,ebx
c001f65d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f665:	e9 6f ff ff ff       	jmp    c001f5d9 <__moddi3+0x29>
c001f66a:	66 90                	xchg   ax,ax
c001f66c:	0f bd c7             	bsr    eax,edi
c001f66f:	83 f0 1f             	xor    eax,0x1f
c001f672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f676:	75 24                	jne    c001f69c <__moddi3+0xec>
c001f678:	39 f7                	cmp    edi,esi
c001f67a:	72 06                	jb     c001f682 <__moddi3+0xd2>
c001f67c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f680:	77 0c                	ja     c001f68e <__moddi3+0xde>
c001f682:	89 e9                	mov    ecx,ebp
c001f684:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f688:	19 fe                	sbb    esi,edi
c001f68a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f68e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f692:	89 f2                	mov    edx,esi
c001f694:	e9 6b ff ff ff       	jmp    c001f604 <__moddi3+0x54>
c001f699:	8d 76 00             	lea    esi,[esi+0x0]
c001f69c:	b8 20 00 00 00       	mov    eax,0x20
c001f6a1:	89 c2                	mov    edx,eax
c001f6a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f6a7:	29 da                	sub    edx,ebx
c001f6a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f6ad:	88 d9                	mov    cl,bl
c001f6af:	d3 e7                	shl    edi,cl
c001f6b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b5:	88 d1                	mov    cl,dl
c001f6b7:	d3 e8                	shr    eax,cl
c001f6b9:	09 c7                	or     edi,eax
c001f6bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f6bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6c3:	89 d8                	mov    eax,ebx
c001f6c5:	88 d9                	mov    cl,bl
c001f6c7:	d3 e7                	shl    edi,cl
c001f6c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6cd:	89 f3                	mov    ebx,esi
c001f6cf:	88 d1                	mov    cl,dl
c001f6d1:	d3 eb                	shr    ebx,cl
c001f6d3:	89 c7                	mov    edi,eax
c001f6d5:	88 c1                	mov    cl,al
c001f6d7:	d3 e6                	shl    esi,cl
c001f6d9:	89 e8                	mov    eax,ebp
c001f6db:	88 d1                	mov    cl,dl
c001f6dd:	d3 e8                	shr    eax,cl
c001f6df:	09 f0                	or     eax,esi
c001f6e1:	89 f9                	mov    ecx,edi
c001f6e3:	d3 e5                	shl    ebp,cl
c001f6e5:	89 da                	mov    edx,ebx
c001f6e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6eb:	89 d3                	mov    ebx,edx
c001f6ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6f1:	89 c6                	mov    esi,eax
c001f6f3:	89 d1                	mov    ecx,edx
c001f6f5:	39 d3                	cmp    ebx,edx
c001f6f7:	72 27                	jb     c001f720 <__moddi3+0x170>
c001f6f9:	74 21                	je     c001f71c <__moddi3+0x16c>
c001f6fb:	29 f5                	sub    ebp,esi
c001f6fd:	19 cb                	sbb    ebx,ecx
c001f6ff:	89 de                	mov    esi,ebx
c001f701:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f705:	d3 e6                	shl    esi,cl
c001f707:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f70b:	89 f9                	mov    ecx,edi
c001f70d:	d3 ed                	shr    ebp,cl
c001f70f:	09 ee                	or     esi,ebp
c001f711:	89 f0                	mov    eax,esi
c001f713:	d3 eb                	shr    ebx,cl
c001f715:	89 da                	mov    edx,ebx
c001f717:	e9 e8 fe ff ff       	jmp    c001f604 <__moddi3+0x54>
c001f71c:	39 c5                	cmp    ebp,eax
c001f71e:	73 db                	jae    c001f6fb <__moddi3+0x14b>
c001f720:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f724:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f728:	89 d1                	mov    ecx,edx
c001f72a:	89 c6                	mov    esi,eax
c001f72c:	eb cd                	jmp    c001f6fb <__moddi3+0x14b>
c001f72e:	66 90                	xchg   ax,ax

c001f730 <__udivdi3>:
c001f730:	55                   	push   ebp
c001f731:	57                   	push   edi
c001f732:	56                   	push   esi
c001f733:	53                   	push   ebx
c001f734:	83 ec 1c             	sub    esp,0x1c
c001f737:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f73b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f73f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f743:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f747:	85 d2                	test   edx,edx
c001f749:	75 41                	jne    c001f78c <__udivdi3+0x5c>
c001f74b:	39 f7                	cmp    edi,esi
c001f74d:	76 15                	jbe    c001f764 <__udivdi3+0x34>
c001f74f:	89 e8                	mov    eax,ebp
c001f751:	89 f2                	mov    edx,esi
c001f753:	f7 f7                	div    edi
c001f755:	31 db                	xor    ebx,ebx
c001f757:	89 da                	mov    edx,ebx
c001f759:	83 c4 1c             	add    esp,0x1c
c001f75c:	5b                   	pop    ebx
c001f75d:	5e                   	pop    esi
c001f75e:	5f                   	pop    edi
c001f75f:	5d                   	pop    ebp
c001f760:	c3                   	ret    
c001f761:	8d 76 00             	lea    esi,[esi+0x0]
c001f764:	89 f9                	mov    ecx,edi
c001f766:	85 ff                	test   edi,edi
c001f768:	75 0b                	jne    c001f775 <__udivdi3+0x45>
c001f76a:	b8 01 00 00 00       	mov    eax,0x1
c001f76f:	31 d2                	xor    edx,edx
c001f771:	f7 f7                	div    edi
c001f773:	89 c1                	mov    ecx,eax
c001f775:	31 d2                	xor    edx,edx
c001f777:	89 f0                	mov    eax,esi
c001f779:	f7 f1                	div    ecx
c001f77b:	89 c3                	mov    ebx,eax
c001f77d:	89 e8                	mov    eax,ebp
c001f77f:	f7 f1                	div    ecx
c001f781:	89 da                	mov    edx,ebx
c001f783:	83 c4 1c             	add    esp,0x1c
c001f786:	5b                   	pop    ebx
c001f787:	5e                   	pop    esi
c001f788:	5f                   	pop    edi
c001f789:	5d                   	pop    ebp
c001f78a:	c3                   	ret    
c001f78b:	90                   	nop
c001f78c:	39 f2                	cmp    edx,esi
c001f78e:	77 1c                	ja     c001f7ac <__udivdi3+0x7c>
c001f790:	0f bd da             	bsr    ebx,edx
c001f793:	83 f3 1f             	xor    ebx,0x1f
c001f796:	75 24                	jne    c001f7bc <__udivdi3+0x8c>
c001f798:	39 f2                	cmp    edx,esi
c001f79a:	72 08                	jb     c001f7a4 <__udivdi3+0x74>
c001f79c:	39 ef                	cmp    edi,ebp
c001f79e:	0f 87 84 00 00 00    	ja     c001f828 <__udivdi3+0xf8>
c001f7a4:	b8 01 00 00 00       	mov    eax,0x1
c001f7a9:	eb ac                	jmp    c001f757 <__udivdi3+0x27>
c001f7ab:	90                   	nop
c001f7ac:	31 db                	xor    ebx,ebx
c001f7ae:	31 c0                	xor    eax,eax
c001f7b0:	89 da                	mov    edx,ebx
c001f7b2:	83 c4 1c             	add    esp,0x1c
c001f7b5:	5b                   	pop    ebx
c001f7b6:	5e                   	pop    esi
c001f7b7:	5f                   	pop    edi
c001f7b8:	5d                   	pop    ebp
c001f7b9:	c3                   	ret    
c001f7ba:	66 90                	xchg   ax,ax
c001f7bc:	b8 20 00 00 00       	mov    eax,0x20
c001f7c1:	29 d8                	sub    eax,ebx
c001f7c3:	88 d9                	mov    cl,bl
c001f7c5:	d3 e2                	shl    edx,cl
c001f7c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f7cb:	89 fa                	mov    edx,edi
c001f7cd:	88 c1                	mov    cl,al
c001f7cf:	d3 ea                	shr    edx,cl
c001f7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7d5:	09 d1                	or     ecx,edx
c001f7d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f7db:	88 d9                	mov    cl,bl
c001f7dd:	d3 e7                	shl    edi,cl
c001f7df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7e3:	89 f7                	mov    edi,esi
c001f7e5:	88 c1                	mov    cl,al
c001f7e7:	d3 ef                	shr    edi,cl
c001f7e9:	88 d9                	mov    cl,bl
c001f7eb:	d3 e6                	shl    esi,cl
c001f7ed:	89 ea                	mov    edx,ebp
c001f7ef:	88 c1                	mov    cl,al
c001f7f1:	d3 ea                	shr    edx,cl
c001f7f3:	09 d6                	or     esi,edx
c001f7f5:	89 f0                	mov    eax,esi
c001f7f7:	89 fa                	mov    edx,edi
c001f7f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7fd:	89 d7                	mov    edi,edx
c001f7ff:	89 c6                	mov    esi,eax
c001f801:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f805:	39 d7                	cmp    edi,edx
c001f807:	72 13                	jb     c001f81c <__udivdi3+0xec>
c001f809:	74 09                	je     c001f814 <__udivdi3+0xe4>
c001f80b:	89 f0                	mov    eax,esi
c001f80d:	31 db                	xor    ebx,ebx
c001f80f:	e9 43 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f814:	88 d9                	mov    cl,bl
c001f816:	d3 e5                	shl    ebp,cl
c001f818:	39 c5                	cmp    ebp,eax
c001f81a:	73 ef                	jae    c001f80b <__udivdi3+0xdb>
c001f81c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f81f:	31 db                	xor    ebx,ebx
c001f821:	e9 31 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f826:	66 90                	xchg   ax,ax
c001f828:	31 c0                	xor    eax,eax
c001f82a:	e9 28 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f82f:	90                   	nop

c001f830 <__umoddi3>:
c001f830:	55                   	push   ebp
c001f831:	57                   	push   edi
c001f832:	56                   	push   esi
c001f833:	53                   	push   ebx
c001f834:	83 ec 1c             	sub    esp,0x1c
c001f837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f83f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f843:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f847:	89 da                	mov    edx,ebx
c001f849:	85 c0                	test   eax,eax
c001f84b:	75 37                	jne    c001f884 <__umoddi3+0x54>
c001f84d:	39 df                	cmp    edi,ebx
c001f84f:	76 13                	jbe    c001f864 <__umoddi3+0x34>
c001f851:	89 f0                	mov    eax,esi
c001f853:	f7 f7                	div    edi
c001f855:	89 d0                	mov    eax,edx
c001f857:	31 d2                	xor    edx,edx
c001f859:	83 c4 1c             	add    esp,0x1c
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	5f                   	pop    edi
c001f85f:	5d                   	pop    ebp
c001f860:	c3                   	ret    
c001f861:	8d 76 00             	lea    esi,[esi+0x0]
c001f864:	89 fd                	mov    ebp,edi
c001f866:	85 ff                	test   edi,edi
c001f868:	75 0b                	jne    c001f875 <__umoddi3+0x45>
c001f86a:	b8 01 00 00 00       	mov    eax,0x1
c001f86f:	31 d2                	xor    edx,edx
c001f871:	f7 f7                	div    edi
c001f873:	89 c5                	mov    ebp,eax
c001f875:	89 d8                	mov    eax,ebx
c001f877:	31 d2                	xor    edx,edx
c001f879:	f7 f5                	div    ebp
c001f87b:	89 f0                	mov    eax,esi
c001f87d:	f7 f5                	div    ebp
c001f87f:	89 d0                	mov    eax,edx
c001f881:	eb d4                	jmp    c001f857 <__umoddi3+0x27>
c001f883:	90                   	nop
c001f884:	89 f1                	mov    ecx,esi
c001f886:	39 d8                	cmp    eax,ebx
c001f888:	76 0a                	jbe    c001f894 <__umoddi3+0x64>
c001f88a:	89 f0                	mov    eax,esi
c001f88c:	83 c4 1c             	add    esp,0x1c
c001f88f:	5b                   	pop    ebx
c001f890:	5e                   	pop    esi
c001f891:	5f                   	pop    edi
c001f892:	5d                   	pop    ebp
c001f893:	c3                   	ret    
c001f894:	0f bd e8             	bsr    ebp,eax
c001f897:	83 f5 1f             	xor    ebp,0x1f
c001f89a:	75 1c                	jne    c001f8b8 <__umoddi3+0x88>
c001f89c:	39 d8                	cmp    eax,ebx
c001f89e:	72 04                	jb     c001f8a4 <__umoddi3+0x74>
c001f8a0:	39 f7                	cmp    edi,esi
c001f8a2:	77 08                	ja     c001f8ac <__umoddi3+0x7c>
c001f8a4:	89 da                	mov    edx,ebx
c001f8a6:	29 fe                	sub    esi,edi
c001f8a8:	19 c2                	sbb    edx,eax
c001f8aa:	89 f1                	mov    ecx,esi
c001f8ac:	89 c8                	mov    eax,ecx
c001f8ae:	83 c4 1c             	add    esp,0x1c
c001f8b1:	5b                   	pop    ebx
c001f8b2:	5e                   	pop    esi
c001f8b3:	5f                   	pop    edi
c001f8b4:	5d                   	pop    ebp
c001f8b5:	c3                   	ret    
c001f8b6:	66 90                	xchg   ax,ax
c001f8b8:	ba 20 00 00 00       	mov    edx,0x20
c001f8bd:	29 ea                	sub    edx,ebp
c001f8bf:	89 e9                	mov    ecx,ebp
c001f8c1:	d3 e0                	shl    eax,cl
c001f8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8c7:	89 f8                	mov    eax,edi
c001f8c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8cd:	88 d1                	mov    cl,dl
c001f8cf:	d3 e8                	shr    eax,cl
c001f8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8d5:	09 c1                	or     ecx,eax
c001f8d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8db:	89 e9                	mov    ecx,ebp
c001f8dd:	d3 e7                	shl    edi,cl
c001f8df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8e3:	89 d8                	mov    eax,ebx
c001f8e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8e9:	88 d1                	mov    cl,dl
c001f8eb:	d3 e8                	shr    eax,cl
c001f8ed:	89 c7                	mov    edi,eax
c001f8ef:	89 e9                	mov    ecx,ebp
c001f8f1:	d3 e3                	shl    ebx,cl
c001f8f3:	89 f0                	mov    eax,esi
c001f8f5:	88 d1                	mov    cl,dl
c001f8f7:	d3 e8                	shr    eax,cl
c001f8f9:	09 d8                	or     eax,ebx
c001f8fb:	89 e9                	mov    ecx,ebp
c001f8fd:	d3 e6                	shl    esi,cl
c001f8ff:	89 f3                	mov    ebx,esi
c001f901:	89 fa                	mov    edx,edi
c001f903:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f907:	89 d1                	mov    ecx,edx
c001f909:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f90d:	89 c6                	mov    esi,eax
c001f90f:	89 d7                	mov    edi,edx
c001f911:	39 d1                	cmp    ecx,edx
c001f913:	72 27                	jb     c001f93c <__umoddi3+0x10c>
c001f915:	74 21                	je     c001f938 <__umoddi3+0x108>
c001f917:	89 ca                	mov    edx,ecx
c001f919:	29 f3                	sub    ebx,esi
c001f91b:	19 fa                	sbb    edx,edi
c001f91d:	89 d0                	mov    eax,edx
c001f91f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f923:	d3 e0                	shl    eax,cl
c001f925:	89 e9                	mov    ecx,ebp
c001f927:	d3 eb                	shr    ebx,cl
c001f929:	09 d8                	or     eax,ebx
c001f92b:	d3 ea                	shr    edx,cl
c001f92d:	83 c4 1c             	add    esp,0x1c
c001f930:	5b                   	pop    ebx
c001f931:	5e                   	pop    esi
c001f932:	5f                   	pop    edi
c001f933:	5d                   	pop    ebp
c001f934:	c3                   	ret    
c001f935:	8d 76 00             	lea    esi,[esi+0x0]
c001f938:	39 c3                	cmp    ebx,eax
c001f93a:	73 db                	jae    c001f917 <__umoddi3+0xe7>
c001f93c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f940:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f944:	89 d7                	mov    edi,edx
c001f946:	89 c6                	mov    esi,eax
c001f948:	eb cd                	jmp    c001f917 <__umoddi3+0xe7>

Disassembly of section .init:

c001f94a <_init>:
c001f94a:	55                   	push   ebp
c001f94b:	89 e5                	mov    ebp,esp
c001f94d:	e8 a2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f952:	e8 e5 fa ff ff       	call   c001f43c <__do_global_ctors_aux>
c001f957:	5d                   	pop    ebp
c001f958:	c3                   	ret    

Disassembly of section .fini:

c001f959 <_fini>:
c001f959:	55                   	push   ebp
c001f95a:	89 e5                	mov    ebp,esp
c001f95c:	e8 23 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f961:	5d                   	pop    ebp
c001f962:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f964 <Computer::~Computer()>:
c001f964:	83 ec 0c             	sub    esp,0xc
c001f967:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	89 10                	mov    DWORD PTR [eax],edx
c001f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	50                   	push   eax
c001f97a:	e8 23 cf fe ff       	call   c000c8a2 <Device::~Device()>
c001f97f:	83 c4 10             	add    esp,0x10
c001f982:	90                   	nop
c001f983:	83 c4 0c             	add    esp,0xc
c001f986:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f988 <Computer::~Computer()>:
c001f988:	83 ec 0c             	sub    esp,0xc
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f992:	e8 cd ff ff ff       	call   c001f964 <Computer::~Computer()>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	83 ec 08             	sub    esp,0x8
c001f99d:	68 70 01 00 00       	push   0x170
c001f9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9a6:	e8 61 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	83 c4 0c             	add    esp,0xc
c001f9b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f9b2 <idleCommon()>:
c001f9b2:	83 ec 0c             	sub    esp,0xc
c001f9b5:	fa                   	cli    
c001f9b6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f9bc:	e8 b7 66 ff ff       	call   c0016078 <schedule()>
c001f9c1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f9c6:	48                   	dec    eax
c001f9c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f9cc:	75 01                	jne    c001f9cf <idleCommon()+0x1d>
c001f9ce:	fb                   	sti    
c001f9cf:	83 c4 0c             	add    esp,0xc
c001f9d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f9d4 <LinkedList<UnixFile>::~LinkedList()>:
c001f9d4:	90                   	nop
c001f9d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f9d6 <LinkedList<UnixFile>::LinkedList()>:
c001f9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa16:	90                   	nop
c001fa17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa20:	75 10                	jne    c001fa32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	68 88 0e 02 c0       	push   0xc0020e88
c001fa2a:	e8 38 1b ff ff       	call   c0011567 <KePanic(char const*)>
c001fa2f:	83 c4 10             	add    esp,0x10
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa38:	85 c0                	test   eax,eax
c001fa3a:	74 34                	je     c001fa70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa43:	85 c0                	test   eax,eax
c001fa45:	74 29                	je     c001fa70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa6e:	eb 65                	jmp    c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa76:	85 c0                	test   eax,eax
c001fa78:	75 4b                	jne    c001fac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	85 c0                	test   eax,eax
c001fa83:	75 40                	jne    c001fac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8d:	89 10                	mov    DWORD PTR [eax],edx
c001fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faaf:	85 c0                	test   eax,eax
c001fab1:	74 22                	je     c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fabb:	e8 a7 1a ff ff       	call   c0011567 <KePanic(char const*)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	eb 10                	jmp    c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fac5:	83 ec 0c             	sub    esp,0xc
c001fac8:	68 b4 0e 02 c0       	push   0xc0020eb4
c001facd:	e8 95 1a ff ff       	call   c0011567 <KePanic(char const*)>
c001fad2:	83 c4 10             	add    esp,0x10
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fadc:	8d 50 01             	lea    edx,[eax+0x1]
c001fadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fae6:	90                   	nop
c001fae7:	83 c4 0c             	add    esp,0xc
c001faea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001faec <LinkedList<UnixFile>::getFirstElement()>:
c001faec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001faf4 <LinkedList<UnixFile>::removeFirst()>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fafd:	85 c0                	test   eax,eax
c001faff:	75 12                	jne    c001fb13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 c0 0e 02 c0       	push   0xc0020ec0
c001fb09:	e8 59 1a ff ff       	call   c0011567 <KePanic(char const*)>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	eb 7e                	jmp    c001fb91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1d:	85 c0                	test   eax,eax
c001fb1f:	74 10                	je     c001fb31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb21:	83 ec 0c             	sub    esp,0xc
c001fb24:	68 0b 0f 02 c0       	push   0xc0020f0b
c001fb29:	e8 39 1a ff ff       	call   c0011567 <KePanic(char const*)>
c001fb2e:	83 c4 10             	add    esp,0x10
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3a:	85 c0                	test   eax,eax
c001fb3c:	75 33                	jne    c001fb71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb5a:	83 f8 01             	cmp    eax,0x1
c001fb5d:	74 21                	je     c001fb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb5f:	83 ec 0c             	sub    esp,0xc
c001fb62:	68 e4 0e 02 c0       	push   0xc0020ee4
c001fb67:	e8 fb 19 ff ff       	call   c0011567 <KePanic(char const*)>
c001fb6c:	83 c4 10             	add    esp,0x10
c001fb6f:	eb 0f                	jmp    c001fb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	89 10                	mov    DWORD PTR [eax],edx
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb87:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb9e <DriverlessDevice::~DriverlessDevice()>:
c001fb9e:	ba 1c 1b 02 c0       	mov    edx,0xc0021b1c
c001fba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba7:	89 10                	mov    DWORD PTR [eax],edx
c001fba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbad:	50                   	push   eax
c001fbae:	e8 ef cc fe ff       	call   c000c8a2 <Device::~Device()>
c001fbb3:	83 c4 04             	add    esp,0x4
c001fbb6:	90                   	nop
c001fbb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fbb8 <DriverlessDevice::~DriverlessDevice()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc2:	e8 d7 ff ff ff       	call   c001fb9e <DriverlessDevice::~DriverlessDevice()>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	83 ec 08             	sub    esp,0x8
c001fbcd:	68 58 01 00 00       	push   0x158
c001fbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd6:	e8 31 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	83 c4 0c             	add    esp,0xc
c001fbe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fbe2 <LinkedList<Device>::addElement(Device*)>:
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbea:	75 10                	jne    c001fbfc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	68 88 0e 02 c0       	push   0xc0020e88
c001fbf4:	e8 6e 19 ff ff       	call   c0011567 <KePanic(char const*)>
c001fbf9:	83 c4 10             	add    esp,0x10
c001fbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc02:	85 c0                	test   eax,eax
c001fc04:	74 3a                	je     c001fc40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	74 2f                	je     c001fc40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc3e:	eb 68                	jmp    c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc46:	85 c0                	test   eax,eax
c001fc48:	75 4e                	jne    c001fc98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc51:	85 c0                	test   eax,eax
c001fc53:	75 43                	jne    c001fc98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc5d:	89 10                	mov    DWORD PTR [eax],edx
c001fc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc82:	85 c0                	test   eax,eax
c001fc84:	74 22                	je     c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fc8e:	e8 d4 18 ff ff       	call   c0011567 <KePanic(char const*)>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	eb 10                	jmp    c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	68 b4 0e 02 c0       	push   0xc0020eb4
c001fca0:	e8 c2 18 ff ff       	call   c0011567 <KePanic(char const*)>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcaf:	8d 50 01             	lea    edx,[eax+0x1]
c001fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcb9:	90                   	nop
c001fcba:	83 c4 0c             	add    esp,0xc
c001fcbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fcbe <LinkedList<Device>::LinkedList()>:
c001fcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcfe:	90                   	nop
c001fcff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd06:	85 c0                	test   eax,eax
c001fd08:	75 0e                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	85 c0                	test   eax,eax
c001fd13:	75 03                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd15:	b0 01                	mov    al,0x1
c001fd17:	c3                   	ret    
c001fd18:	b0 00                	mov    al,0x0
c001fd1a:	90                   	nop
c001fd1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd2d:	85 c0                	test   eax,eax
c001fd2f:	75 17                	jne    c001fd48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd31:	83 ec 0c             	sub    esp,0xc
c001fd34:	68 c0 0e 02 c0       	push   0xc0020ec0
c001fd39:	e8 29 18 ff ff       	call   c0011567 <KePanic(char const*)>
c001fd3e:	83 c4 10             	add    esp,0x10
c001fd41:	e9 96 00 00 00       	jmp    c001fddc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd46:	66 90                	xchg   ax,ax
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd52:	85 c0                	test   eax,eax
c001fd54:	0f 95 c0             	setne  al
c001fd57:	0f b6 c0             	movzx  eax,al
c001fd5a:	85 c0                	test   eax,eax
c001fd5c:	74 12                	je     c001fd70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	68 0b 0f 02 c0       	push   0xc0020f0b
c001fd66:	e8 fc 17 ff ff       	call   c0011567 <KePanic(char const*)>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	66 90                	xchg   ax,ax
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd79:	85 c0                	test   eax,eax
c001fd7b:	0f 94 c0             	sete   al
c001fd7e:	0f b6 c0             	movzx  eax,al
c001fd81:	85 c0                	test   eax,eax
c001fd83:	74 33                	je     c001fdb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fda1:	83 f8 01             	cmp    eax,0x1
c001fda4:	74 22                	je     c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	68 e4 0e 02 c0       	push   0xc0020ee4
c001fdae:	e8 b4 17 ff ff       	call   c0011567 <KePanic(char const*)>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	eb 10                	jmp    c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdbe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc5:	89 10                	mov    DWORD PTR [eax],edx
c001fdc7:	90                   	nop
c001fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdcf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdd9:	8d 76 00             	lea    esi,[esi+0x0]
c001fddc:	83 c4 0c             	add    esp,0xc
c001fddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fde8:	75 12                	jne    c001fdfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	68 88 0e 02 c0       	push   0xc0020e88
c001fdf2:	e8 70 17 ff ff       	call   c0011567 <KePanic(char const*)>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	66 90                	xchg   ax,ax
c001fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe02:	85 c0                	test   eax,eax
c001fe04:	74 36                	je     c001fe3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0d:	85 c0                	test   eax,eax
c001fe0f:	74 2b                	je     c001fe3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe38:	eb 6a                	jmp    c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe3a:	66 90                	xchg   ax,ax
c001fe3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe42:	85 c0                	test   eax,eax
c001fe44:	75 4e                	jne    c001fe94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4d:	85 c0                	test   eax,eax
c001fe4f:	75 43                	jne    c001fe94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe59:	89 10                	mov    DWORD PTR [eax],edx
c001fe5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe7b:	85 c0                	test   eax,eax
c001fe7d:	74 25                	je     c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe7f:	83 ec 0c             	sub    esp,0xc
c001fe82:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fe87:	e8 db 16 ff ff       	call   c0011567 <KePanic(char const*)>
c001fe8c:	83 c4 10             	add    esp,0x10
c001fe8f:	eb 13                	jmp    c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe91:	8d 76 00             	lea    esi,[esi+0x0]
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	68 b4 0e 02 c0       	push   0xc0020eb4
c001fe9c:	e8 c6 16 ff ff       	call   c0011567 <KePanic(char const*)>
c001fea1:	83 c4 10             	add    esp,0x10
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feab:	8d 50 01             	lea    edx,[eax+0x1]
c001feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001feb5:	90                   	nop
c001feb6:	83 c4 0c             	add    esp,0xc
c001feb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001febc <ACPI::~ACPI()>:
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	ba 20 21 02 c0       	mov    edx,0xc0022120
c001fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec8:	89 10                	mov    DWORD PTR [eax],edx
c001feca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fece:	83 ec 0c             	sub    esp,0xc
c001fed1:	50                   	push   eax
c001fed2:	e8 cb c9 fe ff       	call   c000c8a2 <Device::~Device()>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	90                   	nop
c001fedb:	83 c4 0c             	add    esp,0xc
c001fede:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fee0 <ACPI::~ACPI()>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feea:	e8 cd ff ff ff       	call   c001febc <ACPI::~ACPI()>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	83 ec 08             	sub    esp,0x8
c001fef5:	68 64 12 00 00       	push   0x1264
c001fefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefe:	e8 09 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	83 c4 0c             	add    esp,0xc
c001ff09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff0c <LinkedList<Device>::~LinkedList()>:
c001ff0c:	90                   	nop
c001ff0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff10 <LinkedList<Device>::isEmpty()>:
c001ff10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff16:	85 c0                	test   eax,eax
c001ff18:	75 0e                	jne    c001ff28 <LinkedList<Device>::isEmpty()+0x18>
c001ff1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff21:	85 c0                	test   eax,eax
c001ff23:	75 03                	jne    c001ff28 <LinkedList<Device>::isEmpty()+0x18>
c001ff25:	b0 01                	mov    al,0x1
c001ff27:	c3                   	ret    
c001ff28:	b0 00                	mov    al,0x0
c001ff2a:	90                   	nop
c001ff2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff2c <LinkedList<Device>::getFirstElement()>:
c001ff2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff34 <LinkedList<Device>::removeFirst()>:
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff3d:	85 c0                	test   eax,eax
c001ff3f:	75 17                	jne    c001ff58 <LinkedList<Device>::removeFirst()+0x24>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	68 c0 0e 02 c0       	push   0xc0020ec0
c001ff49:	e8 19 16 ff ff       	call   c0011567 <KePanic(char const*)>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	e9 92 00 00 00       	jmp    c001ffe8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff56:	66 90                	xchg   ax,ax
c001ff58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff65:	85 c0                	test   eax,eax
c001ff67:	74 13                	je     c001ff7c <LinkedList<Device>::removeFirst()+0x48>
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	68 0b 0f 02 c0       	push   0xc0020f0b
c001ff71:	e8 f1 15 ff ff       	call   c0011567 <KePanic(char const*)>
c001ff76:	83 c4 10             	add    esp,0x10
c001ff79:	8d 76 00             	lea    esi,[esi+0x0]
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff88:	85 c0                	test   eax,eax
c001ff8a:	75 34                	jne    c001ffc0 <LinkedList<Device>::removeFirst()+0x8c>
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ffa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffa8:	83 f8 01             	cmp    eax,0x1
c001ffab:	74 27                	je     c001ffd4 <LinkedList<Device>::removeFirst()+0xa0>
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	68 e4 0e 02 c0       	push   0xc0020ee4
c001ffb5:	e8 ad 15 ff ff       	call   c0011567 <KePanic(char const*)>
c001ffba:	83 c4 10             	add    esp,0x10
c001ffbd:	eb 15                	jmp    c001ffd4 <LinkedList<Device>::removeFirst()+0xa0>
c001ffbf:	90                   	nop
c001ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ffcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd0:	89 10                	mov    DWORD PTR [eax],edx
c001ffd2:	66 90                	xchg   ax,ax
c001ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffdb:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffe5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffe8:	83 c4 0c             	add    esp,0xc
c001ffeb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffec <CPU::~CPU()>:
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c001fff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff8:	89 10                	mov    DWORD PTR [eax],edx
c001fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffe:	83 ec 0c             	sub    esp,0xc
c0020001:	50                   	push   eax
c0020002:	e8 9b c8 fe ff       	call   c000c8a2 <Device::~Device()>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	90                   	nop
c002000b:	83 c4 0c             	add    esp,0xc
c002000e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020010 <CPU::~CPU()>:
c0020010:	83 ec 0c             	sub    esp,0xc
c0020013:	83 ec 0c             	sub    esp,0xc
c0020016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001a:	e8 cd ff ff ff       	call   c001ffec <CPU::~CPU()>
c002001f:	83 c4 10             	add    esp,0x10
c0020022:	83 ec 08             	sub    esp,0x8
c0020025:	68 94 11 00 00       	push   0x1194
c002002a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002e:	e8 d9 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020033:	83 c4 10             	add    esp,0x10
c0020036:	83 c4 0c             	add    esp,0xc
c0020039:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002003c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020040:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020043:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020044 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020044:	90                   	nop
c0020045:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020048 <ThreadControlBlock::ThreadControlBlock()>:
c0020048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020057:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002005e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020062:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020078:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002007f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020083:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002008b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002008f:	90                   	nop
c0020090:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002009e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200d4:	90                   	nop
c00200d5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00200d6 <PCI::~PCI()>:
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c00200de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e2:	89 10                	mov    DWORD PTR [eax],edx
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	50                   	push   eax
c00200ec:	e8 43 c2 fe ff       	call   c000c334 <Bus::~Bus()>
c00200f1:	83 c4 10             	add    esp,0x10
c00200f4:	90                   	nop
c00200f5:	83 c4 0c             	add    esp,0xc
c00200f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200fa <PCI::~PCI()>:
c00200fa:	83 ec 0c             	sub    esp,0xc
c00200fd:	83 ec 0c             	sub    esp,0xc
c0020100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020104:	e8 cd ff ff ff       	call   c00200d6 <PCI::~PCI()>
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	83 ec 08             	sub    esp,0x8
c002010f:	68 5c 01 00 00       	push   0x15c
c0020114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020118:	e8 ef a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002011d:	83 c4 10             	add    esp,0x10
c0020120:	83 c4 0c             	add    esp,0xc
c0020123:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020124 <IDE::~IDE()>:
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	ba 5c 32 02 c0       	mov    edx,0xc002325c
c002012c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020130:	89 10                	mov    DWORD PTR [eax],edx
c0020132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	50                   	push   eax
c002013a:	e8 dd cb fe ff       	call   c000cd1c <HardDiskController::~HardDiskController()>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	90                   	nop
c0020143:	83 c4 0c             	add    esp,0xc
c0020146:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020148 <IDE::~IDE()>:
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020152:	e8 cd ff ff ff       	call   c0020124 <IDE::~IDE()>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	83 ec 08             	sub    esp,0x8
c002015d:	68 70 02 00 00       	push   0x270
c0020162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020166:	e8 a1 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	83 c4 0c             	add    esp,0xc
c0020171:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020172 <SATABus::~SATABus()>:
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c002017a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017e:	89 10                	mov    DWORD PTR [eax],edx
c0020180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	50                   	push   eax
c0020188:	e8 8f cb fe ff       	call   c000cd1c <HardDiskController::~HardDiskController()>
c002018d:	83 c4 10             	add    esp,0x10
c0020190:	90                   	nop
c0020191:	83 c4 0c             	add    esp,0xc
c0020194:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020196 <SATABus::~SATABus()>:
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	83 ec 0c             	sub    esp,0xc
c002019c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a0:	e8 cd ff ff ff       	call   c0020172 <SATABus::~SATABus()>
c00201a5:	83 c4 10             	add    esp,0x10
c00201a8:	83 ec 08             	sub    esp,0x8
c00201ab:	68 64 01 00 00       	push   0x164
c00201b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b4:	e8 53 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	83 c4 0c             	add    esp,0xc
c00201bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00201c0 <ATA::~ATA()>:
c00201c0:	83 ec 0c             	sub    esp,0xc
c00201c3:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	89 10                	mov    DWORD PTR [eax],edx
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	83 ec 0c             	sub    esp,0xc
c00201d5:	50                   	push   eax
c00201d6:	e8 23 cc fe ff       	call   c000cdfe <PhysicalDisk::~PhysicalDisk()>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	90                   	nop
c00201df:	83 c4 0c             	add    esp,0xc
c00201e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201e4 <ATA::~ATA()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ee:	e8 cd ff ff ff       	call   c00201c0 <ATA::~ATA()>
c00201f3:	83 c4 10             	add    esp,0x10
c00201f6:	83 ec 08             	sub    esp,0x8
c00201f9:	68 7c 01 00 00       	push   0x17c
c00201fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020202:	e8 05 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	83 c4 0c             	add    esp,0xc
c002020d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002020e <ATAPI::~ATAPI()>:
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	ba 34 33 02 c0       	mov    edx,0xc0023334
c0020216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021a:	89 10                	mov    DWORD PTR [eax],edx
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	50                   	push   eax
c0020224:	e8 d5 cb fe ff       	call   c000cdfe <PhysicalDisk::~PhysicalDisk()>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	90                   	nop
c002022d:	83 c4 0c             	add    esp,0xc
c0020230:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020232 <ATAPI::~ATAPI()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	83 ec 0c             	sub    esp,0xc
c0020238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023c:	e8 cd ff ff ff       	call   c002020e <ATAPI::~ATAPI()>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	83 ec 08             	sub    esp,0x8
c0020247:	68 84 01 00 00       	push   0x184
c002024c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020250:	e8 b7 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020255:	83 c4 10             	add    esp,0x10
c0020258:	83 c4 0c             	add    esp,0xc
c002025b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002025c <SATA::~SATA()>:
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c0020264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020268:	89 10                	mov    DWORD PTR [eax],edx
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	50                   	push   eax
c0020272:	e8 87 cb fe ff       	call   c000cdfe <PhysicalDisk::~PhysicalDisk()>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	90                   	nop
c002027b:	83 c4 0c             	add    esp,0xc
c002027e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020280 <SATA::~SATA()>:
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028a:	e8 cd ff ff ff       	call   c002025c <SATA::~SATA()>
c002028f:	83 c4 10             	add    esp,0x10
c0020292:	83 ec 08             	sub    esp,0x8
c0020295:	68 7c 01 00 00       	push   0x17c
c002029a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002029e:	e8 69 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202a3:	83 c4 10             	add    esp,0x10
c00202a6:	83 c4 0c             	add    esp,0xc
c00202a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00202aa <SATAPI::~SATAPI()>:
c00202aa:	83 ec 0c             	sub    esp,0xc
c00202ad:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c00202b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b6:	89 10                	mov    DWORD PTR [eax],edx
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	50                   	push   eax
c00202c0:	e8 39 cb fe ff       	call   c000cdfe <PhysicalDisk::~PhysicalDisk()>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	90                   	nop
c00202c9:	83 c4 0c             	add    esp,0xc
c00202cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00202ce <SATAPI::~SATAPI()>:
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d8:	e8 cd ff ff ff       	call   c00202aa <SATAPI::~SATAPI()>
c00202dd:	83 c4 10             	add    esp,0x10
c00202e0:	83 ec 08             	sub    esp,0x8
c00202e3:	68 84 01 00 00       	push   0x184
c00202e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ec:	e8 1b a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202f1:	83 c4 10             	add    esp,0x10
c00202f4:	83 c4 0c             	add    esp,0xc
c00202f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202f8 <IOAPIC::~IOAPIC()>:
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	ba 4c 35 02 c0       	mov    edx,0xc002354c
c0020300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020304:	89 10                	mov    DWORD PTR [eax],edx
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	50                   	push   eax
c002030e:	e8 8f c5 fe ff       	call   c000c8a2 <Device::~Device()>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	90                   	nop
c0020317:	83 c4 0c             	add    esp,0xc
c002031a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002031c <IOAPIC::~IOAPIC()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020326:	e8 cd ff ff ff       	call   c00202f8 <IOAPIC::~IOAPIC()>
c002032b:	83 c4 10             	add    esp,0x10
c002032e:	83 ec 08             	sub    esp,0x8
c0020331:	68 68 01 00 00       	push   0x168
c0020336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033a:	e8 cd a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	83 c4 0c             	add    esp,0xc
c0020345:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020348 <APICTimer::~APICTimer()>:
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	ba 94 35 02 c0       	mov    edx,0xc0023594
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	89 10                	mov    DWORD PTR [eax],edx
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	83 ec 0c             	sub    esp,0xc
c002035d:	50                   	push   eax
c002035e:	e8 15 e0 fe ff       	call   c000e378 <Timer::~Timer()>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	90                   	nop
c0020367:	83 c4 0c             	add    esp,0xc
c002036a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002036c <APICTimer::~APICTimer()>:
c002036c:	83 ec 0c             	sub    esp,0xc
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020376:	e8 cd ff ff ff       	call   c0020348 <APICTimer::~APICTimer()>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	83 ec 08             	sub    esp,0x8
c0020381:	68 60 01 00 00       	push   0x160
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 7d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 c4 0c             	add    esp,0xc
c0020395:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020398 <PIT::~PIT()>:
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	ba e4 35 02 c0       	mov    edx,0xc00235e4
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	50                   	push   eax
c00203ae:	e8 c5 df fe ff       	call   c000e378 <Timer::~Timer()>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	90                   	nop
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00203bc <PIT::~PIT()>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c6:	e8 cd ff ff ff       	call   c0020398 <PIT::~PIT()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	68 5c 01 00 00       	push   0x15c
c00203d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203da:	e8 2d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be f9 23 02 c0       	mov    esi,0xc00223f9
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 15 24 02 c0       	mov    esi,0xc0022415
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
