
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 37 02 c0       	mov    eax,0xc0023744
c0000025:	3d 44 37 02 c0       	cmp    eax,0xc0023744
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 37 02 c0       	push   0xc0023744
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 37 02 c0       	mov    eax,0xc0023744
c0000051:	2d 44 37 02 c0       	sub    eax,0xc0023744
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 37 02 c0       	push   0xc0023744
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 6c fe 01 c0       	mov    ebx,0xc001fe6c
c0000097:	81 eb 68 fe 01 c0    	sub    ebx,0xc001fe68
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 68 fe 01 c0       	mov    esi,0xc001fe68
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 37 02 c0       	push   0xc0023744
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 44 37 02 c0       	push   0xc0023744
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 67 50 01 00       	call   c0015314 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 45 50 01 00       	call   c0015314 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 52 55 01 00       	call   c0015840 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ed 5b 01 00       	call   c0015ee4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 45 0e 01 00       	jmp    c00111c4 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0180],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0180],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0180],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0180],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0180],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0180],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 84 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe007c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 d6 76 01 00       	jmp    c00194b0 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 00 77 01 00       	jmp    c00194f0 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 21 77 01 00       	jmp    c0019530 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 e0 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff20]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 e0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff20]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 64 27 02 c0       	mov    edx,0xc0022764
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 9c ff 01 c0       	mov    edx,0xc001ff9c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 a2 ff 01 c0       	mov    eax,0xc001ffa2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 60 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdffa0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 ab ff 01 c0       	mov    eax,0xc001ffab
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 e0 00 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdff20]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 30 00 02 c0       	mov    eax,0xc0020030
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 20 00 02 c0       	mov    ebx,0xc0020020
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 10 00 02 c0       	mov    eax,0xc0020010
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba b2 ff 01 c0       	mov    edx,0xc001ffb2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba be ff 01 c0       	mov    edx,0xc001ffbe
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba d2 ff 01 c0       	mov    edx,0xc001ffd2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 00 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020400
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 00 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020400
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 00 02 02 c0       	mov    eax,0xc0020200
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 40 01 02 c0       	mov    eax,0xc0020140
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 00 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff00]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 00 05 02 c0       	push   0xc0020500
c0006147:	e8 08 3d 01 00       	call   c0019e54 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 0e 05 02 c0       	push   0xc002050e
c000617f:	e8 d0 3c 01 00       	call   c0019e54 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 39 3c 01 00       	call   c0019df8 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 1d 05 02 c0       	push   0xc002051d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 20 05 02 c0       	push   0xc0020520
c000682f:	e8 20 36 01 00       	call   c0019e54 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 2e 36 01 00       	call   c0019e70 <iso_kprintfd>
c0006842:	c7 04 24 25 05 02 c0 	mov    DWORD PTR [esp],0xc0020525
c0006849:	e8 06 36 01 00       	call   c0019e54 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 16 36 01 00       	call   c0019e70 <iso_kprintfd>
c000685a:	c7 04 24 2b 05 02 c0 	mov    DWORD PTR [esp],0xc002052b
c0006861:	e8 ee 35 01 00       	call   c0019e54 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 fe 35 01 00       	call   c0019e70 <iso_kprintfd>
c0006872:	c7 04 24 31 05 02 c0 	mov    DWORD PTR [esp],0xc0020531
c0006879:	e8 d6 35 01 00       	call   c0019e54 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 e6 35 01 00       	call   c0019e70 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 1d 05 02 c0       	push   0xc002051d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 3a 05 02 c0       	push   0xc002053a
c0006a52:	e8 fd 33 01 00       	call   c0019e54 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 45 05 02 c0       	push   0xc0020545
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 4c 05 02 c0       	push   0xc002054c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 53 05 02 c0       	push   0xc0020553
c0006b69:	e8 e6 32 01 00       	call   c0019e54 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 5e 05 02 c0       	push   0xc002055e
c0006b84:	e8 cb 32 01 00       	call   c0019e54 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 92 9d 00 00       	call   c0010a26 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 b7 5a 00 00       	call   c000c75a <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 6f 05 02 c0       	push   0xc002056f
c0006cd4:	e8 2c 9e 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 88 05 02 c0       	push   0xc0020588
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 6b e9 00 00       	call   c001566c <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 7a eb 00 00       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 54 63 01 c0       	push   0xc0016354
c0006d25:	52                   	push   edx
c0006d26:	e8 65 eb 00 00       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 84 06 02 c0       	push   0xc0020684
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 c8 9d 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 47 a6 00 00       	call   c0011390 <KeInitRand()>
c0006d49:	e8 29 fa 00 00       	call   c0016777 <Vm::initialise8086()>
c0006d4e:	e8 d5 47 00 00       	call   c000b528 <Fs::initVFS()>
c0006d53:	c7 04 24 95 05 02 c0 	mov    DWORD PTR [esp],0xc0020595
c0006d5a:	e8 a6 9d 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 84 06 02 c0       	push   0xc0020684
c0006d7e:	e8 82 9d 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0006d83:	e8 7e 44 00 00       	call   c000b206 <KeInitialiseSymlinks()>
c0006d88:	e8 af a2 00 00       	call   c001103c <KeLoadSystemEnv()>
c0006d8d:	e8 0c a5 00 00       	call   c001129e <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 af 05 02 c0       	push   0xc00205af
c0006d9c:	68 b8 05 02 c0       	push   0xc00205b8
c0006da1:	e8 f4 ca 00 00       	call   c001389a <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 06 53 00 00       	call   c000c0b4 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 a8 06 02 c0 	mov    DWORD PTR [esp],0xc00206a8
c0006db5:	e8 4b 9d 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 8c 59 00 00       	call   c000c758 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 c0 05 02 c0 	mov    DWORD PTR [esp],0xc00205c0
c0006dd3:	e8 2d 9d 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 d1 05 02 c0       	push   0xc00205d1
c0006de7:	e8 84 e2 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 bb e4 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 da ee 00 00       	call   c0015cdc <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ed 05 02 c0       	push   0xc00205ed
c0006e17:	50                   	push   eax
c0006e18:	e8 b7 59 00 00       	call   c000c7d4 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba f4 06 02 c0       	mov    edx,0xc00206f4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 4f 7f 01 00       	call   c001ee66 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 e9 8f 00 00       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 c2 8f 00 00       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 a0 8f 00 00       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 7e 8f 00 00       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 8b 8e 00 00       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 66 8e 00 00       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ae 7d 01 00       	call   c001ee20 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 fc 79 01 00       	call   c001ea90 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 7c 8e 00 00       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 f6 05 02 c0       	push   0xc00205f6
c0007104:	e8 d0 a0 00 00       	call   c00111d9 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 fc 05 02 c0       	push   0xc00205fc
c0007140:	e8 94 a0 00 00       	call   c00111d9 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 83 88 00 00       	jmp    c000fa10 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 02 06 02 c0       	push   0xc0020602
c00071e3:	0f 94 05 a0 2f 02 c0 	sete   BYTE PTR ds:0xc0022fa0
c00071ea:	e8 16 99 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 7f 83 00 00       	call   c000f584 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 28 54 00 00       	call   c000c63c <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 1a 06 02 c0 	mov    DWORD PTR [esp],0xc002061a
c000722d:	e8 d3 98 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 ae 8d 00 00       	call   c000fff6 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 e5 53 00 00       	call   c000c63c <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 c8 06 02 c0       	push   0xc00206c8
c0007274:	e8 8c 98 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0007279:	e8 40 07 01 00       	call   c00179be <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 34 06 02 c0 	mov    DWORD PTR [esp],0xc0020634
c0007285:	e8 7b 98 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 22 e7 00 00       	call   c00159b8 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 4f 06 02 c0       	push   0xc002064f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 60 06 02 c0       	push   0xc0020660
c000730d:	e8 c7 9e 00 00       	call   c00111d9 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 6d 06 02 c0       	push   0xc002066d
c0007322:	e8 b2 9e 00 00       	call   c00111d9 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 77 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020677
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 98 9e 00 00       	jmp    c00111d9 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 57 01 01 00       	call   c001768a <HalSystemIdle()>
c0007533:	e8 ea 7e 01 00       	call   c001f422 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 20 eb 01 c0       	push   0xc001eb20
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 30 eb 01 c0       	push   0xc001eb30
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 3a eb 01 c0       	push   0xc001eb3a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 44 eb 01 c0       	push   0xc001eb44
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 4e eb 01 c0       	push   0xc001eb4e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 58 eb 01 c0       	push   0xc001eb58
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 62 eb 01 c0       	push   0xc001eb62
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 6c eb 01 c0       	push   0xc001eb6c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 76 eb 01 c0       	push   0xc001eb76
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 7e eb 01 c0       	push   0xc001eb7e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 88 eb 01 c0       	push   0xc001eb88
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 90 eb 01 c0       	push   0xc001eb90
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 98 eb 01 c0       	push   0xc001eb98
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 a0 eb 01 c0       	push   0xc001eba0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 ba eb 01 c0       	push   0xc001ebba
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 c2 eb 01 c0       	push   0xc001ebc2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 cc eb 01 c0       	push   0xc001ebcc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 d6 eb 01 c0       	push   0xc001ebd6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 e0 eb 01 c0       	push   0xc001ebe0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 7a ec 01 c0       	push   0xc001ec7a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 81 ec 01 c0       	push   0xc001ec81
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 6c ec 01 c0       	push   0xc001ec6c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 73 ec 01 c0       	push   0xc001ec73
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ea eb 01 c0       	push   0xc001ebea
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 f4 eb 01 c0       	push   0xc001ebf4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 fe eb 01 c0       	push   0xc001ebfe
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 08 ec 01 c0       	push   0xc001ec08
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 12 ec 01 c0       	push   0xc001ec12
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 1c ec 01 c0       	push   0xc001ec1c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 26 ec 01 c0       	push   0xc001ec26
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 30 ec 01 c0       	push   0xc001ec30
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 3a ec 01 c0       	push   0xc001ec3a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 44 ec 01 c0       	push   0xc001ec44
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 4e ec 01 c0       	push   0xc001ec4e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 58 ec 01 c0       	push   0xc001ec58
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 62 ec 01 c0       	push   0xc001ec62
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 bc ed 01 c0       	push   0xc001edbc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 c6 ed 01 c0       	push   0xc001edc6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 d0 ed 01 c0       	push   0xc001edd0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 da ed 01 c0       	push   0xc001edda
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 e4 ed 01 c0       	push   0xc001ede4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ee ed 01 c0       	push   0xc001edee
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 f8 ed 01 c0       	push   0xc001edf8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 02 ee 01 c0       	push   0xc001ee02
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 76 eb 01 c0       	push   0xc001eb76
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 94 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f94
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 94 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f94
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 94 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f94,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 94 2f 02 c0       	mov    eax,ds:0xc0022f94
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 18 07 02 c0       	push   0xc0020718
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 48 07 02 c0       	push   0xc0020748
c0007a44:	e8 90 97 00 00       	call   c00111d9 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 4d 07 02 c0       	push   0xc002074d
c0007a5a:	e8 7a 97 00 00       	call   c00111d9 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 54 07 02 c0       	push   0xc0020754
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 03 8f 00 00       	call   c0010a89 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 2c 8e 00 00       	call   c00109d3 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 fd 77 01 00       	call   c001f3ba <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 6c 07 02 c0       	push   0xc002076c
c0007c4b:	e8 89 95 00 00       	call   c00111d9 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 6c 07 02 c0       	push   0xc002076c
c0007cc5:	e8 0f 95 00 00       	call   c00111d9 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 98 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f98
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 98 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f98
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 98 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f98
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 11 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020811
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 09 94 00 00       	jmp    c00111d9 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 94 07 02 c0       	push   0xc0020794
c0007e54:	e8 80 93 00 00       	call   c00111d9 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 27 08 02 c0       	push   0xc0020827
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 c4 07 02 c0       	push   0xc00207c4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 3f 08 02 c0       	push   0xc002083f
c000810a:	e8 ca 90 00 00       	call   c00111d9 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 e8 07 02 c0       	push   0xc00207e8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 4d 08 02 c0       	push   0xc002084d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 69 08 02 c0       	push   0xc0020869
c0008331:	e8 a3 8e 00 00       	call   c00111d9 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 5d d7 00 00       	call   c0015adc <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 93 6e 01 00       	call   c001f2a0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 86 08 02 c0       	push   0xc0020886
c0008422:	e8 b2 8d 00 00       	call   c00111d9 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 12 50 00 00       	call   c000d51e <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 4a 03 01 00       	call   c001887c <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d c0 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd040]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d c0 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd040]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 78 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd188]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 50 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1b0]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 7c 00 01 00       	call   c0018710 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 d9 00 01 00       	jmp    c0018818 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 4d 8a 00 00       	jmp    c00111d9 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 72 37 00 00       	jmp    c000c05b <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ce 08 02 c0       	mov    esi,0xc00208ce
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 f0 fb 00 00       	call   c0018818 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 df 08 02 c0       	push   0xc00208df
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 e5 08 02 c0       	push   0xc00208e5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 00 30 02 c0       	mov    eax,ds:0xc0023000
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 00 30 02 c0    	mov    DWORD PTR ds:0xc0023000,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 9f 62 01 00       	call   c001f488 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 9f 61 01 00       	call   c001f55c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 93 61 01 00       	call   c001f564 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 99 60 01 00       	call   c001f488 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 94 09 02 c0       	push   0xc0020994
c0009414:	e8 c0 7d 00 00       	call   c00111d9 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 9e 60 01 00       	call   c001f55c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 2b 61 01 00       	call   c001f606 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 e9 5e 01 00       	call   c001f446 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 90 2f 02 c0       	push   0xc0022f90
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 44 f4 01 c0       	push   0xc001f444
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 08 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023008
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 08 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023008
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 04 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023004
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 04 30 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023004,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ec 09 02 c0       	push   0xc00209ec
c0009674:	e8 60 7b 00 00       	call   c00111d9 <KePanic(char const*)>
c0009679:	8b 2d 04 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023004
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 04 30 02 c0       	mov    eax,ds:0xc0023004
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 04 30 02 c0       	mov    ds:0xc0023004,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 0c 30 02 c0    	mov    edx,DWORD PTR ds:0xc002300c
c000973e:	8b 0d 14 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023014
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 10 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023010
c0009759:	8b 0d 0c 30 02 c0    	mov    ecx,DWORD PTR ds:0xc002300c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 80 0c 02 c0       	push   0xc0020c80
c000979e:	e8 36 7a 00 00       	call   c00111d9 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 97 0c 02 c0       	push   0xc0020c97
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 10 30 02 c0    	mov    DWORD PTR ds:0xc0023010,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 18 30 02 c0 43 	mov    BYTE PTR ds:0xc0023018,0x43
c000984f:	c7 05 0c 30 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002300c,0x8
c0009859:	a3 14 30 02 c0       	mov    ds:0xc0023014,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 10 30 02 c0       	mov    eax,ds:0xc0023010
c0009874:	f7 35 0c 30 02 c0    	div    DWORD PTR ds:0xc002300c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 0c 0a 02 c0       	push   0xc0020a0c
c00098af:	e8 25 79 00 00       	call   c00111d9 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ae 0c 02 c0       	push   0xc0020cae
c0009981:	e8 53 78 00 00       	call   c00111d9 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 30 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020a30
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 f0 77 00 00       	jmp    c00111d9 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ca 0c 02 c0       	push   0xc0020cca
c00099f6:	e8 de 77 00 00       	call   c00111d9 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 e6 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ce6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 94 77 00 00       	jmp    c00111d9 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 54 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a54
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 78 0a 02 c0       	push   0xc0020a78
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 e0 0a 02 c0       	push   0xc0020ae0
c0009d87:	e8 4d 74 00 00       	call   c00111d9 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 04 0b 02 c0       	push   0xc0020b04
c0009e7b:	e8 59 73 00 00       	call   c00111d9 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 30 0b 02 c0       	push   0xc0020b30
c0009fd9:	e8 fb 71 00 00       	call   c00111d9 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 c2 26 00 00       	call   c000c8d0 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 00 0d 02 c0       	push   0xc0020d00
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 0c 30 02 c0       	mov    eax,ds:0xc002300c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 18 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023018
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 9e 37 00 00       	call   c000da92 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 0c 30 02 c0    	cmp    DWORD PTR ds:0xc002300c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 54 0b 02 c0       	push   0xc0020b54
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 0e 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020d0e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 31 0d 02 c0       	push   0xc0020d31
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 1f 0d 02 c0       	push   0xc0020d1f
c000a413:	e8 c1 6d 00 00       	call   c00111d9 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 84 0b 02 c0       	push   0xc0020b84
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 0c 30 02 c0       	mov    eax,ds:0xc002300c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 18 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023018
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 5a 35 00 00       	call   c000da26 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 0c 30 02 c0    	cmp    DWORD PTR ds:0xc002300c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 44 0d 02 c0       	push   0xc0020d44
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 a4 0b 02 c0       	push   0xc0020ba4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 04 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c04
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 59 0d 02 c0       	push   0xc0020d59
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 6d 0d 02 c0       	push   0xc0020d6d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 80 0d 02 c0       	push   0xc0020d80
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 8d 0d 02 c0       	push   0xc0020d8d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ae 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dae
c000a7ec:	e8 e8 69 00 00       	call   c00111d9 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 c6 0d 02 c0       	push   0xc0020dc6
c000a7fe:	e8 d6 69 00 00       	call   c00111d9 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 dc 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf224]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 2c 0f 02 c0       	push   0xc0020f2c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 40 0f 02 c0       	push   0xc0020f40
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 4a 0f 02 c0       	push   0xc0020f4a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 54 0f 02 c0       	push   0xc0020f54
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 98 10 02 c0       	push   0xc0021098
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 5e 0f 02 c0       	push   0xc0020f5e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 b8 10 02 c0       	push   0xc00210b8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 73 0f 02 c0       	push   0xc0020f73
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 8d 0f 02 c0       	push   0xc0020f8d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 20 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfe0]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 e0 10 02 c0       	push   0xc00210e0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 98 10 02 c0       	push   0xc0021098
c000ab78:	e8 5c 66 00 00       	call   c00111d9 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 28 11 02 c0       	push   0xc0021128
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 28 11 02 c0       	push   0xc0021128
c000aba7:	e8 2d 66 00 00       	call   c00111d9 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 98 0f 02 c0       	push   0xc0020f98
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 98 0f 02 c0       	push   0xc0020f98
c000abd3:	e8 01 66 00 00       	call   c00111d9 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 b5 0f 02 c0       	push   0xc0020fb5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 b5 0f 02 c0       	push   0xc0020fb5
c000abff:	e8 d5 65 00 00       	call   c00111d9 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 48 11 02 c0       	push   0xc0021148
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 48 11 02 c0       	push   0xc0021148
c000ac2b:	e8 a9 65 00 00       	call   c00111d9 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 6c 11 02 c0       	push   0xc002116c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 6c 11 02 c0       	push   0xc002116c
c000ac57:	e8 7d 65 00 00       	call   c00111d9 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 d1 0f 02 c0       	push   0xc0020fd1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 d1 0f 02 c0       	push   0xc0020fd1
c000ac83:	e8 51 65 00 00       	call   c00111d9 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ed 0f 02 c0       	push   0xc0020fed
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ed 0f 02 c0       	push   0xc0020fed
c000acaf:	e8 25 65 00 00       	call   c00111d9 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 8c 11 02 c0       	push   0xc002118c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 8c 11 02 c0       	push   0xc002118c
c000acdb:	e8 f9 64 00 00       	call   c00111d9 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 b0 11 02 c0       	push   0xc00211b0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 b0 11 02 c0       	push   0xc00211b0
c000ad07:	e8 cd 64 00 00       	call   c00111d9 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 05 66 00 00       	call   c0011327 <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 cf 11 02 c0       	push   0xc00211cf
c000ad57:	e8 7d 64 00 00       	call   c00111d9 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 d8 11 02 c0       	push   0xc00211d8
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 8a 09 00 00       	call   c000b72e <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 f6 11 02 c0       	push   0xc00211f6
c000adb3:	e8 21 64 00 00       	call   c00111d9 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 25 0a 00 00       	call   c000b7ea <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 10 12 02 c0       	push   0xc0021210
c000add4:	e8 00 64 00 00       	call   c00111d9 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 2a 12 02 c0       	push   0xc002122a
c000ae1b:	e8 b9 63 00 00       	call   c00111d9 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 0f 0a 00 00       	call   c000b848 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 58             	sub    esp,0x58
c000af14:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c000af18:	53                   	push   ebx
c000af19:	e8 a8 ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af29:	09 d0                	or     eax,edx
c000af2b:	75 07                	jne    c000af34 <KeDereferenceSymlink(char const*, char*)+0x27>
c000af2d:	31 db                	xor    ebx,ebx
c000af2f:	e9 8b 01 00 00       	jmp    c000b0bf <KeDereferenceSymlink(char const*, char*)+0x1b2>
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	89 d7                	mov    edi,edx
c000af39:	68 14 01 00 00       	push   0x114
c000af3e:	e8 90 cb ff ff       	call   c0007ad3 <malloc>
c000af43:	83 c4 0c             	add    esp,0xc
c000af46:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af4c:	53                   	push   ebx
c000af4d:	50                   	push   eax
c000af4e:	89 c5                	mov    ebp,eax
c000af50:	e8 d9 07 00 00       	call   c000b72e <File::File(char const*, Process*)>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	85 ed                	test   ebp,ebp
c000af5a:	0f 84 45 01 00 00    	je     c000b0a5 <KeDereferenceSymlink(char const*, char*)+0x198>
c000af60:	51                   	push   ecx
c000af61:	51                   	push   ecx
c000af62:	6a 01                	push   0x1
c000af64:	55                   	push   ebp
c000af65:	e8 80 08 00 00       	call   c000b7ea <File::open(FileOpenMode)>
c000af6a:	83 c4 10             	add    esp,0x10
c000af6d:	85 c0                	test   eax,eax
c000af6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af72:	74 09                	je     c000af7d <KeDereferenceSymlink(char const*, char*)+0x70>
c000af74:	83 ec 0c             	sub    esp,0xc
c000af77:	55                   	push   ebp
c000af78:	e9 22 01 00 00       	jmp    c000b09f <KeDereferenceSymlink(char const*, char*)+0x192>
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 74 24 28          	lea    esi,[esp+0x28]
c000af84:	56                   	push   esi
c000af85:	8d 5c 24 47          	lea    ebx,[esp+0x47]
c000af89:	53                   	push   ebx
c000af8a:	6a 00                	push   0x0
c000af8c:	6a 08                	push   0x8
c000af8e:	55                   	push   ebp
c000af8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000af92:	83 c4 20             	add    esp,0x20
c000af95:	85 c0                	test   eax,eax
c000af97:	0f 85 f3 00 00 00    	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000af9d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000afa2:	0f 85 e8 00 00 00    	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000afa8:	52                   	push   edx
c000afa9:	52                   	push   edx
c000afaa:	68 44 12 02 c0       	push   0xc0021244
c000afaf:	53                   	push   ebx
c000afb0:	e8 cb 57 ff ff       	call   c0000780 <strcmp>
c000afb5:	83 c4 10             	add    esp,0x10
c000afb8:	85 c0                	test   eax,eax
c000afba:	89 c3                	mov    ebx,eax
c000afbc:	0f 85 ce 00 00 00    	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000afc8:	56                   	push   esi
c000afc9:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000afcd:	51                   	push   ecx
c000afce:	6a 00                	push   0x0
c000afd0:	6a 08                	push   0x8
c000afd2:	55                   	push   ebp
c000afd3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afd6:	83 c4 20             	add    esp,0x20
c000afd9:	85 c0                	test   eax,eax
c000afdb:	0f 85 af 00 00 00    	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000afe1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000afe6:	0f 85 a4 00 00 00    	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000afec:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000aff0:	0f 85 37 ff ff ff    	jne    c000af2d <KeDereferenceSymlink(char const*, char*)+0x20>
c000aff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000affa:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000affe:	0f 85 29 ff ff ff    	jne    c000af2d <KeDereferenceSymlink(char const*, char*)+0x20>
c000b004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b00c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b014:	50                   	push   eax
c000b015:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b019:	50                   	push   eax
c000b01a:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b01e:	50                   	push   eax
c000b01f:	55                   	push   ebp
c000b020:	e8 c7 0a 00 00       	call   c000baec <File::stat(unsigned long long*, bool*)>
c000b025:	83 c4 10             	add    esp,0x10
c000b028:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b02d:	85 c0                	test   eax,eax
c000b02f:	75 5f                	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000b031:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b035:	b9 0f 00 00 00       	mov    ecx,0xf
c000b03a:	89 c2                	mov    edx,eax
c000b03c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b040:	39 f1                	cmp    ecx,esi
c000b042:	19 fa                	sbb    edx,edi
c000b044:	73 4a                	jae    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000b046:	83 c6 f0             	add    esi,0xfffffff0
c000b049:	b9 ff 00 00 00       	mov    ecx,0xff
c000b04e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b052:	83 d7 ff             	adc    edi,0xffffffff
c000b055:	39 f1                	cmp    ecx,esi
c000b057:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b05b:	19 f8                	sbb    eax,edi
c000b05d:	72 46                	jb     c000b0a5 <KeDereferenceSymlink(char const*, char*)+0x198>
c000b05f:	83 ec 0c             	sub    esp,0xc
c000b062:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b065:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b069:	51                   	push   ecx
c000b06a:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b06e:	57                   	push   edi
c000b06f:	56                   	push   esi
c000b070:	55                   	push   ebp
c000b071:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b074:	83 c4 20             	add    esp,0x20
c000b077:	85 c0                	test   eax,eax
c000b079:	75 15                	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000b07b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b07f:	89 c7                	mov    edi,eax
c000b081:	c1 ff 1f             	sar    edi,0x1f
c000b084:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b088:	75 06                	jne    c000b090 <KeDereferenceSymlink(char const*, char*)+0x183>
c000b08a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b08e:	74 1a                	je     c000b0aa <KeDereferenceSymlink(char const*, char*)+0x19d>
c000b090:	83 ec 0c             	sub    esp,0xc
c000b093:	55                   	push   ebp
c000b094:	e8 af 07 00 00       	call   c000b848 <File::close()>
c000b099:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b09c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b09f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0a2:	83 c4 10             	add    esp,0x10
c000b0a5:	83 cb ff             	or     ebx,0xffffffff
c000b0a8:	eb 15                	jmp    c000b0bf <KeDereferenceSymlink(char const*, char*)+0x1b2>
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	55                   	push   ebp
c000b0ae:	e8 95 07 00 00       	call   c000b848 <File::close()>
c000b0b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b0b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b0b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0bc:	83 c4 10             	add    esp,0x10
c000b0bf:	83 c4 4c             	add    esp,0x4c
c000b0c2:	89 d8                	mov    eax,ebx
c000b0c4:	5b                   	pop    ebx
c000b0c5:	5e                   	pop    esi
c000b0c6:	5f                   	pop    edi
c000b0c7:	5d                   	pop    ebp
c000b0c8:	c3                   	ret    

c000b0c9 <KeCreateSymlink(char const*, char const*)>:
c000b0c9:	55                   	push   ebp
c000b0ca:	57                   	push   edi
c000b0cb:	56                   	push   esi
c000b0cc:	53                   	push   ebx
c000b0cd:	83 ec 38             	sub    esp,0x38
c000b0d0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b0d4:	68 14 01 00 00       	push   0x114
c000b0d9:	e8 f5 c9 ff ff       	call   c0007ad3 <malloc>
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b0e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0eb:	89 c3                	mov    ebx,eax
c000b0ed:	50                   	push   eax
c000b0ee:	e8 3b 06 00 00       	call   c000b72e <File::File(char const*, Process*)>
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	85 db                	test   ebx,ebx
c000b0f8:	b8 01 00 00 00       	mov    eax,0x1
c000b0fd:	0f 84 fb 00 00 00    	je     c000b1fe <KeCreateSymlink(char const*, char const*)+0x135>
c000b103:	52                   	push   edx
c000b104:	52                   	push   edx
c000b105:	6a 12                	push   0x12
c000b107:	53                   	push   ebx
c000b108:	e8 dd 06 00 00       	call   c000b7ea <File::open(FileOpenMode)>
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	85 c0                	test   eax,eax
c000b112:	74 0b                	je     c000b11f <KeCreateSymlink(char const*, char const*)+0x56>
c000b114:	83 ec 0c             	sub    esp,0xc
c000b117:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b119:	53                   	push   ebx
c000b11a:	e9 d4 00 00 00       	jmp    c000b1f3 <KeCreateSymlink(char const*, char const*)+0x12a>
c000b11f:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b123:	be b2 12 02 c0       	mov    esi,0xc00212b2
c000b128:	b9 09 00 00 00       	mov    ecx,0x9
c000b12d:	fc                   	cld    
c000b12e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b137:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b139:	56                   	push   esi
c000b13a:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b13e:	52                   	push   edx
c000b13f:	6a 00                	push   0x0
c000b141:	6a 08                	push   0x8
c000b143:	53                   	push   ebx
c000b144:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b147:	83 c4 20             	add    esp,0x20
c000b14a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b14f:	0f 85 90 00 00 00    	jne    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b155:	85 c0                	test   eax,eax
c000b157:	0f 85 88 00 00 00    	jne    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b15d:	e8 b2 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b162:	83 ec 0c             	sub    esp,0xc
c000b165:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b169:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b16d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b16f:	56                   	push   esi
c000b170:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b174:	52                   	push   edx
c000b175:	6a 00                	push   0x0
c000b177:	6a 08                	push   0x8
c000b179:	53                   	push   ebx
c000b17a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b17d:	83 c4 20             	add    esp,0x20
c000b180:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b185:	75 5e                	jne    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b187:	85 c0                	test   eax,eax
c000b189:	75 5a                	jne    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b18b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b18d:	83 ec 0c             	sub    esp,0xc
c000b190:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b193:	55                   	push   ebp
c000b194:	e8 e7 53 ff ff       	call   c0000580 <strlen>
c000b199:	31 d2                	xor    edx,edx
c000b19b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b19e:	55                   	push   ebp
c000b19f:	52                   	push   edx
c000b1a0:	50                   	push   eax
c000b1a1:	53                   	push   ebx
c000b1a2:	ff d7                	call   edi
c000b1a4:	83 c4 14             	add    esp,0x14
c000b1a7:	55                   	push   ebp
c000b1a8:	89 c6                	mov    esi,eax
c000b1aa:	e8 d1 53 ff ff       	call   c0000580 <strlen>
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b1b6:	75 2d                	jne    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b8:	85 f6                	test   esi,esi
c000b1ba:	75 29                	jne    c000b1e5 <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1bc:	50                   	push   eax
c000b1bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1c5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b1c9:	e8 89 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1d1:	e8 72 06 00 00       	call   c000b848 <File::close()>
c000b1d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	31 c0                	xor    eax,eax
c000b1e3:	eb 19                	jmp    c000b1fe <KeCreateSymlink(char const*, char const*)+0x135>
c000b1e5:	83 ec 0c             	sub    esp,0xc
c000b1e8:	53                   	push   ebx
c000b1e9:	e8 5a 06 00 00       	call   c000b848 <File::close()>
c000b1ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1f6:	83 c4 10             	add    esp,0x10
c000b1f9:	b8 01 00 00 00       	mov    eax,0x1
c000b1fe:	83 c4 2c             	add    esp,0x2c
c000b201:	5b                   	pop    ebx
c000b202:	5e                   	pop    esi
c000b203:	5f                   	pop    edi
c000b204:	5d                   	pop    ebp
c000b205:	c3                   	ret    

c000b206 <KeInitialiseSymlinks()>:
c000b206:	53                   	push   ebx
c000b207:	83 ec 10             	sub    esp,0x10
c000b20a:	6a 00                	push   0x0
c000b20c:	68 52 ae 00 c0       	push   0xc000ae52
c000b211:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b21b:	e8 d2 57 00 00       	call   c00109f2 <KeRegisterAtexit(void (*)(void*), void*)>
c000b220:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b227:	e8 a7 c8 ff ff       	call   c0007ad3 <malloc>
c000b22c:	83 c4 0c             	add    esp,0xc
c000b22f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b235:	68 d8 11 02 c0       	push   0xc00211d8
c000b23a:	50                   	push   eax
c000b23b:	89 c3                	mov    ebx,eax
c000b23d:	e8 ec 04 00 00       	call   c000b72e <File::File(char const*, Process*)>
c000b242:	83 c4 10             	add    esp,0x10
c000b245:	85 db                	test   ebx,ebx
c000b247:	75 10                	jne    c000b259 <KeInitialiseSymlinks()+0x53>
c000b249:	83 ec 0c             	sub    esp,0xc
c000b24c:	68 4c 12 02 c0       	push   0xc002124c
c000b251:	e8 83 5f 00 00       	call   c00111d9 <KePanic(char const*)>
c000b256:	83 c4 10             	add    esp,0x10
c000b259:	83 ec 0c             	sub    esp,0xc
c000b25c:	53                   	push   ebx
c000b25d:	e8 4c 08 00 00       	call   c000baae <File::exists()>
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	84 c0                	test   al,al
c000b267:	75 2d                	jne    c000b296 <KeInitialiseSymlinks()+0x90>
c000b269:	52                   	push   edx
c000b26a:	52                   	push   edx
c000b26b:	6a 12                	push   0x12
c000b26d:	53                   	push   ebx
c000b26e:	e8 77 05 00 00       	call   c000b7ea <File::open(FileOpenMode)>
c000b273:	83 c4 10             	add    esp,0x10
c000b276:	85 c0                	test   eax,eax
c000b278:	74 10                	je     c000b28a <KeInitialiseSymlinks()+0x84>
c000b27a:	83 ec 0c             	sub    esp,0xc
c000b27d:	68 69 12 02 c0       	push   0xc0021269
c000b282:	e8 52 5f 00 00       	call   c00111d9 <KePanic(char const*)>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	53                   	push   ebx
c000b28e:	e8 b5 05 00 00       	call   c000b848 <File::close()>
c000b293:	83 c4 10             	add    esp,0x10
c000b296:	85 db                	test   ebx,ebx
c000b298:	74 0c                	je     c000b2a6 <KeInitialiseSymlinks()+0xa0>
c000b29a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b29c:	83 ec 0c             	sub    esp,0xc
c000b29f:	53                   	push   ebx
c000b2a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	50                   	push   eax
c000b2a7:	50                   	push   eax
c000b2a8:	68 86 12 02 c0       	push   0xc0021286
c000b2ad:	68 94 12 02 c0       	push   0xc0021294
c000b2b2:	e8 12 fe ff ff       	call   c000b0c9 <KeCreateSymlink(char const*, char const*)>
c000b2b7:	83 c4 18             	add    esp,0x18
c000b2ba:	5b                   	pop    ebx
c000b2bb:	c3                   	ret    

c000b2bc <File::read(unsigned long long, void*, int*)>:
c000b2bc:	53                   	push   ebx
c000b2bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2cc:	83 f8 19             	cmp    eax,0x19
c000b2cf:	77 35                	ja     c000b306 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2d1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b2d8:	85 c0                	test   eax,eax
c000b2da:	74 2a                	je     c000b306 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2dc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2e2:	85 c0                	test   eax,eax
c000b2e4:	74 20                	je     c000b306 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ea:	74 21                	je     c000b30d <File::read(unsigned long long, void*, int*)+0x51>
c000b2ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2ee:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2f2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b300:	5b                   	pop    ebx
c000b301:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b304:	ff e0                	jmp    eax
c000b306:	b8 0b 00 00 00       	mov    eax,0xb
c000b30b:	eb 05                	jmp    c000b312 <File::read(unsigned long long, void*, int*)+0x56>
c000b30d:	b8 05 00 00 00       	mov    eax,0x5
c000b312:	5b                   	pop    ebx
c000b313:	c3                   	ret    

c000b314 <File::write(unsigned long long, void*, int*)>:
c000b314:	53                   	push   ebx
c000b315:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b319:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b324:	83 f8 19             	cmp    eax,0x19
c000b327:	77 35                	ja     c000b35e <File::write(unsigned long long, void*, int*)+0x4a>
c000b329:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b330:	85 c0                	test   eax,eax
c000b332:	74 2a                	je     c000b35e <File::write(unsigned long long, void*, int*)+0x4a>
c000b334:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33a:	85 c0                	test   eax,eax
c000b33c:	74 20                	je     c000b35e <File::write(unsigned long long, void*, int*)+0x4a>
c000b33e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b342:	74 21                	je     c000b365 <File::write(unsigned long long, void*, int*)+0x51>
c000b344:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b346:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b350:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b354:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b358:	5b                   	pop    ebx
c000b359:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b35c:	ff e0                	jmp    eax
c000b35e:	b8 0b 00 00 00       	mov    eax,0xb
c000b363:	eb 05                	jmp    c000b36a <File::write(unsigned long long, void*, int*)+0x56>
c000b365:	b8 05 00 00 00       	mov    eax,0x5
c000b36a:	5b                   	pop    ebx
c000b36b:	c3                   	ret    

c000b36c <Directory::read(unsigned long long, void*, int*)>:
c000b36c:	53                   	push   ebx
c000b36d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b375:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37c:	83 f8 19             	cmp    eax,0x19
c000b37f:	77 35                	ja     c000b3b6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b381:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b388:	85 c0                	test   eax,eax
c000b38a:	74 2a                	je     c000b3b6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b38c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b392:	85 c0                	test   eax,eax
c000b394:	74 20                	je     c000b3b6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b396:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39a:	74 21                	je     c000b3bd <Directory::read(unsigned long long, void*, int*)+0x51>
c000b39c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b39e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b0:	5b                   	pop    ebx
c000b3b1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b3b4:	ff e0                	jmp    eax
c000b3b6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bb:	eb 05                	jmp    c000b3c2 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b3bd:	b8 05 00 00 00       	mov    eax,0x5
c000b3c2:	5b                   	pop    ebx
c000b3c3:	c3                   	ret    

c000b3c4 <Directory::write(unsigned long long, void*, int*)>:
c000b3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b3d4:	83 fa 19             	cmp    edx,0x19
c000b3d7:	77 18                	ja     c000b3f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3d9:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b3e0:	85 d2                	test   edx,edx
c000b3e2:	74 0d                	je     c000b3f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3e4:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3eb:	19 c0                	sbb    eax,eax
c000b3ed:	83 e0 0a             	and    eax,0xa
c000b3f0:	40                   	inc    eax
c000b3f1:	c3                   	ret    

c000b3f2 <File::isAtty()>:
c000b3f2:	31 c0                	xor    eax,eax
c000b3f4:	c3                   	ret    
c000b3f5:	90                   	nop

c000b3f6 <Directory::isAtty()>:
c000b3f6:	31 c0                	xor    eax,eax
c000b3f8:	c3                   	ret    
c000b3f9:	90                   	nop

c000b3fa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3fa:	b8 0a 00 00 00       	mov    eax,0xa
c000b3ff:	c3                   	ret    

c000b400 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b400:	b8 0a 00 00 00       	mov    eax,0xa
c000b405:	c3                   	ret    

c000b406 <Filesystem::allocateSwapfile(char const*, int)>:
c000b406:	31 c0                	xor    eax,eax
c000b408:	31 d2                	xor    edx,edx
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <File::~File()>:
c000b40c:	83 ec 0c             	sub    esp,0xc
c000b40f:	ba 30 13 02 c0       	mov    edx,0xc0021330
c000b414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b418:	89 10                	mov    DWORD PTR [eax],edx
c000b41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41e:	83 ec 0c             	sub    esp,0xc
c000b421:	50                   	push   eax
c000b422:	e8 65 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	90                   	nop
c000b42b:	83 c4 0c             	add    esp,0xc
c000b42e:	c3                   	ret    
c000b42f:	90                   	nop

c000b430 <File::~File()>:
c000b430:	83 ec 0c             	sub    esp,0xc
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43a:	e8 cd ff ff ff       	call   c000b40c <File::~File()>
c000b43f:	83 c4 10             	add    esp,0x10
c000b442:	83 ec 08             	sub    esp,0x8
c000b445:	68 14 01 00 00       	push   0x114
c000b44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44e:	e8 b9 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	83 c4 0c             	add    esp,0xc
c000b459:	c3                   	ret    

c000b45a <Directory::~Directory()>:
c000b45a:	83 ec 0c             	sub    esp,0xc
c000b45d:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c000b462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b466:	89 10                	mov    DWORD PTR [eax],edx
c000b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	50                   	push   eax
c000b470:	e8 17 df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	90                   	nop
c000b479:	83 c4 0c             	add    esp,0xc
c000b47c:	c3                   	ret    
c000b47d:	90                   	nop

c000b47e <Directory::~Directory()>:
c000b47e:	83 ec 0c             	sub    esp,0xc
c000b481:	83 ec 0c             	sub    esp,0xc
c000b484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b488:	e8 cd ff ff ff       	call   c000b45a <Directory::~Directory()>
c000b48d:	83 c4 10             	add    esp,0x10
c000b490:	83 ec 08             	sub    esp,0x8
c000b493:	68 14 01 00 00       	push   0x114
c000b498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49c:	e8 6b f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4a1:	83 c4 10             	add    esp,0x10
c000b4a4:	83 c4 0c             	add    esp,0xc
c000b4a7:	c3                   	ret    

c000b4a8 <Filesystem::Filesystem()>:
c000b4a8:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c000b4ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4b1:	89 10                	mov    DWORD PTR [eax],edx
c000b4b3:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b4b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c4:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b4c9:	90                   	nop
c000b4ca:	c3                   	ret    
c000b4cb:	90                   	nop

c000b4cc <Filesystem::~Filesystem()>:
c000b4cc:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c000b4d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d5:	89 10                	mov    DWORD PTR [eax],edx
c000b4d7:	90                   	nop
c000b4d8:	c3                   	ret    
c000b4d9:	90                   	nop

c000b4da <Filesystem::~Filesystem()>:
c000b4da:	83 ec 0c             	sub    esp,0xc
c000b4dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4e1:	e8 e6 ff ff ff       	call   c000b4cc <Filesystem::~Filesystem()>
c000b4e6:	83 c4 04             	add    esp,0x4
c000b4e9:	83 ec 08             	sub    esp,0x8
c000b4ec:	6a 08                	push   0x8
c000b4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f2:	e8 15 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	83 c4 0c             	add    esp,0xc
c000b4fd:	c3                   	ret    

c000b4fe <Fs::getcwd(Process*, char*, int)>:
c000b4fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b502:	31 c0                	xor    eax,eax
c000b504:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b508:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b50b:	7d 15                	jge    c000b522 <Fs::getcwd(Process*, char*, int)+0x24>
c000b50d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b511:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b518:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b51b:	84 c9                	test   cl,cl
c000b51d:	74 06                	je     c000b525 <Fs::getcwd(Process*, char*, int)+0x27>
c000b51f:	40                   	inc    eax
c000b520:	eb e2                	jmp    c000b504 <Fs::getcwd(Process*, char*, int)+0x6>
c000b522:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b525:	31 c0                	xor    eax,eax
c000b527:	c3                   	ret    

c000b528 <Fs::initVFS()>:
c000b528:	83 ec 18             	sub    esp,0x18
c000b52b:	6a 08                	push   0x8
c000b52d:	e8 a1 c5 ff ff       	call   c0007ad3 <malloc>
c000b532:	89 04 24             	mov    DWORD PTR [esp],eax
c000b535:	e8 16 e1 00 00       	call   c0019650 <FAT::FAT()>
c000b53a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b541:	e8 8d c5 ff ff       	call   c0007ad3 <malloc>
c000b546:	89 04 24             	mov    DWORD PTR [esp],eax
c000b549:	e8 30 f0 00 00       	call   c001a57e <ISO9660::ISO9660()>
c000b54e:	83 c4 1c             	add    esp,0x1c
c000b551:	c3                   	ret    

c000b552 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b552:	55                   	push   ebp
c000b553:	57                   	push   edi
c000b554:	56                   	push   esi
c000b555:	53                   	push   ebx
c000b556:	81 ec 20 04 00 00    	sub    esp,0x420
c000b55c:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b563:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b56a:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b571:	68 00 04 00 00       	push   0x400
c000b576:	6a 00                	push   0x0
c000b578:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b57c:	56                   	push   esi
c000b57d:	e8 6e 4f ff ff       	call   c00004f0 <memset>
c000b582:	83 c4 10             	add    esp,0x10
c000b585:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b589:	75 0b                	jne    c000b596 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b58b:	50                   	push   eax
c000b58c:	50                   	push   eax
c000b58d:	57                   	push   edi
c000b58e:	56                   	push   esi
c000b58f:	e8 bc 50 ff ff       	call   c0000650 <strcpy>
c000b594:	eb 45                	jmp    c000b5db <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b596:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b599:	83 f8 2f             	cmp    eax,0x2f
c000b59c:	74 05                	je     c000b5a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b59e:	83 f8 5c             	cmp    eax,0x5c
c000b5a1:	75 19                	jne    c000b5bc <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b5a3:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b5a6:	3c 60                	cmp    al,0x60
c000b5a8:	7e 03                	jle    c000b5ad <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b5aa:	83 e8 20             	sub    eax,0x20
c000b5ad:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b5b1:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b5b8:	50                   	push   eax
c000b5b9:	50                   	push   eax
c000b5ba:	eb 18                	jmp    c000b5d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b5bc:	50                   	push   eax
c000b5bd:	50                   	push   eax
c000b5be:	55                   	push   ebp
c000b5bf:	56                   	push   esi
c000b5c0:	e8 8b 50 ff ff       	call   c0000650 <strcpy>
c000b5c5:	5a                   	pop    edx
c000b5c6:	59                   	pop    ecx
c000b5c7:	68 83 22 02 c0       	push   0xc0022283
c000b5cc:	56                   	push   esi
c000b5cd:	e8 9e 52 ff ff       	call   c0000870 <strcat>
c000b5d2:	5d                   	pop    ebp
c000b5d3:	58                   	pop    eax
c000b5d4:	57                   	push   edi
c000b5d5:	56                   	push   esi
c000b5d6:	e8 95 52 ff ff       	call   c0000870 <strcat>
c000b5db:	83 c4 10             	add    esp,0x10
c000b5de:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b5e2:	3c 60                	cmp    al,0x60
c000b5e4:	7e 03                	jle    c000b5e9 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b5e6:	83 e8 20             	sub    eax,0x20
c000b5e9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b5ed:	88 03                	mov    BYTE PTR [ebx],al
c000b5ef:	b8 03 00 00 00       	mov    eax,0x3
c000b5f4:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b5fb:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b601:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b605:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b60d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b611:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b616:	89 fa                	mov    edx,edi
c000b618:	0f be ea             	movsx  ebp,dl
c000b61b:	85 ed                	test   ebp,ebp
c000b61d:	0f 84 af 00 00 00    	je     c000b6d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b627:	42                   	inc    edx
c000b628:	83 fd 2f             	cmp    ebp,0x2f
c000b62b:	74 05                	je     c000b632 <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b62d:	83 fd 5c             	cmp    ebp,0x5c
c000b630:	75 14                	jne    c000b646 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b632:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b637:	89 c5                	mov    ebp,eax
c000b639:	74 0b                	je     c000b646 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b63b:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b63f:	40                   	inc    eax
c000b640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b644:	eb c7                	jmp    c000b60d <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b646:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b64a:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b64f:	89 f9                	mov    ecx,edi
c000b651:	0f be e9             	movsx  ebp,cl
c000b654:	75 63                	jne    c000b6b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b656:	83 fd 2e             	cmp    ebp,0x2e
c000b659:	75 5e                	jne    c000b6b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b65b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b65f:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b664:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b669:	74 18                	je     c000b683 <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b66b:	83 fd 2e             	cmp    ebp,0x2e
c000b66e:	74 57                	je     c000b6c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b670:	89 ca                	mov    edx,ecx
c000b672:	42                   	inc    edx
c000b673:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b677:	83 f9 2f             	cmp    ecx,0x2f
c000b67a:	74 f6                	je     c000b672 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b67c:	83 f9 5c             	cmp    ecx,0x5c
c000b67f:	74 f1                	je     c000b672 <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b681:	eb bd                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b683:	83 fd 2e             	cmp    ebp,0x2e
c000b686:	74 3f                	je     c000b6c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b688:	83 f8 03             	cmp    eax,0x3
c000b68b:	74 b3                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b68d:	42                   	inc    edx
c000b68e:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b692:	83 f9 2f             	cmp    ecx,0x2f
c000b695:	74 f6                	je     c000b68d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b697:	83 f9 5c             	cmp    ecx,0x5c
c000b69a:	74 f1                	je     c000b68d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b69c:	48                   	dec    eax
c000b69d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6a1:	75 06                	jne    c000b6a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b6a3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6a7:	eb f3                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b6a9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6ad:	74 07                	je     c000b6b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b6af:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6b3:	48                   	dec    eax
c000b6b4:	eb f3                	jmp    c000b6a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b6b6:	40                   	inc    eax
c000b6b7:	eb 87                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6b9:	83 fd 2f             	cmp    ebp,0x2f
c000b6bc:	74 82                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6be:	83 fd 5c             	cmp    ebp,0x5c
c000b6c1:	0f 84 79 ff ff ff    	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6c7:	89 f9                	mov    ecx,edi
c000b6c9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b6cc:	40                   	inc    eax
c000b6cd:	e9 6e ff ff ff       	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6d2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6d6:	83 ec 0c             	sub    esp,0xc
c000b6d9:	53                   	push   ebx
c000b6da:	e8 a1 4e ff ff       	call   c0000580 <strlen>
c000b6df:	83 c4 10             	add    esp,0x10
c000b6e2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6e7:	75 26                	jne    c000b70f <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b6e9:	83 ec 0c             	sub    esp,0xc
c000b6ec:	53                   	push   ebx
c000b6ed:	e8 8e 4e ff ff       	call   c0000580 <strlen>
c000b6f2:	83 c4 10             	add    esp,0x10
c000b6f5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6fa:	74 26                	je     c000b722 <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b6fc:	83 ec 0c             	sub    esp,0xc
c000b6ff:	53                   	push   ebx
c000b700:	e8 7b 4e ff ff       	call   c0000580 <strlen>
c000b705:	83 c4 10             	add    esp,0x10
c000b708:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b70d:	eb c7                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b70f:	83 ec 0c             	sub    esp,0xc
c000b712:	53                   	push   ebx
c000b713:	e8 68 4e ff ff       	call   c0000580 <strlen>
c000b718:	83 c4 10             	add    esp,0x10
c000b71b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b720:	74 c7                	je     c000b6e9 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b722:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b728:	5b                   	pop    ebx
c000b729:	5e                   	pop    esi
c000b72a:	5f                   	pop    edi
c000b72b:	5d                   	pop    ebp
c000b72c:	c3                   	ret    
c000b72d:	90                   	nop

c000b72e <File::File(char const*, Process*)>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b735:	83 ec 08             	sub    esp,0x8
c000b738:	6a 00                	push   0x0
c000b73a:	50                   	push   eax
c000b73b:	e8 66 da ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b740:	83 c4 10             	add    esp,0x10
c000b743:	ba 30 13 02 c0       	mov    edx,0xc0021330
c000b748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74c:	89 10                	mov    DWORD PTR [eax],edx
c000b74e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b752:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75c:	83 c0 0d             	add    eax,0xd
c000b75f:	83 ec 04             	sub    esp,0x4
c000b762:	52                   	push   edx
c000b763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b767:	50                   	push   eax
c000b768:	e8 e5 fd ff ff       	call   c000b552 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b76d:	83 c4 10             	add    esp,0x10
c000b770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b774:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b777:	83 e8 41             	sub    eax,0x41
c000b77a:	88 c2                	mov    dl,al
c000b77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b780:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b792:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b798:	0f b6 c0             	movzx  eax,al
c000b79b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7a2:	85 c0                	test   eax,eax
c000b7a4:	74 3e                	je     c000b7e4 <File::File(char const*, Process*)+0xb6>
c000b7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7aa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7b0:	0f b6 c0             	movzx  eax,al
c000b7b3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7ba:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b7c0:	85 c0                	test   eax,eax
c000b7c2:	75 20                	jne    c000b7e4 <File::File(char const*, Process*)+0xb6>
c000b7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7ce:	0f b6 c0             	movzx  eax,al
c000b7d1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	50                   	push   eax
c000b7dc:	e8 83 21 00 00       	call   c000d964 <LogicalDisk::mount()>
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	90                   	nop
c000b7e5:	83 c4 0c             	add    esp,0xc
c000b7e8:	c3                   	ret    
c000b7e9:	90                   	nop

c000b7ea <File::open(FileOpenMode)>:
c000b7ea:	53                   	push   ebx
c000b7eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b7f0:	83 ec 08             	sub    esp,0x8
c000b7f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7fe:	83 fa 19             	cmp    edx,0x19
c000b801:	77 40                	ja     c000b843 <File::open(FileOpenMode)+0x59>
c000b803:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b80a:	85 d2                	test   edx,edx
c000b80c:	74 35                	je     c000b843 <File::open(FileOpenMode)+0x59>
c000b80e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b814:	85 d2                	test   edx,edx
c000b816:	74 2b                	je     c000b843 <File::open(FileOpenMode)+0x59>
c000b818:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b81c:	b8 06 00 00 00       	mov    eax,0x6
c000b821:	75 20                	jne    c000b843 <File::open(FileOpenMode)+0x59>
c000b823:	8b 02                	mov    eax,DWORD PTR [edx]
c000b825:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b82f:	51                   	push   ecx
c000b830:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b833:	51                   	push   ecx
c000b834:	52                   	push   edx
c000b835:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b838:	83 c4 10             	add    esp,0x10
c000b83b:	85 c0                	test   eax,eax
c000b83d:	75 04                	jne    c000b843 <File::open(FileOpenMode)+0x59>
c000b83f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b843:	83 c4 08             	add    esp,0x8
c000b846:	5b                   	pop    ebx
c000b847:	c3                   	ret    

c000b848 <File::close()>:
c000b848:	53                   	push   ebx
c000b849:	b8 0b 00 00 00       	mov    eax,0xb
c000b84e:	83 ec 08             	sub    esp,0x8
c000b851:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b855:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b85c:	83 f9 19             	cmp    ecx,0x19
c000b85f:	77 41                	ja     c000b8a2 <File::close()+0x5a>
c000b861:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b868:	85 db                	test   ebx,ebx
c000b86a:	74 36                	je     c000b8a2 <File::close()+0x5a>
c000b86c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b873:	74 2d                	je     c000b8a2 <File::close()+0x5a>
c000b875:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b879:	b8 05 00 00 00       	mov    eax,0x5
c000b87e:	74 22                	je     c000b8a2 <File::close()+0x5a>
c000b880:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b884:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b88b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b891:	53                   	push   ebx
c000b892:	53                   	push   ebx
c000b893:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b895:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b89b:	50                   	push   eax
c000b89c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b89f:	83 c4 10             	add    esp,0x10
c000b8a2:	83 c4 08             	add    esp,0x8
c000b8a5:	5b                   	pop    ebx
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <File::seek(unsigned long long)>:
c000b8a8:	56                   	push   esi
c000b8a9:	b8 0b 00 00 00       	mov    eax,0xb
c000b8ae:	53                   	push   ebx
c000b8af:	51                   	push   ecx
c000b8b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8bc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8c3:	83 fa 19             	cmp    edx,0x19
c000b8c6:	77 31                	ja     c000b8f9 <File::seek(unsigned long long)+0x51>
c000b8c8:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8cf:	85 d2                	test   edx,edx
c000b8d1:	74 26                	je     c000b8f9 <File::seek(unsigned long long)+0x51>
c000b8d3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8d9:	85 d2                	test   edx,edx
c000b8db:	74 1c                	je     c000b8f9 <File::seek(unsigned long long)+0x51>
c000b8dd:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8e1:	b8 05 00 00 00       	mov    eax,0x5
c000b8e6:	74 11                	je     c000b8f9 <File::seek(unsigned long long)+0x51>
c000b8e8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8ea:	53                   	push   ebx
c000b8eb:	51                   	push   ecx
c000b8ec:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8f2:	52                   	push   edx
c000b8f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8f6:	83 c4 10             	add    esp,0x10
c000b8f9:	5a                   	pop    edx
c000b8fa:	5b                   	pop    ebx
c000b8fb:	5e                   	pop    esi
c000b8fc:	c3                   	ret    
c000b8fd:	90                   	nop

c000b8fe <File::truncate(unsigned long long)>:
c000b8fe:	56                   	push   esi
c000b8ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b904:	53                   	push   ebx
c000b905:	51                   	push   ecx
c000b906:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b90a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b90e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b912:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b919:	83 fa 19             	cmp    edx,0x19
c000b91c:	77 31                	ja     c000b94f <File::truncate(unsigned long long)+0x51>
c000b91e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b925:	85 d2                	test   edx,edx
c000b927:	74 26                	je     c000b94f <File::truncate(unsigned long long)+0x51>
c000b929:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b92f:	85 d2                	test   edx,edx
c000b931:	74 1c                	je     c000b94f <File::truncate(unsigned long long)+0x51>
c000b933:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b937:	b8 05 00 00 00       	mov    eax,0x5
c000b93c:	74 11                	je     c000b94f <File::truncate(unsigned long long)+0x51>
c000b93e:	8b 02                	mov    eax,DWORD PTR [edx]
c000b940:	53                   	push   ebx
c000b941:	51                   	push   ecx
c000b942:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b948:	52                   	push   edx
c000b949:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b94c:	83 c4 10             	add    esp,0x10
c000b94f:	5a                   	pop    edx
c000b950:	5b                   	pop    ebx
c000b951:	5e                   	pop    esi
c000b952:	c3                   	ret    
c000b953:	90                   	nop

c000b954 <File::tell(unsigned long long*)>:
c000b954:	83 ec 0c             	sub    esp,0xc
c000b957:	b8 0b 00 00 00       	mov    eax,0xb
c000b95c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b960:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b967:	83 fa 19             	cmp    edx,0x19
c000b96a:	77 34                	ja     c000b9a0 <File::tell(unsigned long long*)+0x4c>
c000b96c:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b973:	85 d2                	test   edx,edx
c000b975:	74 29                	je     c000b9a0 <File::tell(unsigned long long*)+0x4c>
c000b977:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b97d:	85 d2                	test   edx,edx
c000b97f:	74 1f                	je     c000b9a0 <File::tell(unsigned long long*)+0x4c>
c000b981:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b985:	b8 05 00 00 00       	mov    eax,0x5
c000b98a:	74 14                	je     c000b9a0 <File::tell(unsigned long long*)+0x4c>
c000b98c:	50                   	push   eax
c000b98d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b98f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b993:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b999:	52                   	push   edx
c000b99a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b99d:	83 c4 10             	add    esp,0x10
c000b9a0:	83 c4 0c             	add    esp,0xc
c000b9a3:	c3                   	ret    

c000b9a4 <File::rewind()>:
c000b9a4:	83 ec 10             	sub    esp,0x10
c000b9a7:	6a 00                	push   0x0
c000b9a9:	6a 00                	push   0x0
c000b9ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9af:	e8 f4 fe ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c000b9b4:	83 c4 1c             	add    esp,0x1c
c000b9b7:	c3                   	ret    

c000b9b8 <File::unlink()>:
c000b9b8:	83 ec 0c             	sub    esp,0xc
c000b9bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b9c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9cb:	83 f9 19             	cmp    ecx,0x19
c000b9ce:	77 2f                	ja     c000b9ff <File::unlink()+0x47>
c000b9d0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9d7:	85 c9                	test   ecx,ecx
c000b9d9:	74 24                	je     c000b9ff <File::unlink()+0x47>
c000b9db:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9e1:	85 c9                	test   ecx,ecx
c000b9e3:	74 1a                	je     c000b9ff <File::unlink()+0x47>
c000b9e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9e9:	b8 06 00 00 00       	mov    eax,0x6
c000b9ee:	75 0f                	jne    c000b9ff <File::unlink()+0x47>
c000b9f0:	50                   	push   eax
c000b9f1:	83 c2 0d             	add    edx,0xd
c000b9f4:	50                   	push   eax
c000b9f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9f7:	52                   	push   edx
c000b9f8:	51                   	push   ecx
c000b9f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9fc:	83 c4 10             	add    esp,0x10
c000b9ff:	83 c4 0c             	add    esp,0xc
c000ba02:	c3                   	ret    
c000ba03:	90                   	nop

c000ba04 <File::rename(char const*)>:
c000ba04:	83 ec 0c             	sub    esp,0xc
c000ba07:	b8 0b 00 00 00       	mov    eax,0xb
c000ba0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba17:	83 f9 19             	cmp    ecx,0x19
c000ba1a:	77 32                	ja     c000ba4e <File::rename(char const*)+0x4a>
c000ba1c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba23:	85 c9                	test   ecx,ecx
c000ba25:	74 27                	je     c000ba4e <File::rename(char const*)+0x4a>
c000ba27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba2d:	85 c9                	test   ecx,ecx
c000ba2f:	74 1d                	je     c000ba4e <File::rename(char const*)+0x4a>
c000ba31:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba35:	b8 06 00 00 00       	mov    eax,0x6
c000ba3a:	75 12                	jne    c000ba4e <File::rename(char const*)+0x4a>
c000ba3c:	50                   	push   eax
c000ba3d:	83 c2 0d             	add    edx,0xd
c000ba40:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba46:	52                   	push   edx
c000ba47:	51                   	push   ecx
c000ba48:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba4b:	83 c4 10             	add    esp,0x10
c000ba4e:	83 c4 0c             	add    esp,0xc
c000ba51:	c3                   	ret    

c000ba52 <File::chfatattr(unsigned char, unsigned char)>:
c000ba52:	57                   	push   edi
c000ba53:	b8 0b 00 00 00       	mov    eax,0xb
c000ba58:	56                   	push   esi
c000ba59:	53                   	push   ebx
c000ba5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba62:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba6d:	83 f9 19             	cmp    ecx,0x19
c000ba70:	77 37                	ja     c000baa9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba72:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba79:	85 c9                	test   ecx,ecx
c000ba7b:	74 2c                	je     c000baa9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba7d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba83:	85 c9                	test   ecx,ecx
c000ba85:	74 22                	je     c000baa9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba8b:	b8 06 00 00 00       	mov    eax,0x6
c000ba90:	75 17                	jne    c000baa9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba92:	89 f0                	mov    eax,esi
c000ba94:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba96:	0f b6 db             	movzx  ebx,bl
c000ba99:	0f b6 f0             	movzx  esi,al
c000ba9c:	83 c2 0d             	add    edx,0xd
c000ba9f:	56                   	push   esi
c000baa0:	53                   	push   ebx
c000baa1:	52                   	push   edx
c000baa2:	51                   	push   ecx
c000baa3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	5b                   	pop    ebx
c000baaa:	5e                   	pop    esi
c000baab:	5f                   	pop    edi
c000baac:	c3                   	ret    
c000baad:	90                   	nop

c000baae <File::exists()>:
c000baae:	83 ec 0c             	sub    esp,0xc
c000bab1:	31 c0                	xor    eax,eax
c000bab3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bab7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000babe:	83 f9 19             	cmp    ecx,0x19
c000bac1:	77 24                	ja     c000bae7 <File::exists()+0x39>
c000bac3:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000baca:	85 c9                	test   ecx,ecx
c000bacc:	74 19                	je     c000bae7 <File::exists()+0x39>
c000bace:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bad4:	85 c9                	test   ecx,ecx
c000bad6:	74 0f                	je     c000bae7 <File::exists()+0x39>
c000bad8:	50                   	push   eax
c000bad9:	83 c2 0d             	add    edx,0xd
c000badc:	50                   	push   eax
c000badd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000badf:	52                   	push   edx
c000bae0:	51                   	push   ecx
c000bae1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bae4:	83 c4 10             	add    esp,0x10
c000bae7:	83 c4 0c             	add    esp,0xc
c000baea:	c3                   	ret    
c000baeb:	90                   	nop

c000baec <File::stat(unsigned long long*, bool*)>:
c000baec:	56                   	push   esi
c000baed:	53                   	push   ebx
c000baee:	50                   	push   eax
c000baef:	b8 0b 00 00 00       	mov    eax,0xb
c000baf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baf8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bafc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb07:	83 f9 19             	cmp    ecx,0x19
c000bb0a:	77 3d                	ja     c000bb49 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb0c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb13:	85 c9                	test   ecx,ecx
c000bb15:	74 32                	je     c000bb49 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb1d:	85 c9                	test   ecx,ecx
c000bb1f:	74 28                	je     c000bb49 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb21:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb27:	74 13                	je     c000bb3c <File::stat(unsigned long long*, bool*)+0x50>
c000bb29:	83 ec 04             	sub    esp,0x4
c000bb2c:	56                   	push   esi
c000bb2d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb33:	51                   	push   ecx
c000bb34:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb37:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb3a:	eb 0a                	jmp    c000bb46 <File::stat(unsigned long long*, bool*)+0x5a>
c000bb3c:	53                   	push   ebx
c000bb3d:	83 c2 0d             	add    edx,0xd
c000bb40:	56                   	push   esi
c000bb41:	52                   	push   edx
c000bb42:	51                   	push   ecx
c000bb43:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	5a                   	pop    edx
c000bb4a:	5b                   	pop    ebx
c000bb4b:	5e                   	pop    esi
c000bb4c:	c3                   	ret    

c000bb4d <Fs::setcwd(Process*, char*)>:
c000bb4d:	55                   	push   ebp
c000bb4e:	57                   	push   edi
c000bb4f:	56                   	push   esi
c000bb50:	53                   	push   ebx
c000bb51:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb57:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb5e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb64:	57                   	push   edi
c000bb65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb6c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb70:	56                   	push   esi
c000bb71:	e8 dc f9 ff ff       	call   c000b552 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb76:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb79:	e8 02 4a ff ff       	call   c0000580 <strlen>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	83 f8 02             	cmp    eax,0x2
c000bb84:	77 15                	ja     c000bb9b <Fs::setcwd(Process*, char*)+0x4e>
c000bb86:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb8b:	83 eb 41             	sub    ebx,0x41
c000bb8e:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bb95:	85 c0                	test   eax,eax
c000bb97:	75 1c                	jne    c000bbb5 <Fs::setcwd(Process*, char*)+0x68>
c000bb99:	eb 2f                	jmp    c000bbca <Fs::setcwd(Process*, char*)+0x7d>
c000bb9b:	83 ec 0c             	sub    esp,0xc
c000bb9e:	56                   	push   esi
c000bb9f:	e8 dc 49 ff ff       	call   c0000580 <strlen>
c000bba4:	83 c4 10             	add    esp,0x10
c000bba7:	83 f8 03             	cmp    eax,0x3
c000bbaa:	75 57                	jne    c000bc03 <Fs::setcwd(Process*, char*)+0xb6>
c000bbac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bbb1:	75 50                	jne    c000bc03 <Fs::setcwd(Process*, char*)+0xb6>
c000bbb3:	eb d1                	jmp    c000bb86 <Fs::setcwd(Process*, char*)+0x39>
c000bbb5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bbbc:	75 0c                	jne    c000bbca <Fs::setcwd(Process*, char*)+0x7d>
c000bbbe:	83 ec 0c             	sub    esp,0xc
c000bbc1:	50                   	push   eax
c000bbc2:	e8 9d 1d 00 00       	call   c000d964 <LogicalDisk::mount()>
c000bbc7:	83 c4 10             	add    esp,0x10
c000bbca:	83 fb 19             	cmp    ebx,0x19
c000bbcd:	b8 03 00 00 00       	mov    eax,0x3
c000bbd2:	0f 87 c6 00 00 00    	ja     c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bbd8:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bbdf:	b8 05 00 00 00       	mov    eax,0x5
c000bbe4:	85 d2                	test   edx,edx
c000bbe6:	0f 84 b2 00 00 00    	je     c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bbec:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbf3:	b8 06 00 00 00       	mov    eax,0x6
c000bbf8:	0f 85 92 00 00 00    	jne    c000bc90 <Fs::setcwd(Process*, char*)+0x143>
c000bbfe:	e9 9b 00 00 00       	jmp    c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bc03:	83 ec 0c             	sub    esp,0xc
c000bc06:	68 14 01 00 00       	push   0x114
c000bc0b:	e8 c3 be ff ff       	call   c0007ad3 <malloc>
c000bc10:	83 c4 0c             	add    esp,0xc
c000bc13:	55                   	push   ebp
c000bc14:	56                   	push   esi
c000bc15:	50                   	push   eax
c000bc16:	89 c3                	mov    ebx,eax
c000bc18:	e8 11 fb ff ff       	call   c000b72e <File::File(char const*, Process*)>
c000bc1d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bc22:	83 c4 0c             	add    esp,0xc
c000bc25:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bc29:	50                   	push   eax
c000bc2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bc2e:	50                   	push   eax
c000bc2f:	53                   	push   ebx
c000bc30:	e8 b7 fe ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c000bc35:	83 c4 10             	add    esp,0x10
c000bc38:	83 f8 02             	cmp    eax,0x2
c000bc3b:	74 27                	je     c000bc64 <Fs::setcwd(Process*, char*)+0x117>
c000bc3d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc42:	75 1c                	jne    c000bc60 <Fs::setcwd(Process*, char*)+0x113>
c000bc44:	85 db                	test   ebx,ebx
c000bc46:	b8 02 00 00 00       	mov    eax,0x2
c000bc4b:	74 51                	je     c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bc4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc4f:	83 ec 0c             	sub    esp,0xc
c000bc52:	53                   	push   ebx
c000bc53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc56:	83 c4 10             	add    esp,0x10
c000bc59:	b8 02 00 00 00       	mov    eax,0x2
c000bc5e:	eb 3e                	jmp    c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bc60:	85 c0                	test   eax,eax
c000bc62:	74 1c                	je     c000bc80 <Fs::setcwd(Process*, char*)+0x133>
c000bc64:	85 db                	test   ebx,ebx
c000bc66:	b8 01 00 00 00       	mov    eax,0x1
c000bc6b:	74 31                	je     c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bc6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc6f:	83 ec 0c             	sub    esp,0xc
c000bc72:	53                   	push   ebx
c000bc73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	b8 01 00 00 00       	mov    eax,0x1
c000bc7e:	eb 1e                	jmp    c000bc9e <Fs::setcwd(Process*, char*)+0x151>
c000bc80:	85 db                	test   ebx,ebx
c000bc82:	74 0c                	je     c000bc90 <Fs::setcwd(Process*, char*)+0x143>
c000bc84:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	53                   	push   ebx
c000bc8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc8d:	83 c4 10             	add    esp,0x10
c000bc90:	50                   	push   eax
c000bc91:	50                   	push   eax
c000bc92:	56                   	push   esi
c000bc93:	57                   	push   edi
c000bc94:	e8 b7 49 ff ff       	call   c0000650 <strcpy>
c000bc99:	83 c4 10             	add    esp,0x10
c000bc9c:	31 c0                	xor    eax,eax
c000bc9e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bca4:	5b                   	pop    ebx
c000bca5:	5e                   	pop    esi
c000bca6:	5f                   	pop    edi
c000bca7:	5d                   	pop    ebp
c000bca8:	c3                   	ret    
c000bca9:	90                   	nop

c000bcaa <Directory::Directory(char const*, Process*)>:
c000bcaa:	83 ec 0c             	sub    esp,0xc
c000bcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb1:	83 ec 08             	sub    esp,0x8
c000bcb4:	6a 00                	push   0x0
c000bcb6:	50                   	push   eax
c000bcb7:	e8 ea d4 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bcbc:	83 c4 10             	add    esp,0x10
c000bcbf:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c000bcc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc8:	89 10                	mov    DWORD PTR [eax],edx
c000bcca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd8:	83 c0 0d             	add    eax,0xd
c000bcdb:	83 ec 04             	sub    esp,0x4
c000bcde:	52                   	push   edx
c000bcdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce3:	50                   	push   eax
c000bce4:	e8 69 f8 ff ff       	call   c000b552 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcf3:	83 e8 41             	sub    eax,0x41
c000bcf6:	88 c2                	mov    dl,al
c000bcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd14:	0f b6 c0             	movzx  eax,al
c000bd17:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd1e:	85 c0                	test   eax,eax
c000bd20:	74 3e                	je     c000bd60 <Directory::Directory(char const*, Process*)+0xb6>
c000bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd26:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd2c:	0f b6 c0             	movzx  eax,al
c000bd2f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd36:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd3c:	85 c0                	test   eax,eax
c000bd3e:	75 20                	jne    c000bd60 <Directory::Directory(char const*, Process*)+0xb6>
c000bd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd4a:	0f b6 c0             	movzx  eax,al
c000bd4d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd54:	83 ec 0c             	sub    esp,0xc
c000bd57:	50                   	push   eax
c000bd58:	e8 07 1c 00 00       	call   c000d964 <LogicalDisk::mount()>
c000bd5d:	83 c4 10             	add    esp,0x10
c000bd60:	90                   	nop
c000bd61:	83 c4 0c             	add    esp,0xc
c000bd64:	c3                   	ret    
c000bd65:	90                   	nop

c000bd66 <Directory::open()>:
c000bd66:	53                   	push   ebx
c000bd67:	b8 0b 00 00 00       	mov    eax,0xb
c000bd6c:	83 ec 08             	sub    esp,0x8
c000bd6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd73:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd7a:	83 fa 19             	cmp    edx,0x19
c000bd7d:	77 3d                	ja     c000bdbc <Directory::open()+0x56>
c000bd7f:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bd86:	85 d2                	test   edx,edx
c000bd88:	74 32                	je     c000bdbc <Directory::open()+0x56>
c000bd8a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd90:	85 d2                	test   edx,edx
c000bd92:	74 28                	je     c000bdbc <Directory::open()+0x56>
c000bd94:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd98:	b8 06 00 00 00       	mov    eax,0x6
c000bd9d:	75 1d                	jne    c000bdbc <Directory::open()+0x56>
c000bd9f:	50                   	push   eax
c000bda0:	8b 02                	mov    eax,DWORD PTR [edx]
c000bda2:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bda8:	51                   	push   ecx
c000bda9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bdac:	51                   	push   ecx
c000bdad:	52                   	push   edx
c000bdae:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	85 c0                	test   eax,eax
c000bdb6:	75 04                	jne    c000bdbc <Directory::open()+0x56>
c000bdb8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bdbc:	83 c4 08             	add    esp,0x8
c000bdbf:	5b                   	pop    ebx
c000bdc0:	c3                   	ret    
c000bdc1:	90                   	nop

c000bdc2 <Directory::close()>:
c000bdc2:	53                   	push   ebx
c000bdc3:	b8 0b 00 00 00       	mov    eax,0xb
c000bdc8:	83 ec 08             	sub    esp,0x8
c000bdcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdcf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdd6:	83 f9 19             	cmp    ecx,0x19
c000bdd9:	77 41                	ja     c000be1c <Directory::close()+0x5a>
c000bddb:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bde2:	85 db                	test   ebx,ebx
c000bde4:	74 36                	je     c000be1c <Directory::close()+0x5a>
c000bde6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bded:	74 2d                	je     c000be1c <Directory::close()+0x5a>
c000bdef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdf3:	b8 05 00 00 00       	mov    eax,0x5
c000bdf8:	74 22                	je     c000be1c <Directory::close()+0x5a>
c000bdfa:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bdfe:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000be05:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be0b:	53                   	push   ebx
c000be0c:	53                   	push   ebx
c000be0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be0f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be15:	50                   	push   eax
c000be16:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000be19:	83 c4 10             	add    esp,0x10
c000be1c:	83 c4 08             	add    esp,0x8
c000be1f:	5b                   	pop    ebx
c000be20:	c3                   	ret    
c000be21:	90                   	nop

c000be22 <Directory::unlink()>:
c000be22:	83 ec 0c             	sub    esp,0xc
c000be25:	b8 0b 00 00 00       	mov    eax,0xb
c000be2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be35:	83 f9 19             	cmp    ecx,0x19
c000be38:	77 2f                	ja     c000be69 <Directory::unlink()+0x47>
c000be3a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be41:	85 c9                	test   ecx,ecx
c000be43:	74 24                	je     c000be69 <Directory::unlink()+0x47>
c000be45:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be4b:	85 c9                	test   ecx,ecx
c000be4d:	74 1a                	je     c000be69 <Directory::unlink()+0x47>
c000be4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be53:	b8 06 00 00 00       	mov    eax,0x6
c000be58:	75 0f                	jne    c000be69 <Directory::unlink()+0x47>
c000be5a:	50                   	push   eax
c000be5b:	83 c2 0d             	add    edx,0xd
c000be5e:	50                   	push   eax
c000be5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be61:	52                   	push   edx
c000be62:	51                   	push   ecx
c000be63:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be66:	83 c4 10             	add    esp,0x10
c000be69:	83 c4 0c             	add    esp,0xc
c000be6c:	c3                   	ret    
c000be6d:	90                   	nop

c000be6e <Directory::rename(char const*)>:
c000be6e:	83 ec 0c             	sub    esp,0xc
c000be71:	b8 0b 00 00 00       	mov    eax,0xb
c000be76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be81:	83 f9 19             	cmp    ecx,0x19
c000be84:	77 32                	ja     c000beb8 <Directory::rename(char const*)+0x4a>
c000be86:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be8d:	85 c9                	test   ecx,ecx
c000be8f:	74 27                	je     c000beb8 <Directory::rename(char const*)+0x4a>
c000be91:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be97:	85 c9                	test   ecx,ecx
c000be99:	74 1d                	je     c000beb8 <Directory::rename(char const*)+0x4a>
c000be9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be9f:	b8 06 00 00 00       	mov    eax,0x6
c000bea4:	75 12                	jne    c000beb8 <Directory::rename(char const*)+0x4a>
c000bea6:	50                   	push   eax
c000bea7:	83 c2 0d             	add    edx,0xd
c000beaa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000beb0:	52                   	push   edx
c000beb1:	51                   	push   ecx
c000beb2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000beb5:	83 c4 10             	add    esp,0x10
c000beb8:	83 c4 0c             	add    esp,0xc
c000bebb:	c3                   	ret    

c000bebc <Directory::exists()>:
c000bebc:	83 ec 0c             	sub    esp,0xc
c000bebf:	31 c0                	xor    eax,eax
c000bec1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bec5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000becc:	83 f9 19             	cmp    ecx,0x19
c000becf:	77 24                	ja     c000bef5 <Directory::exists()+0x39>
c000bed1:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bed8:	85 c9                	test   ecx,ecx
c000beda:	74 19                	je     c000bef5 <Directory::exists()+0x39>
c000bedc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bee2:	85 c9                	test   ecx,ecx
c000bee4:	74 0f                	je     c000bef5 <Directory::exists()+0x39>
c000bee6:	50                   	push   eax
c000bee7:	83 c2 0d             	add    edx,0xd
c000beea:	50                   	push   eax
c000beeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beed:	52                   	push   edx
c000beee:	51                   	push   ecx
c000beef:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bef2:	83 c4 10             	add    esp,0x10
c000bef5:	83 c4 0c             	add    esp,0xc
c000bef8:	c3                   	ret    
c000bef9:	90                   	nop

c000befa <Directory::read(dirent*)>:
c000befa:	83 ec 1c             	sub    esp,0x1c
c000befd:	b8 0b 00 00 00       	mov    eax,0xb
c000bf02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf0d:	83 f9 19             	cmp    ecx,0x19
c000bf10:	77 30                	ja     c000bf42 <Directory::read(dirent*)+0x48>
c000bf12:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf19:	85 c9                	test   ecx,ecx
c000bf1b:	74 25                	je     c000bf42 <Directory::read(dirent*)+0x48>
c000bf1d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bf24:	74 1c                	je     c000bf42 <Directory::read(dirent*)+0x48>
c000bf26:	83 ec 0c             	sub    esp,0xc
c000bf29:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf2b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bf2f:	51                   	push   ecx
c000bf30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf34:	6a 00                	push   0x0
c000bf36:	68 10 01 00 00       	push   0x110
c000bf3b:	52                   	push   edx
c000bf3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf3f:	83 c4 20             	add    esp,0x20
c000bf42:	83 c4 1c             	add    esp,0x1c
c000bf45:	c3                   	ret    

c000bf46 <Directory::create()>:
c000bf46:	83 ec 0c             	sub    esp,0xc
c000bf49:	b8 0b 00 00 00       	mov    eax,0xb
c000bf4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf52:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf59:	83 f9 19             	cmp    ecx,0x19
c000bf5c:	77 2f                	ja     c000bf8d <Directory::create()+0x47>
c000bf5e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf65:	85 c9                	test   ecx,ecx
c000bf67:	74 24                	je     c000bf8d <Directory::create()+0x47>
c000bf69:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf6f:	85 c9                	test   ecx,ecx
c000bf71:	74 1a                	je     c000bf8d <Directory::create()+0x47>
c000bf73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf77:	b8 06 00 00 00       	mov    eax,0x6
c000bf7c:	75 0f                	jne    c000bf8d <Directory::create()+0x47>
c000bf7e:	50                   	push   eax
c000bf7f:	83 c2 0d             	add    edx,0xd
c000bf82:	50                   	push   eax
c000bf83:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf85:	52                   	push   edx
c000bf86:	51                   	push   ecx
c000bf87:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf8a:	83 c4 10             	add    esp,0x10
c000bf8d:	83 c4 0c             	add    esp,0xc
c000bf90:	c3                   	ret    
c000bf91:	90                   	nop

c000bf92 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf92:	b8 0a 00 00 00       	mov    eax,0xa
c000bf97:	c3                   	ret    

c000bf98 <Bus::Bus(char const*)>:
c000bf98:	83 ec 0c             	sub    esp,0xc
c000bf9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf9f:	83 ec 08             	sub    esp,0x8
c000bfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa6:	50                   	push   eax
c000bfa7:	e8 28 08 00 00       	call   c000c7d4 <Device::Device(char const*)>
c000bfac:	83 c4 10             	add    esp,0x10
c000bfaf:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000bfb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfb8:	89 10                	mov    DWORD PTR [eax],edx
c000bfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfbe:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bfc8:	90                   	nop
c000bfc9:	83 c4 0c             	add    esp,0xc
c000bfcc:	c3                   	ret    
c000bfcd:	90                   	nop
c000bfce:	66 90                	xchg   ax,ax

c000bfd0 <Bus::~Bus()>:
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000bfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfdc:	89 10                	mov    DWORD PTR [eax],edx
c000bfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe2:	83 ec 0c             	sub    esp,0xc
c000bfe5:	50                   	push   eax
c000bfe6:	e8 53 05 00 00       	call   c000c53e <Device::~Device()>
c000bfeb:	83 c4 10             	add    esp,0x10
c000bfee:	90                   	nop
c000bfef:	83 c4 0c             	add    esp,0xc
c000bff2:	c3                   	ret    
c000bff3:	90                   	nop

c000bff4 <Bus::~Bus()>:
c000bff4:	83 ec 0c             	sub    esp,0xc
c000bff7:	83 ec 0c             	sub    esp,0xc
c000bffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffe:	e8 cd ff ff ff       	call   c000bfd0 <Bus::~Bus()>
c000c003:	83 c4 10             	add    esp,0x10
c000c006:	83 ec 08             	sub    esp,0x8
c000c009:	68 58 01 00 00       	push   0x158
c000c00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c012:	e8 f5 e7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c017:	83 c4 10             	add    esp,0x10
c000c01a:	83 c4 0c             	add    esp,0xc
c000c01d:	c3                   	ret    

c000c01e <beepThread(void*)>:
c000c01e:	83 ec 0c             	sub    esp,0xc
c000c021:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c026:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c02a:	48                   	dec    eax
c000c02b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c030:	75 01                	jne    c000c033 <beepThread(void*)+0x15>
c000c032:	fb                   	sti    
c000c033:	6b c2 0a             	imul   eax,edx,0xa
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	50                   	push   eax
c000c03a:	e8 b9 9d 00 00       	call   c0015df8 <milliTenthSleep(unsigned int)>
c000c03f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c046:	e8 06 bd 00 00       	call   c0017d51 <HalMakeBeep(int)>
c000c04b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c053:	83 c4 1c             	add    esp,0x1c
c000c056:	e9 81 9c 00 00       	jmp    c0015cdc <blockTask(TaskState)>

c000c05b <Krnl::beep(int, int, bool)>:
c000c05b:	56                   	push   esi
c000c05c:	53                   	push   ebx
c000c05d:	83 ec 10             	sub    esp,0x10
c000c060:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c064:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c06c:	e8 e0 bc 00 00       	call   c0017d51 <HalMakeBeep(int)>
c000c071:	89 f0                	mov    eax,esi
c000c073:	83 c4 10             	add    esp,0x10
c000c076:	84 c0                	test   al,al
c000c078:	74 1e                	je     c000c098 <Krnl::beep(int, int, bool)+0x3d>
c000c07a:	6b db 0a             	imul   ebx,ebx,0xa
c000c07d:	83 ec 0c             	sub    esp,0xc
c000c080:	53                   	push   ebx
c000c081:	e8 72 9d 00 00       	call   c0015df8 <milliTenthSleep(unsigned int)>
c000c086:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c08e:	83 c4 14             	add    esp,0x14
c000c091:	5b                   	pop    ebx
c000c092:	5e                   	pop    esi
c000c093:	e9 b9 bc 00 00       	jmp    c0017d51 <HalMakeBeep(int)>
c000c098:	68 e6 00 00 00       	push   0xe6
c000c09d:	53                   	push   ebx
c000c09e:	68 1e c0 00 c0       	push   0xc000c01e
c000c0a3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0a9:	e8 e2 97 00 00       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c000c0ae:	83 c4 14             	add    esp,0x14
c000c0b1:	5b                   	pop    ebx
c000c0b2:	5e                   	pop    esi
c000c0b3:	c3                   	ret    

c000c0b4 <User::loadClockSettings(int)>:
c000c0b4:	53                   	push   ebx
c000c0b5:	83 ec 14             	sub    esp,0x14
c000c0b8:	68 14 01 00 00       	push   0x114
c000c0bd:	e8 11 ba ff ff       	call   c0007ad3 <malloc>
c000c0c2:	83 c4 0c             	add    esp,0xc
c000c0c5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0cb:	68 8c 13 02 c0       	push   0xc002138c
c000c0d0:	50                   	push   eax
c000c0d1:	89 c3                	mov    ebx,eax
c000c0d3:	e8 56 f6 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c000c0d8:	58                   	pop    eax
c000c0d9:	5a                   	pop    edx
c000c0da:	6a 01                	push   0x1
c000c0dc:	53                   	push   ebx
c000c0dd:	e8 08 f7 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c000c0e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0e5:	e8 5e f7 ff ff       	call   c000b848 <File::close()>
c000c0ea:	83 c4 10             	add    esp,0x10
c000c0ed:	85 db                	test   ebx,ebx
c000c0ef:	74 0f                	je     c000c100 <User::loadClockSettings(int)+0x4c>
c000c0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0fa:	83 c4 08             	add    esp,0x8
c000c0fd:	5b                   	pop    ebx
c000c0fe:	ff e0                	jmp    eax
c000c100:	83 c4 08             	add    esp,0x8
c000c103:	5b                   	pop    ebx
c000c104:	c3                   	ret    
c000c105:	90                   	nop

c000c106 <Clock::Clock(char const*)>:
c000c106:	83 ec 0c             	sub    esp,0xc
c000c109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10d:	83 ec 08             	sub    esp,0x8
c000c110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c114:	50                   	push   eax
c000c115:	e8 ba 06 00 00       	call   c000c7d4 <Device::Device(char const*)>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c000c122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c126:	89 10                	mov    DWORD PTR [eax],edx
c000c128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c136:	90                   	nop
c000c137:	83 c4 0c             	add    esp,0xc
c000c13a:	c3                   	ret    
c000c13b:	90                   	nop

c000c13c <Clock::~Clock()>:
c000c13c:	83 ec 0c             	sub    esp,0xc
c000c13f:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c000c144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c148:	89 10                	mov    DWORD PTR [eax],edx
c000c14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14e:	83 ec 0c             	sub    esp,0xc
c000c151:	50                   	push   eax
c000c152:	e8 e7 03 00 00       	call   c000c53e <Device::~Device()>
c000c157:	83 c4 10             	add    esp,0x10
c000c15a:	90                   	nop
c000c15b:	83 c4 0c             	add    esp,0xc
c000c15e:	c3                   	ret    
c000c15f:	90                   	nop

c000c160 <Clock::~Clock()>:
c000c160:	83 ec 0c             	sub    esp,0xc
c000c163:	83 ec 0c             	sub    esp,0xc
c000c166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16a:	e8 cd ff ff ff       	call   c000c13c <Clock::~Clock()>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	83 ec 08             	sub    esp,0x8
c000c175:	68 58 01 00 00       	push   0x158
c000c17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17e:	e8 89 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c183:	83 c4 10             	add    esp,0x10
c000c186:	83 c4 0c             	add    esp,0xc
c000c189:	c3                   	ret    

c000c18a <Clock::timeInSecondsLocal()>:
c000c18a:	53                   	push   ebx
c000c18b:	83 ec 14             	sub    esp,0x14
c000c18e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c192:	8b 10                	mov    edx,DWORD PTR [eax]
c000c194:	50                   	push   eax
c000c195:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c198:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c19f:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c1a5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c1ab:	89 cb                	mov    ebx,ecx
c000c1ad:	c1 fb 1f             	sar    ebx,0x1f
c000c1b0:	01 c8                	add    eax,ecx
c000c1b2:	11 da                	adc    edx,ebx
c000c1b4:	83 c4 10             	add    esp,0x10
c000c1b7:	31 c9                	xor    ecx,ecx
c000c1b9:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1c0:	74 05                	je     c000c1c7 <Clock::timeInSecondsLocal()+0x3d>
c000c1c2:	b9 08 07 00 00       	mov    ecx,0x708
c000c1c7:	31 db                	xor    ebx,ebx
c000c1c9:	01 c8                	add    eax,ecx
c000c1cb:	11 da                	adc    edx,ebx
c000c1cd:	83 c4 08             	add    esp,0x8
c000c1d0:	5b                   	pop    ebx
c000c1d1:	c3                   	ret    

c000c1d2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c1d2:	57                   	push   edi
c000c1d3:	56                   	push   esi
c000c1d4:	53                   	push   ebx
c000c1d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1e3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1e6:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c1ed:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c1f3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1f9:	99                   	cdq    
c000c1fa:	29 c6                	sub    esi,eax
c000c1fc:	19 d7                	sbb    edi,edx
c000c1fe:	89 f0                	mov    eax,esi
c000c200:	31 f6                	xor    esi,esi
c000c202:	89 fa                	mov    edx,edi
c000c204:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c20b:	74 05                	je     c000c212 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c20d:	be 08 07 00 00       	mov    esi,0x708
c000c212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c216:	31 ff                	xor    edi,edi
c000c218:	29 f0                	sub    eax,esi
c000c21a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c21e:	19 fa                	sbb    edx,edi
c000c220:	89 d8                	mov    eax,ebx
c000c222:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c226:	5b                   	pop    ebx
c000c227:	5e                   	pop    esi
c000c228:	5f                   	pop    edi
c000c229:	ff e0                	jmp    eax

c000c22b <datetimeToSeconds(datetime_t)>:
c000c22b:	55                   	push   ebp
c000c22c:	57                   	push   edi
c000c22d:	56                   	push   esi
c000c22e:	53                   	push   ebx
c000c22f:	83 ec 0c             	sub    esp,0xc
c000c232:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c23a:	89 f7                	mov    edi,esi
c000c23c:	89 f0                	mov    eax,esi
c000c23e:	0f b6 cf             	movzx  ecx,bh
c000c241:	0f b6 c4             	movzx  eax,ah
c000c244:	c1 ef 10             	shr    edi,0x10
c000c247:	89 da                	mov    edx,ebx
c000c249:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c24c:	89 f9                	mov    ecx,edi
c000c24e:	0f b6 f9             	movzx  edi,cl
c000c251:	89 f1                	mov    ecx,esi
c000c253:	6b c0 3c             	imul   eax,eax,0x3c
c000c256:	0f b6 f1             	movzx  esi,cl
c000c259:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c25f:	0f b6 db             	movzx  ebx,bl
c000c262:	c1 ea 10             	shr    edx,0x10
c000c265:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c26b:	01 f8                	add    eax,edi
c000c26d:	01 f0                	add    eax,esi
c000c26f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c272:	c1 f8 1f             	sar    eax,0x1f
c000c275:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c279:	89 e8                	mov    eax,ebp
c000c27b:	0f b6 c0             	movzx  eax,al
c000c27e:	8b 0c 85 00 14 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec00]
c000c285:	83 f8 01             	cmp    eax,0x1
c000c288:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c28c:	0f b7 da             	movzx  ebx,dx
c000c28f:	76 27                	jbe    c000c2b8 <datetimeToSeconds(datetime_t)+0x8d>
c000c291:	80 e2 03             	and    dl,0x3
c000c294:	75 22                	jne    c000c2b8 <datetimeToSeconds(datetime_t)+0x8d>
c000c296:	31 d2                	xor    edx,edx
c000c298:	be 64 00 00 00       	mov    esi,0x64
c000c29d:	89 d8                	mov    eax,ebx
c000c29f:	f7 f6                	div    esi
c000c2a1:	85 d2                	test   edx,edx
c000c2a3:	75 12                	jne    c000c2b7 <datetimeToSeconds(datetime_t)+0x8c>
c000c2a5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c2ab:	be 90 01 00 00       	mov    esi,0x190
c000c2b0:	99                   	cdq    
c000c2b1:	f7 fe                	idiv   esi
c000c2b3:	85 d2                	test   edx,edx
c000c2b5:	75 01                	jne    c000c2b8 <datetimeToSeconds(datetime_t)+0x8d>
c000c2b7:	41                   	inc    ecx
c000c2b8:	83 fb 46             	cmp    ebx,0x46
c000c2bb:	76 48                	jbe    c000c305 <datetimeToSeconds(datetime_t)+0xda>
c000c2bd:	be 46 00 00 00       	mov    esi,0x46
c000c2c2:	bf 64 00 00 00       	mov    edi,0x64
c000c2c7:	bd 90 01 00 00       	mov    ebp,0x190
c000c2cc:	f7 c6 03 00 00 00    	test   esi,0x3
c000c2d2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2d7:	75 23                	jne    c000c2fc <datetimeToSeconds(datetime_t)+0xd1>
c000c2d9:	89 f0                	mov    eax,esi
c000c2db:	99                   	cdq    
c000c2dc:	f7 ff                	idiv   edi
c000c2de:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2e3:	85 d2                	test   edx,edx
c000c2e5:	75 15                	jne    c000c2fc <datetimeToSeconds(datetime_t)+0xd1>
c000c2e7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2ed:	99                   	cdq    
c000c2ee:	f7 fd                	idiv   ebp
c000c2f0:	83 fa 01             	cmp    edx,0x1
c000c2f3:	19 c0                	sbb    eax,eax
c000c2f5:	f7 d0                	not    eax
c000c2f7:	05 6e 01 00 00       	add    eax,0x16e
c000c2fc:	46                   	inc    esi
c000c2fd:	01 c1                	add    ecx,eax
c000c2ff:	39 de                	cmp    esi,ebx
c000c301:	7c c9                	jl     c000c2cc <datetimeToSeconds(datetime_t)+0xa1>
c000c303:	eb 34                	jmp    c000c339 <datetimeToSeconds(datetime_t)+0x10e>
c000c305:	74 32                	je     c000c339 <datetimeToSeconds(datetime_t)+0x10e>
c000c307:	b8 45 00 00 00       	mov    eax,0x45
c000c30c:	89 c2                	mov    edx,eax
c000c30e:	83 e2 03             	and    edx,0x3
c000c311:	39 d8                	cmp    eax,ebx
c000c313:	7e 0f                	jle    c000c324 <datetimeToSeconds(datetime_t)+0xf9>
c000c315:	83 fa 01             	cmp    edx,0x1
c000c318:	19 d2                	sbb    edx,edx
c000c31a:	48                   	dec    eax
c000c31b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c322:	eb e8                	jmp    c000c30c <datetimeToSeconds(datetime_t)+0xe1>
c000c324:	85 d2                	test   edx,edx
c000c326:	b8 6d 01 00 00       	mov    eax,0x16d
c000c32b:	75 0a                	jne    c000c337 <datetimeToSeconds(datetime_t)+0x10c>
c000c32d:	83 fb 01             	cmp    ebx,0x1
c000c330:	19 c0                	sbb    eax,eax
c000c332:	05 6e 01 00 00       	add    eax,0x16e
c000c337:	29 c1                	sub    ecx,eax
c000c339:	b8 80 51 01 00       	mov    eax,0x15180
c000c33e:	f7 e9                	imul   ecx
c000c340:	03 04 24             	add    eax,DWORD PTR [esp]
c000c343:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c347:	83 c4 0c             	add    esp,0xc
c000c34a:	5b                   	pop    ebx
c000c34b:	5e                   	pop    esi
c000c34c:	5f                   	pop    edi
c000c34d:	5d                   	pop    ebp
c000c34e:	c3                   	ret    
c000c34f:	90                   	nop

c000c350 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c350:	57                   	push   edi
c000c351:	56                   	push   esi
c000c352:	53                   	push   ebx
c000c353:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c357:	8b 06                	mov    eax,DWORD PTR [esi]
c000c359:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c35c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c360:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c364:	e8 c2 fe ff ff       	call   c000c22b <datetimeToSeconds(datetime_t)>
c000c369:	59                   	pop    ecx
c000c36a:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c371:	5b                   	pop    ebx
c000c372:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c378:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c37e:	89 cb                	mov    ebx,ecx
c000c380:	c1 fb 1f             	sar    ebx,0x1f
c000c383:	29 c8                	sub    eax,ecx
c000c385:	19 da                	sbb    edx,ebx
c000c387:	31 c9                	xor    ecx,ecx
c000c389:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c390:	74 05                	je     c000c397 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c392:	b9 08 07 00 00       	mov    ecx,0x708
c000c397:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c39b:	31 db                	xor    ebx,ebx
c000c39d:	29 c8                	sub    eax,ecx
c000c39f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3a3:	19 da                	sbb    edx,ebx
c000c3a5:	89 f8                	mov    eax,edi
c000c3a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3ab:	5b                   	pop    ebx
c000c3ac:	5e                   	pop    esi
c000c3ad:	5f                   	pop    edi
c000c3ae:	ff e0                	jmp    eax

c000c3b0 <secondsToDatetime(unsigned long long)>:
c000c3b0:	55                   	push   ebp
c000c3b1:	57                   	push   edi
c000c3b2:	56                   	push   esi
c000c3b3:	53                   	push   ebx
c000c3b4:	83 ec 1c             	sub    esp,0x1c
c000c3b7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c3bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3c3:	6a 00                	push   0x0
c000c3c5:	68 80 51 01 00       	push   0x15180
c000c3ca:	55                   	push   ebp
c000c3cb:	57                   	push   edi
c000c3cc:	e8 cf 2d 01 00       	call   c001f1a0 <__udivdi3>
c000c3d1:	83 c4 10             	add    esp,0x10
c000c3d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3d8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3de:	6a 00                	push   0x0
c000c3e0:	68 80 51 01 00       	push   0x15180
c000c3e5:	55                   	push   ebp
c000c3e6:	57                   	push   edi
c000c3e7:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3ec:	e8 af 2e 01 00       	call   c001f2a0 <__umoddi3>
c000c3f1:	83 c4 10             	add    esp,0x10
c000c3f4:	99                   	cdq    
c000c3f5:	f7 ff                	idiv   edi
c000c3f7:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3fc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3ff:	89 d0                	mov    eax,edx
c000c401:	99                   	cdq    
c000c402:	f7 ff                	idiv   edi
c000c404:	85 db                	test   ebx,ebx
c000c406:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c409:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c40c:	79 11                	jns    c000c41f <secondsToDatetime(unsigned long long)+0x6f>
c000c40e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c412:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c418:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c41d:	eb 07                	jmp    c000c426 <secondsToDatetime(unsigned long long)+0x76>
c000c41f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c424:	89 d8                	mov    eax,ebx
c000c426:	99                   	cdq    
c000c427:	bf b4 05 00 00       	mov    edi,0x5b4
c000c42c:	f7 f9                	idiv   ecx
c000c42e:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c433:	31 d2                	xor    edx,edx
c000c435:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c43a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c43e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c446:	01 c3                	add    ebx,eax
c000c448:	89 d8                	mov    eax,ebx
c000c44a:	f7 f1                	div    ecx
c000c44c:	31 d2                	xor    edx,edx
c000c44e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c451:	89 d8                	mov    eax,ebx
c000c453:	f7 f7                	div    edi
c000c455:	31 d2                	xor    edx,edx
c000c457:	29 c1                	sub    ecx,eax
c000c459:	89 d8                	mov    eax,ebx
c000c45b:	f7 f5                	div    ebp
c000c45d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c462:	31 d2                	xor    edx,edx
c000c464:	29 c1                	sub    ecx,eax
c000c466:	89 c8                	mov    eax,ecx
c000c468:	f7 f5                	div    ebp
c000c46a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c46f:	31 d2                	xor    edx,edx
c000c471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c475:	89 c8                	mov    eax,ecx
c000c477:	f7 f5                	div    ebp
c000c479:	31 d2                	xor    edx,edx
c000c47b:	01 c3                	add    ebx,eax
c000c47d:	89 c8                	mov    eax,ecx
c000c47f:	f7 f7                	div    edi
c000c481:	bf 99 00 00 00       	mov    edi,0x99
c000c486:	31 d2                	xor    edx,edx
c000c488:	29 c3                	sub    ebx,eax
c000c48a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c492:	29 c3                	sub    ebx,eax
c000c494:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c497:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c49a:	83 c1 02             	add    ecx,0x2
c000c49d:	89 c8                	mov    eax,ecx
c000c49f:	bb 05 00 00 00       	mov    ebx,0x5
c000c4a4:	f7 f7                	div    edi
c000c4a6:	31 d2                	xor    edx,edx
c000c4a8:	89 c7                	mov    edi,eax
c000c4aa:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c4b0:	83 c0 02             	add    eax,0x2
c000c4b3:	f7 f3                	div    ebx
c000c4b5:	89 eb                	mov    ebx,ebp
c000c4b7:	29 c3                	sub    ebx,eax
c000c4b9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c4bf:	88 1e                	mov    BYTE PTR [esi],bl
c000c4c1:	19 c0                	sbb    eax,eax
c000c4c3:	31 d2                	xor    edx,edx
c000c4c5:	83 e0 0c             	and    eax,0xc
c000c4c8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c4cc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c4d4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c4d8:	83 f9 01             	cmp    ecx,0x1
c000c4db:	0f 96 c2             	setbe  dl
c000c4de:	41                   	inc    ecx
c000c4df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4e2:	01 d0                	add    eax,edx
c000c4e4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4e8:	83 c4 1c             	add    esp,0x1c
c000c4eb:	89 f0                	mov    eax,esi
c000c4ed:	5b                   	pop    ebx
c000c4ee:	5e                   	pop    esi
c000c4ef:	5f                   	pop    edi
c000c4f0:	5d                   	pop    ebp
c000c4f1:	c2 04 00             	ret    0x4

c000c4f4 <Clock::timeInDatetimeLocal()>:
c000c4f4:	53                   	push   ebx
c000c4f5:	83 ec 14             	sub    esp,0x14
c000c4f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c500:	e8 85 fc ff ff       	call   c000c18a <Clock::timeInSecondsLocal()>
c000c505:	83 c4 0c             	add    esp,0xc
c000c508:	52                   	push   edx
c000c509:	50                   	push   eax
c000c50a:	53                   	push   ebx
c000c50b:	e8 a0 fe ff ff       	call   c000c3b0 <secondsToDatetime(unsigned long long)>
c000c510:	89 d8                	mov    eax,ebx
c000c512:	83 c4 14             	add    esp,0x14
c000c515:	5b                   	pop    ebx
c000c516:	c2 04 00             	ret    0x4
c000c519:	90                   	nop

c000c51a <Device::hibernate()>:
c000c51a:	c3                   	ret    
c000c51b:	90                   	nop

c000c51c <Device::wake()>:
c000c51c:	c3                   	ret    
c000c51d:	90                   	nop

c000c51e <Device::detect()>:
c000c51e:	c3                   	ret    
c000c51f:	90                   	nop

c000c520 <Device::disableLegacy()>:
c000c520:	c3                   	ret    
c000c521:	90                   	nop

c000c522 <Device::powerSaving(PowerSavingLevel)>:
c000c522:	c3                   	ret    
c000c523:	90                   	nop

c000c524 <DriverlessDevice::close(int, int, void*)>:
c000c524:	31 c0                	xor    eax,eax
c000c526:	c3                   	ret    
c000c527:	90                   	nop

c000c528 <DriverlessDevice::detect()>:
c000c528:	c3                   	ret    
c000c529:	90                   	nop

c000c52a <DriverlessDevice::open(int, int, void*)>:
c000c52a:	83 ec 18             	sub    esp,0x18
c000c52d:	68 30 14 02 c0       	push   0xc0021430
c000c532:	e8 a2 4c 00 00       	call   c00111d9 <KePanic(char const*)>
c000c537:	83 c8 ff             	or     eax,0xffffffff
c000c53a:	83 c4 1c             	add    esp,0x1c
c000c53d:	c3                   	ret    

c000c53e <Device::~Device()>:
c000c53e:	ba 90 14 02 c0       	mov    edx,0xc0021490
c000c543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c547:	89 10                	mov    DWORD PTR [eax],edx
c000c549:	90                   	nop
c000c54a:	c3                   	ret    
c000c54b:	90                   	nop

c000c54c <Device::~Device()>:
c000c54c:	83 ec 0c             	sub    esp,0xc
c000c54f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c553:	e8 e6 ff ff ff       	call   c000c53e <Device::~Device()>
c000c558:	83 c4 04             	add    esp,0x4
c000c55b:	83 ec 08             	sub    esp,0x8
c000c55e:	68 58 01 00 00       	push   0x158
c000c563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c567:	e8 a0 e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c56c:	83 c4 10             	add    esp,0x10
c000c56f:	83 c4 0c             	add    esp,0xc
c000c572:	c3                   	ret    
c000c573:	90                   	nop

c000c574 <Device::findAndLoadDriver()>:
c000c574:	c7 44 24 04 4e 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc002144e
c000c57c:	e9 89 e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c581:	90                   	nop

c000c582 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c582:	57                   	push   edi
c000c583:	b9 09 00 00 00       	mov    ecx,0x9
c000c588:	56                   	push   esi
c000c589:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c58d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c591:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c59b:	81 c7 18 01 00 00    	add    edi,0x118
c000c5a1:	fc                   	cld    
c000c5a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c5a4:	5e                   	pop    esi
c000c5a5:	5f                   	pop    edi
c000c5a6:	c3                   	ret    
c000c5a7:	90                   	nop

c000c5a8 <Device::preOpenACPI(void*, char*, char*)>:
c000c5a8:	57                   	push   edi
c000c5a9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c5ae:	56                   	push   esi
c000c5af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5bb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c5c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c5cb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c5d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5d3:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5dd:	b9 0e 00 00 00       	mov    ecx,0xe
c000c5e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5e4:	5e                   	pop    esi
c000c5e5:	5f                   	pop    edi
c000c5e6:	c3                   	ret    
c000c5e7:	90                   	nop

c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5e8:	53                   	push   ebx
c000c5e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5f9:	0f b6 c0             	movzx  eax,al
c000c5fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c600:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c604:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c608:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c60c:	5b                   	pop    ebx
c000c60d:	e9 aa 05 00 00       	jmp    c000cbbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c612 <Device::getParent()>:
c000c612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c616:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c61c:	c3                   	ret    
c000c61d:	90                   	nop

c000c61e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c622:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c626:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c62b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c62f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c633:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c637:	e9 f7 06 00 00       	jmp    c000cd33 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c63c <Device::addChild(Device*)>:
c000c63c:	53                   	push   ebx
c000c63d:	83 ec 08             	sub    esp,0x8
c000c640:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c644:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c648:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c64e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c654:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c656:	85 d2                	test   edx,edx
c000c658:	74 04                	je     c000c65e <Device::addChild(Device*)+0x22>
c000c65a:	89 d3                	mov    ebx,edx
c000c65c:	eb f6                	jmp    c000c654 <Device::addChild(Device*)+0x18>
c000c65e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c661:	83 ec 0c             	sub    esp,0xc
c000c664:	6a 08                	push   0x8
c000c666:	e8 68 b4 ff ff       	call   c0007ad3 <malloc>
c000c66b:	89 03                	mov    DWORD PTR [ebx],eax
c000c66d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c673:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c67a:	83 c4 18             	add    esp,0x18
c000c67d:	5b                   	pop    ebx
c000c67e:	c3                   	ret    
c000c67f:	90                   	nop

c000c680 <Device::removeAllChildren()>:
c000c680:	56                   	push   esi
c000c681:	53                   	push   ebx
c000c682:	52                   	push   edx
c000c683:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c687:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c68d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c690:	74 17                	je     c000c6a9 <Device::removeAllChildren()+0x29>
c000c692:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c695:	85 c0                	test   eax,eax
c000c697:	74 0c                	je     c000c6a5 <Device::removeAllChildren()+0x25>
c000c699:	8b 10                	mov    edx,DWORD PTR [eax]
c000c69b:	83 ec 0c             	sub    esp,0xc
c000c69e:	50                   	push   eax
c000c69f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6a7:	eb e4                	jmp    c000c68d <Device::removeAllChildren()+0xd>
c000c6a9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6b5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6c2:	58                   	pop    eax
c000c6c3:	5b                   	pop    ebx
c000c6c4:	5e                   	pop    esi
c000c6c5:	c3                   	ret    

c000c6c6 <Device::hibernateAll()>:
c000c6c6:	53                   	push   ebx
c000c6c7:	83 ec 14             	sub    esp,0x14
c000c6ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6d0:	53                   	push   ebx
c000c6d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c6d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6da:	83 c4 10             	add    esp,0x10
c000c6dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6e0:	74 0f                	je     c000c6f1 <Device::hibernateAll()+0x2b>
c000c6e2:	83 ec 0c             	sub    esp,0xc
c000c6e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6e8:	e8 d9 ff ff ff       	call   c000c6c6 <Device::hibernateAll()>
c000c6ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6ef:	eb e9                	jmp    c000c6da <Device::hibernateAll()+0x14>
c000c6f1:	83 c4 08             	add    esp,0x8
c000c6f4:	5b                   	pop    ebx
c000c6f5:	c3                   	ret    

c000c6f6 <Device::wakeAll()>:
c000c6f6:	53                   	push   ebx
c000c6f7:	83 ec 14             	sub    esp,0x14
c000c6fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c700:	53                   	push   ebx
c000c701:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c704:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c70a:	83 c4 10             	add    esp,0x10
c000c70d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c710:	74 0f                	je     c000c721 <Device::wakeAll()+0x2b>
c000c712:	83 ec 0c             	sub    esp,0xc
c000c715:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c718:	e8 d9 ff ff ff       	call   c000c6f6 <Device::wakeAll()>
c000c71d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c71f:	eb e9                	jmp    c000c70a <Device::wakeAll()+0x14>
c000c721:	83 c4 08             	add    esp,0x8
c000c724:	5b                   	pop    ebx
c000c725:	c3                   	ret    

c000c726 <Device::detectAll()>:
c000c726:	53                   	push   ebx
c000c727:	83 ec 14             	sub    esp,0x14
c000c72a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c72e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c730:	53                   	push   ebx
c000c731:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c734:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c740:	74 0f                	je     c000c751 <Device::detectAll()+0x2b>
c000c742:	83 ec 0c             	sub    esp,0xc
c000c745:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c748:	e8 d9 ff ff ff       	call   c000c726 <Device::detectAll()>
c000c74d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c74f:	eb e9                	jmp    c000c73a <Device::detectAll()+0x14>
c000c751:	83 c4 08             	add    esp,0x8
c000c754:	5b                   	pop    ebx
c000c755:	c3                   	ret    

c000c756 <Device::disableLegacyAll()>:
c000c756:	c3                   	ret    
c000c757:	90                   	nop

c000c758 <Device::loadDriversForAll()>:
c000c758:	c3                   	ret    
c000c759:	90                   	nop

c000c75a <Device::closeAll()>:
c000c75a:	53                   	push   ebx
c000c75b:	83 ec 08             	sub    esp,0x8
c000c75e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c762:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c764:	6a 00                	push   0x0
c000c766:	6a 00                	push   0x0
c000c768:	6a 00                	push   0x0
c000c76a:	53                   	push   ebx
c000c76b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c76e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c774:	83 c4 10             	add    esp,0x10
c000c777:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c77a:	74 0f                	je     c000c78b <Device::closeAll()+0x31>
c000c77c:	83 ec 0c             	sub    esp,0xc
c000c77f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c782:	e8 d3 ff ff ff       	call   c000c75a <Device::closeAll()>
c000c787:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c789:	eb e9                	jmp    c000c774 <Device::closeAll()+0x1a>
c000c78b:	83 c4 08             	add    esp,0x8
c000c78e:	5b                   	pop    ebx
c000c78f:	c3                   	ret    

c000c790 <Device::powerSavingAll(PowerSavingLevel)>:
c000c790:	56                   	push   esi
c000c791:	53                   	push   ebx
c000c792:	83 ec 0c             	sub    esp,0xc
c000c795:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c799:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c79d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c79f:	56                   	push   esi
c000c7a0:	53                   	push   ebx
c000c7a1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c7a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7b0:	74 0f                	je     c000c7c1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c7b2:	52                   	push   edx
c000c7b3:	52                   	push   edx
c000c7b4:	56                   	push   esi
c000c7b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7b8:	e8 d3 ff ff ff       	call   c000c790 <Device::powerSavingAll(PowerSavingLevel)>
c000c7bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7bf:	eb e9                	jmp    c000c7aa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c7c1:	58                   	pop    eax
c000c7c2:	5b                   	pop    ebx
c000c7c3:	5e                   	pop    esi
c000c7c4:	c3                   	ret    
c000c7c5:	90                   	nop

c000c7c6 <Device::setName(char const*)>:
c000c7c6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c7ce:	e9 7d 3e ff ff       	jmp    c0000650 <strcpy>
c000c7d3:	90                   	nop

c000c7d4 <Device::Device(char const*)>:
c000c7d4:	83 ec 1c             	sub    esp,0x1c
c000c7d7:	ba 90 14 02 c0       	mov    edx,0xc0021490
c000c7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e0:	89 10                	mov    DWORD PTR [eax],edx
c000c7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c802:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c810:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c81a:	83 ec 08             	sub    esp,0x8
c000c81d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c821:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c825:	e8 9c ff ff ff       	call   c000c7c6 <Device::setName(char const*)>
c000c82a:	83 c4 10             	add    esp,0x10
c000c82d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c835:	83 ec 0c             	sub    esp,0xc
c000c838:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c83c:	e8 92 b2 ff ff       	call   c0007ad3 <malloc>
c000c841:	83 c4 10             	add    esp,0x10
c000c844:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c84a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c851:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c855:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c865:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c875:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c87c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c880:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c896:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8a4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c8ca:	90                   	nop
c000c8cb:	83 c4 1c             	add    esp,0x1c
c000c8ce:	c3                   	ret    
c000c8cf:	90                   	nop

c000c8d0 <Device::getName()>:
c000c8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8d4:	05 d0 00 00 00       	add    eax,0xd0
c000c8d9:	c3                   	ret    

c000c8da <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8da:	83 ec 0c             	sub    esp,0xc
c000c8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e1:	83 ec 08             	sub    esp,0x8
c000c8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e8:	50                   	push   eax
c000c8e9:	e8 e6 fe ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c000c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fa:	89 10                	mov    DWORD PTR [eax],edx
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c90a:	90                   	nop
c000c90b:	83 c4 0c             	add    esp,0xc
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c910:	57                   	push   edi
c000c911:	56                   	push   esi
c000c912:	53                   	push   ebx
c000c913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c917:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c91b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c91f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c925:	75 0c                	jne    c000c933 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c927:	52                   	push   edx
c000c928:	52                   	push   edx
c000c929:	53                   	push   ebx
c000c92a:	56                   	push   esi
c000c92b:	e8 22 2d 01 00       	call   c001f652 <LinkedList<Device>::addElement(Device*)>
c000c930:	83 c4 10             	add    esp,0x10
c000c933:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c939:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c93c:	74 12                	je     c000c950 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c93e:	50                   	push   eax
c000c93f:	57                   	push   edi
c000c940:	56                   	push   esi
c000c941:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c944:	e8 c7 ff ff ff       	call   c000c910 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c949:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	eb e9                	jmp    c000c939 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c950:	5b                   	pop    ebx
c000c951:	5e                   	pop    esi
c000c952:	5f                   	pop    edi
c000c953:	c3                   	ret    

c000c954 <getDevicesOfType(DeviceType)>:
c000c954:	53                   	push   ebx
c000c955:	83 ec 14             	sub    esp,0x14
c000c958:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c95c:	53                   	push   ebx
c000c95d:	e8 cc 2d 01 00       	call   c001f72e <LinkedList<Device>::LinkedList()>
c000c962:	83 c4 0c             	add    esp,0xc
c000c965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c969:	53                   	push   ebx
c000c96a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c970:	e8 9b ff ff ff       	call   c000c910 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c975:	83 c4 18             	add    esp,0x18
c000c978:	89 d8                	mov    eax,ebx
c000c97a:	5b                   	pop    ebx
c000c97b:	c2 04 00             	ret    0x4
c000c97e:	66 90                	xchg   ax,ax

c000c980 <HardDiskController::HardDiskController(char const*)>:
c000c980:	83 ec 0c             	sub    esp,0xc
c000c983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c987:	83 ec 08             	sub    esp,0x8
c000c98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98e:	50                   	push   eax
c000c98f:	e8 40 fe ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000c99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a0:	89 10                	mov    DWORD PTR [eax],edx
c000c9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c9b0:	90                   	nop
c000c9b1:	83 c4 0c             	add    esp,0xc
c000c9b4:	c3                   	ret    
c000c9b5:	90                   	nop
c000c9b6:	66 90                	xchg   ax,ax

c000c9b8 <HardDiskController::~HardDiskController()>:
c000c9b8:	83 ec 0c             	sub    esp,0xc
c000c9bb:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c4:	89 10                	mov    DWORD PTR [eax],edx
c000c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ca:	83 ec 0c             	sub    esp,0xc
c000c9cd:	50                   	push   eax
c000c9ce:	e8 6b fb ff ff       	call   c000c53e <Device::~Device()>
c000c9d3:	83 c4 10             	add    esp,0x10
c000c9d6:	90                   	nop
c000c9d7:	83 c4 0c             	add    esp,0xc
c000c9da:	c3                   	ret    
c000c9db:	90                   	nop

c000c9dc <HardDiskController::~HardDiskController()>:
c000c9dc:	83 ec 0c             	sub    esp,0xc
c000c9df:	83 ec 0c             	sub    esp,0xc
c000c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9e6:	e8 cd ff ff ff       	call   c000c9b8 <HardDiskController::~HardDiskController()>
c000c9eb:	83 c4 10             	add    esp,0x10
c000c9ee:	83 ec 08             	sub    esp,0x8
c000c9f1:	68 58 01 00 00       	push   0x158
c000c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9fa:	e8 0d de ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c9ff:	83 c4 10             	add    esp,0x10
c000ca02:	83 c4 0c             	add    esp,0xc
c000ca05:	c3                   	ret    

c000ca06 <PhysicalDisk::eject()>:
c000ca06:	83 c8 ff             	or     eax,0xffffffff
c000ca09:	c3                   	ret    

c000ca0a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ca0a:	83 ec 0c             	sub    esp,0xc
c000ca0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca11:	83 ec 08             	sub    esp,0x8
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	50                   	push   eax
c000ca19:	e8 b6 fd ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000ca1e:	83 c4 10             	add    esp,0x10
c000ca21:	ba 14 15 02 c0       	mov    edx,0xc0021514
c000ca26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2a:	89 10                	mov    DWORD PTR [eax],edx
c000ca2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca30:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca46:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca58:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca6c:	90                   	nop
c000ca6d:	83 c4 0c             	add    esp,0xc
c000ca70:	c3                   	ret    
c000ca71:	90                   	nop

c000ca72 <PhysicalDisk::startCache()>:
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 ec 10             	sub    esp,0x10
c000ca77:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca7b:	6a 44                	push   0x44
c000ca7d:	e8 51 b0 ff ff       	call   c0007ad3 <malloc>
c000ca82:	89 c6                	mov    esi,eax
c000ca84:	58                   	pop    eax
c000ca85:	5a                   	pop    edx
c000ca86:	53                   	push   ebx
c000ca87:	56                   	push   esi
c000ca88:	e8 83 17 00 00       	call   c000e210 <VCache::VCache(PhysicalDisk*)>
c000ca8d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca93:	83 c4 14             	add    esp,0x14
c000ca96:	5b                   	pop    ebx
c000ca97:	5e                   	pop    esi
c000ca98:	c3                   	ret    
c000ca99:	90                   	nop

c000ca9a <PhysicalDisk::~PhysicalDisk()>:
c000ca9a:	83 ec 0c             	sub    esp,0xc
c000ca9d:	ba 14 15 02 c0       	mov    edx,0xc0021514
c000caa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa6:	89 10                	mov    DWORD PTR [eax],edx
c000caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caac:	83 ec 0c             	sub    esp,0xc
c000caaf:	50                   	push   eax
c000cab0:	e8 89 fa ff ff       	call   c000c53e <Device::~Device()>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	90                   	nop
c000cab9:	83 c4 0c             	add    esp,0xc
c000cabc:	c3                   	ret    
c000cabd:	90                   	nop

c000cabe <PhysicalDisk::~PhysicalDisk()>:
c000cabe:	83 ec 0c             	sub    esp,0xc
c000cac1:	83 ec 0c             	sub    esp,0xc
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 cd ff ff ff       	call   c000ca9a <PhysicalDisk::~PhysicalDisk()>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	83 ec 08             	sub    esp,0x8
c000cad3:	68 6c 01 00 00       	push   0x16c
c000cad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cadc:	e8 2b dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cae1:	83 c4 10             	add    esp,0x10
c000cae4:	83 c4 0c             	add    esp,0xc
c000cae7:	c3                   	ret    

c000cae8 <int_handler>:
c000cae8:	55                   	push   ebp
c000cae9:	57                   	push   edi
c000caea:	56                   	push   esi
c000caeb:	53                   	push   ebx
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000caf6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cafa:	74 0b                	je     c000cb07 <int_handler+0x1f>
c000cafc:	fa                   	cli    
c000cafd:	f4                   	hlt    
c000cafe:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb05:	75 f5                	jne    c000cafc <int_handler+0x14>
c000cb07:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cb0a:	8d 46 e0             	lea    eax,[esi-0x20]
c000cb0d:	83 f8 17             	cmp    eax,0x17
c000cb10:	76 40                	jbe    c000cb52 <int_handler+0x6a>
c000cb12:	c1 e6 04             	shl    esi,0x4
c000cb15:	31 db                	xor    ebx,ebx
c000cb17:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cb1d:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cb23:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cb27:	85 c0                	test   eax,eax
c000cb29:	74 13                	je     c000cb3e <int_handler+0x56>
c000cb2b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cb2f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cb32:	74 2c                	je     c000cb60 <int_handler+0x78>
c000cb34:	83 ec 08             	sub    esp,0x8
c000cb37:	52                   	push   edx
c000cb38:	57                   	push   edi
c000cb39:	ff d0                	call   eax
c000cb3b:	83 c4 10             	add    esp,0x10
c000cb3e:	83 c3 01             	add    ebx,0x1
c000cb41:	83 fb 04             	cmp    ebx,0x4
c000cb44:	75 dd                	jne    c000cb23 <int_handler+0x3b>
c000cb46:	83 c4 0c             	add    esp,0xc
c000cb49:	31 c0                	xor    eax,eax
c000cb4b:	5b                   	pop    ebx
c000cb4c:	31 d2                	xor    edx,edx
c000cb4e:	5e                   	pop    esi
c000cb4f:	5f                   	pop    edi
c000cb50:	5d                   	pop    ebp
c000cb51:	c3                   	ret    
c000cb52:	83 ec 0c             	sub    esp,0xc
c000cb55:	50                   	push   eax
c000cb56:	e8 33 b2 00 00       	call   c0017d8e <HalEndOfInterrupt(int)>
c000cb5b:	83 c4 10             	add    esp,0x10
c000cb5e:	eb b2                	jmp    c000cb12 <int_handler+0x2a>
c000cb60:	83 ec 08             	sub    esp,0x8
c000cb63:	52                   	push   edx
c000cb64:	57                   	push   edi
c000cb65:	ff d0                	call   eax
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	83 c4 0c             	add    esp,0xc
c000cb6d:	5b                   	pop    ebx
c000cb6e:	5e                   	pop    esi
c000cb6f:	5f                   	pop    edi
c000cb70:	5d                   	pop    ebp
c000cb71:	c3                   	ret    

c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb72:	56                   	push   esi
c000cb73:	31 c0                	xor    eax,eax
c000cb75:	53                   	push   ebx
c000cb76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb82:	89 ca                	mov    edx,ecx
c000cb84:	c1 e2 04             	shl    edx,0x4
c000cb87:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cb8f:	74 17                	je     c000cba8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb91:	83 c0 01             	add    eax,0x1
c000cb94:	83 f8 04             	cmp    eax,0x4
c000cb97:	75 ee                	jne    c000cb87 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb99:	c7 44 24 0c 44 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021544
c000cba1:	5b                   	pop    ebx
c000cba2:	5e                   	pop    esi
c000cba3:	e9 31 46 00 00       	jmp    c00111d9 <KePanic(char const*)>
c000cba8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cbab:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cbb2:	5b                   	pop    ebx
c000cbb3:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cbba:	5e                   	pop    esi
c000cbbb:	c3                   	ret    

c000cbbc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cbbc:	55                   	push   ebp
c000cbbd:	57                   	push   edi
c000cbbe:	56                   	push   esi
c000cbbf:	53                   	push   ebx
c000cbc0:	83 ec 0c             	sub    esp,0xc
c000cbc3:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cbc9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cbcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbd1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cbd8:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cbdb:	74 57                	je     c000cc34 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cbdd:	84 c0                	test   al,al
c000cbdf:	89 c7                	mov    edi,eax
c000cbe1:	74 1d                	je     c000cc00 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cbe3:	83 fe 0f             	cmp    esi,0xf
c000cbe6:	0f 8f d9 00 00 00    	jg     c000ccc5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cbec:	0f b6 b6 48 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcfb8]
c000cbf3:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cbfb:	d1 ef                	shr    edi,1
c000cbfd:	83 e7 01             	and    edi,0x1
c000cc00:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc05:	83 ec 08             	sub    esp,0x8
c000cc08:	31 db                	xor    ebx,ebx
c000cc0a:	50                   	push   eax
c000cc0b:	68 51 15 02 c0       	push   0xc0021551
c000cc10:	e8 f5 dc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cc15:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	7f 59                	jg     c000cc7a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cc21:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc24:	83 ec 0c             	sub    esp,0xc
c000cc27:	68 68 15 02 c0       	push   0xc0021568
c000cc2c:	e8 a8 45 00 00       	call   c00111d9 <KePanic(char const*)>
c000cc31:	83 c4 10             	add    esp,0x10
c000cc34:	89 e8                	mov    eax,ebp
c000cc36:	31 d2                	xor    edx,edx
c000cc38:	c1 e0 04             	shl    eax,0x4
c000cc3b:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cc42:	85 c9                	test   ecx,ecx
c000cc44:	0f 84 92 00 00 00    	je     c000ccdc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cc4a:	83 c2 01             	add    edx,0x1
c000cc4d:	83 fa 04             	cmp    edx,0x4
c000cc50:	75 e9                	jne    c000cc3b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cc52:	83 ec 0c             	sub    esp,0xc
c000cc55:	68 bc 15 02 c0       	push   0xc00215bc
c000cc5a:	e8 7a 45 00 00       	call   c00111d9 <KePanic(char const*)>
c000cc5f:	83 c4 10             	add    esp,0x10
c000cc62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc67:	83 c4 0c             	add    esp,0xc
c000cc6a:	5b                   	pop    ebx
c000cc6b:	5e                   	pop    esi
c000cc6c:	5f                   	pop    edi
c000cc6d:	5d                   	pop    ebp
c000cc6e:	c3                   	ret    
c000cc6f:	83 c3 01             	add    ebx,0x1
c000cc72:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cc78:	7e a7                	jle    c000cc21 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cc7a:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc81:	83 ec 08             	sub    esp,0x8
c000cc84:	56                   	push   esi
c000cc85:	55                   	push   ebp
c000cc86:	e8 ed 18 01 00       	call   c001e578 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc8b:	83 c4 10             	add    esp,0x10
c000cc8e:	84 c0                	test   al,al
c000cc90:	74 dd                	je     c000cc6f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc92:	89 f8                	mov    eax,edi
c000cc94:	83 ec 04             	sub    esp,0x4
c000cc97:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc9e:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cca1:	0f b6 f8             	movzx  edi,al
c000cca4:	57                   	push   edi
c000cca5:	89 e8                	mov    eax,ebp
c000cca7:	6a 00                	push   0x0
c000cca9:	0f b6 c0             	movzx  eax,al
c000ccac:	50                   	push   eax
c000ccad:	89 f0                	mov    eax,esi
c000ccaf:	6a 00                	push   0x0
c000ccb1:	0f b6 c0             	movzx  eax,al
c000ccb4:	6a 00                	push   0x0
c000ccb6:	50                   	push   eax
c000ccb7:	53                   	push   ebx
c000ccb8:	e8 27 1a 01 00       	call   c001e6e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000ccbd:	83 c4 20             	add    esp,0x20
c000ccc0:	e9 6f ff ff ff       	jmp    c000cc34 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000ccc5:	83 ec 0c             	sub    esp,0xc
c000ccc8:	31 ff                	xor    edi,edi
c000ccca:	68 84 15 02 c0       	push   0xc0021584
c000cccf:	e8 05 45 00 00       	call   c00111d9 <KePanic(char const*)>
c000ccd4:	83 c4 10             	add    esp,0x10
c000ccd7:	e9 24 ff ff ff       	jmp    c000cc00 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ccdc:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000ccdf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cce3:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ccea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ccee:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ccf5:	83 c4 0c             	add    esp,0xc
c000ccf8:	89 f0                	mov    eax,esi
c000ccfa:	5b                   	pop    ebx
c000ccfb:	5e                   	pop    esi
c000ccfc:	5f                   	pop    edi
c000ccfd:	5d                   	pop    ebp
c000ccfe:	c3                   	ret    

c000ccff <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd07:	c1 e0 04             	shl    eax,0x4
c000cd0a:	8d 50 10             	lea    edx,[eax+0x10]
c000cd0d:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cd13:	74 08                	je     c000cd1d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cd15:	83 c0 04             	add    eax,0x4
c000cd18:	39 d0                	cmp    eax,edx
c000cd1a:	75 f1                	jne    c000cd0d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cd1c:	c3                   	ret    
c000cd1d:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd27:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd31:	eb e2                	jmp    c000cd15 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cd33 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd33:	56                   	push   esi
c000cd34:	53                   	push   ebx
c000cd35:	83 ec 04             	sub    esp,0x4
c000cd38:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd45:	74 0e                	je     c000cd55 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd47:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd4c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd53:	75 34                	jne    c000cd89 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000cd55:	8d 43 20             	lea    eax,[ebx+0x20]
c000cd58:	c1 e0 04             	shl    eax,0x4
c000cd5b:	8d 50 10             	lea    edx,[eax+0x10]
c000cd5e:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000cd64:	74 0d                	je     c000cd73 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cd66:	83 c0 04             	add    eax,0x4
c000cd69:	39 d0                	cmp    eax,edx
c000cd6b:	75 f1                	jne    c000cd5e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cd6d:	83 c4 04             	add    esp,0x4
c000cd70:	5b                   	pop    ebx
c000cd71:	5e                   	pop    esi
c000cd72:	c3                   	ret    
c000cd73:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd7d:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd87:	eb dd                	jmp    c000cd66 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cd89:	83 fb 0f             	cmp    ebx,0xf
c000cd8c:	7f 09                	jg     c000cd97 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000cd8e:	0f b6 9b 48 30 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcfb8]
c000cd95:	eb be                	jmp    c000cd55 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cd97:	83 ec 0c             	sub    esp,0xc
c000cd9a:	68 75 15 02 c0       	push   0xc0021575
c000cd9f:	e8 35 44 00 00       	call   c00111d9 <KePanic(char const*)>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	eb ac                	jmp    c000cd55 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000cda9 <setupINTS()>:
c000cda9:	31 c0                	xor    eax,eax
c000cdab:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdb5:	83 c0 10             	add    eax,0x10
c000cdb8:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000cdc2:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000cdcc:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cdd6:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cde0:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cdea:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cdf4:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cdfe:	3d 00 10 00 00       	cmp    eax,0x1000
c000ce03:	75 a6                	jne    c000cdab <setupINTS()+0x2>
c000ce05:	c3                   	ret    

c000ce06 <convertLegacyIRQNumber(int)>:
c000ce06:	83 ec 0c             	sub    esp,0xc
c000ce09:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ce0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce13:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ce1a:	74 0c                	je     c000ce28 <convertLegacyIRQNumber(int)+0x22>
c000ce1c:	83 f8 0f             	cmp    eax,0xf
c000ce1f:	7f 0b                	jg     c000ce2c <convertLegacyIRQNumber(int)+0x26>
c000ce21:	0f b6 80 48 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcfb8]
c000ce28:	83 c4 0c             	add    esp,0xc
c000ce2b:	c3                   	ret    
c000ce2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 84 15 02 c0       	push   0xc0021584
c000ce38:	e8 9c 43 00 00       	call   c00111d9 <KePanic(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce44:	83 c4 0c             	add    esp,0xc
c000ce47:	c3                   	ret    

c000ce48 <startGUI(void*)>:
c000ce48:	55                   	push   ebp
c000ce49:	89 e5                	mov    ebp,esp
c000ce4b:	53                   	push   ebx
c000ce4c:	83 ec 04             	sub    esp,0x4
c000ce4f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce54:	83 e8 01             	sub    eax,0x1
c000ce57:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce5c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce61:	85 c0                	test   eax,eax
c000ce63:	75 01                	jne    c000ce66 <startGUI(void*)+0x1e>
c000ce65:	fb                   	sti    
c000ce66:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce6c:	83 ec 08             	sub    esp,0x8
c000ce6f:	6a 01                	push   0x1
c000ce71:	68 e1 15 02 c0       	push   0xc00215e1
c000ce76:	e8 f5 81 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	83 ec 08             	sub    esp,0x8
c000ce81:	53                   	push   ebx
c000ce82:	50                   	push   eax
c000ce83:	e8 28 84 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000ce88:	83 c4 10             	add    esp,0x10
c000ce8b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce91:	83 ec 08             	sub    esp,0x8
c000ce94:	6a 01                	push   0x1
c000ce96:	68 fb 15 02 c0       	push   0xc00215fb
c000ce9b:	e8 d0 81 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000cea0:	83 c4 10             	add    esp,0x10
c000cea3:	83 ec 08             	sub    esp,0x8
c000cea6:	53                   	push   ebx
c000cea7:	50                   	push   eax
c000cea8:	e8 03 84 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	90                   	nop
c000ceb1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ceb4:	c9                   	leave  
c000ceb5:	c3                   	ret    

c000ceb6 <startGUIVESA(void*)>:
c000ceb6:	55                   	push   ebp
c000ceb7:	89 e5                	mov    ebp,esp
c000ceb9:	53                   	push   ebx
c000ceba:	83 ec 04             	sub    esp,0x4
c000cebd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cec2:	83 e8 01             	sub    eax,0x1
c000cec5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ceca:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cecf:	85 c0                	test   eax,eax
c000ced1:	75 01                	jne    c000ced4 <startGUIVESA(void*)+0x1e>
c000ced3:	fb                   	sti    
c000ced4:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ceda:	83 ec 08             	sub    esp,0x8
c000cedd:	6a 01                	push   0x1
c000cedf:	68 19 16 02 c0       	push   0xc0021619
c000cee4:	e8 87 81 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	83 ec 08             	sub    esp,0x8
c000ceef:	53                   	push   ebx
c000cef0:	50                   	push   eax
c000cef1:	e8 ba 83 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000cef6:	83 c4 10             	add    esp,0x10
c000cef9:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ceff:	83 ec 08             	sub    esp,0x8
c000cf02:	6a 01                	push   0x1
c000cf04:	68 fb 15 02 c0       	push   0xc00215fb
c000cf09:	e8 62 81 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	83 ec 08             	sub    esp,0x8
c000cf14:	53                   	push   ebx
c000cf15:	50                   	push   eax
c000cf16:	e8 95 83 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000cf1b:	83 c4 10             	add    esp,0x10
c000cf1e:	90                   	nop
c000cf1f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf22:	c9                   	leave  
c000cf23:	c3                   	ret    

c000cf24 <sendKeyToTerminal(unsigned char)>:
c000cf24:	55                   	push   ebp
c000cf25:	89 e5                	mov    ebp,esp
c000cf27:	83 ec 28             	sub    esp,0x28
c000cf2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf2d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cf30:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cf35:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cf39:	83 ec 08             	sub    esp,0x8
c000cf3c:	52                   	push   edx
c000cf3d:	50                   	push   eax
c000cf3e:	e8 79 be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf4a:	83 f8 0a             	cmp    eax,0xa
c000cf4d:	74 16                	je     c000cf65 <sendKeyToTerminal(unsigned char)+0x41>
c000cf4f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf53:	83 f8 03             	cmp    eax,0x3
c000cf56:	74 0d                	je     c000cf65 <sendKeyToTerminal(unsigned char)+0x41>
c000cf58:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf5c:	83 f8 1c             	cmp    eax,0x1c
c000cf5f:	0f 85 97 00 00 00    	jne    c000cffc <sendKeyToTerminal(unsigned char)+0xd8>
c000cf65:	fa                   	cli    
c000cf66:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf6b:	83 c0 01             	add    eax,0x1
c000cf6e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf73:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf78:	83 c0 01             	add    eax,0x1
c000cf7b:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf80:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cf85:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf88:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000cf92:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf96:	74 1f                	je     c000cfb7 <sendKeyToTerminal(unsigned char)+0x93>
c000cf98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf9e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cfa1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cfa4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cfa7:	83 ec 0c             	sub    esp,0xc
c000cfaa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cfad:	e8 22 90 00 00       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c000cfb2:	83 c4 10             	add    esp,0x10
c000cfb5:	eb db                	jmp    c000cf92 <sendKeyToTerminal(unsigned char)+0x6e>
c000cfb7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfbc:	83 e8 01             	sub    eax,0x1
c000cfbf:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cfc4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfc9:	85 c0                	test   eax,eax
c000cfcb:	75 18                	jne    c000cfe5 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfcd:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000cfd2:	85 c0                	test   eax,eax
c000cfd4:	74 0f                	je     c000cfe5 <sendKeyToTerminal(unsigned char)+0xc1>
c000cfd6:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000cfe0:	e8 f7 8a 00 00       	call   c0015adc <schedule()>
c000cfe5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfea:	83 e8 01             	sub    eax,0x1
c000cfed:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cff2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cff7:	85 c0                	test   eax,eax
c000cff9:	75 01                	jne    c000cffc <sendKeyToTerminal(unsigned char)+0xd8>
c000cffb:	fb                   	sti    
c000cffc:	90                   	nop
c000cffd:	c9                   	leave  
c000cffe:	c3                   	ret    

c000cfff <sendKeyboardToken(KeyboardToken)>:
c000cfff:	55                   	push   ebp
c000d000:	89 e5                	mov    ebp,esp
c000d002:	83 ec 18             	sub    esp,0x18
c000d005:	e8 1f 42 00 00       	call   c0011229 <KeUserIOReceived()>
c000d00a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d00d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d010:	0f b7 c0             	movzx  eax,ax
c000d013:	83 f2 01             	xor    edx,0x1
c000d016:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d01c:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d021:	85 c0                	test   eax,eax
c000d023:	74 24                	je     c000d049 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d025:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d02b:	83 ec 04             	sub    esp,0x4
c000d02e:	68 40 84 02 c0       	push   0xc0028440
c000d033:	83 ec 08             	sub    esp,0x8
c000d036:	89 e0                	mov    eax,esp
c000d038:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d03b:	89 08                	mov    DWORD PTR [eax],ecx
c000d03d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d040:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d044:	ff d2                	call   edx
c000d046:	83 c4 10             	add    esp,0x10
c000d049:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d04d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d050:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d055:	0f b6 d2             	movzx  edx,dl
c000d058:	0f b6 c0             	movzx  eax,al
c000d05b:	39 c2                	cmp    edx,eax
c000d05d:	74 1c                	je     c000d07b <sendKeyboardToken(KeyboardToken)+0x7c>
c000d05f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d062:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d067:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d06c:	0f b6 c0             	movzx  eax,al
c000d06f:	83 ec 0c             	sub    esp,0xc
c000d072:	50                   	push   eax
c000d073:	e8 a0 b4 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d07e:	0f b6 c0             	movzx  eax,al
c000d081:	85 c0                	test   eax,eax
c000d083:	0f 84 da 00 00 00    	je     c000d163 <sendKeyboardToken(KeyboardToken)+0x164>
c000d089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d08c:	0f b7 c0             	movzx  eax,ax
c000d08f:	3d 18 03 00 00       	cmp    eax,0x318
c000d094:	75 06                	jne    c000d09c <sendKeyboardToken(KeyboardToken)+0x9d>
c000d096:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d09c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d09f:	0f b7 c0             	movzx  eax,ax
c000d0a2:	3d 19 03 00 00       	cmp    eax,0x319
c000d0a7:	75 06                	jne    c000d0af <sendKeyboardToken(KeyboardToken)+0xb0>
c000d0a9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d0af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0b2:	0f b7 c0             	movzx  eax,ax
c000d0b5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d0ba:	75 06                	jne    c000d0c2 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d0bc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0c5:	0f b7 c0             	movzx  eax,ax
c000d0c8:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d0cd:	75 06                	jne    c000d0d5 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d0cf:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0d8:	0f b7 c0             	movzx  eax,ax
c000d0db:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d0e0:	75 06                	jne    c000d0e8 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0e2:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0eb:	0f b7 c0             	movzx  eax,ax
c000d0ee:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0f3:	75 06                	jne    c000d0fb <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0f5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0fe:	0f b7 c0             	movzx  eax,ax
c000d101:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d106:	75 06                	jne    c000d10e <sendKeyboardToken(KeyboardToken)+0x10f>
c000d108:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d111:	0f b7 c0             	movzx  eax,ax
c000d114:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d119:	75 06                	jne    c000d121 <sendKeyboardToken(KeyboardToken)+0x122>
c000d11b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d124:	0f b7 c0             	movzx  eax,ax
c000d127:	3d 20 03 00 00       	cmp    eax,0x320
c000d12c:	75 06                	jne    c000d134 <sendKeyboardToken(KeyboardToken)+0x135>
c000d12e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d137:	0f b7 c0             	movzx  eax,ax
c000d13a:	3d 21 03 00 00       	cmp    eax,0x321
c000d13f:	75 06                	jne    c000d147 <sendKeyboardToken(KeyboardToken)+0x148>
c000d141:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d14a:	0f b7 c0             	movzx  eax,ax
c000d14d:	3d 22 03 00 00       	cmp    eax,0x322
c000d152:	0f 85 f1 00 00 00    	jne    c000d249 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d158:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d15e:	e9 e6 00 00 00       	jmp    c000d249 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d166:	0f b7 c0             	movzx  eax,ax
c000d169:	3d 18 03 00 00       	cmp    eax,0x318
c000d16e:	75 0a                	jne    c000d17a <sendKeyboardToken(KeyboardToken)+0x17b>
c000d170:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d176:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17d:	0f b7 c0             	movzx  eax,ax
c000d180:	3d 19 03 00 00       	cmp    eax,0x319
c000d185:	75 0a                	jne    c000d191 <sendKeyboardToken(KeyboardToken)+0x192>
c000d187:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d18d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d194:	0f b7 c0             	movzx  eax,ax
c000d197:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d19c:	75 0a                	jne    c000d1a8 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d19e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d1a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ab:	0f b7 c0             	movzx  eax,ax
c000d1ae:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1b3:	75 0a                	jne    c000d1bf <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d1b5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d1bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c2:	0f b7 c0             	movzx  eax,ax
c000d1c5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1ca:	75 0a                	jne    c000d1d6 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d1cc:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d1d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d9:	0f b7 c0             	movzx  eax,ax
c000d1dc:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1e1:	75 0a                	jne    c000d1ed <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1e3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f0:	0f b7 c0             	movzx  eax,ax
c000d1f3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1f8:	75 0a                	jne    c000d204 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1fa:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d200:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d207:	0f b7 c0             	movzx  eax,ax
c000d20a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d20f:	75 0a                	jne    c000d21b <sendKeyboardToken(KeyboardToken)+0x21c>
c000d211:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d217:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d21b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21e:	0f b7 c0             	movzx  eax,ax
c000d221:	3d 20 03 00 00       	cmp    eax,0x320
c000d226:	75 0a                	jne    c000d232 <sendKeyboardToken(KeyboardToken)+0x233>
c000d228:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d22e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d235:	0f b7 c0             	movzx  eax,ax
c000d238:	3d 21 03 00 00       	cmp    eax,0x321
c000d23d:	75 0a                	jne    c000d249 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d23f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d245:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24c:	0f b7 c0             	movzx  eax,ax
c000d24f:	3d 00 02 00 00       	cmp    eax,0x200
c000d254:	75 2f                	jne    c000d285 <sendKeyboardToken(KeyboardToken)+0x286>
c000d256:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d25b:	83 f0 01             	xor    eax,0x1
c000d25e:	0f b6 c0             	movzx  eax,al
c000d261:	85 c0                	test   eax,eax
c000d263:	74 20                	je     c000d285 <sendKeyboardToken(KeyboardToken)+0x286>
c000d265:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d26a:	6a 01                	push   0x1
c000d26c:	6a 00                	push   0x0
c000d26e:	68 48 ce 00 c0       	push   0xc000ce48
c000d273:	50                   	push   eax
c000d274:	e8 17 86 00 00       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c000d279:	83 c4 10             	add    esp,0x10
c000d27c:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d283:	eb 3a                	jmp    c000d2bf <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d288:	0f b7 c0             	movzx  eax,ax
c000d28b:	3d 01 02 00 00       	cmp    eax,0x201
c000d290:	75 2d                	jne    c000d2bf <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d292:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d297:	83 f0 01             	xor    eax,0x1
c000d29a:	0f b6 c0             	movzx  eax,al
c000d29d:	85 c0                	test   eax,eax
c000d29f:	74 1e                	je     c000d2bf <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d2a1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d2a6:	6a 01                	push   0x1
c000d2a8:	6a 00                	push   0x0
c000d2aa:	68 b6 ce 00 c0       	push   0xc000ceb6
c000d2af:	50                   	push   eax
c000d2b0:	e8 db 85 00 00       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d2bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c2:	0f b7 c0             	movzx  eax,ax
c000d2c5:	3d 25 03 00 00       	cmp    eax,0x325
c000d2ca:	75 06                	jne    c000d2d2 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d2cc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d2d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d5:	0f b7 c0             	movzx  eax,ax
c000d2d8:	3d 24 03 00 00       	cmp    eax,0x324
c000d2dd:	75 06                	jne    c000d2e5 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d2df:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e8:	0f b7 c0             	movzx  eax,ax
c000d2eb:	3d 23 03 00 00       	cmp    eax,0x323
c000d2f0:	75 06                	jne    c000d2f8 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2f2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2fb:	0f b7 c0             	movzx  eax,ax
c000d2fe:	3d 26 03 00 00       	cmp    eax,0x326
c000d303:	75 06                	jne    c000d30b <sendKeyboardToken(KeyboardToken)+0x30c>
c000d305:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d30b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30e:	0f b7 c0             	movzx  eax,ax
c000d311:	3d 27 03 00 00       	cmp    eax,0x327
c000d316:	75 06                	jne    c000d31e <sendKeyboardToken(KeyboardToken)+0x31f>
c000d318:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d321:	0f b7 c0             	movzx  eax,ax
c000d324:	3d 22 03 00 00       	cmp    eax,0x322
c000d329:	75 06                	jne    c000d331 <sendKeyboardToken(KeyboardToken)+0x332>
c000d32b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d331:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d335:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d338:	83 f0 01             	xor    eax,0x1
c000d33b:	0f b6 c0             	movzx  eax,al
c000d33e:	85 c0                	test   eax,eax
c000d340:	74 7c                	je     c000d3be <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d342:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d347:	0f b6 c0             	movzx  eax,al
c000d34a:	85 c0                	test   eax,eax
c000d34c:	74 43                	je     c000d391 <sendKeyboardToken(KeyboardToken)+0x392>
c000d34e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d352:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d356:	85 c0                	test   eax,eax
c000d358:	74 2b                	je     c000d385 <sendKeyboardToken(KeyboardToken)+0x386>
c000d35a:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d360:	89 d0                	mov    eax,edx
c000d362:	c1 e0 02             	shl    eax,0x2
c000d365:	01 d0                	add    eax,edx
c000d367:	d1 e0                	shl    eax,1
c000d369:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d371:	0f b7 c0             	movzx  eax,ax
c000d374:	8d 50 d0             	lea    edx,[eax-0x30]
c000d377:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d37c:	01 d0                	add    eax,edx
c000d37e:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d383:	eb 71                	jmp    c000d3f6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d385:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d38f:	eb 65                	jmp    c000d3f6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d391:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d396:	85 c0                	test   eax,eax
c000d398:	74 18                	je     c000d3b2 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d39a:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d39f:	0f b6 c0             	movzx  eax,al
c000d3a2:	83 ec 0c             	sub    esp,0xc
c000d3a5:	50                   	push   eax
c000d3a6:	e8 79 fb ff ff       	call   c000cf24 <sendKeyToTerminal(unsigned char)>
c000d3ab:	83 c4 10             	add    esp,0x10
c000d3ae:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3b2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3bc:	eb 38                	jmp    c000d3f6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c1:	0f b7 c0             	movzx  eax,ax
c000d3c4:	3d 01 01 00 00       	cmp    eax,0x101
c000d3c9:	75 2b                	jne    c000d3f6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3cb:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3d0:	85 c0                	test   eax,eax
c000d3d2:	74 18                	je     c000d3ec <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d3d4:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3d9:	0f b6 c0             	movzx  eax,al
c000d3dc:	83 ec 0c             	sub    esp,0xc
c000d3df:	50                   	push   eax
c000d3e0:	e8 3f fb ff ff       	call   c000cf24 <sendKeyToTerminal(unsigned char)>
c000d3e5:	83 c4 10             	add    esp,0x10
c000d3e8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3ec:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3f6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3f9:	83 f0 01             	xor    eax,0x1
c000d3fc:	0f b6 c0             	movzx  eax,al
c000d3ff:	85 c0                	test   eax,eax
c000d401:	74 5a                	je     c000d45d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d403:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d406:	83 f0 01             	xor    eax,0x1
c000d409:	0f b6 c0             	movzx  eax,al
c000d40c:	85 c0                	test   eax,eax
c000d40e:	74 4d                	je     c000d45d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d410:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d415:	83 f0 01             	xor    eax,0x1
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	85 c0                	test   eax,eax
c000d41d:	74 3e                	je     c000d45d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d422:	0f b7 c0             	movzx  eax,ax
c000d425:	83 f8 1f             	cmp    eax,0x1f
c000d428:	76 0b                	jbe    c000d435 <sendKeyboardToken(KeyboardToken)+0x436>
c000d42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42d:	0f b7 c0             	movzx  eax,ax
c000d430:	83 f8 7e             	cmp    eax,0x7e
c000d433:	76 16                	jbe    c000d44b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d438:	0f b7 c0             	movzx  eax,ax
c000d43b:	83 f8 0a             	cmp    eax,0xa
c000d43e:	74 0b                	je     c000d44b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d443:	0f b7 c0             	movzx  eax,ax
c000d446:	83 f8 08             	cmp    eax,0x8
c000d449:	75 12                	jne    c000d45d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44e:	0f b6 c0             	movzx  eax,al
c000d451:	83 ec 0c             	sub    esp,0xc
c000d454:	50                   	push   eax
c000d455:	e8 ca fa ff ff       	call   c000cf24 <sendKeyToTerminal(unsigned char)>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d460:	83 f0 01             	xor    eax,0x1
c000d463:	0f b6 c0             	movzx  eax,al
c000d466:	85 c0                	test   eax,eax
c000d468:	74 5d                	je     c000d4c7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d46a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d46d:	83 f0 01             	xor    eax,0x1
c000d470:	0f b6 c0             	movzx  eax,al
c000d473:	85 c0                	test   eax,eax
c000d475:	74 50                	je     c000d4c7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d477:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d47c:	0f b6 c0             	movzx  eax,al
c000d47f:	85 c0                	test   eax,eax
c000d481:	74 44                	je     c000d4c7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d486:	0f b7 c0             	movzx  eax,ax
c000d489:	83 f8 3f             	cmp    eax,0x3f
c000d48c:	76 39                	jbe    c000d4c7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d491:	0f b7 c0             	movzx  eax,ax
c000d494:	83 f8 7f             	cmp    eax,0x7f
c000d497:	77 2e                	ja     c000d4c7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49c:	88 c2                	mov    dl,al
c000d49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a1:	0f b7 c0             	movzx  eax,ax
c000d4a4:	83 f8 5f             	cmp    eax,0x5f
c000d4a7:	76 04                	jbe    c000d4ad <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d4a9:	b0 20                	mov    al,0x20
c000d4ab:	eb 02                	jmp    c000d4af <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d4ad:	b0 00                	mov    al,0x0
c000d4af:	89 d1                	mov    ecx,edx
c000d4b1:	29 c1                	sub    ecx,eax
c000d4b3:	89 c8                	mov    eax,ecx
c000d4b5:	83 e8 40             	sub    eax,0x40
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	83 ec 0c             	sub    esp,0xc
c000d4be:	50                   	push   eax
c000d4bf:	e8 60 fa ff ff       	call   c000cf24 <sendKeyToTerminal(unsigned char)>
c000d4c4:	83 c4 10             	add    esp,0x10
c000d4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ca:	0f b7 c0             	movzx  eax,ax
c000d4cd:	3d 00 03 00 00       	cmp    eax,0x300
c000d4d2:	75 12                	jne    c000d4e6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4d4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4d7:	83 f0 01             	xor    eax,0x1
c000d4da:	0f b6 c0             	movzx  eax,al
c000d4dd:	85 c0                	test   eax,eax
c000d4df:	74 05                	je     c000d4e6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4e1:	e8 33 b0 ff ff       	call   c0008519 <doTerminalCycle()>
c000d4e6:	90                   	nop
c000d4e7:	c9                   	leave  
c000d4e8:	c3                   	ret    

c000d4e9 <clearInternalKeybuffer(VgaText*)>:
c000d4e9:	55                   	push   ebp
c000d4ea:	89 e5                	mov    ebp,esp
c000d4ec:	83 ec 08             	sub    esp,0x8
c000d4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f2:	05 02 01 00 00       	add    eax,0x102
c000d4f7:	83 ec 0c             	sub    esp,0xc
c000d4fa:	50                   	push   eax
c000d4fb:	e8 80 30 ff ff       	call   c0000580 <strlen>
c000d500:	83 c4 10             	add    esp,0x10
c000d503:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d506:	81 c2 02 01 00 00    	add    edx,0x102
c000d50c:	83 ec 04             	sub    esp,0x4
c000d50f:	50                   	push   eax
c000d510:	6a 00                	push   0x0
c000d512:	52                   	push   edx
c000d513:	e8 d8 2f ff ff       	call   c00004f0 <memset>
c000d518:	83 c4 10             	add    esp,0x10
c000d51b:	90                   	nop
c000d51c:	c9                   	leave  
c000d51d:	c3                   	ret    

c000d51e <readKeyboard(VgaText*, char*, unsigned long)>:
c000d51e:	55                   	push   ebp
c000d51f:	89 e5                	mov    ebp,esp
c000d521:	83 ec 18             	sub    esp,0x18
c000d524:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d529:	85 c0                	test   eax,eax
c000d52b:	74 2a                	je     c000d557 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d52d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d533:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d539:	83 ec 04             	sub    esp,0x4
c000d53c:	68 40 84 02 c0       	push   0xc0028440
c000d541:	83 ec 08             	sub    esp,0x8
c000d544:	89 e0                	mov    eax,esp
c000d546:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d549:	89 08                	mov    DWORD PTR [eax],ecx
c000d54b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d54e:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d552:	ff d2                	call   edx
c000d554:	83 c4 10             	add    esp,0x10
c000d557:	fb                   	sti    
c000d558:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d55f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d563:	0f 84 0d 01 00 00    	je     c000d676 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d572:	0f be c0             	movsx  eax,al
c000d575:	85 c0                	test   eax,eax
c000d577:	75 2c                	jne    c000d5a5 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d579:	fa                   	cli    
c000d57a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d57f:	83 c0 01             	add    eax,0x1
c000d582:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d587:	e8 50 85 00 00       	call   c0015adc <schedule()>
c000d58c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d591:	83 e8 01             	sub    eax,0x1
c000d594:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d599:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d59e:	85 c0                	test   eax,eax
c000d5a0:	75 c7                	jne    c000d569 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d5a2:	fb                   	sti    
c000d5a3:	eb c4                	jmp    c000d569 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d5a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000d5ab:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d5ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5b1:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d5b7:	88 10                	mov    BYTE PTR [eax],dl
c000d5b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bc:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5c2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d5c5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5c9:	83 f8 03             	cmp    eax,0x3
c000d5cc:	75 1e                	jne    c000d5ec <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d5ce:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5d8:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5de:	83 ec 08             	sub    esp,0x8
c000d5e1:	6a 02                	push   0x2
c000d5e3:	50                   	push   eax
c000d5e4:	e8 8e 40 00 00       	call   c0011677 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5f0:	83 f8 1c             	cmp    eax,0x1c
c000d5f3:	75 1e                	jne    c000d613 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5ff:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d605:	83 ec 08             	sub    esp,0x8
c000d608:	6a 09                	push   0x9
c000d60a:	50                   	push   eax
c000d60b:	e8 67 40 00 00       	call   c0011677 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d616:	05 02 01 00 00       	add    eax,0x102
c000d61b:	83 ec 0c             	sub    esp,0xc
c000d61e:	50                   	push   eax
c000d61f:	e8 5c 2f ff ff       	call   c0000580 <strlen>
c000d624:	83 c4 10             	add    esp,0x10
c000d627:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d62a:	81 c2 02 01 00 00    	add    edx,0x102
c000d630:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d633:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d636:	81 c2 02 01 00 00    	add    edx,0x102
c000d63c:	83 ec 04             	sub    esp,0x4
c000d63f:	50                   	push   eax
c000d640:	51                   	push   ecx
c000d641:	52                   	push   edx
c000d642:	e8 89 2d ff ff       	call   c00003d0 <memmove>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d64e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d652:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d656:	83 f8 0a             	cmp    eax,0xa
c000d659:	74 16                	je     c000d671 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d65b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d65f:	83 f8 03             	cmp    eax,0x3
c000d662:	74 0d                	je     c000d671 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d664:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d668:	83 f8 1c             	cmp    eax,0x1c
c000d66b:	0f 85 ee fe ff ff    	jne    c000d55f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d674:	eb 03                	jmp    c000d679 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d676:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d679:	c9                   	leave  
c000d67a:	c3                   	ret    
c000d67b:	90                   	nop

c000d67c <Keyboard::Keyboard(char const*)>:
c000d67c:	83 ec 0c             	sub    esp,0xc
c000d67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d683:	83 ec 08             	sub    esp,0x8
c000d686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d68a:	50                   	push   eax
c000d68b:	e8 44 f1 ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000d690:	83 c4 10             	add    esp,0x10
c000d693:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c000d698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d69c:	89 10                	mov    DWORD PTR [eax],edx
c000d69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d6ac:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d6b3:	90                   	nop
c000d6b4:	83 c4 0c             	add    esp,0xc
c000d6b7:	c3                   	ret    

c000d6b8 <Keyboard::~Keyboard()>:
c000d6b8:	83 ec 0c             	sub    esp,0xc
c000d6bb:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c000d6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c4:	89 10                	mov    DWORD PTR [eax],edx
c000d6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ca:	83 ec 0c             	sub    esp,0xc
c000d6cd:	50                   	push   eax
c000d6ce:	e8 6b ee ff ff       	call   c000c53e <Device::~Device()>
c000d6d3:	83 c4 10             	add    esp,0x10
c000d6d6:	90                   	nop
c000d6d7:	83 c4 0c             	add    esp,0xc
c000d6da:	c3                   	ret    
c000d6db:	90                   	nop

c000d6dc <Keyboard::~Keyboard()>:
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	83 ec 0c             	sub    esp,0xc
c000d6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e6:	e8 cd ff ff ff       	call   c000d6b8 <Keyboard::~Keyboard()>
c000d6eb:	83 c4 10             	add    esp,0x10
c000d6ee:	83 ec 08             	sub    esp,0x8
c000d6f1:	68 5c 01 00 00       	push   0x15c
c000d6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6fa:	e8 0d d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d6ff:	83 c4 10             	add    esp,0x10
c000d702:	83 c4 0c             	add    esp,0xc
c000d705:	c3                   	ret    

c000d706 <LogicalDisk::close(int, int, void*)>:
c000d706:	83 c8 ff             	or     eax,0xffffffff
c000d709:	c3                   	ret    

c000d70a <LogicalDisk::~LogicalDisk()>:
c000d70a:	83 ec 0c             	sub    esp,0xc
c000d70d:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000d712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d716:	89 10                	mov    DWORD PTR [eax],edx
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	83 ec 0c             	sub    esp,0xc
c000d71f:	50                   	push   eax
c000d720:	e8 19 ee ff ff       	call   c000c53e <Device::~Device()>
c000d725:	83 c4 10             	add    esp,0x10
c000d728:	90                   	nop
c000d729:	83 c4 0c             	add    esp,0xc
c000d72c:	c3                   	ret    
c000d72d:	90                   	nop

c000d72e <LogicalDisk::~LogicalDisk()>:
c000d72e:	83 ec 0c             	sub    esp,0xc
c000d731:	83 ec 0c             	sub    esp,0xc
c000d734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d738:	e8 cd ff ff ff       	call   c000d70a <LogicalDisk::~LogicalDisk()>
c000d73d:	83 c4 10             	add    esp,0x10
c000d740:	83 ec 08             	sub    esp,0x8
c000d743:	68 78 01 00 00       	push   0x178
c000d748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74c:	e8 bb d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	83 c4 0c             	add    esp,0xc
c000d757:	c3                   	ret    

c000d758 <LogicalDisk::open(int, int, void*)>:
c000d758:	83 ec 18             	sub    esp,0x18
c000d75b:	68 68 16 02 c0       	push   0xc0021668
c000d760:	e8 74 3a 00 00       	call   c00111d9 <KePanic(char const*)>
c000d765:	83 c8 ff             	or     eax,0xffffffff
c000d768:	83 c4 1c             	add    esp,0x1c
c000d76b:	c3                   	ret    

c000d76c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d76c:	53                   	push   ebx
c000d76d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d775:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d779:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d77f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d785:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d78b:	77 10                	ja     c000d79d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d78d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d793:	89 d3                	mov    ebx,edx
c000d795:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d79b:	72 05                	jb     c000d7a2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d79d:	83 c8 ff             	or     eax,0xffffffff
c000d7a0:	89 c2                	mov    edx,eax
c000d7a2:	5b                   	pop    ebx
c000d7a3:	c3                   	ret    

c000d7a4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d7a4:	56                   	push   esi
c000d7a5:	83 c8 ff             	or     eax,0xffffffff
c000d7a8:	53                   	push   ebx
c000d7a9:	89 c2                	mov    edx,eax
c000d7ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d7af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d7bd:	77 27                	ja     c000d7e6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7bf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d7c5:	89 d8                	mov    eax,ebx
c000d7c7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d7cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7d2:	89 c2                	mov    edx,eax
c000d7d4:	73 10                	jae    c000d7e6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7d6:	89 c8                	mov    eax,ecx
c000d7d8:	89 da                	mov    edx,ebx
c000d7da:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d7e0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7e6:	5b                   	pop    ebx
c000d7e7:	5e                   	pop    esi
c000d7e8:	c3                   	ret    
c000d7e9:	90                   	nop

c000d7ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7ea:	83 ec 1c             	sub    esp,0x1c
c000d7ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d801:	89 04 24             	mov    DWORD PTR [esp],eax
c000d804:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d808:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d810:	83 ec 08             	sub    esp,0x8
c000d813:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d817:	50                   	push   eax
c000d818:	e8 b7 ef ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000d81d:	83 c4 10             	add    esp,0x10
c000d820:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000d825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d829:	89 10                	mov    DWORD PTR [eax],edx
c000d82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d83a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d845:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d850:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d85a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d85e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d862:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d866:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d86c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d872:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d876:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d879:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d87d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d883:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d891:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d8a5:	90                   	nop
c000d8a6:	83 c4 1c             	add    esp,0x1c
c000d8a9:	c3                   	ret    

c000d8aa <LogicalDisk::assignDriveLetter()>:
c000d8aa:	55                   	push   ebp
c000d8ab:	57                   	push   edi
c000d8ac:	56                   	push   esi
c000d8ad:	53                   	push   ebx
c000d8ae:	83 ec 14             	sub    esp,0x14
c000d8b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8b5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d8bb:	b0 41                	mov    al,0x41
c000d8bd:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d8c3:	84 d2                	test   dl,dl
c000d8c5:	75 02                	jne    c000d8c9 <LogicalDisk::assignDriveLetter()+0x1f>
c000d8c7:	b0 43                	mov    al,0x43
c000d8c9:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d8cf:	0f b6 ca             	movzx  ecx,dl
c000d8d2:	0f be e8             	movsx  ebp,al
c000d8d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8d9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d8dd:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d8e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8e7:	3c 43                	cmp    al,0x43
c000d8e9:	75 10                	jne    c000d8fb <LogicalDisk::assignDriveLetter()+0x51>
c000d8eb:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8f2:	75 5a                	jne    c000d94e <LogicalDisk::assignDriveLetter()+0xa4>
c000d8f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8f9:	75 53                	jne    c000d94e <LogicalDisk::assignDriveLetter()+0xa4>
c000d8fb:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8fe:	ba 01 00 00 00       	mov    edx,0x1
c000d903:	89 34 24             	mov    DWORD PTR [esp],esi
c000d906:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d909:	d3 e2                	shl    edx,cl
c000d90b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d90f:	89 d7                	mov    edi,edx
c000d911:	89 d6                	mov    esi,edx
c000d913:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d917:	c1 ff 1f             	sar    edi,0x1f
c000d91a:	21 f9                	and    ecx,edi
c000d91c:	09 d1                	or     ecx,edx
c000d91e:	75 2e                	jne    c000d94e <LogicalDisk::assignDriveLetter()+0xa4>
c000d920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d924:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d928:	09 f2                	or     edx,esi
c000d92a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d92d:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d933:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d937:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d93d:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d944:	09 fa                	or     edx,edi
c000d946:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d94c:	eb 0d                	jmp    c000d95b <LogicalDisk::assignDriveLetter()+0xb1>
c000d94e:	8d 50 01             	lea    edx,[eax+0x1]
c000d951:	45                   	inc    ebp
c000d952:	80 fa 5b             	cmp    dl,0x5b
c000d955:	88 d0                	mov    al,dl
c000d957:	75 8e                	jne    c000d8e7 <LogicalDisk::assignDriveLetter()+0x3d>
c000d959:	31 c0                	xor    eax,eax
c000d95b:	83 c4 14             	add    esp,0x14
c000d95e:	5b                   	pop    ebx
c000d95f:	5e                   	pop    esi
c000d960:	5f                   	pop    edi
c000d961:	5d                   	pop    ebp
c000d962:	c3                   	ret    
c000d963:	90                   	nop

c000d964 <LogicalDisk::mount()>:
c000d964:	56                   	push   esi
c000d965:	53                   	push   ebx
c000d966:	53                   	push   ebx
c000d967:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d96b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d971:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d97b:	85 db                	test   ebx,ebx
c000d97d:	74 27                	je     c000d9a6 <LogicalDisk::mount()+0x42>
c000d97f:	51                   	push   ecx
c000d980:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d987:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d989:	83 e8 41             	sub    eax,0x41
c000d98c:	50                   	push   eax
c000d98d:	56                   	push   esi
c000d98e:	53                   	push   ebx
c000d98f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d992:	83 c4 10             	add    esp,0x10
c000d995:	84 c0                	test   al,al
c000d997:	74 08                	je     c000d9a1 <LogicalDisk::mount()+0x3d>
c000d999:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d99f:	eb 07                	jmp    c000d9a8 <LogicalDisk::mount()+0x44>
c000d9a1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d9a4:	eb d5                	jmp    c000d97b <LogicalDisk::mount()+0x17>
c000d9a6:	31 c0                	xor    eax,eax
c000d9a8:	5a                   	pop    edx
c000d9a9:	5b                   	pop    ebx
c000d9aa:	5e                   	pop    esi
c000d9ab:	c3                   	ret    

c000d9ac <LogicalDisk::unmount()>:
c000d9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9b0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9ba:	c3                   	ret    
c000d9bb:	90                   	nop

c000d9bc <LogicalDisk::eject()>:
c000d9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d9c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9cc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d9cf:	90                   	nop

c000d9d0 <LogicalDisk::unassignDriveLetter()>:
c000d9d0:	57                   	push   edi
c000d9d1:	56                   	push   esi
c000d9d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9d6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d9dd:	85 c9                	test   ecx,ecx
c000d9df:	75 0f                	jne    c000d9f0 <LogicalDisk::unassignDriveLetter()+0x20>
c000d9e1:	c7 44 24 0c 8c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002168c
c000d9e9:	5e                   	pop    esi
c000d9ea:	5f                   	pop    edi
c000d9eb:	e9 e9 37 00 00       	jmp    c00111d9 <KePanic(char const*)>
c000d9f0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9f7:	83 e9 41             	sub    ecx,0x41
c000d9fa:	b8 01 00 00 00       	mov    eax,0x1
c000d9ff:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000da0a:	d3 e0                	shl    eax,cl
c000da0c:	89 c7                	mov    edi,eax
c000da0e:	f7 d0                	not    eax
c000da10:	c1 ff 1f             	sar    edi,0x1f
c000da13:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000da19:	89 fe                	mov    esi,edi
c000da1b:	f7 d6                	not    esi
c000da1d:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000da23:	5e                   	pop    esi
c000da24:	5f                   	pop    edi
c000da25:	c3                   	ret    

c000da26 <LogicalDisk::read(unsigned long long, int, void*)>:
c000da26:	57                   	push   edi
c000da27:	56                   	push   esi
c000da28:	53                   	push   ebx
c000da29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da3f:	77 41                	ja     c000da82 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000da41:	99                   	cdq    
c000da42:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da48:	01 c8                	add    eax,ecx
c000da4a:	11 da                	adc    edx,ebx
c000da4c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da52:	19 d7                	sbb    edi,edx
c000da54:	72 33                	jb     c000da89 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da56:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da5c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da66:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da6a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da7a:	5b                   	pop    ebx
c000da7b:	5e                   	pop    esi
c000da7c:	5f                   	pop    edi
c000da7d:	e9 d4 0a 00 00       	jmp    c000e556 <VCache::read(unsigned long long, int, void*)>
c000da82:	b8 05 00 00 00       	mov    eax,0x5
c000da87:	eb 05                	jmp    c000da8e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da89:	b8 07 00 00 00       	mov    eax,0x7
c000da8e:	5b                   	pop    ebx
c000da8f:	5e                   	pop    esi
c000da90:	5f                   	pop    edi
c000da91:	c3                   	ret    

c000da92 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da92:	57                   	push   edi
c000da93:	56                   	push   esi
c000da94:	53                   	push   ebx
c000da95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000daa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000daa5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000daab:	77 41                	ja     c000daee <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000daad:	99                   	cdq    
c000daae:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dab4:	01 c8                	add    eax,ecx
c000dab6:	11 da                	adc    edx,ebx
c000dab8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dabe:	19 d7                	sbb    edi,edx
c000dac0:	72 33                	jb     c000daf5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dac2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dac8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dace:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dad2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dad6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dadc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dae2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dae6:	5b                   	pop    ebx
c000dae7:	5e                   	pop    esi
c000dae8:	5f                   	pop    edi
c000dae9:	e9 6e 09 00 00       	jmp    c000e45c <VCache::write(unsigned long long, int, void*)>
c000daee:	b8 05 00 00 00       	mov    eax,0x5
c000daf3:	eb 05                	jmp    c000dafa <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000daf5:	b8 07 00 00 00       	mov    eax,0x7
c000dafa:	5b                   	pop    ebx
c000dafb:	5e                   	pop    esi
c000dafc:	5f                   	pop    edi
c000dafd:	c3                   	ret    
c000dafe:	66 90                	xchg   ax,ax

c000db00 <Mouse::Mouse(char const*)>:
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db07:	83 ec 08             	sub    esp,0x8
c000db0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db0e:	50                   	push   eax
c000db0f:	e8 c0 ec ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000db14:	83 c4 10             	add    esp,0x10
c000db17:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c000db1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db20:	89 10                	mov    DWORD PTR [eax],edx
c000db22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db26:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000db30:	90                   	nop
c000db31:	83 c4 0c             	add    esp,0xc
c000db34:	c3                   	ret    
c000db35:	90                   	nop
c000db36:	66 90                	xchg   ax,ax

c000db38 <Mouse::~Mouse()>:
c000db38:	83 ec 0c             	sub    esp,0xc
c000db3b:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c000db40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db44:	89 10                	mov    DWORD PTR [eax],edx
c000db46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4a:	83 ec 0c             	sub    esp,0xc
c000db4d:	50                   	push   eax
c000db4e:	e8 eb e9 ff ff       	call   c000c53e <Device::~Device()>
c000db53:	83 c4 10             	add    esp,0x10
c000db56:	90                   	nop
c000db57:	83 c4 0c             	add    esp,0xc
c000db5a:	c3                   	ret    
c000db5b:	90                   	nop

c000db5c <Mouse::~Mouse()>:
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	83 ec 0c             	sub    esp,0xc
c000db62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db66:	e8 cd ff ff ff       	call   c000db38 <Mouse::~Mouse()>
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	83 ec 08             	sub    esp,0x8
c000db71:	68 58 01 00 00       	push   0x158
c000db76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7a:	e8 8d cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000db7f:	83 c4 10             	add    esp,0x10
c000db82:	83 c4 0c             	add    esp,0xc
c000db85:	c3                   	ret    

c000db86 <NIC::getMAC()>:
c000db86:	31 c0                	xor    eax,eax
c000db88:	31 d2                	xor    edx,edx
c000db8a:	c3                   	ret    
c000db8b:	90                   	nop

c000db8c <NIC::write(int, unsigned char*, int*)>:
c000db8c:	b8 01 00 00 00       	mov    eax,0x1
c000db91:	c3                   	ret    

c000db92 <NIC::NIC(char const*)>:
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db99:	83 ec 08             	sub    esp,0x8
c000db9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba0:	50                   	push   eax
c000dba1:	e8 2e ec ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000dba6:	83 c4 10             	add    esp,0x10
c000dba9:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb2:	89 10                	mov    DWORD PTR [eax],edx
c000dbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dbc2:	90                   	nop
c000dbc3:	83 c4 0c             	add    esp,0xc
c000dbc6:	c3                   	ret    
c000dbc7:	90                   	nop

c000dbc8 <NIC::~NIC()>:
c000dbc8:	83 ec 0c             	sub    esp,0xc
c000dbcb:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000dbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd4:	89 10                	mov    DWORD PTR [eax],edx
c000dbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbda:	83 ec 0c             	sub    esp,0xc
c000dbdd:	50                   	push   eax
c000dbde:	e8 5b e9 ff ff       	call   c000c53e <Device::~Device()>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	90                   	nop
c000dbe7:	83 c4 0c             	add    esp,0xc
c000dbea:	c3                   	ret    
c000dbeb:	90                   	nop

c000dbec <NIC::~NIC()>:
c000dbec:	83 ec 0c             	sub    esp,0xc
c000dbef:	83 ec 0c             	sub    esp,0xc
c000dbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf6:	e8 cd ff ff ff       	call   c000dbc8 <NIC::~NIC()>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	83 ec 08             	sub    esp,0x8
c000dc01:	68 58 01 00 00       	push   0x158
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	e8 fd cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc0f:	83 c4 10             	add    esp,0x10
c000dc12:	83 c4 0c             	add    esp,0xc
c000dc15:	c3                   	ret    

c000dc16 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc16:	55                   	push   ebp
c000dc17:	57                   	push   edi
c000dc18:	56                   	push   esi
c000dc19:	53                   	push   ebx
c000dc1a:	81 ec 28 01 00 00    	sub    esp,0x128
c000dc20:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dc27:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dc2e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dc35:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dc3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc40:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc44:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc4b:	e8 80 ec ff ff       	call   c000c8d0 <Device::getName()>
c000dc50:	5a                   	pop    edx
c000dc51:	59                   	pop    ecx
c000dc52:	50                   	push   eax
c000dc53:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc57:	55                   	push   ebp
c000dc58:	e8 f3 29 ff ff       	call   c0000650 <strcpy>
c000dc5d:	5b                   	pop    ebx
c000dc5e:	58                   	pop    eax
c000dc5f:	68 38 17 02 c0       	push   0xc0021738
c000dc64:	55                   	push   ebp
c000dc65:	e8 06 2c ff ff       	call   c0000870 <strcat>
c000dc6a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc71:	e8 5d 9e ff ff       	call   c0007ad3 <malloc>
c000dc76:	83 c4 0c             	add    esp,0xc
c000dc79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc81:	89 c3                	mov    ebx,eax
c000dc83:	57                   	push   edi
c000dc84:	56                   	push   esi
c000dc85:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc8c:	55                   	push   ebp
c000dc8d:	50                   	push   eax
c000dc8e:	e8 57 fb ff ff       	call   c000d7ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc93:	83 c4 14             	add    esp,0x14
c000dc96:	53                   	push   ebx
c000dc97:	e8 0e fc ff ff       	call   c000d8aa <LogicalDisk::assignDriveLetter()>
c000dc9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc9f:	e8 c0 fc ff ff       	call   c000d964 <LogicalDisk::mount()>
c000dca4:	58                   	pop    eax
c000dca5:	5a                   	pop    edx
c000dca6:	53                   	push   ebx
c000dca7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dcae:	e8 89 e9 ff ff       	call   c000c63c <Device::addChild(Device*)>
c000dcb3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dcb9:	5b                   	pop    ebx
c000dcba:	5e                   	pop    esi
c000dcbb:	5f                   	pop    edi
c000dcbc:	5d                   	pop    ebp
c000dcbd:	c3                   	ret    

c000dcbe <createPartitionsForDisk(PhysicalDisk*)>:
c000dcbe:	55                   	push   ebp
c000dcbf:	57                   	push   edi
c000dcc0:	56                   	push   esi
c000dcc1:	53                   	push   ebx
c000dcc2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dcc8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dccf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dcd5:	3d 00 02 00 00       	cmp    eax,0x200
c000dcda:	74 27                	je     c000dd03 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dcdc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dce2:	83 ec 10             	sub    esp,0x10
c000dce5:	99                   	cdq    
c000dce6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dcec:	52                   	push   edx
c000dced:	50                   	push   eax
c000dcee:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dcf2:	c1 e6 0a             	shl    esi,0xa
c000dcf5:	89 fd                	mov    ebp,edi
c000dcf7:	55                   	push   ebp
c000dcf8:	56                   	push   esi
c000dcf9:	e8 a2 14 01 00       	call   c001f1a0 <__udivdi3>
c000dcfe:	e9 b9 00 00 00       	jmp    c000ddbc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd03:	83 ec 0c             	sub    esp,0xc
c000dd06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd08:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dd0c:	56                   	push   esi
c000dd0d:	6a 01                	push   0x1
c000dd0f:	6a 00                	push   0x0
c000dd11:	6a 00                	push   0x0
c000dd13:	53                   	push   ebx
c000dd14:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dd17:	83 c4 20             	add    esp,0x20
c000dd1a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dd22:	75 0a                	jne    c000dd2e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dd24:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dd2c:	74 2c                	je     c000dd5a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dd2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd34:	83 ec 10             	sub    esp,0x10
c000dd37:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd3d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd43:	89 f7                	mov    edi,esi
c000dd45:	c1 ff 1f             	sar    edi,0x1f
c000dd48:	57                   	push   edi
c000dd49:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd4d:	56                   	push   esi
c000dd4e:	c1 e0 0a             	shl    eax,0xa
c000dd51:	52                   	push   edx
c000dd52:	50                   	push   eax
c000dd53:	e8 48 14 01 00       	call   c001f1a0 <__udivdi3>
c000dd58:	eb 62                	jmp    c000ddbc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd5a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd61:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd68:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd6f:	89 cf                	mov    edi,ecx
c000dd71:	83 e2 7f             	and    edx,0x7f
c000dd74:	83 e7 7f             	and    edi,0x7f
c000dd77:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd7a:	83 e0 7f             	and    eax,0x7f
c000dd7d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd80:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd87:	83 e0 7f             	and    eax,0x7f
c000dd8a:	01 d0                	add    eax,edx
c000dd8c:	84 c0                	test   al,al
c000dd8e:	89 c5                	mov    ebp,eax
c000dd90:	74 41                	je     c000ddd3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd98:	83 ec 10             	sub    esp,0x10
c000dd9b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dda1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dda7:	89 f7                	mov    edi,esi
c000dda9:	c1 ff 1f             	sar    edi,0x1f
c000ddac:	57                   	push   edi
c000ddad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ddb1:	56                   	push   esi
c000ddb2:	c1 e0 0a             	shl    eax,0xa
c000ddb5:	52                   	push   edx
c000ddb6:	50                   	push   eax
c000ddb7:	e8 e4 13 01 00       	call   c001f1a0 <__udivdi3>
c000ddbc:	83 c4 14             	add    esp,0x14
c000ddbf:	52                   	push   edx
c000ddc0:	50                   	push   eax
c000ddc1:	6a 00                	push   0x0
c000ddc3:	6a 00                	push   0x0
c000ddc5:	53                   	push   ebx
c000ddc6:	e8 4b fe ff ff       	call   c000dc16 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddcb:	83 c4 20             	add    esp,0x20
c000ddce:	e9 73 01 00 00       	jmp    c000df46 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ddd3:	89 f0                	mov    eax,esi
c000ddd5:	31 c9                	xor    ecx,ecx
c000ddd7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ddde:	75 02                	jne    c000dde2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dde0:	89 cd                	mov    ebp,ecx
c000dde2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddea:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ddf1:	83 c0 10             	add    eax,0x10
c000ddf4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ddfc:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000de03:	c1 e2 08             	shl    edx,0x8
c000de06:	c1 e6 10             	shl    esi,0x10
c000de09:	09 f2                	or     edx,esi
c000de0b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000de12:	09 f2                	or     edx,esi
c000de14:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000de1b:	c1 e6 18             	shl    esi,0x18
c000de1e:	09 f2                	or     edx,esi
c000de20:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000de27:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000de2b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000de32:	c1 e6 10             	shl    esi,0x10
c000de35:	c1 e2 08             	shl    edx,0x8
c000de38:	09 f2                	or     edx,esi
c000de3a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000de41:	09 f2                	or     edx,esi
c000de43:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de4a:	c1 e6 18             	shl    esi,0x18
c000de4d:	09 f2                	or     edx,esi
c000de4f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de53:	41                   	inc    ecx
c000de54:	83 f9 04             	cmp    ecx,0x4
c000de57:	0f 85 7a ff ff ff    	jne    c000ddd7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de61:	83 f0 01             	xor    eax,0x1
c000de64:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de68:	75 4f                	jne    c000deb9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de6e:	83 f0 01             	xor    eax,0x1
c000de71:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de75:	75 42                	jne    c000deb9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de77:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de7d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de85:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de8b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de93:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de99:	89 f7                	mov    edi,esi
c000de9b:	c1 ff 1f             	sar    edi,0x1f
c000de9e:	57                   	push   edi
c000de9f:	56                   	push   esi
c000dea0:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dea4:	52                   	push   edx
c000dea5:	c1 e0 0a             	shl    eax,0xa
c000dea8:	50                   	push   eax
c000dea9:	e8 f2 12 01 00       	call   c001f1a0 <__udivdi3>
c000deae:	83 c4 10             	add    esp,0x10
c000deb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000deb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000deb9:	89 e8                	mov    eax,ebp
c000debb:	0f b6 e8             	movzx  ebp,al
c000debe:	85 ed                	test   ebp,ebp
c000dec0:	74 50                	je     c000df12 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dec6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000deca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dece:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ded2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ded6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000deda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dede:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dee2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000deea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000deee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000def2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000def6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000defa:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000defe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df02:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000df06:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000df0a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000df0e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000df12:	31 ed                	xor    ebp,ebp
c000df14:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df18:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df1c:	89 f8                	mov    eax,edi
c000df1e:	09 f0                	or     eax,esi
c000df20:	74 1e                	je     c000df40 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df22:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df26:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df2a:	89 d1                	mov    ecx,edx
c000df2c:	09 c1                	or     ecx,eax
c000df2e:	74 10                	je     c000df40 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df30:	83 ec 0c             	sub    esp,0xc
c000df33:	57                   	push   edi
c000df34:	56                   	push   esi
c000df35:	52                   	push   edx
c000df36:	50                   	push   eax
c000df37:	53                   	push   ebx
c000df38:	e8 d9 fc ff ff       	call   c000dc16 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df3d:	83 c4 20             	add    esp,0x20
c000df40:	45                   	inc    ebp
c000df41:	83 fd 04             	cmp    ebp,0x4
c000df44:	75 ce                	jne    c000df14 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df46:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df4c:	5b                   	pop    ebx
c000df4d:	5e                   	pop    esi
c000df4e:	5f                   	pop    edi
c000df4f:	5d                   	pop    ebp
c000df50:	c3                   	ret    
c000df51:	66 90                	xchg   ax,ax
c000df53:	90                   	nop

c000df54 <Serial::Serial(char const*)>:
c000df54:	83 ec 0c             	sub    esp,0xc
c000df57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5b:	83 ec 08             	sub    esp,0x8
c000df5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df62:	50                   	push   eax
c000df63:	e8 6c e8 ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	ba 4c 17 02 c0       	mov    edx,0xc002174c
c000df70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df74:	89 10                	mov    DWORD PTR [eax],edx
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df84:	90                   	nop
c000df85:	83 c4 0c             	add    esp,0xc
c000df88:	c3                   	ret    
c000df89:	90                   	nop
c000df8a:	66 90                	xchg   ax,ax

c000df8c <Serial::~Serial()>:
c000df8c:	83 ec 0c             	sub    esp,0xc
c000df8f:	ba 4c 17 02 c0       	mov    edx,0xc002174c
c000df94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df98:	89 10                	mov    DWORD PTR [eax],edx
c000df9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	50                   	push   eax
c000dfa2:	e8 97 e5 ff ff       	call   c000c53e <Device::~Device()>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	90                   	nop
c000dfab:	83 c4 0c             	add    esp,0xc
c000dfae:	c3                   	ret    
c000dfaf:	90                   	nop

c000dfb0 <Serial::~Serial()>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	83 ec 0c             	sub    esp,0xc
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 cd ff ff ff       	call   c000df8c <Serial::~Serial()>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	83 ec 08             	sub    esp,0x8
c000dfc5:	68 58 01 00 00       	push   0x158
c000dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfce:	e8 39 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dfd3:	83 c4 10             	add    esp,0x10
c000dfd6:	83 c4 0c             	add    esp,0xc
c000dfd9:	c3                   	ret    
c000dfda:	66 90                	xchg   ax,ax

c000dfdc <Timer::Timer(char const*)>:
c000dfdc:	83 ec 0c             	sub    esp,0xc
c000dfdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe3:	83 ec 08             	sub    esp,0x8
c000dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfea:	50                   	push   eax
c000dfeb:	e8 e4 e7 ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000dff0:	83 c4 10             	add    esp,0x10
c000dff3:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000dff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffc:	89 10                	mov    DWORD PTR [eax],edx
c000dffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e002:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e00c:	90                   	nop
c000e00d:	83 c4 0c             	add    esp,0xc
c000e010:	c3                   	ret    
c000e011:	90                   	nop
c000e012:	66 90                	xchg   ax,ax

c000e014 <Timer::~Timer()>:
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000e01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e020:	89 10                	mov    DWORD PTR [eax],edx
c000e022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e026:	83 ec 0c             	sub    esp,0xc
c000e029:	50                   	push   eax
c000e02a:	e8 0f e5 ff ff       	call   c000c53e <Device::~Device()>
c000e02f:	83 c4 10             	add    esp,0x10
c000e032:	90                   	nop
c000e033:	83 c4 0c             	add    esp,0xc
c000e036:	c3                   	ret    
c000e037:	90                   	nop

c000e038 <Timer::~Timer()>:
c000e038:	83 ec 0c             	sub    esp,0xc
c000e03b:	83 ec 0c             	sub    esp,0xc
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	e8 cd ff ff ff       	call   c000e014 <Timer::~Timer()>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	83 ec 08             	sub    esp,0x8
c000e04d:	68 5c 01 00 00       	push   0x15c
c000e052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e056:	e8 b1 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e05b:	83 c4 10             	add    esp,0x10
c000e05e:	83 c4 0c             	add    esp,0xc
c000e061:	c3                   	ret    

c000e062 <Timer::read()>:
c000e062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e066:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e06c:	c3                   	ret    

c000e06d <setupTimer(int)>:
c000e06d:	53                   	push   ebx
c000e06e:	83 ec 14             	sub    esp,0x14
c000e071:	68 5c 01 00 00       	push   0x15c
c000e076:	e8 58 9a ff ff       	call   c0007ad3 <malloc>
c000e07b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e07e:	89 c3                	mov    ebx,eax
c000e080:	e8 7b 09 01 00       	call   c001ea00 <PIT::PIT()>
c000e085:	58                   	pop    eax
c000e086:	5a                   	pop    edx
c000e087:	53                   	push   ebx
c000e088:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e08e:	e8 a9 e5 ff ff       	call   c000c63c <Device::addChild(Device*)>
c000e093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e095:	6a 00                	push   0x0
c000e097:	6a 00                	push   0x0
c000e099:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e09d:	53                   	push   ebx
c000e09e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e0a1:	83 c4 28             	add    esp,0x28
c000e0a4:	89 d8                	mov    eax,ebx
c000e0a6:	5b                   	pop    ebx
c000e0a7:	c3                   	ret    

c000e0a8 <timerHandler(unsigned int)>:
c000e0a8:	56                   	push   esi
c000e0a9:	53                   	push   ebx
c000e0aa:	51                   	push   ecx
c000e0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0af:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e0b5:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e0bc:	0f 84 4a 01 00 00    	je     c000e20c <timerHandler(unsigned int)+0x164>
c000e0c2:	fa                   	cli    
c000e0c3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e0c9:	83 ec 0c             	sub    esp,0xc
c000e0cc:	68 d8 96 02 c0       	push   0xc00296d8
c000e0d1:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e0d7:	e8 94 16 01 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e0dc:	83 c4 10             	add    esp,0x10
c000e0df:	84 c0                	test   al,al
c000e0e1:	0f 85 a1 00 00 00    	jne    c000e188 <timerHandler(unsigned int)+0xe0>
c000e0e7:	83 ec 0c             	sub    esp,0xc
c000e0ea:	68 d8 96 02 c0       	push   0xc00296d8
c000e0ef:	e8 98 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	89 c6                	mov    esi,eax
c000e0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	68 d8 96 02 c0       	push   0xc00296d8
c000e104:	e8 83 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e109:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e110:	89 c3                	mov    ebx,eax
c000e112:	e8 7d 16 01 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e117:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e11a:	83 c4 10             	add    esp,0x10
c000e11d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e123:	77 23                	ja     c000e148 <timerHandler(unsigned int)+0xa0>
c000e125:	83 ec 0c             	sub    esp,0xc
c000e128:	53                   	push   ebx
c000e129:	e8 a6 7e 00 00       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c000e12e:	83 c4 10             	add    esp,0x10
c000e131:	39 de                	cmp    esi,ebx
c000e133:	75 27                	jne    c000e15c <timerHandler(unsigned int)+0xb4>
c000e135:	83 ec 0c             	sub    esp,0xc
c000e138:	68 d8 96 02 c0       	push   0xc00296d8
c000e13d:	e8 4a 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e142:	89 c6                	mov    esi,eax
c000e144:	eb 12                	jmp    c000e158 <timerHandler(unsigned int)+0xb0>
c000e146:	66 90                	xchg   ax,ax
c000e148:	52                   	push   edx
c000e149:	52                   	push   edx
c000e14a:	53                   	push   ebx
c000e14b:	68 d8 96 02 c0       	push   0xc00296d8
c000e150:	e8 fb 16 01 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e155:	8d 76 00             	lea    esi,[esi+0x0]
c000e158:	83 c4 10             	add    esp,0x10
c000e15b:	90                   	nop
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	68 d8 96 02 c0       	push   0xc00296d8
c000e164:	e8 07 16 01 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	84 c0                	test   al,al
c000e16e:	75 18                	jne    c000e188 <timerHandler(unsigned int)+0xe0>
c000e170:	83 ec 0c             	sub    esp,0xc
c000e173:	68 d8 96 02 c0       	push   0xc00296d8
c000e178:	e8 0f 16 01 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	39 f0                	cmp    eax,esi
c000e182:	0f 85 74 ff ff ff    	jne    c000e0fc <timerHandler(unsigned int)+0x54>
c000e188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e18d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e191:	74 41                	je     c000e1d4 <timerHandler(unsigned int)+0x12c>
c000e193:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e19a:	74 38                	je     c000e1d4 <timerHandler(unsigned int)+0x12c>
c000e19c:	fa                   	cli    
c000e19d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1a3:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e1a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1ae:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e1b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1b7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e1ba:	72 08                	jb     c000e1c4 <timerHandler(unsigned int)+0x11c>
c000e1bc:	e8 1b 79 00 00       	call   c0015adc <schedule()>
c000e1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1c9:	48                   	dec    eax
c000e1ca:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1cf:	75 03                	jne    c000e1d4 <timerHandler(unsigned int)+0x12c>
c000e1d1:	fb                   	sti    
c000e1d2:	66 90                	xchg   ax,ax
c000e1d4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e1d9:	48                   	dec    eax
c000e1da:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e1df:	75 1b                	jne    c000e1fc <timerHandler(unsigned int)+0x154>
c000e1e1:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e1e8:	74 12                	je     c000e1fc <timerHandler(unsigned int)+0x154>
c000e1ea:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e1f4:	e8 e3 78 00 00       	call   c0015adc <schedule()>
c000e1f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e201:	48                   	dec    eax
c000e202:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e207:	75 03                	jne    c000e20c <timerHandler(unsigned int)+0x164>
c000e209:	fb                   	sti    
c000e20a:	66 90                	xchg   ax,ax
c000e20c:	58                   	pop    eax
c000e20d:	5b                   	pop    ebx
c000e20e:	5e                   	pop    esi
c000e20f:	c3                   	ret    

c000e210 <VCache::VCache(PhysicalDisk*)>:
c000e210:	53                   	push   ebx
c000e211:	83 ec 18             	sub    esp,0x18
c000e214:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c000e219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21d:	89 10                	mov    DWORD PTR [eax],edx
c000e21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e223:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e239:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e240:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e252:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e25d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e268:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e26c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e270:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e277:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e282:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e28e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e292:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e2a1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e2a9:	83 ec 0c             	sub    esp,0xc
c000e2ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2b0:	e8 1e 98 ff ff       	call   c0007ad3 <malloc>
c000e2b5:	83 c4 10             	add    esp,0x10
c000e2b8:	89 c3                	mov    ebx,eax
c000e2ba:	83 ec 0c             	sub    esp,0xc
c000e2bd:	53                   	push   ebx
c000e2be:	e8 b9 75 00 00       	call   c001587c <Mutex::Mutex()>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ca:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e2cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e2d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2dc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e2e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2e7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2f8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e304:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e308:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e30b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e312:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e316:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e31a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e320:	05 00 02 00 00       	add    eax,0x200
c000e325:	c1 e0 03             	shl    eax,0x3
c000e328:	83 ec 0c             	sub    esp,0xc
c000e32b:	50                   	push   eax
c000e32c:	e8 a2 97 ff ff       	call   c0007ad3 <malloc>
c000e331:	83 c4 10             	add    esp,0x10
c000e334:	89 c2                	mov    edx,eax
c000e336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e341:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e350:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e354:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e35a:	89 d0                	mov    eax,edx
c000e35c:	c1 e0 02             	shl    eax,0x2
c000e35f:	01 d0                	add    eax,edx
c000e361:	c1 e0 04             	shl    eax,0x4
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	50                   	push   eax
c000e368:	e8 66 97 ff ff       	call   c0007ad3 <malloc>
c000e36d:	83 c4 10             	add    esp,0x10
c000e370:	89 c2                	mov    edx,eax
c000e372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e376:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e379:	90                   	nop
c000e37a:	83 c4 18             	add    esp,0x18
c000e37d:	5b                   	pop    ebx
c000e37e:	c3                   	ret    
c000e37f:	90                   	nop

c000e380 <VCache::invalidateReadBuffer()>:
c000e380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e384:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e38a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e38e:	c3                   	ret    
c000e38f:	90                   	nop

c000e390 <VCache::writeWriteBuffer()>:
c000e390:	53                   	push   ebx
c000e391:	83 ec 08             	sub    esp,0x8
c000e394:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e398:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e39c:	74 1e                	je     c000e3bc <VCache::writeWriteBuffer()+0x2c>
c000e39e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e3a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e3ac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e3af:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e3b2:	50                   	push   eax
c000e3b3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e3b6:	83 c4 20             	add    esp,0x20
c000e3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3bc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e3c3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e3ca:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e3ce:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e3d5:	83 c4 08             	add    esp,0x8
c000e3d8:	5b                   	pop    ebx
c000e3d9:	c3                   	ret    
c000e3da:	66 90                	xchg   ax,ax

c000e3dc <VCache::~VCache()>:
c000e3dc:	83 ec 0c             	sub    esp,0xc
c000e3df:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c000e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3f1:	0f b6 c0             	movzx  eax,al
c000e3f4:	85 c0                	test   eax,eax
c000e3f6:	74 10                	je     c000e408 <VCache::~VCache()+0x2c>
c000e3f8:	83 ec 0c             	sub    esp,0xc
c000e3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ff:	e8 8c ff ff ff       	call   c000e390 <VCache::writeWriteBuffer()>
c000e404:	83 c4 10             	add    esp,0x10
c000e407:	90                   	nop
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e40f:	83 ec 0c             	sub    esp,0xc
c000e412:	50                   	push   eax
c000e413:	e8 cb 96 ff ff       	call   c0007ae3 <free>
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e422:	83 ec 0c             	sub    esp,0xc
c000e425:	50                   	push   eax
c000e426:	e8 b8 96 ff ff       	call   c0007ae3 <free>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	90                   	nop
c000e42f:	83 c4 0c             	add    esp,0xc
c000e432:	c3                   	ret    
c000e433:	90                   	nop

c000e434 <VCache::~VCache()>:
c000e434:	83 ec 0c             	sub    esp,0xc
c000e437:	83 ec 0c             	sub    esp,0xc
c000e43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e43e:	e8 99 ff ff ff       	call   c000e3dc <VCache::~VCache()>
c000e443:	83 c4 10             	add    esp,0x10
c000e446:	83 ec 08             	sub    esp,0x8
c000e449:	6a 44                	push   0x44
c000e44b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44f:	e8 b8 c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e454:	83 c4 10             	add    esp,0x10
c000e457:	83 c4 0c             	add    esp,0xc
c000e45a:	c3                   	ret    
c000e45b:	90                   	nop

c000e45c <VCache::write(unsigned long long, int, void*)>:
c000e45c:	55                   	push   ebp
c000e45d:	57                   	push   edi
c000e45e:	56                   	push   esi
c000e45f:	53                   	push   ebx
c000e460:	83 ec 1c             	sub    esp,0x1c
c000e463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e467:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e46b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e46f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e473:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e477:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e47b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e47f:	74 0f                	je     c000e490 <VCache::write(unsigned long long, int, void*)+0x34>
c000e481:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e485:	53                   	push   ebx
c000e486:	e8 f5 fe ff ff       	call   c000e380 <VCache::invalidateReadBuffer()>
c000e48b:	58                   	pop    eax
c000e48c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e490:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e494:	74 66                	je     c000e4fc <VCache::write(unsigned long long, int, void*)+0xa0>
c000e496:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e49d:	99                   	cdq    
c000e49e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e4a1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e4a4:	89 c6                	mov    esi,eax
c000e4a6:	31 ce                	xor    esi,ecx
c000e4a8:	89 d0                	mov    eax,edx
c000e4aa:	31 e8                	xor    eax,ebp
c000e4ac:	09 c6                	or     esi,eax
c000e4ae:	75 38                	jne    c000e4e8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e4b0:	83 ff 01             	cmp    edi,0x1
c000e4b3:	75 33                	jne    c000e4e8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e4b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4b8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4bc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4c0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4c6:	0f af f9             	imul   edi,ecx
c000e4c9:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e4cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e4d1:	40                   	inc    eax
c000e4d2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e4d5:	83 f8 50             	cmp    eax,0x50
c000e4d8:	75 72                	jne    c000e54c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4da:	83 ec 0c             	sub    esp,0xc
c000e4dd:	53                   	push   ebx
c000e4de:	e8 ad fe ff ff       	call   c000e390 <VCache::writeWriteBuffer()>
c000e4e3:	83 c4 10             	add    esp,0x10
c000e4e6:	eb 64                	jmp    c000e54c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e4e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e4ec:	83 ec 0c             	sub    esp,0xc
c000e4ef:	53                   	push   ebx
c000e4f0:	e8 9b fe ff ff       	call   c000e390 <VCache::writeWriteBuffer()>
c000e4f5:	83 c4 10             	add    esp,0x10
c000e4f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4fc:	83 ff 4f             	cmp    edi,0x4f
c000e4ff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e502:	7f 20                	jg     c000e524 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e504:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e507:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e50b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e50e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e511:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e514:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e518:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e520:	eb 2a                	jmp    c000e54c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e522:	66 90                	xchg   ax,ax
c000e524:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e528:	8b 10                	mov    edx,DWORD PTR [eax]
c000e52a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e52e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e532:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e536:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e53a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e53e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e541:	83 c4 1c             	add    esp,0x1c
c000e544:	5b                   	pop    ebx
c000e545:	5e                   	pop    esi
c000e546:	5f                   	pop    edi
c000e547:	5d                   	pop    ebp
c000e548:	ff e0                	jmp    eax
c000e54a:	66 90                	xchg   ax,ax
c000e54c:	83 c4 1c             	add    esp,0x1c
c000e54f:	31 c0                	xor    eax,eax
c000e551:	5b                   	pop    ebx
c000e552:	5e                   	pop    esi
c000e553:	5f                   	pop    edi
c000e554:	5d                   	pop    ebp
c000e555:	c3                   	ret    

c000e556 <VCache::read(unsigned long long, int, void*)>:
c000e556:	55                   	push   ebp
c000e557:	57                   	push   edi
c000e558:	56                   	push   esi
c000e559:	53                   	push   ebx
c000e55a:	83 ec 1c             	sub    esp,0x1c
c000e55d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e561:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e565:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e569:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e56d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e571:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e575:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e579:	74 0d                	je     c000e588 <VCache::read(unsigned long long, int, void*)+0x32>
c000e57b:	83 ec 0c             	sub    esp,0xc
c000e57e:	57                   	push   edi
c000e57f:	e8 0c fe ff ff       	call   c000e390 <VCache::writeWriteBuffer()>
c000e584:	83 c4 10             	add    esp,0x10
c000e587:	90                   	nop
c000e588:	83 fd 01             	cmp    ebp,0x1
c000e58b:	0f 85 93 00 00 00    	jne    c000e624 <VCache::read(unsigned long long, int, void*)+0xce>
c000e591:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e594:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e59b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e59e:	0f 85 80 00 00 00    	jne    c000e624 <VCache::read(unsigned long long, int, void*)+0xce>
c000e5a4:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e5a7:	89 cd                	mov    ebp,ecx
c000e5a9:	f7 dd                	neg    ebp
c000e5ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e5af:	89 e8                	mov    eax,ebp
c000e5b1:	21 dd                	and    ebp,ebx
c000e5b3:	c1 f8 1f             	sar    eax,0x1f
c000e5b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5ba:	89 e8                	mov    eax,ebp
c000e5bc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e5c0:	21 f5                	and    ebp,esi
c000e5c2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e5c6:	89 ea                	mov    edx,ebp
c000e5c8:	74 2e                	je     c000e5f8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5ca:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e5cd:	75 29                	jne    c000e5f8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5cf:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e5d2:	75 24                	jne    c000e5f8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5d4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5d7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5dd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e5e0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e5e3:	21 f3                	and    ebx,esi
c000e5e5:	0f af d9             	imul   ebx,ecx
c000e5e8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5ef:	89 de                	mov    esi,ebx
c000e5f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5f3:	31 c0                	xor    eax,eax
c000e5f5:	eb 61                	jmp    c000e658 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5f7:	90                   	nop
c000e5f8:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5fc:	83 ec 0c             	sub    esp,0xc
c000e5ff:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e602:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e606:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e609:	8b 36                	mov    esi,DWORD PTR [esi]
c000e60b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e60e:	51                   	push   ecx
c000e60f:	52                   	push   edx
c000e610:	50                   	push   eax
c000e611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e615:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e618:	83 c4 20             	add    esp,0x20
c000e61b:	85 c0                	test   eax,eax
c000e61d:	75 39                	jne    c000e658 <VCache::read(unsigned long long, int, void*)+0x102>
c000e61f:	eb b3                	jmp    c000e5d4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e621:	8d 76 00             	lea    esi,[esi+0x0]
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	57                   	push   edi
c000e628:	e8 53 fd ff ff       	call   c000e380 <VCache::invalidateReadBuffer()>
c000e62d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e63a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e63e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e642:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e646:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e64a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e64d:	83 c4 2c             	add    esp,0x2c
c000e650:	5b                   	pop    ebx
c000e651:	5e                   	pop    esi
c000e652:	5f                   	pop    edi
c000e653:	5d                   	pop    ebp
c000e654:	ff e0                	jmp    eax
c000e656:	66 90                	xchg   ax,ax
c000e658:	83 c4 1c             	add    esp,0x1c
c000e65b:	5b                   	pop    ebx
c000e65c:	5e                   	pop    esi
c000e65d:	5f                   	pop    edi
c000e65e:	5d                   	pop    ebp
c000e65f:	c3                   	ret    

c000e660 <Video::putrect(int, int, int, int, unsigned int)>:
c000e660:	55                   	push   ebp
c000e661:	57                   	push   edi
c000e662:	56                   	push   esi
c000e663:	53                   	push   ebx
c000e664:	83 ec 1c             	sub    esp,0x1c
c000e667:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e66f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e673:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e677:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e67b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e67f:	01 df                	add    edi,ebx
c000e681:	39 fb                	cmp    ebx,edi
c000e683:	7d 1f                	jge    c000e6a4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e685:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e689:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e68d:	7d 12                	jge    c000e6a1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e68f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e691:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e695:	53                   	push   ebx
c000e696:	55                   	push   ebp
c000e697:	45                   	inc    ebp
c000e698:	56                   	push   esi
c000e699:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e69c:	83 c4 10             	add    esp,0x10
c000e69f:	eb e8                	jmp    c000e689 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e6a1:	43                   	inc    ebx
c000e6a2:	eb dd                	jmp    c000e681 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e6a4:	83 c4 1c             	add    esp,0x1c
c000e6a7:	5b                   	pop    ebx
c000e6a8:	5e                   	pop    esi
c000e6a9:	5f                   	pop    edi
c000e6aa:	5d                   	pop    ebp
c000e6ab:	c3                   	ret    

c000e6ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e6ac:	55                   	push   ebp
c000e6ad:	57                   	push   edi
c000e6ae:	31 ff                	xor    edi,edi
c000e6b0:	56                   	push   esi
c000e6b1:	53                   	push   ebx
c000e6b2:	83 ec 1c             	sub    esp,0x1c
c000e6b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e6b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e6bd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e6c4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e6c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6d1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e6d5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e6d8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6dc:	01 f9                	add    ecx,edi
c000e6de:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e6e2:	7d 2f                	jge    c000e713 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6e4:	31 f6                	xor    esi,esi
c000e6e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6ea:	01 f2                	add    edx,esi
c000e6ec:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6f0:	7d 1a                	jge    c000e70c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6f5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6f8:	46                   	inc    esi
c000e6f9:	51                   	push   ecx
c000e6fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6fe:	52                   	push   edx
c000e6ff:	55                   	push   ebp
c000e700:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e703:	83 c4 10             	add    esp,0x10
c000e706:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e70a:	eb da                	jmp    c000e6e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e70c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e710:	47                   	inc    edi
c000e711:	eb c5                	jmp    c000e6d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e713:	83 c4 1c             	add    esp,0x1c
c000e716:	5b                   	pop    ebx
c000e717:	5e                   	pop    esi
c000e718:	5f                   	pop    edi
c000e719:	5d                   	pop    ebp
c000e71a:	c3                   	ret    
c000e71b:	90                   	nop

c000e71c <Video::blit(unsigned int*, int, int, int, int)>:
c000e71c:	55                   	push   ebp
c000e71d:	ba 00 00 00 00       	mov    edx,0x0
c000e722:	57                   	push   edi
c000e723:	56                   	push   esi
c000e724:	53                   	push   ebx
c000e725:	83 ec 1c             	sub    esp,0x1c
c000e728:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e72c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e730:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e734:	85 c0                	test   eax,eax
c000e736:	0f 49 d0             	cmovns edx,eax
c000e739:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e740:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e744:	89 eb                	mov    ebx,ebp
c000e746:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e74a:	01 ea                	add    edx,ebp
c000e74c:	39 da                	cmp    edx,ebx
c000e74e:	7e 54                	jle    c000e7a4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e750:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e756:	7c 4c                	jl     c000e7a4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e758:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e75c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e760:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e764:	01 c1                	add    ecx,eax
c000e766:	39 f9                	cmp    ecx,edi
c000e768:	7e 2f                	jle    c000e799 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e76a:	83 c2 04             	add    edx,0x4
c000e76d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e773:	7c 21                	jl     c000e796 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e775:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e779:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e77b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e77e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e782:	55                   	push   ebp
c000e783:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e787:	56                   	push   esi
c000e788:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e78b:	83 c4 10             	add    esp,0x10
c000e78e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e796:	47                   	inc    edi
c000e797:	eb c7                	jmp    c000e760 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e799:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e79d:	43                   	inc    ebx
c000e79e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e7a2:	eb a2                	jmp    c000e746 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e7a4:	83 c4 1c             	add    esp,0x1c
c000e7a7:	5b                   	pop    ebx
c000e7a8:	5e                   	pop    esi
c000e7a9:	5f                   	pop    edi
c000e7aa:	5d                   	pop    ebp
c000e7ab:	c3                   	ret    

c000e7ac <Video::clearScreen(unsigned int)>:
c000e7ac:	57                   	push   edi
c000e7ad:	56                   	push   esi
c000e7ae:	53                   	push   ebx
c000e7af:	31 db                	xor    ebx,ebx
c000e7b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7b5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e7bb:	7e 1f                	jle    c000e7dc <Video::clearScreen(unsigned int)+0x30>
c000e7bd:	31 ff                	xor    edi,edi
c000e7bf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e7c5:	7e 12                	jle    c000e7d9 <Video::clearScreen(unsigned int)+0x2d>
c000e7c7:	8b 06                	mov    eax,DWORD PTR [esi]
c000e7c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7cd:	53                   	push   ebx
c000e7ce:	57                   	push   edi
c000e7cf:	47                   	inc    edi
c000e7d0:	56                   	push   esi
c000e7d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	eb e6                	jmp    c000e7bf <Video::clearScreen(unsigned int)+0x13>
c000e7d9:	43                   	inc    ebx
c000e7da:	eb d9                	jmp    c000e7b5 <Video::clearScreen(unsigned int)+0x9>
c000e7dc:	5b                   	pop    ebx
c000e7dd:	5e                   	pop    esi
c000e7de:	5f                   	pop    edi
c000e7df:	c3                   	ret    

c000e7e0 <Video::putpixel(int, int, unsigned int)>:
c000e7e0:	c7 44 24 04 c8 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217c8
c000e7e8:	e9 ec 29 00 00       	jmp    c00111d9 <KePanic(char const*)>
c000e7ed:	90                   	nop

c000e7ee <Video::readPixelApprox(int, int)>:
c000e7ee:	83 ec 18             	sub    esp,0x18
c000e7f1:	68 e9 17 02 c0       	push   0xc00217e9
c000e7f6:	e8 de 29 00 00       	call   c00111d9 <KePanic(char const*)>
c000e7fb:	31 c0                	xor    eax,eax
c000e7fd:	83 c4 1c             	add    esp,0x1c
c000e800:	c3                   	ret    
c000e801:	90                   	nop

c000e802 <Video::Video(char const*)>:
c000e802:	83 ec 0c             	sub    esp,0xc
c000e805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e809:	83 ec 08             	sub    esp,0x8
c000e80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e810:	50                   	push   eax
c000e811:	e8 be df ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000e816:	83 c4 10             	add    esp,0x10
c000e819:	ba 64 18 02 c0       	mov    edx,0xc0021864
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	89 10                	mov    DWORD PTR [eax],edx
c000e824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e828:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e832:	90                   	nop
c000e833:	83 c4 0c             	add    esp,0xc
c000e836:	c3                   	ret    
c000e837:	90                   	nop

c000e838 <Video::~Video()>:
c000e838:	83 ec 0c             	sub    esp,0xc
c000e83b:	ba 64 18 02 c0       	mov    edx,0xc0021864
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	89 10                	mov    DWORD PTR [eax],edx
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	83 ec 0c             	sub    esp,0xc
c000e84d:	50                   	push   eax
c000e84e:	e8 eb dc ff ff       	call   c000c53e <Device::~Device()>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	90                   	nop
c000e857:	83 c4 0c             	add    esp,0xc
c000e85a:	c3                   	ret    
c000e85b:	90                   	nop

c000e85c <Video::~Video()>:
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	83 ec 0c             	sub    esp,0xc
c000e862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e866:	e8 cd ff ff ff       	call   c000e838 <Video::~Video()>
c000e86b:	83 c4 10             	add    esp,0x10
c000e86e:	83 ec 08             	sub    esp,0x8
c000e871:	68 64 01 00 00       	push   0x164
c000e876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e87a:	e8 8d bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Video::isMonochrome()>:
c000e886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e88a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e890:	c3                   	ret    
c000e891:	90                   	nop

c000e892 <Video::getWidth()>:
c000e892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e896:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e89c:	c3                   	ret    
c000e89d:	90                   	nop

c000e89e <Video::getHeight()>:
c000e89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e8a8:	c3                   	ret    
c000e8a9:	90                   	nop

c000e8aa <Video::drawCursor(int, int, unsigned int*, int)>:
c000e8aa:	55                   	push   ebp
c000e8ab:	57                   	push   edi
c000e8ac:	56                   	push   esi
c000e8ad:	53                   	push   ebx
c000e8ae:	83 ec 2c             	sub    esp,0x2c
c000e8b1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e8b5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e8b9:	83 f8 01             	cmp    eax,0x1
c000e8bc:	19 c9                	sbb    ecx,ecx
c000e8be:	31 db                	xor    ebx,ebx
c000e8c0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e8c4:	89 ce                	mov    esi,ecx
c000e8c6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e8ce:	f7 d6                	not    esi
c000e8d0:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e8d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e8da:	01 d8                	add    eax,ebx
c000e8dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8e0:	57                   	push   edi
c000e8e1:	e8 b8 ff ff ff       	call   c000e89e <Video::getHeight()>
c000e8e6:	59                   	pop    ecx
c000e8e7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8eb:	7e 70                	jle    c000e95d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8ed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8f1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e8f5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e900:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e907:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e90b:	89 e8                	mov    eax,ebp
c000e90d:	83 c0 20             	add    eax,0x20
c000e910:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e914:	57                   	push   edi
c000e915:	e8 78 ff ff ff       	call   c000e892 <Video::getWidth()>
c000e91a:	5a                   	pop    edx
c000e91b:	39 c5                	cmp    ebp,eax
c000e91d:	7d 34                	jge    c000e953 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e91f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e924:	74 05                	je     c000e92b <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e926:	8b 07                	mov    eax,DWORD PTR [edi]
c000e928:	56                   	push   esi
c000e929:	eb 0d                	jmp    c000e938 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e92b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e930:	74 12                	je     c000e944 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e932:	8b 07                	mov    eax,DWORD PTR [edi]
c000e934:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e938:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e93c:	55                   	push   ebp
c000e93d:	57                   	push   edi
c000e93e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e948:	45                   	inc    ebp
c000e949:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e94d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e951:	75 c1                	jne    c000e914 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e953:	43                   	inc    ebx
c000e954:	83 fb 20             	cmp    ebx,0x20
c000e957:	0f 85 79 ff ff ff    	jne    c000e8d6 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e95d:	83 c4 2c             	add    esp,0x2c
c000e960:	5b                   	pop    ebx
c000e961:	5e                   	pop    esi
c000e962:	5f                   	pop    edi
c000e963:	5d                   	pop    ebp
c000e964:	c3                   	ret    
c000e965:	90                   	nop

c000e966 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e966:	55                   	push   ebp
c000e967:	57                   	push   edi
c000e968:	56                   	push   esi
c000e969:	53                   	push   ebx
c000e96a:	83 ec 28             	sub    esp,0x28
c000e96d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e971:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e975:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e979:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e97d:	c1 e7 08             	shl    edi,0x8
c000e980:	01 c7                	add    edi,eax
c000e982:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e986:	c1 e6 08             	shl    esi,0x8
c000e989:	01 f0                	add    eax,esi
c000e98b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e98f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e993:	0f af c7             	imul   eax,edi
c000e996:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e99d:	50                   	push   eax
c000e99e:	e8 30 91 ff ff       	call   c0007ad3 <malloc>
c000e9a3:	83 c4 10             	add    esp,0x10
c000e9a6:	85 c0                	test   eax,eax
c000e9a8:	89 c5                	mov    ebp,eax
c000e9aa:	75 10                	jne    c000e9bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e9ac:	83 ec 0c             	sub    esp,0xc
c000e9af:	68 14 18 02 c0       	push   0xc0021814
c000e9b4:	e8 20 28 00 00       	call   c00111d9 <KePanic(char const*)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e9c0:	ba 12 00 00 00       	mov    edx,0x12
c000e9c5:	85 c0                	test   eax,eax
c000e9c7:	74 11                	je     c000e9da <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e9c9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e9cd:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e9d1:	c1 fa 03             	sar    edx,0x3
c000e9d4:	0f af d1             	imul   edx,ecx
c000e9d7:	83 c2 12             	add    edx,0x12
c000e9da:	85 ff                	test   edi,edi
c000e9dc:	74 06                	je     c000e9e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e9de:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e9e2:	75 12                	jne    c000e9f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9e4:	83 ec 0c             	sub    esp,0xc
c000e9e7:	68 24 18 02 c0       	push   0xc0021824
c000e9ec:	e8 19 bf ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000e9f1:	e9 b8 00 00 00       	jmp    c000eaae <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9f6:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9fa:	83 f9 02             	cmp    ecx,0x2
c000e9fd:	0f 85 96 00 00 00    	jne    c000ea99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ea03:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ea08:	75 0e                	jne    c000ea18 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ea0a:	85 c0                	test   eax,eax
c000ea0c:	75 0a                	jne    c000ea18 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ea0e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ea11:	83 e8 18             	sub    eax,0x18
c000ea14:	a8 f7                	test   al,0xf7
c000ea16:	74 0a                	je     c000ea22 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	68 39 18 02 c0       	push   0xc0021839
c000ea20:	eb 7f                	jmp    c000eaa1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ea22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea2a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ea32:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ea36:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ea3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea42:	75 0c                	jne    c000ea50 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea44:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ea49:	c1 e1 18             	shl    ecx,0x18
c000ea4c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ea50:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea55:	46                   	inc    esi
c000ea56:	89 c8                	mov    eax,ecx
c000ea58:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea5d:	c1 e0 10             	shl    eax,0x10
c000ea60:	c1 e1 08             	shl    ecx,0x8
c000ea63:	09 c1                	or     ecx,eax
c000ea65:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea69:	09 c1                	or     ecx,eax
c000ea6b:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea6f:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ea73:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea77:	c1 f8 03             	sar    eax,0x3
c000ea7a:	01 c2                	add    edx,eax
c000ea7c:	89 f0                	mov    eax,esi
c000ea7e:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea82:	39 c7                	cmp    edi,eax
c000ea84:	7f b0                	jg     c000ea36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea86:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea8e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea91:	7e 22                	jle    c000eab5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea93:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ea97:	eb 99                	jmp    c000ea32 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea99:	50                   	push   eax
c000ea9a:	50                   	push   eax
c000ea9b:	51                   	push   ecx
c000ea9c:	68 47 18 02 c0       	push   0xc0021847
c000eaa1:	e8 64 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eaa6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eaa9:	e8 35 90 ff ff       	call   c0007ae3 <free>
c000eaae:	83 c4 10             	add    esp,0x10
c000eab1:	31 ed                	xor    ebp,ebp
c000eab3:	eb 0f                	jmp    c000eac4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eab5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eab9:	89 38                	mov    DWORD PTR [eax],edi
c000eabb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eabf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eac2:	89 38                	mov    DWORD PTR [eax],edi
c000eac4:	83 c4 1c             	add    esp,0x1c
c000eac7:	89 e8                	mov    eax,ebp
c000eac9:	5b                   	pop    ebx
c000eaca:	5e                   	pop    esi
c000eacb:	5f                   	pop    edi
c000eacc:	5d                   	pop    ebp
c000eacd:	c3                   	ret    

c000eace <Video::putTGA(int, int, unsigned char*, int)>:
c000eace:	55                   	push   ebp
c000eacf:	57                   	push   edi
c000ead0:	56                   	push   esi
c000ead1:	53                   	push   ebx
c000ead2:	83 ec 28             	sub    esp,0x28
c000ead5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ead9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eadd:	50                   	push   eax
c000eade:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eae2:	50                   	push   eax
c000eae3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eae7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eaeb:	57                   	push   edi
c000eaec:	e8 75 fe ff ff       	call   c000e966 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eaf1:	83 c4 20             	add    esp,0x20
c000eaf4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eaf8:	85 c0                	test   eax,eax
c000eafa:	74 35                	je     c000eb31 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eafc:	89 c6                	mov    esi,eax
c000eafe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb02:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eb06:	39 d8                	cmp    eax,ebx
c000eb08:	7e 27                	jle    c000eb31 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eb0a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb0e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eb12:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eb16:	39 e9                	cmp    ecx,ebp
c000eb18:	7e 14                	jle    c000eb2e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eb1a:	83 c6 04             	add    esi,0x4
c000eb1d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eb1f:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eb22:	53                   	push   ebx
c000eb23:	55                   	push   ebp
c000eb24:	45                   	inc    ebp
c000eb25:	57                   	push   edi
c000eb26:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb29:	83 c4 10             	add    esp,0x10
c000eb2c:	eb e0                	jmp    c000eb0e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eb2e:	43                   	inc    ebx
c000eb2f:	eb cd                	jmp    c000eafe <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eb31:	83 c4 1c             	add    esp,0x1c
c000eb34:	5b                   	pop    ebx
c000eb35:	5e                   	pop    esi
c000eb36:	5f                   	pop    edi
c000eb37:	5d                   	pop    ebp
c000eb38:	c3                   	ret    
c000eb39:	66 90                	xchg   ax,ax
c000eb3b:	90                   	nop

c000eb3c <ACPI::close(int, int, void*)>:
c000eb3c:	83 ec 1c             	sub    esp,0x1c
c000eb3f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb47:	74 0b                	je     c000eb54 <ACPI::close(int, int, void*)+0x18>
c000eb49:	b8 00 00 00 00       	mov    eax,0x0
c000eb4e:	e9 99 00 00 00       	jmp    c000ebec <ACPI::close(int, int, void*)+0xb0>
c000eb53:	90                   	nop
c000eb54:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb59:	75 29                	jne    c000eb84 <ACPI::close(int, int, void*)+0x48>
c000eb5b:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb60:	85 c0                	test   eax,eax
c000eb62:	74 08                	je     c000eb6c <ACPI::close(int, int, void*)+0x30>
c000eb64:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb69:	ff d0                	call   eax
c000eb6b:	90                   	nop
c000eb6c:	83 ec 0c             	sub    esp,0xc
c000eb6f:	68 a8 18 02 c0       	push   0xc00218a8
c000eb74:	e8 60 26 00 00       	call   c00111d9 <KePanic(char const*)>
c000eb79:	83 c4 10             	add    esp,0x10
c000eb7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb81:	eb 69                	jmp    c000ebec <ACPI::close(int, int, void*)+0xb0>
c000eb83:	90                   	nop
c000eb84:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb89:	75 59                	jne    c000ebe4 <ACPI::close(int, int, void*)+0xa8>
c000eb8b:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb90:	85 c0                	test   eax,eax
c000eb92:	74 08                	je     c000eb9c <ACPI::close(int, int, void*)+0x60>
c000eb94:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb99:	ff d0                	call   eax
c000eb9b:	90                   	nop
c000eb9c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eba1:	8d 76 00             	lea    esi,[esi+0x0]
c000eba4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eba9:	83 e0 02             	and    eax,0x2
c000ebac:	74 1e                	je     c000ebcc <ACPI::close(int, int, void*)+0x90>
c000ebae:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ebb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebb9:	89 c2                	mov    edx,eax
c000ebbb:	ec                   	in     al,dx
c000ebbc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebc0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ebc4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebc8:	eb da                	jmp    c000eba4 <ACPI::close(int, int, void*)+0x68>
c000ebca:	66 90                	xchg   ax,ax
c000ebcc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ebd3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ebd8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ebdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebe0:	ee                   	out    dx,al
c000ebe1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebec:	83 c4 1c             	add    esp,0x1c
c000ebef:	c3                   	ret    

c000ebf0 <findRSDP()>:
c000ebf0:	83 ec 1c             	sub    esp,0x1c
c000ebf3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebf8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebfe:	83 e0 04             	and    eax,0x4
c000ec01:	0f b6 c0             	movzx  eax,al
c000ec04:	85 c0                	test   eax,eax
c000ec06:	75 08                	jne    c000ec10 <findRSDP()+0x20>
c000ec08:	b8 00 00 00 00       	mov    eax,0x0
c000ec0d:	eb 75                	jmp    c000ec84 <findRSDP()+0x94>
c000ec0f:	90                   	nop
c000ec10:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ec15:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ec1a:	7f 1c                	jg     c000ec38 <findRSDP()+0x48>
c000ec1c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ec27:	83 e2 fb             	and    edx,0xfffffffb
c000ec2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec30:	b8 00 00 00 00       	mov    eax,0x0
c000ec35:	eb 4d                	jmp    c000ec84 <findRSDP()+0x94>
c000ec37:	90                   	nop
c000ec38:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ec40:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec48:	77 32                	ja     c000ec7c <findRSDP()+0x8c>
c000ec4a:	83 ec 04             	sub    esp,0x4
c000ec4d:	6a 08                	push   0x8
c000ec4f:	68 43 19 02 c0       	push   0xc0021943
c000ec54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec58:	e8 23 17 ff ff       	call   c0000380 <memcmp>
c000ec5d:	83 c4 10             	add    esp,0x10
c000ec60:	85 c0                	test   eax,eax
c000ec62:	0f 94 c0             	sete   al
c000ec65:	0f b6 c0             	movzx  eax,al
c000ec68:	85 c0                	test   eax,eax
c000ec6a:	74 08                	je     c000ec74 <findRSDP()+0x84>
c000ec6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec70:	eb 12                	jmp    c000ec84 <findRSDP()+0x94>
c000ec72:	66 90                	xchg   ax,ax
c000ec74:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec79:	eb c5                	jmp    c000ec40 <findRSDP()+0x50>
c000ec7b:	90                   	nop
c000ec7c:	b8 00 00 00 00       	mov    eax,0x0
c000ec81:	8d 76 00             	lea    esi,[esi+0x0]
c000ec84:	83 c4 1c             	add    esp,0x1c
c000ec87:	c3                   	ret    

c000ec88 <loadACPITables(unsigned char*)>:
c000ec88:	57                   	push   edi
c000ec89:	56                   	push   esi
c000ec8a:	53                   	push   ebx
c000ec8b:	83 ec 60             	sub    esp,0x60
c000ec8e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec99:	83 e0 04             	and    eax,0x4
c000ec9c:	0f b6 c0             	movzx  eax,al
c000ec9f:	85 c0                	test   eax,eax
c000eca1:	0f 84 41 02 00 00    	je     c000eee8 <loadACPITables(unsigned char*)+0x260>
c000eca7:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ecac:	0f b6 c0             	movzx  eax,al
c000ecaf:	85 c0                	test   eax,eax
c000ecb1:	74 79                	je     c000ed2c <loadACPITables(unsigned char*)+0xa4>
c000ecb3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecb7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ecbb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ecbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecc2:	83 e8 24             	sub    eax,0x24
c000ecc5:	c1 e8 03             	shr    eax,0x3
c000ecc8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eccc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ecd4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecd8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ecdc:	0f 8d ba 00 00 00    	jge    c000ed9c <loadACPITables(unsigned char*)+0x114>
c000ece2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ece6:	83 c0 24             	add    eax,0x24
c000ece9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000eced:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecf1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ecf5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecf9:	c1 e0 03             	shl    eax,0x3
c000ecfc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ed00:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ed07:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed09:	89 c1                	mov    ecx,eax
c000ed0b:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed10:	8d 50 01             	lea    edx,[eax+0x1]
c000ed13:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed19:	89 ca                	mov    edx,ecx
c000ed1b:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed22:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ed27:	eb ab                	jmp    c000ecd4 <loadACPITables(unsigned char*)+0x4c>
c000ed29:	8d 76 00             	lea    esi,[esi+0x0]
c000ed2c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed30:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed3b:	83 e8 24             	sub    eax,0x24
c000ed3e:	c1 e8 02             	shr    eax,0x2
c000ed41:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed50:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed54:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed58:	7d 42                	jge    c000ed9c <loadACPITables(unsigned char*)+0x114>
c000ed5a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed5e:	83 c0 24             	add    eax,0x24
c000ed61:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed69:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed6d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed71:	c1 e0 02             	shl    eax,0x2
c000ed74:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed7e:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed83:	8d 50 01             	lea    edx,[eax+0x1]
c000ed86:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed8c:	89 ca                	mov    edx,ecx
c000ed8e:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed95:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed9a:	eb b4                	jmp    c000ed50 <loadACPITables(unsigned char*)+0xc8>
c000ed9c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eda4:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eda9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000edad:	0f 8d 39 01 00 00    	jge    c000eeec <loadACPITables(unsigned char*)+0x264>
c000edb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edb7:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000edbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000edca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edce:	25 ff 0f 00 00       	and    eax,0xfff
c000edd3:	89 c6                	mov    esi,eax
c000edd5:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eddb:	83 ec 0c             	sub    esp,0xc
c000edde:	6a 01                	push   0x1
c000ede0:	e8 10 a8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000edec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edf2:	83 ec 0c             	sub    esp,0xc
c000edf5:	6a 01                	push   0x1
c000edf7:	6a 01                	push   0x1
c000edf9:	50                   	push   eax
c000edfa:	52                   	push   edx
c000edfb:	53                   	push   ebx
c000edfc:	e8 07 b1 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee01:	83 c4 20             	add    esp,0x20
c000ee04:	09 f0                	or     eax,esi
c000ee06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee0a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee0e:	c1 e0 03             	shl    eax,0x3
c000ee11:	05 20 89 02 c0       	add    eax,0xc0028920
c000ee16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee22:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ee2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee3e:	89 c6                	mov    esi,eax
c000ee40:	89 d7                	mov    edi,edx
c000ee42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee44:	89 c8                	mov    eax,ecx
c000ee46:	89 fa                	mov    edx,edi
c000ee48:	89 f3                	mov    ebx,esi
c000ee4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee65:	05 00 10 00 00       	add    eax,0x1000
c000ee6a:	c1 e8 0c             	shr    eax,0xc
c000ee6d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee7d:	25 ff 0f 00 00       	and    eax,0xfff
c000ee82:	89 c6                	mov    esi,eax
c000ee84:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee8a:	83 ec 0c             	sub    esp,0xc
c000ee8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee91:	e8 5f a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee96:	83 c4 10             	add    esp,0x10
c000ee99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee9d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eea3:	83 ec 0c             	sub    esp,0xc
c000eea6:	6a 01                	push   0x1
c000eea8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eeac:	50                   	push   eax
c000eead:	52                   	push   edx
c000eeae:	53                   	push   ebx
c000eeaf:	e8 54 b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eeb4:	83 c4 20             	add    esp,0x20
c000eeb7:	09 f0                	or     eax,esi
c000eeb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec1:	83 ec 0c             	sub    esp,0xc
c000eec4:	50                   	push   eax
c000eec5:	e8 3f aa ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000eeca:	83 c4 10             	add    esp,0x10
c000eecd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eed1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eed5:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eedc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000eee1:	e9 be fe ff ff       	jmp    c000eda4 <loadACPITables(unsigned char*)+0x11c>
c000eee6:	66 90                	xchg   ax,ax
c000eee8:	90                   	nop
c000eee9:	8d 76 00             	lea    esi,[esi+0x0]
c000eeec:	83 c4 60             	add    esp,0x60
c000eeef:	5b                   	pop    ebx
c000eef0:	5e                   	pop    esi
c000eef1:	5f                   	pop    edi
c000eef2:	c3                   	ret    
c000eef3:	90                   	nop

c000eef4 <findRSDT(unsigned char*)>:
c000eef4:	57                   	push   edi
c000eef5:	56                   	push   esi
c000eef6:	53                   	push   ebx
c000eef7:	83 ec 50             	sub    esp,0x50
c000eefa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eeff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef05:	83 e0 04             	and    eax,0x4
c000ef08:	0f b6 c0             	movzx  eax,al
c000ef0b:	85 c0                	test   eax,eax
c000ef0d:	75 0d                	jne    c000ef1c <findRSDT(unsigned char*)+0x28>
c000ef0f:	b8 00 00 00 00       	mov    eax,0x0
c000ef14:	e9 2b 01 00 00       	jmp    c000f044 <findRSDT(unsigned char*)+0x150>
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	89 e0                	mov    eax,esp
c000ef1e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef22:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef2a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ef32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef42:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef46:	89 c6                	mov    esi,eax
c000ef48:	89 d7                	mov    edi,edx
c000ef4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef4c:	89 c8                	mov    eax,ecx
c000ef4e:	89 fa                	mov    edx,edi
c000ef50:	89 f3                	mov    ebx,esi
c000ef52:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef56:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef5a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef5e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef62:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef66:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef76:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef7e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef82:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef86:	25 ff 0f 00 00       	and    eax,0xfff
c000ef8b:	89 c6                	mov    esi,eax
c000ef8d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef93:	83 ec 0c             	sub    esp,0xc
c000ef96:	6a 02                	push   0x2
c000ef98:	e8 58 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef9d:	83 c4 10             	add    esp,0x10
c000efa0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000efa4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efaa:	83 ec 0c             	sub    esp,0xc
c000efad:	6a 01                	push   0x1
c000efaf:	6a 02                	push   0x2
c000efb1:	50                   	push   eax
c000efb2:	52                   	push   edx
c000efb3:	53                   	push   ebx
c000efb4:	e8 4f af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efb9:	83 c4 20             	add    esp,0x20
c000efbc:	09 f0                	or     eax,esi
c000efbe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000efc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efc6:	25 ff 0f 00 00       	and    eax,0xfff
c000efcb:	89 c6                	mov    esi,eax
c000efcd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efd3:	83 ec 0c             	sub    esp,0xc
c000efd6:	6a 02                	push   0x2
c000efd8:	e8 18 a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000efdd:	83 c4 10             	add    esp,0x10
c000efe0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efe4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efea:	83 ec 0c             	sub    esp,0xc
c000efed:	6a 01                	push   0x1
c000efef:	6a 02                	push   0x2
c000eff1:	50                   	push   eax
c000eff2:	52                   	push   edx
c000eff3:	53                   	push   ebx
c000eff4:	e8 0f af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eff9:	83 c4 20             	add    esp,0x20
c000effc:	09 f0                	or     eax,esi
c000effe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f002:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f007:	85 c0                	test   eax,eax
c000f009:	75 11                	jne    c000f01c <findRSDT(unsigned char*)+0x128>
c000f00b:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f012:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f016:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f01a:	eb 24                	jmp    c000f040 <findRSDT(unsigned char*)+0x14c>
c000f01c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f021:	83 f8 02             	cmp    eax,0x2
c000f024:	75 12                	jne    c000f038 <findRSDT(unsigned char*)+0x144>
c000f026:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f02d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f031:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f035:	eb 09                	jmp    c000f040 <findRSDT(unsigned char*)+0x14c>
c000f037:	90                   	nop
c000f038:	b8 00 00 00 00       	mov    eax,0x0
c000f03d:	eb 05                	jmp    c000f044 <findRSDT(unsigned char*)+0x150>
c000f03f:	90                   	nop
c000f040:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f044:	83 c4 50             	add    esp,0x50
c000f047:	5b                   	pop    ebx
c000f048:	5e                   	pop    esi
c000f049:	5f                   	pop    edi
c000f04a:	c3                   	ret    
c000f04b:	90                   	nop

c000f04c <findDataTable(unsigned char*, char*)>:
c000f04c:	83 ec 1c             	sub    esp,0x1c
c000f04f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f054:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f05a:	83 e0 04             	and    eax,0x4
c000f05d:	0f b6 c0             	movzx  eax,al
c000f060:	85 c0                	test   eax,eax
c000f062:	75 08                	jne    c000f06c <findDataTable(unsigned char*, char*)+0x20>
c000f064:	b8 00 00 00 00       	mov    eax,0x0
c000f069:	eb 5d                	jmp    c000f0c8 <findDataTable(unsigned char*, char*)+0x7c>
c000f06b:	90                   	nop
c000f06c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f074:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f079:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f07d:	7d 41                	jge    c000f0c0 <findDataTable(unsigned char*, char*)+0x74>
c000f07f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f083:	c1 e0 03             	shl    eax,0x3
c000f086:	05 20 89 02 c0       	add    eax,0xc0028920
c000f08b:	83 ec 04             	sub    esp,0x4
c000f08e:	6a 04                	push   0x4
c000f090:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f094:	50                   	push   eax
c000f095:	e8 e6 12 ff ff       	call   c0000380 <memcmp>
c000f09a:	83 c4 10             	add    esp,0x10
c000f09d:	85 c0                	test   eax,eax
c000f09f:	0f 94 c0             	sete   al
c000f0a2:	0f b6 c0             	movzx  eax,al
c000f0a5:	85 c0                	test   eax,eax
c000f0a7:	74 0f                	je     c000f0b8 <findDataTable(unsigned char*, char*)+0x6c>
c000f0a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0ad:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f0b4:	eb 12                	jmp    c000f0c8 <findDataTable(unsigned char*, char*)+0x7c>
c000f0b6:	66 90                	xchg   ax,ax
c000f0b8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f0bd:	eb b5                	jmp    c000f074 <findDataTable(unsigned char*, char*)+0x28>
c000f0bf:	90                   	nop
c000f0c0:	b8 00 00 00 00       	mov    eax,0x0
c000f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c8:	83 c4 1c             	add    esp,0x1c
c000f0cb:	c3                   	ret    

c000f0cc <scanMADT()>:
c000f0cc:	53                   	push   ebx
c000f0cd:	83 ec 38             	sub    esp,0x38
c000f0d0:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f0d5:	25 00 04 00 00       	and    eax,0x400
c000f0da:	74 14                	je     c000f0f0 <scanMADT()+0x24>
c000f0dc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0e7:	83 e2 fb             	and    edx,0xfffffffb
c000f0ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0f0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0f5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0fb:	83 e0 04             	and    eax,0x4
c000f0fe:	0f b6 c0             	movzx  eax,al
c000f101:	85 c0                	test   eax,eax
c000f103:	0f 84 6b 04 00 00    	je     c000f574 <scanMADT()+0x4a8>
c000f109:	e8 e2 fa ff ff       	call   c000ebf0 <findRSDP()>
c000f10e:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f113:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f118:	85 c0                	test   eax,eax
c000f11a:	75 1c                	jne    c000f138 <scanMADT()+0x6c>
c000f11c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f121:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f127:	83 e2 fb             	and    edx,0xfffffffb
c000f12a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f130:	e9 47 04 00 00       	jmp    c000f57c <scanMADT()+0x4b0>
c000f135:	8d 76 00             	lea    esi,[esi+0x0]
c000f138:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f13d:	83 ec 0c             	sub    esp,0xc
c000f140:	50                   	push   eax
c000f141:	e8 ae fd ff ff       	call   c000eef4 <findRSDT(unsigned char*)>
c000f146:	83 c4 10             	add    esp,0x10
c000f149:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f14e:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f153:	85 c0                	test   eax,eax
c000f155:	75 19                	jne    c000f170 <scanMADT()+0xa4>
c000f157:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f15c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f162:	83 e2 fb             	and    edx,0xfffffffb
c000f165:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f16b:	e9 0c 04 00 00       	jmp    c000f57c <scanMADT()+0x4b0>
c000f170:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f175:	83 ec 0c             	sub    esp,0xc
c000f178:	50                   	push   eax
c000f179:	e8 0a fb ff ff       	call   c000ec88 <loadACPITables(unsigned char*)>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f186:	83 ec 08             	sub    esp,0x8
c000f189:	68 4c 19 02 c0       	push   0xc002194c
c000f18e:	50                   	push   eax
c000f18f:	e8 b8 fe ff ff       	call   c000f04c <findDataTable(unsigned char*, char*)>
c000f194:	83 c4 10             	add    esp,0x10
c000f197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f19b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f1a0:	75 1a                	jne    c000f1bc <scanMADT()+0xf0>
c000f1a2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1a7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1ad:	83 e2 fe             	and    edx,0xfffffffe
c000f1b0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1b6:	e9 c1 03 00 00       	jmp    c000f57c <scanMADT()+0x4b0>
c000f1bb:	90                   	nop
c000f1bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f1c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1cb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f1cf:	0f 87 a7 03 00 00    	ja     c000f57c <scanMADT()+0x4b0>
c000f1d5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f1dd:	0f 87 99 03 00 00    	ja     c000f57c <scanMADT()+0x4b0>
c000f1e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1ef:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1fe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f206:	8d 50 01             	lea    edx,[eax+0x1]
c000f209:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f20d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f211:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f215:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f219:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f21e:	83 f8 02             	cmp    eax,0x2
c000f221:	0f 86 51 03 00 00    	jbe    c000f578 <scanMADT()+0x4ac>
c000f227:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f22c:	85 c0                	test   eax,eax
c000f22e:	75 58                	jne    c000f288 <scanMADT()+0x1bc>
c000f230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f234:	8d 50 01             	lea    edx,[eax+0x1]
c000f237:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f23b:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f241:	0f b6 d2             	movzx  edx,dl
c000f244:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f248:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f24c:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f252:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f256:	8d 50 01             	lea    edx,[eax+0x1]
c000f259:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f25d:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f263:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f266:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f26c:	0f b6 d2             	movzx  edx,dl
c000f26f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f273:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f277:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f27d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f282:	e9 d9 02 00 00       	jmp    c000f560 <scanMADT()+0x494>
c000f287:	90                   	nop
c000f288:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f28d:	83 f8 01             	cmp    eax,0x1
c000f290:	0f 85 1a 01 00 00    	jne    c000f3b0 <scanMADT()+0x2e4>
c000f296:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f29a:	8d 50 01             	lea    edx,[eax+0x1]
c000f29d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2a1:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f2a7:	0f b6 d2             	movzx  edx,dl
c000f2aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f2ae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f2b2:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f2b8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f2bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2c5:	01 d0                	add    eax,edx
c000f2c7:	83 c0 2c             	add    eax,0x2c
c000f2ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f2cc:	0f b6 d0             	movzx  edx,al
c000f2cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2de:	0f b6 c0             	movzx  eax,al
c000f2e1:	c1 e0 08             	shl    eax,0x8
c000f2e4:	89 d1                	mov    ecx,edx
c000f2e6:	09 c1                	or     ecx,eax
c000f2e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ec:	8d 50 02             	lea    edx,[eax+0x2]
c000f2ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2f7:	0f b6 c0             	movzx  eax,al
c000f2fa:	c1 e0 10             	shl    eax,0x10
c000f2fd:	09 c1                	or     ecx,eax
c000f2ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f303:	8d 50 03             	lea    edx,[eax+0x3]
c000f306:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f30a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f30e:	0f b6 c0             	movzx  eax,al
c000f311:	c1 e0 18             	shl    eax,0x18
c000f314:	09 c1                	or     ecx,eax
c000f316:	89 ca                	mov    edx,ecx
c000f318:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f31d:	0f b6 c0             	movzx  eax,al
c000f320:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f327:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f32c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f330:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f334:	01 d0                	add    eax,edx
c000f336:	83 c0 2c             	add    eax,0x2c
c000f339:	8a 00                	mov    al,BYTE PTR [eax]
c000f33b:	0f b6 d0             	movzx  edx,al
c000f33e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f342:	8d 48 01             	lea    ecx,[eax+0x1]
c000f345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f349:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f34d:	0f b6 c0             	movzx  eax,al
c000f350:	c1 e0 08             	shl    eax,0x8
c000f353:	89 d1                	mov    ecx,edx
c000f355:	09 c1                	or     ecx,eax
c000f357:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35b:	8d 50 02             	lea    edx,[eax+0x2]
c000f35e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f362:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f366:	0f b6 c0             	movzx  eax,al
c000f369:	c1 e0 10             	shl    eax,0x10
c000f36c:	09 c1                	or     ecx,eax
c000f36e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f372:	8d 50 03             	lea    edx,[eax+0x3]
c000f375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f379:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f37d:	0f b6 c0             	movzx  eax,al
c000f380:	c1 e0 18             	shl    eax,0x18
c000f383:	09 c1                	or     ecx,eax
c000f385:	89 ca                	mov    edx,ecx
c000f387:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f38c:	0f b6 c0             	movzx  eax,al
c000f38f:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f396:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f39b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3a0:	83 c0 01             	add    eax,0x1
c000f3a3:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f3a8:	e9 b3 01 00 00       	jmp    c000f560 <scanMADT()+0x494>
c000f3ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f3b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f3b5:	83 f8 02             	cmp    eax,0x2
c000f3b8:	0f 85 ea 00 00 00    	jne    c000f4a8 <scanMADT()+0x3dc>
c000f3be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3d1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f3d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d9:	8d 50 01             	lea    edx,[eax+0x1]
c000f3dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3e4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3e8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f4:	01 d0                	add    eax,edx
c000f3f6:	83 c0 2c             	add    eax,0x2c
c000f3f9:	8a 00                	mov    al,BYTE PTR [eax]
c000f3fb:	0f b6 d0             	movzx  edx,al
c000f3fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f402:	8d 48 01             	lea    ecx,[eax+0x1]
c000f405:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f409:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f40d:	0f b6 c0             	movzx  eax,al
c000f410:	c1 e0 08             	shl    eax,0x8
c000f413:	89 d1                	mov    ecx,edx
c000f415:	09 c1                	or     ecx,eax
c000f417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41b:	8d 50 02             	lea    edx,[eax+0x2]
c000f41e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f422:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f426:	0f b6 c0             	movzx  eax,al
c000f429:	c1 e0 10             	shl    eax,0x10
c000f42c:	09 c1                	or     ecx,eax
c000f42e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f432:	8d 50 03             	lea    edx,[eax+0x3]
c000f435:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f439:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f43d:	0f b6 c0             	movzx  eax,al
c000f440:	c1 e0 18             	shl    eax,0x18
c000f443:	09 c8                	or     eax,ecx
c000f445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f449:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f44e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f452:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f456:	01 d0                	add    eax,edx
c000f458:	83 c0 2c             	add    eax,0x2c
c000f45b:	8a 00                	mov    al,BYTE PTR [eax]
c000f45d:	0f b6 d0             	movzx  edx,al
c000f460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f464:	8d 48 01             	lea    ecx,[eax+0x1]
c000f467:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f46b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f46f:	0f b6 c0             	movzx  eax,al
c000f472:	c1 e0 08             	shl    eax,0x8
c000f475:	09 d0                	or     eax,edx
c000f477:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f47c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f481:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f486:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f48a:	88 90 48 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcfb8],dl
c000f490:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f495:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f49a:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f4a2:	e9 b9 00 00 00       	jmp    c000f560 <scanMADT()+0x494>
c000f4a7:	90                   	nop
c000f4a8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4ad:	83 f8 04             	cmp    eax,0x4
c000f4b0:	0f 85 9a 00 00 00    	jne    c000f550 <scanMADT()+0x484>
c000f4b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ba:	8d 50 01             	lea    edx,[eax+0x1]
c000f4bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4c9:	0f b6 c0             	movzx  eax,al
c000f4cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f4d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d8:	01 d0                	add    eax,edx
c000f4da:	83 c0 2c             	add    eax,0x2c
c000f4dd:	8a 00                	mov    al,BYTE PTR [eax]
c000f4df:	0f b6 d0             	movzx  edx,al
c000f4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4f1:	0f b6 c0             	movzx  eax,al
c000f4f4:	c1 e0 08             	shl    eax,0x8
c000f4f7:	09 d0                	or     eax,edx
c000f4f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4fd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f506:	8d 50 01             	lea    edx,[eax+0x1]
c000f509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f50d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f511:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f515:	0f b6 c0             	movzx  eax,al
c000f518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f520:	c1 e0 08             	shl    eax,0x8
c000f523:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f527:	89 c1                	mov    ecx,eax
c000f529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f52d:	c1 e0 18             	shl    eax,0x18
c000f530:	89 c3                	mov    ebx,eax
c000f532:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f537:	8d 50 01             	lea    edx,[eax+0x1]
c000f53a:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f540:	09 d9                	or     ecx,ebx
c000f542:	89 ca                	mov    edx,ecx
c000f544:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f54b:	eb 13                	jmp    c000f560 <scanMADT()+0x494>
c000f54d:	8d 76 00             	lea    esi,[esi+0x0]
c000f550:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f555:	83 f8 05             	cmp    eax,0x5
c000f558:	75 06                	jne    c000f560 <scanMADT()+0x494>
c000f55a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f55f:	90                   	nop
c000f560:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f565:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f569:	01 d0                	add    eax,edx
c000f56b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f56f:	e9 50 fc ff ff       	jmp    c000f1c4 <scanMADT()+0xf8>
c000f574:	90                   	nop
c000f575:	eb 05                	jmp    c000f57c <scanMADT()+0x4b0>
c000f577:	90                   	nop
c000f578:	90                   	nop
c000f579:	8d 76 00             	lea    esi,[esi+0x0]
c000f57c:	83 c4 38             	add    esp,0x38
c000f57f:	5b                   	pop    ebx
c000f580:	c3                   	ret    
c000f581:	90                   	nop
c000f582:	66 90                	xchg   ax,ax

c000f584 <ACPI::ACPI()>:
c000f584:	83 ec 0c             	sub    esp,0xc
c000f587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58b:	83 ec 08             	sub    esp,0x8
c000f58e:	68 51 19 02 c0       	push   0xc0021951
c000f593:	50                   	push   eax
c000f594:	e8 3b d2 ff ff       	call   c000c7d4 <Device::Device(char const*)>
c000f599:	83 c4 10             	add    esp,0x10
c000f59c:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000f5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a5:	89 10                	mov    DWORD PTR [eax],edx
c000f5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5ab:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5b6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5c4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f5ce:	e8 f9 fa ff ff       	call   c000f0cc <scanMADT()>
c000f5d3:	90                   	nop
c000f5d4:	83 c4 0c             	add    esp,0xc
c000f5d7:	c3                   	ret    

c000f5d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f5d8:	83 ec 2c             	sub    esp,0x2c
c000f5db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f5df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f5e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f5e7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f5eb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5f0:	88 c8                	mov    al,cl
c000f5f2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f603:	90                   	nop
c000f604:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f608:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f60e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f612:	0f 8d b0 00 00 00    	jge    c000f6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f618:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f61c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f620:	83 c2 2a             	add    edx,0x2a
c000f623:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f627:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f62c:	0f b7 c0             	movzx  eax,ax
c000f62f:	39 c2                	cmp    edx,eax
c000f631:	0f 85 85 00 00 00    	jne    c000f6bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f63b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f63f:	83 c2 2a             	add    edx,0x2a
c000f642:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f646:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f64b:	0f b6 c0             	movzx  eax,al
c000f64e:	39 c2                	cmp    edx,eax
c000f650:	75 6a                	jne    c000f6bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f652:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f657:	85 c0                	test   eax,eax
c000f659:	74 3d                	je     c000f698 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f65b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f65f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f663:	83 c2 2a             	add    edx,0x2a
c000f666:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f66a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f66e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f671:	39 c2                	cmp    edx,eax
c000f673:	74 13                	je     c000f688 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f675:	83 ec 0c             	sub    esp,0xc
c000f678:	68 cc 18 02 c0       	push   0xc00218cc
c000f67d:	e8 57 1b 00 00       	call   c00111d9 <KePanic(char const*)>
c000f682:	83 c4 10             	add    esp,0x10
c000f685:	8d 76 00             	lea    esi,[esi+0x0]
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	68 56 19 02 c0       	push   0xc0021956
c000f690:	e8 44 1b 00 00       	call   c00111d9 <KePanic(char const*)>
c000f695:	83 c4 10             	add    esp,0x10
c000f698:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f69c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6a4:	83 c2 2a             	add    edx,0x2a
c000f6a7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f6ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6ad:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f6b0:	89 01                	mov    DWORD PTR [ecx],eax
c000f6b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f6b5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f6ba:	66 90                	xchg   ax,ax
c000f6bc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f6c1:	e9 3e ff ff ff       	jmp    c000f604 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f6c6:	66 90                	xchg   ax,ax
c000f6c8:	90                   	nop
c000f6c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6cd:	83 c4 2c             	add    esp,0x2c
c000f6d0:	c2 04 00             	ret    0x4
c000f6d3:	90                   	nop

c000f6d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f6d4:	83 ec 1c             	sub    esp,0x1c
c000f6d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6db:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f6df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f6e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6e8:	88 c8                	mov    al,cl
c000f6ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6ee:	88 d0                	mov    al,dl
c000f6f0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f702:	83 c2 2a             	add    edx,0x2a
c000f705:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f709:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f70d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f711:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f71b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f71e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f722:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f72b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f731:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f735:	83 c0 01             	add    eax,0x1
c000f738:	88 c1                	mov    cl,al
c000f73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f73e:	83 c2 2a             	add    edx,0x2a
c000f741:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f749:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f753:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f756:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f75a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f762:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f768:	8d 50 01             	lea    edx,[eax+0x1]
c000f76b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f76f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f779:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f77f:	3d 00 02 00 00       	cmp    eax,0x200
c000f784:	75 12                	jne    c000f798 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f786:	83 ec 0c             	sub    esp,0xc
c000f789:	68 65 19 02 c0       	push   0xc0021965
c000f78e:	e8 46 1a 00 00       	call   c00111d9 <KePanic(char const*)>
c000f793:	83 c4 10             	add    esp,0x10
c000f796:	66 90                	xchg   ax,ax
c000f798:	90                   	nop
c000f799:	83 c4 1c             	add    esp,0x1c
c000f79c:	c3                   	ret    
c000f79d:	90                   	nop
c000f79e:	66 90                	xchg   ax,ax

c000f7a0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f7a0:	b8 00 00 00 00       	mov    eax,0x0
c000f7a5:	c3                   	ret    
c000f7a6:	66 90                	xchg   ax,ax

c000f7a8 <ACPI::detectPCI()>:
c000f7a8:	53                   	push   ebx
c000f7a9:	83 ec 28             	sub    esp,0x28
c000f7ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f7b1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f7b6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f7bb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f7c1:	83 e0 04             	and    eax,0x4
c000f7c4:	0f b6 c0             	movzx  eax,al
c000f7c7:	85 c0                	test   eax,eax
c000f7c9:	74 2d                	je     c000f7f8 <ACPI::detectPCI()+0x50>
c000f7cb:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f7d0:	83 ec 08             	sub    esp,0x8
c000f7d3:	68 82 19 02 c0       	push   0xc0021982
c000f7d8:	50                   	push   eax
c000f7d9:	e8 6e f8 ff ff       	call   c000f04c <findDataTable(unsigned char*, char*)>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7e5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7ea:	74 0c                	je     c000f7f8 <ACPI::detectPCI()+0x50>
c000f7ec:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7f1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7f6:	66 90                	xchg   ax,ax
c000f7f8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f804:	8a 00                	mov    al,BYTE PTR [eax]
c000f806:	0f b6 c0             	movzx  eax,al
c000f809:	83 f8 01             	cmp    eax,0x1
c000f80c:	75 0e                	jne    c000f81c <ACPI::detectPCI()+0x74>
c000f80e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f813:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f818:	eb 2e                	jmp    c000f848 <ACPI::detectPCI()+0xa0>
c000f81a:	66 90                	xchg   ax,ax
c000f81c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f820:	8a 00                	mov    al,BYTE PTR [eax]
c000f822:	0f b6 c0             	movzx  eax,al
c000f825:	83 f8 02             	cmp    eax,0x2
c000f828:	75 1e                	jne    c000f848 <ACPI::detectPCI()+0xa0>
c000f82a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f82f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f834:	85 c0                	test   eax,eax
c000f836:	74 10                	je     c000f848 <ACPI::detectPCI()+0xa0>
c000f838:	83 ec 0c             	sub    esp,0xc
c000f83b:	68 fc 18 02 c0       	push   0xc00218fc
c000f840:	e8 94 19 00 00       	call   c00111d9 <KePanic(char const*)>
c000f845:	83 c4 10             	add    esp,0x10
c000f848:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f84c:	83 f0 01             	xor    eax,0x1
c000f84f:	0f b6 c0             	movzx  eax,al
c000f852:	85 c0                	test   eax,eax
c000f854:	74 46                	je     c000f89c <ACPI::detectPCI()+0xf4>
c000f856:	e8 d5 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f85b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f85f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f864:	75 0e                	jne    c000f874 <ACPI::detectPCI()+0xcc>
c000f866:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f86b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f870:	eb 2a                	jmp    c000f89c <ACPI::detectPCI()+0xf4>
c000f872:	66 90                	xchg   ax,ax
c000f874:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f879:	75 21                	jne    c000f89c <ACPI::detectPCI()+0xf4>
c000f87b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f880:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f885:	85 c0                	test   eax,eax
c000f887:	74 13                	je     c000f89c <ACPI::detectPCI()+0xf4>
c000f889:	83 ec 0c             	sub    esp,0xc
c000f88c:	68 fc 18 02 c0       	push   0xc00218fc
c000f891:	e8 43 19 00 00       	call   c00111d9 <KePanic(char const*)>
c000f896:	83 c4 10             	add    esp,0x10
c000f899:	8d 76 00             	lea    esi,[esi+0x0]
c000f89c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f8a1:	85 c0                	test   eax,eax
c000f8a3:	0f 84 87 00 00 00    	je     c000f930 <ACPI::detectPCI()+0x188>
c000f8a9:	83 ec 0c             	sub    esp,0xc
c000f8ac:	68 87 19 02 c0       	push   0xc0021987
c000f8b1:	e8 4f 12 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000f8b6:	83 c4 10             	add    esp,0x10
c000f8b9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f8c1:	83 ec 0c             	sub    esp,0xc
c000f8c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f8c8:	e8 06 82 ff ff       	call   c0007ad3 <malloc>
c000f8cd:	83 c4 10             	add    esp,0x10
c000f8d0:	89 c3                	mov    ebx,eax
c000f8d2:	83 ec 0c             	sub    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	e8 ef b2 00 00       	call   c001abca <PCI::PCI()>
c000f8db:	83 c4 10             	add    esp,0x10
c000f8de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f8e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8ed:	50                   	push   eax
c000f8ee:	e8 49 cd ff ff       	call   c000c63c <Device::addChild(Device*)>
c000f8f3:	83 c4 10             	add    esp,0x10
c000f8f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8fc:	83 c0 08             	add    eax,0x8
c000f8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f901:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f906:	85 d2                	test   edx,edx
c000f908:	74 0a                	je     c000f914 <ACPI::detectPCI()+0x16c>
c000f90a:	ba 01 00 00 00       	mov    edx,0x1
c000f90f:	eb 0b                	jmp    c000f91c <ACPI::detectPCI()+0x174>
c000f911:	8d 76 00             	lea    esi,[esi+0x0]
c000f914:	ba 02 00 00 00       	mov    edx,0x2
c000f919:	8d 76 00             	lea    esi,[esi+0x0]
c000f91c:	6a 00                	push   0x0
c000f91e:	6a 00                	push   0x0
c000f920:	52                   	push   edx
c000f921:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f925:	ff d0                	call   eax
c000f927:	83 c4 10             	add    esp,0x10
c000f92a:	e9 91 00 00 00       	jmp    c000f9c0 <ACPI::detectPCI()+0x218>
c000f92f:	90                   	nop
c000f930:	83 ec 0c             	sub    esp,0xc
c000f933:	68 9f 19 02 c0       	push   0xc002199f
c000f938:	e8 c8 11 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000f93d:	83 c4 10             	add    esp,0x10
c000f940:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f947:	83 ec 0c             	sub    esp,0xc
c000f94a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f94e:	e8 80 81 ff ff       	call   c0007ad3 <malloc>
c000f953:	83 c4 10             	add    esp,0x10
c000f956:	89 c3                	mov    ebx,eax
c000f958:	83 ec 0c             	sub    esp,0xc
c000f95b:	53                   	push   ebx
c000f95c:	e8 11 be 00 00       	call   c001b772 <IDE::IDE()>
c000f961:	83 c4 10             	add    esp,0x10
c000f964:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f968:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f96c:	83 ec 08             	sub    esp,0x8
c000f96f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f973:	50                   	push   eax
c000f974:	e8 c3 cc ff ff       	call   c000c63c <Device::addChild(Device*)>
c000f979:	83 c4 10             	add    esp,0x10
c000f97c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f980:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f98e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f99b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9aa:	83 c0 08             	add    eax,0x8
c000f9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9af:	6a 00                	push   0x0
c000f9b1:	6a 00                	push   0x0
c000f9b3:	6a 00                	push   0x0
c000f9b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9b9:	ff d0                	call   eax
c000f9bb:	83 c4 10             	add    esp,0x10
c000f9be:	66 90                	xchg   ax,ax
c000f9c0:	90                   	nop
c000f9c1:	83 c4 28             	add    esp,0x28
c000f9c4:	5b                   	pop    ebx
c000f9c5:	c3                   	ret    
c000f9c6:	66 90                	xchg   ax,ax

c000f9c8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f9c8:	83 ec 1c             	sub    esp,0x1c
c000f9cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9cf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9d2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9db:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9e0:	83 ec 08             	sub    esp,0x8
c000f9e3:	52                   	push   edx
c000f9e4:	50                   	push   eax
c000f9e5:	e8 b0 77 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f9ea:	83 c4 10             	add    esp,0x10
c000f9ed:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9f1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9f6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9fb:	83 ec 04             	sub    esp,0x4
c000f9fe:	6a 01                	push   0x1
c000fa00:	52                   	push   edx
c000fa01:	50                   	push   eax
c000fa02:	e8 ab 78 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	90                   	nop
c000fa0b:	83 c4 1c             	add    esp,0x1c
c000fa0e:	c3                   	ret    
c000fa0f:	90                   	nop

c000fa10 <ACPI::sleep()>:
c000fa10:	83 ec 0c             	sub    esp,0xc
c000fa13:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa18:	85 c0                	test   eax,eax
c000fa1a:	74 08                	je     c000fa24 <ACPI::sleep()+0x14>
c000fa1c:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa21:	ff d0                	call   eax
c000fa23:	90                   	nop
c000fa24:	90                   	nop
c000fa25:	83 c4 0c             	add    esp,0xc
c000fa28:	c3                   	ret    
c000fa29:	90                   	nop
c000fa2a:	66 90                	xchg   ax,ax

c000fa2c <ACPI::open(int, int, void*)>:
c000fa2c:	55                   	push   ebp
c000fa2d:	89 e5                	mov    ebp,esp
c000fa2f:	53                   	push   ebx
c000fa30:	81 ec 74 01 00 00    	sub    esp,0x174
c000fa36:	83 ec 0c             	sub    esp,0xc
c000fa39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fa3c:	e8 67 fd ff ff       	call   c000f7a8 <ACPI::detectPCI()>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	68 24 19 02 c0       	push   0xc0021924
c000fa4c:	e8 b4 10 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa59:	8a 00                	mov    al,BYTE PTR [eax]
c000fa5b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fa5e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa62:	83 f8 01             	cmp    eax,0x1
c000fa65:	75 15                	jne    c000fa7c <ACPI::open(int, int, void*)+0x50>
c000fa67:	83 ec 0c             	sub    esp,0xc
c000fa6a:	68 94 12 02 c0       	push   0xc0021294
c000fa6f:	e8 7a 4b 00 00       	call   c00145ee <Thr::loadKernelSymbolTable(char const*)>
c000fa74:	83 c4 10             	add    esp,0x10
c000fa77:	eb 33                	jmp    c000faac <ACPI::open(int, int, void*)+0x80>
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]
c000fa7c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fa80:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa85:	75 15                	jne    c000fa9c <ACPI::open(int, int, void*)+0x70>
c000fa87:	83 ec 0c             	sub    esp,0xc
c000fa8a:	68 b4 19 02 c0       	push   0xc00219b4
c000fa8f:	e8 5a 4b 00 00       	call   c00145ee <Thr::loadKernelSymbolTable(char const*)>
c000fa94:	83 c4 10             	add    esp,0x10
c000fa97:	eb 13                	jmp    c000faac <ACPI::open(int, int, void*)+0x80>
c000fa99:	8d 76 00             	lea    esi,[esi+0x0]
c000fa9c:	83 ec 0c             	sub    esp,0xc
c000fa9f:	68 d2 19 02 c0       	push   0xc00219d2
c000faa4:	e8 30 17 00 00       	call   c00111d9 <KePanic(char const*)>
c000faa9:	83 c4 10             	add    esp,0x10
c000faac:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fab0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fab7:	83 ec 0c             	sub    esp,0xc
c000faba:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fabd:	e8 11 80 ff ff       	call   c0007ad3 <malloc>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	89 c3                	mov    ebx,eax
c000fac7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000facc:	83 ec 04             	sub    esp,0x4
c000facf:	50                   	push   eax
c000fad0:	68 ec 19 02 c0       	push   0xc00219ec
c000fad5:	53                   	push   ebx
c000fad6:	e8 53 bc ff ff       	call   c000b72e <File::File(char const*, Process*)>
c000fadb:	83 c4 10             	add    esp,0x10
c000fade:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fae1:	83 ec 08             	sub    esp,0x8
c000fae4:	6a 01                	push   0x1
c000fae6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fae9:	e8 fc bc ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c000faee:	83 c4 10             	add    esp,0x10
c000faf1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000faf4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000faf8:	75 12                	jne    c000fb0c <ACPI::open(int, int, void*)+0xe0>
c000fafa:	83 ec 0c             	sub    esp,0xc
c000fafd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb00:	e8 43 bd ff ff       	call   c000b848 <File::close()>
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	eb 06                	jmp    c000fb10 <ACPI::open(int, int, void*)+0xe4>
c000fb0a:	66 90                	xchg   ax,ax
c000fb0c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fb10:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fb14:	74 16                	je     c000fb2c <ACPI::open(int, int, void*)+0x100>
c000fb16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb19:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb1b:	83 c0 08             	add    eax,0x8
c000fb1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb20:	83 ec 0c             	sub    esp,0xc
c000fb23:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb26:	ff d0                	call   eax
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	90                   	nop
c000fb2c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fb2f:	83 f0 01             	xor    eax,0x1
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	85 c0                	test   eax,eax
c000fb37:	74 3b                	je     c000fb74 <ACPI::open(int, int, void*)+0x148>
c000fb39:	83 ec 0c             	sub    esp,0xc
c000fb3c:	68 0a 1a 02 c0       	push   0xc0021a0a
c000fb41:	e8 bf 0f 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000fb46:	83 c4 10             	add    esp,0x10
c000fb49:	83 ec 04             	sub    esp,0x4
c000fb4c:	6a 0c                	push   0xc
c000fb4e:	68 25 1a 02 c0       	push   0xc0021a25
c000fb53:	68 36 1a 02 c0       	push   0xc0021a36
c000fb58:	e8 3d 3d 00 00       	call   c001389a <Reg::readIntWithDefault(char*, char*, int)>
c000fb5d:	83 c4 10             	add    esp,0x10
c000fb60:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fb63:	83 ec 0c             	sub    esp,0xc
c000fb66:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb69:	e8 ac 9c ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fb6e:	83 c4 10             	add    esp,0x10
c000fb71:	8d 76 00             	lea    esi,[esi+0x0]
c000fb74:	83 ec 0c             	sub    esp,0xc
c000fb77:	68 95 05 02 c0       	push   0xc0020595
c000fb7c:	e8 84 0f 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb87:	83 ec 08             	sub    esp,0x8
c000fb8a:	6a 13                	push   0x13
c000fb8c:	50                   	push   eax
c000fb8d:	e8 c2 cd ff ff       	call   c000c954 <getDevicesOfType(DeviceType)>
c000fb92:	83 c4 0c             	add    esp,0xc
c000fb95:	8d 76 00             	lea    esi,[esi+0x0]
c000fb98:	83 ec 0c             	sub    esp,0xc
c000fb9b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fb9e:	50                   	push   eax
c000fb9f:	e8 dc fd 00 00       	call   c001f980 <LinkedList<Device>::isEmpty()>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	83 f0 01             	xor    eax,0x1
c000fbaa:	0f b6 c0             	movzx  eax,al
c000fbad:	85 c0                	test   eax,eax
c000fbaf:	0f 84 1f 01 00 00    	je     c000fcd4 <ACPI::open(int, int, void*)+0x2a8>
c000fbb5:	83 ec 0c             	sub    esp,0xc
c000fbb8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fbbb:	50                   	push   eax
c000fbbc:	e8 db fd 00 00       	call   c001f99c <LinkedList<Device>::getFirstElement()>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fbc7:	83 ec 0c             	sub    esp,0xc
c000fbca:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fbcd:	50                   	push   eax
c000fbce:	e8 d1 fd 00 00       	call   c001f9a4 <LinkedList<Device>::removeFirst()>
c000fbd3:	83 c4 10             	add    esp,0x10
c000fbd6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fbd9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fbdc:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fbdf:	b8 24 00 00 00       	mov    eax,0x24
c000fbe4:	83 e0 fc             	and    eax,0xfffffffc
c000fbe7:	89 c3                	mov    ebx,eax
c000fbe9:	b8 00 00 00 00       	mov    eax,0x0
c000fbee:	66 90                	xchg   ax,ax
c000fbf0:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fbf7:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fbfe:	83 c0 04             	add    eax,0x4
c000fc01:	39 d8                	cmp    eax,ebx
c000fc03:	72 eb                	jb     c000fbf0 <ACPI::open(int, int, void*)+0x1c4>
c000fc05:	83 ec 08             	sub    esp,0x8
c000fc08:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fc0e:	50                   	push   eax
c000fc0f:	83 ec 24             	sub    esp,0x24
c000fc12:	89 e1                	mov    ecx,esp
c000fc14:	b8 24 00 00 00       	mov    eax,0x24
c000fc19:	83 e0 fc             	and    eax,0xfffffffc
c000fc1c:	89 c3                	mov    ebx,eax
c000fc1e:	b8 00 00 00 00       	mov    eax,0x0
c000fc23:	90                   	nop
c000fc24:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fc2b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fc2e:	83 c0 04             	add    eax,0x4
c000fc31:	39 d8                	cmp    eax,ebx
c000fc33:	72 ef                	jb     c000fc24 <ACPI::open(int, int, void*)+0x1f8>
c000fc35:	e8 78 b4 00 00       	call   c001b0b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc3a:	83 c4 30             	add    esp,0x30
c000fc3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fc40:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fc44:	0f 84 4e ff ff ff    	je     c000fb98 <ACPI::open(int, int, void*)+0x16c>
c000fc4a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fc51:	83 ec 0c             	sub    esp,0xc
c000fc54:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fc57:	e8 77 7e ff ff       	call   c0007ad3 <malloc>
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	89 c3                	mov    ebx,eax
c000fc61:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fc66:	83 ec 04             	sub    esp,0x4
c000fc69:	50                   	push   eax
c000fc6a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc6d:	53                   	push   ebx
c000fc6e:	e8 bb ba ff ff       	call   c000b72e <File::File(char const*, Process*)>
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fc79:	83 ec 0c             	sub    esp,0xc
c000fc7c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fc7f:	e8 2a be ff ff       	call   c000baae <File::exists()>
c000fc84:	83 c4 10             	add    esp,0x10
c000fc87:	0f b6 c0             	movzx  eax,al
c000fc8a:	85 c0                	test   eax,eax
c000fc8c:	74 22                	je     c000fcb0 <ACPI::open(int, int, void*)+0x284>
c000fc8e:	83 ec 08             	sub    esp,0x8
c000fc91:	6a 01                	push   0x1
c000fc93:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fc96:	e8 d5 53 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000fc9b:	83 c4 10             	add    esp,0x10
c000fc9e:	83 ec 08             	sub    esp,0x8
c000fca1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fca4:	50                   	push   eax
c000fca5:	e8 06 56 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000fcaa:	83 c4 10             	add    esp,0x10
c000fcad:	8d 76 00             	lea    esi,[esi+0x0]
c000fcb0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fcb4:	0f 84 de fe ff ff    	je     c000fb98 <ACPI::open(int, int, void*)+0x16c>
c000fcba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fcbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcbf:	83 c0 08             	add    eax,0x8
c000fcc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fcca:	ff d0                	call   eax
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	e9 c4 fe ff ff       	jmp    c000fb98 <ACPI::open(int, int, void*)+0x16c>
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcda:	50                   	push   eax
c000fcdb:	e8 9c fc 00 00       	call   c001f97c <LinkedList<Device>::~LinkedList()>
c000fce0:	83 c4 10             	add    esp,0x10
c000fce3:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fce9:	83 ec 08             	sub    esp,0x8
c000fcec:	6a 01                	push   0x1
c000fcee:	68 3d 1a 02 c0       	push   0xc0021a3d
c000fcf3:	e8 78 53 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	83 ec 08             	sub    esp,0x8
c000fcfe:	53                   	push   ebx
c000fcff:	50                   	push   eax
c000fd00:	e8 ab 55 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd0d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd13:	83 e0 04             	and    eax,0x4
c000fd16:	0f b6 c0             	movzx  eax,al
c000fd19:	85 c0                	test   eax,eax
c000fd1b:	0f 84 e3 00 00 00    	je     c000fe04 <ACPI::open(int, int, void*)+0x3d8>
c000fd21:	83 ec 0c             	sub    esp,0xc
c000fd24:	68 5a 1a 02 c0       	push   0xc0021a5a
c000fd29:	e8 d7 0d 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c000fd2e:	83 c4 10             	add    esp,0x10
c000fd31:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fd3e:	e8 90 7d ff ff       	call   c0007ad3 <malloc>
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	89 c3                	mov    ebx,eax
c000fd48:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd4d:	83 ec 04             	sub    esp,0x4
c000fd50:	50                   	push   eax
c000fd51:	68 77 1a 02 c0       	push   0xc0021a77
c000fd56:	53                   	push   ebx
c000fd57:	e8 d2 b9 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c000fd5c:	83 c4 10             	add    esp,0x10
c000fd5f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fd62:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fd66:	74 1c                	je     c000fd84 <ACPI::open(int, int, void*)+0x358>
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fd6e:	e8 3b bd ff ff       	call   c000baae <File::exists()>
c000fd73:	83 c4 10             	add    esp,0x10
c000fd76:	0f b6 c0             	movzx  eax,al
c000fd79:	85 c0                	test   eax,eax
c000fd7b:	74 07                	je     c000fd84 <ACPI::open(int, int, void*)+0x358>
c000fd7d:	b0 01                	mov    al,0x1
c000fd7f:	eb 07                	jmp    c000fd88 <ACPI::open(int, int, void*)+0x35c>
c000fd81:	8d 76 00             	lea    esi,[esi+0x0]
c000fd84:	b0 00                	mov    al,0x0
c000fd86:	66 90                	xchg   ax,ax
c000fd88:	0f b6 c0             	movzx  eax,al
c000fd8b:	85 c0                	test   eax,eax
c000fd8d:	74 21                	je     c000fdb0 <ACPI::open(int, int, void*)+0x384>
c000fd8f:	83 ec 08             	sub    esp,0x8
c000fd92:	6a 01                	push   0x1
c000fd94:	68 77 1a 02 c0       	push   0xc0021a77
c000fd99:	e8 d2 52 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c000fd9e:	83 c4 10             	add    esp,0x10
c000fda1:	83 ec 08             	sub    esp,0x8
c000fda4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fda7:	50                   	push   eax
c000fda8:	e8 03 55 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c000fdad:	83 c4 10             	add    esp,0x10
c000fdb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fdb4:	74 1e                	je     c000fdd4 <ACPI::open(int, int, void*)+0x3a8>
c000fdb6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fdba:	74 18                	je     c000fdd4 <ACPI::open(int, int, void*)+0x3a8>
c000fdbc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fdbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc1:	83 c0 08             	add    eax,0x8
c000fdc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc6:	83 ec 0c             	sub    esp,0xc
c000fdc9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fdcc:	ff d0                	call   eax
c000fdce:	83 c4 10             	add    esp,0x10
c000fdd1:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd4:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fdd9:	83 ec 08             	sub    esp,0x8
c000fddc:	68 94 1a 02 c0       	push   0xc0021a94
c000fde1:	50                   	push   eax
c000fde2:	e8 65 f2 ff ff       	call   c000f04c <findDataTable(unsigned char*, char*)>
c000fde7:	83 c4 10             	add    esp,0x10
c000fdea:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fded:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fdf1:	74 11                	je     c000fe04 <ACPI::open(int, int, void*)+0x3d8>
c000fdf3:	83 ec 08             	sub    esp,0x8
c000fdf6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fdf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdfc:	e8 c7 fb ff ff       	call   c000f9c8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	b8 00 00 00 00       	mov    eax,0x0
c000fe09:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe0c:	c9                   	leave  
c000fe0d:	c3                   	ret    

c000fe0e <CPU::close(int, int, void*)>:
c000fe0e:	31 c0                	xor    eax,eax
c000fe10:	c3                   	ret    
c000fe11:	90                   	nop

c000fe12 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fe12:	60                   	pusha  
c000fe13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe1f:	9c                   	pushf  
c000fe20:	fa                   	cli    
c000fe21:	0f 09                	wbinvd 
c000fe23:	0f 30                	wrmsr  
c000fe25:	9d                   	popf   
c000fe26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe2a:	89 02                	mov    DWORD PTR [edx],eax
c000fe2c:	61                   	popa   
c000fe2d:	c3                   	ret    

c000fe2e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fe2e:	60                   	pusha  
c000fe2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe33:	9c                   	pushf  
c000fe34:	fa                   	cli    
c000fe35:	0f 09                	wbinvd 
c000fe37:	31 c0                	xor    eax,eax
c000fe39:	31 d2                	xor    edx,edx
c000fe3b:	0f 32                	rdmsr  
c000fe3d:	9d                   	popf   
c000fe3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe42:	89 02                	mov    DWORD PTR [edx],eax
c000fe44:	61                   	popa   
c000fe45:	c3                   	ret    

c000fe46 <CPU::AMD_K6_writeback(int, int, int)>:
c000fe46:	56                   	push   esi
c000fe47:	53                   	push   ebx
c000fe48:	83 ec 10             	sub    esp,0x10
c000fe4b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fe50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe54:	75 5d                	jne    c000feb3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe56:	83 f8 08             	cmp    eax,0x8
c000fe59:	75 09                	jne    c000fe64 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fe5b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fe60:	7e 13                	jle    c000fe75 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe62:	eb 30                	jmp    c000fe94 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe64:	83 f8 06             	cmp    eax,0x6
c000fe67:	7c 4a                	jl     c000feb3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe69:	83 f8 07             	cmp    eax,0x7
c000fe6c:	7e 07                	jle    c000fe75 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe6e:	83 f8 09             	cmp    eax,0x9
c000fe71:	74 21                	je     c000fe94 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe73:	eb 3e                	jmp    c000feb3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe75:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fe7b:	89 e6                	mov    esi,esp
c000fe7d:	56                   	push   esi
c000fe7e:	68 82 00 00 c0       	push   0xc0000082
c000fe83:	e8 a6 ff ff ff       	call   c000fe2e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fe88:	c1 eb 15             	shr    ebx,0x15
c000fe8b:	56                   	push   esi
c000fe8c:	83 e3 7e             	and    ebx,0x7e
c000fe8f:	6a 00                	push   0x0
c000fe91:	53                   	push   ebx
c000fe92:	eb 12                	jmp    c000fea6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fe94:	89 e3                	mov    ebx,esp
c000fe96:	53                   	push   ebx
c000fe97:	68 82 00 00 c0       	push   0xc0000082
c000fe9c:	e8 8d ff ff ff       	call   c000fe2e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fea1:	53                   	push   ebx
c000fea2:	6a 00                	push   0x0
c000fea4:	6a 00                	push   0x0
c000fea6:	68 82 00 00 c0       	push   0xc0000082
c000feab:	e8 62 ff ff ff       	call   c000fe12 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000feb0:	83 c4 18             	add    esp,0x18
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	5b                   	pop    ebx
c000feb7:	5e                   	pop    esi
c000feb8:	c3                   	ret    
c000feb9:	90                   	nop

c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000feba:	55                   	push   ebp
c000febb:	57                   	push   edi
c000febc:	56                   	push   esi
c000febd:	53                   	push   ebx
c000febe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fec2:	39 05 58 30 02 c0    	cmp    DWORD PTR ds:0xc0023058,eax
c000fec8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fecc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fed0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000fed4:	75 23                	jne    c000fef9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000fed6:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000fedb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fedf:	89 06                	mov    DWORD PTR [esi],eax
c000fee1:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000fee6:	89 07                	mov    DWORD PTR [edi],eax
c000fee8:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000feed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fef0:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000fef5:	89 02                	mov    DWORD PTR [edx],eax
c000fef7:	eb 3f                	jmp    c000ff38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000fef9:	31 c9                	xor    ecx,ecx
c000fefb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000feff:	0f a2                	cpuid  
c000ff01:	89 06                	mov    DWORD PTR [esi],eax
c000ff03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff07:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff09:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff0c:	89 10                	mov    DWORD PTR [eax],edx
c000ff0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff12:	a3 58 30 02 c0       	mov    ds:0xc0023058,eax
c000ff17:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff19:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ff1e:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff20:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ff25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff28:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ff2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff31:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff33:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ff38:	5b                   	pop    ebx
c000ff39:	5e                   	pop    esi
c000ff3a:	5f                   	pop    edi
c000ff3b:	5d                   	pop    ebp
c000ff3c:	c3                   	ret    
c000ff3d:	90                   	nop

c000ff3e <CPU::cpuidCheckEDX(unsigned int)>:
c000ff3e:	83 ec 10             	sub    esp,0x10
c000ff41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff45:	50                   	push   eax
c000ff46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff4a:	50                   	push   eax
c000ff4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff4f:	50                   	push   eax
c000ff50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff54:	50                   	push   eax
c000ff55:	6a 01                	push   0x1
c000ff57:	e8 5e ff ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff60:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ff64:	0f 95 c0             	setne  al
c000ff67:	83 c4 24             	add    esp,0x24
c000ff6a:	c3                   	ret    
c000ff6b:	90                   	nop

c000ff6c <CPU::cpuidCheckECX(unsigned int)>:
c000ff6c:	83 ec 10             	sub    esp,0x10
c000ff6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff73:	50                   	push   eax
c000ff74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff78:	50                   	push   eax
c000ff79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff7d:	50                   	push   eax
c000ff7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff82:	50                   	push   eax
c000ff83:	6a 01                	push   0x1
c000ff85:	e8 30 ff ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff8e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ff92:	0f 95 c0             	setne  al
c000ff95:	83 c4 24             	add    esp,0x24
c000ff98:	c3                   	ret    
c000ff99:	90                   	nop

c000ff9a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ff9a:	83 ec 10             	sub    esp,0x10
c000ff9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa1:	50                   	push   eax
c000ffa2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa6:	50                   	push   eax
c000ffa7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffab:	50                   	push   eax
c000ffac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb0:	50                   	push   eax
c000ffb1:	6a 07                	push   0x7
c000ffb3:	e8 02 ff ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffbc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000ffc0:	0f 95 c0             	setne  al
c000ffc3:	83 c4 24             	add    esp,0x24
c000ffc6:	c3                   	ret    
c000ffc7:	90                   	nop

c000ffc8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000ffc8:	83 ec 10             	sub    esp,0x10
c000ffcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffcf:	50                   	push   eax
c000ffd0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd4:	50                   	push   eax
c000ffd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd9:	50                   	push   eax
c000ffda:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffde:	50                   	push   eax
c000ffdf:	6a 07                	push   0x7
c000ffe1:	e8 d4 fe ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffea:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffee:	0f 95 c0             	setne  al
c000fff1:	83 c4 24             	add    esp,0x24
c000fff4:	c3                   	ret    
c000fff5:	90                   	nop

c000fff6 <CPU::CPU()>:
c000fff6:	83 ec 0c             	sub    esp,0xc
c000fff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffd:	83 ec 08             	sub    esp,0x8
c0010000:	68 b9 1b 02 c0       	push   0xc0021bb9
c0010005:	50                   	push   eax
c0010006:	e8 c9 c7 ff ff       	call   c000c7d4 <Device::Device(char const*)>
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	ba 4c 1c 02 c0       	mov    edx,0xc0021c4c
c0010013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010017:	89 10                	mov    DWORD PTR [eax],edx
c0010019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002b:	05 78 01 00 00       	add    eax,0x178
c0010030:	83 ec 0c             	sub    esp,0xc
c0010033:	50                   	push   eax
c0010034:	e8 43 73 ff ff       	call   c000737c <GDT::GDT()>
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010040:	05 7c 09 00 00       	add    eax,0x97c
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	50                   	push   eax
c0010049:	e8 7e 75 ff ff       	call   c00075cc <IDT::IDT()>
c001004e:	83 c4 10             	add    esp,0x10
c0010051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010055:	05 7c 11 00 00       	add    eax,0x117c
c001005a:	83 ec 0c             	sub    esp,0xc
c001005d:	50                   	push   eax
c001005e:	e8 c9 8e ff ff       	call   c0008f2c <TSS::TSS()>
c0010063:	83 c4 10             	add    esp,0x10
c0010066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010075:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001007f:	90                   	nop
c0010080:	83 c4 0c             	add    esp,0xc
c0010083:	c3                   	ret    

c0010084 <CPU::displayFeatures()>:
c0010084:	c3                   	ret    
c0010085:	90                   	nop

c0010086 <CPU::detectFeatures()>:
c0010086:	55                   	push   ebp
c0010087:	57                   	push   edi
c0010088:	56                   	push   esi
c0010089:	53                   	push   ebx
c001008a:	83 ec 30             	sub    esp,0x30
c001008d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010091:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001009b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00100a1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00100a8:	6a 0d                	push   0xd
c00100aa:	6a 00                	push   0x0
c00100ac:	55                   	push   ebp
c00100ad:	e8 3e 04 ff ff       	call   c00004f0 <memset>
c00100b2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00100b7:	83 c4 10             	add    esp,0x10
c00100ba:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00100c1:	0f 84 db 05 00 00    	je     c00106a2 <CPU::detectFeatures()+0x61c>
c00100c7:	83 ec 0c             	sub    esp,0xc
c00100ca:	89 ef                	mov    edi,ebp
c00100cc:	6a 10                	push   0x10
c00100ce:	e8 6b fe ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c00100d3:	83 e0 01             	and    eax,0x1
c00100d6:	8d 14 00             	lea    edx,[eax+eax*1]
c00100d9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00100df:	83 e0 fd             	and    eax,0xfffffffd
c00100e2:	09 d0                	or     eax,edx
c00100e4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00100ea:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00100f1:	e8 48 fe ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c00100f6:	83 e0 01             	and    eax,0x1
c00100f9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010100:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010106:	83 e0 fb             	and    eax,0xfffffffb
c0010109:	09 d0                	or     eax,edx
c001010b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010111:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010118:	e8 21 fe ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c001011d:	83 e0 01             	and    eax,0x1
c0010120:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010127:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001012d:	83 e0 f7             	and    eax,0xfffffff7
c0010130:	09 d0                	or     eax,edx
c0010132:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010138:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001013f:	e8 fa fd ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c0010144:	83 e0 01             	and    eax,0x1
c0010147:	c1 e0 04             	shl    eax,0x4
c001014a:	89 c2                	mov    edx,eax
c001014c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010152:	83 e0 ef             	and    eax,0xffffffef
c0010155:	09 d0                	or     eax,edx
c0010157:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001015d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010164:	e8 d5 fd ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c0010169:	83 e0 01             	and    eax,0x1
c001016c:	c1 e0 05             	shl    eax,0x5
c001016f:	89 c2                	mov    edx,eax
c0010171:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010177:	83 e0 df             	and    eax,0xffffffdf
c001017a:	09 d0                	or     eax,edx
c001017c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010182:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010189:	e8 b0 fd ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c001018e:	83 e0 01             	and    eax,0x1
c0010191:	8d 14 00             	lea    edx,[eax+eax*1]
c0010194:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001019a:	83 e0 fd             	and    eax,0xfffffffd
c001019d:	09 d0                	or     eax,edx
c001019f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101a5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00101ac:	e8 8d fd ff ff       	call   c000ff3e <CPU::cpuidCheckEDX(unsigned int)>
c00101b1:	83 e0 01             	and    eax,0x1
c00101b4:	c1 e0 06             	shl    eax,0x6
c00101b7:	89 c2                	mov    edx,eax
c00101b9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00101bf:	83 e0 bf             	and    eax,0xffffffbf
c00101c2:	09 d0                	or     eax,edx
c00101c4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00101ca:	58                   	pop    eax
c00101cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101cf:	50                   	push   eax
c00101d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101d4:	50                   	push   eax
c00101d5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00101d9:	56                   	push   esi
c00101da:	8d 44 24 28          	lea    eax,[esp+0x28]
c00101de:	50                   	push   eax
c00101df:	6a 00                	push   0x0
c00101e1:	e8 d4 fc ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101e6:	b8 04 00 00 00       	mov    eax,0x4
c00101eb:	89 c1                	mov    ecx,eax
c00101ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ef:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00101f5:	89 c1                	mov    ecx,eax
c00101f7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00101fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101fd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010203:	89 c1                	mov    ecx,eax
c0010205:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010209:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001020b:	83 c4 18             	add    esp,0x18
c001020e:	68 c8 1a 02 c0       	push   0xc0021ac8
c0010213:	55                   	push   ebp
c0010214:	e8 67 05 ff ff       	call   c0000780 <strcmp>
c0010219:	83 c4 10             	add    esp,0x10
c001021c:	85 c0                	test   eax,eax
c001021e:	75 0f                	jne    c001022f <CPU::detectFeatures()+0x1a9>
c0010220:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001022a:	e9 22 02 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c001022f:	50                   	push   eax
c0010230:	50                   	push   eax
c0010231:	68 d5 1a 02 c0       	push   0xc0021ad5
c0010236:	55                   	push   ebp
c0010237:	e8 44 05 ff ff       	call   c0000780 <strcmp>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	85 c0                	test   eax,eax
c0010241:	74 dd                	je     c0010220 <CPU::detectFeatures()+0x19a>
c0010243:	50                   	push   eax
c0010244:	50                   	push   eax
c0010245:	68 e2 1a 02 c0       	push   0xc0021ae2
c001024a:	55                   	push   ebp
c001024b:	e8 30 05 ff ff       	call   c0000780 <strcmp>
c0010250:	83 c4 10             	add    esp,0x10
c0010253:	85 c0                	test   eax,eax
c0010255:	74 2a                	je     c0010281 <CPU::detectFeatures()+0x1fb>
c0010257:	50                   	push   eax
c0010258:	50                   	push   eax
c0010259:	68 ef 1a 02 c0       	push   0xc0021aef
c001025e:	55                   	push   ebp
c001025f:	e8 1c 05 ff ff       	call   c0000780 <strcmp>
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	85 c0                	test   eax,eax
c0010269:	74 16                	je     c0010281 <CPU::detectFeatures()+0x1fb>
c001026b:	50                   	push   eax
c001026c:	50                   	push   eax
c001026d:	68 fc 1a 02 c0       	push   0xc0021afc
c0010272:	55                   	push   ebp
c0010273:	e8 08 05 ff ff       	call   c0000780 <strcmp>
c0010278:	83 c4 10             	add    esp,0x10
c001027b:	85 c0                	test   eax,eax
c001027d:	74 48                	je     c00102c7 <CPU::detectFeatures()+0x241>
c001027f:	eb 0f                	jmp    c0010290 <CPU::detectFeatures()+0x20a>
c0010281:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001028b:	e9 c1 01 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c0010290:	50                   	push   eax
c0010291:	50                   	push   eax
c0010292:	68 09 1b 02 c0       	push   0xc0021b09
c0010297:	55                   	push   ebp
c0010298:	e8 e3 04 ff ff       	call   c0000780 <strcmp>
c001029d:	83 c4 10             	add    esp,0x10
c00102a0:	85 c0                	test   eax,eax
c00102a2:	74 23                	je     c00102c7 <CPU::detectFeatures()+0x241>
c00102a4:	57                   	push   edi
c00102a5:	57                   	push   edi
c00102a6:	68 16 1b 02 c0       	push   0xc0021b16
c00102ab:	55                   	push   ebp
c00102ac:	e8 cf 04 ff ff       	call   c0000780 <strcmp>
c00102b1:	83 c4 10             	add    esp,0x10
c00102b4:	85 c0                	test   eax,eax
c00102b6:	75 1e                	jne    c00102d6 <CPU::detectFeatures()+0x250>
c00102b8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00102c2:	e9 8a 01 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c00102c7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00102d1:	e9 7b 01 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c00102d6:	56                   	push   esi
c00102d7:	56                   	push   esi
c00102d8:	68 23 1b 02 c0       	push   0xc0021b23
c00102dd:	55                   	push   ebp
c00102de:	e8 9d 04 ff ff       	call   c0000780 <strcmp>
c00102e3:	83 c4 10             	add    esp,0x10
c00102e6:	85 c0                	test   eax,eax
c00102e8:	75 0f                	jne    c00102f9 <CPU::detectFeatures()+0x273>
c00102ea:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00102f4:	e9 58 01 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c00102f9:	51                   	push   ecx
c00102fa:	51                   	push   ecx
c00102fb:	68 e2 1a 02 c0       	push   0xc0021ae2
c0010300:	55                   	push   ebp
c0010301:	e8 7a 04 ff ff       	call   c0000780 <strcmp>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	85 c0                	test   eax,eax
c001030b:	75 0f                	jne    c001031c <CPU::detectFeatures()+0x296>
c001030d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010317:	e9 35 01 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c001031c:	52                   	push   edx
c001031d:	52                   	push   edx
c001031e:	68 30 1b 02 c0       	push   0xc0021b30
c0010323:	55                   	push   ebp
c0010324:	e8 57 04 ff ff       	call   c0000780 <strcmp>
c0010329:	83 c4 10             	add    esp,0x10
c001032c:	85 c0                	test   eax,eax
c001032e:	75 0f                	jne    c001033f <CPU::detectFeatures()+0x2b9>
c0010330:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001033a:	e9 12 01 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c001033f:	50                   	push   eax
c0010340:	50                   	push   eax
c0010341:	68 3d 1b 02 c0       	push   0xc0021b3d
c0010346:	55                   	push   ebp
c0010347:	e8 34 04 ff ff       	call   c0000780 <strcmp>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	85 c0                	test   eax,eax
c0010351:	75 0f                	jne    c0010362 <CPU::detectFeatures()+0x2dc>
c0010353:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001035d:	e9 ef 00 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c0010362:	50                   	push   eax
c0010363:	50                   	push   eax
c0010364:	68 4a 1b 02 c0       	push   0xc0021b4a
c0010369:	55                   	push   ebp
c001036a:	e8 11 04 ff ff       	call   c0000780 <strcmp>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	85 c0                	test   eax,eax
c0010374:	75 0f                	jne    c0010385 <CPU::detectFeatures()+0x2ff>
c0010376:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010380:	e9 cc 00 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c0010385:	50                   	push   eax
c0010386:	50                   	push   eax
c0010387:	68 57 1b 02 c0       	push   0xc0021b57
c001038c:	55                   	push   ebp
c001038d:	e8 ee 03 ff ff       	call   c0000780 <strcmp>
c0010392:	83 c4 10             	add    esp,0x10
c0010395:	85 c0                	test   eax,eax
c0010397:	75 0f                	jne    c00103a8 <CPU::detectFeatures()+0x322>
c0010399:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00103a3:	e9 a9 00 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c00103a8:	50                   	push   eax
c00103a9:	50                   	push   eax
c00103aa:	68 64 1b 02 c0       	push   0xc0021b64
c00103af:	55                   	push   ebp
c00103b0:	e8 cb 03 ff ff       	call   c0000780 <strcmp>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	85 c0                	test   eax,eax
c00103ba:	75 0f                	jne    c00103cb <CPU::detectFeatures()+0x345>
c00103bc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00103c6:	e9 86 00 00 00       	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c00103cb:	50                   	push   eax
c00103cc:	50                   	push   eax
c00103cd:	68 71 1b 02 c0       	push   0xc0021b71
c00103d2:	55                   	push   ebp
c00103d3:	e8 a8 03 ff ff       	call   c0000780 <strcmp>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	85 c0                	test   eax,eax
c00103dd:	75 0c                	jne    c00103eb <CPU::detectFeatures()+0x365>
c00103df:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00103e9:	eb 66                	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c00103eb:	50                   	push   eax
c00103ec:	50                   	push   eax
c00103ed:	68 7e 1b 02 c0       	push   0xc0021b7e
c00103f2:	55                   	push   ebp
c00103f3:	e8 88 03 ff ff       	call   c0000780 <strcmp>
c00103f8:	83 c4 10             	add    esp,0x10
c00103fb:	85 c0                	test   eax,eax
c00103fd:	75 0c                	jne    c001040b <CPU::detectFeatures()+0x385>
c00103ff:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010409:	eb 46                	jmp    c0010451 <CPU::detectFeatures()+0x3cb>
c001040b:	57                   	push   edi
c001040c:	57                   	push   edi
c001040d:	68 8b 1b 02 c0       	push   0xc0021b8b
c0010412:	55                   	push   ebp
c0010413:	e8 68 03 ff ff       	call   c0000780 <strcmp>
c0010418:	83 c4 10             	add    esp,0x10
c001041b:	85 c0                	test   eax,eax
c001041d:	74 e0                	je     c00103ff <CPU::detectFeatures()+0x379>
c001041f:	56                   	push   esi
c0010420:	56                   	push   esi
c0010421:	68 98 1b 02 c0       	push   0xc0021b98
c0010426:	55                   	push   ebp
c0010427:	e8 54 03 ff ff       	call   c0000780 <strcmp>
c001042c:	83 c4 10             	add    esp,0x10
c001042f:	85 c0                	test   eax,eax
c0010431:	74 cc                	je     c00103ff <CPU::detectFeatures()+0x379>
c0010433:	51                   	push   ecx
c0010434:	51                   	push   ecx
c0010435:	68 a5 1b 02 c0       	push   0xc0021ba5
c001043a:	55                   	push   ebp
c001043b:	e8 40 03 ff ff       	call   c0000780 <strcmp>
c0010440:	83 c4 10             	add    esp,0x10
c0010443:	85 c0                	test   eax,eax
c0010445:	74 b8                	je     c00103ff <CPU::detectFeatures()+0x379>
c0010447:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010451:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010456:	0f 86 be 00 00 00    	jbe    c001051a <CPU::detectFeatures()+0x494>
c001045c:	83 ec 0c             	sub    esp,0xc
c001045f:	68 80 00 00 00       	push   0x80
c0010464:	e8 31 fb ff ff       	call   c000ff9a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010469:	83 e0 01             	and    eax,0x1
c001046c:	c1 e0 06             	shl    eax,0x6
c001046f:	89 c2                	mov    edx,eax
c0010471:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010477:	83 e0 bf             	and    eax,0xffffffbf
c001047a:	09 d0                	or     eax,edx
c001047c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010482:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010489:	e8 0c fb ff ff       	call   c000ff9a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001048e:	83 e0 01             	and    eax,0x1
c0010491:	c1 e0 04             	shl    eax,0x4
c0010494:	89 c2                	mov    edx,eax
c0010496:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001049c:	83 e0 ef             	and    eax,0xffffffef
c001049f:	09 d0                	or     eax,edx
c00104a1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104a7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00104ae:	e8 e7 fa ff ff       	call   c000ff9a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104b3:	89 c2                	mov    edx,eax
c00104b5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104bb:	c1 e2 07             	shl    edx,0x7
c00104be:	83 e0 7f             	and    eax,0x7f
c00104c1:	09 d0                	or     eax,edx
c00104c3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00104d0:	e8 f3 fa ff ff       	call   c000ffc8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104d5:	83 e0 01             	and    eax,0x1
c00104d8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00104df:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104e5:	83 e0 f7             	and    eax,0xfffffff7
c00104e8:	09 d0                	or     eax,edx
c00104ea:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104f0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00104f7:	e8 cc fa ff ff       	call   c000ffc8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	83 e0 01             	and    eax,0x1
c0010502:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010509:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001050f:	83 e0 fb             	and    eax,0xfffffffb
c0010512:	09 d0                	or     eax,edx
c0010514:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001051a:	83 ec 0c             	sub    esp,0xc
c001051d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010521:	50                   	push   eax
c0010522:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010526:	50                   	push   eax
c0010527:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001052b:	57                   	push   edi
c001052c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010530:	56                   	push   esi
c0010531:	6a 01                	push   0x1
c0010533:	e8 82 f9 ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001053c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010542:	89 c1                	mov    ecx,eax
c0010544:	83 e1 0f             	and    ecx,0xf
c0010547:	83 e2 f0             	and    edx,0xfffffff0
c001054a:	09 ca                	or     edx,ecx
c001054c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010552:	89 c2                	mov    edx,eax
c0010554:	c1 ea 04             	shr    edx,0x4
c0010557:	83 e2 0f             	and    edx,0xf
c001055a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001055e:	89 d1                	mov    ecx,edx
c0010560:	83 c4 20             	add    esp,0x20
c0010563:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010569:	c1 e1 06             	shl    ecx,0x6
c001056c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010572:	09 ca                	or     edx,ecx
c0010574:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001057b:	89 c2                	mov    edx,eax
c001057d:	c1 ea 08             	shr    edx,0x8
c0010580:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010586:	83 e2 0f             	and    edx,0xf
c0010589:	89 d5                	mov    ebp,edx
c001058b:	83 e5 03             	and    ebp,0x3
c001058e:	c1 e5 06             	shl    ebp,0x6
c0010591:	83 e1 3f             	and    ecx,0x3f
c0010594:	09 e9                	or     ecx,ebp
c0010596:	89 d5                	mov    ebp,edx
c0010598:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001059e:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00105a4:	c1 ed 02             	shr    ebp,0x2
c00105a7:	83 e1 c0             	and    ecx,0xffffffc0
c00105aa:	09 e9                	or     ecx,ebp
c00105ac:	89 c5                	mov    ebp,eax
c00105ae:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00105b4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00105ba:	c1 ed 08             	shr    ebp,0x8
c00105bd:	83 e5 30             	and    ebp,0x30
c00105c0:	83 e1 cf             	and    ecx,0xffffffcf
c00105c3:	09 e9                	or     ecx,ebp
c00105c5:	83 fa 06             	cmp    edx,0x6
c00105c8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00105ce:	74 05                	je     c00105d5 <CPU::detectFeatures()+0x54f>
c00105d0:	83 fa 0f             	cmp    edx,0xf
c00105d3:	75 64                	jne    c0010639 <CPU::detectFeatures()+0x5b3>
c00105d5:	89 c1                	mov    ecx,eax
c00105d7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00105dd:	c1 e9 10             	shr    ecx,0x10
c00105e0:	c1 e1 04             	shl    ecx,0x4
c00105e3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00105e7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00105ed:	0f b6 c9             	movzx  ecx,cl
c00105f0:	c1 e1 06             	shl    ecx,0x6
c00105f3:	09 e9                	or     ecx,ebp
c00105f5:	83 fa 0f             	cmp    edx,0xf
c00105f8:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00105ff:	75 38                	jne    c0010639 <CPU::detectFeatures()+0x5b3>
c0010601:	c1 e8 14             	shr    eax,0x14
c0010604:	83 c0 0f             	add    eax,0xf
c0010607:	0f b6 c0             	movzx  eax,al
c001060a:	89 c2                	mov    edx,eax
c001060c:	c1 e8 02             	shr    eax,0x2
c001060f:	83 e2 03             	and    edx,0x3
c0010612:	89 d1                	mov    ecx,edx
c0010614:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001061a:	c1 e1 06             	shl    ecx,0x6
c001061d:	83 e2 3f             	and    edx,0x3f
c0010620:	09 ca                	or     edx,ecx
c0010622:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010628:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001062e:	83 e2 c0             	and    edx,0xffffffc0
c0010631:	09 d0                	or     eax,edx
c0010633:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010639:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001063f:	83 ec 0c             	sub    esp,0xc
c0010642:	83 c8 07             	or     eax,0x7
c0010645:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001064b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001064f:	50                   	push   eax
c0010650:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010654:	55                   	push   ebp
c0010655:	57                   	push   edi
c0010656:	56                   	push   esi
c0010657:	68 00 00 00 80       	push   0x80000000
c001065c:	e8 59 f8 ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010661:	83 c4 20             	add    esp,0x20
c0010664:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001066c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010670:	76 1e                	jbe    c0010690 <CPU::detectFeatures()+0x60a>
c0010672:	83 ec 0c             	sub    esp,0xc
c0010675:	50                   	push   eax
c0010676:	55                   	push   ebp
c0010677:	57                   	push   edi
c0010678:	56                   	push   esi
c0010679:	68 01 00 00 80       	push   0x80000001
c001067e:	e8 37 f8 ff ff       	call   c000feba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010683:	83 c4 20             	add    esp,0x20
c0010686:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010690:	52                   	push   edx
c0010691:	52                   	push   edx
c0010692:	68 b1 1b 02 c0       	push   0xc0021bb1
c0010697:	53                   	push   ebx
c0010698:	e8 29 c1 ff ff       	call   c000c7c6 <Device::setName(char const*)>
c001069d:	83 c4 10             	add    esp,0x10
c00106a0:	eb 69                	jmp    c001070b <CPU::detectFeatures()+0x685>
c00106a2:	50                   	push   eax
c00106a3:	50                   	push   eax
c00106a4:	68 16 1b 02 c0       	push   0xc0021b16
c00106a9:	55                   	push   ebp
c00106aa:	e8 a1 ff fe ff       	call   c0000650 <strcpy>
c00106af:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106b9:	e8 05 fb fe ff       	call   c00001c3 <is486>
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	85 c0                	test   eax,eax
c00106c3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106c9:	74 1f                	je     c00106ea <CPU::detectFeatures()+0x664>
c00106cb:	83 c8 07             	or     eax,0x7
c00106ce:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106d4:	0f 20 c0             	mov    eax,cr0
c00106d7:	83 e0 14             	and    eax,0x14
c00106da:	83 f8 04             	cmp    eax,0x4
c00106dd:	75 10                	jne    c00106ef <CPU::detectFeatures()+0x669>
c00106df:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106e5:	83 e0 fd             	and    eax,0xfffffffd
c00106e8:	eb 1b                	jmp    c0010705 <CPU::detectFeatures()+0x67f>
c00106ea:	83 e0 f8             	and    eax,0xfffffff8
c00106ed:	eb df                	jmp    c00106ce <CPU::detectFeatures()+0x648>
c00106ef:	e8 aa fa fe ff       	call   c000019e <hasLegacyFPU>
c00106f4:	83 e0 01             	and    eax,0x1
c00106f7:	8d 14 00             	lea    edx,[eax+eax*1]
c00106fa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010700:	83 e0 fd             	and    eax,0xfffffffd
c0010703:	09 d0                	or     eax,edx
c0010705:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001070b:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010712:	74 17                	je     c001072b <CPU::detectFeatures()+0x6a5>
c0010714:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001071a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010720:	83 c8 10             	or     eax,0x10
c0010723:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010729:	eb 20                	jmp    c001074b <CPU::detectFeatures()+0x6c5>
c001072b:	e8 6e fa fe ff       	call   c000019e <hasLegacyFPU>
c0010730:	83 e0 01             	and    eax,0x1
c0010733:	8d 14 00             	lea    edx,[eax+eax*1]
c0010736:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001073c:	83 e0 fd             	and    eax,0xfffffffd
c001073f:	09 d0                	or     eax,edx
c0010741:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010747:	a8 02                	test   al,0x2
c0010749:	75 c9                	jne    c0010714 <CPU::detectFeatures()+0x68e>
c001074b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010752:	83 c4 2c             	add    esp,0x2c
c0010755:	5b                   	pop    ebx
c0010756:	5e                   	pop    esi
c0010757:	5f                   	pop    edi
c0010758:	5d                   	pop    ebp
c0010759:	c3                   	ret    

c001075a <CPU::setupSMEP()>:
c001075a:	0f 20 e0             	mov    eax,cr4
c001075d:	0d 00 00 10 00       	or     eax,0x100000
c0010762:	0f 22 e0             	mov    cr4,eax
c0010765:	c3                   	ret    

c0010766 <CPU::setupUMIP()>:
c0010766:	0f 20 e0             	mov    eax,cr4
c0010769:	80 cc 08             	or     ah,0x8
c001076c:	0f 22 e0             	mov    cr4,eax
c001076f:	c3                   	ret    

c0010770 <CPU::setupTSC()>:
c0010770:	0f 20 e0             	mov    eax,cr4
c0010773:	83 c8 04             	or     eax,0x4
c0010776:	0f 22 e0             	mov    cr4,eax
c0010779:	c3                   	ret    

c001077a <CPU::setupLargePages()>:
c001077a:	0f 20 e0             	mov    eax,cr4
c001077d:	83 c8 10             	or     eax,0x10
c0010780:	0f 22 e0             	mov    cr4,eax
c0010783:	c3                   	ret    

c0010784 <CPU::setupPAT()>:
c0010784:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010789:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010790:	74 2c                	je     c00107be <CPU::setupPAT()+0x3a>
c0010792:	53                   	push   ebx
c0010793:	83 ec 10             	sub    esp,0x10
c0010796:	68 77 02 00 00       	push   0x277
c001079b:	50                   	push   eax
c001079c:	e8 41 69 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00107a1:	83 e2 f8             	and    edx,0xfffffff8
c00107a4:	83 ca 01             	or     edx,0x1
c00107a7:	52                   	push   edx
c00107a8:	50                   	push   eax
c00107a9:	68 77 02 00 00       	push   0x277
c00107ae:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00107b4:	e8 55 69 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00107b9:	83 c4 28             	add    esp,0x28
c00107bc:	5b                   	pop    ebx
c00107bd:	c3                   	ret    
c00107be:	c3                   	ret    
c00107bf:	90                   	nop

c00107c0 <CPU::setupMTRR()>:
c00107c0:	c3                   	ret    
c00107c1:	90                   	nop

c00107c2 <CPU::setupGlobalPages()>:
c00107c2:	0f 20 e0             	mov    eax,cr4
c00107c5:	0c 80                	or     al,0x80
c00107c7:	0f 22 e0             	mov    cr4,eax
c00107ca:	c3                   	ret    
c00107cb:	90                   	nop

c00107cc <CPU::allowUsermodeDataAccess()>:
c00107cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107d7:	74 03                	je     c00107dc <CPU::allowUsermodeDataAccess()+0x10>
c00107d9:	0f 01 cb             	stac   
c00107dc:	c3                   	ret    
c00107dd:	90                   	nop

c00107de <CPU::prohibitUsermodeDataAccess()>:
c00107de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00107e9:	74 03                	je     c00107ee <CPU::prohibitUsermodeDataAccess()+0x10>
c00107eb:	0f 01 ca             	clac   
c00107ee:	c3                   	ret    
c00107ef:	90                   	nop

c00107f0 <CPU::setupSMAP()>:
c00107f0:	0f 20 e0             	mov    eax,cr4
c00107f3:	0d 00 00 20 00       	or     eax,0x200000
c00107f8:	0f 22 e0             	mov    cr4,eax
c00107fb:	eb e1                	jmp    c00107de <CPU::prohibitUsermodeDataAccess()>
c00107fd:	90                   	nop

c00107fe <CPU::setupFeatures()>:
c00107fe:	53                   	push   ebx
c00107ff:	83 ec 08             	sub    esp,0x8
c0010802:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010806:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001080d:	74 18                	je     c0010827 <CPU::setupFeatures()+0x29>
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	68 bd 1b 02 c0       	push   0xc0021bbd
c0010817:	e8 ee a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001081c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001081f:	e8 42 ff ff ff       	call   c0010766 <CPU::setupUMIP()>
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001082e:	74 18                	je     c0010848 <CPU::setupFeatures()+0x4a>
c0010830:	83 ec 0c             	sub    esp,0xc
c0010833:	68 c7 1b 02 c0       	push   0xc0021bc7
c0010838:	e8 cd a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001083d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010840:	e8 2b ff ff ff       	call   c0010770 <CPU::setupTSC()>
c0010845:	83 c4 10             	add    esp,0x10
c0010848:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001084f:	74 18                	je     c0010869 <CPU::setupFeatures()+0x6b>
c0010851:	83 ec 0c             	sub    esp,0xc
c0010854:	68 d0 1b 02 c0       	push   0xc0021bd0
c0010859:	e8 ac a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001085e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010861:	e8 14 ff ff ff       	call   c001077a <CPU::setupLargePages()>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010870:	74 18                	je     c001088a <CPU::setupFeatures()+0x8c>
c0010872:	83 ec 0c             	sub    esp,0xc
c0010875:	68 d9 1b 02 c0       	push   0xc0021bd9
c001087a:	e8 8b a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001087f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010882:	e8 3b ff ff ff       	call   c00107c2 <CPU::setupGlobalPages()>
c0010887:	83 c4 10             	add    esp,0x10
c001088a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010891:	74 18                	je     c00108ab <CPU::setupFeatures()+0xad>
c0010893:	83 ec 0c             	sub    esp,0xc
c0010896:	68 eb 1b 02 c0       	push   0xc0021beb
c001089b:	e8 6a a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108a3:	e8 dc fe ff ff       	call   c0010784 <CPU::setupPAT()>
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00108b2:	74 11                	je     c00108c5 <CPU::setupFeatures()+0xc7>
c00108b4:	c7 44 24 10 f4 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bf4
c00108bc:	83 c4 08             	add    esp,0x8
c00108bf:	5b                   	pop    ebx
c00108c0:	e9 45 a0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00108c5:	83 c4 08             	add    esp,0x8
c00108c8:	5b                   	pop    ebx
c00108c9:	c3                   	ret    

c00108ca <CPU::open(int, int, void*)>:
c00108ca:	55                   	push   ebp
c00108cb:	57                   	push   edi
c00108cc:	56                   	push   esi
c00108cd:	53                   	push   ebx
c00108ce:	83 ec 18             	sub    esp,0x18
c00108d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00108d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00108d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00108dd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00108e3:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00108e9:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00108ef:	50                   	push   eax
c00108f0:	e8 e9 6a ff ff       	call   c00073de <GDT::setup()>
c00108f5:	83 c4 0c             	add    esp,0xc
c00108f8:	6a 00                	push   0x0
c00108fa:	68 ef be ad de       	push   0xdeadbeef
c00108ff:	55                   	push   ebp
c0010900:	e8 6b 86 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010905:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010908:	e8 43 86 ff ff       	call   c0008f50 <TSS::flush()>
c001090d:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010913:	89 04 24             	mov    DWORD PTR [esp],eax
c0010916:	e8 27 6d ff ff       	call   c0007642 <IDT::setup()>
c001091b:	b8 00 04 00 00       	mov    eax,0x400
c0010920:	0f 23 f8             	mov    db7,eax
c0010923:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001092d:	e8 b0 74 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	85 f6                	test   esi,esi
c0010937:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001093d:	89 38                	mov    DWORD PTR [eax],edi
c001093f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010945:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010948:	74 10                	je     c001095a <CPU::open(int, int, void*)+0x90>
c001094a:	50                   	push   eax
c001094b:	50                   	push   eax
c001094c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010952:	56                   	push   esi
c0010953:	e8 34 8f ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010958:	eb 0d                	jmp    c0010967 <CPU::open(int, int, void*)+0x9d>
c001095a:	83 ec 0c             	sub    esp,0xc
c001095d:	68 fe 1b 02 c0       	push   0xc0021bfe
c0010962:	e8 72 08 00 00       	call   c00111d9 <KePanic(char const*)>
c0010967:	83 c4 10             	add    esp,0x10
c001096a:	83 ec 0c             	sub    esp,0xc
c001096d:	68 0c 1c 02 c0       	push   0xc0021c0c
c0010972:	e8 8e 01 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c0010977:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001097a:	e8 07 f7 ff ff       	call   c0010086 <CPU::detectFeatures()>
c001097f:	c7 04 24 2f 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c2f
c0010986:	e8 7a 01 00 00       	call   c0010b05 <KeSetBootMessage(char const*)>
c001098b:	e8 0b 72 00 00       	call   c0017b9b <HalInitialise()>
c0010990:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010995:	83 e0 10             	and    eax,0x10
c0010998:	83 f8 01             	cmp    eax,0x1
c001099b:	19 c0                	sbb    eax,eax
c001099d:	83 e0 46             	and    eax,0x46
c00109a0:	83 c0 1e             	add    eax,0x1e
c00109a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00109a6:	e8 c2 d6 ff ff       	call   c000e06d <setupTimer(int)>
c00109ab:	83 c4 10             	add    esp,0x10
c00109ae:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c00109b5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00109bb:	74 0c                	je     c00109c9 <CPU::open(int, int, void*)+0xff>
c00109bd:	83 ec 0c             	sub    esp,0xc
c00109c0:	53                   	push   ebx
c00109c1:	e8 38 fe ff ff       	call   c00107fe <CPU::setupFeatures()>
c00109c6:	83 c4 10             	add    esp,0x10
c00109c9:	83 c4 0c             	add    esp,0xc
c00109cc:	31 c0                	xor    eax,eax
c00109ce:	5b                   	pop    ebx
c00109cf:	5e                   	pop    esi
c00109d0:	5f                   	pop    edi
c00109d1:	5d                   	pop    ebp
c00109d2:	c3                   	ret    

c00109d3 <KeInitialiseAtexit()>:
c00109d3:	83 ec 10             	sub    esp,0x10
c00109d6:	6a 60                	push   0x60
c00109d8:	6a 00                	push   0x0
c00109da:	68 20 8e 02 c0       	push   0xc0028e20
c00109df:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c00109e9:	e8 02 fb fe ff       	call   c00004f0 <memset>
c00109ee:	83 c4 1c             	add    esp,0x1c
c00109f1:	c3                   	ret    

c00109f2 <KeRegisterAtexit(void (*)(void*), void*)>:
c00109f2:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c00109f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00109fb:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010a02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a06:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010a0d:	40                   	inc    eax
c0010a0e:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010a13:	83 f8 17             	cmp    eax,0x17
c0010a16:	7e 0d                	jle    c0010a25 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a18:	c7 44 24 04 70 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c70
c0010a20:	e9 b4 07 00 00       	jmp    c00111d9 <KePanic(char const*)>
c0010a25:	c3                   	ret    

c0010a26 <KeExecuteAtexit()>:
c0010a26:	53                   	push   ebx
c0010a27:	31 db                	xor    ebx,ebx
c0010a29:	83 ec 08             	sub    esp,0x8
c0010a2c:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010a32:	7e 50                	jle    c0010a84 <KeExecuteAtexit()+0x5e>
c0010a34:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010a3b:	85 c0                	test   eax,eax
c0010a3d:	74 42                	je     c0010a81 <KeExecuteAtexit()+0x5b>
c0010a3f:	51                   	push   ecx
c0010a40:	50                   	push   eax
c0010a41:	53                   	push   ebx
c0010a42:	68 89 1c 02 c0       	push   0xc0021c89
c0010a47:	e8 be 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a4c:	58                   	pop    eax
c0010a4d:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010a54:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010a5b:	c7 04 24 ab 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cab
c0010a62:	e8 a3 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a67:	c7 04 24 0b 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e0b
c0010a6e:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010a79:	e8 8c 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010a7e:	83 c4 10             	add    esp,0x10
c0010a81:	43                   	inc    ebx
c0010a82:	eb a8                	jmp    c0010a2c <KeExecuteAtexit()+0x6>
c0010a84:	83 c4 08             	add    esp,0x8
c0010a87:	5b                   	pop    ebx
c0010a88:	c3                   	ret    

c0010a89 <KeDisplaySplashScreen()>:
c0010a89:	55                   	push   ebp
c0010a8a:	bd 05 00 00 00       	mov    ebp,0x5
c0010a8f:	57                   	push   edi
c0010a90:	bf 0a 00 00 00       	mov    edi,0xa
c0010a95:	56                   	push   esi
c0010a96:	31 f6                	xor    esi,esi
c0010a98:	53                   	push   ebx
c0010a99:	31 db                	xor    ebx,ebx
c0010a9b:	83 ec 0c             	sub    esp,0xc
c0010a9e:	0f b6 96 60 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcfa0]
c0010aa5:	85 d2                	test   edx,edx
c0010aa7:	89 d0                	mov    eax,edx
c0010aa9:	74 52                	je     c0010afd <KeDisplaySplashScreen()+0x74>
c0010aab:	80 bb 96 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcf6a],0xdb
c0010ab2:	75 13                	jne    c0010ac7 <KeDisplaySplashScreen()+0x3e>
c0010ab4:	0f b6 8b 95 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcf6b]
c0010abb:	83 e1 fe             	and    ecx,0xfffffffe
c0010abe:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ac4:	75 01                	jne    c0010ac7 <KeDisplaySplashScreen()+0x3e>
c0010ac6:	47                   	inc    edi
c0010ac7:	83 fa 0d             	cmp    edx,0xd
c0010aca:	74 28                	je     c0010af4 <KeDisplaySplashScreen()+0x6b>
c0010acc:	83 fa 0a             	cmp    edx,0xa
c0010acf:	75 0a                	jne    c0010adb <KeDisplaySplashScreen()+0x52>
c0010ad1:	45                   	inc    ebp
c0010ad2:	bf 0a 00 00 00       	mov    edi,0xa
c0010ad7:	31 db                	xor    ebx,ebx
c0010ad9:	eb 19                	jmp    c0010af4 <KeDisplaySplashScreen()+0x6b>
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	0f be c0             	movsx  eax,al
c0010ae1:	55                   	push   ebp
c0010ae2:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ae5:	43                   	inc    ebx
c0010ae6:	52                   	push   edx
c0010ae7:	6a 00                	push   0x0
c0010ae9:	6a 0e                	push   0xe
c0010aeb:	50                   	push   eax
c0010aec:	e8 27 7d 00 00       	call   c0018818 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010af1:	83 c4 20             	add    esp,0x20
c0010af4:	46                   	inc    esi
c0010af5:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010afb:	75 a1                	jne    c0010a9e <KeDisplaySplashScreen()+0x15>
c0010afd:	83 c4 0c             	add    esp,0xc
c0010b00:	5b                   	pop    ebx
c0010b01:	5e                   	pop    esi
c0010b02:	5f                   	pop    edi
c0010b03:	5d                   	pop    ebp
c0010b04:	c3                   	ret    

c0010b05 <KeSetBootMessage(char const*)>:
c0010b05:	57                   	push   edi
c0010b06:	56                   	push   esi
c0010b07:	53                   	push   ebx
c0010b08:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b0e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b15:	68 9e 00 00 00       	push   0x9e
c0010b1a:	6a 00                	push   0x0
c0010b1c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b20:	56                   	push   esi
c0010b21:	e8 ca f9 fe ff       	call   c00004f0 <memset>
c0010b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b29:	e8 52 fa fe ff       	call   c0000580 <strlen>
c0010b2e:	ba 50 00 00 00       	mov    edx,0x50
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	31 c9                	xor    ecx,ecx
c0010b38:	29 c2                	sub    edx,eax
c0010b3a:	83 e2 fe             	and    edx,0xfffffffe
c0010b3d:	01 f2                	add    edx,esi
c0010b3f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010b44:	84 c0                	test   al,al
c0010b46:	74 0a                	je     c0010b52 <KeSetBootMessage(char const*)+0x4d>
c0010b48:	80 cc 0f             	or     ah,0xf
c0010b4b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010b4f:	41                   	inc    ecx
c0010b50:	eb ed                	jmp    c0010b3f <KeSetBootMessage(char const*)+0x3a>
c0010b52:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010b57:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010b5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b5e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010b64:	5b                   	pop    ebx
c0010b65:	5e                   	pop    esi
c0010b66:	5f                   	pop    edi
c0010b67:	c3                   	ret    

c0010b68 <Krnl::handlePowerButton()>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	e8 c4 06 00 00       	call   c0011234 <KeHandlePowerButton()>
c0010b70:	90                   	nop
c0010b71:	83 c4 0c             	add    esp,0xc
c0010b74:	c3                   	ret    
c0010b75:	8d 76 00             	lea    esi,[esi+0x0]

c0010b78 <Krnl::handleSleepButton()>:
c0010b78:	83 ec 0c             	sub    esp,0xc
c0010b7b:	e8 e9 06 00 00       	call   c0011269 <KeHandleSleepButton()>
c0010b80:	90                   	nop
c0010b81:	83 c4 0c             	add    esp,0xc
c0010b84:	c3                   	ret    
c0010b85:	90                   	nop

c0010b86 <EnvVarContainer::getEnv(char const*)>:
c0010b86:	57                   	push   edi
c0010b87:	56                   	push   esi
c0010b88:	53                   	push   ebx
c0010b89:	31 db                	xor    ebx,ebx
c0010b8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b8f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010b91:	7e 2b                	jle    c0010bbe <EnvVarContainer::getEnv(char const*)+0x38>
c0010b93:	50                   	push   eax
c0010b94:	50                   	push   eax
c0010b95:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b98:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010b9f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010ba2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ba6:	e8 d5 fb fe ff       	call   c0000780 <strcmp>
c0010bab:	83 c4 10             	add    esp,0x10
c0010bae:	85 c0                	test   eax,eax
c0010bb0:	75 09                	jne    c0010bbb <EnvVarContainer::getEnv(char const*)+0x35>
c0010bb2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010bb5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010bb9:	eb 05                	jmp    c0010bc0 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010bbb:	43                   	inc    ebx
c0010bbc:	eb d1                	jmp    c0010b8f <EnvVarContainer::getEnv(char const*)+0x9>
c0010bbe:	31 c0                	xor    eax,eax
c0010bc0:	5b                   	pop    ebx
c0010bc1:	5e                   	pop    esi
c0010bc2:	5f                   	pop    edi
c0010bc3:	c3                   	ret    

c0010bc4 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010bc4:	55                   	push   ebp
c0010bc5:	57                   	push   edi
c0010bc6:	56                   	push   esi
c0010bc7:	53                   	push   ebx
c0010bc8:	83 ec 28             	sub    esp,0x28
c0010bcb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010bcf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010bd3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010bd7:	56                   	push   esi
c0010bd8:	e8 a3 f9 fe ff       	call   c0000580 <strlen>
c0010bdd:	40                   	inc    eax
c0010bde:	89 04 24             	mov    DWORD PTR [esp],eax
c0010be1:	e8 ed 6e ff ff       	call   c0007ad3 <malloc>
c0010be6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010bed:	e8 8e f9 fe ff       	call   c0000580 <strlen>
c0010bf2:	40                   	inc    eax
c0010bf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf6:	e8 d8 6e ff ff       	call   c0007ad3 <malloc>
c0010bfb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bfe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c02:	e8 79 f9 fe ff       	call   c0000580 <strlen>
c0010c07:	83 c4 0c             	add    esp,0xc
c0010c0a:	40                   	inc    eax
c0010c0b:	50                   	push   eax
c0010c0c:	6a 00                	push   0x0
c0010c0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010c12:	e8 d9 f8 fe ff       	call   c00004f0 <memset>
c0010c17:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c1a:	e8 61 f9 fe ff       	call   c0000580 <strlen>
c0010c1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c23:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c2b:	89 de                	mov    esi,ebx
c0010c2d:	e8 4e f9 fe ff       	call   c0000580 <strlen>
c0010c32:	83 c4 0c             	add    esp,0xc
c0010c35:	40                   	inc    eax
c0010c36:	50                   	push   eax
c0010c37:	6a 00                	push   0x0
c0010c39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c3d:	e8 ae f8 fe ff       	call   c00004f0 <memset>
c0010c42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c45:	e8 36 f9 fe ff       	call   c0000580 <strlen>
c0010c4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c56:	40                   	inc    eax
c0010c57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010c5a:	c1 e0 03             	shl    eax,0x3
c0010c5d:	5a                   	pop    edx
c0010c5e:	59                   	pop    ecx
c0010c5f:	50                   	push   eax
c0010c60:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010c63:	e8 57 6e ff ff       	call   c0007abf <realloc>
c0010c68:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010c6b:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010c6f:	b9 08 00 00 00       	mov    ecx,0x8
c0010c74:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010c77:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010c7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c7d:	83 c4 2c             	add    esp,0x2c
c0010c80:	5b                   	pop    ebx
c0010c81:	5e                   	pop    esi
c0010c82:	5f                   	pop    edi
c0010c83:	5d                   	pop    ebp
c0010c84:	c3                   	ret    
c0010c85:	90                   	nop

c0010c86 <EnvVarContainer::deleteEnv(char const*)>:
c0010c86:	c3                   	ret    
c0010c87:	90                   	nop

c0010c88 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010c88:	55                   	push   ebp
c0010c89:	57                   	push   edi
c0010c8a:	56                   	push   esi
c0010c8b:	53                   	push   ebx
c0010c8c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010c92:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010c99:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010ca0:	68 14 01 00 00       	push   0x114
c0010ca5:	e8 29 6e ff ff       	call   c0007ad3 <malloc>
c0010caa:	83 c4 0c             	add    esp,0xc
c0010cad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010cb0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010cb7:	89 c3                	mov    ebx,eax
c0010cb9:	50                   	push   eax
c0010cba:	e8 6f aa ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0010cbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc2:	e8 e7 ad ff ff       	call   c000baae <File::exists()>
c0010cc7:	83 c4 10             	add    esp,0x10
c0010cca:	84 c0                	test   al,al
c0010ccc:	75 31                	jne    c0010cff <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010cce:	50                   	push   eax
c0010ccf:	50                   	push   eax
c0010cd0:	6a 12                	push   0x12
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 12 ab ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c0010cd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cda:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ce0:	e8 9b f8 fe ff       	call   c0000580 <strlen>
c0010ce5:	5a                   	pop    edx
c0010ce6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010cea:	52                   	push   edx
c0010ceb:	31 d2                	xor    edx,edx
c0010ced:	56                   	push   esi
c0010cee:	52                   	push   edx
c0010cef:	50                   	push   eax
c0010cf0:	53                   	push   ebx
c0010cf1:	ff d7                	call   edi
c0010cf3:	83 c4 14             	add    esp,0x14
c0010cf6:	53                   	push   ebx
c0010cf7:	e8 4c ab ff ff       	call   c000b848 <File::close()>
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	56                   	push   esi
c0010d00:	31 f6                	xor    esi,esi
c0010d02:	68 00 01 00 00       	push   0x100
c0010d07:	6a 00                	push   0x0
c0010d09:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d0d:	50                   	push   eax
c0010d0e:	e8 dd f7 fe ff       	call   c00004f0 <memset>
c0010d13:	5f                   	pop    edi
c0010d14:	58                   	pop    eax
c0010d15:	6a 01                	push   0x1
c0010d17:	53                   	push   ebx
c0010d18:	e8 cd aa ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d28:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010d37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d39:	52                   	push   edx
c0010d3a:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010d3e:	51                   	push   ecx
c0010d3f:	6a 00                	push   0x0
c0010d41:	6a 01                	push   0x1
c0010d43:	53                   	push   ebx
c0010d44:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d47:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010d4c:	83 c4 20             	add    esp,0x20
c0010d4f:	85 c0                	test   eax,eax
c0010d51:	89 c1                	mov    ecx,eax
c0010d53:	0f 84 36 01 00 00    	je     c0010e8f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010d59:	83 f8 0d             	cmp    eax,0xd
c0010d5c:	0f 84 22 01 00 00    	je     c0010e84 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010d62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d67:	0f 84 f0 00 00 00    	je     c0010e5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010d6d:	83 f8 0a             	cmp    eax,0xa
c0010d70:	74 13                	je     c0010d85 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d72:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010d77:	74 0c                	je     c0010d85 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d79:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010d7f:	0f 8e f6 00 00 00    	jle    c0010e7b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d89:	83 ec 0c             	sub    esp,0xc
c0010d8c:	8d 78 01             	lea    edi,[eax+0x1]
c0010d8f:	57                   	push   edi
c0010d90:	e8 3e 6d ff ff       	call   c0007ad3 <malloc>
c0010d95:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010d99:	8d 56 04             	lea    edx,[esi+0x4]
c0010d9c:	89 14 24             	mov    DWORD PTR [esp],edx
c0010d9f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010da3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010da7:	e8 27 6d ff ff       	call   c0007ad3 <malloc>
c0010dac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010db0:	83 c4 0c             	add    esp,0xc
c0010db3:	57                   	push   edi
c0010db4:	6a 00                	push   0x0
c0010db6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010dba:	e8 31 f7 fe ff       	call   c00004f0 <memset>
c0010dbf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010dc3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010dcb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dcd:	83 c4 0c             	add    esp,0xc
c0010dd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010dd4:	52                   	push   edx
c0010dd5:	6a 00                	push   0x0
c0010dd7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ddb:	e8 10 f7 fe ff       	call   c00004f0 <memset>
c0010de0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010de4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010de8:	89 34 24             	mov    DWORD PTR [esp],esi
c0010deb:	e8 90 f7 fe ff       	call   c0000580 <strlen>
c0010df0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010df4:	89 c1                	mov    ecx,eax
c0010df6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e01:	40                   	inc    eax
c0010e02:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e05:	85 d2                	test   edx,edx
c0010e07:	75 0c                	jne    c0010e15 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e09:	83 ec 0c             	sub    esp,0xc
c0010e0c:	6a 08                	push   0x8
c0010e0e:	e8 c0 6c ff ff       	call   c0007ad3 <malloc>
c0010e13:	eb 0c                	jmp    c0010e21 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e15:	51                   	push   ecx
c0010e16:	51                   	push   ecx
c0010e17:	c1 e0 03             	shl    eax,0x3
c0010e1a:	50                   	push   eax
c0010e1b:	52                   	push   edx
c0010e1c:	e8 9e 6c ff ff       	call   c0007abf <realloc>
c0010e21:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e24:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e27:	83 c4 10             	add    esp,0x10
c0010e2a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010e2d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e31:	b9 08 00 00 00       	mov    ecx,0x8
c0010e36:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e3c:	50                   	push   eax
c0010e3d:	31 f6                	xor    esi,esi
c0010e3f:	68 00 01 00 00       	push   0x100
c0010e44:	6a 00                	push   0x0
c0010e46:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e4a:	50                   	push   eax
c0010e4b:	e8 a0 f6 fe ff       	call   c00004f0 <memset>
c0010e50:	83 c4 10             	add    esp,0x10
c0010e53:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e5b:	eb 27                	jmp    c0010e84 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e5d:	83 f8 3d             	cmp    eax,0x3d
c0010e60:	74 1e                	je     c0010e80 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010e62:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e68:	7f 07                	jg     c0010e71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e6a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010e6e:	46                   	inc    esi
c0010e6f:	eb 13                	jmp    c0010e84 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e71:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010e79:	eb 09                	jmp    c0010e84 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e7b:	83 f8 3d             	cmp    eax,0x3d
c0010e7e:	75 ea                	jne    c0010e6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010e80:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010e84:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e89:	0f 85 99 fe ff ff    	jne    c0010d28 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010e8f:	83 ec 0c             	sub    esp,0xc
c0010e92:	53                   	push   ebx
c0010e93:	e8 b0 a9 ff ff       	call   c000b848 <File::close()>
c0010e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e9d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ea0:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010ea6:	5b                   	pop    ebx
c0010ea7:	5e                   	pop    esi
c0010ea8:	5f                   	pop    edi
c0010ea9:	5d                   	pop    ebp
c0010eaa:	c3                   	ret    
c0010eab:	90                   	nop

c0010eac <EnvVarContainer::__loadSystem()>:
c0010eac:	83 ec 10             	sub    esp,0x10
c0010eaf:	68 c0 31 02 c0       	push   0xc00231c0
c0010eb4:	68 b0 1c 02 c0       	push   0xc0021cb0
c0010eb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ebd:	e8 c6 fd ff ff       	call   c0010c88 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010ec2:	83 c4 1c             	add    esp,0x1c
c0010ec5:	c3                   	ret    

c0010ec6 <EnvVarContainer::__loadUser()>:
c0010ec6:	c3                   	ret    
c0010ec7:	90                   	nop

c0010ec8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ecc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eda:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010edd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ee8:	90                   	nop
c0010ee9:	c3                   	ret    

c0010eea <EnvVarContainer::~EnvVarContainer()>:
c0010eea:	83 ec 0c             	sub    esp,0xc
c0010eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef4:	85 c0                	test   eax,eax
c0010ef6:	74 1d                	je     c0010f15 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010efc:	8b 00                	mov    eax,DWORD PTR [eax]
c0010efe:	85 c0                	test   eax,eax
c0010f00:	74 13                	je     c0010f15 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f09:	83 ec 0c             	sub    esp,0xc
c0010f0c:	50                   	push   eax
c0010f0d:	e8 d1 6b ff ff       	call   c0007ae3 <free>
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	90                   	nop
c0010f16:	83 c4 0c             	add    esp,0xc
c0010f19:	c3                   	ret    

c0010f1a <KeGetEnv(Process*, char const*)>:
c0010f1a:	53                   	push   ebx
c0010f1b:	83 ec 08             	sub    esp,0x8
c0010f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f22:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010f28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f2c:	74 04                	je     c0010f32 <KeGetEnv(Process*, char const*)+0x18>
c0010f2e:	85 c0                	test   eax,eax
c0010f30:	75 0b                	jne    c0010f3d <KeGetEnv(Process*, char const*)+0x23>
c0010f32:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010f37:	85 c0                	test   eax,eax
c0010f39:	75 19                	jne    c0010f54 <KeGetEnv(Process*, char const*)+0x3a>
c0010f3b:	eb 27                	jmp    c0010f64 <KeGetEnv(Process*, char const*)+0x4a>
c0010f3d:	52                   	push   edx
c0010f3e:	52                   	push   edx
c0010f3f:	53                   	push   ebx
c0010f40:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010f46:	e8 3b fc ff ff       	call   c0010b86 <EnvVarContainer::getEnv(char const*)>
c0010f4b:	83 c4 10             	add    esp,0x10
c0010f4e:	85 c0                	test   eax,eax
c0010f50:	75 28                	jne    c0010f7a <KeGetEnv(Process*, char const*)+0x60>
c0010f52:	eb de                	jmp    c0010f32 <KeGetEnv(Process*, char const*)+0x18>
c0010f54:	52                   	push   edx
c0010f55:	52                   	push   edx
c0010f56:	53                   	push   ebx
c0010f57:	50                   	push   eax
c0010f58:	e8 29 fc ff ff       	call   c0010b86 <EnvVarContainer::getEnv(char const*)>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	85 c0                	test   eax,eax
c0010f62:	75 16                	jne    c0010f7a <KeGetEnv(Process*, char const*)+0x60>
c0010f64:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f68:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0010f6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010f71:	83 c4 08             	add    esp,0x8
c0010f74:	5b                   	pop    ebx
c0010f75:	e9 0c fc ff ff       	jmp    c0010b86 <EnvVarContainer::getEnv(char const*)>
c0010f7a:	83 c4 08             	add    esp,0x8
c0010f7d:	5b                   	pop    ebx
c0010f7e:	c3                   	ret    

c0010f7f <KeSetEnvSystem(char const*, char const*)>:
c0010f7f:	83 ec 10             	sub    esp,0x10
c0010f82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f8a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0010f90:	e8 2f fc ff ff       	call   c0010bc4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010f95:	83 c4 1c             	add    esp,0x1c
c0010f98:	c3                   	ret    

c0010f99 <KeSetEnvUser(char const*, char const*)>:
c0010f99:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010f9e:	85 c0                	test   eax,eax
c0010fa0:	74 15                	je     c0010fb7 <KeSetEnvUser(char const*, char const*)+0x1e>
c0010fa2:	83 ec 10             	sub    esp,0x10
c0010fa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fad:	50                   	push   eax
c0010fae:	e8 11 fc ff ff       	call   c0010bc4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fb3:	83 c4 1c             	add    esp,0x1c
c0010fb6:	c3                   	ret    
c0010fb7:	c3                   	ret    

c0010fb8 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fbc:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010fc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fc6:	e9 f9 fb ff ff       	jmp    c0010bc4 <EnvVarContainer::setEnv(char const*, char const*)>

c0010fcb <KeDeleteEnvSystem(char const*)>:
c0010fcb:	c3                   	ret    

c0010fcc <KeDeleteEnvUser(char const*)>:
c0010fcc:	c3                   	ret    

c0010fcd <KeDeleteEnvProcess(Process*, char const*)>:
c0010fcd:	c3                   	ret    

c0010fce <KeNewProcessEnv(Process*)>:
c0010fce:	83 ec 28             	sub    esp,0x28
c0010fd1:	6a 0c                	push   0xc
c0010fd3:	e8 fb 6a ff ff       	call   c0007ad3 <malloc>
c0010fd8:	5a                   	pop    edx
c0010fd9:	59                   	pop    ecx
c0010fda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fde:	50                   	push   eax
c0010fdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fe3:	e8 e0 fe ff ff       	call   c0010ec8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010fe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fec:	83 c4 2c             	add    esp,0x2c
c0010fef:	c3                   	ret    

c0010ff0 <KeCopyProcessEnv(Process*, Process*)>:
c0010ff0:	57                   	push   edi
c0010ff1:	56                   	push   esi
c0010ff2:	53                   	push   ebx
c0010ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff7:	83 ec 0c             	sub    esp,0xc
c0010ffa:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011000:	6a 0c                	push   0xc
c0011002:	e8 cc 6a ff ff       	call   c0007ad3 <malloc>
c0011007:	89 c3                	mov    ebx,eax
c0011009:	58                   	pop    eax
c001100a:	5a                   	pop    edx
c001100b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100f:	53                   	push   ebx
c0011010:	e8 b3 fe ff ff       	call   c0010ec8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011015:	8b 07                	mov    eax,DWORD PTR [edi]
c0011017:	89 03                	mov    DWORD PTR [ebx],eax
c0011019:	c1 e0 03             	shl    eax,0x3
c001101c:	89 04 24             	mov    DWORD PTR [esp],eax
c001101f:	e8 af 6a ff ff       	call   c0007ad3 <malloc>
c0011024:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011027:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011029:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001102c:	89 c7                	mov    edi,eax
c001102e:	c1 e1 03             	shl    ecx,0x3
c0011031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	89 d8                	mov    eax,ebx
c0011038:	5b                   	pop    ebx
c0011039:	5e                   	pop    esi
c001103a:	5f                   	pop    edi
c001103b:	c3                   	ret    

c001103c <KeLoadSystemEnv()>:
c001103c:	53                   	push   ebx
c001103d:	83 ec 14             	sub    esp,0x14
c0011040:	6a 0c                	push   0xc
c0011042:	e8 8c 6a ff ff       	call   c0007ad3 <malloc>
c0011047:	89 c3                	mov    ebx,eax
c0011049:	58                   	pop    eax
c001104a:	5a                   	pop    edx
c001104b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011051:	53                   	push   ebx
c0011052:	e8 71 fe ff ff       	call   c0010ec8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011057:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001105a:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011060:	e8 47 fe ff ff       	call   c0010eac <EnvVarContainer::__loadSystem()>
c0011065:	83 c4 18             	add    esp,0x18
c0011068:	5b                   	pop    ebx
c0011069:	c3                   	ret    

c001106a <KeLoadUserEnv()>:
c001106a:	53                   	push   ebx
c001106b:	83 ec 14             	sub    esp,0x14
c001106e:	6a 0c                	push   0xc
c0011070:	e8 5e 6a ff ff       	call   c0007ad3 <malloc>
c0011075:	89 c3                	mov    ebx,eax
c0011077:	58                   	pop    eax
c0011078:	5a                   	pop    edx
c0011079:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001107f:	53                   	push   ebx
c0011080:	e8 43 fe ff ff       	call   c0010ec8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011085:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001108b:	83 c4 18             	add    esp,0x18
c001108e:	5b                   	pop    ebx
c001108f:	c3                   	ret    

c0011090 <KeFlushEnv()>:
c0011090:	c3                   	ret    

c0011091 <KeGetProcessTotalEnvCount(Process*)>:
c0011091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011095:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001109b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110a1:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00110a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00110a8:	03 01                	add    eax,DWORD PTR [ecx]
c00110aa:	85 d2                	test   edx,edx
c00110ac:	74 02                	je     c00110b0 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00110ae:	03 02                	add    eax,DWORD PTR [edx]
c00110b0:	c3                   	ret    

c00110b1 <KeGetProcessEnvPair(Process*, int)>:
c00110b1:	57                   	push   edi
c00110b2:	56                   	push   esi
c00110b3:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00110b9:	53                   	push   ebx
c00110ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110c2:	85 f6                	test   esi,esi
c00110c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00110c8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110d0:	75 16                	jne    c00110e8 <KeGetProcessEnvPair(Process*, int)+0x37>
c00110d2:	39 c2                	cmp    edx,eax
c00110d4:	7c 16                	jl     c00110ec <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110d6:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00110dc:	8b 31                	mov    esi,DWORD PTR [ecx]
c00110de:	01 c6                	add    esi,eax
c00110e0:	39 d6                	cmp    esi,edx
c00110e2:	7e 3c                	jle    c0011120 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110e4:	29 c2                	sub    edx,eax
c00110e6:	eb 04                	jmp    c00110ec <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110e8:	39 c2                	cmp    edx,eax
c00110ea:	7d 05                	jge    c00110f1 <KeGetProcessEnvPair(Process*, int)+0x40>
c00110ec:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00110ef:	eb 20                	jmp    c0011111 <KeGetProcessEnvPair(Process*, int)+0x60>
c00110f1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00110f3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00110f6:	39 d1                	cmp    ecx,edx
c00110f8:	7e 04                	jle    c00110fe <KeGetProcessEnvPair(Process*, int)+0x4d>
c00110fa:	29 c2                	sub    edx,eax
c00110fc:	eb 10                	jmp    c001110e <KeGetProcessEnvPair(Process*, int)+0x5d>
c00110fe:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c0011104:	03 0e                	add    ecx,DWORD PTR [esi]
c0011106:	39 d1                	cmp    ecx,edx
c0011108:	7e 16                	jle    c0011120 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001110a:	29 c2                	sub    edx,eax
c001110c:	29 fa                	sub    edx,edi
c001110e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011111:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011114:	8b 02                	mov    eax,DWORD PTR [edx]
c0011116:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011119:	89 03                	mov    DWORD PTR [ebx],eax
c001111b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001111e:	eb 1d                	jmp    c001113d <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011120:	83 ec 0c             	sub    esp,0xc
c0011123:	68 d2 1c 02 c0       	push   0xc0021cd2
c0011128:	e8 ac 00 00 00       	call   c00111d9 <KePanic(char const*)>
c001112d:	83 c4 10             	add    esp,0x10
c0011130:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011136:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001113d:	89 d8                	mov    eax,ebx
c001113f:	5b                   	pop    ebx
c0011140:	5e                   	pop    esi
c0011141:	5f                   	pop    edi
c0011142:	c2 04 00             	ret    0x4

c0011145 <CPU::current()>:
c0011145:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001114a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011150:	c3                   	ret    

c0011151 <operator new(unsigned long)>:
c0011151:	e9 7d 69 ff ff       	jmp    c0007ad3 <malloc>

c0011156 <operator delete(void*)>:
c0011156:	e9 98 69 ff ff       	jmp    c0007af3 <rfree>

c001115b <disableIRQs()>:
c001115b:	fa                   	cli    
c001115c:	c3                   	ret    

c001115d <enableIRQs()>:
c001115d:	fb                   	sti    
c001115e:	c3                   	ret    

c001115f <lockScheduler()>:
c001115f:	fa                   	cli    
c0011160:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011166:	c3                   	ret    

c0011167 <unlockScheduler()>:
c0011167:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001116c:	48                   	dec    eax
c001116d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011172:	75 01                	jne    c0011175 <unlockScheduler()+0xe>
c0011174:	fb                   	sti    
c0011175:	c3                   	ret    

c0011176 <lockStuff()>:
c0011176:	fa                   	cli    
c0011177:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001117d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011183:	c3                   	ret    

c0011184 <unlockStuff()>:
c0011184:	83 ec 0c             	sub    esp,0xc
c0011187:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001118c:	48                   	dec    eax
c001118d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011192:	75 18                	jne    c00111ac <unlockStuff()+0x28>
c0011194:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001119b:	74 0f                	je     c00111ac <unlockStuff()+0x28>
c001119d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00111a7:	e8 30 49 00 00       	call   c0015adc <schedule()>
c00111ac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111b1:	48                   	dec    eax
c00111b2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111b7:	75 01                	jne    c00111ba <unlockStuff()+0x36>
c00111b9:	fb                   	sti    
c00111ba:	83 c4 0c             	add    esp,0xc
c00111bd:	c3                   	ret    

c00111be <Virt::getAKernelVAS()>:
c00111be:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00111c3:	c3                   	ret    

c00111c4 <__not_memcpy>:
c00111c4:	57                   	push   edi
c00111c5:	56                   	push   esi
c00111c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111d2:	89 c7                	mov    edi,eax
c00111d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d6:	5e                   	pop    esi
c00111d7:	5f                   	pop    edi
c00111d8:	c3                   	ret    

c00111d9 <KePanic(char const*)>:
c00111d9:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00111e0:	e9 87 68 00 00       	jmp    c0017a6c <HalPanic(char const*)>

c00111e5 <KePowerThread(void*)>:
c00111e5:	83 ec 0c             	sub    esp,0xc
c00111e8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111ed:	48                   	dec    eax
c00111ee:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111f3:	75 01                	jne    c00111f6 <KePowerThread(void*)+0x11>
c00111f5:	fb                   	sti    
c00111f6:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00111fd:	83 ec 0c             	sub    esp,0xc
c0011200:	6a 0a                	push   0xa
c0011202:	e8 05 4c 00 00       	call   c0015e0c <sleep(unsigned int)>
c0011207:	83 c4 10             	add    esp,0x10
c001120a:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011211:	eb e3                	jmp    c00111f6 <KePowerThread(void*)+0x11>

c0011213 <KeChangePowerSettings(PowerSettings)>:
c0011213:	57                   	push   edi
c0011214:	b9 09 00 00 00       	mov    ecx,0x9
c0011219:	56                   	push   esi
c001121a:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c001121f:	fc                   	cld    
c0011220:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011224:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011226:	5e                   	pop    esi
c0011227:	5f                   	pop    edi
c0011228:	c3                   	ret    

c0011229 <KeUserIOReceived()>:
c0011229:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011233:	c3                   	ret    

c0011234 <KeHandlePowerButton()>:
c0011234:	83 ec 0c             	sub    esp,0xc
c0011237:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c001123c:	83 f8 02             	cmp    eax,0x2
c001123f:	75 10                	jne    c0011251 <KeHandlePowerButton()+0x1d>
c0011241:	83 ec 0c             	sub    esp,0xc
c0011244:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001124a:	e8 fb 5e ff ff       	call   c000714a <Computer::shutdown()>
c001124f:	eb 11                	jmp    c0011262 <KeHandlePowerButton()+0x2e>
c0011251:	48                   	dec    eax
c0011252:	75 11                	jne    c0011265 <KeHandlePowerButton()+0x31>
c0011254:	83 ec 0c             	sub    esp,0xc
c0011257:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001125d:	e8 18 5f ff ff       	call   c000717a <Computer::sleep()>
c0011262:	83 c4 10             	add    esp,0x10
c0011265:	83 c4 0c             	add    esp,0xc
c0011268:	c3                   	ret    

c0011269 <KeHandleSleepButton()>:
c0011269:	83 ec 0c             	sub    esp,0xc
c001126c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011271:	83 f8 02             	cmp    eax,0x2
c0011274:	75 10                	jne    c0011286 <KeHandleSleepButton()+0x1d>
c0011276:	83 ec 0c             	sub    esp,0xc
c0011279:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001127f:	e8 c6 5e ff ff       	call   c000714a <Computer::shutdown()>
c0011284:	eb 11                	jmp    c0011297 <KeHandleSleepButton()+0x2e>
c0011286:	48                   	dec    eax
c0011287:	75 11                	jne    c001129a <KeHandleSleepButton()+0x31>
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011292:	e8 e3 5e ff ff       	call   c000717a <Computer::sleep()>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	83 c4 0c             	add    esp,0xc
c001129d:	c3                   	ret    

c001129e <KeSetupPowerManager()>:
c001129e:	83 ec 0c             	sub    esp,0xc
c00112a1:	68 f0 00 00 00       	push   0xf0
c00112a6:	6a 00                	push   0x0
c00112a8:	68 e5 11 01 c0       	push   0xc00111e5
c00112ad:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00112b3:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112bd:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112c4:	e8 c7 45 00 00       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c00112c9:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00112d3:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00112dd:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00112e7:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00112f1:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00112fb:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c0011305:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c001130f:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011319:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c0011323:	83 c4 1c             	add    esp,0x1c
c0011326:	c3                   	ret    

c0011327 <KeRand()>:
c0011327:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011331:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c001133b:	53                   	push   ebx
c001133c:	01 c1                	add    ecx,eax
c001133e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011343:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011349:	01 ca                	add    edx,ecx
c001134b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011350:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011355:	83 d2 00             	adc    edx,0x0
c0011358:	0f b7 da             	movzx  ebx,dx
c001135b:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011361:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011365:	5b                   	pop    ebx
c0011366:	c3                   	ret    

c0011367 <KeSeedRand(unsigned int)>:
c0011367:	53                   	push   ebx
c0011368:	83 ec 08             	sub    esp,0x8
c001136b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001136f:	e8 17 6a 00 00       	call   c0017d8b <HalGetRand()>
c0011374:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c001137e:	31 d8                	xor    eax,ebx
c0011380:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011385:	e8 9d ff ff ff       	call   c0011327 <KeRand()>
c001138a:	83 c4 08             	add    esp,0x8
c001138d:	5b                   	pop    ebx
c001138e:	eb 97                	jmp    c0011327 <KeRand()>

c0011390 <KeInitRand()>:
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	e8 e8 67 00 00       	call   c0017b80 <HalQueryPerformanceCounter()>
c0011398:	0f 20 da             	mov    edx,cr3
c001139b:	0f 22 da             	mov    cr3,edx
c001139e:	0f 20 da             	mov    edx,cr3
c00113a1:	0f 22 da             	mov    cr3,edx
c00113a4:	0f 20 da             	mov    edx,cr3
c00113a7:	0f 22 da             	mov    cr3,edx
c00113aa:	0f 20 da             	mov    edx,cr3
c00113ad:	0f 22 da             	mov    cr3,edx
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00113b8:	50                   	push   eax
c00113b9:	e8 a9 ff ff ff       	call   c0011367 <KeSeedRand(unsigned int)>
c00113be:	83 c4 1c             	add    esp,0x1c
c00113c1:	c3                   	ret    
c00113c2:	66 90                	xchg   ax,ax

c00113c4 <KeResolveCompatibilitySymbol(char*)>:
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	83 ec 08             	sub    esp,0x8
c00113ca:	68 ec 1c 02 c0       	push   0xc0021cec
c00113cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d3:	e8 a8 f3 fe ff       	call   c0000780 <strcmp>
c00113d8:	83 c4 10             	add    esp,0x10
c00113db:	85 c0                	test   eax,eax
c00113dd:	0f 94 c0             	sete   al
c00113e0:	0f b6 c0             	movzx  eax,al
c00113e3:	85 c0                	test   eax,eax
c00113e5:	74 0d                	je     c00113f4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00113e7:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00113ec:	e9 8b 01 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00113f1:	8d 76 00             	lea    esi,[esi+0x0]
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 f5 1c 02 c0       	push   0xc0021cf5
c00113fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011400:	e8 7b f3 fe ff       	call   c0000780 <strcmp>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	85 c0                	test   eax,eax
c001140a:	0f 94 c0             	sete   al
c001140d:	0f b6 c0             	movzx  eax,al
c0011410:	85 c0                	test   eax,eax
c0011412:	74 0c                	je     c0011420 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011414:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0011419:	e9 5e 01 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001141e:	66 90                	xchg   ax,ax
c0011420:	83 ec 08             	sub    esp,0x8
c0011423:	68 ff 1c 02 c0       	push   0xc0021cff
c0011428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001142c:	e8 4f f3 fe ff       	call   c0000780 <strcmp>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	85 c0                	test   eax,eax
c0011436:	0f 94 c0             	sete   al
c0011439:	0f b6 c0             	movzx  eax,al
c001143c:	85 c0                	test   eax,eax
c001143e:	74 0c                	je     c001144c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011440:	b8 d4 ee 01 c0       	mov    eax,0xc001eed4
c0011445:	e9 32 01 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001144a:	66 90                	xchg   ax,ax
c001144c:	83 ec 08             	sub    esp,0x8
c001144f:	68 08 1d 02 c0       	push   0xc0021d08
c0011454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011458:	e8 23 f3 fe ff       	call   c0000780 <strcmp>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	85 c0                	test   eax,eax
c0011462:	0f 94 c0             	sete   al
c0011465:	0f b6 c0             	movzx  eax,al
c0011468:	85 c0                	test   eax,eax
c001146a:	74 0c                	je     c0011478 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001146c:	b8 d9 11 01 c0       	mov    eax,0xc00111d9
c0011471:	e9 06 01 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011476:	66 90                	xchg   ax,ax
c0011478:	83 ec 08             	sub    esp,0x8
c001147b:	68 1b 1d 02 c0       	push   0xc0021d1b
c0011480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011484:	e8 f7 f2 fe ff       	call   c0000780 <strcmp>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	85 c0                	test   eax,eax
c001148e:	0f 94 c0             	sete   al
c0011491:	0f b6 c0             	movzx  eax,al
c0011494:	85 c0                	test   eax,eax
c0011496:	74 0c                	je     c00114a4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011498:	b8 05 0b 01 c0       	mov    eax,0xc0010b05
c001149d:	e9 da 00 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114a2:	66 90                	xchg   ax,ax
c00114a4:	83 ec 08             	sub    esp,0x8
c00114a7:	68 38 1d 02 c0       	push   0xc0021d38
c00114ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b0:	e8 cb f2 fe ff       	call   c0000780 <strcmp>
c00114b5:	83 c4 10             	add    esp,0x10
c00114b8:	85 c0                	test   eax,eax
c00114ba:	0f 94 c0             	sete   al
c00114bd:	0f b6 c0             	movzx  eax,al
c00114c0:	85 c0                	test   eax,eax
c00114c2:	74 0c                	je     c00114d0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00114c4:	b8 a0 f2 01 c0       	mov    eax,0xc001f2a0
c00114c9:	e9 ae 00 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ce:	66 90                	xchg   ax,ax
c00114d0:	83 ec 08             	sub    esp,0x8
c00114d3:	68 42 1d 02 c0       	push   0xc0021d42
c00114d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114dc:	e8 9f f2 fe ff       	call   c0000780 <strcmp>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	85 c0                	test   eax,eax
c00114e6:	0f 94 c0             	sete   al
c00114e9:	0f b6 c0             	movzx  eax,al
c00114ec:	85 c0                	test   eax,eax
c00114ee:	74 0c                	je     c00114fc <KeResolveCompatibilitySymbol(char*)+0x138>
c00114f0:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00114f5:	e9 82 00 00 00       	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114fa:	66 90                	xchg   ax,ax
c00114fc:	83 ec 08             	sub    esp,0x8
c00114ff:	68 4b 1d 02 c0       	push   0xc0021d4b
c0011504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011508:	e8 73 f2 fe ff       	call   c0000780 <strcmp>
c001150d:	83 c4 10             	add    esp,0x10
c0011510:	85 c0                	test   eax,eax
c0011512:	0f 94 c0             	sete   al
c0011515:	0f b6 c0             	movzx  eax,al
c0011518:	85 c0                	test   eax,eax
c001151a:	74 08                	je     c0011524 <KeResolveCompatibilitySymbol(char*)+0x160>
c001151c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011521:	eb 59                	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011523:	90                   	nop
c0011524:	83 ec 08             	sub    esp,0x8
c0011527:	68 63 1d 02 c0       	push   0xc0021d63
c001152c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011530:	e8 4b f2 fe ff       	call   c0000780 <strcmp>
c0011535:	83 c4 10             	add    esp,0x10
c0011538:	85 c0                	test   eax,eax
c001153a:	0f 94 c0             	sete   al
c001153d:	0f b6 c0             	movzx  eax,al
c0011540:	85 c0                	test   eax,eax
c0011542:	74 08                	je     c001154c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011544:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011549:	eb 31                	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001154b:	90                   	nop
c001154c:	83 ec 08             	sub    esp,0x8
c001154f:	68 70 1d 02 c0       	push   0xc0021d70
c0011554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011558:	e8 23 f2 fe ff       	call   c0000780 <strcmp>
c001155d:	83 c4 10             	add    esp,0x10
c0011560:	85 c0                	test   eax,eax
c0011562:	0f 94 c0             	sete   al
c0011565:	0f b6 c0             	movzx  eax,al
c0011568:	85 c0                	test   eax,eax
c001156a:	74 08                	je     c0011574 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001156c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011571:	eb 09                	jmp    c001157c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011573:	90                   	nop
c0011574:	b8 00 00 00 00       	mov    eax,0x0
c0011579:	8d 76 00             	lea    esi,[esi+0x0]
c001157c:	83 c4 0c             	add    esp,0xc
c001157f:	c3                   	ret    

c0011580 <KiSigKill(int)>:
c0011580:	83 ec 0c             	sub    esp,0xc
c0011583:	6a 00                	push   0x0
c0011585:	6a 00                	push   0x0
c0011587:	6a ff                	push   0xffffffff
c0011589:	6a 01                	push   0x1
c001158b:	e8 c2 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011590:	83 c4 1c             	add    esp,0x1c
c0011593:	c3                   	ret    

c0011594 <KiDefaultSignalHandlerIgnore(int)>:
c0011594:	c3                   	ret    

c0011595 <KiDefaultSignalHandlerPause(int)>:
c0011595:	57                   	push   edi
c0011596:	b9 07 00 00 00       	mov    ecx,0x7
c001159b:	56                   	push   esi
c001159c:	be b9 1d 02 c0       	mov    esi,0xc0021db9
c00115a1:	83 ec 24             	sub    esp,0x24
c00115a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00115a8:	fc                   	cld    
c00115a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115ab:	8d 44 24 04          	lea    eax,[esp+0x4]
c00115af:	50                   	push   eax
c00115b0:	6a 00                	push   0x0
c00115b2:	6a 00                	push   0x0
c00115b4:	6a 27                	push   0x27
c00115b6:	e8 97 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115bb:	83 c4 34             	add    esp,0x34
c00115be:	5e                   	pop    esi
c00115bf:	5f                   	pop    edi
c00115c0:	c3                   	ret    

c00115c1 <KiDefaultSignalHandlerResume(int)>:
c00115c1:	57                   	push   edi
c00115c2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00115c7:	56                   	push   esi
c00115c8:	be d5 1d 02 c0       	mov    esi,0xc0021dd5
c00115cd:	83 ec 24             	sub    esp,0x24
c00115d0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00115d4:	fc                   	cld    
c00115d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115d7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00115db:	50                   	push   eax
c00115dc:	6a 00                	push   0x0
c00115de:	6a 00                	push   0x0
c00115e0:	6a 27                	push   0x27
c00115e2:	e8 6b 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115e7:	83 c4 34             	add    esp,0x34
c00115ea:	5e                   	pop    esi
c00115eb:	5f                   	pop    edi
c00115ec:	c3                   	ret    

c00115ed <KeDeinitSignals(SigHandlerBlock*)>:
c00115ed:	e9 f1 64 ff ff       	jmp    c0007ae3 <free>

c00115f2 <KeInitSignals()>:
c00115f2:	53                   	push   ebx
c00115f3:	83 ec 14             	sub    esp,0x14
c00115f6:	68 c8 00 00 00       	push   0xc8
c00115fb:	e8 d3 64 ff ff       	call   c0007ad3 <malloc>
c0011600:	83 c4 0c             	add    esp,0xc
c0011603:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001160d:	89 c3                	mov    ebx,eax
c001160f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011619:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001161f:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011623:	6a 20                	push   0x20
c0011625:	6a 00                	push   0x0
c0011627:	50                   	push   eax
c0011628:	e8 c3 ee fe ff       	call   c00004f0 <memset>
c001162d:	83 c4 0c             	add    esp,0xc
c0011630:	6a 44                	push   0x44
c0011632:	6a 00                	push   0x0
c0011634:	53                   	push   ebx
c0011635:	e8 b6 ee fe ff       	call   c00004f0 <memset>
c001163a:	83 c4 18             	add    esp,0x18
c001163d:	89 d8                	mov    eax,ebx
c001163f:	5b                   	pop    ebx
c0011640:	c3                   	ret    

c0011641 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011641:	53                   	push   ebx
c0011642:	b8 01 00 00 00       	mov    eax,0x1
c0011647:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001164b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001164f:	83 f9 10             	cmp    ecx,0x10
c0011652:	7f 21                	jg     c0011675 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011658:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001165b:	89 03                	mov    DWORD PTR [ebx],eax
c001165d:	b8 01 00 00 00       	mov    eax,0x1
c0011662:	d3 e0                	shl    eax,cl
c0011664:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011668:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001166b:	31 c0                	xor    eax,eax
c001166d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011675:	5b                   	pop    ebx
c0011676:	c3                   	ret    

c0011677 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011677:	55                   	push   ebp
c0011678:	57                   	push   edi
c0011679:	bf 08 00 00 00       	mov    edi,0x8
c001167e:	56                   	push   esi
c001167f:	53                   	push   ebx
c0011680:	83 ec 18             	sub    esp,0x18
c0011683:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011687:	68 f2 1d 02 c0       	push   0xc0021df2
c001168c:	e8 79 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011691:	83 c4 10             	add    esp,0x10
c0011694:	31 c9                	xor    ecx,ecx
c0011696:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001169d:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00116a3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00116a7:	99                   	cdq    
c00116a8:	f7 ff                	idiv   edi
c00116aa:	8d 42 24             	lea    eax,[edx+0x24]
c00116ad:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00116b1:	85 f6                	test   esi,esi
c00116b3:	75 1a                	jne    c00116cf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00116b5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116b9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00116bd:	50                   	push   eax
c00116be:	50                   	push   eax
c00116bf:	52                   	push   edx
c00116c0:	68 03 1e 02 c0       	push   0xc0021e03
c00116c5:	e8 40 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	eb 1b                	jmp    c00116ea <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00116cf:	41                   	inc    ecx
c00116d0:	83 f9 08             	cmp    ecx,0x8
c00116d3:	75 ce                	jne    c00116a3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00116d5:	83 ec 0c             	sub    esp,0xc
c00116d8:	be 01 00 00 00       	mov    esi,0x1
c00116dd:	68 24 1e 02 c0       	push   0xc0021e24
c00116e2:	e8 23 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	83 c4 0c             	add    esp,0xc
c00116ed:	89 f0                	mov    eax,esi
c00116ef:	5b                   	pop    ebx
c00116f0:	5e                   	pop    esi
c00116f1:	5f                   	pop    edi
c00116f2:	5d                   	pop    ebp
c00116f3:	c3                   	ret    

c00116f4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00116f4:	55                   	push   ebp
c00116f5:	57                   	push   edi
c00116f6:	56                   	push   esi
c00116f7:	53                   	push   ebx
c00116f8:	51                   	push   ecx
c00116f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00116fd:	85 db                	test   ebx,ebx
c00116ff:	0f 84 bc 00 00 00    	je     c00117c1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011705:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001170c:	0f 84 af 00 00 00    	je     c00117c1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011712:	31 c9                	xor    ecx,ecx
c0011714:	bf 08 00 00 00       	mov    edi,0x8
c0011719:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001171f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011722:	99                   	cdq    
c0011723:	f7 ff                	idiv   edi
c0011725:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001172c:	85 ed                	test   ebp,ebp
c001172e:	0f 84 9e 00 00 00    	je     c00117d2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011734:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001173a:	89 e9                	mov    ecx,ebp
c001173c:	bf 01 00 00 00       	mov    edi,0x1
c0011741:	d3 e7                	shl    edi,cl
c0011743:	31 c9                	xor    ecx,ecx
c0011745:	89 04 24             	mov    DWORD PTR [esp],eax
c0011748:	b8 01 00 00 00       	mov    eax,0x1
c001174d:	d3 e0                	shl    eax,cl
c001174f:	85 04 24             	test   DWORD PTR [esp],eax
c0011752:	74 06                	je     c001175a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011754:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011758:	75 67                	jne    c00117c1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001175a:	41                   	inc    ecx
c001175b:	83 f9 11             	cmp    ecx,0x11
c001175e:	75 e8                	jne    c0011748 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011760:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011763:	46                   	inc    esi
c0011764:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001176a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011775:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001177c:	09 f8                	or     eax,edi
c001177e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011784:	31 c0                	xor    eax,eax
c0011786:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001178e:	74 09                	je     c0011799 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011790:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011797:	eb 06                	jmp    c001179f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011799:	40                   	inc    eax
c001179a:	83 f8 08             	cmp    eax,0x8
c001179d:	75 e7                	jne    c0011786 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001179f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117a3:	83 fd 09             	cmp    ebp,0x9
c00117a6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00117a9:	89 2a                	mov    DWORD PTR [edx],ebp
c00117ab:	75 07                	jne    c00117b4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00117ad:	b8 80 15 01 c0       	mov    eax,0xc0011580
c00117b2:	eb 31                	jmp    c00117e5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117b4:	83 f8 01             	cmp    eax,0x1
c00117b7:	75 0c                	jne    c00117c5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00117b9:	f7 d7                	not    edi
c00117bb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00117c1:	31 c0                	xor    eax,eax
c00117c3:	eb 20                	jmp    c00117e5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117c5:	85 c0                	test   eax,eax
c00117c7:	75 1c                	jne    c00117e5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117c9:	8b 04 ad 20 32 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcde0]
c00117d0:	eb 13                	jmp    c00117e5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117d2:	41                   	inc    ecx
c00117d3:	46                   	inc    esi
c00117d4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117da:	83 f9 08             	cmp    ecx,0x8
c00117dd:	0f 85 36 ff ff ff    	jne    c0011719 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00117e3:	eb dc                	jmp    c00117c1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117e5:	5a                   	pop    edx
c00117e6:	5b                   	pop    ebx
c00117e7:	5e                   	pop    esi
c00117e8:	5f                   	pop    edi
c00117e9:	5d                   	pop    ebp
c00117ea:	c3                   	ret    

c00117eb <KiCheckSignalZ>:
c00117eb:	83 ec 10             	sub    esp,0x10
c00117ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117f2:	50                   	push   eax
c00117f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117fb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011801:	e8 ee fe ff ff       	call   c00116f4 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011806:	5a                   	pop    edx
c0011807:	31 d2                	xor    edx,edx
c0011809:	59                   	pop    ecx
c001180a:	85 c0                	test   eax,eax
c001180c:	74 19                	je     c0011827 <KiCheckSignalZ+0x3c>
c001180e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011814:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011817:	89 02                	mov    DWORD PTR [edx],eax
c0011819:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011824:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011827:	89 d0                	mov    eax,edx
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	c3                   	ret    

c001182d <KeCompleteSignal(SigHandlerBlock*, int)>:
c001182d:	56                   	push   esi
c001182e:	53                   	push   ebx
c001182f:	bb 01 00 00 00       	mov    ebx,0x1
c0011834:	52                   	push   edx
c0011835:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011839:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001183d:	d3 e3                	shl    ebx,cl
c001183f:	83 f9 10             	cmp    ecx,0x10
c0011842:	7f 08                	jg     c001184c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011844:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001184a:	75 10                	jne    c001185c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	68 35 1e 02 c0       	push   0xc0021e35
c0011854:	e8 80 f9 ff ff       	call   c00111d9 <KePanic(char const*)>
c0011859:	83 c4 10             	add    esp,0x10
c001185c:	f7 d3                	not    ebx
c001185e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011864:	58                   	pop    eax
c0011865:	5b                   	pop    ebx
c0011866:	5e                   	pop    esi
c0011867:	c3                   	ret    

c0011868 <KiFinishSignalZ>:
c0011868:	53                   	push   ebx
c0011869:	83 ec 10             	sub    esp,0x10
c001186c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011870:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011873:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011878:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001187b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011881:	e8 a7 ff ff ff       	call   c001182d <KeCompleteSignal(SigHandlerBlock*, int)>
c0011886:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001188c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011893:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001189a:	83 c4 18             	add    esp,0x18
c001189d:	5b                   	pop    ebx
c001189e:	c3                   	ret    

c001189f <SysSeekDir(regs*)>:
c001189f:	31 c0                	xor    eax,eax
c00118a1:	31 d2                	xor    edx,edx
c00118a3:	c3                   	ret    

c00118a4 <SysTellDir(regs*)>:
c00118a4:	31 c0                	xor    eax,eax
c00118a6:	31 d2                	xor    edx,edx
c00118a8:	c3                   	ret    

c00118a9 <SysVerify(regs*)>:
c00118a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ad:	31 d2                	xor    edx,edx
c00118af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118b2:	c3                   	ret    

c00118b3 <SysGetArgc(regs*)>:
c00118b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118bb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00118c1:	89 c2                	mov    edx,eax
c00118c3:	c1 fa 1f             	sar    edx,0x1f
c00118c6:	c3                   	ret    

c00118c7 <SysTTYName(regs*)>:
c00118c7:	b8 01 00 00 00       	mov    eax,0x1
c00118cc:	31 d2                	xor    edx,edx
c00118ce:	c3                   	ret    

c00118cf <SysFormatDisk(regs*)>:
c00118cf:	56                   	push   esi
c00118d0:	53                   	push   ebx
c00118d1:	83 ec 04             	sub    esp,0x4
c00118d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118d8:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00118de:	eb 2a                	jmp    c001190a <SysFormatDisk(regs*)+0x3b>
c00118e0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00118e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00118eb:	51                   	push   ecx
c00118ec:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00118ef:	51                   	push   ecx
c00118f0:	50                   	push   eax
c00118f1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00118f8:	50                   	push   eax
c00118f9:	53                   	push   ebx
c00118fa:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00118fd:	83 c4 20             	add    esp,0x20
c0011900:	83 f8 08             	cmp    eax,0x8
c0011903:	89 c1                	mov    ecx,eax
c0011905:	75 14                	jne    c001191b <SysFormatDisk(regs*)+0x4c>
c0011907:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001190a:	85 db                	test   ebx,ebx
c001190c:	75 d2                	jne    c00118e0 <SysFormatDisk(regs*)+0x11>
c001190e:	b8 03 00 00 00       	mov    eax,0x3
c0011913:	31 d2                	xor    edx,edx
c0011915:	83 c4 04             	add    esp,0x4
c0011918:	5b                   	pop    ebx
c0011919:	5e                   	pop    esi
c001191a:	c3                   	ret    
c001191b:	85 c0                	test   eax,eax
c001191d:	74 13                	je     c0011932 <SysFormatDisk(regs*)+0x63>
c001191f:	31 d2                	xor    edx,edx
c0011921:	83 f9 09             	cmp    ecx,0x9
c0011924:	b8 01 00 00 00       	mov    eax,0x1
c0011929:	74 ea                	je     c0011915 <SysFormatDisk(regs*)+0x46>
c001192b:	b8 02 00 00 00       	mov    eax,0x2
c0011930:	eb e1                	jmp    c0011913 <SysFormatDisk(regs*)+0x44>
c0011932:	31 c0                	xor    eax,eax
c0011934:	eb dd                	jmp    c0011913 <SysFormatDisk(regs*)+0x44>

c0011936 <SysSetDiskVolumeLabel(regs*)>:
c0011936:	56                   	push   esi
c0011937:	53                   	push   ebx
c0011938:	83 ec 04             	sub    esp,0x4
c001193b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001193f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011942:	83 f8 19             	cmp    eax,0x19
c0011945:	77 33                	ja     c001197a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011947:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001194e:	85 c9                	test   ecx,ecx
c0011950:	74 28                	je     c001197a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011952:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011955:	85 db                	test   ebx,ebx
c0011957:	74 21                	je     c001197a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011959:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001195f:	85 d2                	test   edx,edx
c0011961:	74 17                	je     c001197a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011963:	8b 32                	mov    esi,DWORD PTR [edx]
c0011965:	53                   	push   ebx
c0011966:	50                   	push   eax
c0011967:	51                   	push   ecx
c0011968:	52                   	push   edx
c0011969:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001196c:	83 c4 10             	add    esp,0x10
c001196f:	83 c4 04             	add    esp,0x4
c0011972:	5b                   	pop    ebx
c0011973:	5e                   	pop    esi
c0011974:	89 c2                	mov    edx,eax
c0011976:	c1 fa 1f             	sar    edx,0x1f
c0011979:	c3                   	ret    
c001197a:	83 c4 04             	add    esp,0x4
c001197d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011982:	5b                   	pop    ebx
c0011983:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011988:	5e                   	pop    esi
c0011989:	c3                   	ret    

c001198a <SysGetDiskVolumeLabel(regs*)>:
c001198a:	57                   	push   edi
c001198b:	56                   	push   esi
c001198c:	53                   	push   ebx
c001198d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011991:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011994:	83 fa 19             	cmp    edx,0x19
c0011997:	77 3c                	ja     c00119d5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011999:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c00119a0:	85 c9                	test   ecx,ecx
c00119a2:	74 31                	je     c00119d5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00119a7:	85 db                	test   ebx,ebx
c00119a9:	74 2a                	je     c00119d5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119ab:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00119ae:	85 f6                	test   esi,esi
c00119b0:	74 23                	je     c00119d5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119b2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00119b8:	85 c0                	test   eax,eax
c00119ba:	74 19                	je     c00119d5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	8b 38                	mov    edi,DWORD PTR [eax]
c00119c1:	56                   	push   esi
c00119c2:	53                   	push   ebx
c00119c3:	52                   	push   edx
c00119c4:	51                   	push   ecx
c00119c5:	50                   	push   eax
c00119c6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00119c9:	83 c4 20             	add    esp,0x20
c00119cc:	5b                   	pop    ebx
c00119cd:	5e                   	pop    esi
c00119ce:	89 c2                	mov    edx,eax
c00119d0:	c1 fa 1f             	sar    edx,0x1f
c00119d3:	5f                   	pop    edi
c00119d4:	c3                   	ret    
c00119d5:	5b                   	pop    ebx
c00119d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119e0:	5e                   	pop    esi
c00119e1:	5f                   	pop    edi
c00119e2:	c3                   	ret    

c00119e3 <SysShutdown(regs*)>:
c00119e3:	57                   	push   edi
c00119e4:	56                   	push   esi
c00119e5:	83 ec 04             	sub    esp,0x4
c00119e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119ef:	85 c0                	test   eax,eax
c00119f1:	74 1e                	je     c0011a11 <SysShutdown(regs*)+0x2e>
c00119f3:	83 f8 01             	cmp    eax,0x1
c00119f6:	74 5f                	je     c0011a57 <SysShutdown(regs*)+0x74>
c00119f8:	83 f8 02             	cmp    eax,0x2
c00119fb:	be ff ff ff ff       	mov    esi,0xffffffff
c0011a00:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011a05:	74 32                	je     c0011a39 <SysShutdown(regs*)+0x56>
c0011a07:	83 c4 04             	add    esp,0x4
c0011a0a:	89 f0                	mov    eax,esi
c0011a0c:	5e                   	pop    esi
c0011a0d:	89 fa                	mov    edx,edi
c0011a0f:	5f                   	pop    edi
c0011a10:	c3                   	ret    
c0011a11:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a16:	be ff ff ff ff       	mov    esi,0xffffffff
c0011a1b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011a20:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a22:	6a 00                	push   0x0
c0011a24:	6a 00                	push   0x0
c0011a26:	6a 00                	push   0x0
c0011a28:	50                   	push   eax
c0011a29:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	89 f0                	mov    eax,esi
c0011a31:	83 c4 04             	add    esp,0x4
c0011a34:	89 fa                	mov    edx,edi
c0011a36:	5e                   	pop    esi
c0011a37:	5f                   	pop    edi
c0011a38:	c3                   	ret    
c0011a39:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a40:	6a 00                	push   0x0
c0011a42:	6a 00                	push   0x0
c0011a44:	6a 01                	push   0x1
c0011a46:	50                   	push   eax
c0011a47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	89 f0                	mov    eax,esi
c0011a4f:	83 c4 04             	add    esp,0x4
c0011a52:	89 fa                	mov    edx,edi
c0011a54:	5e                   	pop    esi
c0011a55:	5f                   	pop    edi
c0011a56:	c3                   	ret    
c0011a57:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011a5c:	85 c0                	test   eax,eax
c0011a5e:	74 02                	je     c0011a62 <SysShutdown(regs*)+0x7f>
c0011a60:	ff d0                	call   eax
c0011a62:	31 f6                	xor    esi,esi
c0011a64:	83 c4 04             	add    esp,0x4
c0011a67:	89 f0                	mov    eax,esi
c0011a69:	31 ff                	xor    edi,edi
c0011a6b:	5e                   	pop    esi
c0011a6c:	89 fa                	mov    edx,edi
c0011a6e:	5f                   	pop    edi
c0011a6f:	c3                   	ret    

c0011a70 <SysRealpath(regs*)>:
c0011a70:	53                   	push   ebx
c0011a71:	83 ec 08             	sub    esp,0x8
c0011a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011a7b:	85 c9                	test   ecx,ecx
c0011a7d:	74 37                	je     c0011ab6 <SysRealpath(regs*)+0x46>
c0011a7f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a82:	31 d2                	xor    edx,edx
c0011a84:	b8 01 00 00 00       	mov    eax,0x1
c0011a89:	85 db                	test   ebx,ebx
c0011a8b:	75 05                	jne    c0011a92 <SysRealpath(regs*)+0x22>
c0011a8d:	83 c4 08             	add    esp,0x8
c0011a90:	5b                   	pop    ebx
c0011a91:	c3                   	ret    
c0011a92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a97:	83 ec 04             	sub    esp,0x4
c0011a9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9d:	05 0c 01 00 00       	add    eax,0x10c
c0011aa2:	50                   	push   eax
c0011aa3:	51                   	push   ecx
c0011aa4:	53                   	push   ebx
c0011aa5:	e8 a8 9a ff ff       	call   c000b552 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011aaa:	83 c4 10             	add    esp,0x10
c0011aad:	31 c0                	xor    eax,eax
c0011aaf:	31 d2                	xor    edx,edx
c0011ab1:	83 c4 08             	add    esp,0x8
c0011ab4:	5b                   	pop    ebx
c0011ab5:	c3                   	ret    
c0011ab6:	b8 01 00 00 00       	mov    eax,0x1
c0011abb:	31 d2                	xor    edx,edx
c0011abd:	eb f2                	jmp    c0011ab1 <SysRealpath(regs*)+0x41>

c0011abf <SysReadDir(regs*)>:
c0011abf:	53                   	push   ebx
c0011ac0:	83 ec 18             	sub    esp,0x18
c0011ac3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ac7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011aca:	83 f8 02             	cmp    eax,0x2
c0011acd:	76 4f                	jbe    c0011b1e <SysReadDir(regs*)+0x5f>
c0011acf:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ad6:	77 52                	ja     c0011b2a <SysReadDir(regs*)+0x6b>
c0011ad8:	83 ec 0c             	sub    esp,0xc
c0011adb:	50                   	push   eax
c0011adc:	e8 ba 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	85 c0                	test   eax,eax
c0011ae6:	74 42                	je     c0011b2a <SysReadDir(regs*)+0x6b>
c0011ae8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011af7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011af9:	51                   	push   ecx
c0011afa:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011afd:	51                   	push   ecx
c0011afe:	6a 00                	push   0x0
c0011b00:	68 10 01 00 00       	push   0x110
c0011b05:	50                   	push   eax
c0011b06:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b09:	83 c4 20             	add    esp,0x20
c0011b0c:	85 c0                	test   eax,eax
c0011b0e:	89 c1                	mov    ecx,eax
c0011b10:	74 27                	je     c0011b39 <SysReadDir(regs*)+0x7a>
c0011b12:	31 d2                	xor    edx,edx
c0011b14:	83 f9 07             	cmp    ecx,0x7
c0011b17:	b8 02 00 00 00       	mov    eax,0x2
c0011b1c:	75 16                	jne    c0011b34 <SysReadDir(regs*)+0x75>
c0011b1e:	b8 01 00 00 00       	mov    eax,0x1
c0011b23:	31 d2                	xor    edx,edx
c0011b25:	83 c4 18             	add    esp,0x18
c0011b28:	5b                   	pop    ebx
c0011b29:	c3                   	ret    
c0011b2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b34:	83 c4 18             	add    esp,0x18
c0011b37:	5b                   	pop    ebx
c0011b38:	c3                   	ret    
c0011b39:	31 c0                	xor    eax,eax
c0011b3b:	31 d2                	xor    edx,edx
c0011b3d:	eb e6                	jmp    c0011b25 <SysReadDir(regs*)+0x66>

c0011b3f <SysIsATTY(regs*)>:
c0011b3f:	83 ec 0c             	sub    esp,0xc
c0011b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b49:	83 f8 02             	cmp    eax,0x2
c0011b4c:	76 07                	jbe    c0011b55 <SysIsATTY(regs*)+0x16>
c0011b4e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b53:	75 26                	jne    c0011b7b <SysIsATTY(regs*)+0x3c>
c0011b55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b63:	85 c0                	test   eax,eax
c0011b65:	74 24                	je     c0011b8b <SysIsATTY(regs*)+0x4c>
c0011b67:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b69:	83 ec 0c             	sub    esp,0xc
c0011b6c:	50                   	push   eax
c0011b6d:	ff 12                	call   DWORD PTR [edx]
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	31 d2                	xor    edx,edx
c0011b74:	83 c4 0c             	add    esp,0xc
c0011b77:	0f b6 c0             	movzx  eax,al
c0011b7a:	c3                   	ret    
c0011b7b:	83 ec 0c             	sub    esp,0xc
c0011b7e:	50                   	push   eax
c0011b7f:	e8 17 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b84:	83 c4 10             	add    esp,0x10
c0011b87:	85 c0                	test   eax,eax
c0011b89:	75 dc                	jne    c0011b67 <SysIsATTY(regs*)+0x28>
c0011b8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b95:	83 c4 0c             	add    esp,0xc
c0011b98:	c3                   	ret    

c0011b99 <SysSeek(regs*)>:
c0011b99:	56                   	push   esi
c0011b9a:	53                   	push   ebx
c0011b9b:	83 ec 04             	sub    esp,0x4
c0011b9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ba2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ba5:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011ba8:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011bae:	77 33                	ja     c0011be3 <SysSeek(regs*)+0x4a>
c0011bb0:	83 ec 0c             	sub    esp,0xc
c0011bb3:	51                   	push   ecx
c0011bb4:	e8 e2 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bb9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011bbc:	83 c4 0c             	add    esp,0xc
c0011bbf:	31 db                	xor    ebx,ebx
c0011bc1:	53                   	push   ebx
c0011bc2:	51                   	push   ecx
c0011bc3:	50                   	push   eax
c0011bc4:	e8 df 9c ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0011bc9:	83 c4 10             	add    esp,0x10
c0011bcc:	85 c0                	test   eax,eax
c0011bce:	0f 95 c0             	setne  al
c0011bd1:	31 d2                	xor    edx,edx
c0011bd3:	0f b6 c0             	movzx  eax,al
c0011bd6:	f7 d8                	neg    eax
c0011bd8:	83 d2 00             	adc    edx,0x0
c0011bdb:	83 c4 04             	add    esp,0x4
c0011bde:	5b                   	pop    ebx
c0011bdf:	f7 da                	neg    edx
c0011be1:	5e                   	pop    esi
c0011be2:	c3                   	ret    
c0011be3:	83 c4 04             	add    esp,0x4
c0011be6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011beb:	5b                   	pop    ebx
c0011bec:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bf1:	5e                   	pop    esi
c0011bf2:	c3                   	ret    

c0011bf3 <SysTell(regs*)>:
c0011bf3:	53                   	push   ebx
c0011bf4:	83 ec 08             	sub    esp,0x8
c0011bf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bfb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bfe:	83 f8 02             	cmp    eax,0x2
c0011c01:	76 4e                	jbe    c0011c51 <SysTell(regs*)+0x5e>
c0011c03:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c08:	76 19                	jbe    c0011c23 <SysTell(regs*)+0x30>
c0011c0a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c0d:	31 d2                	xor    edx,edx
c0011c0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c1c:	83 c4 08             	add    esp,0x8
c0011c1f:	31 c0                	xor    eax,eax
c0011c21:	5b                   	pop    ebx
c0011c22:	c3                   	ret    
c0011c23:	83 ec 0c             	sub    esp,0xc
c0011c26:	50                   	push   eax
c0011c27:	e8 6f 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c2c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c2f:	5a                   	pop    edx
c0011c30:	59                   	pop    ecx
c0011c31:	53                   	push   ebx
c0011c32:	50                   	push   eax
c0011c33:	e8 1c 9d ff ff       	call   c000b954 <File::tell(unsigned long long*)>
c0011c38:	83 c4 10             	add    esp,0x10
c0011c3b:	85 c0                	test   eax,eax
c0011c3d:	0f 95 c0             	setne  al
c0011c40:	31 d2                	xor    edx,edx
c0011c42:	0f b6 c0             	movzx  eax,al
c0011c45:	f7 d8                	neg    eax
c0011c47:	83 d2 00             	adc    edx,0x0
c0011c4a:	83 c4 08             	add    esp,0x8
c0011c4d:	5b                   	pop    ebx
c0011c4e:	f7 da                	neg    edx
c0011c50:	c3                   	ret    
c0011c51:	83 c4 08             	add    esp,0x8
c0011c54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c59:	5b                   	pop    ebx
c0011c5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c5f:	c3                   	ret    

c0011c60 <SysSize(regs*)>:
c0011c60:	53                   	push   ebx
c0011c61:	83 ec 18             	sub    esp,0x18
c0011c64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c6b:	83 f8 02             	cmp    eax,0x2
c0011c6e:	76 54                	jbe    c0011cc4 <SysSize(regs*)+0x64>
c0011c70:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c75:	76 19                	jbe    c0011c90 <SysSize(regs*)+0x30>
c0011c77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c7a:	31 d2                	xor    edx,edx
c0011c7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c89:	83 c4 18             	add    esp,0x18
c0011c8c:	31 c0                	xor    eax,eax
c0011c8e:	5b                   	pop    ebx
c0011c8f:	c3                   	ret    
c0011c90:	83 ec 0c             	sub    esp,0xc
c0011c93:	50                   	push   eax
c0011c94:	e8 02 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c99:	83 c4 0c             	add    esp,0xc
c0011c9c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011ca0:	52                   	push   edx
c0011ca1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ca4:	52                   	push   edx
c0011ca5:	50                   	push   eax
c0011ca6:	e8 41 9e ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c0011cab:	83 c4 10             	add    esp,0x10
c0011cae:	85 c0                	test   eax,eax
c0011cb0:	0f 95 c0             	setne  al
c0011cb3:	31 d2                	xor    edx,edx
c0011cb5:	0f b6 c0             	movzx  eax,al
c0011cb8:	f7 d8                	neg    eax
c0011cba:	83 d2 00             	adc    edx,0x0
c0011cbd:	83 c4 18             	add    esp,0x18
c0011cc0:	5b                   	pop    ebx
c0011cc1:	f7 da                	neg    edx
c0011cc3:	c3                   	ret    
c0011cc4:	83 c4 18             	add    esp,0x18
c0011cc7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ccc:	5b                   	pop    ebx
c0011ccd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cd2:	c3                   	ret    

c0011cd3 <SysSizeFromFilename(regs*)>:
c0011cd3:	57                   	push   edi
c0011cd4:	56                   	push   esi
c0011cd5:	53                   	push   ebx
c0011cd6:	83 ec 10             	sub    esp,0x10
c0011cd9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011cdd:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011ce0:	83 fb 02             	cmp    ebx,0x2
c0011ce3:	0f 86 83 00 00 00    	jbe    c0011d6c <SysSizeFromFilename(regs*)+0x99>
c0011ce9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011cef:	76 1b                	jbe    c0011d0c <SysSizeFromFilename(regs*)+0x39>
c0011cf1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cf4:	31 d2                	xor    edx,edx
c0011cf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	31 c0                	xor    eax,eax
c0011d08:	5b                   	pop    ebx
c0011d09:	5e                   	pop    esi
c0011d0a:	5f                   	pop    edi
c0011d0b:	c3                   	ret    
c0011d0c:	83 ec 0c             	sub    esp,0xc
c0011d0f:	68 14 01 00 00       	push   0x114
c0011d14:	e8 ba 5d ff ff       	call   c0007ad3 <malloc>
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	89 c7                	mov    edi,eax
c0011d1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d26:	50                   	push   eax
c0011d27:	53                   	push   ebx
c0011d28:	57                   	push   edi
c0011d29:	e8 00 9a ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0011d2e:	83 c4 0c             	add    esp,0xc
c0011d31:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011d35:	50                   	push   eax
c0011d36:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d39:	52                   	push   edx
c0011d3a:	57                   	push   edi
c0011d3b:	e8 ac 9d ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c0011d40:	83 c4 10             	add    esp,0x10
c0011d43:	85 ff                	test   edi,edi
c0011d45:	89 c3                	mov    ebx,eax
c0011d47:	74 0c                	je     c0011d55 <SysSizeFromFilename(regs*)+0x82>
c0011d49:	8b 07                	mov    eax,DWORD PTR [edi]
c0011d4b:	83 ec 0c             	sub    esp,0xc
c0011d4e:	57                   	push   edi
c0011d4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	31 c0                	xor    eax,eax
c0011d57:	85 db                	test   ebx,ebx
c0011d59:	0f 95 c0             	setne  al
c0011d5c:	31 d2                	xor    edx,edx
c0011d5e:	f7 d8                	neg    eax
c0011d60:	83 d2 00             	adc    edx,0x0
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	5b                   	pop    ebx
c0011d67:	f7 da                	neg    edx
c0011d69:	5e                   	pop    esi
c0011d6a:	5f                   	pop    edi
c0011d6b:	c3                   	ret    
c0011d6c:	83 c4 10             	add    esp,0x10
c0011d6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d74:	5b                   	pop    ebx
c0011d75:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d7a:	5e                   	pop    esi
c0011d7b:	5f                   	pop    edi
c0011d7c:	c3                   	ret    

c0011d7d <SysClose(regs*)>:
c0011d7d:	53                   	push   ebx
c0011d7e:	83 ec 08             	sub    esp,0x8
c0011d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d85:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d88:	83 f8 02             	cmp    eax,0x2
c0011d8b:	76 41                	jbe    c0011dce <SysClose(regs*)+0x51>
c0011d8d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d93:	83 fa 01             	cmp    edx,0x1
c0011d96:	76 2d                	jbe    c0011dc5 <SysClose(regs*)+0x48>
c0011d98:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d9d:	77 2f                	ja     c0011dce <SysClose(regs*)+0x51>
c0011d9f:	83 ec 0c             	sub    esp,0xc
c0011da2:	50                   	push   eax
c0011da3:	e8 f3 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011da8:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dab:	89 c3                	mov    ebx,eax
c0011dad:	e8 96 9a ff ff       	call   c000b848 <File::close()>
c0011db2:	83 c4 10             	add    esp,0x10
c0011db5:	85 db                	test   ebx,ebx
c0011db7:	74 0c                	je     c0011dc5 <SysClose(regs*)+0x48>
c0011db9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dbb:	83 ec 0c             	sub    esp,0xc
c0011dbe:	53                   	push   ebx
c0011dbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dc2:	83 c4 10             	add    esp,0x10
c0011dc5:	83 c4 08             	add    esp,0x8
c0011dc8:	31 c0                	xor    eax,eax
c0011dca:	5b                   	pop    ebx
c0011dcb:	31 d2                	xor    edx,edx
c0011dcd:	c3                   	ret    
c0011dce:	83 c4 08             	add    esp,0x8
c0011dd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dd6:	5b                   	pop    ebx
c0011dd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ddc:	c3                   	ret    

c0011ddd <SysOpenDir(regs*)>:
c0011ddd:	56                   	push   esi
c0011dde:	53                   	push   ebx
c0011ddf:	83 ec 04             	sub    esp,0x4
c0011de2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011de6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011de9:	85 c9                	test   ecx,ecx
c0011deb:	74 5d                	je     c0011e4a <SysOpenDir(regs*)+0x6d>
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	68 14 01 00 00       	push   0x114
c0011df5:	e8 d9 5c ff ff       	call   c0007ad3 <malloc>
c0011dfa:	83 c4 0c             	add    esp,0xc
c0011dfd:	89 c6                	mov    esi,eax
c0011dff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e07:	50                   	push   eax
c0011e08:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e0b:	52                   	push   edx
c0011e0c:	56                   	push   esi
c0011e0d:	e8 98 9e ff ff       	call   c000bcaa <Directory::Directory(char const*, Process*)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	85 f6                	test   esi,esi
c0011e17:	74 31                	je     c0011e4a <SysOpenDir(regs*)+0x6d>
c0011e19:	83 ec 0c             	sub    esp,0xc
c0011e1c:	56                   	push   esi
c0011e1d:	e8 44 9f ff ff       	call   c000bd66 <Directory::open()>
c0011e22:	83 c4 10             	add    esp,0x10
c0011e25:	85 c0                	test   eax,eax
c0011e27:	75 21                	jne    c0011e4a <SysOpenDir(regs*)+0x6d>
c0011e29:	83 ec 0c             	sub    esp,0xc
c0011e2c:	56                   	push   esi
c0011e2d:	e8 6c 73 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011e32:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	89 02                	mov    DWORD PTR [edx],eax
c0011e3a:	c1 f8 1f             	sar    eax,0x1f
c0011e3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e40:	83 c4 04             	add    esp,0x4
c0011e43:	31 c0                	xor    eax,eax
c0011e45:	5b                   	pop    ebx
c0011e46:	31 d2                	xor    edx,edx
c0011e48:	5e                   	pop    esi
c0011e49:	c3                   	ret    
c0011e4a:	83 c4 04             	add    esp,0x4
c0011e4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e52:	5b                   	pop    ebx
c0011e53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e58:	5e                   	pop    esi
c0011e59:	c3                   	ret    

c0011e5a <SysMakeDir(regs*)>:
c0011e5a:	56                   	push   esi
c0011e5b:	53                   	push   ebx
c0011e5c:	83 ec 10             	sub    esp,0x10
c0011e5f:	68 14 01 00 00       	push   0x114
c0011e64:	e8 6a 5c ff ff       	call   c0007ad3 <malloc>
c0011e69:	83 c4 0c             	add    esp,0xc
c0011e6c:	89 c3                	mov    ebx,eax
c0011e6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e76:	50                   	push   eax
c0011e77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e7b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e7e:	52                   	push   edx
c0011e7f:	53                   	push   ebx
c0011e80:	e8 25 9e ff ff       	call   c000bcaa <Directory::Directory(char const*, Process*)>
c0011e85:	83 c4 10             	add    esp,0x10
c0011e88:	85 db                	test   ebx,ebx
c0011e8a:	74 2c                	je     c0011eb8 <SysMakeDir(regs*)+0x5e>
c0011e8c:	83 ec 0c             	sub    esp,0xc
c0011e8f:	53                   	push   ebx
c0011e90:	e8 b1 a0 ff ff       	call   c000bf46 <Directory::create()>
c0011e95:	89 c6                	mov    esi,eax
c0011e97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e9f:	83 c4 10             	add    esp,0x10
c0011ea2:	31 c0                	xor    eax,eax
c0011ea4:	85 f6                	test   esi,esi
c0011ea6:	0f 95 c0             	setne  al
c0011ea9:	31 d2                	xor    edx,edx
c0011eab:	f7 d8                	neg    eax
c0011ead:	83 d2 00             	adc    edx,0x0
c0011eb0:	83 c4 04             	add    esp,0x4
c0011eb3:	5b                   	pop    ebx
c0011eb4:	f7 da                	neg    edx
c0011eb6:	5e                   	pop    esi
c0011eb7:	c3                   	ret    
c0011eb8:	83 c4 04             	add    esp,0x4
c0011ebb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec0:	5b                   	pop    ebx
c0011ec1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec6:	5e                   	pop    esi
c0011ec7:	c3                   	ret    

c0011ec8 <SysCloseDir(regs*)>:
c0011ec8:	53                   	push   ebx
c0011ec9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ece:	83 ec 08             	sub    esp,0x8
c0011ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011ed8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011edd:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011ee0:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011ee6:	77 2a                	ja     c0011f12 <SysCloseDir(regs*)+0x4a>
c0011ee8:	83 ec 0c             	sub    esp,0xc
c0011eeb:	51                   	push   ecx
c0011eec:	e8 aa 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ef1:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ef4:	89 c3                	mov    ebx,eax
c0011ef6:	e8 c7 9e ff ff       	call   c000bdc2 <Directory::close()>
c0011efb:	83 c4 10             	add    esp,0x10
c0011efe:	85 db                	test   ebx,ebx
c0011f00:	74 0c                	je     c0011f0e <SysCloseDir(regs*)+0x46>
c0011f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f04:	83 ec 0c             	sub    esp,0xc
c0011f07:	53                   	push   ebx
c0011f08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	31 c0                	xor    eax,eax
c0011f10:	31 d2                	xor    edx,edx
c0011f12:	83 c4 08             	add    esp,0x8
c0011f15:	5b                   	pop    ebx
c0011f16:	c3                   	ret    

c0011f17 <SysWait(regs*)>:
c0011f17:	83 ec 10             	sub    esp,0x10
c0011f1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f1e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f21:	52                   	push   edx
c0011f22:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f25:	51                   	push   ecx
c0011f26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f29:	50                   	push   eax
c0011f2a:	e8 e5 3d 00 00       	call   c0015d14 <waitTask(int, int*, int)>
c0011f2f:	83 c4 1c             	add    esp,0x1c
c0011f32:	89 c2                	mov    edx,eax
c0011f34:	c1 fa 1f             	sar    edx,0x1f
c0011f37:	c3                   	ret    

c0011f38 <SysNotImpl(regs*)>:
c0011f38:	83 ec 18             	sub    esp,0x18
c0011f3b:	68 46 1e 02 c0       	push   0xc0021e46
c0011f40:	e8 94 f2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0011f45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f4f:	83 c4 1c             	add    esp,0x1c
c0011f52:	c3                   	ret    

c0011f53 <SysPanic(regs*)>:
c0011f53:	83 ec 18             	sub    esp,0x18
c0011f56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f5a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f5d:	50                   	push   eax
c0011f5e:	e8 76 f2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0011f63:	b8 01 00 00 00       	mov    eax,0x1
c0011f68:	31 d2                	xor    edx,edx
c0011f6a:	83 c4 1c             	add    esp,0x1c
c0011f6d:	c3                   	ret    

c0011f6e <SysRmdir(regs*)>:
c0011f6e:	56                   	push   esi
c0011f6f:	53                   	push   ebx
c0011f70:	83 ec 10             	sub    esp,0x10
c0011f73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f77:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f7a:	68 14 01 00 00       	push   0x114
c0011f7f:	e8 4f 5b ff ff       	call   c0007ad3 <malloc>
c0011f84:	83 c4 0c             	add    esp,0xc
c0011f87:	89 c3                	mov    ebx,eax
c0011f89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f91:	50                   	push   eax
c0011f92:	56                   	push   esi
c0011f93:	53                   	push   ebx
c0011f94:	e8 95 97 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0011f99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f9c:	e8 17 9a ff ff       	call   c000b9b8 <File::unlink()>
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	85 db                	test   ebx,ebx
c0011fa6:	89 c6                	mov    esi,eax
c0011fa8:	74 0c                	je     c0011fb6 <SysRmdir(regs*)+0x48>
c0011faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fac:	83 ec 0c             	sub    esp,0xc
c0011faf:	53                   	push   ebx
c0011fb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	31 c0                	xor    eax,eax
c0011fb8:	85 f6                	test   esi,esi
c0011fba:	0f 95 c0             	setne  al
c0011fbd:	31 d2                	xor    edx,edx
c0011fbf:	f7 d8                	neg    eax
c0011fc1:	83 d2 00             	adc    edx,0x0
c0011fc4:	83 c4 04             	add    esp,0x4
c0011fc7:	5b                   	pop    ebx
c0011fc8:	f7 da                	neg    edx
c0011fca:	5e                   	pop    esi
c0011fcb:	c3                   	ret    

c0011fcc <SysUnlink(regs*)>:
c0011fcc:	56                   	push   esi
c0011fcd:	53                   	push   ebx
c0011fce:	83 ec 10             	sub    esp,0x10
c0011fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fd5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fd8:	68 14 01 00 00       	push   0x114
c0011fdd:	e8 f1 5a ff ff       	call   c0007ad3 <malloc>
c0011fe2:	83 c4 0c             	add    esp,0xc
c0011fe5:	89 c3                	mov    ebx,eax
c0011fe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fef:	50                   	push   eax
c0011ff0:	56                   	push   esi
c0011ff1:	53                   	push   ebx
c0011ff2:	e8 37 97 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0011ff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ffa:	e8 b9 99 ff ff       	call   c000b9b8 <File::unlink()>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	85 db                	test   ebx,ebx
c0012004:	89 c6                	mov    esi,eax
c0012006:	74 0c                	je     c0012014 <SysUnlink(regs*)+0x48>
c0012008:	8b 03                	mov    eax,DWORD PTR [ebx]
c001200a:	83 ec 0c             	sub    esp,0xc
c001200d:	53                   	push   ebx
c001200e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	31 c0                	xor    eax,eax
c0012016:	85 f6                	test   esi,esi
c0012018:	0f 95 c0             	setne  al
c001201b:	31 d2                	xor    edx,edx
c001201d:	f7 d8                	neg    eax
c001201f:	83 d2 00             	adc    edx,0x0
c0012022:	83 c4 04             	add    esp,0x4
c0012025:	5b                   	pop    ebx
c0012026:	f7 da                	neg    edx
c0012028:	5e                   	pop    esi
c0012029:	c3                   	ret    

c001202a <SysGetArgv(regs*)>:
c001202a:	83 ec 0c             	sub    esp,0xc
c001202d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012031:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012034:	85 c0                	test   eax,eax
c0012036:	78 2c                	js     c0012064 <SysGetArgv(regs*)+0x3a>
c0012038:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001203e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012041:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012047:	7d 1b                	jge    c0012064 <SysGetArgv(regs*)+0x3a>
c0012049:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012050:	85 c0                	test   eax,eax
c0012052:	74 18                	je     c001206c <SysGetArgv(regs*)+0x42>
c0012054:	83 ec 08             	sub    esp,0x8
c0012057:	50                   	push   eax
c0012058:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001205b:	50                   	push   eax
c001205c:	e8 ef e5 fe ff       	call   c0000650 <strcpy>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	31 c0                	xor    eax,eax
c0012066:	31 d2                	xor    edx,edx
c0012068:	83 c4 0c             	add    esp,0xc
c001206b:	c3                   	ret    
c001206c:	b8 01 00 00 00       	mov    eax,0x1
c0012071:	31 d2                	xor    edx,edx
c0012073:	83 c4 0c             	add    esp,0xc
c0012076:	c3                   	ret    

c0012077 <SysUSleep(regs*)>:
c0012077:	83 ec 1c             	sub    esp,0x1c
c001207a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001207e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012081:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012084:	6a 00                	push   0x0
c0012086:	6a 64                	push   0x64
c0012088:	52                   	push   edx
c0012089:	50                   	push   eax
c001208a:	e8 11 d1 00 00       	call   c001f1a0 <__udivdi3>
c001208f:	83 c4 14             	add    esp,0x14
c0012092:	50                   	push   eax
c0012093:	e8 60 3d 00 00       	call   c0015df8 <milliTenthSleep(unsigned int)>
c0012098:	31 c0                	xor    eax,eax
c001209a:	31 d2                	xor    edx,edx
c001209c:	83 c4 1c             	add    esp,0x1c
c001209f:	c3                   	ret    

c00120a0 <SysSpawn(regs*)>:
c00120a0:	56                   	push   esi
c00120a1:	53                   	push   ebx
c00120a2:	83 ec 04             	sub    esp,0x4
c00120a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120a9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120ac:	85 f6                	test   esi,esi
c00120ae:	75 0a                	jne    c00120ba <SysSpawn(regs*)+0x1a>
c00120b0:	83 c4 04             	add    esp,0x4
c00120b3:	31 c0                	xor    eax,eax
c00120b5:	5b                   	pop    ebx
c00120b6:	31 d2                	xor    edx,edx
c00120b8:	5e                   	pop    esi
c00120b9:	c3                   	ret    
c00120ba:	83 ec 0c             	sub    esp,0xc
c00120bd:	68 24 07 00 00       	push   0x724
c00120c2:	e8 0c 5a ff ff       	call   c0007ad3 <malloc>
c00120c7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120d0:	89 c6                	mov    esi,eax
c00120d2:	31 c0                	xor    eax,eax
c00120d4:	85 c9                	test   ecx,ecx
c00120d6:	75 08                	jne    c00120e0 <SysSpawn(regs*)+0x40>
c00120d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120e0:	52                   	push   edx
c00120e1:	50                   	push   eax
c00120e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120e5:	50                   	push   eax
c00120e6:	56                   	push   esi
c00120e7:	e8 74 33 00 00       	call   c0015460 <Process::Process(char const*, Process*, char**)>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00120f6:	75 b8                	jne    c00120b0 <SysSpawn(regs*)+0x10>
c00120f8:	83 ec 0c             	sub    esp,0xc
c00120fb:	56                   	push   esi
c00120fc:	e8 97 38 00 00       	call   c0015998 <Process::createUserThread()>
c0012101:	8b 06                	mov    eax,DWORD PTR [esi]
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	83 c4 04             	add    esp,0x4
c0012109:	5b                   	pop    ebx
c001210a:	89 c2                	mov    edx,eax
c001210c:	c1 fa 1f             	sar    edx,0x1f
c001210f:	5e                   	pop    esi
c0012110:	c3                   	ret    

c0012111 <SysGetEnv(regs*)>:
c0012111:	57                   	push   edi
c0012112:	56                   	push   esi
c0012113:	53                   	push   ebx
c0012114:	83 ec 1c             	sub    esp,0x1c
c0012117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001211c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012120:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012123:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012126:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012129:	51                   	push   ecx
c001212a:	e8 62 ef ff ff       	call   c0011091 <KeGetProcessTotalEnvCount(Process*)>
c001212f:	83 c4 10             	add    esp,0x10
c0012132:	39 c7                	cmp    edi,eax
c0012134:	7c 12                	jl     c0012148 <SysGetEnv(regs*)+0x37>
c0012136:	31 c0                	xor    eax,eax
c0012138:	31 d2                	xor    edx,edx
c001213a:	85 f6                	test   esi,esi
c001213c:	74 03                	je     c0012141 <SysGetEnv(regs*)+0x30>
c001213e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	5b                   	pop    ebx
c0012145:	5e                   	pop    esi
c0012146:	5f                   	pop    edi
c0012147:	c3                   	ret    
c0012148:	8d 44 24 08          	lea    eax,[esp+0x8]
c001214c:	83 ec 04             	sub    esp,0x4
c001214f:	57                   	push   edi
c0012150:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012156:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012159:	57                   	push   edi
c001215a:	50                   	push   eax
c001215b:	e8 51 ef ff ff       	call   c00110b1 <KeGetProcessEnvPair(Process*, int)>
c0012160:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012167:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001216b:	83 c4 0c             	add    esp,0xc
c001216e:	85 d2                	test   edx,edx
c0012170:	75 23                	jne    c0012195 <SysGetEnv(regs*)+0x84>
c0012172:	83 ec 0c             	sub    esp,0xc
c0012175:	50                   	push   eax
c0012176:	e8 05 e4 fe ff       	call   c0000580 <strlen>
c001217b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001217e:	89 c3                	mov    ebx,eax
c0012180:	e8 fb e3 fe ff       	call   c0000580 <strlen>
c0012185:	83 c4 10             	add    esp,0x10
c0012188:	31 d2                	xor    edx,edx
c001218a:	83 c4 10             	add    esp,0x10
c001218d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012191:	5b                   	pop    ebx
c0012192:	5e                   	pop    esi
c0012193:	5f                   	pop    edi
c0012194:	c3                   	ret    
c0012195:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012198:	83 ec 08             	sub    esp,0x8
c001219b:	50                   	push   eax
c001219c:	56                   	push   esi
c001219d:	e8 ae e4 fe ff       	call   c0000650 <strcpy>
c00121a2:	58                   	pop    eax
c00121a3:	5a                   	pop    edx
c00121a4:	68 60 1e 02 c0       	push   0xc0021e60
c00121a9:	56                   	push   esi
c00121aa:	e8 c1 e6 fe ff       	call   c0000870 <strcat>
c00121af:	59                   	pop    ecx
c00121b0:	5b                   	pop    ebx
c00121b1:	57                   	push   edi
c00121b2:	56                   	push   esi
c00121b3:	e8 b8 e6 fe ff       	call   c0000870 <strcat>
c00121b8:	83 c4 10             	add    esp,0x10
c00121bb:	31 c0                	xor    eax,eax
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	31 d2                	xor    edx,edx
c00121c2:	5b                   	pop    ebx
c00121c3:	5e                   	pop    esi
c00121c4:	5f                   	pop    edi
c00121c5:	c3                   	ret    

c00121c6 <SysSetFatAttrib(regs*)>:
c00121c6:	57                   	push   edi
c00121c7:	56                   	push   esi
c00121c8:	53                   	push   ebx
c00121c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00121cd:	83 ec 0c             	sub    esp,0xc
c00121d0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00121d3:	68 14 01 00 00       	push   0x114
c00121d8:	e8 f6 58 ff ff       	call   c0007ad3 <malloc>
c00121dd:	83 c4 0c             	add    esp,0xc
c00121e0:	89 c3                	mov    ebx,eax
c00121e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ea:	50                   	push   eax
c00121eb:	57                   	push   edi
c00121ec:	53                   	push   ebx
c00121ed:	e8 3c 95 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c00121f2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00121f5:	83 c4 0c             	add    esp,0xc
c00121f8:	0f b6 d4             	movzx  edx,ah
c00121fb:	0f b6 c0             	movzx  eax,al
c00121fe:	52                   	push   edx
c00121ff:	50                   	push   eax
c0012200:	53                   	push   ebx
c0012201:	e8 4c 98 ff ff       	call   c000ba52 <File::chfatattr(unsigned char, unsigned char)>
c0012206:	83 c4 10             	add    esp,0x10
c0012209:	85 db                	test   ebx,ebx
c001220b:	89 c6                	mov    esi,eax
c001220d:	74 0c                	je     c001221b <SysSetFatAttrib(regs*)+0x55>
c001220f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012211:	83 ec 0c             	sub    esp,0xc
c0012214:	53                   	push   ebx
c0012215:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012218:	83 c4 10             	add    esp,0x10
c001221b:	5b                   	pop    ebx
c001221c:	31 c0                	xor    eax,eax
c001221e:	85 f6                	test   esi,esi
c0012220:	0f 95 c0             	setne  al
c0012223:	31 d2                	xor    edx,edx
c0012225:	5e                   	pop    esi
c0012226:	f7 d8                	neg    eax
c0012228:	83 d2 00             	adc    edx,0x0
c001222b:	f7 da                	neg    edx
c001222d:	5f                   	pop    edi
c001222e:	c3                   	ret    

c001222f <SysPipe(regs*)>:
c001222f:	57                   	push   edi
c0012230:	56                   	push   esi
c0012231:	53                   	push   ebx
c0012232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012236:	83 ec 0c             	sub    esp,0xc
c0012239:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001223c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001223f:	6a 20                	push   0x20
c0012241:	e8 8d 58 ff ff       	call   c0007ad3 <malloc>
c0012246:	89 c3                	mov    ebx,eax
c0012248:	58                   	pop    eax
c0012249:	5a                   	pop    edx
c001224a:	68 00 50 00 00       	push   0x5000
c001224f:	53                   	push   ebx
c0012250:	e8 e9 61 ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012255:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012258:	e8 41 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001225d:	89 07                	mov    DWORD PTR [edi],eax
c001225f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012262:	e8 37 6f ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012267:	83 c4 10             	add    esp,0x10
c001226a:	31 d2                	xor    edx,edx
c001226c:	89 06                	mov    DWORD PTR [esi],eax
c001226e:	31 c0                	xor    eax,eax
c0012270:	5b                   	pop    ebx
c0012271:	5e                   	pop    esi
c0012272:	5f                   	pop    edi
c0012273:	c3                   	ret    

c0012274 <SysGetUnixTime(regs*)>:
c0012274:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012279:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001227f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012283:	e9 02 9f ff ff       	jmp    c000c18a <Clock::timeInSecondsLocal()>

c0012288 <string_ends_with(char const*, char const*)>:
c0012288:	57                   	push   edi
c0012289:	56                   	push   esi
c001228a:	53                   	push   ebx
c001228b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012296:	53                   	push   ebx
c0012297:	e8 e4 e2 fe ff       	call   c0000580 <strlen>
c001229c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001229f:	89 c6                	mov    esi,eax
c00122a1:	e8 da e2 fe ff       	call   c0000580 <strlen>
c00122a6:	83 c4 10             	add    esp,0x10
c00122a9:	31 d2                	xor    edx,edx
c00122ab:	39 c6                	cmp    esi,eax
c00122ad:	7d 06                	jge    c00122b5 <string_ends_with(char const*, char const*)+0x2d>
c00122af:	5b                   	pop    ebx
c00122b0:	89 d0                	mov    eax,edx
c00122b2:	5e                   	pop    esi
c00122b3:	5f                   	pop    edi
c00122b4:	c3                   	ret    
c00122b5:	83 ec 08             	sub    esp,0x8
c00122b8:	29 c6                	sub    esi,eax
c00122ba:	57                   	push   edi
c00122bb:	01 f3                	add    ebx,esi
c00122bd:	53                   	push   ebx
c00122be:	e8 bd e4 fe ff       	call   c0000780 <strcmp>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	31 d2                	xor    edx,edx
c00122c8:	5b                   	pop    ebx
c00122c9:	5e                   	pop    esi
c00122ca:	85 c0                	test   eax,eax
c00122cc:	5f                   	pop    edi
c00122cd:	0f 94 c2             	sete   dl
c00122d0:	89 d0                	mov    eax,edx
c00122d2:	c3                   	ret    

c00122d3 <SysOpen(regs*)>:
c00122d3:	56                   	push   esi
c00122d4:	53                   	push   ebx
c00122d5:	81 ec 04 01 00 00    	sub    esp,0x104
c00122db:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00122e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122e5:	85 c0                	test   eax,eax
c00122e7:	0f 84 c5 01 00 00    	je     c00124b2 <SysOpen(regs*)+0x1df>
c00122ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122f0:	85 c0                	test   eax,eax
c00122f2:	0f 84 ba 01 00 00    	je     c00124b2 <SysOpen(regs*)+0x1df>
c00122f8:	83 ec 04             	sub    esp,0x4
c00122fb:	68 62 1e 02 c0       	push   0xc0021e62
c0012300:	50                   	push   eax
c0012301:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012305:	56                   	push   esi
c0012306:	e8 47 92 ff ff       	call   c000b552 <Fs::standardiseFiles(char*, char const*, char const*)>
c001230b:	89 34 24             	mov    DWORD PTR [esp],esi
c001230e:	e8 6d e2 fe ff       	call   c0000580 <strlen>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	83 e8 01             	sub    eax,0x1
c0012319:	74 29                	je     c0012344 <SysOpen(regs*)+0x71>
c001231b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001231f:	83 fa 2e             	cmp    edx,0x2e
c0012322:	74 1c                	je     c0012340 <SysOpen(regs*)+0x6d>
c0012324:	83 fa 3a             	cmp    edx,0x3a
c0012327:	74 17                	je     c0012340 <SysOpen(regs*)+0x6d>
c0012329:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001232d:	83 e8 01             	sub    eax,0x1
c0012330:	74 12                	je     c0012344 <SysOpen(regs*)+0x71>
c0012332:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012336:	83 fa 3a             	cmp    edx,0x3a
c0012339:	74 05                	je     c0012340 <SysOpen(regs*)+0x6d>
c001233b:	83 fa 2e             	cmp    edx,0x2e
c001233e:	75 e9                	jne    c0012329 <SysOpen(regs*)+0x56>
c0012340:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012344:	83 ec 08             	sub    esp,0x8
c0012347:	68 66 1e 02 c0       	push   0xc0021e66
c001234c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001234f:	50                   	push   eax
c0012350:	e8 33 ff ff ff       	call   c0012288 <string_ends_with(char const*, char const*)>
c0012355:	83 c4 10             	add    esp,0x10
c0012358:	85 c0                	test   eax,eax
c001235a:	74 1d                	je     c0012379 <SysOpen(regs*)+0xa6>
c001235c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001235f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012365:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001236c:	81 c4 04 01 00 00    	add    esp,0x104
c0012372:	31 c0                	xor    eax,eax
c0012374:	5b                   	pop    ebx
c0012375:	31 d2                	xor    edx,edx
c0012377:	5e                   	pop    esi
c0012378:	c3                   	ret    
c0012379:	83 ec 08             	sub    esp,0x8
c001237c:	68 6b 1e 02 c0       	push   0xc0021e6b
c0012381:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012384:	50                   	push   eax
c0012385:	e8 fe fe ff ff       	call   c0012288 <string_ends_with(char const*, char const*)>
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	85 c0                	test   eax,eax
c001238f:	75 cb                	jne    c001235c <SysOpen(regs*)+0x89>
c0012391:	83 ec 08             	sub    esp,0x8
c0012394:	68 67 1e 02 c0       	push   0xc0021e67
c0012399:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001239c:	50                   	push   eax
c001239d:	e8 de e3 fe ff       	call   c0000780 <strcmp>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	85 c0                	test   eax,eax
c00123a7:	74 b3                	je     c001235c <SysOpen(regs*)+0x89>
c00123a9:	83 ec 08             	sub    esp,0x8
c00123ac:	68 66 1e 02 c0       	push   0xc0021e66
c00123b1:	56                   	push   esi
c00123b2:	e8 d1 fe ff ff       	call   c0012288 <string_ends_with(char const*, char const*)>
c00123b7:	83 c4 10             	add    esp,0x10
c00123ba:	85 c0                	test   eax,eax
c00123bc:	75 9e                	jne    c001235c <SysOpen(regs*)+0x89>
c00123be:	83 ec 08             	sub    esp,0x8
c00123c1:	68 70 1e 02 c0       	push   0xc0021e70
c00123c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123c9:	50                   	push   eax
c00123ca:	e8 b9 fe ff ff       	call   c0012288 <string_ends_with(char const*, char const*)>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	85 c0                	test   eax,eax
c00123d4:	0f 85 eb 00 00 00    	jne    c00124c5 <SysOpen(regs*)+0x1f2>
c00123da:	83 ec 08             	sub    esp,0x8
c00123dd:	68 75 1e 02 c0       	push   0xc0021e75
c00123e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123e5:	50                   	push   eax
c00123e6:	e8 9d fe ff ff       	call   c0012288 <string_ends_with(char const*, char const*)>
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	85 c0                	test   eax,eax
c00123f0:	0f 85 cf 00 00 00    	jne    c00124c5 <SysOpen(regs*)+0x1f2>
c00123f6:	83 ec 08             	sub    esp,0x8
c00123f9:	68 71 1e 02 c0       	push   0xc0021e71
c00123fe:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012401:	51                   	push   ecx
c0012402:	e8 79 e3 fe ff       	call   c0000780 <strcmp>
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	85 c0                	test   eax,eax
c001240c:	0f 84 b3 00 00 00    	je     c00124c5 <SysOpen(regs*)+0x1f2>
c0012412:	83 ec 08             	sub    esp,0x8
c0012415:	68 70 1e 02 c0       	push   0xc0021e70
c001241a:	56                   	push   esi
c001241b:	e8 68 fe ff ff       	call   c0012288 <string_ends_with(char const*, char const*)>
c0012420:	83 c4 10             	add    esp,0x10
c0012423:	85 c0                	test   eax,eax
c0012425:	0f 85 9a 00 00 00    	jne    c00124c5 <SysOpen(regs*)+0x1f2>
c001242b:	83 ec 0c             	sub    esp,0xc
c001242e:	68 14 01 00 00       	push   0x114
c0012433:	e8 9b 56 ff ff       	call   c0007ad3 <malloc>
c0012438:	83 c4 0c             	add    esp,0xc
c001243b:	89 c6                	mov    esi,eax
c001243d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012442:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012445:	50                   	push   eax
c0012446:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012449:	52                   	push   edx
c001244a:	56                   	push   esi
c001244b:	e8 de 92 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0012450:	83 c4 10             	add    esp,0x10
c0012453:	85 f6                	test   esi,esi
c0012455:	74 5b                	je     c00124b2 <SysOpen(regs*)+0x1df>
c0012457:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001245a:	0f b6 c2             	movzx  eax,dl
c001245d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012460:	89 d0                	mov    eax,edx
c0012462:	83 e0 01             	and    eax,0x1
c0012465:	f6 c2 02             	test   dl,0x2
c0012468:	74 03                	je     c001246d <SysOpen(regs*)+0x19a>
c001246a:	83 c8 02             	or     eax,0x2
c001246d:	f6 c2 04             	test   dl,0x4
c0012470:	74 03                	je     c0012475 <SysOpen(regs*)+0x1a2>
c0012472:	83 c8 04             	or     eax,0x4
c0012475:	f6 c2 08             	test   dl,0x8
c0012478:	74 03                	je     c001247d <SysOpen(regs*)+0x1aa>
c001247a:	83 c8 0a             	or     eax,0xa
c001247d:	80 e2 10             	and    dl,0x10
c0012480:	74 03                	je     c0012485 <SysOpen(regs*)+0x1b2>
c0012482:	83 c8 12             	or     eax,0x12
c0012485:	83 ec 08             	sub    esp,0x8
c0012488:	50                   	push   eax
c0012489:	56                   	push   esi
c001248a:	e8 5b 93 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	85 c0                	test   eax,eax
c0012494:	75 1c                	jne    c00124b2 <SysOpen(regs*)+0x1df>
c0012496:	83 ec 0c             	sub    esp,0xc
c0012499:	56                   	push   esi
c001249a:	e8 ff 6c ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001249f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124a2:	83 c4 10             	add    esp,0x10
c00124a5:	89 02                	mov    DWORD PTR [edx],eax
c00124a7:	c1 f8 1f             	sar    eax,0x1f
c00124aa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124ad:	e9 ba fe ff ff       	jmp    c001236c <SysOpen(regs*)+0x99>
c00124b2:	81 c4 04 01 00 00    	add    esp,0x104
c00124b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124bd:	5b                   	pop    ebx
c00124be:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124c3:	5e                   	pop    esi
c00124c4:	c3                   	ret    
c00124c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124c8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00124ce:	e9 92 fe ff ff       	jmp    c0012365 <SysOpen(regs*)+0x92>

c00124d3 <KeSystemCall(regs*, void*)>:
c00124d3:	53                   	push   ebx
c00124d4:	83 ec 08             	sub    esp,0x8
c00124d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124db:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00124de:	83 f8 3b             	cmp    eax,0x3b
c00124e1:	77 16                	ja     c00124f9 <KeSystemCall(regs*, void*)+0x26>
c00124e3:	8b 14 85 80 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd80]
c00124ea:	85 d2                	test   edx,edx
c00124ec:	74 0b                	je     c00124f9 <KeSystemCall(regs*, void*)+0x26>
c00124ee:	83 ec 0c             	sub    esp,0xc
c00124f1:	53                   	push   ebx
c00124f2:	ff d2                	call   edx
c00124f4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00124f7:	eb 0d                	jmp    c0012506 <KeSystemCall(regs*, void*)+0x33>
c00124f9:	52                   	push   edx
c00124fa:	52                   	push   edx
c00124fb:	50                   	push   eax
c00124fc:	68 7a 1e 02 c0       	push   0xc0021e7a
c0012501:	e8 04 84 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001250e:	83 c4 08             	add    esp,0x8
c0012511:	31 d2                	xor    edx,edx
c0012513:	5b                   	pop    ebx
c0012514:	c3                   	ret    
c0012515:	66 90                	xchg   ax,ax
c0012517:	90                   	nop

c0012518 <KeSwitchEndian16(unsigned short)>:
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001251f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012523:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012527:	c1 f8 08             	sar    eax,0x8
c001252a:	89 c2                	mov    edx,eax
c001252c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012530:	c1 e0 08             	shl    eax,0x8
c0012533:	09 d0                	or     eax,edx
c0012535:	83 c4 04             	add    esp,0x4
c0012538:	c3                   	ret    
c0012539:	8d 76 00             	lea    esi,[esi+0x0]

c001253c <KeSwitchEndian32(unsigned int)>:
c001253c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012540:	c1 e8 18             	shr    eax,0x18
c0012543:	89 c2                	mov    edx,eax
c0012545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012549:	c1 e0 08             	shl    eax,0x8
c001254c:	25 00 00 ff 00       	and    eax,0xff0000
c0012551:	09 c2                	or     edx,eax
c0012553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012557:	c1 e8 08             	shr    eax,0x8
c001255a:	25 00 ff 00 00       	and    eax,0xff00
c001255f:	09 c2                	or     edx,eax
c0012561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012565:	c1 e0 18             	shl    eax,0x18
c0012568:	09 d0                	or     eax,edx
c001256a:	c3                   	ret    
c001256b:	90                   	nop

c001256c <EthernetCRC32(unsigned char*, int)>:
c001256c:	83 ec 10             	sub    esp,0x10
c001256f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012574:	75 0a                	jne    c0012580 <EthernetCRC32(unsigned char*, int)+0x14>
c0012576:	b8 00 00 00 00       	mov    eax,0x0
c001257b:	e9 8c 00 00 00       	jmp    c001260c <EthernetCRC32(unsigned char*, int)+0xa0>
c0012580:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012585:	7f 09                	jg     c0012590 <EthernetCRC32(unsigned char*, int)+0x24>
c0012587:	b8 00 00 00 00       	mov    eax,0x0
c001258c:	eb 7e                	jmp    c001260c <EthernetCRC32(unsigned char*, int)+0xa0>
c001258e:	66 90                	xchg   ax,ax
c0012590:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012598:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00125a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125a4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00125a8:	7d 5a                	jge    c0012604 <EthernetCRC32(unsigned char*, int)+0x98>
c00125aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b2:	01 d0                	add    eax,edx
c00125b4:	8a 00                	mov    al,BYTE PTR [eax]
c00125b6:	0f b6 c0             	movzx  eax,al
c00125b9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00125bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125c5:	8d 76 00             	lea    esi,[esi+0x0]
c00125c8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00125cd:	7f 2d                	jg     c00125fc <EthernetCRC32(unsigned char*, int)+0x90>
c00125cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d3:	83 e0 01             	and    eax,0x1
c00125d6:	74 10                	je     c00125e8 <EthernetCRC32(unsigned char*, int)+0x7c>
c00125d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125dc:	d1 e8                	shr    eax,1
c00125de:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00125e3:	eb 0b                	jmp    c00125f0 <EthernetCRC32(unsigned char*, int)+0x84>
c00125e5:	8d 76 00             	lea    esi,[esi+0x0]
c00125e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125ec:	d1 e8                	shr    eax,1
c00125ee:	66 90                	xchg   ax,ax
c00125f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00125f9:	eb cd                	jmp    c00125c8 <EthernetCRC32(unsigned char*, int)+0x5c>
c00125fb:	90                   	nop
c00125fc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012601:	eb 9d                	jmp    c00125a0 <EthernetCRC32(unsigned char*, int)+0x34>
c0012603:	90                   	nop
c0012604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012608:	f7 d0                	not    eax
c001260a:	66 90                	xchg   ax,ax
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	c3                   	ret    

c0012610 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012610:	83 ec 2c             	sub    esp,0x2c
c0012613:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012617:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001261c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012628:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001262b:	0f b7 c0             	movzx  eax,ax
c001262e:	3d 06 08 00 00       	cmp    eax,0x806
c0012633:	75 13                	jne    c0012648 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012635:	83 ec 0c             	sub    esp,0xc
c0012638:	68 8e 1e 02 c0       	push   0xc0021e8e
c001263d:	e8 c8 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012642:	83 c4 10             	add    esp,0x10
c0012645:	eb 25                	jmp    c001266c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012647:	90                   	nop
c0012648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001264c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001264f:	0f b7 c0             	movzx  eax,ax
c0012652:	3d 00 08 00 00       	cmp    eax,0x800
c0012657:	75 13                	jne    c001266c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012659:	83 ec 0c             	sub    esp,0xc
c001265c:	68 a4 1e 02 c0       	push   0xc0021ea4
c0012661:	e8 a4 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012666:	83 c4 10             	add    esp,0x10
c0012669:	8d 76 00             	lea    esi,[esi+0x0]
c001266c:	90                   	nop
c001266d:	83 c4 2c             	add    esp,0x2c
c0012670:	c3                   	ret    

c0012671 <CmOpen(char const*)>:
c0012671:	57                   	push   edi
c0012672:	56                   	push   esi
c0012673:	53                   	push   ebx
c0012674:	83 ec 1c             	sub    esp,0x1c
c0012677:	6a 30                	push   0x30
c0012679:	e8 55 54 ff ff       	call   c0007ad3 <malloc>
c001267e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012685:	89 c3                	mov    ebx,eax
c0012687:	e8 47 54 ff ff       	call   c0007ad3 <malloc>
c001268c:	83 c4 0c             	add    esp,0xc
c001268f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012695:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012699:	89 c6                	mov    esi,eax
c001269b:	50                   	push   eax
c001269c:	e8 8d 90 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c00126a1:	83 c4 0c             	add    esp,0xc
c00126a4:	89 33                	mov    DWORD PTR [ebx],esi
c00126a6:	8d 44 24 07          	lea    eax,[esp+0x7]
c00126aa:	50                   	push   eax
c00126ab:	8d 44 24 10          	lea    eax,[esp+0x10]
c00126af:	50                   	push   eax
c00126b0:	56                   	push   esi
c00126b1:	e8 36 94 ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c00126b6:	5a                   	pop    edx
c00126b7:	59                   	pop    ecx
c00126b8:	6a 01                	push   0x1
c00126ba:	ff 33                	push   DWORD PTR [ebx]
c00126bc:	e8 29 91 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c00126c1:	5e                   	pop    esi
c00126c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126c6:	e8 08 54 ff ff       	call   c0007ad3 <malloc>
c00126cb:	5a                   	pop    edx
c00126cc:	8d 74 24 10          	lea    esi,[esp+0x10]
c00126d0:	89 c7                	mov    edi,eax
c00126d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00126d6:	56                   	push   esi
c00126d7:	57                   	push   edi
c00126d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126e0:	50                   	push   eax
c00126e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126e4:	83 c4 14             	add    esp,0x14
c00126e7:	ff 33                	push   DWORD PTR [ebx]
c00126e9:	e8 5a 91 ff ff       	call   c000b848 <File::close()>
c00126ee:	59                   	pop    ecx
c00126ef:	58                   	pop    eax
c00126f0:	6a 13                	push   0x13
c00126f2:	ff 33                	push   DWORD PTR [ebx]
c00126f4:	e8 f1 90 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c00126f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00126fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012700:	57                   	push   edi
c0012701:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012705:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012709:	50                   	push   eax
c001270a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001270d:	83 c4 14             	add    esp,0x14
c0012710:	57                   	push   edi
c0012711:	e8 cd 53 ff ff       	call   c0007ae3 <free>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001271c:	75 10                	jne    c001272e <CmOpen(char const*)+0xbd>
c001271e:	83 ec 0c             	sub    esp,0xc
c0012721:	68 b9 1e 02 c0       	push   0xc0021eb9
c0012726:	e8 ae ea ff ff       	call   c00111d9 <KePanic(char const*)>
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	50                   	push   eax
c001272f:	6a 00                	push   0x0
c0012731:	6a 00                	push   0x0
c0012733:	ff 33                	push   DWORD PTR [ebx]
c0012735:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012738:	e8 6b 91 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c001273d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001273f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012741:	89 34 24             	mov    DWORD PTR [esp],esi
c0012744:	57                   	push   edi
c0012745:	6a 00                	push   0x0
c0012747:	6a 2b                	push   0x2b
c0012749:	50                   	push   eax
c001274a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001274d:	83 c4 1c             	add    esp,0x1c
c0012750:	6a 00                	push   0x0
c0012752:	6a 00                	push   0x0
c0012754:	ff 33                	push   DWORD PTR [ebx]
c0012756:	e8 4d 91 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c001275b:	83 c4 0c             	add    esp,0xc
c001275e:	6a 08                	push   0x8
c0012760:	68 ca 1e 02 c0       	push   0xc0021eca
c0012765:	57                   	push   edi
c0012766:	e8 15 dc fe ff       	call   c0000380 <memcmp>
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	85 c0                	test   eax,eax
c0012770:	74 10                	je     c0012782 <CmOpen(char const*)+0x111>
c0012772:	83 ec 0c             	sub    esp,0xc
c0012775:	68 d3 1e 02 c0       	push   0xc0021ed3
c001277a:	e8 5a ea ff ff       	call   c00111d9 <KePanic(char const*)>
c001277f:	83 c4 10             	add    esp,0x10
c0012782:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012786:	83 c4 10             	add    esp,0x10
c0012789:	89 d8                	mov    eax,ebx
c001278b:	5b                   	pop    ebx
c001278c:	5e                   	pop    esi
c001278d:	5f                   	pop    edi
c001278e:	c3                   	ret    

c001278f <CmClose(Reghive_Tag*)>:
c001278f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012793:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012797:	74 0b                	je     c00127a4 <CmClose(Reghive_Tag*)+0x15>
c0012799:	8b 00                	mov    eax,DWORD PTR [eax]
c001279b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001279f:	e9 a4 90 ff ff       	jmp    c000b848 <File::close()>
c00127a4:	c3                   	ret    

c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00127a5:	53                   	push   ebx
c00127a6:	83 ec 18             	sub    esp,0x18
c00127a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00127ad:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00127b1:	74 29                	je     c00127dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00127b3:	50                   	push   eax
c00127b4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00127b9:	99                   	cdq    
c00127ba:	52                   	push   edx
c00127bb:	50                   	push   eax
c00127bc:	ff 33                	push   DWORD PTR [ebx]
c00127be:	e8 e5 90 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00127c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127c5:	5a                   	pop    edx
c00127c6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00127ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00127cc:	51                   	push   ecx
c00127cd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00127d1:	6a 00                	push   0x0
c00127d3:	6a 2b                	push   0x2b
c00127d5:	50                   	push   eax
c00127d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127d9:	83 c4 20             	add    esp,0x20
c00127dc:	83 c4 18             	add    esp,0x18
c00127df:	5b                   	pop    ebx
c00127e0:	c3                   	ret    

c00127e1 <CmGetString(Reghive_Tag*, int, char*)>:
c00127e1:	55                   	push   ebp
c00127e2:	57                   	push   edi
c00127e3:	56                   	push   esi
c00127e4:	53                   	push   ebx
c00127e5:	31 db                	xor    ebx,ebx
c00127e7:	83 ec 70             	sub    esp,0x70
c00127ea:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00127ee:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00127f5:	50                   	push   eax
c00127f6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00127fd:	55                   	push   ebp
c00127fe:	e8 a2 ff ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012803:	83 c4 10             	add    esp,0x10
c0012806:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001280b:	c1 e0 08             	shl    eax,0x8
c001280e:	89 c2                	mov    edx,eax
c0012810:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012815:	09 d0                	or     eax,edx
c0012817:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001281c:	c1 e0 08             	shl    eax,0x8
c001281f:	09 d0                	or     eax,edx
c0012821:	74 25                	je     c0012848 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012823:	52                   	push   edx
c0012824:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012828:	52                   	push   edx
c0012829:	6b fb 0d             	imul   edi,ebx,0xd
c001282c:	50                   	push   eax
c001282d:	55                   	push   ebp
c001282e:	e8 72 ff ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012833:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012837:	b9 27 00 00 00       	mov    ecx,0x27
c001283c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012843:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012845:	83 c4 10             	add    esp,0x10
c0012848:	83 c3 03             	add    ebx,0x3
c001284b:	83 fb 15             	cmp    ebx,0x15
c001284e:	75 b6                	jne    c0012806 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012850:	83 c4 6c             	add    esp,0x6c
c0012853:	5b                   	pop    ebx
c0012854:	5e                   	pop    esi
c0012855:	5f                   	pop    edi
c0012856:	5d                   	pop    ebp
c0012857:	c3                   	ret    

c0012858 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012858:	83 ec 40             	sub    esp,0x40
c001285b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001285f:	50                   	push   eax
c0012860:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012864:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012868:	e8 38 ff ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	83 c8 ff             	or     eax,0xffffffff
c0012873:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012878:	75 19                	jne    c0012893 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001287a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001287f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012884:	c1 e0 08             	shl    eax,0x8
c0012887:	09 c2                	or     edx,eax
c0012889:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001288e:	c1 e0 10             	shl    eax,0x10
c0012891:	09 d0                	or     eax,edx
c0012893:	83 c4 3c             	add    esp,0x3c
c0012896:	c3                   	ret    

c0012897 <CmGetNext(Reghive_Tag*, int)>:
c0012897:	83 ec 40             	sub    esp,0x40
c001289a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001289e:	50                   	push   eax
c001289f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128a7:	e8 f9 fe ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128ac:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00128b1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00128b6:	c1 e0 08             	shl    eax,0x8
c00128b9:	09 c2                	or     edx,eax
c00128bb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00128c0:	83 c4 4c             	add    esp,0x4c
c00128c3:	c1 e0 10             	shl    eax,0x10
c00128c6:	09 d0                	or     eax,edx
c00128c8:	c3                   	ret    

c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00128c9:	53                   	push   ebx
c00128ca:	83 ec 18             	sub    esp,0x18
c00128cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128d1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128d5:	74 29                	je     c0012900 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128d7:	50                   	push   eax
c00128d8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128dd:	99                   	cdq    
c00128de:	52                   	push   edx
c00128df:	50                   	push   eax
c00128e0:	ff 33                	push   DWORD PTR [ebx]
c00128e2:	e8 c1 8f ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00128e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128e9:	5a                   	pop    edx
c00128ea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00128f0:	51                   	push   ecx
c00128f1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128f5:	6a 00                	push   0x0
c00128f7:	6a 2b                	push   0x2b
c00128f9:	50                   	push   eax
c00128fa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128fd:	83 c4 20             	add    esp,0x20
c0012900:	83 c4 18             	add    esp,0x18
c0012903:	5b                   	pop    ebx
c0012904:	c3                   	ret    

c0012905 <CmFreeExtent(Reghive_Tag*, int)>:
c0012905:	53                   	push   ebx
c0012906:	83 ec 3c             	sub    esp,0x3c
c0012909:	6a 2b                	push   0x2b
c001290b:	6a 00                	push   0x0
c001290d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012911:	53                   	push   ebx
c0012912:	e8 d9 db fe ff       	call   c00004f0 <memset>
c0012917:	83 c4 0c             	add    esp,0xc
c001291a:	53                   	push   ebx
c001291b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001291f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012923:	e8 a1 ff ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012928:	83 c4 48             	add    esp,0x48
c001292b:	5b                   	pop    ebx
c001292c:	c3                   	ret    

c001292d <CmUpdateHeader(Reghive_Tag*)>:
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012934:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012938:	74 10                	je     c001294a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001293a:	52                   	push   edx
c001293b:	8d 50 05             	lea    edx,[eax+0x5]
c001293e:	52                   	push   edx
c001293f:	6a 00                	push   0x0
c0012941:	50                   	push   eax
c0012942:	e8 82 ff ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	83 c4 0c             	add    esp,0xc
c001294d:	c3                   	ret    

c001294e <CmExpand(Reghive_Tag*, int)>:
c001294e:	55                   	push   ebp
c001294f:	57                   	push   edi
c0012950:	83 cf ff             	or     edi,0xffffffff
c0012953:	56                   	push   esi
c0012954:	53                   	push   ebx
c0012955:	83 ec 3c             	sub    esp,0x3c
c0012958:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001295c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012960:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012964:	74 59                	je     c00129bf <CmExpand(Reghive_Tag*, int)+0x71>
c0012966:	50                   	push   eax
c0012967:	31 d2                	xor    edx,edx
c0012969:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001296d:	31 ff                	xor    edi,edi
c001296f:	52                   	push   edx
c0012970:	50                   	push   eax
c0012971:	ff 33                	push   DWORD PTR [ebx]
c0012973:	e8 30 8f ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0012978:	83 c4 0c             	add    esp,0xc
c001297b:	6a 2b                	push   0x2b
c001297d:	6a 00                	push   0x0
c001297f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012983:	55                   	push   ebp
c0012984:	e8 67 db fe ff       	call   c00004f0 <memset>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	39 f7                	cmp    edi,esi
c001298e:	7d 1b                	jge    c00129ab <CmExpand(Reghive_Tag*, int)+0x5d>
c0012990:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	47                   	inc    edi
c0012996:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001299a:	8b 10                	mov    edx,DWORD PTR [eax]
c001299c:	51                   	push   ecx
c001299d:	55                   	push   ebp
c001299e:	6a 00                	push   0x0
c00129a0:	6a 2b                	push   0x2b
c00129a2:	50                   	push   eax
c00129a3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00129a6:	83 c4 20             	add    esp,0x20
c00129a9:	eb e1                	jmp    c001298c <CmExpand(Reghive_Tag*, int)+0x3e>
c00129ab:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	01 fe                	add    esi,edi
c00129b3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c00129b6:	53                   	push   ebx
c00129b7:	e8 71 ff ff ff       	call   c001292d <CmUpdateHeader(Reghive_Tag*)>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	83 c4 3c             	add    esp,0x3c
c00129c2:	89 f8                	mov    eax,edi
c00129c4:	5b                   	pop    ebx
c00129c5:	5e                   	pop    esi
c00129c6:	5f                   	pop    edi
c00129c7:	5d                   	pop    ebp
c00129c8:	c3                   	ret    

c00129c9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00129c9:	55                   	push   ebp
c00129ca:	57                   	push   edi
c00129cb:	56                   	push   esi
c00129cc:	53                   	push   ebx
c00129cd:	83 cb ff             	or     ebx,0xffffffff
c00129d0:	83 ec 1c             	sub    esp,0x1c
c00129d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129d7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00129db:	74 68                	je     c0012a45 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129dd:	51                   	push   ecx
c00129de:	be 2b 00 00 00       	mov    esi,0x2b
c00129e3:	6a 00                	push   0x0
c00129e5:	31 ff                	xor    edi,edi
c00129e7:	6a 00                	push   0x0
c00129e9:	31 db                	xor    ebx,ebx
c00129eb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129ee:	e8 b5 8e ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00129f9:	76 3b                	jbe    c0012a36 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00129fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129fe:	83 ec 0c             	sub    esp,0xc
c0012a01:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a07:	51                   	push   ecx
c0012a08:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a0c:	51                   	push   ecx
c0012a0d:	6a 00                	push   0x0
c0012a0f:	6a 01                	push   0x1
c0012a11:	50                   	push   eax
c0012a12:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a15:	83 c4 20             	add    esp,0x20
c0012a18:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a1d:	74 26                	je     c0012a45 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a1f:	52                   	push   edx
c0012a20:	43                   	inc    ebx
c0012a21:	57                   	push   edi
c0012a22:	56                   	push   esi
c0012a23:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a26:	e8 7d 8e ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0012a2b:	83 c6 2b             	add    esi,0x2b
c0012a2e:	83 d7 00             	adc    edi,0x0
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	eb c0                	jmp    c00129f6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a36:	50                   	push   eax
c0012a37:	50                   	push   eax
c0012a38:	6a 40                	push   0x40
c0012a3a:	55                   	push   ebp
c0012a3b:	e8 0e ff ff ff       	call   c001294e <CmExpand(Reghive_Tag*, int)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	89 c3                	mov    ebx,eax
c0012a45:	83 c4 1c             	add    esp,0x1c
c0012a48:	89 d8                	mov    eax,ebx
c0012a4a:	5b                   	pop    ebx
c0012a4b:	5e                   	pop    esi
c0012a4c:	5f                   	pop    edi
c0012a4d:	5d                   	pop    ebp
c0012a4e:	c3                   	ret    

c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012a4f:	55                   	push   ebp
c0012a50:	57                   	push   edi
c0012a51:	56                   	push   esi
c0012a52:	53                   	push   ebx
c0012a53:	81 ec 88 00 00 00    	sub    esp,0x88
c0012a59:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012a60:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a67:	e8 5d ff ff ff       	call   c00129c9 <CmFindUnusedExtent(Reghive_Tag*)>
c0012a6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a70:	83 c4 0c             	add    esp,0xc
c0012a73:	6a 2b                	push   0x2b
c0012a75:	6a 00                	push   0x0
c0012a77:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a7b:	55                   	push   ebp
c0012a7c:	e8 6f da fe ff       	call   c00004f0 <memset>
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	85 db                	test   ebx,ebx
c0012a86:	74 12                	je     c0012a9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a88:	51                   	push   ecx
c0012a89:	55                   	push   ebp
c0012a8a:	53                   	push   ebx
c0012a8b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a92:	e8 0e fd ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a9e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012aa5:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012aaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012aac:	85 db                	test   ebx,ebx
c0012aae:	74 49                	je     c0012af9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ab0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012ab5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012abe:	c1 e0 08             	shl    eax,0x8
c0012ac1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012ac7:	09 c8                	or     eax,ecx
c0012ac9:	74 11                	je     c0012adc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012acb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012acf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012ad3:	c1 e8 10             	shr    eax,0x10
c0012ad6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012ada:	eb 0f                	jmp    c0012aeb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012adc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ae1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ae6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012aeb:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012aef:	c1 ea 08             	shr    edx,0x8
c0012af2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012af7:	eb 0f                	jmp    c0012b08 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012af9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012afe:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b03:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b08:	52                   	push   edx
c0012b09:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b0d:	50                   	push   eax
c0012b0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b12:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b19:	e8 ab fd ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b1e:	83 c4 10             	add    esp,0x10
c0012b21:	85 db                	test   ebx,ebx
c0012b23:	74 12                	je     c0012b37 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b25:	50                   	push   eax
c0012b26:	55                   	push   ebp
c0012b27:	53                   	push   ebx
c0012b28:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b2f:	e8 95 fd ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b34:	83 c4 10             	add    esp,0x10
c0012b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b3b:	83 c4 7c             	add    esp,0x7c
c0012b3e:	5b                   	pop    ebx
c0012b3f:	5e                   	pop    esi
c0012b40:	5f                   	pop    edi
c0012b41:	5d                   	pop    ebp
c0012b42:	c3                   	ret    

c0012b43 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012b43:	55                   	push   ebp
c0012b44:	57                   	push   edi
c0012b45:	56                   	push   esi
c0012b46:	53                   	push   ebx
c0012b47:	bb 27 00 00 00       	mov    ebx,0x27
c0012b4c:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b52:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012b59:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012b60:	e8 1b da fe ff       	call   c0000580 <strlen>
c0012b65:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b68:	89 c8                	mov    eax,ecx
c0012b6a:	99                   	cdq    
c0012b6b:	f7 fb                	idiv   ebx
c0012b6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b7a:	7e 10                	jle    c0012b8c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b7c:	83 ec 0c             	sub    esp,0xc
c0012b7f:	68 e4 1e 02 c0       	push   0xc0021ee4
c0012b84:	e8 50 e6 ff ff       	call   c00111d9 <KePanic(char const*)>
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	53                   	push   ebx
c0012b8d:	31 ed                	xor    ebp,ebp
c0012b8f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b93:	53                   	push   ebx
c0012b94:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b9b:	57                   	push   edi
c0012b9c:	e8 04 fc ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012ba8:	89 f0                	mov    eax,esi
c0012baa:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012bae:	c1 e0 08             	shl    eax,0x8
c0012bb1:	09 c6                	or     esi,eax
c0012bb3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012bb7:	c1 e6 08             	shl    esi,0x8
c0012bba:	09 c6                	or     esi,eax
c0012bbc:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012bc0:	7e 72                	jle    c0012c34 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012bc2:	85 f6                	test   esi,esi
c0012bc4:	75 25                	jne    c0012beb <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012bc6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012bcb:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012bcf:	50                   	push   eax
c0012bd0:	6a 00                	push   0x0
c0012bd2:	6a 00                	push   0x0
c0012bd4:	57                   	push   edi
c0012bd5:	e8 75 fe ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012be0:	89 c6                	mov    esi,eax
c0012be2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012be5:	c1 f8 10             	sar    eax,0x10
c0012be8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012beb:	51                   	push   ecx
c0012bec:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012bf0:	52                   	push   edx
c0012bf1:	56                   	push   esi
c0012bf2:	57                   	push   edi
c0012bf3:	e8 ad fb ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bf8:	83 c4 0c             	add    esp,0xc
c0012bfb:	6a 27                	push   0x27
c0012bfd:	6a 00                	push   0x0
c0012bff:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c03:	51                   	push   ecx
c0012c04:	e8 e7 d8 fe ff       	call   c00004f0 <memset>
c0012c09:	6b c5 27             	imul   eax,ebp,0x27
c0012c0c:	83 c4 0c             	add    esp,0xc
c0012c0f:	6a 27                	push   0x27
c0012c11:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c18:	50                   	push   eax
c0012c19:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c1d:	51                   	push   ecx
c0012c1e:	e8 6d da fe ff       	call   c0000690 <strncpy>
c0012c23:	83 c4 0c             	add    esp,0xc
c0012c26:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012c2a:	52                   	push   edx
c0012c2b:	56                   	push   esi
c0012c2c:	57                   	push   edi
c0012c2d:	e8 97 fc ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c32:	eb 19                	jmp    c0012c4d <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012c34:	85 f6                	test   esi,esi
c0012c36:	74 18                	je     c0012c50 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012c38:	52                   	push   edx
c0012c39:	52                   	push   edx
c0012c3a:	56                   	push   esi
c0012c3b:	57                   	push   edi
c0012c3c:	e8 c4 fc ff ff       	call   c0012905 <CmFreeExtent(Reghive_Tag*, int)>
c0012c41:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012c45:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012c49:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012c4d:	83 c4 10             	add    esp,0x10
c0012c50:	45                   	inc    ebp
c0012c51:	83 c3 03             	add    ebx,0x3
c0012c54:	83 fd 07             	cmp    ebp,0x7
c0012c57:	0f 85 47 ff ff ff    	jne    c0012ba4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012c5d:	50                   	push   eax
c0012c5e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012c62:	50                   	push   eax
c0012c63:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c6a:	57                   	push   edi
c0012c6b:	e8 59 fc ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c70:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c76:	5b                   	pop    ebx
c0012c77:	5e                   	pop    esi
c0012c78:	5f                   	pop    edi
c0012c79:	5d                   	pop    ebp
c0012c7a:	c3                   	ret    

c0012c7b <CmGetMatch(char*, char*, bool, bool*)>:
c0012c7b:	56                   	push   esi
c0012c7c:	53                   	push   ebx
c0012c7d:	50                   	push   eax
c0012c7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c83:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c87:	74 25                	je     c0012cae <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c89:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c8c:	31 db                	xor    ebx,ebx
c0012c8e:	50                   	push   eax
c0012c8f:	50                   	push   eax
c0012c90:	8d 04 9d 80 33 02 c0 	lea    eax,[ebx*4-0x3ffdcc80]
c0012c97:	50                   	push   eax
c0012c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c9c:	e8 df da fe ff       	call   c0000780 <strcmp>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	85 c0                	test   eax,eax
c0012ca6:	74 2e                	je     c0012cd6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012ca8:	43                   	inc    ebx
c0012ca9:	83 fb 3f             	cmp    ebx,0x3f
c0012cac:	75 e0                	jne    c0012c8e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012cae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cb1:	31 db                	xor    ebx,ebx
c0012cb3:	51                   	push   ecx
c0012cb4:	51                   	push   ecx
c0012cb5:	8d 04 9d 80 33 02 c0 	lea    eax,[ebx*4-0x3ffdcc80]
c0012cbc:	50                   	push   eax
c0012cbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc1:	e8 ba da fe ff       	call   c0000780 <strcmp>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	85 c0                	test   eax,eax
c0012ccb:	74 09                	je     c0012cd6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012ccd:	43                   	inc    ebx
c0012cce:	83 fb 3f             	cmp    ebx,0x3f
c0012cd1:	75 e0                	jne    c0012cb3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012cd3:	83 cb ff             	or     ebx,0xffffffff
c0012cd6:	5a                   	pop    edx
c0012cd7:	89 d8                	mov    eax,ebx
c0012cd9:	5b                   	pop    ebx
c0012cda:	5e                   	pop    esi
c0012cdb:	c3                   	ret    

c0012cdc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012cdc:	55                   	push   ebp
c0012cdd:	31 c0                	xor    eax,eax
c0012cdf:	57                   	push   edi
c0012ce0:	56                   	push   esi
c0012ce1:	53                   	push   ebx
c0012ce2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ce6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012cf2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012cf4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012cf7:	83 fd 1f             	cmp    ebp,0x1f
c0012cfa:	7f 0b                	jg     c0012d07 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012cfc:	0f b6 c2             	movzx  eax,dl
c0012cff:	d3 e0                	shl    eax,cl
c0012d01:	09 07                	or     DWORD PTR [edi],eax
c0012d03:	b0 01                	mov    al,0x1
c0012d05:	01 33                	add    DWORD PTR [ebx],esi
c0012d07:	5b                   	pop    ebx
c0012d08:	5e                   	pop    esi
c0012d09:	5f                   	pop    edi
c0012d0a:	5d                   	pop    ebp
c0012d0b:	c3                   	ret    

c0012d0c <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d0c:	57                   	push   edi
c0012d0d:	56                   	push   esi
c0012d0e:	53                   	push   ebx
c0012d0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d13:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d17:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d1b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d1f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d21:	7c 17                	jl     c0012d3a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d23:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d25:	b8 01 00 00 00       	mov    eax,0x1
c0012d2a:	d3 e0                	shl    eax,cl
c0012d2c:	48                   	dec    eax
c0012d2d:	21 d0                	and    eax,edx
c0012d2f:	d3 ea                	shr    edx,cl
c0012d31:	89 17                	mov    DWORD PTR [edi],edx
c0012d33:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d35:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d38:	eb 05                	jmp    c0012d3f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012d3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d3d:	31 c0                	xor    eax,eax
c0012d3f:	5b                   	pop    ebx
c0012d40:	5e                   	pop    esi
c0012d41:	5f                   	pop    edi
c0012d42:	c3                   	ret    

c0012d43 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012d43:	83 ec 40             	sub    esp,0x40
c0012d46:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d4a:	50                   	push   eax
c0012d4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d53:	e8 4d fa ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d58:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012d5c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012d60:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012d64:	89 10                	mov    DWORD PTR [eax],edx
c0012d66:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d69:	83 c4 4c             	add    esp,0x4c
c0012d6c:	c3                   	ret    

c0012d6d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d6d:	55                   	push   ebp
c0012d6e:	57                   	push   edi
c0012d6f:	56                   	push   esi
c0012d70:	53                   	push   ebx
c0012d71:	83 ec 40             	sub    esp,0x40
c0012d74:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d78:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d7c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d80:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d84:	53                   	push   ebx
c0012d85:	56                   	push   esi
c0012d86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d8a:	e8 16 fa ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d8f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d93:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	53                   	push   ebx
c0012d9b:	56                   	push   esi
c0012d9c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012da0:	e8 24 fb ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012da5:	83 c4 4c             	add    esp,0x4c
c0012da8:	5b                   	pop    ebx
c0012da9:	5e                   	pop    esi
c0012daa:	5f                   	pop    edi
c0012dab:	5d                   	pop    ebp
c0012dac:	c3                   	ret    

c0012dad <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012dad:	55                   	push   ebp
c0012dae:	57                   	push   edi
c0012daf:	56                   	push   esi
c0012db0:	31 f6                	xor    esi,esi
c0012db2:	53                   	push   ebx
c0012db3:	31 db                	xor    ebx,ebx
c0012db5:	83 ec 40             	sub    esp,0x40
c0012db8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012dc0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012dc8:	6a 12                	push   0x12
c0012dca:	68 ee 00 00 00       	push   0xee
c0012dcf:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012dd3:	e8 18 d7 fe ff       	call   c00004f0 <memset>
c0012dd8:	83 c4 10             	add    esp,0x10
c0012ddb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012ddf:	6a 08                	push   0x8
c0012de1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012de5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012de9:	50                   	push   eax
c0012dea:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012dee:	55                   	push   ebp
c0012def:	57                   	push   edi
c0012df0:	e8 e7 fe ff ff       	call   c0012cdc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012dfc:	50                   	push   eax
c0012dfd:	6a 06                	push   0x6
c0012dff:	55                   	push   ebp
c0012e00:	57                   	push   edi
c0012e01:	e8 06 ff ff ff       	call   c0012d0c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e06:	83 c4 10             	add    esp,0x10
c0012e09:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e0e:	74 07                	je     c0012e17 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e10:	46                   	inc    esi
c0012e11:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e15:	eb e1                	jmp    c0012df8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e17:	43                   	inc    ebx
c0012e18:	83 fb 12             	cmp    ebx,0x12
c0012e1b:	75 c2                	jne    c0012ddf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e21:	31 f6                	xor    esi,esi
c0012e23:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e26:	50                   	push   eax
c0012e27:	50                   	push   eax
c0012e28:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012e2d:	46                   	inc    esi
c0012e2e:	8d 04 85 80 33 02 c0 	lea    eax,[eax*4-0x3ffdcc80]
c0012e35:	50                   	push   eax
c0012e36:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e3a:	e8 31 da fe ff       	call   c0000870 <strcat>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	83 fe 18             	cmp    esi,0x18
c0012e45:	75 df                	jne    c0012e26 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012e47:	83 c4 3c             	add    esp,0x3c
c0012e4a:	31 c0                	xor    eax,eax
c0012e4c:	5b                   	pop    ebx
c0012e4d:	5e                   	pop    esi
c0012e4e:	5f                   	pop    edi
c0012e4f:	5d                   	pop    ebp
c0012e50:	c3                   	ret    

c0012e51 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012e51:	83 ec 40             	sub    esp,0x40
c0012e54:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e58:	50                   	push   eax
c0012e59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e61:	e8 3f f9 ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e66:	58                   	pop    eax
c0012e67:	5a                   	pop    edx
c0012e68:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e6c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e70:	50                   	push   eax
c0012e71:	e8 37 ff ff ff       	call   c0012dad <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e76:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e7b:	83 c4 4c             	add    esp,0x4c
c0012e7e:	c3                   	ret    

c0012e7f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e7f:	55                   	push   ebp
c0012e80:	57                   	push   edi
c0012e81:	56                   	push   esi
c0012e82:	53                   	push   ebx
c0012e83:	31 db                	xor    ebx,ebx
c0012e85:	83 ec 70             	sub    esp,0x70
c0012e88:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e8f:	6a 30                	push   0x30
c0012e91:	6a 00                	push   0x0
c0012e93:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e97:	56                   	push   esi
c0012e98:	e8 53 d6 fe ff       	call   c00004f0 <memset>
c0012e9d:	83 c4 10             	add    esp,0x10
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	57                   	push   edi
c0012ea4:	e8 d7 d6 fe ff       	call   c0000580 <strlen>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	39 d8                	cmp    eax,ebx
c0012eae:	76 16                	jbe    c0012ec6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012eb0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	50                   	push   eax
c0012eb8:	e8 a3 da fe ff       	call   c0000960 <toupper>
c0012ebd:	83 c4 10             	add    esp,0x10
c0012ec0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012ec3:	43                   	inc    ebx
c0012ec4:	eb da                	jmp    c0012ea0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012ec6:	52                   	push   edx
c0012ec7:	31 db                	xor    ebx,ebx
c0012ec9:	6a 18                	push   0x18
c0012ecb:	31 ff                	xor    edi,edi
c0012ecd:	6a 3f                	push   0x3f
c0012ecf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ed3:	50                   	push   eax
c0012ed4:	e8 17 d6 fe ff       	call   c00004f0 <memset>
c0012ed9:	83 c4 10             	add    esp,0x10
c0012edc:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012ee0:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012ee4:	84 c0                	test   al,al
c0012ee6:	0f 84 af 00 00 00    	je     c0012f9b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012eec:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012ef0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ef3:	83 ec 0c             	sub    esp,0xc
c0012ef6:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012efb:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012eff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012f03:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012f08:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f0c:	56                   	push   esi
c0012f0d:	e8 6e d6 fe ff       	call   c0000580 <strlen>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	85 c0                	test   eax,eax
c0012f17:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f1b:	74 0b                	je     c0012f28 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f1d:	50                   	push   eax
c0012f1e:	6a 01                	push   0x1
c0012f20:	56                   	push   esi
c0012f21:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f25:	50                   	push   eax
c0012f26:	eb 0a                	jmp    c0012f32 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f28:	50                   	push   eax
c0012f29:	6a 00                	push   0x0
c0012f2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f2f:	50                   	push   eax
c0012f30:	6a 00                	push   0x0
c0012f32:	e8 44 fd ff ff       	call   c0012c7b <CmGetMatch(char*, char*, bool, bool*)>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0012f3d:	75 1a                	jne    c0012f59 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012f3f:	83 ec 0c             	sub    esp,0xc
c0012f42:	68 f9 1e 02 c0       	push   0xc0021ef9
c0012f47:	e8 8d e2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	b8 02 00 00 00       	mov    eax,0x2
c0012f54:	e9 bb 00 00 00       	jmp    c0013014 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f59:	83 ff 18             	cmp    edi,0x18
c0012f5c:	75 1a                	jne    c0012f78 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012f5e:	83 ec 0c             	sub    esp,0xc
c0012f61:	68 0e 1f 02 c0       	push   0xc0021f0e
c0012f66:	e8 6e e2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	b8 01 00 00 00       	mov    eax,0x1
c0012f73:	e9 9c 00 00 00       	jmp    c0013014 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012f78:	47                   	inc    edi
c0012f79:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f7e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f82:	0f 45 dd             	cmovne ebx,ebp
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	56                   	push   esi
c0012f89:	e8 f2 d5 fe ff       	call   c0000580 <strlen>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	85 c0                	test   eax,eax
c0012f93:	74 06                	je     c0012f9b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f95:	43                   	inc    ebx
c0012f96:	e9 41 ff ff ff       	jmp    c0012edc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012f9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012fa3:	31 db                	xor    ebx,ebx
c0012fa5:	31 ff                	xor    edi,edi
c0012fa7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012faf:	50                   	push   eax
c0012fb0:	6a 12                	push   0x12
c0012fb2:	68 ee 00 00 00       	push   0xee
c0012fb7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012fbe:	e8 2d d5 fe ff       	call   c00004f0 <memset>
c0012fc3:	83 c4 10             	add    esp,0x10
c0012fc6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012fca:	83 fb 17             	cmp    ebx,0x17
c0012fcd:	7e 26                	jle    c0012ff5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012fcf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fd3:	50                   	push   eax
c0012fd4:	6a 08                	push   0x8
c0012fd6:	55                   	push   ebp
c0012fd7:	56                   	push   esi
c0012fd8:	e8 2f fd ff ff       	call   c0012d0c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fe5:	74 26                	je     c001300d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0012fe7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012fee:	4b                   	dec    ebx
c0012fef:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012ff2:	47                   	inc    edi
c0012ff3:	eb 1c                	jmp    c0013011 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012ff5:	6a 06                	push   0x6
c0012ff7:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012ffc:	50                   	push   eax
c0012ffd:	55                   	push   ebp
c0012ffe:	56                   	push   esi
c0012fff:	e8 d8 fc ff ff       	call   c0012cdc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013004:	83 c4 10             	add    esp,0x10
c0013007:	84 c0                	test   al,al
c0013009:	75 06                	jne    c0013011 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001300b:	eb c2                	jmp    c0012fcf <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c001300d:	31 c0                	xor    eax,eax
c001300f:	eb 03                	jmp    c0013014 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013011:	43                   	inc    ebx
c0013012:	eb b2                	jmp    c0012fc6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013014:	83 c4 6c             	add    esp,0x6c
c0013017:	5b                   	pop    ebx
c0013018:	5e                   	pop    esi
c0013019:	5f                   	pop    edi
c001301a:	5d                   	pop    ebp
c001301b:	c3                   	ret    

c001301c <CmCreateString(Reghive_Tag*, int, char const*)>:
c001301c:	53                   	push   ebx
c001301d:	83 ec 3c             	sub    esp,0x3c
c0013020:	6a 2b                	push   0x2b
c0013022:	6a 00                	push   0x0
c0013024:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013028:	53                   	push   ebx
c0013029:	e8 c2 d4 fe ff       	call   c00004f0 <memset>
c001302e:	58                   	pop    eax
c001302f:	5a                   	pop    edx
c0013030:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013034:	50                   	push   eax
c0013035:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013039:	e8 41 fe ff ff       	call   c0012e7f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001303e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013043:	83 c4 0c             	add    esp,0xc
c0013046:	6a 15                	push   0x15
c0013048:	6a 00                	push   0x0
c001304a:	8d 44 24 27          	lea    eax,[esp+0x27]
c001304e:	50                   	push   eax
c001304f:	e8 9c d4 fe ff       	call   c00004f0 <memset>
c0013054:	53                   	push   ebx
c0013055:	6a 00                	push   0x0
c0013057:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001305b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001305f:	e8 eb f9 ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013064:	83 c4 58             	add    esp,0x58
c0013067:	5b                   	pop    ebx
c0013068:	c3                   	ret    

c0013069 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013069:	56                   	push   esi
c001306a:	53                   	push   ebx
c001306b:	83 ec 48             	sub    esp,0x48
c001306e:	6a 12                	push   0x12
c0013070:	68 ff 00 00 00       	push   0xff
c0013075:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013079:	56                   	push   esi
c001307a:	e8 71 d4 fe ff       	call   c00004f0 <memset>
c001307f:	5a                   	pop    edx
c0013080:	59                   	pop    ecx
c0013081:	56                   	push   esi
c0013082:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013086:	e8 f4 fd ff ff       	call   c0012e7f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013092:	85 db                	test   ebx,ebx
c0013094:	74 42                	je     c00130d8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013096:	50                   	push   eax
c0013097:	8d 44 24 19          	lea    eax,[esp+0x19]
c001309b:	50                   	push   eax
c001309c:	53                   	push   ebx
c001309d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130a1:	e8 ff f6 ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130a6:	83 c4 0c             	add    esp,0xc
c00130a9:	6a 12                	push   0x12
c00130ab:	8d 44 24 21          	lea    eax,[esp+0x21]
c00130af:	50                   	push   eax
c00130b0:	56                   	push   esi
c00130b1:	e8 ca d2 fe ff       	call   c0000380 <memcmp>
c00130b6:	83 c4 10             	add    esp,0x10
c00130b9:	85 c0                	test   eax,eax
c00130bb:	74 1e                	je     c00130db <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00130bd:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00130c2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00130c7:	c1 e3 08             	shl    ebx,0x8
c00130ca:	09 d8                	or     eax,ebx
c00130cc:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00130d1:	c1 e3 10             	shl    ebx,0x10
c00130d4:	09 c3                	or     ebx,eax
c00130d6:	eb ba                	jmp    c0013092 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00130d8:	83 cb ff             	or     ebx,0xffffffff
c00130db:	83 c4 44             	add    esp,0x44
c00130de:	89 d8                	mov    eax,ebx
c00130e0:	5b                   	pop    ebx
c00130e1:	5e                   	pop    esi
c00130e2:	c3                   	ret    

c00130e3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00130e3:	57                   	push   edi
c00130e4:	56                   	push   esi
c00130e5:	53                   	push   ebx
c00130e6:	83 ec 34             	sub    esp,0x34
c00130e9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00130ed:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00130f1:	6a 2b                	push   0x2b
c00130f3:	6a 00                	push   0x0
c00130f5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130f9:	53                   	push   ebx
c00130fa:	e8 f1 d3 fe ff       	call   c00004f0 <memset>
c00130ff:	58                   	pop    eax
c0013100:	5a                   	pop    edx
c0013101:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013105:	50                   	push   eax
c0013106:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001310a:	e8 70 fd ff ff       	call   c0012e7f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001310f:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013113:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013117:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001311b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001311f:	53                   	push   ebx
c0013120:	6a 00                	push   0x0
c0013122:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013126:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001312a:	e8 20 f9 ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001312f:	83 c4 50             	add    esp,0x50
c0013132:	5b                   	pop    ebx
c0013133:	5e                   	pop    esi
c0013134:	5f                   	pop    edi
c0013135:	c3                   	ret    

c0013136 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013136:	55                   	push   ebp
c0013137:	57                   	push   edi
c0013138:	56                   	push   esi
c0013139:	53                   	push   ebx
c001313a:	83 ec 40             	sub    esp,0x40
c001313d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013141:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013145:	6a 2b                	push   0x2b
c0013147:	6a 00                	push   0x0
c0013149:	8d 74 24 11          	lea    esi,[esp+0x11]
c001314d:	56                   	push   esi
c001314e:	e8 9d d3 fe ff       	call   c00004f0 <memset>
c0013153:	5f                   	pop    edi
c0013154:	89 ef                	mov    edi,ebp
c0013156:	58                   	pop    eax
c0013157:	8d 44 24 11          	lea    eax,[esp+0x11]
c001315b:	50                   	push   eax
c001315c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013160:	e8 1a fd ff ff       	call   c0012e7f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013165:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001316a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001316f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013174:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	85 ed                	test   ebp,ebp
c001317e:	74 14                	je     c0013194 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013180:	51                   	push   ecx
c0013181:	51                   	push   ecx
c0013182:	57                   	push   edi
c0013183:	53                   	push   ebx
c0013184:	e8 0e f7 ff ff       	call   c0012897 <CmGetNext(Reghive_Tag*, int)>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	85 c0                	test   eax,eax
c001318e:	74 04                	je     c0013194 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013190:	89 c7                	mov    edi,eax
c0013192:	eb e8                	jmp    c001317c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013194:	56                   	push   esi
c0013195:	6a 00                	push   0x0
c0013197:	57                   	push   edi
c0013198:	53                   	push   ebx
c0013199:	e8 b1 f8 ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001319e:	83 c4 0c             	add    esp,0xc
c00131a1:	56                   	push   esi
c00131a2:	50                   	push   eax
c00131a3:	89 c7                	mov    edi,eax
c00131a5:	53                   	push   ebx
c00131a6:	e8 fa f5 ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131ab:	58                   	pop    eax
c00131ac:	5a                   	pop    edx
c00131ad:	6a 6c                	push   0x6c
c00131af:	6a 00                	push   0x0
c00131b1:	6a 00                	push   0x0
c00131b3:	68 1f 1f 02 c0       	push   0xc0021f1f
c00131b8:	57                   	push   edi
c00131b9:	53                   	push   ebx
c00131ba:	e8 24 ff ff ff       	call   c00130e3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00131bf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00131c3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00131c7:	c1 e8 10             	shr    eax,0x10
c00131ca:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00131ce:	83 c4 1c             	add    esp,0x1c
c00131d1:	56                   	push   esi
c00131d2:	57                   	push   edi
c00131d3:	53                   	push   ebx
c00131d4:	e8 f0 f6 ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00131de:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00131e3:	c1 e0 08             	shl    eax,0x8
c00131e6:	09 c2                	or     edx,eax
c00131e8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00131ed:	83 c4 4c             	add    esp,0x4c
c00131f0:	5b                   	pop    ebx
c00131f1:	5e                   	pop    esi
c00131f2:	c1 e0 10             	shl    eax,0x10
c00131f5:	09 d0                	or     eax,edx
c00131f7:	5f                   	pop    edi
c00131f8:	5d                   	pop    ebp
c00131f9:	c3                   	ret    

c00131fa <zStrtok(char*, char const*)>:
c00131fa:	55                   	push   ebp
c00131fb:	57                   	push   edi
c00131fc:	56                   	push   esi
c00131fd:	53                   	push   ebx
c00131fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013202:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013206:	85 db                	test   ebx,ebx
c0013208:	74 2f                	je     c0013239 <zStrtok(char*, char const*)+0x3f>
c001320a:	85 c0                	test   eax,eax
c001320c:	75 09                	jne    c0013217 <zStrtok(char*, char const*)+0x1d>
c001320e:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013213:	85 c0                	test   eax,eax
c0013215:	74 50                	je     c0013267 <zStrtok(char*, char const*)+0x6d>
c0013217:	31 c9                	xor    ecx,ecx
c0013219:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001321d:	74 03                	je     c0013222 <zStrtok(char*, char const*)+0x28>
c001321f:	41                   	inc    ecx
c0013220:	eb f7                	jmp    c0013219 <zStrtok(char*, char const*)+0x1f>
c0013222:	31 d2                	xor    edx,edx
c0013224:	39 ca                	cmp    edx,ecx
c0013226:	74 15                	je     c001323d <zStrtok(char*, char const*)+0x43>
c0013228:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001322c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001322f:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013232:	39 ee                	cmp    esi,ebp
c0013234:	74 13                	je     c0013249 <zStrtok(char*, char const*)+0x4f>
c0013236:	42                   	inc    edx
c0013237:	eb eb                	jmp    c0013224 <zStrtok(char*, char const*)+0x2a>
c0013239:	31 c0                	xor    eax,eax
c001323b:	eb 2a                	jmp    c0013267 <zStrtok(char*, char const*)+0x6d>
c001323d:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013247:	eb 1e                	jmp    c0013267 <zStrtok(char*, char const*)+0x6d>
c0013249:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001324c:	39 ce                	cmp    esi,ecx
c001324e:	75 0a                	jne    c001325a <zStrtok(char*, char const*)+0x60>
c0013250:	40                   	inc    eax
c0013251:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c0013256:	89 d8                	mov    eax,ebx
c0013258:	eb 0d                	jmp    c0013267 <zStrtok(char*, char const*)+0x6d>
c001325a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001325d:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013261:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013267:	5b                   	pop    ebx
c0013268:	5e                   	pop    esi
c0013269:	5f                   	pop    edi
c001326a:	5d                   	pop    ebp
c001326b:	c3                   	ret    

c001326c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001326c:	57                   	push   edi
c001326d:	56                   	push   esi
c001326e:	53                   	push   ebx
c001326f:	81 ec 08 01 00 00    	sub    esp,0x108
c0013275:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001327c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013283:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013287:	53                   	push   ebx
c0013288:	e8 c3 d3 fe ff       	call   c0000650 <strcpy>
c001328d:	59                   	pop    ecx
c001328e:	5e                   	pop    esi
c001328f:	68 83 22 02 c0       	push   0xc0022283
c0013294:	53                   	push   ebx
c0013295:	bb 01 00 00 00       	mov    ebx,0x1
c001329a:	e8 5b ff ff ff       	call   c00131fa <zStrtok(char*, char const*)>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	85 c0                	test   eax,eax
c00132a4:	74 3b                	je     c00132e1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132a6:	52                   	push   edx
c00132a7:	50                   	push   eax
c00132a8:	6a 01                	push   0x1
c00132aa:	57                   	push   edi
c00132ab:	e8 b9 fd ff ff       	call   c0013069 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00132b0:	59                   	pop    ecx
c00132b1:	5e                   	pop    esi
c00132b2:	89 c3                	mov    ebx,eax
c00132b4:	68 83 22 02 c0       	push   0xc0022283
c00132b9:	6a 00                	push   0x0
c00132bb:	e8 3a ff ff ff       	call   c00131fa <zStrtok(char*, char const*)>
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	85 c0                	test   eax,eax
c00132c5:	89 c6                	mov    esi,eax
c00132c7:	74 18                	je     c00132e1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132c9:	52                   	push   edx
c00132ca:	52                   	push   edx
c00132cb:	53                   	push   ebx
c00132cc:	57                   	push   edi
c00132cd:	e8 86 f5 ff ff       	call   c0012858 <CmEnterDirectory(Reghive_Tag*, int)>
c00132d2:	83 c4 10             	add    esp,0x10
c00132d5:	83 f8 ff             	cmp    eax,0xffffffff
c00132d8:	89 c3                	mov    ebx,eax
c00132da:	74 05                	je     c00132e1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132dc:	50                   	push   eax
c00132dd:	56                   	push   esi
c00132de:	53                   	push   ebx
c00132df:	eb c9                	jmp    c00132aa <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00132e1:	81 c4 00 01 00 00    	add    esp,0x100
c00132e7:	89 d8                	mov    eax,ebx
c00132e9:	5b                   	pop    ebx
c00132ea:	5e                   	pop    esi
c00132eb:	5f                   	pop    edi
c00132ec:	c3                   	ret    

c00132ed <CmDisplayTree(Reghive_Tag*, int, int)>:
c00132ed:	55                   	push   ebp
c00132ee:	57                   	push   edi
c00132ef:	56                   	push   esi
c00132f0:	53                   	push   ebx
c00132f1:	83 ec 5c             	sub    esp,0x5c
c00132f4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00132f8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00132fc:	85 db                	test   ebx,ebx
c00132fe:	0f 8e 84 00 00 00    	jle    c0013388 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013304:	57                   	push   edi
c0013305:	31 ed                	xor    ebp,ebp
c0013307:	6a 32                	push   0x32
c0013309:	6a 00                	push   0x0
c001330b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001330f:	57                   	push   edi
c0013310:	e8 db d1 fe ff       	call   c00004f0 <memset>
c0013315:	83 c4 0c             	add    esp,0xc
c0013318:	57                   	push   edi
c0013319:	53                   	push   ebx
c001331a:	56                   	push   esi
c001331b:	e8 31 fb ff ff       	call   c0012e51 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013320:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013324:	83 c4 10             	add    esp,0x10
c0013327:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001332b:	7d 13                	jge    c0013340 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001332d:	83 ec 0c             	sub    esp,0xc
c0013330:	45                   	inc    ebp
c0013331:	68 27 26 02 c0       	push   0xc0022627
c0013336:	e8 cf 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001333b:	83 c4 10             	add    esp,0x10
c001333e:	eb e7                	jmp    c0013327 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013340:	51                   	push   ecx
c0013341:	57                   	push   edi
c0013342:	53                   	push   ebx
c0013343:	68 25 1f 02 c0       	push   0xc0021f25
c0013348:	e8 bd 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013355:	75 1e                	jne    c0013375 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013357:	52                   	push   edx
c0013358:	52                   	push   edx
c0013359:	53                   	push   ebx
c001335a:	56                   	push   esi
c001335b:	e8 f8 f4 ff ff       	call   c0012858 <CmEnterDirectory(Reghive_Tag*, int)>
c0013360:	83 c4 0c             	add    esp,0xc
c0013363:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013367:	8d 51 04             	lea    edx,[ecx+0x4]
c001336a:	52                   	push   edx
c001336b:	50                   	push   eax
c001336c:	56                   	push   esi
c001336d:	e8 7b ff ff ff       	call   c00132ed <CmDisplayTree(Reghive_Tag*, int, int)>
c0013372:	83 c4 10             	add    esp,0x10
c0013375:	50                   	push   eax
c0013376:	50                   	push   eax
c0013377:	53                   	push   ebx
c0013378:	56                   	push   esi
c0013379:	e8 19 f5 ff ff       	call   c0012897 <CmGetNext(Reghive_Tag*, int)>
c001337e:	83 c4 10             	add    esp,0x10
c0013381:	89 c3                	mov    ebx,eax
c0013383:	e9 74 ff ff ff       	jmp    c00132fc <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013388:	83 c4 5c             	add    esp,0x5c
c001338b:	5b                   	pop    ebx
c001338c:	5e                   	pop    esi
c001338d:	5f                   	pop    edi
c001338e:	5d                   	pop    ebp
c001338f:	c3                   	ret    

c0013390 <CmSplitFinalSlashInPlace(char*)>:
c0013390:	53                   	push   ebx
c0013391:	83 ec 14             	sub    esp,0x14
c0013394:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013398:	53                   	push   ebx
c0013399:	e8 e2 d1 fe ff       	call   c0000580 <strlen>
c001339e:	83 c4 10             	add    esp,0x10
c00133a1:	48                   	dec    eax
c00133a2:	85 c0                	test   eax,eax
c00133a4:	74 15                	je     c00133bb <CmSplitFinalSlashInPlace(char*)+0x2b>
c00133a6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133aa:	8d 14 03             	lea    edx,[ebx+eax*1]
c00133ad:	75 09                	jne    c00133b8 <CmSplitFinalSlashInPlace(char*)+0x28>
c00133af:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00133b2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00133b6:	eb 05                	jmp    c00133bd <CmSplitFinalSlashInPlace(char*)+0x2d>
c00133b8:	48                   	dec    eax
c00133b9:	eb e7                	jmp    c00133a2 <CmSplitFinalSlashInPlace(char*)+0x12>
c00133bb:	31 c0                	xor    eax,eax
c00133bd:	83 c4 08             	add    esp,0x8
c00133c0:	5b                   	pop    ebx
c00133c1:	c3                   	ret    

c00133c2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00133c2:	55                   	push   ebp
c00133c3:	57                   	push   edi
c00133c4:	56                   	push   esi
c00133c5:	53                   	push   ebx
c00133c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133cc:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00133d3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00133d6:	8d 43 01             	lea    eax,[ebx+0x1]
c00133d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133dd:	89 f0                	mov    eax,esi
c00133df:	3c 40                	cmp    al,0x40
c00133e1:	75 1b                	jne    c00133fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00133e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00133e6:	85 c0                	test   eax,eax
c00133e8:	74 08                	je     c00133f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00133ea:	83 f8 3a             	cmp    eax,0x3a
c00133ed:	74 03                	je     c00133f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00133ef:	43                   	inc    ebx
c00133f0:	eb f1                	jmp    c00133e3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00133f2:	85 c0                	test   eax,eax
c00133f4:	0f 84 45 01 00 00    	je     c001353f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00133fa:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133fd:	43                   	inc    ebx
c00133fe:	50                   	push   eax
c00133ff:	6a 40                	push   0x40
c0013401:	6a 00                	push   0x0
c0013403:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013407:	50                   	push   eax
c0013408:	e8 e3 d0 fe ff       	call   c00004f0 <memset>
c001340d:	89 f1                	mov    ecx,esi
c001340f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013416:	31 c0                	xor    eax,eax
c0013418:	83 c4 10             	add    esp,0x10
c001341b:	0f be f1             	movsx  esi,cl
c001341e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013421:	85 d2                	test   edx,edx
c0013423:	89 d1                	mov    ecx,edx
c0013425:	0f 84 14 01 00 00    	je     c001353f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001342b:	3d c7 00 00 00       	cmp    eax,0xc7
c0013430:	0f 8f 09 01 00 00    	jg     c001353f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013436:	83 fa 0a             	cmp    edx,0xa
c0013439:	0f 85 f1 00 00 00    	jne    c0013530 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c001343f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013444:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013449:	89 c8                	mov    eax,ecx
c001344b:	a8 df                	test   al,0xdf
c001344d:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013452:	83 f9 23             	cmp    ecx,0x23
c0013455:	0f 94 c2             	sete   dl
c0013458:	89 d5                	mov    ebp,edx
c001345a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001345e:	09 ea                	or     edx,ebp
c0013460:	80 e2 01             	and    dl,0x1
c0013463:	75 47                	jne    c00134ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013465:	83 e8 09             	sub    eax,0x9
c0013468:	3c 01                	cmp    al,0x1
c001346a:	76 40                	jbe    c00134ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001346c:	83 f9 5b             	cmp    ecx,0x5b
c001346f:	75 42                	jne    c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013471:	83 fe 40             	cmp    esi,0x40
c0013474:	75 36                	jne    c00134ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c001347d:	55                   	push   ebp
c001347e:	e8 fd d0 fe ff       	call   c0000580 <strlen>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	83 f8 3f             	cmp    eax,0x3f
c0013489:	0f 87 b0 00 00 00    	ja     c001353f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001348f:	50                   	push   eax
c0013490:	50                   	push   eax
c0013491:	55                   	push   ebp
c0013492:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013496:	55                   	push   ebp
c0013497:	e8 b4 d1 fe ff       	call   c0000650 <strcpy>
c001349c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001349f:	e8 dc d0 fe ff       	call   c0000580 <strlen>
c00134a4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	31 d2                	xor    edx,edx
c00134ae:	e9 84 00 00 00       	jmp    c0013537 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00134b3:	83 fe 40             	cmp    esi,0x40
c00134b6:	74 06                	je     c00134be <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00134b8:	8d 54 24 58          	lea    edx,[esp+0x58]
c00134bc:	eb 19                	jmp    c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00134be:	51                   	push   ecx
c00134bf:	51                   	push   ecx
c00134c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134c8:	50                   	push   eax
c00134c9:	e8 b2 d2 fe ff       	call   c0000780 <strcmp>
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	85 c0                	test   eax,eax
c00134d3:	75 d7                	jne    c00134ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134d5:	eb e1                	jmp    c00134b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00134d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00134da:	85 c9                	test   ecx,ecx
c00134dc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134e1:	83 f9 3d             	cmp    ecx,0x3d
c00134e4:	0f 94 c0             	sete   al
c00134e7:	89 c5                	mov    ebp,eax
c00134e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134ed:	09 e8                	or     eax,ebp
c00134ef:	a8 01                	test   al,0x1
c00134f1:	89 c5                	mov    ebp,eax
c00134f3:	75 03                	jne    c00134f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00134f5:	42                   	inc    edx
c00134f6:	eb df                	jmp    c00134d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00134f8:	85 c9                	test   ecx,ecx
c00134fa:	74 43                	je     c001353f <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013500:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013503:	52                   	push   edx
c0013504:	52                   	push   edx
c0013505:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013509:	50                   	push   eax
c001350a:	53                   	push   ebx
c001350b:	e8 70 d2 fe ff       	call   c0000780 <strcmp>
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013517:	85 c0                	test   eax,eax
c0013519:	75 91                	jne    c00134ac <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001351b:	50                   	push   eax
c001351c:	42                   	inc    edx
c001351d:	50                   	push   eax
c001351e:	52                   	push   edx
c001351f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013526:	e8 25 d1 fe ff       	call   c0000650 <strcpy>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	eb 11                	jmp    c0013541 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013530:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013534:	8d 50 01             	lea    edx,[eax+0x1]
c0013537:	47                   	inc    edi
c0013538:	89 d0                	mov    eax,edx
c001353a:	e9 df fe ff ff       	jmp    c001341e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c001353f:	31 ed                	xor    ebp,ebp
c0013541:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013547:	89 e8                	mov    eax,ebp
c0013549:	5b                   	pop    ebx
c001354a:	5e                   	pop    esi
c001354b:	5f                   	pop    edi
c001354c:	5d                   	pop    ebp
c001354d:	c3                   	ret    

c001354e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001354e:	57                   	push   edi
c001354f:	56                   	push   esi
c0013550:	53                   	push   ebx
c0013551:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013557:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001355e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013565:	53                   	push   ebx
c0013566:	e8 15 d0 fe ff       	call   c0000580 <strlen>
c001356b:	89 34 24             	mov    DWORD PTR [esp],esi
c001356e:	89 c7                	mov    edi,eax
c0013570:	e8 0b d0 fe ff       	call   c0000580 <strlen>
c0013575:	83 c4 10             	add    esp,0x10
c0013578:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001357c:	3d ff 00 00 00       	cmp    eax,0xff
c0013581:	0f 87 d3 00 00 00    	ja     c001365a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013587:	57                   	push   edi
c0013588:	57                   	push   edi
c0013589:	56                   	push   esi
c001358a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001358e:	56                   	push   esi
c001358f:	e8 bc d0 fe ff       	call   c0000650 <strcpy>
c0013594:	58                   	pop    eax
c0013595:	5a                   	pop    edx
c0013596:	68 83 22 02 c0       	push   0xc0022283
c001359b:	56                   	push   esi
c001359c:	e8 cf d2 fe ff       	call   c0000870 <strcat>
c00135a1:	59                   	pop    ecx
c00135a2:	5f                   	pop    edi
c00135a3:	53                   	push   ebx
c00135a4:	56                   	push   esi
c00135a5:	e8 c6 d2 fe ff       	call   c0000870 <strcat>
c00135aa:	58                   	pop    eax
c00135ab:	5a                   	pop    edx
c00135ac:	68 2f 1f 02 c0       	push   0xc0021f2f
c00135b1:	56                   	push   esi
c00135b2:	e8 b9 d2 fe ff       	call   c0000870 <strcat>
c00135b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135be:	e8 10 45 ff ff       	call   c0007ad3 <malloc>
c00135c3:	83 c4 0c             	add    esp,0xc
c00135c6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00135cc:	56                   	push   esi
c00135cd:	50                   	push   eax
c00135ce:	89 c3                	mov    ebx,eax
c00135d0:	e8 59 81 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c00135d5:	83 c4 10             	add    esp,0x10
c00135d8:	85 db                	test   ebx,ebx
c00135da:	74 7e                	je     c001365a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135dc:	51                   	push   ecx
c00135dd:	51                   	push   ecx
c00135de:	6a 01                	push   0x1
c00135e0:	53                   	push   ebx
c00135e1:	e8 04 82 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c00135e6:	83 c4 10             	add    esp,0x10
c00135e9:	85 c0                	test   eax,eax
c00135eb:	74 08                	je     c00135f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135ed:	83 ec 0c             	sub    esp,0xc
c00135f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135f2:	53                   	push   ebx
c00135f3:	eb 5f                	jmp    c0013654 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135f5:	52                   	push   edx
c00135f6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135fa:	50                   	push   eax
c00135fb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135ff:	50                   	push   eax
c0013600:	53                   	push   ebx
c0013601:	e8 e6 84 ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c0013606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001360a:	83 c4 10             	add    esp,0x10
c001360d:	89 c1                	mov    ecx,eax
c001360f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013613:	74 31                	je     c0013646 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013615:	83 ec 0c             	sub    esp,0xc
c0013618:	50                   	push   eax
c0013619:	e8 b5 44 ff ff       	call   c0007ad3 <malloc>
c001361e:	89 c6                	mov    esi,eax
c0013620:	58                   	pop    eax
c0013621:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013623:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013627:	52                   	push   edx
c0013628:	56                   	push   esi
c0013629:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001362d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013631:	53                   	push   ebx
c0013632:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013635:	83 c4 20             	add    esp,0x20
c0013638:	85 c0                	test   eax,eax
c001363a:	75 0a                	jne    c0013646 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001363c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013640:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013644:	74 18                	je     c001365e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	53                   	push   ebx
c001364a:	e8 f9 81 ff ff       	call   c000b848 <File::close()>
c001364f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013654:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	31 c0                	xor    eax,eax
c001365c:	eb 3b                	jmp    c0013699 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001365e:	83 ec 0c             	sub    esp,0xc
c0013661:	53                   	push   ebx
c0013662:	e8 e1 81 ff ff       	call   c000b848 <File::close()>
c0013667:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001366c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001366f:	83 c4 0c             	add    esp,0xc
c0013672:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013679:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013680:	56                   	push   esi
c0013681:	e8 3c fd ff ff       	call   c00133c2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013686:	89 34 24             	mov    DWORD PTR [esp],esi
c0013689:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001368d:	e8 51 44 ff ff       	call   c0007ae3 <free>
c0013692:	83 c4 10             	add    esp,0x10
c0013695:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013699:	81 c4 20 01 00 00    	add    esp,0x120
c001369f:	5b                   	pop    ebx
c00136a0:	5e                   	pop    esi
c00136a1:	5f                   	pop    edi
c00136a2:	c3                   	ret    

c00136a3 <Reg::getLine(char*, char*, char*)>:
c00136a3:	57                   	push   edi
c00136a4:	56                   	push   esi
c00136a5:	53                   	push   ebx
c00136a6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136b2:	57                   	push   edi
c00136b3:	56                   	push   esi
c00136b4:	53                   	push   ebx
c00136b5:	68 34 1f 02 c0       	push   0xc0021f34
c00136ba:	e8 8f fe ff ff       	call   c001354e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	84 c0                	test   al,al
c00136c4:	75 10                	jne    c00136d6 <Reg::getLine(char*, char*, char*)+0x33>
c00136c6:	57                   	push   edi
c00136c7:	56                   	push   esi
c00136c8:	53                   	push   ebx
c00136c9:	68 59 1f 02 c0       	push   0xc0021f59
c00136ce:	e8 7b fe ff ff       	call   c001354e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136d3:	83 c4 10             	add    esp,0x10
c00136d6:	5b                   	pop    ebx
c00136d7:	5e                   	pop    esi
c00136d8:	5f                   	pop    edi
c00136d9:	c3                   	ret    

c00136da <Reg::readInt(char*, char*, int*)>:
c00136da:	55                   	push   ebp
c00136db:	57                   	push   edi
c00136dc:	56                   	push   esi
c00136dd:	53                   	push   ebx
c00136de:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136e4:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00136e8:	55                   	push   ebp
c00136e9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136f0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136f7:	e8 a7 ff ff ff       	call   c00136a3 <Reg::getLine(char*, char*, char*)>
c00136fc:	83 c4 10             	add    esp,0x10
c00136ff:	84 c0                	test   al,al
c0013701:	0f 84 b6 00 00 00    	je     c00137bd <Reg::readInt(char*, char*, int*)+0xe3>
c0013707:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c001370c:	83 fa 2b             	cmp    edx,0x2b
c001370f:	74 0c                	je     c001371d <Reg::readInt(char*, char*, int*)+0x43>
c0013711:	83 fa 2d             	cmp    edx,0x2d
c0013714:	75 0e                	jne    c0013724 <Reg::readInt(char*, char*, int*)+0x4a>
c0013716:	ba 01 00 00 00       	mov    edx,0x1
c001371b:	eb 0b                	jmp    c0013728 <Reg::readInt(char*, char*, int*)+0x4e>
c001371d:	ba 01 00 00 00       	mov    edx,0x1
c0013722:	eb 02                	jmp    c0013726 <Reg::readInt(char*, char*, int*)+0x4c>
c0013724:	31 d2                	xor    edx,edx
c0013726:	31 c0                	xor    eax,eax
c0013728:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001372d:	be 0a 00 00 00       	mov    esi,0xa
c0013732:	75 21                	jne    c0013755 <Reg::readInt(char*, char*, int*)+0x7b>
c0013734:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013739:	83 f9 78             	cmp    ecx,0x78
c001373c:	75 0a                	jne    c0013748 <Reg::readInt(char*, char*, int*)+0x6e>
c001373e:	83 c2 02             	add    edx,0x2
c0013741:	be 10 00 00 00       	mov    esi,0x10
c0013746:	eb 0d                	jmp    c0013755 <Reg::readInt(char*, char*, int*)+0x7b>
c0013748:	83 f9 62             	cmp    ecx,0x62
c001374b:	75 08                	jne    c0013755 <Reg::readInt(char*, char*, int*)+0x7b>
c001374d:	83 c2 02             	add    edx,0x2
c0013750:	be 02 00 00 00       	mov    esi,0x2
c0013755:	01 d5                	add    ebp,edx
c0013757:	31 d2                	xor    edx,edx
c0013759:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c001375d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013761:	85 c9                	test   ecx,ecx
c0013763:	0f 94 c3             	sete   bl
c0013766:	83 f9 0d             	cmp    ecx,0xd
c0013769:	89 df                	mov    edi,ebx
c001376b:	0f 94 c3             	sete   bl
c001376e:	09 df                	or     edi,ebx
c0013770:	89 fb                	mov    ebx,edi
c0013772:	83 e7 01             	and    edi,0x1
c0013775:	75 35                	jne    c00137ac <Reg::readInt(char*, char*, int*)+0xd2>
c0013777:	0f af d6             	imul   edx,esi
c001377a:	83 fe 10             	cmp    esi,0x10
c001377d:	75 26                	jne    c00137a5 <Reg::readInt(char*, char*, int*)+0xcb>
c001377f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013783:	83 ef 41             	sub    edi,0x41
c0013786:	89 fb                	mov    ebx,edi
c0013788:	80 fb 05             	cmp    bl,0x5
c001378b:	77 06                	ja     c0013793 <Reg::readInt(char*, char*, int*)+0xb9>
c001378d:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013791:	eb 16                	jmp    c00137a9 <Reg::readInt(char*, char*, int*)+0xcf>
c0013793:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013797:	83 eb 61             	sub    ebx,0x61
c001379a:	80 fb 05             	cmp    bl,0x5
c001379d:	77 06                	ja     c00137a5 <Reg::readInt(char*, char*, int*)+0xcb>
c001379f:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00137a3:	eb 04                	jmp    c00137a9 <Reg::readInt(char*, char*, int*)+0xcf>
c00137a5:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00137a9:	45                   	inc    ebp
c00137aa:	eb ad                	jmp    c0013759 <Reg::readInt(char*, char*, int*)+0x7f>
c00137ac:	84 c0                	test   al,al
c00137ae:	74 02                	je     c00137b2 <Reg::readInt(char*, char*, int*)+0xd8>
c00137b0:	f7 da                	neg    edx
c00137b2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00137b9:	89 10                	mov    DWORD PTR [eax],edx
c00137bb:	88 d8                	mov    al,bl
c00137bd:	81 c4 ec 00 00 00    	add    esp,0xec
c00137c3:	5b                   	pop    ebx
c00137c4:	5e                   	pop    esi
c00137c5:	5f                   	pop    edi
c00137c6:	5d                   	pop    ebp
c00137c7:	c3                   	ret    

c00137c8 <Reg::readString(char*, char*, char*, int)>:
c00137c8:	57                   	push   edi
c00137c9:	56                   	push   esi
c00137ca:	53                   	push   ebx
c00137cb:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137d1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137d5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137dc:	57                   	push   edi
c00137dd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137e4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137eb:	e8 b3 fe ff ff       	call   c00136a3 <Reg::getLine(char*, char*, char*)>
c00137f0:	83 c4 10             	add    esp,0x10
c00137f3:	84 c0                	test   al,al
c00137f5:	89 c6                	mov    esi,eax
c00137f7:	74 44                	je     c001383d <Reg::readString(char*, char*, char*, int)+0x75>
c00137f9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013800:	31 c0                	xor    eax,eax
c0013802:	4a                   	dec    edx
c0013803:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013806:	84 c9                	test   cl,cl
c0013808:	74 0f                	je     c0013819 <Reg::readString(char*, char*, char*, int)+0x51>
c001380a:	39 c2                	cmp    edx,eax
c001380c:	7e 0b                	jle    c0013819 <Reg::readString(char*, char*, char*, int)+0x51>
c001380e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013811:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013816:	40                   	inc    eax
c0013817:	eb ea                	jmp    c0013803 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013819:	83 ec 0c             	sub    esp,0xc
c001381c:	53                   	push   ebx
c001381d:	e8 5e cd fe ff       	call   c0000580 <strlen>
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001382a:	75 11                	jne    c001383d <Reg::readString(char*, char*, char*, int)+0x75>
c001382c:	83 ec 0c             	sub    esp,0xc
c001382f:	53                   	push   ebx
c0013830:	e8 4b cd fe ff       	call   c0000580 <strlen>
c0013835:	83 c4 10             	add    esp,0x10
c0013838:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001383d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013843:	89 f0                	mov    eax,esi
c0013845:	5b                   	pop    ebx
c0013846:	5e                   	pop    esi
c0013847:	5f                   	pop    edi
c0013848:	c3                   	ret    

c0013849 <Reg::readBool(char*, char*, bool*)>:
c0013849:	83 ec 20             	sub    esp,0x20
c001384c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013850:	50                   	push   eax
c0013851:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013859:	e8 7c fe ff ff       	call   c00136da <Reg::readInt(char*, char*, int*)>
c001385e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013862:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013867:	0f 95 02             	setne  BYTE PTR [edx]
c001386a:	83 c4 2c             	add    esp,0x2c
c001386d:	c3                   	ret    

c001386e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001386e:	53                   	push   ebx
c001386f:	83 ec 1c             	sub    esp,0x1c
c0013872:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013876:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001387a:	50                   	push   eax
c001387b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001387f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013883:	e8 c1 ff ff ff       	call   c0013849 <Reg::readBool(char*, char*, bool*)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	84 c0                	test   al,al
c001388d:	74 04                	je     c0013893 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001388f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013893:	83 c4 18             	add    esp,0x18
c0013896:	88 d8                	mov    al,bl
c0013898:	5b                   	pop    ebx
c0013899:	c3                   	ret    

c001389a <Reg::readIntWithDefault(char*, char*, int)>:
c001389a:	53                   	push   ebx
c001389b:	83 ec 1c             	sub    esp,0x1c
c001389e:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138a2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00138a6:	50                   	push   eax
c00138a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138af:	e8 26 fe ff ff       	call   c00136da <Reg::readInt(char*, char*, int*)>
c00138b4:	83 c4 10             	add    esp,0x10
c00138b7:	84 c0                	test   al,al
c00138b9:	74 04                	je     c00138bf <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00138bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138bf:	83 c4 18             	add    esp,0x18
c00138c2:	89 d8                	mov    eax,ebx
c00138c4:	5b                   	pop    ebx
c00138c5:	c3                   	ret    

c00138c6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00138c6:	57                   	push   edi
c00138c7:	56                   	push   esi
c00138c8:	53                   	push   ebx
c00138c9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138d5:	56                   	push   esi
c00138d6:	57                   	push   edi
c00138d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138df:	e8 e4 fe ff ff       	call   c00137c8 <Reg::readString(char*, char*, char*, int)>
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	84 c0                	test   al,al
c00138e9:	75 16                	jne    c0013901 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138eb:	50                   	push   eax
c00138ec:	56                   	push   esi
c00138ed:	6a 00                	push   0x0
c00138ef:	57                   	push   edi
c00138f0:	e8 fb cb fe ff       	call   c00004f0 <memset>
c00138f5:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138f8:	89 de                	mov    esi,ebx
c00138fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	89 df                	mov    edi,ebx
c0013901:	5b                   	pop    ebx
c0013902:	89 f8                	mov    eax,edi
c0013904:	5e                   	pop    esi
c0013905:	5f                   	pop    edi
c0013906:	c3                   	ret    

c0013907 <SysEject(regs*)>:
c0013907:	83 ec 0c             	sub    esp,0xc
c001390a:	83 ca ff             	or     edx,0xffffffff
c001390d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013911:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013914:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013919:	83 e9 41             	sub    ecx,0x41
c001391c:	83 f9 19             	cmp    ecx,0x19
c001391f:	77 18                	ja     c0013939 <SysEject(regs*)+0x32>
c0013921:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013928:	85 c9                	test   ecx,ecx
c001392a:	74 0d                	je     c0013939 <SysEject(regs*)+0x32>
c001392c:	83 ec 0c             	sub    esp,0xc
c001392f:	51                   	push   ecx
c0013930:	e8 87 a0 ff ff       	call   c000d9bc <LogicalDisk::eject()>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	99                   	cdq    
c0013939:	83 c4 0c             	add    esp,0xc
c001393c:	c3                   	ret    

c001393d <SysExit(regs*)>:
c001393d:	83 ec 18             	sub    esp,0x18
c0013940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013944:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013947:	e8 10 2b 00 00       	call   c001645c <terminateTask(int)>
c001394c:	83 c8 ff             	or     eax,0xffffffff
c001394f:	83 c4 1c             	add    esp,0x1c
c0013952:	89 c2                	mov    edx,eax
c0013954:	c3                   	ret    

c0013955 <SysGetCwd(regs*)>:
c0013955:	83 ec 10             	sub    esp,0x10
c0013958:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001395c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001395f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013967:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001396a:	e8 8f 7b ff ff       	call   c000b4fe <Fs::getcwd(Process*, char*, int)>
c001396f:	83 c4 1c             	add    esp,0x1c
c0013972:	99                   	cdq    
c0013973:	c3                   	ret    

c0013974 <SysGetPID(regs*)>:
c0013974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013979:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001397c:	8b 00                	mov    eax,DWORD PTR [eax]
c001397e:	99                   	cdq    
c001397f:	c3                   	ret    

c0013980 <SysGetRAMData(regs*)>:
c0013980:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001398a:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013990:	99                   	cdq    
c0013991:	f7 f9                	idiv   ecx
c0013993:	c1 e0 18             	shl    eax,0x18
c0013996:	09 c8                	or     eax,ecx
c0013998:	99                   	cdq    
c0013999:	c3                   	ret    

c001399a <SysGetVGAPtr(regs*)>:
c001399a:	55                   	push   ebp
c001399b:	57                   	push   edi
c001399c:	56                   	push   esi
c001399d:	53                   	push   ebx
c001399e:	83 ec 18             	sub    esp,0x18
c00139a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00139a8:	e8 7b 25 00 00       	call   c0015f28 <Thr::processFromPID(int)>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	89 c1                	mov    ecx,eax
c00139b2:	b8 01 00 00 00       	mov    eax,0x1
c00139b7:	85 c9                	test   ecx,ecx
c00139b9:	74 57                	je     c0013a12 <SysGetVGAPtr(regs*)+0x78>
c00139bb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00139bf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00139c5:	74 0c                	je     c00139d3 <SysGetVGAPtr(regs*)+0x39>
c00139c7:	83 ec 0c             	sub    esp,0xc
c00139ca:	55                   	push   ebp
c00139cb:	e8 9f 4d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00139d6:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139db:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00139de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139e0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00139e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139e6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139ef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00139f2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00139f8:	50                   	push   eax
c00139f9:	50                   	push   eax
c00139fa:	68 74 1f 02 c0       	push   0xc0021f74
c00139ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a02:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a07:	50                   	push   eax
c0013a08:	e8 43 cc fe ff       	call   c0000650 <strcpy>
c0013a0d:	83 c4 10             	add    esp,0x10
c0013a10:	31 c0                	xor    eax,eax
c0013a12:	83 c4 0c             	add    esp,0xc
c0013a15:	31 d2                	xor    edx,edx
c0013a17:	5b                   	pop    ebx
c0013a18:	5e                   	pop    esi
c0013a19:	5f                   	pop    edi
c0013a1a:	5d                   	pop    ebp
c0013a1b:	c3                   	ret    

c0013a1c <SysKill(regs*)>:
c0013a1c:	53                   	push   ebx
c0013a1d:	83 ec 08             	sub    esp,0x8
c0013a20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a24:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a28:	75 16                	jne    c0013a40 <SysKill(regs*)+0x24>
c0013a2a:	83 ec 0c             	sub    esp,0xc
c0013a2d:	68 7e 1f 02 c0       	push   0xc0021f7e
c0013a32:	e8 a2 d7 ff ff       	call   c00111d9 <KePanic(char const*)>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	e9 89 00 00 00       	jmp    c0013ac8 <SysKill(regs*)+0xac>
c0013a3f:	90                   	nop
c0013a40:	83 ec 0c             	sub    esp,0xc
c0013a43:	68 e4 96 02 c0       	push   0xc00296e4
c0013a48:	e8 3f bd 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	85 c0                	test   eax,eax
c0013a55:	74 19                	je     c0013a70 <SysKill(regs*)+0x54>
c0013a57:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a5a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a5d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a5f:	74 33                	je     c0013a94 <SysKill(regs*)+0x78>
c0013a61:	52                   	push   edx
c0013a62:	52                   	push   edx
c0013a63:	50                   	push   eax
c0013a64:	68 e4 96 02 c0       	push   0xc00296e4
c0013a69:	e8 3e c0 00 00       	call   c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a6e:	eb e0                	jmp    c0013a50 <SysKill(regs*)+0x34>
c0013a70:	83 ec 0c             	sub    esp,0xc
c0013a73:	68 d8 96 02 c0       	push   0xc00296d8
c0013a78:	e8 0f bd 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a80:	83 c4 10             	add    esp,0x10
c0013a83:	85 c0                	test   eax,eax
c0013a85:	74 41                	je     c0013ac8 <SysKill(regs*)+0xac>
c0013a87:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a8a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a8d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a8f:	75 27                	jne    c0013ab8 <SysKill(regs*)+0x9c>
c0013a91:	8d 76 00             	lea    esi,[esi+0x0]
c0013a94:	51                   	push   ecx
c0013a95:	51                   	push   ecx
c0013a96:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aa1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013aa7:	e8 cb db ff ff       	call   c0011677 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013aac:	83 c4 10             	add    esp,0x10
c0013aaf:	31 c0                	xor    eax,eax
c0013ab1:	31 d2                	xor    edx,edx
c0013ab3:	eb 1b                	jmp    c0013ad0 <SysKill(regs*)+0xb4>
c0013ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab8:	52                   	push   edx
c0013ab9:	52                   	push   edx
c0013aba:	50                   	push   eax
c0013abb:	68 d8 96 02 c0       	push   0xc00296d8
c0013ac0:	e8 e7 bf 00 00       	call   c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ac5:	eb b9                	jmp    c0013a80 <SysKill(regs*)+0x64>
c0013ac7:	90                   	nop
c0013ac8:	83 c8 ff             	or     eax,0xffffffff
c0013acb:	89 c2                	mov    edx,eax
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 c4 08             	add    esp,0x8
c0013ad3:	5b                   	pop    ebx
c0013ad4:	c3                   	ret    

c0013ad5 <SysLoadDLL(regs*)>:
c0013ad5:	56                   	push   esi
c0013ad6:	31 d2                	xor    edx,edx
c0013ad8:	53                   	push   ebx
c0013ad9:	b8 01 00 00 00       	mov    eax,0x1
c0013ade:	51                   	push   ecx
c0013adf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ae3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013ae7:	0f 84 8c 00 00 00    	je     c0013b79 <SysLoadDLL(regs*)+0xa4>
c0013aed:	83 ec 0c             	sub    esp,0xc
c0013af0:	68 14 01 00 00       	push   0x114
c0013af5:	e8 d9 3f ff ff       	call   c0007ad3 <malloc>
c0013afa:	83 c4 0c             	add    esp,0xc
c0013afd:	89 c3                	mov    ebx,eax
c0013aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b04:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b07:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b0a:	53                   	push   ebx
c0013b0b:	e8 1e 7c ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	31 d2                	xor    edx,edx
c0013b15:	85 db                	test   ebx,ebx
c0013b17:	b8 02 00 00 00       	mov    eax,0x2
c0013b1c:	74 5b                	je     c0013b79 <SysLoadDLL(regs*)+0xa4>
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	53                   	push   ebx
c0013b22:	e8 87 7f ff ff       	call   c000baae <File::exists()>
c0013b27:	83 c4 10             	add    esp,0x10
c0013b2a:	84 c0                	test   al,al
c0013b2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b2e:	75 11                	jne    c0013b41 <SysLoadDLL(regs*)+0x6c>
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	53                   	push   ebx
c0013b34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	b8 03 00 00 00       	mov    eax,0x3
c0013b3f:	eb 36                	jmp    c0013b77 <SysLoadDLL(regs*)+0xa2>
c0013b41:	83 ec 0c             	sub    esp,0xc
c0013b44:	53                   	push   ebx
c0013b45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b48:	58                   	pop    eax
c0013b49:	5a                   	pop    edx
c0013b4a:	6a 00                	push   0x0
c0013b4c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b4f:	e8 1c 15 00 00       	call   c0015070 <Thr::loadDLL(char const*, bool)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	31 d2                	xor    edx,edx
c0013b59:	89 c1                	mov    ecx,eax
c0013b5b:	b8 04 00 00 00       	mov    eax,0x4
c0013b60:	85 c9                	test   ecx,ecx
c0013b62:	74 15                	je     c0013b79 <SysLoadDLL(regs*)+0xa4>
c0013b64:	53                   	push   ebx
c0013b65:	53                   	push   ebx
c0013b66:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b6c:	51                   	push   ecx
c0013b6d:	e8 3e 17 00 00       	call   c00152b0 <Thr::executeDLL(unsigned long, void*)>
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	31 c0                	xor    eax,eax
c0013b77:	31 d2                	xor    edx,edx
c0013b79:	59                   	pop    ecx
c0013b7a:	5b                   	pop    ebx
c0013b7b:	5e                   	pop    esi
c0013b7c:	c3                   	ret    

c0013b7d <SysRead(regs*)>:
c0013b7d:	57                   	push   edi
c0013b7e:	56                   	push   esi
c0013b7f:	53                   	push   ebx
c0013b80:	83 ec 10             	sub    esp,0x10
c0013b83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b87:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b8a:	83 f8 02             	cmp    eax,0x2
c0013b8d:	77 10                	ja     c0013b9f <SysRead(regs*)+0x22>
c0013b8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b97:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b9d:	eb 0e                	jmp    c0013bad <SysRead(regs*)+0x30>
c0013b9f:	83 ec 0c             	sub    esp,0xc
c0013ba2:	50                   	push   eax
c0013ba3:	e8 f3 58 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	89 c1                	mov    ecx,eax
c0013bad:	83 c8 ff             	or     eax,0xffffffff
c0013bb0:	85 c9                	test   ecx,ecx
c0013bb2:	89 c2                	mov    edx,eax
c0013bb4:	74 28                	je     c0013bde <SysRead(regs*)+0x61>
c0013bb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	31 ff                	xor    edi,edi
c0013bc3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bc7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bc9:	52                   	push   edx
c0013bca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bcd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bd0:	57                   	push   edi
c0013bd1:	56                   	push   esi
c0013bd2:	51                   	push   ecx
c0013bd3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013bda:	83 c4 20             	add    esp,0x20
c0013bdd:	99                   	cdq    
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	5b                   	pop    ebx
c0013be2:	5e                   	pop    esi
c0013be3:	5f                   	pop    edi
c0013be4:	c3                   	ret    

c0013be5 <SysRegisterSignal(regs*)>:
c0013be5:	83 ec 18             	sub    esp,0x18
c0013be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bec:	6a 00                	push   0x0
c0013bee:	6a 00                	push   0x0
c0013bf0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013bf3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013bf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bfe:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c04:	e8 38 da ff ff       	call   c0011641 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c09:	83 c4 2c             	add    esp,0x2c
c0013c0c:	99                   	cdq    
c0013c0d:	c3                   	ret    

c0013c0e <SysRegistryGetTypeFromPath(regs*)>:
c0013c0e:	57                   	push   edi
c0013c0f:	56                   	push   esi
c0013c10:	53                   	push   ebx
c0013c11:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c17:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c1e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c21:	68 9f 1f 02 c0       	push   0xc0021f9f
c0013c26:	e8 df 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c2b:	5a                   	pop    edx
c0013c2c:	59                   	pop    ecx
c0013c2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c30:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c33:	e8 34 f6 ff ff       	call   c001326c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c38:	5f                   	pop    edi
c0013c39:	5a                   	pop    edx
c0013c3a:	89 c6                	mov    esi,eax
c0013c3c:	50                   	push   eax
c0013c3d:	68 bf 1f 02 c0       	push   0xc0021fbf
c0013c42:	e8 c3 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	85 f6                	test   esi,esi
c0013c4c:	74 28                	je     c0013c76 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c4e:	50                   	push   eax
c0013c4f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013c53:	57                   	push   edi
c0013c54:	56                   	push   esi
c0013c55:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c58:	e8 f4 f1 ff ff       	call   c0012e51 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013c5d:	83 c4 0c             	add    esp,0xc
c0013c60:	57                   	push   edi
c0013c61:	50                   	push   eax
c0013c62:	89 c3                	mov    ebx,eax
c0013c64:	68 c7 1f 02 c0       	push   0xc0021fc7
c0013c69:	e8 9c 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c6e:	89 d8                	mov    eax,ebx
c0013c70:	83 c4 10             	add    esp,0x10
c0013c73:	99                   	cdq    
c0013c74:	eb 05                	jmp    c0013c7b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c76:	83 c8 ff             	or     eax,0xffffffff
c0013c79:	89 c2                	mov    edx,eax
c0013c7b:	81 c4 30 01 00 00    	add    esp,0x130
c0013c81:	5b                   	pop    ebx
c0013c82:	5e                   	pop    esi
c0013c83:	5f                   	pop    edi
c0013c84:	c3                   	ret    

c0013c85 <SysRegistryReadExtent(regs*)>:
c0013c85:	83 ec 1c             	sub    esp,0x1c
c0013c88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c8c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c8f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c92:	85 c0                	test   eax,eax
c0013c94:	79 1f                	jns    c0013cb5 <SysRegistryReadExtent(regs*)+0x30>
c0013c96:	52                   	push   edx
c0013c97:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c9c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013ca0:	52                   	push   edx
c0013ca1:	50                   	push   eax
c0013ca2:	51                   	push   ecx
c0013ca3:	e8 9b f0 ff ff       	call   c0012d43 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013ca8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cb0:	83 c4 10             	add    esp,0x10
c0013cb3:	eb 14                	jmp    c0013cc9 <SysRegistryReadExtent(regs*)+0x44>
c0013cb5:	83 ec 04             	sub    esp,0x4
c0013cb8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013cbb:	50                   	push   eax
c0013cbc:	51                   	push   ecx
c0013cbd:	e8 1f eb ff ff       	call   c00127e1 <CmGetString(Reghive_Tag*, int, char*)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	31 c0                	xor    eax,eax
c0013cc7:	31 d2                	xor    edx,edx
c0013cc9:	83 c4 1c             	add    esp,0x1c
c0013ccc:	c3                   	ret    

c0013ccd <SysRegistryPathToExtentLookup(regs*)>:
c0013ccd:	53                   	push   ebx
c0013cce:	83 ec 10             	sub    esp,0x10
c0013cd1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cd5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd8:	68 dd 1f 02 c0       	push   0xc0021fdd
c0013cdd:	e8 28 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ce2:	58                   	pop    eax
c0013ce3:	5a                   	pop    edx
c0013ce4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ce7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cea:	e8 7d f5 ff ff       	call   c001326c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cef:	83 c4 18             	add    esp,0x18
c0013cf2:	5b                   	pop    ebx
c0013cf3:	99                   	cdq    
c0013cf4:	c3                   	ret    

c0013cf5 <SysRegistryEnterDirectory(regs*)>:
c0013cf5:	53                   	push   ebx
c0013cf6:	83 ec 10             	sub    esp,0x10
c0013cf9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cfd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d00:	68 00 20 02 c0       	push   0xc0022000
c0013d05:	e8 00 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d0a:	58                   	pop    eax
c0013d0b:	5a                   	pop    edx
c0013d0c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d0f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d12:	e8 41 eb ff ff       	call   c0012858 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d17:	83 c4 18             	add    esp,0x18
c0013d1a:	5b                   	pop    ebx
c0013d1b:	99                   	cdq    
c0013d1c:	c3                   	ret    

c0013d1d <SysRegistryGetNext(regs*)>:
c0013d1d:	53                   	push   ebx
c0013d1e:	83 ec 10             	sub    esp,0x10
c0013d21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d28:	68 1e 20 02 c0       	push   0xc002201e
c0013d2d:	e8 d8 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d32:	58                   	pop    eax
c0013d33:	5a                   	pop    edx
c0013d34:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d37:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d3a:	e8 58 eb ff ff       	call   c0012897 <CmGetNext(Reghive_Tag*, int)>
c0013d3f:	83 c4 18             	add    esp,0x18
c0013d42:	5b                   	pop    ebx
c0013d43:	99                   	cdq    
c0013d44:	c3                   	ret    

c0013d45 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d45:	57                   	push   edi
c0013d46:	56                   	push   esi
c0013d47:	53                   	push   ebx
c0013d48:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d4e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013d55:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d59:	57                   	push   edi
c0013d5a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013d5d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d60:	e8 ec f0 ff ff       	call   c0012e51 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d65:	89 c3                	mov    ebx,eax
c0013d67:	58                   	pop    eax
c0013d68:	5a                   	pop    edx
c0013d69:	57                   	push   edi
c0013d6a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d6d:	e8 de c8 fe ff       	call   c0000650 <strcpy>
c0013d72:	81 c4 40 01 00 00    	add    esp,0x140
c0013d78:	89 d8                	mov    eax,ebx
c0013d7a:	5b                   	pop    ebx
c0013d7b:	99                   	cdq    
c0013d7c:	5e                   	pop    esi
c0013d7d:	5f                   	pop    edi
c0013d7e:	c3                   	ret    

c0013d7f <SysRegistryOpen(regs*)>:
c0013d7f:	83 ec 18             	sub    esp,0x18
c0013d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d86:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d89:	e8 e3 e8 ff ff       	call   c0012671 <CmOpen(char const*)>
c0013d8e:	83 c4 1c             	add    esp,0x1c
c0013d91:	99                   	cdq    
c0013d92:	c3                   	ret    

c0013d93 <SysRegistryClose(regs*)>:
c0013d93:	83 ec 18             	sub    esp,0x18
c0013d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d9a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d9d:	e8 ed e9 ff ff       	call   c001278f <CmClose(Reghive_Tag*)>
c0013da2:	31 c0                	xor    eax,eax
c0013da4:	31 d2                	xor    edx,edx
c0013da6:	83 c4 1c             	add    esp,0x1c
c0013da9:	c3                   	ret    

c0013daa <SysSbrk(regs*)>:
c0013daa:	56                   	push   esi
c0013dab:	53                   	push   ebx
c0013dac:	50                   	push   eax
c0013dad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013db2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013db6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013db9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013dbc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013dc2:	85 db                	test   ebx,ebx
c0013dc4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013dc7:	74 02                	je     c0013dcb <SysSbrk(regs*)+0x21>
c0013dc9:	79 06                	jns    c0013dd1 <SysSbrk(regs*)+0x27>
c0013dcb:	89 f0                	mov    eax,esi
c0013dcd:	31 d2                	xor    edx,edx
c0013dcf:	eb 2a                	jmp    c0013dfb <SysSbrk(regs*)+0x51>
c0013dd1:	83 c8 ff             	or     eax,0xffffffff
c0013dd4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013dda:	89 c2                	mov    edx,eax
c0013ddc:	77 1d                	ja     c0013dfb <SysSbrk(regs*)+0x51>
c0013dde:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013de4:	50                   	push   eax
c0013de5:	68 07 0c 00 00       	push   0xc07
c0013dea:	c1 ea 0c             	shr    edx,0xc
c0013ded:	52                   	push   edx
c0013dee:	51                   	push   ecx
c0013def:	e8 12 60 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013df4:	89 f0                	mov    eax,esi
c0013df6:	31 d2                	xor    edx,edx
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	59                   	pop    ecx
c0013dfc:	5b                   	pop    ebx
c0013dfd:	5e                   	pop    esi
c0013dfe:	c3                   	ret    

c0013dff <SysSetCwd(regs*)>:
c0013dff:	83 ec 14             	sub    esp,0x14
c0013e02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e06:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e0e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e11:	e8 37 7d ff ff       	call   c000bb4d <Fs::setcwd(Process*, char*)>
c0013e16:	83 c4 1c             	add    esp,0x1c
c0013e19:	99                   	cdq    
c0013e1a:	c3                   	ret    

c0013e1b <SysSetTime(regs*)>:
c0013e1b:	55                   	push   ebp
c0013e1c:	31 c9                	xor    ecx,ecx
c0013e1e:	57                   	push   edi
c0013e1f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e24:	56                   	push   esi
c0013e25:	53                   	push   ebx
c0013e26:	31 db                	xor    ebx,ebx
c0013e28:	83 ec 10             	sub    esp,0x10
c0013e2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e2f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e32:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e35:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e38:	89 c2                	mov    edx,eax
c0013e3a:	c1 e8 05             	shr    eax,0x5
c0013e3d:	83 e2 1f             	and    edx,0x1f
c0013e40:	42                   	inc    edx
c0013e41:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e47:	c1 e7 10             	shl    edi,0x10
c0013e4a:	88 d1                	mov    cl,dl
c0013e4c:	31 d2                	xor    edx,edx
c0013e4e:	f7 f5                	div    ebp
c0013e50:	89 dd                	mov    ebp,ebx
c0013e52:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013e58:	88 d5                	mov    ch,dl
c0013e5a:	31 d2                	xor    edx,edx
c0013e5c:	0f b7 c1             	movzx  eax,cx
c0013e5f:	09 f8                	or     eax,edi
c0013e61:	bf 3c 00 00 00       	mov    edi,0x3c
c0013e66:	89 c1                	mov    ecx,eax
c0013e68:	89 f0                	mov    eax,esi
c0013e6a:	f7 f7                	div    edi
c0013e6c:	c1 e2 10             	shl    edx,0x10
c0013e6f:	09 d5                	or     ebp,edx
c0013e71:	31 d2                	xor    edx,edx
c0013e73:	f7 f7                	div    edi
c0013e75:	89 eb                	mov    ebx,ebp
c0013e77:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e7c:	89 f0                	mov    eax,esi
c0013e7e:	88 d7                	mov    bh,dl
c0013e80:	31 d2                	xor    edx,edx
c0013e82:	f7 f7                	div    edi
c0013e84:	bf 18 00 00 00       	mov    edi,0x18
c0013e89:	31 d2                	xor    edx,edx
c0013e8b:	f7 f7                	div    edi
c0013e8d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e92:	88 d3                	mov    bl,dl
c0013e94:	53                   	push   ebx
c0013e95:	51                   	push   ecx
c0013e96:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e9c:	e8 af 84 ff ff       	call   c000c350 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013ea1:	83 c4 1c             	add    esp,0x1c
c0013ea4:	31 d2                	xor    edx,edx
c0013ea6:	5b                   	pop    ebx
c0013ea7:	5e                   	pop    esi
c0013ea8:	83 f0 01             	xor    eax,0x1
c0013eab:	5f                   	pop    edi
c0013eac:	0f b6 c0             	movzx  eax,al
c0013eaf:	5d                   	pop    ebp
c0013eb0:	c3                   	ret    

c0013eb1 <SysTimezone(regs*)>:
c0013eb1:	53                   	push   ebx
c0013eb2:	83 ec 08             	sub    esp,0x8
c0013eb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eb9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013ebd:	75 17                	jne    c0013ed6 <SysTimezone(regs*)+0x25>
c0013ebf:	83 ec 0c             	sub    esp,0xc
c0013ec2:	68 35 20 02 c0       	push   0xc0022035
c0013ec7:	e8 3e 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ecc:	83 c8 ff             	or     eax,0xffffffff
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	89 c2                	mov    edx,eax
c0013ed4:	eb 20                	jmp    c0013ef6 <SysTimezone(regs*)+0x45>
c0013ed6:	83 ec 0c             	sub    esp,0xc
c0013ed9:	68 4a 20 02 c0       	push   0xc002204a
c0013ede:	e8 27 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ee3:	58                   	pop    eax
c0013ee4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ee7:	e8 c8 81 ff ff       	call   c000c0b4 <User::loadClockSettings(int)>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	b8 01 00 00 00       	mov    eax,0x1
c0013ef4:	31 d2                	xor    edx,edx
c0013ef6:	83 c4 08             	add    esp,0x8
c0013ef9:	5b                   	pop    ebx
c0013efa:	c3                   	ret    

c0013efb <SysTruncate(regs*)>:
c0013efb:	55                   	push   ebp
c0013efc:	57                   	push   edi
c0013efd:	31 ff                	xor    edi,edi
c0013eff:	56                   	push   esi
c0013f00:	53                   	push   ebx
c0013f01:	83 ec 0c             	sub    esp,0xc
c0013f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f08:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f0b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f0f:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f12:	89 ce                	mov    esi,ecx
c0013f14:	0f 84 9a 00 00 00    	je     c0013fb4 <SysTruncate(regs*)+0xb9>
c0013f1a:	83 ec 0c             	sub    esp,0xc
c0013f1d:	68 14 01 00 00       	push   0x114
c0013f22:	e8 ac 3b ff ff       	call   c0007ad3 <malloc>
c0013f27:	83 c4 0c             	add    esp,0xc
c0013f2a:	89 c3                	mov    ebx,eax
c0013f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f31:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f34:	55                   	push   ebp
c0013f35:	53                   	push   ebx
c0013f36:	e8 f3 77 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	31 d2                	xor    edx,edx
c0013f40:	85 db                	test   ebx,ebx
c0013f42:	b8 03 00 00 00       	mov    eax,0x3
c0013f47:	0f 84 a2 00 00 00    	je     c0013fef <SysTruncate(regs*)+0xf4>
c0013f4d:	51                   	push   ecx
c0013f4e:	51                   	push   ecx
c0013f4f:	6a 02                	push   0x2
c0013f51:	53                   	push   ebx
c0013f52:	e8 93 78 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c0013f57:	83 c4 10             	add    esp,0x10
c0013f5a:	85 c0                	test   eax,eax
c0013f5c:	74 13                	je     c0013f71 <SysTruncate(regs*)+0x76>
c0013f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f60:	83 ec 0c             	sub    esp,0xc
c0013f63:	53                   	push   ebx
c0013f64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	b8 04 00 00 00       	mov    eax,0x4
c0013f6f:	eb 7c                	jmp    c0013fed <SysTruncate(regs*)+0xf2>
c0013f71:	52                   	push   edx
c0013f72:	57                   	push   edi
c0013f73:	56                   	push   esi
c0013f74:	53                   	push   ebx
c0013f75:	e8 84 79 ff ff       	call   c000b8fe <File::truncate(unsigned long long)>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	85 c0                	test   eax,eax
c0013f7f:	74 1b                	je     c0013f9c <SysTruncate(regs*)+0xa1>
c0013f81:	83 ec 0c             	sub    esp,0xc
c0013f84:	53                   	push   ebx
c0013f85:	e8 be 78 ff ff       	call   c000b848 <File::close()>
c0013f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f92:	83 c4 10             	add    esp,0x10
c0013f95:	b8 05 00 00 00       	mov    eax,0x5
c0013f9a:	eb 51                	jmp    c0013fed <SysTruncate(regs*)+0xf2>
c0013f9c:	83 ec 0c             	sub    esp,0xc
c0013f9f:	53                   	push   ebx
c0013fa0:	e8 a3 78 ff ff       	call   c000b848 <File::close()>
c0013fa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013faa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fad:	83 c4 10             	add    esp,0x10
c0013fb0:	31 c0                	xor    eax,eax
c0013fb2:	eb 39                	jmp    c0013fed <SysTruncate(regs*)+0xf2>
c0013fb4:	31 d2                	xor    edx,edx
c0013fb6:	83 fd 02             	cmp    ebp,0x2
c0013fb9:	b8 01 00 00 00       	mov    eax,0x1
c0013fbe:	7e 2f                	jle    c0013fef <SysTruncate(regs*)+0xf4>
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	51                   	push   ecx
c0013fc4:	e8 d2 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013fc9:	83 c4 10             	add    esp,0x10
c0013fcc:	31 d2                	xor    edx,edx
c0013fce:	89 c1                	mov    ecx,eax
c0013fd0:	b8 02 00 00 00       	mov    eax,0x2
c0013fd5:	85 c9                	test   ecx,ecx
c0013fd7:	74 16                	je     c0013fef <SysTruncate(regs*)+0xf4>
c0013fd9:	50                   	push   eax
c0013fda:	57                   	push   edi
c0013fdb:	56                   	push   esi
c0013fdc:	51                   	push   ecx
c0013fdd:	e8 1c 79 ff ff       	call   c000b8fe <File::truncate(unsigned long long)>
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	85 c0                	test   eax,eax
c0013fe7:	0f 95 c0             	setne  al
c0013fea:	0f b6 c0             	movzx  eax,al
c0013fed:	31 d2                	xor    edx,edx
c0013fef:	83 c4 0c             	add    esp,0xc
c0013ff2:	5b                   	pop    ebx
c0013ff3:	5e                   	pop    esi
c0013ff4:	5f                   	pop    edi
c0013ff5:	5d                   	pop    ebp
c0013ff6:	c3                   	ret    

c0013ff7 <SysWrite(regs*)>:
c0013ff7:	57                   	push   edi
c0013ff8:	56                   	push   esi
c0013ff9:	53                   	push   ebx
c0013ffa:	83 ec 10             	sub    esp,0x10
c0013ffd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014001:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014004:	83 f8 02             	cmp    eax,0x2
c0014007:	77 10                	ja     c0014019 <SysWrite(regs*)+0x22>
c0014009:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001400e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014011:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014017:	eb 0e                	jmp    c0014027 <SysWrite(regs*)+0x30>
c0014019:	83 ec 0c             	sub    esp,0xc
c001401c:	50                   	push   eax
c001401d:	e8 79 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014022:	83 c4 10             	add    esp,0x10
c0014025:	89 c1                	mov    ecx,eax
c0014027:	83 c8 ff             	or     eax,0xffffffff
c001402a:	85 c9                	test   ecx,ecx
c001402c:	89 c2                	mov    edx,eax
c001402e:	74 28                	je     c0014058 <SysWrite(regs*)+0x61>
c0014030:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	31 ff                	xor    edi,edi
c001403d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014041:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014043:	52                   	push   edx
c0014044:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014047:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001404a:	57                   	push   edi
c001404b:	56                   	push   esi
c001404c:	51                   	push   ecx
c001404d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014050:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014054:	83 c4 20             	add    esp,0x20
c0014057:	99                   	cdq    
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	5b                   	pop    ebx
c001405c:	5e                   	pop    esi
c001405d:	5f                   	pop    edi
c001405e:	c3                   	ret    

c001405f <SysWsbe(regs*)>:
c001405f:	57                   	push   edi
c0014060:	b9 0b 00 00 00       	mov    ecx,0xb
c0014065:	56                   	push   esi
c0014066:	be 89 20 02 c0       	mov    esi,0xc0022089
c001406b:	53                   	push   ebx
c001406c:	83 ec 30             	sub    esp,0x30
c001406f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014073:	fc                   	cld    
c0014074:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014076:	83 ec 0c             	sub    esp,0xc
c0014079:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001407d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014082:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014085:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001408b:	8b 06                	mov    eax,DWORD PTR [esi]
c001408d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014090:	57                   	push   edi
c0014091:	e8 ea c4 fe ff       	call   c0000580 <strlen>
c0014096:	5a                   	pop    edx
c0014097:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001409b:	52                   	push   edx
c001409c:	31 d2                	xor    edx,edx
c001409e:	57                   	push   edi
c001409f:	52                   	push   edx
c00140a0:	50                   	push   eax
c00140a1:	56                   	push   esi
c00140a2:	ff d3                	call   ebx
c00140a4:	83 c4 14             	add    esp,0x14
c00140a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00140ab:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140ae:	e8 a9 23 00 00       	call   c001645c <terminateTask(int)>
c00140b3:	83 c4 40             	add    esp,0x40
c00140b6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140bb:	5b                   	pop    ebx
c00140bc:	31 d2                	xor    edx,edx
c00140be:	5e                   	pop    esi
c00140bf:	5f                   	pop    edi
c00140c0:	c3                   	ret    

c00140c1 <SysYield(regs*)>:
c00140c1:	83 ec 0c             	sub    esp,0xc
c00140c4:	fa                   	cli    
c00140c5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00140cb:	e8 0c 1a 00 00       	call   c0015adc <schedule()>
c00140d0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00140d5:	48                   	dec    eax
c00140d6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00140db:	75 01                	jne    c00140de <SysYield(regs*)+0x1d>
c00140dd:	fb                   	sti    
c00140de:	31 c0                	xor    eax,eax
c00140e0:	31 d2                	xor    edx,edx
c00140e2:	83 c4 0c             	add    esp,0xc
c00140e5:	c3                   	ret    

c00140e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00140e6:	55                   	push   ebp
c00140e7:	57                   	push   edi
c00140e8:	56                   	push   esi
c00140e9:	53                   	push   ebx
c00140ea:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00140f0:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00140fb:	74 3b                	je     c0014138 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00140fd:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014105:	74 31                	je     c0014138 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014107:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001410f:	75 27                	jne    c0014138 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014111:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014118:	05 00 10 00 00       	add    eax,0x1000
c001411d:	89 c2                	mov    edx,eax
c001411f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014124:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001412b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014131:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014138:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001413f:	83 ec 0c             	sub    esp,0xc
c0014142:	6a 01                	push   0x1
c0014144:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001414a:	e8 a6 54 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014158:	89 c3                	mov    ebx,eax
c001415a:	0f 86 26 01 00 00    	jbe    c0014286 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014160:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014168:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001416f:	c1 ee 0c             	shr    esi,0xc
c0014172:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014176:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001417d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014184:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014188:	29 ef                	sub    edi,ebp
c001418a:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001418e:	0f 83 f9 00 00 00    	jae    c001428d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014194:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001419a:	b8 00 10 00 00       	mov    eax,0x1000
c001419f:	0f 47 f8             	cmova  edi,eax
c00141a2:	83 ec 0c             	sub    esp,0xc
c00141a5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00141ac:	31 d2                	xor    edx,edx
c00141ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141b4:	50                   	push   eax
c00141b5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00141b9:	56                   	push   esi
c00141ba:	52                   	push   edx
c00141bb:	57                   	push   edi
c00141bc:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00141c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141c6:	83 c4 20             	add    esp,0x20
c00141c9:	85 c0                	test   eax,eax
c00141cb:	75 06                	jne    c00141d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00141cd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00141d1:	74 13                	je     c00141e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00141d3:	83 ec 0c             	sub    esp,0xc
c00141d6:	53                   	push   ebx
c00141d7:	e8 2d 57 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00141dc:	83 c4 10             	add    esp,0x10
c00141df:	31 c0                	xor    eax,eax
c00141e1:	e9 7c 01 00 00       	jmp    c0014362 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00141e6:	fa                   	cli    
c00141e7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141ed:	e8 f0 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c00141f2:	6a 07                	push   0x7
c00141f4:	53                   	push   ebx
c00141f5:	50                   	push   eax
c00141f6:	89 c7                	mov    edi,eax
c00141f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014200:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014206:	e8 f3 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001420b:	83 c4 0c             	add    esp,0xc
c001420e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014215:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001421b:	6a 00                	push   0x0
c001421d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014222:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014225:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001422b:	e8 34 59 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014230:	58                   	pop    eax
c0014231:	5a                   	pop    edx
c0014232:	68 07 0c 00 00       	push   0xc07
c0014237:	55                   	push   ebp
c0014238:	57                   	push   edi
c0014239:	89 df                	mov    edi,ebx
c001423b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014242:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014248:	6a 00                	push   0x0
c001424a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001424f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014252:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014258:	e8 05 5d ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001425d:	b9 00 10 00 00       	mov    ecx,0x1000
c0014262:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014264:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014269:	83 c4 20             	add    esp,0x20
c001426c:	48                   	dec    eax
c001426d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014272:	85 c0                	test   eax,eax
c0014274:	75 01                	jne    c0014277 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014276:	fb                   	sti    
c0014277:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001427b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014281:	e9 f0 fe ff ff       	jmp    c0014176 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014286:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001428d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014294:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001429a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00142a0:	0f 86 ae 00 00 00    	jbe    c0014354 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00142a6:	fa                   	cli    
c00142a7:	51                   	push   ecx
c00142a8:	31 ff                	xor    edi,edi
c00142aa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00142b1:	c1 ee 0c             	shr    esi,0xc
c00142b4:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142ba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142c0:	6a 00                	push   0x0
c00142c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142d0:	e8 8f 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00142d5:	83 c4 10             	add    esp,0x10
c00142d8:	e8 05 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c00142dd:	47                   	inc    edi
c00142de:	6a 07                	push   0x7
c00142e0:	53                   	push   ebx
c00142e1:	50                   	push   eax
c00142e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00142ec:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00142ef:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00142f5:	e8 04 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00142fa:	58                   	pop    eax
c00142fb:	5a                   	pop    edx
c00142fc:	68 07 0c 00 00       	push   0xc07
c0014301:	55                   	push   ebp
c0014302:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014308:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001430c:	50                   	push   eax
c001430d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014314:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001431a:	6a 00                	push   0x0
c001431c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014321:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014324:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001432a:	e8 33 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001432f:	83 c4 1c             	add    esp,0x1c
c0014332:	68 00 10 00 00       	push   0x1000
c0014337:	6a 00                	push   0x0
c0014339:	53                   	push   ebx
c001433a:	e8 b1 c1 fe ff       	call   c00004f0 <memset>
c001433f:	83 c4 10             	add    esp,0x10
c0014342:	39 fe                	cmp    esi,edi
c0014344:	77 92                	ja     c00142d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0014346:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001434b:	48                   	dec    eax
c001434c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014351:	75 01                	jne    c0014354 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014353:	fb                   	sti    
c0014354:	83 ec 0c             	sub    esp,0xc
c0014357:	53                   	push   ebx
c0014358:	e8 ac 55 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	b0 01                	mov    al,0x1
c0014362:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014368:	5b                   	pop    ebx
c0014369:	5e                   	pop    esi
c001436a:	5f                   	pop    edi
c001436b:	5d                   	pop    ebp
c001436c:	c3                   	ret    

c001436d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001436d:	55                   	push   ebp
c001436e:	57                   	push   edi
c001436f:	56                   	push   esi
c0014370:	53                   	push   ebx
c0014371:	83 ec 48             	sub    esp,0x48
c0014374:	68 14 01 00 00       	push   0x114
c0014379:	e8 55 37 ff ff       	call   c0007ad3 <malloc>
c001437e:	83 c4 0c             	add    esp,0xc
c0014381:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014385:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014389:	89 c7                	mov    edi,eax
c001438b:	50                   	push   eax
c001438c:	e8 9d 73 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0014391:	58                   	pop    eax
c0014392:	5a                   	pop    edx
c0014393:	6a 01                	push   0x1
c0014395:	57                   	push   edi
c0014396:	e8 4f 74 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c001439b:	83 c4 10             	add    esp,0x10
c001439e:	85 c0                	test   eax,eax
c00143a0:	0f 85 4c 01 00 00    	jne    c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143a6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00143ae:	83 ec 0c             	sub    esp,0xc
c00143b1:	6a 34                	push   0x34
c00143b3:	e8 1b 37 ff ff       	call   c0007ad3 <malloc>
c00143b8:	89 c3                	mov    ebx,eax
c00143ba:	58                   	pop    eax
c00143bb:	8b 07                	mov    eax,DWORD PTR [edi]
c00143bd:	8d 74 24 38          	lea    esi,[esp+0x38]
c00143c1:	56                   	push   esi
c00143c2:	53                   	push   ebx
c00143c3:	6a 00                	push   0x0
c00143c5:	6a 34                	push   0x34
c00143c7:	57                   	push   edi
c00143c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143cb:	83 c4 20             	add    esp,0x20
c00143ce:	85 c0                	test   eax,eax
c00143d0:	0f 85 1c 01 00 00    	jne    c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143d6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00143dc:	0f 85 10 01 00 00    	jne    c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143e5:	85 c0                	test   eax,eax
c00143e7:	0f 84 05 01 00 00    	je     c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00143ed:	31 d2                	xor    edx,edx
c00143ef:	55                   	push   ebp
c00143f0:	52                   	push   edx
c00143f1:	50                   	push   eax
c00143f2:	57                   	push   edi
c00143f3:	e8 b0 74 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	85 c0                	test   eax,eax
c00143fd:	0f 85 ef 00 00 00    	jne    c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014403:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001440d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014411:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014415:	0f af c2             	imul   eax,edx
c0014418:	50                   	push   eax
c0014419:	e8 b5 36 ff ff       	call   c0007ad3 <malloc>
c001441e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014420:	89 34 24             	mov    DWORD PTR [esp],esi
c0014423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014427:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001442b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001442f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014433:	0f af c2             	imul   eax,edx
c0014436:	99                   	cdq    
c0014437:	52                   	push   edx
c0014438:	50                   	push   eax
c0014439:	57                   	push   edi
c001443a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001443d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014440:	83 c4 20             	add    esp,0x20
c0014443:	85 c0                	test   eax,eax
c0014445:	0f 84 a7 00 00 00    	je     c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001444b:	31 d2                	xor    edx,edx
c001444d:	51                   	push   ecx
c001444e:	52                   	push   edx
c001444f:	50                   	push   eax
c0014450:	57                   	push   edi
c0014451:	e8 52 74 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014456:	83 c4 10             	add    esp,0x10
c0014459:	85 c0                	test   eax,eax
c001445b:	0f 85 91 00 00 00    	jne    c00144f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014461:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014465:	83 ec 0c             	sub    esp,0xc
c0014468:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001446c:	0f af c2             	imul   eax,edx
c001446f:	50                   	push   eax
c0014470:	e8 5e 36 ff ff       	call   c0007ad3 <malloc>
c0014475:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014477:	89 34 24             	mov    DWORD PTR [esp],esi
c001447a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001447e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014482:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014486:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001448a:	0f af c2             	imul   eax,edx
c001448d:	99                   	cdq    
c001448e:	52                   	push   edx
c001448f:	50                   	push   eax
c0014490:	57                   	push   edi
c0014491:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014494:	83 c4 20             	add    esp,0x20
c0014497:	31 c9                	xor    ecx,ecx
c0014499:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144a1:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00144a5:	0f b7 e9             	movzx  ebp,cx
c00144a8:	0f 83 86 00 00 00    	jae    c0014534 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00144ae:	c1 e5 05             	shl    ebp,0x5
c00144b1:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00144b5:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00144b9:	75 73                	jne    c001452e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00144bb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00144bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00144c2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00144c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144c9:	52                   	push   edx
c00144ca:	31 d2                	xor    edx,edx
c00144cc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00144cf:	52                   	push   edx
c00144d0:	50                   	push   eax
c00144d1:	57                   	push   edi
c00144d2:	e8 d1 73 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00144de:	85 c0                	test   eax,eax
c00144e0:	74 17                	je     c00144f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00144e2:	83 ec 0c             	sub    esp,0xc
c00144e5:	68 b5 20 02 c0       	push   0xc00220b5
c00144ea:	e8 1b 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00144ef:	83 c4 10             	add    esp,0x10
c00144f2:	31 c0                	xor    eax,eax
c00144f4:	e9 8b 00 00 00       	jmp    c0014584 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00144f9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00144fd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014500:	83 ec 0c             	sub    esp,0xc
c0014503:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014506:	50                   	push   eax
c0014507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001450b:	56                   	push   esi
c001450c:	57                   	push   edi
c001450d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014511:	e8 d0 fb ff ff       	call   c00140e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014516:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001451a:	83 c4 20             	add    esp,0x20
c001451d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014521:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014525:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001452a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001452e:	41                   	inc    ecx
c001452f:	e9 6d ff ff ff       	jmp    c00144a1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014534:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014538:	83 ec 0c             	sub    esp,0xc
c001453b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001453f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014543:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014549:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c001454f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014554:	05 00 10 00 00       	add    eax,0x1000
c0014559:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001455c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014560:	e8 7e 35 ff ff       	call   c0007ae3 <free>
c0014565:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014568:	e8 76 35 ff ff       	call   c0007ae3 <free>
c001456d:	58                   	pop    eax
c001456e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014572:	e8 6c 35 ff ff       	call   c0007ae3 <free>
c0014577:	89 3c 24             	mov    DWORD PTR [esp],edi
c001457a:	e8 c9 72 ff ff       	call   c000b848 <File::close()>
c001457f:	83 c4 10             	add    esp,0x10
c0014582:	b0 01                	mov    al,0x1
c0014584:	83 c4 3c             	add    esp,0x3c
c0014587:	5b                   	pop    ebx
c0014588:	5e                   	pop    esi
c0014589:	5f                   	pop    edi
c001458a:	5d                   	pop    ebp
c001458b:	c3                   	ret    

c001458c <Thr::runtimeReferenceHelper()>:
c001458c:	83 ec 18             	sub    esp,0x18
c001458f:	68 bd 20 02 c0       	push   0xc00220bd
c0014594:	e8 71 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014599:	fa                   	cli    
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	eb fe                	jmp    c001459d <Thr::runtimeReferenceHelper()+0x11>

c001459f <Thr::getAddressOfKernelSymbol(char const*)>:
c001459f:	57                   	push   edi
c00145a0:	56                   	push   esi
c00145a1:	53                   	push   ebx
c00145a2:	31 db                	xor    ebx,ebx
c00145a4:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00145aa:	7e 3c                	jle    c00145e8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00145ac:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00145b3:	31 ff                	xor    edi,edi
c00145b5:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00145bc:	7e 27                	jle    c00145e5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00145be:	50                   	push   eax
c00145bf:	50                   	push   eax
c00145c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00145c6:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00145cd:	50                   	push   eax
c00145ce:	e8 ad c1 fe ff       	call   c0000780 <strcmp>
c00145d3:	83 c4 10             	add    esp,0x10
c00145d6:	85 c0                	test   eax,eax
c00145d8:	75 05                	jne    c00145df <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00145da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145dd:	eb 0b                	jmp    c00145ea <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00145df:	83 c6 10             	add    esi,0x10
c00145e2:	47                   	inc    edi
c00145e3:	eb d0                	jmp    c00145b5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00145e5:	43                   	inc    ebx
c00145e6:	eb bc                	jmp    c00145a4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00145e8:	31 c0                	xor    eax,eax
c00145ea:	5b                   	pop    ebx
c00145eb:	5e                   	pop    esi
c00145ec:	5f                   	pop    edi
c00145ed:	c3                   	ret    

c00145ee <Thr::loadKernelSymbolTable(char const*)>:
c00145ee:	55                   	push   ebp
c00145ef:	57                   	push   edi
c00145f0:	56                   	push   esi
c00145f1:	53                   	push   ebx
c00145f2:	83 ec 68             	sub    esp,0x68
c00145f5:	68 14 01 00 00       	push   0x114
c00145fa:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014600:	e8 ce 34 ff ff       	call   c0007ad3 <malloc>
c0014605:	83 c4 0c             	add    esp,0xc
c0014608:	56                   	push   esi
c0014609:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001460d:	89 c3                	mov    ebx,eax
c001460f:	50                   	push   eax
c0014610:	e8 19 71 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0014615:	5e                   	pop    esi
c0014616:	5f                   	pop    edi
c0014617:	6a 01                	push   0x1
c0014619:	53                   	push   ebx
c001461a:	e8 cb 71 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c001461f:	83 c4 10             	add    esp,0x10
c0014622:	85 c0                	test   eax,eax
c0014624:	74 0a                	je     c0014630 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014626:	83 ec 0c             	sub    esp,0xc
c0014629:	68 df 20 02 c0       	push   0xc00220df
c001462e:	eb 34                	jmp    c0014664 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014630:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	6a 34                	push   0x34
c001463d:	e8 91 34 ff ff       	call   c0007ad3 <malloc>
c0014642:	59                   	pop    ecx
c0014643:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014647:	89 c7                	mov    edi,eax
c0014649:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464b:	56                   	push   esi
c001464c:	57                   	push   edi
c001464d:	6a 00                	push   0x0
c001464f:	6a 34                	push   0x34
c0014651:	53                   	push   ebx
c0014652:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014655:	83 c4 20             	add    esp,0x20
c0014658:	85 c0                	test   eax,eax
c001465a:	74 17                	je     c0014673 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001465c:	83 ec 0c             	sub    esp,0xc
c001465f:	68 f6 20 02 c0       	push   0xc00220f6
c0014664:	e8 70 cb ff ff       	call   c00111d9 <KePanic(char const*)>
c0014669:	83 c4 10             	add    esp,0x10
c001466c:	31 c0                	xor    eax,eax
c001466e:	e9 31 02 00 00       	jmp    c00148a4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014673:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014679:	75 e1                	jne    c001465c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001467b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001467e:	85 c0                	test   eax,eax
c0014680:	74 da                	je     c001465c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014682:	52                   	push   edx
c0014683:	31 d2                	xor    edx,edx
c0014685:	52                   	push   edx
c0014686:	50                   	push   eax
c0014687:	53                   	push   ebx
c0014688:	e8 1b 72 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	85 c0                	test   eax,eax
c0014692:	75 c8                	jne    c001465c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014694:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	31 ed                	xor    ebp,ebp
c001469d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146a1:	0f af c2             	imul   eax,edx
c00146a4:	50                   	push   eax
c00146a5:	e8 29 34 ff ff       	call   c0007ad3 <malloc>
c00146aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00146ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00146af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146b7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146bb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146bf:	0f af c2             	imul   eax,edx
c00146c2:	99                   	cdq    
c00146c3:	52                   	push   edx
c00146c4:	50                   	push   eax
c00146c5:	53                   	push   ebx
c00146c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146c9:	83 c4 20             	add    esp,0x20
c00146cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146d4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146ec:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00146f0:	0f b7 f5             	movzx  esi,bp
c00146f3:	0f 83 a7 00 00 00    	jae    c00147a0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00146f9:	6b f6 28             	imul   esi,esi,0x28
c00146fc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014700:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014703:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014707:	50                   	push   eax
c0014708:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001470c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014710:	8b 16                	mov    edx,DWORD PTR [esi]
c0014712:	6b c0 28             	imul   eax,eax,0x28
c0014715:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014719:	89 d0                	mov    eax,edx
c001471b:	31 d2                	xor    edx,edx
c001471d:	52                   	push   edx
c001471e:	50                   	push   eax
c001471f:	53                   	push   ebx
c0014720:	e8 83 71 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014725:	83 c4 0c             	add    esp,0xc
c0014728:	6a 20                	push   0x20
c001472a:	6a 00                	push   0x0
c001472c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014730:	52                   	push   edx
c0014731:	e8 ba bd fe ff       	call   c00004f0 <memset>
c0014736:	58                   	pop    eax
c0014737:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014739:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001473d:	51                   	push   ecx
c001473e:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014742:	52                   	push   edx
c0014743:	6a 00                	push   0x0
c0014745:	6a 1f                	push   0x1f
c0014747:	53                   	push   ebx
c0014748:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001474b:	83 c4 18             	add    esp,0x18
c001474e:	68 0d 21 02 c0       	push   0xc002210d
c0014753:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014757:	52                   	push   edx
c0014758:	e8 23 c0 fe ff       	call   c0000780 <strcmp>
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	85 c0                	test   eax,eax
c0014762:	75 0f                	jne    c0014773 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014764:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014767:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001476b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001476f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014773:	50                   	push   eax
c0014774:	50                   	push   eax
c0014775:	68 15 21 02 c0       	push   0xc0022115
c001477a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001477e:	50                   	push   eax
c001477f:	e8 fc bf fe ff       	call   c0000780 <strcmp>
c0014784:	83 c4 10             	add    esp,0x10
c0014787:	85 c0                	test   eax,eax
c0014789:	75 0f                	jne    c001479a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001478b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001478e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001479a:	45                   	inc    ebp
c001479b:	e9 4c ff ff ff       	jmp    c00146ec <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00147a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147a5:	75 10                	jne    c00147b7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00147a7:	83 ec 0c             	sub    esp,0xc
c00147aa:	68 1d 21 02 c0       	push   0xc002211d
c00147af:	e8 25 ca ff ff       	call   c00111d9 <KePanic(char const*)>
c00147b4:	83 c4 10             	add    esp,0x10
c00147b7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00147bc:	75 10                	jne    c00147ce <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00147be:	83 ec 0c             	sub    esp,0xc
c00147c1:	68 1d 21 02 c0       	push   0xc002211d
c00147c6:	e8 0e ca ff ff       	call   c00111d9 <KePanic(char const*)>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	50                   	push   eax
c00147cf:	31 d2                	xor    edx,edx
c00147d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d5:	52                   	push   edx
c00147d6:	50                   	push   eax
c00147d7:	53                   	push   ebx
c00147d8:	e8 cb 70 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00147dd:	5a                   	pop    edx
c00147de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147e2:	e8 ec 32 ff ff       	call   c0007ad3 <malloc>
c00147e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147eb:	31 c9                	xor    ecx,ecx
c00147ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147f3:	5e                   	pop    esi
c00147f4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00147f8:	55                   	push   ebp
c00147f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147fd:	51                   	push   ecx
c00147fe:	52                   	push   edx
c00147ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014803:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014807:	53                   	push   ebx
c0014808:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001480b:	83 c4 14             	add    esp,0x14
c001480e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014812:	e8 bc 32 ff ff       	call   c0007ad3 <malloc>
c0014817:	89 c6                	mov    esi,eax
c0014819:	8b 03                	mov    eax,DWORD PTR [ebx]
c001481b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001481e:	56                   	push   esi
c001481f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014823:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014827:	51                   	push   ecx
c0014828:	52                   	push   edx
c0014829:	53                   	push   ebx
c001482a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001482d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014831:	83 c4 1c             	add    esp,0x1c
c0014834:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c001483a:	c1 e8 04             	shr    eax,0x4
c001483d:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014848:	31 d2                	xor    edx,edx
c001484a:	52                   	push   edx
c001484b:	50                   	push   eax
c001484c:	53                   	push   ebx
c001484d:	e8 56 70 ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014852:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014854:	31 d2                	xor    edx,edx
c0014856:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014859:	56                   	push   esi
c001485a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001485e:	52                   	push   edx
c001485f:	50                   	push   eax
c0014860:	53                   	push   ebx
c0014861:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014864:	83 c4 14             	add    esp,0x14
c0014867:	53                   	push   ebx
c0014868:	e8 db 6f ff ff       	call   c000b848 <File::close()>
c001486d:	5d                   	pop    ebp
c001486e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014872:	e8 6c 32 ff ff       	call   c0007ae3 <free>
c0014877:	89 3c 24             	mov    DWORD PTR [esp],edi
c001487a:	e8 64 32 ff ff       	call   c0007ae3 <free>
c001487f:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014884:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014888:	83 c4 10             	add    esp,0x10
c001488b:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014892:	8d 50 01             	lea    edx,[eax+0x1]
c0014895:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c001489c:	b0 01                	mov    al,0x1
c001489e:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c00148a4:	83 c4 5c             	add    esp,0x5c
c00148a7:	5b                   	pop    ebx
c00148a8:	5e                   	pop    esi
c00148a9:	5f                   	pop    edi
c00148aa:	5d                   	pop    ebp
c00148ab:	c3                   	ret    

c00148ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00148ac:	55                   	push   ebp
c00148ad:	57                   	push   edi
c00148ae:	56                   	push   esi
c00148af:	53                   	push   ebx
c00148b0:	81 ec 68 03 00 00    	sub    esp,0x368
c00148b6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00148bd:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00148c3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00148c7:	68 14 01 00 00       	push   0x114
c00148cc:	e8 02 32 ff ff       	call   c0007ad3 <malloc>
c00148d1:	83 c4 0c             	add    esp,0xc
c00148d4:	56                   	push   esi
c00148d5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00148dc:	50                   	push   eax
c00148dd:	89 c3                	mov    ebx,eax
c00148df:	e8 4a 6e ff ff       	call   c000b72e <File::File(char const*, Process*)>
c00148e4:	5f                   	pop    edi
c00148e5:	5d                   	pop    ebp
c00148e6:	6a 01                	push   0x1
c00148e8:	53                   	push   ebx
c00148e9:	e8 fc 6e ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	85 c0                	test   eax,eax
c00148f3:	0f 85 b3 06 00 00    	jne    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00148f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014901:	83 ec 0c             	sub    esp,0xc
c0014904:	6a 34                	push   0x34
c0014906:	e8 c8 31 ff ff       	call   c0007ad3 <malloc>
c001490b:	5e                   	pop    esi
c001490c:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014910:	89 c5                	mov    ebp,eax
c0014912:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014914:	56                   	push   esi
c0014915:	55                   	push   ebp
c0014916:	6a 00                	push   0x0
c0014918:	6a 34                	push   0x34
c001491a:	53                   	push   ebx
c001491b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001491e:	83 c4 20             	add    esp,0x20
c0014921:	85 c0                	test   eax,eax
c0014923:	0f 85 83 06 00 00    	jne    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014929:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014930:	0f 85 76 06 00 00    	jne    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014936:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014939:	85 c0                	test   eax,eax
c001493b:	0f 84 6b 06 00 00    	je     c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014941:	31 d2                	xor    edx,edx
c0014943:	51                   	push   ecx
c0014944:	52                   	push   edx
c0014945:	50                   	push   eax
c0014946:	53                   	push   ebx
c0014947:	e8 5c 6f ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c001494c:	83 c4 10             	add    esp,0x10
c001494f:	85 c0                	test   eax,eax
c0014951:	0f 85 55 06 00 00    	jne    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014957:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001495a:	83 ec 0c             	sub    esp,0xc
c001495d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014961:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014965:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014969:	0f af c2             	imul   eax,edx
c001496c:	50                   	push   eax
c001496d:	e8 61 31 ff ff       	call   c0007ad3 <malloc>
c0014972:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014974:	89 34 24             	mov    DWORD PTR [esp],esi
c0014977:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001497b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001497f:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014983:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014987:	0f af c2             	imul   eax,edx
c001498a:	99                   	cdq    
c001498b:	52                   	push   edx
c001498c:	50                   	push   eax
c001498d:	53                   	push   ebx
c001498e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014991:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014994:	83 c4 20             	add    esp,0x20
c0014997:	85 c0                	test   eax,eax
c0014999:	0f 84 0d 06 00 00    	je     c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001499f:	52                   	push   edx
c00149a0:	31 d2                	xor    edx,edx
c00149a2:	52                   	push   edx
c00149a3:	50                   	push   eax
c00149a4:	53                   	push   ebx
c00149a5:	e8 fe 6e ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c00149aa:	83 c4 10             	add    esp,0x10
c00149ad:	85 c0                	test   eax,eax
c00149af:	0f 85 f7 05 00 00    	jne    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149b5:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00149b9:	83 ec 0c             	sub    esp,0xc
c00149bc:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00149c0:	0f af c2             	imul   eax,edx
c00149c3:	50                   	push   eax
c00149c4:	e8 0a 31 ff ff       	call   c0007ad3 <malloc>
c00149c9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00149ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149d6:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00149da:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00149de:	0f af c2             	imul   eax,edx
c00149e1:	99                   	cdq    
c00149e2:	52                   	push   edx
c00149e3:	50                   	push   eax
c00149e4:	53                   	push   ebx
c00149e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149e8:	83 c4 20             	add    esp,0x20
c00149eb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00149f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00149f4:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00149f8:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00149fc:	73 78                	jae    c0014a76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00149fe:	c1 e7 05             	shl    edi,0x5
c0014a01:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014a05:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a08:	75 63                	jne    c0014a6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014a0a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a0d:	31 d2                	xor    edx,edx
c0014a0f:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014a12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a16:	50                   	push   eax
c0014a17:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a1a:	52                   	push   edx
c0014a1b:	50                   	push   eax
c0014a1c:	53                   	push   ebx
c0014a1d:	e8 86 6e ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014a22:	83 c4 10             	add    esp,0x10
c0014a25:	85 c0                	test   eax,eax
c0014a27:	0f 85 7f 05 00 00    	jne    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a2d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a34:	83 ec 0c             	sub    esp,0xc
c0014a37:	31 d2                	xor    edx,edx
c0014a39:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014a3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a3f:	01 c6                	add    esi,eax
c0014a41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a48:	50                   	push   eax
c0014a49:	56                   	push   esi
c0014a4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a4e:	52                   	push   edx
c0014a4f:	50                   	push   eax
c0014a50:	53                   	push   ebx
c0014a51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a54:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a57:	83 c4 1c             	add    esp,0x1c
c0014a5a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014a5d:	50                   	push   eax
c0014a5e:	6a 00                	push   0x0
c0014a60:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014a64:	56                   	push   esi
c0014a65:	e8 86 ba fe ff       	call   c00004f0 <memset>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	66 ff 04 24          	inc    WORD PTR [esp]
c0014a71:	e9 7b ff ff ff       	jmp    c00149f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014a76:	50                   	push   eax
c0014a77:	68 00 01 00 00       	push   0x100
c0014a7c:	6a 00                	push   0x0
c0014a7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a82:	50                   	push   eax
c0014a83:	e8 68 ba fe ff       	call   c00004f0 <memset>
c0014a88:	83 c4 0c             	add    esp,0xc
c0014a8b:	68 00 01 00 00       	push   0x100
c0014a90:	6a 00                	push   0x0
c0014a92:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a99:	50                   	push   eax
c0014a9a:	e8 51 ba fe ff       	call   c00004f0 <memset>
c0014a9f:	83 c4 10             	add    esp,0x10
c0014aa2:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014aa9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ab0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ab8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014ac0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ac8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ad0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ad4:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014ad8:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014add:	0f 83 16 01 00 00    	jae    c0014bf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014ae3:	6b ff 28             	imul   edi,edi,0x28
c0014ae6:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014aea:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014aed:	51                   	push   ecx
c0014aee:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014af2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014af6:	8b 07                	mov    eax,DWORD PTR [edi]
c0014af8:	6b d2 28             	imul   edx,edx,0x28
c0014afb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014aff:	31 d2                	xor    edx,edx
c0014b01:	52                   	push   edx
c0014b02:	50                   	push   eax
c0014b03:	53                   	push   ebx
c0014b04:	e8 9f 6d ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014b09:	83 c4 0c             	add    esp,0xc
c0014b0c:	6a 20                	push   0x20
c0014b0e:	6a 00                	push   0x0
c0014b10:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b17:	51                   	push   ecx
c0014b18:	e8 d3 b9 fe ff       	call   c00004f0 <memset>
c0014b1d:	58                   	pop    eax
c0014b1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b20:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b24:	52                   	push   edx
c0014b25:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b2c:	51                   	push   ecx
c0014b2d:	6a 00                	push   0x0
c0014b2f:	6a 1f                	push   0x1f
c0014b31:	53                   	push   ebx
c0014b32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b35:	83 c4 1c             	add    esp,0x1c
c0014b38:	6a 09                	push   0x9
c0014b3a:	68 37 21 02 c0       	push   0xc0022137
c0014b3f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b46:	51                   	push   ecx
c0014b47:	e8 34 b8 fe ff       	call   c0000380 <memcmp>
c0014b4c:	83 c4 10             	add    esp,0x10
c0014b4f:	85 c0                	test   eax,eax
c0014b51:	75 1a                	jne    c0014b6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014b53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b56:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014b59:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b5d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b60:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b67:	89 d0                	mov    eax,edx
c0014b69:	40                   	inc    eax
c0014b6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b6d:	52                   	push   edx
c0014b6e:	6a 09                	push   0x9
c0014b70:	68 41 21 02 c0       	push   0xc0022141
c0014b75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b7c:	50                   	push   eax
c0014b7d:	e8 fe b7 fe ff       	call   c0000380 <memcmp>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	85 c0                	test   eax,eax
c0014b87:	75 1a                	jne    c0014ba3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014b89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b8c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014b8f:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014b93:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b96:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014b9d:	89 c8                	mov    eax,ecx
c0014b9f:	40                   	inc    eax
c0014ba0:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ba3:	50                   	push   eax
c0014ba4:	50                   	push   eax
c0014ba5:	68 0d 21 02 c0       	push   0xc002210d
c0014baa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bb1:	50                   	push   eax
c0014bb2:	e8 c9 bb fe ff       	call   c0000780 <strcmp>
c0014bb7:	83 c4 10             	add    esp,0x10
c0014bba:	85 c0                	test   eax,eax
c0014bbc:	75 0b                	jne    c0014bc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014bbe:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014bc2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bc9:	50                   	push   eax
c0014bca:	50                   	push   eax
c0014bcb:	68 15 21 02 c0       	push   0xc0022115
c0014bd0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bd7:	50                   	push   eax
c0014bd8:	e8 a3 bb fe ff       	call   c0000780 <strcmp>
c0014bdd:	83 c4 10             	add    esp,0x10
c0014be0:	85 c0                	test   eax,eax
c0014be2:	75 0b                	jne    c0014bef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014be4:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014be8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bef:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014bf4:	e9 d7 fe ff ff       	jmp    c0014ad0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014bf9:	50                   	push   eax
c0014bfa:	31 d2                	xor    edx,edx
c0014bfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c00:	52                   	push   edx
c0014c01:	50                   	push   eax
c0014c02:	53                   	push   ebx
c0014c03:	e8 a0 6c ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014c08:	58                   	pop    eax
c0014c09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c0d:	e8 c1 2e ff ff       	call   c0007ad3 <malloc>
c0014c12:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c14:	31 d2                	xor    edx,edx
c0014c16:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014c1a:	58                   	pop    eax
c0014c1b:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014c1f:	56                   	push   esi
c0014c20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c28:	52                   	push   edx
c0014c29:	50                   	push   eax
c0014c2a:	53                   	push   ebx
c0014c2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c2e:	83 c4 14             	add    esp,0x14
c0014c31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c35:	e8 99 2e ff ff       	call   c0007ad3 <malloc>
c0014c3a:	31 d2                	xor    edx,edx
c0014c3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014c40:	83 c4 0c             	add    esp,0xc
c0014c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c47:	52                   	push   edx
c0014c48:	50                   	push   eax
c0014c49:	53                   	push   ebx
c0014c4a:	e8 59 6c ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014c4f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c51:	31 d2                	xor    edx,edx
c0014c53:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c5e:	52                   	push   edx
c0014c5f:	50                   	push   eax
c0014c60:	53                   	push   ebx
c0014c61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c64:	83 c4 20             	add    esp,0x20
c0014c67:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014c6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c78:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014c7c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014c7f:	0f 84 2b 03 00 00    	je     c0014fb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014c85:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014c8c:	31 d2                	xor    edx,edx
c0014c8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c92:	c1 e8 03             	shr    eax,0x3
c0014c95:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014c99:	51                   	push   ecx
c0014c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c9e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014ca2:	52                   	push   edx
c0014ca3:	50                   	push   eax
c0014ca4:	53                   	push   ebx
c0014ca5:	e8 fe 6b ff ff       	call   c000b8a8 <File::seek(unsigned long long)>
c0014caa:	5e                   	pop    esi
c0014cab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014caf:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014cb6:	e8 18 2e ff ff       	call   c0007ad3 <malloc>
c0014cbb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cbd:	31 d2                	xor    edx,edx
c0014cbf:	89 c7                	mov    edi,eax
c0014cc1:	58                   	pop    eax
c0014cc2:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014cc6:	50                   	push   eax
c0014cc7:	57                   	push   edi
c0014cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccc:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014cd3:	52                   	push   edx
c0014cd4:	50                   	push   eax
c0014cd5:	53                   	push   ebx
c0014cd6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cd9:	83 c4 20             	add    esp,0x20
c0014cdc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ce4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014ce8:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014cec:	0f 8d a5 02 00 00    	jge    c0014f97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014cf2:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cfb:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014d02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d06:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014d0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d0e:	c1 e8 08             	shr    eax,0x8
c0014d11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d15:	89 c2                	mov    edx,eax
c0014d17:	c1 e2 04             	shl    edx,0x4
c0014d1a:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014d1e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014d21:	85 f6                	test   esi,esi
c0014d23:	0f 85 cf 00 00 00    	jne    c0014df8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d29:	83 ec 0c             	sub    esp,0xc
c0014d2c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d34:	03 02                	add    eax,DWORD PTR [edx]
c0014d36:	50                   	push   eax
c0014d37:	e8 63 f8 ff ff       	call   c001459f <Thr::getAddressOfKernelSymbol(char const*)>
c0014d3c:	83 c4 10             	add    esp,0x10
c0014d3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d43:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014d48:	85 c0                	test   eax,eax
c0014d4a:	89 c6                	mov    esi,eax
c0014d4c:	0f 85 a6 00 00 00    	jne    c0014df8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d52:	83 ec 0c             	sub    esp,0xc
c0014d55:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014d59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d5d:	03 02                	add    eax,DWORD PTR [edx]
c0014d5f:	50                   	push   eax
c0014d60:	e8 5f c6 ff ff       	call   c00113c4 <KeResolveCompatibilitySymbol(char*)>
c0014d65:	83 c4 10             	add    esp,0x10
c0014d68:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d6c:	85 c0                	test   eax,eax
c0014d6e:	89 c6                	mov    esi,eax
c0014d70:	0f 85 82 00 00 00    	jne    c0014df8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d76:	50                   	push   eax
c0014d77:	50                   	push   eax
c0014d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d7c:	03 02                	add    eax,DWORD PTR [edx]
c0014d7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014d82:	50                   	push   eax
c0014d83:	68 4b 21 02 c0       	push   0xc002214b
c0014d88:	e8 7d 5b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	68 65 21 02 c0       	push   0xc0022165
c0014d94:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d9b:	51                   	push   ecx
c0014d9c:	e8 af b8 fe ff       	call   c0000650 <strcpy>
c0014da1:	59                   	pop    ecx
c0014da2:	58                   	pop    eax
c0014da3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014da7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dab:	03 02                	add    eax,DWORD PTR [edx]
c0014dad:	50                   	push   eax
c0014dae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014db5:	51                   	push   ecx
c0014db6:	e8 b5 ba fe ff       	call   c0000870 <strcat>
c0014dbb:	58                   	pop    eax
c0014dbc:	5a                   	pop    edx
c0014dbd:	68 fb 21 02 c0       	push   0xc00221fb
c0014dc2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014dc9:	51                   	push   ecx
c0014dca:	e8 a1 ba fe ff       	call   c0000870 <strcat>
c0014dcf:	83 c4 10             	add    esp,0x10
c0014dd2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014dd7:	0f 84 77 01 00 00    	je     c0014f54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ddd:	83 ec 0c             	sub    esp,0xc
c0014de0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014de7:	51                   	push   ecx
c0014de8:	e8 ec c3 ff ff       	call   c00111d9 <KePanic(char const*)>
c0014ded:	83 c4 10             	add    esp,0x10
c0014df0:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014df4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014df8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014dfd:	83 f8 01             	cmp    eax,0x1
c0014e00:	0f 85 9b 00 00 00    	jne    c0014ea1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014e06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e0a:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014e11:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014e15:	01 d0                	add    eax,edx
c0014e17:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e1f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e23:	0f 94 c0             	sete   al
c0014e26:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014e2e:	0f 94 c1             	sete   cl
c0014e31:	09 c1                	or     ecx,eax
c0014e33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e37:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014e3c:	0f b6 c9             	movzx  ecx,cl
c0014e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e41:	74 41                	je     c0014e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014e43:	8d 14 06             	lea    edx,[esi+eax*1]
c0014e46:	85 c9                	test   ecx,ecx
c0014e48:	75 15                	jne    c0014e5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014e4a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e4e:	66 83 f8 0c          	cmp    ax,0xc
c0014e52:	76 05                	jbe    c0014e59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014e54:	b8 0c 00 00 00       	mov    eax,0xc
c0014e59:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e5d:	76 37                	jbe    c0014e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e5f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e64:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014e68:	0f 84 e6 00 00 00    	je     c0014f54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e6e:	83 ec 0c             	sub    esp,0xc
c0014e71:	68 7c 21 02 c0       	push   0xc002217c
c0014e76:	e8 5e c3 ff ff       	call   c00111d9 <KePanic(char const*)>
c0014e7b:	83 c4 10             	add    esp,0x10
c0014e7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e82:	eb 12                	jmp    c0014e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e84:	01 c2                	add    edx,eax
c0014e86:	85 c9                	test   ecx,ecx
c0014e88:	75 0c                	jne    c0014e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e8a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e8e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014e92:	77 02                	ja     c0014e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014e94:	01 f2                	add    edx,esi
c0014e96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e9a:	89 10                	mov    DWORD PTR [eax],edx
c0014e9c:	e9 ed 00 00 00       	jmp    c0014f8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014ea1:	83 f8 02             	cmp    eax,0x2
c0014ea4:	0f 85 81 00 00 00    	jne    c0014f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014eaa:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014eb1:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014eb5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014eb9:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014ec1:	74 21                	je     c0014ee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014ec3:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014ecb:	74 17                	je     c0014ee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014ecd:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014ed1:	ba 0a 00 00 00       	mov    edx,0xa
c0014ed6:	83 f9 0e             	cmp    ecx,0xe
c0014ed9:	77 03                	ja     c0014ede <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014edb:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014ede:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014ee2:	76 1f                	jbe    c0014f03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014ee4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eed:	74 65                	je     c0014f54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014eef:	83 ec 0c             	sub    esp,0xc
c0014ef2:	68 98 21 02 c0       	push   0xc0022198
c0014ef7:	e8 dd c2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0014efc:	83 c4 10             	add    esp,0x10
c0014eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f03:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014f08:	8b 10                	mov    edx,DWORD PTR [eax]
c0014f0a:	74 15                	je     c0014f21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014f0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014f10:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014f17:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014f1b:	01 d1                	add    ecx,edx
c0014f1d:	01 ce                	add    esi,ecx
c0014f1f:	eb 06                	jmp    c0014f27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014f21:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014f25:	01 d6                	add    esi,edx
c0014f27:	89 30                	mov    DWORD PTR [eax],esi
c0014f29:	eb 63                	jmp    c0014f8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f2b:	56                   	push   esi
c0014f2c:	56                   	push   esi
c0014f2d:	50                   	push   eax
c0014f2e:	68 b4 21 02 c0       	push   0xc00221b4
c0014f33:	e8 d2 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014f38:	83 c4 10             	add    esp,0x10
c0014f3b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f40:	74 12                	je     c0014f54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f42:	83 ec 0c             	sub    esp,0xc
c0014f45:	68 bf 21 02 c0       	push   0xc00221bf
c0014f4a:	e8 8a c2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0014f4f:	83 c4 10             	add    esp,0x10
c0014f52:	eb 3a                	jmp    c0014f8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f54:	83 ec 0c             	sub    esp,0xc
c0014f57:	53                   	push   ebx
c0014f58:	e8 eb 68 ff ff       	call   c000b848 <File::close()>
c0014f5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f68:	e8 76 2b ff ff       	call   c0007ae3 <free>
c0014f6d:	59                   	pop    ecx
c0014f6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f72:	e8 6c 2b ff ff       	call   c0007ae3 <free>
c0014f77:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f7a:	e8 64 2b ff ff       	call   c0007ae3 <free>
c0014f7f:	5b                   	pop    ebx
c0014f80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f84:	e8 5a 2b ff ff       	call   c0007ae3 <free>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	eb 1e                	jmp    c0014fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f8e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0014f92:	e9 4d fd ff ff       	jmp    c0014ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0014f97:	83 ec 0c             	sub    esp,0xc
c0014f9a:	57                   	push   edi
c0014f9b:	e8 43 2b ff ff       	call   c0007ae3 <free>
c0014fa0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0014fa4:	83 c4 10             	add    esp,0x10
c0014fa7:	e9 cc fc ff ff       	jmp    c0014c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0014fac:	31 c0                	xor    eax,eax
c0014fae:	eb 32                	jmp    c0014fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014fb0:	83 ec 0c             	sub    esp,0xc
c0014fb3:	53                   	push   ebx
c0014fb4:	e8 8f 68 ff ff       	call   c000b848 <File::close()>
c0014fb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fbe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fc1:	58                   	pop    eax
c0014fc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fc6:	e8 18 2b ff ff       	call   c0007ae3 <free>
c0014fcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fce:	e8 10 2b ff ff       	call   c0007ae3 <free>
c0014fd3:	5a                   	pop    edx
c0014fd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fd8:	e8 06 2b ff ff       	call   c0007ae3 <free>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	b0 01                	mov    al,0x1
c0014fe2:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014fe8:	5b                   	pop    ebx
c0014fe9:	5e                   	pop    esi
c0014fea:	5f                   	pop    edi
c0014feb:	5d                   	pop    ebp
c0014fec:	c3                   	ret    

c0014fed <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014fed:	56                   	push   esi
c0014fee:	31 d2                	xor    edx,edx
c0014ff0:	53                   	push   ebx
c0014ff1:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0014ff7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ffb:	39 d3                	cmp    ebx,edx
c0014ffd:	7e 1b                	jle    c001501a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014fff:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015006:	39 c8                	cmp    eax,ecx
c0015008:	77 0d                	ja     c0015017 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001500a:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0015011:	01 c6                	add    esi,eax
c0015013:	39 ce                	cmp    esi,ecx
c0015015:	77 05                	ja     c001501c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015017:	42                   	inc    edx
c0015018:	eb e1                	jmp    c0014ffb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001501a:	31 c0                	xor    eax,eax
c001501c:	5b                   	pop    ebx
c001501d:	5e                   	pop    esi
c001501e:	c3                   	ret    

c001501f <Thr::getDriverNameFromAddress(unsigned long)>:
c001501f:	53                   	push   ebx
c0015020:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015026:	31 c0                	xor    eax,eax
c0015028:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001502c:	39 c3                	cmp    ebx,eax
c001502e:	7e 22                	jle    c0015052 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015030:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015037:	39 ca                	cmp    edx,ecx
c0015039:	77 14                	ja     c001504f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001503b:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015042:	39 ca                	cmp    edx,ecx
c0015044:	76 09                	jbe    c001504f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015046:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c001504d:	eb 05                	jmp    c0015054 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001504f:	40                   	inc    eax
c0015050:	eb da                	jmp    c001502c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015052:	31 c0                	xor    eax,eax
c0015054:	5b                   	pop    ebx
c0015055:	c3                   	ret    

c0015056 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015056:	53                   	push   ebx
c0015057:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001505b:	53                   	push   ebx
c001505c:	e8 8c ff ff ff       	call   c0014fed <Thr::getDriverBaseFromAddress(unsigned long)>
c0015061:	5a                   	pop    edx
c0015062:	31 d2                	xor    edx,edx
c0015064:	85 c0                	test   eax,eax
c0015066:	74 04                	je     c001506c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015068:	89 da                	mov    edx,ebx
c001506a:	29 c2                	sub    edx,eax
c001506c:	5b                   	pop    ebx
c001506d:	89 d0                	mov    eax,edx
c001506f:	c3                   	ret    

c0015070 <Thr::loadDLL(char const*, bool)>:
c0015070:	55                   	push   ebp
c0015071:	57                   	push   edi
c0015072:	56                   	push   esi
c0015073:	53                   	push   ebx
c0015074:	81 ec 34 01 00 00    	sub    esp,0x134
c001507a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015081:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015088:	56                   	push   esi
c0015089:	68 d7 21 02 c0       	push   0xc00221d7
c001508e:	e8 77 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015093:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001509a:	e8 34 2a ff ff       	call   c0007ad3 <malloc>
c001509f:	83 c4 0c             	add    esp,0xc
c00150a2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00150a8:	56                   	push   esi
c00150a9:	50                   	push   eax
c00150aa:	89 c3                	mov    ebx,eax
c00150ac:	e8 7d 66 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c00150b1:	83 c4 10             	add    esp,0x10
c00150b4:	85 db                	test   ebx,ebx
c00150b6:	75 3c                	jne    c00150f4 <Thr::loadDLL(char const*, bool)+0x84>
c00150b8:	89 e8                	mov    eax,ebp
c00150ba:	84 c0                	test   al,al
c00150bc:	0f 84 e1 01 00 00    	je     c00152a3 <Thr::loadDLL(char const*, bool)+0x233>
c00150c2:	50                   	push   eax
c00150c3:	50                   	push   eax
c00150c4:	68 e8 21 02 c0       	push   0xc00221e8
c00150c9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00150cd:	57                   	push   edi
c00150ce:	e8 7d b5 fe ff       	call   c0000650 <strcpy>
c00150d3:	58                   	pop    eax
c00150d4:	5a                   	pop    edx
c00150d5:	56                   	push   esi
c00150d6:	57                   	push   edi
c00150d7:	e8 94 b7 fe ff       	call   c0000870 <strcat>
c00150dc:	59                   	pop    ecx
c00150dd:	58                   	pop    eax
c00150de:	68 fb 21 02 c0       	push   0xc00221fb
c00150e3:	57                   	push   edi
c00150e4:	e8 87 b7 fe ff       	call   c0000870 <strcat>
c00150e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150ec:	e8 e8 c0 ff ff       	call   c00111d9 <KePanic(char const*)>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	50                   	push   eax
c00150f5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00150f9:	50                   	push   eax
c00150fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00150fe:	50                   	push   eax
c00150ff:	53                   	push   ebx
c0015100:	e8 e7 69 ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c0015105:	83 c4 10             	add    esp,0x10
c0015108:	85 db                	test   ebx,ebx
c001510a:	74 0c                	je     c0015118 <Thr::loadDLL(char const*, bool)+0xa8>
c001510c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001510e:	83 ec 0c             	sub    esp,0xc
c0015111:	53                   	push   ebx
c0015112:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015115:	83 c4 10             	add    esp,0x10
c0015118:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001511d:	75 0a                	jne    c0015129 <Thr::loadDLL(char const*, bool)+0xb9>
c001511f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015123:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015127:	75 3e                	jne    c0015167 <Thr::loadDLL(char const*, bool)+0xf7>
c0015129:	89 e8                	mov    eax,ebp
c001512b:	31 db                	xor    ebx,ebx
c001512d:	84 c0                	test   al,al
c001512f:	0f 84 6e 01 00 00    	je     c00152a3 <Thr::loadDLL(char const*, bool)+0x233>
c0015135:	50                   	push   eax
c0015136:	50                   	push   eax
c0015137:	68 e8 21 02 c0       	push   0xc00221e8
c001513c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015140:	53                   	push   ebx
c0015141:	e8 0a b5 fe ff       	call   c0000650 <strcpy>
c0015146:	58                   	pop    eax
c0015147:	5a                   	pop    edx
c0015148:	56                   	push   esi
c0015149:	53                   	push   ebx
c001514a:	e8 21 b7 fe ff       	call   c0000870 <strcat>
c001514f:	59                   	pop    ecx
c0015150:	5f                   	pop    edi
c0015151:	68 fb 21 02 c0       	push   0xc00221fb
c0015156:	53                   	push   ebx
c0015157:	e8 14 b7 fe ff       	call   c0000870 <strcat>
c001515c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001515f:	e8 75 c0 ff ff       	call   c00111d9 <KePanic(char const*)>
c0015164:	83 c4 10             	add    esp,0x10
c0015167:	53                   	push   ebx
c0015168:	6a 03                	push   0x3
c001516a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015172:	05 ff 0f 00 00       	add    eax,0xfff
c0015177:	83 d2 00             	adc    edx,0x0
c001517a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001517e:	50                   	push   eax
c001517f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015185:	e8 7c 4c ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001518a:	89 c3                	mov    ebx,eax
c001518c:	58                   	pop    eax
c001518d:	5a                   	pop    edx
c001518e:	53                   	push   ebx
c001518f:	68 32 08 02 c0       	push   0xc0020832
c0015194:	e8 71 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015199:	89 34 24             	mov    DWORD PTR [esp],esi
c001519c:	e8 df b3 fe ff       	call   c0000580 <strlen>
c00151a1:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c00151a7:	40                   	inc    eax
c00151a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00151ab:	e8 23 29 ff ff       	call   c0007ad3 <malloc>
c00151b0:	59                   	pop    ecx
c00151b1:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c00151b8:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00151bd:	5f                   	pop    edi
c00151be:	56                   	push   esi
c00151bf:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00151c6:	e8 85 b4 fe ff       	call   c0000650 <strcpy>
c00151cb:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00151d0:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00151d7:	8d 50 01             	lea    edx,[eax+0x1]
c00151da:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00151e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151e4:	83 c4 0c             	add    esp,0xc
c00151e7:	6a 01                	push   0x1
c00151e9:	53                   	push   ebx
c00151ea:	56                   	push   esi
c00151eb:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00151f2:	e8 b5 f6 ff ff       	call   c00148ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	89 c7                	mov    edi,eax
c00151fc:	89 f8                	mov    eax,edi
c00151fe:	83 f0 01             	xor    eax,0x1
c0015201:	84 c0                	test   al,al
c0015203:	74 18                	je     c001521d <Thr::loadDLL(char const*, bool)+0x1ad>
c0015205:	89 e8                	mov    eax,ebp
c0015207:	84 c0                	test   al,al
c0015209:	74 12                	je     c001521d <Thr::loadDLL(char const*, bool)+0x1ad>
c001520b:	83 ec 0c             	sub    esp,0xc
c001520e:	68 fd 21 02 c0       	push   0xc00221fd
c0015213:	e8 c1 bf ff ff       	call   c00111d9 <KePanic(char const*)>
c0015218:	83 c4 10             	add    esp,0x10
c001521b:	eb 06                	jmp    c0015223 <Thr::loadDLL(char const*, bool)+0x1b3>
c001521d:	89 f8                	mov    eax,edi
c001521f:	84 c0                	test   al,al
c0015221:	75 10                	jne    c0015233 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015223:	83 ec 0c             	sub    esp,0xc
c0015226:	68 1c 22 02 c0       	push   0xc002221c
c001522b:	e8 a9 bf ff ff       	call   c00111d9 <KePanic(char const*)>
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	31 f6                	xor    esi,esi
c0015235:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015239:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001523d:	05 ff 0f 00 00       	add    eax,0xfff
c0015242:	83 d2 00             	adc    edx,0x0
c0015245:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015249:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001524d:	c1 ea 0c             	shr    edx,0xc
c0015250:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015254:	ba 00 00 00 00       	mov    edx,0x0
c0015259:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001525d:	89 d0                	mov    eax,edx
c001525f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015263:	73 32                	jae    c0015297 <Thr::loadDLL(char const*, bool)+0x227>
c0015265:	50                   	push   eax
c0015266:	50                   	push   eax
c0015267:	89 f0                	mov    eax,esi
c0015269:	c1 e0 0c             	shl    eax,0xc
c001526c:	01 d8                	add    eax,ebx
c001526e:	50                   	push   eax
c001526f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015275:	e8 70 46 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	8b 00                	mov    eax,DWORD PTR [eax]
c001527f:	a8 60                	test   al,0x60
c0015281:	75 11                	jne    c0015294 <Thr::loadDLL(char const*, bool)+0x224>
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	25 00 f0 ff ff       	and    eax,0xfffff000
c001528b:	50                   	push   eax
c001528c:	e8 e8 2a ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015291:	83 c4 10             	add    esp,0x10
c0015294:	46                   	inc    esi
c0015295:	eb 9e                	jmp    c0015235 <Thr::loadDLL(char const*, bool)+0x1c5>
c0015297:	89 f8                	mov    eax,edi
c0015299:	84 c0                	test   al,al
c001529b:	b8 00 00 00 00       	mov    eax,0x0
c00152a0:	0f 44 d8             	cmove  ebx,eax
c00152a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00152a9:	89 d8                	mov    eax,ebx
c00152ab:	5b                   	pop    ebx
c00152ac:	5e                   	pop    esi
c00152ad:	5f                   	pop    edi
c00152ae:	5d                   	pop    ebp
c00152af:	c3                   	ret    

c00152b0 <Thr::executeDLL(unsigned long, void*)>:
c00152b0:	56                   	push   esi
c00152b1:	53                   	push   ebx
c00152b2:	52                   	push   edx
c00152b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152bb:	85 db                	test   ebx,ebx
c00152bd:	75 10                	jne    c00152cf <Thr::executeDLL(unsigned long, void*)+0x1f>
c00152bf:	83 ec 0c             	sub    esp,0xc
c00152c2:	68 38 22 02 c0       	push   0xc0022238
c00152c7:	e8 0d bf ff ff       	call   c00111d9 <KePanic(char const*)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	50                   	push   eax
c00152d0:	50                   	push   eax
c00152d1:	53                   	push   ebx
c00152d2:	68 62 22 02 c0       	push   0xc0022262
c00152d7:	e8 2e 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152dc:	89 d8                	mov    eax,ebx
c00152de:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00152e2:	83 c4 14             	add    esp,0x14
c00152e5:	5b                   	pop    ebx
c00152e6:	5e                   	pop    esi
c00152e7:	ff e0                	jmp    eax
c00152e9:	66 90                	xchg   ax,ax
c00152eb:	90                   	nop

c00152ec <userModeEntryPoint(void*)>:
c00152ec:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00152f1:	83 e8 01             	sub    eax,0x1
c00152f4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00152f9:	75 01                	jne    c00152fc <userModeEntryPoint(void*)+0x10>
c00152fb:	fb                   	sti    
c00152fc:	fb                   	sti    
c00152fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015302:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015305:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001530b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001530f:	e9 2b af fe ff       	jmp    c000023f <goToUsermode>

c0015314 <changeTSS>:
c0015314:	83 ec 14             	sub    esp,0x14
c0015317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001531c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001531f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015324:	c1 e2 15             	shl    edx,0x15
c0015327:	29 d0                	sub    eax,edx
c0015329:	50                   	push   eax
c001532a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001532f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015335:	05 7c 11 00 00       	add    eax,0x117c
c001533a:	50                   	push   eax
c001533b:	e8 fc 3b ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015340:	83 c4 1c             	add    esp,0x1c
c0015343:	c3                   	ret    

c0015344 <switchToThread(ThreadControlBlock*)>:
c0015344:	57                   	push   edi
c0015345:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001534b:	56                   	push   esi
c001534c:	53                   	push   ebx
c001534d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015351:	85 c9                	test   ecx,ecx
c0015353:	0f 85 8b 00 00 00    	jne    c00153e4 <switchToThread(ThreadControlBlock*)+0xa0>
c0015359:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001535d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015363:	74 7b                	je     c00153e0 <switchToThread(ThreadControlBlock*)+0x9c>
c0015365:	b8 00 04 00 00       	mov    eax,0x400
c001536a:	29 d0                	sub    eax,edx
c001536c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001536f:	d1 f8                	sar    eax,1
c0015371:	01 d0                	add    eax,edx
c0015373:	90                   	nop
c0015374:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015377:	e8 04 28 00 00       	call   c0017b80 <HalQueryPerformanceCounter()>
c001537c:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015381:	89 c6                	mov    esi,eax
c0015383:	89 d7                	mov    edi,edx
c0015385:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c001538b:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015390:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c0015396:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c001539c:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00153a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153a8:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00153ae:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00153b4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00153b7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00153ba:	01 c6                	add    esi,eax
c00153bc:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00153bf:	11 d7                	adc    edi,edx
c00153c1:	83 ec 0c             	sub    esp,0xc
c00153c4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00153c7:	53                   	push   ebx
c00153c8:	e8 aa ae fe ff       	call   c0000277 <switchToThreadASM>
c00153cd:	0f 20 c0             	mov    eax,cr0
c00153d0:	83 c8 08             	or     eax,0x8
c00153d3:	0f 22 c0             	mov    cr0,eax
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	5b                   	pop    ebx
c00153da:	5e                   	pop    esi
c00153db:	5f                   	pop    edi
c00153dc:	c3                   	ret    
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	31 c0                	xor    eax,eax
c00153e2:	eb 90                	jmp    c0015374 <switchToThread(ThreadControlBlock*)+0x30>
c00153e4:	5b                   	pop    ebx
c00153e5:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00153ef:	5e                   	pop    esi
c00153f0:	5f                   	pop    edi
c00153f1:	c3                   	ret    
c00153f2:	66 90                	xchg   ax,ax

c00153f4 <Process::addArgs(char**)>:
c00153f4:	57                   	push   edi
c00153f5:	56                   	push   esi
c00153f6:	53                   	push   ebx
c00153f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153fb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00153ff:	85 f6                	test   esi,esi
c0015401:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001540b:	74 4f                	je     c001545c <Process::addArgs(char**)+0x68>
c001540d:	8b 06                	mov    eax,DWORD PTR [esi]
c001540f:	85 c0                	test   eax,eax
c0015411:	74 49                	je     c001545c <Process::addArgs(char**)+0x68>
c0015413:	31 db                	xor    ebx,ebx
c0015415:	8d 76 00             	lea    esi,[esi+0x0]
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	50                   	push   eax
c001541c:	e8 5f b1 fe ff       	call   c0000580 <strlen>
c0015421:	83 c0 01             	add    eax,0x1
c0015424:	89 04 24             	mov    DWORD PTR [esp],eax
c0015427:	e8 a7 26 ff ff       	call   c0007ad3 <malloc>
c001542c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015433:	5a                   	pop    edx
c0015434:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015437:	83 c3 01             	add    ebx,0x1
c001543a:	59                   	pop    ecx
c001543b:	52                   	push   edx
c001543c:	50                   	push   eax
c001543d:	e8 0e b2 fe ff       	call   c0000650 <strcpy>
c0015442:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015448:	83 c4 10             	add    esp,0x10
c001544b:	83 c1 01             	add    ecx,0x1
c001544e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015454:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015457:	85 c0                	test   eax,eax
c0015459:	75 bd                	jne    c0015418 <Process::addArgs(char**)+0x24>
c001545b:	90                   	nop
c001545c:	5b                   	pop    ebx
c001545d:	5e                   	pop    esi
c001545e:	5f                   	pop    edi
c001545f:	c3                   	ret    

c0015460 <Process::Process(char const*, Process*, char**)>:
c0015460:	56                   	push   esi
c0015461:	53                   	push   ebx
c0015462:	83 ec 14             	sub    esp,0x14
c0015465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015469:	05 0c 02 00 00       	add    eax,0x20c
c001546e:	bb 07 00 00 00       	mov    ebx,0x7
c0015473:	89 c6                	mov    esi,eax
c0015475:	8d 76 00             	lea    esi,[esi+0x0]
c0015478:	85 db                	test   ebx,ebx
c001547a:	78 14                	js     c0015490 <Process::Process(char const*, Process*, char**)+0x30>
c001547c:	83 ec 0c             	sub    esp,0xc
c001547f:	56                   	push   esi
c0015480:	e8 33 a6 00 00       	call   c001fab8 <ThreadControlBlock::ThreadControlBlock()>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	83 c6 5f             	add    esi,0x5f
c001548b:	83 eb 01             	sub    ebx,0x1
c001548e:	eb e8                	jmp    c0015478 <Process::Process(char const*, Process*, char**)+0x18>
c0015490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015494:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001549b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001549f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154ad:	e8 1c bb ff ff       	call   c0010fce <KeNewProcessEnv(Process*)>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	89 c2                	mov    edx,eax
c00154b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00154c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00154ce:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c00154d3:	8d 50 01             	lea    edx,[eax+0x1]
c00154d6:	89 15 80 34 02 c0    	mov    DWORD PTR ds:0xc0023480,edx
c00154dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154e0:	89 02                	mov    DWORD PTR [edx],eax
c00154e2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154f1:	e8 dd 25 ff ff       	call   c0007ad3 <malloc>
c00154f6:	83 c4 10             	add    esp,0x10
c00154f9:	89 c3                	mov    ebx,eax
c00154fb:	83 ec 08             	sub    esp,0x8
c00154fe:	6a 00                	push   0x0
c0015500:	53                   	push   ebx
c0015501:	e8 4c 4b ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001550d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015517:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015525:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015529:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001552f:	e8 be c0 ff ff       	call   c00115f2 <KeInitSignals()>
c0015534:	89 c2                	mov    edx,eax
c0015536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015544:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001554a:	85 c0                	test   eax,eax
c001554c:	74 42                	je     c0015590 <Process::Process(char const*, Process*, char**)+0x130>
c001554e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015552:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015558:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001555e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015562:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015572:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001557c:	05 0c 01 00 00       	add    eax,0x10c
c0015581:	83 ec 08             	sub    esp,0x8
c0015584:	52                   	push   edx
c0015585:	50                   	push   eax
c0015586:	e8 c5 b0 fe ff       	call   c0000650 <strcpy>
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	eb 64                	jmp    c00155f4 <Process::Process(char const*, Process*, char**)+0x194>
c0015590:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015598:	83 ec 0c             	sub    esp,0xc
c001559b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001559f:	e8 2f 25 ff ff       	call   c0007ad3 <malloc>
c00155a4:	83 c4 10             	add    esp,0x10
c00155a7:	89 c3                	mov    ebx,eax
c00155a9:	83 ec 08             	sub    esp,0x8
c00155ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155b0:	53                   	push   ebx
c00155b1:	e8 b6 36 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155bd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00155c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155cd:	83 ec 0c             	sub    esp,0xc
c00155d0:	50                   	push   eax
c00155d1:	e8 44 2f ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00155d6:	83 c4 10             	add    esp,0x10
c00155d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155dd:	05 0c 01 00 00       	add    eax,0x10c
c00155e2:	83 ec 08             	sub    esp,0x8
c00155e5:	68 81 22 02 c0       	push   0xc0022281
c00155ea:	50                   	push   eax
c00155eb:	e8 60 b0 fe ff       	call   c0000650 <strcpy>
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	90                   	nop
c00155f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f8:	83 c0 0c             	add    eax,0xc
c00155fb:	83 ec 08             	sub    esp,0x8
c00155fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015602:	50                   	push   eax
c0015603:	e8 48 b0 fe ff       	call   c0000650 <strcpy>
c0015608:	83 c4 10             	add    esp,0x10
c001560b:	83 ec 08             	sub    esp,0x8
c001560e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015612:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015616:	e8 d9 fd ff ff       	call   c00153f4 <Process::addArgs(char**)>
c001561b:	83 c4 10             	add    esp,0x10
c001561e:	83 ec 08             	sub    esp,0x8
c0015621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015629:	e8 3f ed ff ff       	call   c001436d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001562e:	83 c4 10             	add    esp,0x10
c0015631:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015635:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015639:	83 f0 01             	xor    eax,0x1
c001563c:	88 c2                	mov    dl,al
c001563e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015642:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015648:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001564d:	83 ec 04             	sub    esp,0x4
c0015650:	50                   	push   eax
c0015651:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015655:	68 d8 22 02 c0       	push   0xc00222d8
c001565a:	e8 ab 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001565f:	83 c4 10             	add    esp,0x10
c0015662:	90                   	nop
c0015663:	83 c4 14             	add    esp,0x14
c0015666:	5b                   	pop    ebx
c0015667:	5e                   	pop    esi
c0015668:	c3                   	ret    
c0015669:	90                   	nop
c001566a:	66 90                	xchg   ax,ax

c001566c <Process::Process(bool, char const*, Process*, char**)>:
c001566c:	56                   	push   esi
c001566d:	53                   	push   ebx
c001566e:	83 ec 24             	sub    esp,0x24
c0015671:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015675:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001567d:	05 0c 02 00 00       	add    eax,0x20c
c0015682:	bb 07 00 00 00       	mov    ebx,0x7
c0015687:	89 c6                	mov    esi,eax
c0015689:	8d 76 00             	lea    esi,[esi+0x0]
c001568c:	85 db                	test   ebx,ebx
c001568e:	78 14                	js     c00156a4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015690:	83 ec 0c             	sub    esp,0xc
c0015693:	56                   	push   esi
c0015694:	e8 1f a4 00 00       	call   c001fab8 <ThreadControlBlock::ThreadControlBlock()>
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	83 c6 5f             	add    esi,0x5f
c001569f:	83 eb 01             	sub    ebx,0x1
c00156a2:	eb e8                	jmp    c001568c <Process::Process(bool, char const*, Process*, char**)+0x20>
c00156a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156a8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00156af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156b3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00156ba:	83 ec 0c             	sub    esp,0xc
c00156bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00156c1:	e8 08 b9 ff ff       	call   c0010fce <KeNewProcessEnv(Process*)>
c00156c6:	83 c4 10             	add    esp,0x10
c00156c9:	89 c2                	mov    edx,eax
c00156cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156cf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156e2:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c00156e7:	8d 50 01             	lea    edx,[eax+0x1]
c00156ea:	89 15 80 34 02 c0    	mov    DWORD PTR ds:0xc0023480,edx
c00156f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00156f4:	89 02                	mov    DWORD PTR [edx],eax
c00156f6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00156fe:	83 ec 0c             	sub    esp,0xc
c0015701:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015705:	e8 c9 23 ff ff       	call   c0007ad3 <malloc>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	89 c3                	mov    ebx,eax
c001570f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015714:	83 ec 08             	sub    esp,0x8
c0015717:	50                   	push   eax
c0015718:	53                   	push   ebx
c0015719:	e8 34 49 ff ff       	call   c000a052 <VAS::VAS(bool)>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015725:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001572b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001572f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001573d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015741:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015747:	e8 a6 be ff ff       	call   c00115f2 <KeInitSignals()>
c001574c:	89 c2                	mov    edx,eax
c001574e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015752:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001575c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015762:	85 c0                	test   eax,eax
c0015764:	74 42                	je     c00157a8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001576a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015770:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015776:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001577a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015780:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015784:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001578a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015794:	05 0c 01 00 00       	add    eax,0x10c
c0015799:	83 ec 08             	sub    esp,0x8
c001579c:	52                   	push   edx
c001579d:	50                   	push   eax
c001579e:	e8 ad ae fe ff       	call   c0000650 <strcpy>
c00157a3:	83 c4 10             	add    esp,0x10
c00157a6:	eb 64                	jmp    c001580c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00157a8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00157b0:	83 ec 0c             	sub    esp,0xc
c00157b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00157b7:	e8 17 23 ff ff       	call   c0007ad3 <malloc>
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	89 c3                	mov    ebx,eax
c00157c1:	83 ec 08             	sub    esp,0x8
c00157c4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157c8:	53                   	push   ebx
c00157c9:	e8 9e 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157e5:	83 ec 0c             	sub    esp,0xc
c00157e8:	50                   	push   eax
c00157e9:	e8 2c 2d ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f5:	05 0c 01 00 00       	add    eax,0x10c
c00157fa:	83 ec 08             	sub    esp,0x8
c00157fd:	68 81 22 02 c0       	push   0xc0022281
c0015802:	50                   	push   eax
c0015803:	e8 48 ae fe ff       	call   c0000650 <strcpy>
c0015808:	83 c4 10             	add    esp,0x10
c001580b:	90                   	nop
c001580c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015810:	83 c0 0c             	add    eax,0xc
c0015813:	83 ec 08             	sub    esp,0x8
c0015816:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001581a:	50                   	push   eax
c001581b:	e8 30 ae fe ff       	call   c0000650 <strcpy>
c0015820:	83 c4 10             	add    esp,0x10
c0015823:	83 ec 08             	sub    esp,0x8
c0015826:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001582a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001582e:	e8 c1 fb ff ff       	call   c00153f4 <Process::addArgs(char**)>
c0015833:	83 c4 10             	add    esp,0x10
c0015836:	90                   	nop
c0015837:	83 c4 24             	add    esp,0x24
c001583a:	5b                   	pop    ebx
c001583b:	5e                   	pop    esi
c001583c:	c3                   	ret    
c001583d:	8d 76 00             	lea    esi,[esi+0x0]

c0015840 <taskStartupFunction>:
c0015840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015845:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015848:	c3                   	ret    
c0015849:	90                   	nop
c001584a:	66 90                	xchg   ax,ax

c001584c <Semaphore::Semaphore(int)>:
c001584c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015854:	89 10                	mov    DWORD PTR [eax],edx
c0015856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001585a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015865:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001586c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015870:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015877:	90                   	nop
c0015878:	c3                   	ret    
c0015879:	90                   	nop
c001587a:	66 90                	xchg   ax,ax

c001587c <Mutex::Mutex()>:
c001587c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015880:	6a 01                	push   0x1
c0015882:	50                   	push   eax
c0015883:	e8 c4 ff ff ff       	call   c001584c <Semaphore::Semaphore(int)>
c0015888:	83 c4 08             	add    esp,0x8
c001588b:	90                   	nop
c001588c:	c3                   	ret    
c001588d:	90                   	nop
c001588e:	66 90                	xchg   ax,ax

c0015890 <Process::createThread(void (*)(void*), void*, int)>:
c0015890:	57                   	push   edi
c0015891:	31 c9                	xor    ecx,ecx
c0015893:	56                   	push   esi
c0015894:	53                   	push   ebx
c0015895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015899:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00158a0:	89 f2                	mov    edx,esi
c00158a2:	66 90                	xchg   ax,ax
c00158a4:	0f b7 c2             	movzx  eax,dx
c00158a7:	80 e2 01             	and    dl,0x1
c00158aa:	74 14                	je     c00158c0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00158ac:	d1 f8                	sar    eax,1
c00158ae:	83 c1 01             	add    ecx,0x1
c00158b1:	83 f9 10             	cmp    ecx,0x10
c00158b4:	89 c2                	mov    edx,eax
c00158b6:	75 ec                	jne    c00158a4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00158b8:	31 db                	xor    ebx,ebx
c00158ba:	89 d8                	mov    eax,ebx
c00158bc:	5b                   	pop    ebx
c00158bd:	5e                   	pop    esi
c00158be:	5f                   	pop    edi
c00158bf:	c3                   	ret    
c00158c0:	b8 01 00 00 00       	mov    eax,0x1
c00158c5:	d3 e0                	shl    eax,cl
c00158c7:	09 c6                	or     esi,eax
c00158c9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00158d0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00158d3:	c1 e0 05             	shl    eax,0x5
c00158d6:	29 c8                	sub    eax,ecx
c00158d8:	01 d8                	add    eax,ebx
c00158da:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00158e1:	75 0d                	jne    c00158f0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00158e3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00158ed:	8d 76 00             	lea    esi,[esi+0x0]
c00158f0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00158f6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00158f9:	83 ec 0c             	sub    esp,0xc
c00158fc:	c1 e6 05             	shl    esi,0x5
c00158ff:	29 ce                	sub    esi,ecx
c0015901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015904:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015907:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001590d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015913:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015919:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015920:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015926:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001592a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015930:	89 ca                	mov    edx,ecx
c0015932:	f7 da                	neg    edx
c0015934:	c1 e2 15             	shl    edx,0x15
c0015937:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001593d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015943:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015947:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015951:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015957:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001595b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015961:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001596b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015975:	68 00 01 00 00       	push   0x100
c001597a:	e8 54 21 ff ff       	call   c0007ad3 <malloc>
c001597f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015982:	58                   	pop    eax
c0015983:	5a                   	pop    edx
c0015984:	53                   	push   ebx
c0015985:	68 e4 96 02 c0       	push   0xc00296e4
c001598a:	e8 c1 9e 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001598f:	83 c4 10             	add    esp,0x10
c0015992:	89 d8                	mov    eax,ebx
c0015994:	5b                   	pop    ebx
c0015995:	5e                   	pop    esi
c0015996:	5f                   	pop    edi
c0015997:	c3                   	ret    

c0015998 <Process::createUserThread()>:
c0015998:	83 ec 0c             	sub    esp,0xc
c001599b:	68 80 00 00 00       	push   0x80
c00159a0:	6a 00                	push   0x0
c00159a2:	68 ec 52 01 c0       	push   0xc00152ec
c00159a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159ab:	50                   	push   eax
c00159ac:	e8 df fe ff ff       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c00159b1:	83 c4 1c             	add    esp,0x1c
c00159b4:	c3                   	ret    
c00159b5:	8d 76 00             	lea    esi,[esi+0x0]

c00159b8 <setupMultitasking(void (*)())>:
c00159b8:	56                   	push   esi
c00159b9:	53                   	push   ebx
c00159ba:	83 ec 04             	sub    esp,0x4
c00159bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159c1:	eb 11                	jmp    c00159d4 <setupMultitasking(void (*)())+0x1c>
c00159c3:	90                   	nop
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	68 e4 96 02 c0       	push   0xc00296e4
c00159cc:	e8 c3 9d 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159d1:	83 c4 10             	add    esp,0x10
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	68 e4 96 02 c0       	push   0xc00296e4
c00159dc:	e8 8f 9d 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159e1:	83 c4 10             	add    esp,0x10
c00159e4:	84 c0                	test   al,al
c00159e6:	74 dc                	je     c00159c4 <setupMultitasking(void (*)())+0xc>
c00159e8:	83 ec 0c             	sub    esp,0xc
c00159eb:	68 24 07 00 00       	push   0x724
c00159f0:	e8 de 20 ff ff       	call   c0007ad3 <malloc>
c00159f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159fc:	6a 00                	push   0x0
c00159fe:	68 85 22 02 c0       	push   0xc0022285
c0015a03:	6a 01                	push   0x1
c0015a05:	50                   	push   eax
c0015a06:	89 c3                	mov    ebx,eax
c0015a08:	e8 5f fc ff ff       	call   c001566c <Process::Process(bool, char const*, Process*, char**)>
c0015a0d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015a13:	83 c4 14             	add    esp,0x14
c0015a16:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015a1c:	50                   	push   eax
c0015a1d:	e8 4d 2d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015a22:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a29:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a33:	83 c8 01             	or     eax,0x1
c0015a36:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a3d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a43:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a46:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a50:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a56:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a60:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a66:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a70:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a7a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a80:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a86:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a90:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a9a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015aa1:	e8 2d 20 ff ff       	call   c0007ad3 <malloc>
c0015aa6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015aac:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015ab2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015ab8:	5a                   	pop    edx
c0015ab9:	59                   	pop    ecx
c0015aba:	68 81 22 02 c0       	push   0xc0022281
c0015abf:	50                   	push   eax
c0015ac0:	e8 8b ab fe ff       	call   c0000650 <strcpy>
c0015ac5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015acc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ad0:	83 c4 14             	add    esp,0x14
c0015ad3:	5b                   	pop    ebx
c0015ad4:	5e                   	pop    esi
c0015ad5:	e9 8f a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015ada:	66 90                	xchg   ax,ax

c0015adc <schedule()>:
c0015adc:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015ae2:	85 d2                	test   edx,edx
c0015ae4:	74 0e                	je     c0015af4 <schedule()+0x18>
c0015ae6:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015af0:	c3                   	ret    
c0015af1:	8d 76 00             	lea    esi,[esi+0x0]
c0015af4:	53                   	push   ebx
c0015af5:	83 ec 14             	sub    esp,0x14
c0015af8:	68 e4 96 02 c0       	push   0xc00296e4
c0015afd:	e8 6e 9c 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b02:	83 c4 10             	add    esp,0x10
c0015b05:	84 c0                	test   al,al
c0015b07:	75 3f                	jne    c0015b48 <schedule()+0x6c>
c0015b09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b11:	83 fa 01             	cmp    edx,0x1
c0015b14:	74 3a                	je     c0015b50 <schedule()+0x74>
c0015b16:	66 90                	xchg   ax,ax
c0015b18:	83 ec 0c             	sub    esp,0xc
c0015b1b:	68 e4 96 02 c0       	push   0xc00296e4
c0015b20:	e8 67 9c 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b25:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015b2c:	89 c3                	mov    ebx,eax
c0015b2e:	e8 61 9c 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b33:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b3d:	e8 02 f8 ff ff       	call   c0015344 <switchToThread(ThreadControlBlock*)>
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	8d 76 00             	lea    esi,[esi+0x0]
c0015b48:	83 c4 08             	add    esp,0x8
c0015b4b:	5b                   	pop    ebx
c0015b4c:	c3                   	ret    
c0015b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b50:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b57:	83 ec 08             	sub    esp,0x8
c0015b5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b5f:	50                   	push   eax
c0015b60:	68 e4 96 02 c0       	push   0xc00296e4
c0015b65:	e8 e6 9c 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b6a:	83 c4 10             	add    esp,0x10
c0015b6d:	eb a9                	jmp    c0015b18 <schedule()+0x3c>
c0015b6f:	90                   	nop

c0015b70 <Semaphore::tryAcquire()>:
c0015b70:	53                   	push   ebx
c0015b71:	83 ec 08             	sub    esp,0x8
c0015b74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b78:	fa                   	cli    
c0015b79:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015b7f:	8d 42 01             	lea    eax,[edx+0x1]
c0015b82:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015b87:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015b8c:	8d 58 01             	lea    ebx,[eax+0x1]
c0015b8f:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015b95:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b98:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b9a:	7c 2c                	jl     c0015bc8 <Semaphore::tryAcquire()+0x58>
c0015b9c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ba1:	85 c0                	test   eax,eax
c0015ba3:	75 0b                	jne    c0015bb0 <Semaphore::tryAcquire()+0x40>
c0015ba5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015baa:	85 c0                	test   eax,eax
c0015bac:	75 5a                	jne    c0015c08 <Semaphore::tryAcquire()+0x98>
c0015bae:	66 90                	xchg   ax,ax
c0015bb0:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bb6:	31 c0                	xor    eax,eax
c0015bb8:	85 d2                	test   edx,edx
c0015bba:	75 04                	jne    c0015bc0 <Semaphore::tryAcquire()+0x50>
c0015bbc:	fb                   	sti    
c0015bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc0:	83 c4 08             	add    esp,0x8
c0015bc3:	5b                   	pop    ebx
c0015bc4:	c3                   	ret    
c0015bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015bcd:	83 c3 01             	add    ebx,0x1
c0015bd0:	85 c0                	test   eax,eax
c0015bd2:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015bd5:	75 21                	jne    c0015bf8 <Semaphore::tryAcquire()+0x88>
c0015bd7:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015bdd:	85 c9                	test   ecx,ecx
c0015bdf:	74 17                	je     c0015bf8 <Semaphore::tryAcquire()+0x88>
c0015be1:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015beb:	e8 ec fe ff ff       	call   c0015adc <schedule()>
c0015bf0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015bf5:	8d 50 ff             	lea    edx,[eax-0x1]
c0015bf8:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015bfe:	85 d2                	test   edx,edx
c0015c00:	b0 01                	mov    al,0x1
c0015c02:	75 bc                	jne    c0015bc0 <Semaphore::tryAcquire()+0x50>
c0015c04:	eb b6                	jmp    c0015bbc <Semaphore::tryAcquire()+0x4c>
c0015c06:	66 90                	xchg   ax,ax
c0015c08:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c12:	e8 c5 fe ff ff       	call   c0015adc <schedule()>
c0015c17:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c1c:	8d 50 ff             	lea    edx,[eax-0x1]
c0015c1f:	31 c0                	xor    eax,eax
c0015c21:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c27:	85 d2                	test   edx,edx
c0015c29:	75 95                	jne    c0015bc0 <Semaphore::tryAcquire()+0x50>
c0015c2b:	eb 8f                	jmp    c0015bbc <Semaphore::tryAcquire()+0x4c>
c0015c2d:	90                   	nop
c0015c2e:	66 90                	xchg   ax,ax

c0015c30 <Semaphore::assertLocked(char const*)>:
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c37:	fa                   	cli    
c0015c38:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015c3e:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c43:	83 c1 01             	add    ecx,0x1
c0015c46:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015c4c:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c4f:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015c55:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c57:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015c5a:	7c 28                	jl     c0015c84 <Semaphore::assertLocked(char const*)+0x54>
c0015c5c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c61:	85 c0                	test   eax,eax
c0015c63:	75 0b                	jne    c0015c70 <Semaphore::assertLocked(char const*)+0x40>
c0015c65:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015c6a:	85 c0                	test   eax,eax
c0015c6c:	75 32                	jne    c0015ca0 <Semaphore::assertLocked(char const*)+0x70>
c0015c6e:	66 90                	xchg   ax,ax
c0015c70:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c75:	83 e8 01             	sub    eax,0x1
c0015c78:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c7d:	75 01                	jne    c0015c80 <Semaphore::assertLocked(char const*)+0x50>
c0015c7f:	fb                   	sti    
c0015c80:	83 c4 0c             	add    esp,0xc
c0015c83:	c3                   	ret    
c0015c84:	83 ec 0c             	sub    esp,0xc
c0015c87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c8b:	52                   	push   edx
c0015c8c:	e8 48 b5 ff ff       	call   c00111d9 <KePanic(char const*)>
c0015c91:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	83 e8 01             	sub    eax,0x1
c0015c9c:	eb be                	jmp    c0015c5c <Semaphore::assertLocked(char const*)+0x2c>
c0015c9e:	66 90                	xchg   ax,ax
c0015ca0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015caa:	e8 2d fe ff ff       	call   c0015adc <schedule()>
c0015caf:	eb bf                	jmp    c0015c70 <Semaphore::assertLocked(char const*)+0x40>
c0015cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0015cb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015cb4:	83 ec 0c             	sub    esp,0xc
c0015cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cc0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015cc3:	e8 14 fe ff ff       	call   c0015adc <schedule()>
c0015cc8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ccd:	83 e8 01             	sub    eax,0x1
c0015cd0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cd5:	75 01                	jne    c0015cd8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015cd7:	fb                   	sti    
c0015cd8:	83 c4 0c             	add    esp,0xc
c0015cdb:	c3                   	ret    

c0015cdc <blockTask(TaskState)>:
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	fa                   	cli    
c0015ce0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ce5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ce9:	83 c0 01             	add    eax,0x1
c0015cec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015cf9:	e8 de fd ff ff       	call   c0015adc <schedule()>
c0015cfe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d03:	83 e8 01             	sub    eax,0x1
c0015d06:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d0b:	75 03                	jne    c0015d10 <blockTask(TaskState)+0x34>
c0015d0d:	fb                   	sti    
c0015d0e:	66 90                	xchg   ax,ax
c0015d10:	83 c4 0c             	add    esp,0xc
c0015d13:	c3                   	ret    

c0015d14 <waitTask(int, int*, int)>:
c0015d14:	83 ec 18             	sub    esp,0x18
c0015d17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d20:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d2c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d2f:	6a 07                	push   0x7
c0015d31:	e8 a6 ff ff ff       	call   c0015cdc <blockTask(TaskState)>
c0015d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3b:	83 c4 10             	add    esp,0x10
c0015d3e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d41:	85 d2                	test   edx,edx
c0015d43:	74 0b                	je     c0015d50 <waitTask(int, int*, int)+0x3c>
c0015d45:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d48:	89 02                	mov    DWORD PTR [edx],eax
c0015d4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d4f:	90                   	nop
c0015d50:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d53:	83 c4 0c             	add    esp,0xc
c0015d56:	c3                   	ret    
c0015d57:	90                   	nop

c0015d58 <milliTenthSleepUntil(unsigned int)>:
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5f:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015d65:	76 05                	jbe    c0015d6c <milliTenthSleepUntil(unsigned int)+0x14>
c0015d67:	90                   	nop
c0015d68:	83 c4 0c             	add    esp,0xc
c0015d6b:	c3                   	ret    
c0015d6c:	fa                   	cli    
c0015d6d:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015d73:	83 ec 08             	sub    esp,0x8
c0015d76:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015d7c:	83 c2 01             	add    edx,0x1
c0015d7f:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d85:	83 c1 01             	add    ecx,0x1
c0015d88:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d8e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d94:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9c:	50                   	push   eax
c0015d9d:	68 d8 96 02 c0       	push   0xc00296d8
c0015da2:	e8 a9 9a 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015da7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015dae:	e8 29 ff ff ff       	call   c0015cdc <blockTask(TaskState)>
c0015db3:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	83 e8 01             	sub    eax,0x1
c0015dbe:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015dc3:	85 c0                	test   eax,eax
c0015dc5:	75 09                	jne    c0015dd0 <milliTenthSleepUntil(unsigned int)+0x78>
c0015dc7:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015dcc:	85 c0                	test   eax,eax
c0015dce:	75 14                	jne    c0015de4 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015dd0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dd5:	83 e8 01             	sub    eax,0x1
c0015dd8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ddd:	75 89                	jne    c0015d68 <milliTenthSleepUntil(unsigned int)+0x10>
c0015ddf:	fb                   	sti    
c0015de0:	83 c4 0c             	add    esp,0xc
c0015de3:	c3                   	ret    
c0015de4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dee:	e8 e9 fc ff ff       	call   c0015adc <schedule()>
c0015df3:	eb db                	jmp    c0015dd0 <milliTenthSleepUntil(unsigned int)+0x78>
c0015df5:	8d 76 00             	lea    esi,[esi+0x0]

c0015df8 <milliTenthSleep(unsigned int)>:
c0015df8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dfc:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015e01:	01 c2                	add    edx,eax
c0015e03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015e07:	e9 4c ff ff ff       	jmp    c0015d58 <milliTenthSleepUntil(unsigned int)>

c0015e0c <sleep(unsigned int)>:
c0015e0c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015e14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e18:	eb de                	jmp    c0015df8 <milliTenthSleep(unsigned int)>
c0015e1a:	66 90                	xchg   ax,ax

c0015e1c <Semaphore::acquire()>:
c0015e1c:	83 ec 0c             	sub    esp,0xc
c0015e1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e23:	fa                   	cli    
c0015e24:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e29:	83 c0 01             	add    eax,0x1
c0015e2c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e31:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e36:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e39:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e3f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e42:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e44:	7d 2e                	jge    c0015e74 <Semaphore::acquire()+0x58>
c0015e46:	83 c1 01             	add    ecx,0x1
c0015e49:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e4c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e51:	85 c0                	test   eax,eax
c0015e53:	75 0b                	jne    c0015e60 <Semaphore::acquire()+0x44>
c0015e55:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e5a:	85 c0                	test   eax,eax
c0015e5c:	75 66                	jne    c0015ec4 <Semaphore::acquire()+0xa8>
c0015e5e:	66 90                	xchg   ax,ax
c0015e60:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e65:	83 e8 01             	sub    eax,0x1
c0015e68:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e6d:	75 01                	jne    c0015e70 <Semaphore::acquire()+0x54>
c0015e6f:	fb                   	sti    
c0015e70:	83 c4 0c             	add    esp,0xc
c0015e73:	c3                   	ret    
c0015e74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e80:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e83:	85 c9                	test   ecx,ecx
c0015e85:	74 51                	je     c0015ed8 <Semaphore::acquire()+0xbc>
c0015e87:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e8a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e90:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e93:	90                   	nop
c0015e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e99:	83 ec 0c             	sub    esp,0xc
c0015e9c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e9f:	68 04 23 02 c0       	push   0xc0022304
c0015ea4:	e8 61 4a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015ea9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015eb0:	e8 27 fe ff ff       	call   c0015cdc <blockTask(TaskState)>
c0015eb5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015eba:	83 c4 10             	add    esp,0x10
c0015ebd:	83 e8 01             	sub    eax,0x1
c0015ec0:	eb 8a                	jmp    c0015e4c <Semaphore::acquire()+0x30>
c0015ec2:	66 90                	xchg   ax,ax
c0015ec4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ece:	e8 09 fc ff ff       	call   c0015adc <schedule()>
c0015ed3:	eb 8b                	jmp    c0015e60 <Semaphore::acquire()+0x44>
c0015ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015edd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ee0:	eb b2                	jmp    c0015e94 <Semaphore::acquire()+0x78>
c0015ee2:	66 90                	xchg   ax,ax

c0015ee4 <taskReturned>:
c0015ee4:	83 ec 18             	sub    esp,0x18
c0015ee7:	68 24 23 02 c0       	push   0xc0022324
c0015eec:	e8 e8 b2 ff ff       	call   c00111d9 <KePanic(char const*)>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	83 ec 0c             	sub    esp,0xc
c0015ef7:	6a 02                	push   0x2
c0015ef9:	e8 de fd ff ff       	call   c0015cdc <blockTask(TaskState)>
c0015efe:	fa                   	cli    
c0015eff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f04:	83 c0 01             	add    eax,0x1
c0015f07:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f0c:	e8 cb fb ff ff       	call   c0015adc <schedule()>
c0015f11:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	83 e8 01             	sub    eax,0x1
c0015f1c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f21:	85 c0                	test   eax,eax
c0015f23:	75 cf                	jne    c0015ef4 <taskReturned+0x10>
c0015f25:	fb                   	sti    
c0015f26:	eb cc                	jmp    c0015ef4 <taskReturned+0x10>

c0015f28 <Thr::processFromPID(int)>:
c0015f28:	57                   	push   edi
c0015f29:	56                   	push   esi
c0015f2a:	53                   	push   ebx
c0015f2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f2f:	fa                   	cli    
c0015f30:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015f36:	83 ec 0c             	sub    esp,0xc
c0015f39:	68 e4 96 02 c0       	push   0xc00296e4
c0015f3e:	83 c1 01             	add    ecx,0x1
c0015f41:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015f47:	e8 40 98 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f4c:	83 c4 10             	add    esp,0x10
c0015f4f:	89 c7                	mov    edi,eax
c0015f51:	eb 15                	jmp    c0015f68 <Thr::processFromPID(int)+0x40>
c0015f53:	90                   	nop
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	68 e4 96 02 c0       	push   0xc00296e4
c0015f5c:	e8 2b 98 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f61:	83 c4 10             	add    esp,0x10
c0015f64:	39 f8                	cmp    eax,edi
c0015f66:	74 50                	je     c0015fb8 <Thr::processFromPID(int)+0x90>
c0015f68:	83 ec 0c             	sub    esp,0xc
c0015f6b:	68 e4 96 02 c0       	push   0xc00296e4
c0015f70:	e8 17 98 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f75:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015f7c:	89 c3                	mov    ebx,eax
c0015f7e:	e8 11 98 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f83:	58                   	pop    eax
c0015f84:	5a                   	pop    edx
c0015f85:	53                   	push   ebx
c0015f86:	68 e4 96 02 c0       	push   0xc00296e4
c0015f8b:	e8 c0 98 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f93:	83 c4 10             	add    esp,0x10
c0015f96:	39 30                	cmp    DWORD PTR [eax],esi
c0015f98:	75 ba                	jne    c0015f54 <Thr::processFromPID(int)+0x2c>
c0015f9a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f9f:	83 e8 01             	sub    eax,0x1
c0015fa2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fa7:	74 0b                	je     c0015fb4 <Thr::processFromPID(int)+0x8c>
c0015fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015faf:	90                   	nop
c0015fb0:	5b                   	pop    ebx
c0015fb1:	5e                   	pop    esi
c0015fb2:	5f                   	pop    edi
c0015fb3:	c3                   	ret    
c0015fb4:	fb                   	sti    
c0015fb5:	eb f5                	jmp    c0015fac <Thr::processFromPID(int)+0x84>
c0015fb7:	90                   	nop
c0015fb8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fbd:	8d 50 ff             	lea    edx,[eax-0x1]
c0015fc0:	31 c0                	xor    eax,eax
c0015fc2:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015fc8:	85 d2                	test   edx,edx
c0015fca:	75 e4                	jne    c0015fb0 <Thr::processFromPID(int)+0x88>
c0015fcc:	fb                   	sti    
c0015fcd:	5b                   	pop    ebx
c0015fce:	5e                   	pop    esi
c0015fcf:	5f                   	pop    edi
c0015fd0:	c3                   	ret    
c0015fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0015fd4 <unblockTask(ThreadControlBlock*)>:
c0015fd4:	53                   	push   ebx
c0015fd5:	83 ec 08             	sub    esp,0x8
c0015fd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fdc:	fa                   	cli    
c0015fdd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fe2:	83 c0 01             	add    eax,0x1
c0015fe5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fed:	85 c0                	test   eax,eax
c0015fef:	74 67                	je     c0016058 <unblockTask(ThreadControlBlock*)+0x84>
c0015ff1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015ff4:	83 f8 01             	cmp    eax,0x1
c0015ff7:	74 37                	je     c0016030 <unblockTask(ThreadControlBlock*)+0x5c>
c0015ff9:	83 ec 0c             	sub    esp,0xc
c0015ffc:	68 e4 96 02 c0       	push   0xc00296e4
c0016001:	e8 86 97 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016006:	83 c4 10             	add    esp,0x10
c0016009:	85 c0                	test   eax,eax
c001600b:	75 1b                	jne    c0016028 <unblockTask(ThreadControlBlock*)+0x54>
c001600d:	eb 5d                	jmp    c001606c <unblockTask(ThreadControlBlock*)+0x98>
c001600f:	90                   	nop
c0016010:	83 ec 08             	sub    esp,0x8
c0016013:	50                   	push   eax
c0016014:	68 e4 96 02 c0       	push   0xc00296e4
c0016019:	e8 8e 9a 00 00       	call   c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001601e:	83 c4 10             	add    esp,0x10
c0016021:	85 c0                	test   eax,eax
c0016023:	74 47                	je     c001606c <unblockTask(ThreadControlBlock*)+0x98>
c0016025:	8d 76 00             	lea    esi,[esi+0x0]
c0016028:	39 c3                	cmp    ebx,eax
c001602a:	75 e4                	jne    c0016010 <unblockTask(ThreadControlBlock*)+0x3c>
c001602c:	eb 12                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x6c>
c001602e:	66 90                	xchg   ax,ax
c0016030:	83 ec 0c             	sub    esp,0xc
c0016033:	68 a3 22 02 c0       	push   0xc00222a3
c0016038:	e8 cd 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001603d:	83 c4 10             	add    esp,0x10
c0016040:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016045:	83 e8 01             	sub    eax,0x1
c0016048:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001604d:	75 01                	jne    c0016050 <unblockTask(ThreadControlBlock*)+0x7c>
c001604f:	fb                   	sti    
c0016050:	83 c4 08             	add    esp,0x8
c0016053:	5b                   	pop    ebx
c0016054:	c3                   	ret    
c0016055:	8d 76 00             	lea    esi,[esi+0x0]
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	68 8c 22 02 c0       	push   0xc002228c
c0016060:	e8 a5 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016065:	83 c4 10             	add    esp,0x10
c0016068:	eb d6                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x6c>
c001606a:	66 90                	xchg   ax,ax
c001606c:	83 ec 08             	sub    esp,0x8
c001606f:	53                   	push   ebx
c0016070:	68 e4 96 02 c0       	push   0xc00296e4
c0016075:	e8 d6 97 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001607a:	83 c4 10             	add    esp,0x10
c001607d:	eb c1                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x6c>
c001607f:	90                   	nop

c0016080 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016080:	55                   	push   ebp
c0016081:	57                   	push   edi
c0016082:	56                   	push   esi
c0016083:	53                   	push   ebx
c0016084:	83 ec 1c             	sub    esp,0x1c
c0016087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001608b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001608e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016094:	85 ed                	test   ebp,ebp
c0016096:	7e 28                	jle    c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016098:	31 f6                	xor    esi,esi
c001609a:	66 90                	xchg   ax,ax
c001609c:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00160a3:	83 ec 0c             	sub    esp,0xc
c00160a6:	83 c6 01             	add    esi,0x1
c00160a9:	57                   	push   edi
c00160aa:	e8 34 1a ff ff       	call   c0007ae3 <free>
c00160af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00160bb:	7f df                	jg     c001609c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00160bd:	8d 76 00             	lea    esi,[esi+0x0]
c00160c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160cf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160d2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160d5:	d3 c0                	rol    eax,cl
c00160d7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00160de:	21 c8                	and    eax,ecx
c00160e0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00160e7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160ea:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00160f2:	89 f7                	mov    edi,esi
c00160f4:	0f 85 72 01 00 00    	jne    c001626c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00160fa:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016100:	85 ed                	test   ebp,ebp
c0016102:	74 1c                	je     c0016120 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	55                   	push   ebp
c0016108:	e8 dd ad ff ff       	call   c0010eea <EnvVarContainer::~EnvVarContainer()>
c001610d:	59                   	pop    ecx
c001610e:	5e                   	pop    esi
c001610f:	6a 0c                	push   0xc
c0016111:	55                   	push   ebp
c0016112:	e8 f5 46 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016117:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	89 f7                	mov    edi,esi
c001611f:	90                   	nop
c0016120:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016126:	85 c0                	test   eax,eax
c0016128:	0f 84 b2 00 00 00    	je     c00161e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001612e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016131:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016135:	31 c9                	xor    ecx,ecx
c0016137:	eb 17                	jmp    c0016150 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016139:	8d 76 00             	lea    esi,[esi+0x0]
c001613c:	83 c1 01             	add    ecx,0x1
c001613f:	83 f9 10             	cmp    ecx,0x10
c0016142:	0f 84 98 00 00 00    	je     c00161e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016148:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001614e:	66 90                	xchg   ax,ax
c0016150:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016157:	d3 fa                	sar    edx,cl
c0016159:	80 e2 01             	and    dl,0x1
c001615c:	74 de                	je     c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001615e:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016161:	c1 e2 05             	shl    edx,0x5
c0016164:	29 ca                	sub    edx,ecx
c0016166:	01 d0                	add    eax,edx
c0016168:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001616e:	83 fd 07             	cmp    ebp,0x7
c0016171:	75 c9                	jne    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016173:	05 40 02 00 00       	add    eax,0x240
c0016178:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001617b:	83 fd ff             	cmp    ebp,0xffffffff
c001617e:	0f 8c f0 00 00 00    	jl     c0016274 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016184:	0f 84 ae 01 00 00    	je     c0016338 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001618a:	85 ed                	test   ebp,ebp
c001618c:	0f 84 92 01 00 00    	je     c0016324 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016192:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016194:	75 a6                	jne    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001619a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161a0:	01 d0                	add    eax,edx
c00161a2:	66 90                	xchg   ax,ax
c00161a4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00161b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00161ba:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00161c1:	50                   	push   eax
c00161c2:	e8 0d fe ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161cd:	89 f7                	mov    edi,esi
c00161cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161d3:	83 c1 01             	add    ecx,0x1
c00161d6:	83 f9 10             	cmp    ecx,0x10
c00161d9:	0f 85 69 ff ff ff    	jne    c0016148 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00161df:	90                   	nop
c00161e0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161e6:	85 c0                	test   eax,eax
c00161e8:	74 62                	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161ea:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00161f0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00161f6:	74 54                	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	68 e4 96 02 c0       	push   0xc00296e4
c0016200:	e8 87 95 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016205:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001620c:	89 c7                	mov    edi,eax
c001620e:	e8 5d 95 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	84 c0                	test   al,al
c0016218:	0f 84 ce 00 00 00    	je     c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001621e:	66 90                	xchg   ax,ax
c0016220:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016223:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016229:	85 d2                	test   edx,edx
c001622b:	74 0f                	je     c001623c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001622d:	8b 02                	mov    eax,DWORD PTR [edx]
c001622f:	83 ec 0c             	sub    esp,0xc
c0016232:	52                   	push   edx
c0016233:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016236:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016246:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016249:	8d 76 00             	lea    esi,[esi+0x0]
c001624c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016252:	85 db                	test   ebx,ebx
c0016254:	74 16                	je     c001626c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016256:	83 ec 0c             	sub    esp,0xc
c0016259:	53                   	push   ebx
c001625a:	e8 31 39 ff ff       	call   c0009b90 <VAS::~VAS()>
c001625f:	58                   	pop    eax
c0016260:	5a                   	pop    edx
c0016261:	6a 14                	push   0x14
c0016263:	53                   	push   ebx
c0016264:	e8 a3 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016269:	83 c4 10             	add    esp,0x10
c001626c:	83 c4 1c             	add    esp,0x1c
c001626f:	5b                   	pop    ebx
c0016270:	5e                   	pop    esi
c0016271:	5f                   	pop    edi
c0016272:	5d                   	pop    ebp
c0016273:	c3                   	ret    
c0016274:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	68 58 23 02 c0       	push   0xc0022358
c0016280:	e8 54 af ff ff       	call   c00111d9 <KePanic(char const*)>
c0016285:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	89 f7                	mov    edi,esi
c001628d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016291:	e9 a6 fe ff ff       	jmp    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016296:	66 90                	xchg   ax,ax
c0016298:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001629e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00162a4:	75 1e                	jne    c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162a6:	83 ec 0c             	sub    esp,0xc
c00162a9:	68 c0 23 02 c0       	push   0xc00223c0
c00162ae:	e8 57 46 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00162b3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00162ba:	e8 1d fa ff ff       	call   c0015cdc <blockTask(TaskState)>
c00162bf:	83 c4 10             	add    esp,0x10
c00162c2:	66 90                	xchg   ax,ax
c00162c4:	83 ec 08             	sub    esp,0x8
c00162c7:	56                   	push   esi
c00162c8:	68 e4 96 02 c0       	push   0xc00296e4
c00162cd:	e8 7e 95 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162d2:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162d9:	e8 ae 94 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	39 f8                	cmp    eax,edi
c00162e3:	0f 84 37 ff ff ff    	je     c0016220 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	68 e4 96 02 c0       	push   0xc00296e4
c00162f4:	e8 93 94 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016300:	89 c6                	mov    esi,eax
c0016302:	e8 8d 94 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016307:	83 c4 10             	add    esp,0x10
c001630a:	39 f3                	cmp    ebx,esi
c001630c:	74 b6                	je     c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001630e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016311:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016314:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001631a:	75 a8                	jne    c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001631c:	e9 77 ff ff ff       	jmp    c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016321:	8d 76 00             	lea    esi,[esi+0x0]
c0016324:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	68 8c 23 02 c0       	push   0xc002238c
c0016330:	e9 4b ff ff ff       	jmp    c0016280 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016335:	8d 76 00             	lea    esi,[esi+0x0]
c0016338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001633c:	8b 36                	mov    esi,DWORD PTR [esi]
c001633e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016341:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016344:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001634a:	01 d7                	add    edi,edx
c001634c:	89 f8                	mov    eax,edi
c001634e:	e9 51 fe ff ff       	jmp    c00161a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016353:	90                   	nop

c0016354 <cleanerTaskFunction(void*)>:
c0016354:	53                   	push   ebx
c0016355:	83 ec 08             	sub    esp,0x8
c0016358:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001635d:	83 e8 01             	sub    eax,0x1
c0016360:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016365:	75 01                	jne    c0016368 <cleanerTaskFunction(void*)+0x14>
c0016367:	fb                   	sti    
c0016368:	fa                   	cli    
c0016369:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001636e:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016375:	8d 50 01             	lea    edx,[eax+0x1]
c0016378:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001637e:	0f 84 c4 00 00 00    	je     c0016448 <cleanerTaskFunction(void*)+0xf4>
c0016384:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016389:	85 c0                	test   eax,eax
c001638b:	75 03                	jne    c0016390 <cleanerTaskFunction(void*)+0x3c>
c001638d:	fb                   	sti    
c001638e:	66 90                	xchg   ax,ax
c0016390:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016397:	fa                   	cli    
c0016398:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001639e:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00163a4:	83 c2 01             	add    edx,0x1
c00163a7:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00163ad:	83 c1 01             	add    ecx,0x1
c00163b0:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00163b6:	fa                   	cli    
c00163b7:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00163bd:	83 c3 01             	add    ebx,0x1
c00163c0:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00163c6:	eb 28                	jmp    c00163f0 <cleanerTaskFunction(void*)+0x9c>
c00163c8:	83 ec 0c             	sub    esp,0xc
c00163cb:	68 cc 96 02 c0       	push   0xc00296cc
c00163d0:	e8 b7 93 00 00       	call   c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163d5:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00163dc:	89 c3                	mov    ebx,eax
c00163de:	e8 b1 93 00 00       	call   c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163e6:	e8 95 fc ff ff       	call   c0016080 <cleanupTerminatedTask(ThreadControlBlock*)>
c00163eb:	83 c4 10             	add    esp,0x10
c00163ee:	66 90                	xchg   ax,ax
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	68 cc 96 02 c0       	push   0xc00296cc
c00163f8:	e8 73 93 00 00       	call   c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	84 c0                	test   al,al
c0016402:	74 c4                	je     c00163c8 <cleanerTaskFunction(void*)+0x74>
c0016404:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016409:	83 e8 01             	sub    eax,0x1
c001640c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016411:	75 01                	jne    c0016414 <cleanerTaskFunction(void*)+0xc0>
c0016413:	fb                   	sti    
c0016414:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016419:	83 e8 01             	sub    eax,0x1
c001641c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016421:	0f 85 31 ff ff ff    	jne    c0016358 <cleanerTaskFunction(void*)+0x4>
c0016427:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001642c:	85 c0                	test   eax,eax
c001642e:	0f 84 24 ff ff ff    	je     c0016358 <cleanerTaskFunction(void*)+0x4>
c0016434:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001643e:	e8 99 f6 ff ff       	call   c0015adc <schedule()>
c0016443:	e9 10 ff ff ff       	jmp    c0016358 <cleanerTaskFunction(void*)+0x4>
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	6a 02                	push   0x2
c001644d:	e8 62 f8 ff ff       	call   c0015cb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016452:	83 c4 10             	add    esp,0x10
c0016455:	e9 36 ff ff ff       	jmp    c0016390 <cleanerTaskFunction(void*)+0x3c>
c001645a:	66 90                	xchg   ax,ax

c001645c <terminateTask(int)>:
c001645c:	83 ec 14             	sub    esp,0x14
c001645f:	fa                   	cli    
c0016460:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016466:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001646c:	83 c2 01             	add    edx,0x1
c001646f:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016475:	83 c1 01             	add    ecx,0x1
c0016478:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001647e:	fa                   	cli    
c001647f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016484:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016488:	83 c0 01             	add    eax,0x1
c001648b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016495:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164a0:	50                   	push   eax
c00164a1:	68 cc 96 02 c0       	push   0xc00296cc
c00164a6:	e8 a5 93 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b0:	83 c4 10             	add    esp,0x10
c00164b3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00164ba:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00164bf:	85 c0                	test   eax,eax
c00164c1:	74 65                	je     c0016528 <terminateTask(int)+0xcc>
c00164c3:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	50                   	push   eax
c00164ce:	e8 01 fb ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00164d3:	83 c4 10             	add    esp,0x10
c00164d6:	66 90                	xchg   ax,ax
c00164d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164dd:	83 e8 01             	sub    eax,0x1
c00164e0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164e5:	75 01                	jne    c00164e8 <terminateTask(int)+0x8c>
c00164e7:	fb                   	sti    
c00164e8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00164ed:	83 e8 01             	sub    eax,0x1
c00164f0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00164f5:	75 09                	jne    c0016500 <terminateTask(int)+0xa4>
c00164f7:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00164fe:	75 3c                	jne    c001653c <terminateTask(int)+0xe0>
c0016500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016505:	83 e8 01             	sub    eax,0x1
c0016508:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001650d:	75 01                	jne    c0016510 <terminateTask(int)+0xb4>
c001650f:	fb                   	sti    
c0016510:	fa                   	cli    
c0016511:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016516:	83 c0 01             	add    eax,0x1
c0016519:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001651e:	66 90                	xchg   ax,ax
c0016520:	e8 b7 f5 ff ff       	call   c0015adc <schedule()>
c0016525:	eb d9                	jmp    c0016500 <terminateTask(int)+0xa4>
c0016527:	90                   	nop
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	68 ba 22 02 c0       	push   0xc00222ba
c0016530:	e8 d5 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016535:	83 c4 10             	add    esp,0x10
c0016538:	eb 9e                	jmp    c00164d8 <terminateTask(int)+0x7c>
c001653a:	66 90                	xchg   ax,ax
c001653c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016546:	eb d8                	jmp    c0016520 <terminateTask(int)+0xc4>

c0016548 <Thr::terminateFromIRQ(int)>:
c0016548:	83 ec 18             	sub    esp,0x18
c001654b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001654f:	50                   	push   eax
c0016550:	e8 07 ff ff ff       	call   c001645c <terminateTask(int)>
c0016555:	90                   	nop
c0016556:	66 90                	xchg   ax,ax

c0016558 <Semaphore::release()>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655f:	fa                   	cli    
c0016560:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016565:	83 c0 01             	add    eax,0x1
c0016568:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001656d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016572:	8d 48 01             	lea    ecx,[eax+0x1]
c0016575:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001657b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001657e:	85 c9                	test   ecx,ecx
c0016580:	74 42                	je     c00165c4 <Semaphore::release()+0x6c>
c0016582:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016585:	83 ec 0c             	sub    esp,0xc
c0016588:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001658b:	51                   	push   ecx
c001658c:	e8 43 fa ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c0016591:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016596:	83 c4 10             	add    esp,0x10
c0016599:	83 e8 01             	sub    eax,0x1
c001659c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165a1:	85 c0                	test   eax,eax
c00165a3:	75 0b                	jne    c00165b0 <Semaphore::release()+0x58>
c00165a5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00165aa:	85 c0                	test   eax,eax
c00165ac:	75 22                	jne    c00165d0 <Semaphore::release()+0x78>
c00165ae:	66 90                	xchg   ax,ax
c00165b0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165b5:	83 e8 01             	sub    eax,0x1
c00165b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165bd:	75 01                	jne    c00165c0 <Semaphore::release()+0x68>
c00165bf:	fb                   	sti    
c00165c0:	83 c4 0c             	add    esp,0xc
c00165c3:	c3                   	ret    
c00165c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00165c7:	83 e9 01             	sub    ecx,0x1
c00165ca:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00165cd:	eb cd                	jmp    c001659c <Semaphore::release()+0x44>
c00165cf:	90                   	nop
c00165d0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165da:	e8 fd f4 ff ff       	call   c0015adc <schedule()>
c00165df:	eb cf                	jmp    c00165b0 <Semaphore::release()+0x58>
c00165e1:	8d 76 00             	lea    esi,[esi+0x0]

c00165e4 <__static_initialization_and_destruction_0(int, int)>:
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165ec:	0f 85 8e 00 00 00    	jne    c0016680 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00165fa:	0f 85 80 00 00 00    	jne    c0016680 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	68 e4 96 02 c0       	push   0xc00296e4
c0016608:	e8 f7 94 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	83 ec 04             	sub    esp,0x4
c0016613:	68 90 2f 02 c0       	push   0xc0022f90
c0016618:	68 e4 96 02 c0       	push   0xc00296e4
c001661d:	68 b4 fa 01 c0       	push   0xc001fab4
c0016622:	e8 95 41 ff ff       	call   c000a7bc <__cxa_atexit>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	68 d8 96 02 c0       	push   0xc00296d8
c0016632:	e8 cd 94 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016637:	83 c4 10             	add    esp,0x10
c001663a:	83 ec 04             	sub    esp,0x4
c001663d:	68 90 2f 02 c0       	push   0xc0022f90
c0016642:	68 d8 96 02 c0       	push   0xc00296d8
c0016647:	68 b4 fa 01 c0       	push   0xc001fab4
c001664c:	e8 6b 41 ff ff       	call   c000a7bc <__cxa_atexit>
c0016651:	83 c4 10             	add    esp,0x10
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 cc 96 02 c0       	push   0xc00296cc
c001665c:	e8 a3 94 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	83 ec 04             	sub    esp,0x4
c0016667:	68 90 2f 02 c0       	push   0xc0022f90
c001666c:	68 cc 96 02 c0       	push   0xc00296cc
c0016671:	68 b4 fa 01 c0       	push   0xc001fab4
c0016676:	e8 41 41 ff ff       	call   c000a7bc <__cxa_atexit>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	66 90                	xchg   ax,ax
c0016680:	90                   	nop
c0016681:	83 c4 0c             	add    esp,0xc
c0016684:	c3                   	ret    
c0016685:	8d 76 00             	lea    esi,[esi+0x0]

c0016688 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	83 ec 08             	sub    esp,0x8
c001668e:	68 ff ff 00 00       	push   0xffff
c0016693:	6a 01                	push   0x1
c0016695:	e8 4a ff ff ff       	call   c00165e4 <__static_initialization_and_destruction_0(int, int)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	83 c4 0c             	add    esp,0xc
c00166a0:	c3                   	ret    

c00166a1 <Vm::inbv(unsigned short)>:
c00166a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166a5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166aa:	75 06                	jne    c00166b2 <Vm::inbv(unsigned short)+0x11>
c00166ac:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00166b1:	c3                   	ret    
c00166b2:	ec                   	in     al,dx
c00166b3:	c3                   	ret    

c00166b4 <Vm::outbv(unsigned short, unsigned char)>:
c00166b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166bc:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166c1:	75 25                	jne    c00166e8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00166c3:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00166c9:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00166cf:	8d 51 01             	lea    edx,[ecx+0x1]
c00166d2:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00166d8:	83 fa 20             	cmp    edx,0x20
c00166db:	75 0c                	jne    c00166e9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166dd:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00166e7:	c3                   	ret    
c00166e8:	ee                   	out    dx,al
c00166e9:	c3                   	ret    

c00166ea <Vm::realToLinear(unsigned short, unsigned short)>:
c00166ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166f4:	c1 e0 04             	shl    eax,0x4
c00166f7:	01 d0                	add    eax,edx
c00166f9:	c3                   	ret    

c00166fa <Vm::getSegment(unsigned int)>:
c00166fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166fe:	c1 e8 10             	shr    eax,0x10
c0016701:	c3                   	ret    

c0016702 <Vm::getOffset(unsigned int)>:
c0016702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016706:	c3                   	ret    

c0016707 <Vm::mainloop2()>:
c0016707:	83 ec 18             	sub    esp,0x18
c001670a:	fa                   	cli    
c001670b:	6a 02                	push   0x2
c001670d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016713:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001671a:	e8 95 f5 ff ff       	call   c0015cb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001671f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016724:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016728:	52                   	push   edx
c0016729:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001672d:	52                   	push   edx
c001672e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016732:	52                   	push   edx
c0016733:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016737:	50                   	push   eax
c0016738:	e8 d2 9a fe ff       	call   c000020f <goToVM86>
c001673d:	83 c4 2c             	add    esp,0x2c
c0016740:	c3                   	ret    

c0016741 <Vm::mainVm8086Loop(void*)>:
c0016741:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016746:	48                   	dec    eax
c0016747:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001674c:	75 01                	jne    c001674f <Vm::mainVm8086Loop(void*)+0xe>
c001674e:	fb                   	sti    
c001674f:	eb b6                	jmp    c0016707 <Vm::mainloop2()>

c0016751 <Vm::mainloop3(unsigned long)>:
c0016751:	83 ec 18             	sub    esp,0x18
c0016754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016758:	fa                   	cli    
c0016759:	6a 02                	push   0x2
c001675b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016761:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016768:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c001676d:	e8 42 f5 ff ff       	call   c0015cb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016772:	83 c4 1c             	add    esp,0x1c
c0016775:	eb 90                	jmp    c0016707 <Vm::mainloop2()>

c0016777 <Vm::initialise8086()>:
c0016777:	83 ec 0c             	sub    esp,0xc
c001677a:	68 80 00 00 00       	push   0x80
c001677f:	6a 00                	push   0x0
c0016781:	68 41 67 01 c0       	push   0xc0016741
c0016786:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001678c:	e8 ff f0 ff ff       	call   c0015890 <Process::createThread(void (*)(void*), void*, int)>
c0016791:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016798:	68 00 01 00 00       	push   0x100
c001679d:	6a 00                	push   0x0
c001679f:	6a 00                	push   0x0
c00167a1:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00167a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00167ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167b1:	e8 52 37 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167b6:	83 c4 2c             	add    esp,0x2c
c00167b9:	c3                   	ret    

c00167ba <Vm::finish8086()>:
c00167ba:	53                   	push   ebx
c00167bb:	83 ec 08             	sub    esp,0x8
c00167be:	fa                   	cli    
c00167bf:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167c5:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00167cc:	75 15                	jne    c00167e3 <Vm::finish8086()+0x29>
c00167ce:	e8 09 f3 ff ff       	call   c0015adc <schedule()>
c00167d3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167d8:	48                   	dec    eax
c00167d9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167de:	75 de                	jne    c00167be <Vm::finish8086()+0x4>
c00167e0:	fb                   	sti    
c00167e1:	eb db                	jmp    c00167be <Vm::finish8086()+0x4>
c00167e3:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00167f3:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00167f9:	e8 d6 f7 ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00167fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	8d 50 ff             	lea    edx,[eax-0x1]
c0016809:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001680f:	85 d2                	test   edx,edx
c0016811:	75 01                	jne    c0016814 <Vm::finish8086()+0x5a>
c0016813:	fb                   	sti    
c0016814:	83 c4 08             	add    esp,0x8
c0016817:	89 d8                	mov    eax,ebx
c0016819:	5b                   	pop    ebx
c001681a:	c3                   	ret    

c001681b <Vm::getOutput8086(unsigned char*)>:
c001681b:	57                   	push   edi
c001681c:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016822:	56                   	push   esi
c0016823:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016828:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001682c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001682e:	5e                   	pop    esi
c001682f:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016834:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001683e:	5f                   	pop    edi
c001683f:	c3                   	ret    

c0016840 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016840:	55                   	push   ebp
c0016841:	57                   	push   edi
c0016842:	56                   	push   esi
c0016843:	53                   	push   ebx
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001684b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001684f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016853:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016857:	fa                   	cli    
c0016858:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001685e:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016865:	75 15                	jne    c001687c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016867:	e8 70 f2 ff ff       	call   c0015adc <schedule()>
c001686c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016871:	48                   	dec    eax
c0016872:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016877:	75 de                	jne    c0016857 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016879:	fb                   	sti    
c001687a:	eb db                	jmp    c0016857 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001687c:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016886:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c001688b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001688f:	0f b7 ff             	movzx  edi,di
c0016892:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016896:	0f b7 f6             	movzx  esi,si
c0016899:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001689d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00168a1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00168a5:	50                   	push   eax
c00168a6:	6a 20                	push   0x20
c00168a8:	6a 00                	push   0x0
c00168aa:	68 40 97 02 c0       	push   0xc0029740
c00168af:	e8 3c 9c fe ff       	call   c00004f0 <memset>
c00168b4:	5a                   	pop    edx
c00168b5:	59                   	pop    ecx
c00168b6:	57                   	push   edi
c00168b7:	56                   	push   esi
c00168b8:	e8 2d fe ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c00168bd:	83 c4 10             	add    esp,0x10
c00168c0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168c4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00168c8:	89 c7                	mov    edi,eax
c00168ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168cc:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00168d3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168d8:	48                   	dec    eax
c00168d9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168de:	75 01                	jne    c00168e1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168e0:	fb                   	sti    
c00168e1:	83 ec 0c             	sub    esp,0xc
c00168e4:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00168ea:	e8 e5 f6 ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00168ef:	83 c4 1c             	add    esp,0x1c
c00168f2:	b0 01                	mov    al,0x1
c00168f4:	5b                   	pop    ebx
c00168f5:	5e                   	pop    esi
c00168f6:	5f                   	pop    edi
c00168f7:	5d                   	pop    ebp
c00168f8:	c3                   	ret    

c00168f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168f9:	55                   	push   ebp
c00168fa:	57                   	push   edi
c00168fb:	56                   	push   esi
c00168fc:	53                   	push   ebx
c00168fd:	83 ec 34             	sub    esp,0x34
c0016900:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016904:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016908:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001690c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016910:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016914:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016918:	68 e8 23 02 c0       	push   0xc00223e8
c001691d:	e8 e8 3f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016922:	83 c4 10             	add    esp,0x10
c0016925:	fa                   	cli    
c0016926:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c001692c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016932:	84 db                	test   bl,bl
c0016934:	75 15                	jne    c001694b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016936:	e8 a1 f1 ff ff       	call   c0015adc <schedule()>
c001693b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016940:	48                   	dec    eax
c0016941:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016946:	75 dd                	jne    c0016925 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016948:	fb                   	sti    
c0016949:	eb da                	jmp    c0016925 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001694b:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016955:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016959:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c001695e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016962:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016966:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001696a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001696e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016972:	50                   	push   eax
c0016973:	6a 20                	push   0x20
c0016975:	6a 00                	push   0x0
c0016977:	68 40 97 02 c0       	push   0xc0029740
c001697c:	e8 6f 9b fe ff       	call   c00004f0 <memset>
c0016981:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016988:	e8 46 11 ff ff       	call   c0007ad3 <malloc>
c001698d:	83 c4 0c             	add    esp,0xc
c0016990:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016996:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001699a:	89 c5                	mov    ebp,eax
c001699c:	50                   	push   eax
c001699d:	e8 8c 4d ff ff       	call   c000b72e <File::File(char const*, Process*)>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	85 ed                	test   ebp,ebp
c00169a7:	75 0a                	jne    c00169b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00169a9:	83 ec 0c             	sub    esp,0xc
c00169ac:	68 0a 24 02 c0       	push   0xc002240a
c00169b1:	eb 2b                	jmp    c00169de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00169b3:	50                   	push   eax
c00169b4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00169b8:	50                   	push   eax
c00169b9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00169bd:	50                   	push   eax
c00169be:	55                   	push   ebp
c00169bf:	e8 28 51 ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c00169c4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00169c8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00169cc:	83 c4 10             	add    esp,0x10
c00169cf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00169d4:	74 27                	je     c00169fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00169d6:	83 ec 0c             	sub    esp,0xc
c00169d9:	68 1e 24 02 c0       	push   0xc002241e
c00169de:	e8 f6 a7 ff ff       	call   c00111d9 <KePanic(char const*)>
c00169e3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169e8:	83 c4 10             	add    esp,0x10
c00169eb:	48                   	dec    eax
c00169ec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169f1:	85 c0                	test   eax,eax
c00169f3:	75 01                	jne    c00169f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169f5:	fb                   	sti    
c00169f6:	31 db                	xor    ebx,ebx
c00169f8:	e9 90 00 00 00       	jmp    c0016a8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169fd:	51                   	push   ecx
c00169fe:	51                   	push   ecx
c00169ff:	6a 01                	push   0x1
c0016a01:	55                   	push   ebp
c0016a02:	e8 e3 4d ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	85 c0                	test   eax,eax
c0016a0c:	74 26                	je     c0016a34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a0e:	83 ec 0c             	sub    esp,0xc
c0016a11:	68 37 24 02 c0       	push   0xc0022437
c0016a16:	e8 be a7 ff ff       	call   c00111d9 <KePanic(char const*)>
c0016a1b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	48                   	dec    eax
c0016a24:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a29:	85 c0                	test   eax,eax
c0016a2b:	75 c9                	jne    c00169f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a2d:	fb                   	sti    
c0016a2e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a32:	eb 59                	jmp    c0016a8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a34:	50                   	push   eax
c0016a35:	0f b7 ff             	movzx  edi,di
c0016a38:	50                   	push   eax
c0016a39:	0f b7 f6             	movzx  esi,si
c0016a3c:	57                   	push   edi
c0016a3d:	56                   	push   esi
c0016a3e:	e8 a7 fc ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016a43:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016a46:	5a                   	pop    edx
c0016a47:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016a4b:	56                   	push   esi
c0016a4c:	50                   	push   eax
c0016a4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a55:	55                   	push   ebp
c0016a56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a59:	83 c4 14             	add    esp,0x14
c0016a5c:	55                   	push   ebp
c0016a5d:	e8 e6 4d ff ff       	call   c000b848 <File::close()>
c0016a62:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a67:	83 c4 10             	add    esp,0x10
c0016a6a:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a71:	48                   	dec    eax
c0016a72:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a77:	85 c0                	test   eax,eax
c0016a79:	75 01                	jne    c0016a7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a7b:	fb                   	sti    
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a85:	e8 4a f5 ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	83 c4 2c             	add    esp,0x2c
c0016a90:	88 d8                	mov    al,bl
c0016a92:	5b                   	pop    ebx
c0016a93:	5e                   	pop    esi
c0016a94:	5f                   	pop    edi
c0016a95:	5d                   	pop    ebp
c0016a96:	c3                   	ret    

c0016a97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a97:	57                   	push   edi
c0016a98:	56                   	push   esi
c0016a99:	53                   	push   ebx
c0016a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016aa2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016aa6:	83 e8 06             	sub    eax,0x6
c0016aa9:	0f b7 c0             	movzx  eax,ax
c0016aac:	50                   	push   eax
c0016aad:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ab2:	50                   	push   eax
c0016ab3:	e8 32 fc ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016ab8:	5a                   	pop    edx
c0016ab9:	59                   	pop    ecx
c0016aba:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016abd:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ac0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016ac3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ac9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016acc:	8d 51 02             	lea    edx,[ecx+0x2]
c0016acf:	66 89 10             	mov    WORD PTR [eax],dx
c0016ad2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016ad6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016ada:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016ade:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016ae1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ae5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016aeb:	89 f1                	mov    ecx,esi
c0016aed:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016af1:	89 f2                	mov    edx,esi
c0016af3:	0f b6 d6             	movzx  edx,dh
c0016af6:	0f b6 f1             	movzx  esi,cl
c0016af9:	74 0a                	je     c0016b05 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016afb:	c1 e2 08             	shl    edx,0x8
c0016afe:	09 f2                	or     edx,esi
c0016b00:	80 ce 02             	or     dh,0x2
c0016b03:	eb 08                	jmp    c0016b0d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016b05:	c1 e2 08             	shl    edx,0x8
c0016b08:	09 f2                	or     edx,esi
c0016b0a:	80 e6 fd             	and    dh,0xfd
c0016b0d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b16:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b1a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b22:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b25:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b2d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b30:	5b                   	pop    ebx
c0016b31:	5e                   	pop    esi
c0016b32:	5f                   	pop    edi
c0016b33:	c3                   	ret    

c0016b34 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b34:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b39:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b3e:	c1 e0 04             	shl    eax,0x4
c0016b41:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b44:	c3                   	ret    

c0016b45 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b45:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b4a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b4f:	c1 e0 04             	shl    eax,0x4
c0016b52:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016b56:	c3                   	ret    

c0016b57 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016b57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b5c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b61:	c1 e0 04             	shl    eax,0x4
c0016b64:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016b67:	c3                   	ret    

c0016b68 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b72:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b76:	c1 e0 04             	shl    eax,0x4
c0016b79:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b7c:	c3                   	ret    

c0016b7d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b7d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b82:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b8b:	c1 e0 04             	shl    eax,0x4
c0016b8e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b92:	c3                   	ret    

c0016b93 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b93:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b98:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ba1:	c1 e0 04             	shl    eax,0x4
c0016ba4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016ba7:	c3                   	ret    

c0016ba8 <Vm::faultHandler(regs*)>:
c0016ba8:	55                   	push   ebp
c0016ba9:	57                   	push   edi
c0016baa:	56                   	push   esi
c0016bab:	53                   	push   ebx
c0016bac:	83 ec 2c             	sub    esp,0x2c
c0016baf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016bb3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016bb6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016bba:	0f b7 f8             	movzx  edi,ax
c0016bbd:	0f b7 c0             	movzx  eax,ax
c0016bc0:	52                   	push   edx
c0016bc1:	50                   	push   eax
c0016bc2:	e8 23 fb ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016bc7:	5a                   	pop    edx
c0016bc8:	59                   	pop    ecx
c0016bc9:	89 c1                	mov    ecx,eax
c0016bcb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016bce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bd2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016bd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bdb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016bde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016be2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016be7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016beb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bf3:	e8 f2 fa ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016bf8:	5e                   	pop    esi
c0016bf9:	be 06 00 00 00       	mov    esi,0x6
c0016bfe:	5d                   	pop    ebp
c0016bff:	31 ed                	xor    ebp,ebp
c0016c01:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c06:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c09:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c0f:	0f 84 74 02 00 00    	je     c0016e89 <Vm::faultHandler(regs*)+0x2e1>
c0016c15:	0f 87 94 00 00 00    	ja     c0016caf <Vm::faultHandler(regs*)+0x107>
c0016c1b:	83 fa 66             	cmp    edx,0x66
c0016c1e:	0f 84 e2 01 00 00    	je     c0016e06 <Vm::faultHandler(regs*)+0x25e>
c0016c24:	77 47                	ja     c0016c6d <Vm::faultHandler(regs*)+0xc5>
c0016c26:	83 fa 36             	cmp    edx,0x36
c0016c29:	0f 84 ca 01 00 00    	je     c0016df9 <Vm::faultHandler(regs*)+0x251>
c0016c2f:	77 1a                	ja     c0016c4b <Vm::faultHandler(regs*)+0xa3>
c0016c31:	83 fa 26             	cmp    edx,0x26
c0016c34:	0f 84 98 01 00 00    	je     c0016dd2 <Vm::faultHandler(regs*)+0x22a>
c0016c3a:	83 fa 2e             	cmp    edx,0x2e
c0016c3d:	0f 85 27 06 00 00    	jne    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016c43:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c46:	31 f6                	xor    esi,esi
c0016c48:	41                   	inc    ecx
c0016c49:	eb bb                	jmp    c0016c06 <Vm::faultHandler(regs*)+0x5e>
c0016c4b:	83 fa 64             	cmp    edx,0x64
c0016c4e:	0f 84 8b 01 00 00    	je     c0016ddf <Vm::faultHandler(regs*)+0x237>
c0016c54:	0f 87 92 01 00 00    	ja     c0016dec <Vm::faultHandler(regs*)+0x244>
c0016c5a:	83 fa 3e             	cmp    edx,0x3e
c0016c5d:	0f 85 07 06 00 00    	jne    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016c63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c66:	be 01 00 00 00       	mov    esi,0x1
c0016c6b:	eb db                	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016c6d:	83 fa 6d             	cmp    edx,0x6d
c0016c70:	0f 84 34 03 00 00    	je     c0016faa <Vm::faultHandler(regs*)+0x402>
c0016c76:	77 17                	ja     c0016c8f <Vm::faultHandler(regs*)+0xe7>
c0016c78:	83 fa 67             	cmp    edx,0x67
c0016c7b:	0f 84 92 01 00 00    	je     c0016e13 <Vm::faultHandler(regs*)+0x26b>
c0016c81:	83 fa 6c             	cmp    edx,0x6c
c0016c84:	0f 84 b1 02 00 00    	je     c0016f3b <Vm::faultHandler(regs*)+0x393>
c0016c8a:	e9 db 05 00 00       	jmp    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016c8f:	83 fa 6f             	cmp    edx,0x6f
c0016c92:	0f 84 40 04 00 00    	je     c00170d8 <Vm::faultHandler(regs*)+0x530>
c0016c98:	0f 82 a2 03 00 00    	jb     c0017040 <Vm::faultHandler(regs*)+0x498>
c0016c9e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016ca4:	0f 84 76 01 00 00    	je     c0016e20 <Vm::faultHandler(regs*)+0x278>
c0016caa:	e9 bb 05 00 00       	jmp    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016caf:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016cb5:	0f 84 57 05 00 00    	je     c0017212 <Vm::faultHandler(regs*)+0x66a>
c0016cbb:	0f 87 a9 00 00 00    	ja     c0016d6a <Vm::faultHandler(regs*)+0x1c2>
c0016cc1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016cc7:	0f 84 d6 04 00 00    	je     c00171a3 <Vm::faultHandler(regs*)+0x5fb>
c0016ccd:	77 78                	ja     c0016d47 <Vm::faultHandler(regs*)+0x19f>
c0016ccf:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016cd5:	0f 84 0e 02 00 00    	je     c0016ee9 <Vm::faultHandler(regs*)+0x341>
c0016cdb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ce1:	0f 85 83 05 00 00    	jne    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016ce7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016ceb:	89 d1                	mov    ecx,edx
c0016ced:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016cf0:	c1 e1 08             	shl    ecx,0x8
c0016cf3:	09 ca                	or     edx,ecx
c0016cf5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016cf8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016cfc:	89 d1                	mov    ecx,edx
c0016cfe:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016d02:	c1 e1 08             	shl    ecx,0x8
c0016d05:	09 ca                	or     edx,ecx
c0016d07:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d0a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d0e:	89 d1                	mov    ecx,edx
c0016d10:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d14:	c1 e1 08             	shl    ecx,0x8
c0016d17:	09 ca                	or     edx,ecx
c0016d19:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d1f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d22:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d2c:	d1 e8                	shr    eax,1
c0016d2e:	83 e0 01             	and    eax,0x1
c0016d31:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d34:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d37:	83 c0 06             	add    eax,0x6
c0016d3a:	25 ff ff 00 00       	and    eax,0xffff
c0016d3f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d42:	e9 1f 05 00 00       	jmp    c0017266 <Vm::faultHandler(regs*)+0x6be>
c0016d47:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d4d:	0f 84 95 04 00 00    	je     c00171e8 <Vm::faultHandler(regs*)+0x640>
c0016d53:	0f 82 66 04 00 00    	jb     c00171bf <Vm::faultHandler(regs*)+0x617>
c0016d59:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016d5f:	0f 84 9a 04 00 00    	je     c00171ff <Vm::faultHandler(regs*)+0x657>
c0016d65:	e9 00 05 00 00       	jmp    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016d6a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d70:	0f 84 dd 04 00 00    	je     c0017253 <Vm::faultHandler(regs*)+0x6ab>
c0016d76:	77 2e                	ja     c0016da6 <Vm::faultHandler(regs*)+0x1fe>
c0016d78:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d7e:	0f 84 aa 04 00 00    	je     c001722e <Vm::faultHandler(regs*)+0x686>
c0016d84:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d8a:	0f 85 da 04 00 00    	jne    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016d90:	50                   	push   eax
c0016d91:	50                   	push   eax
c0016d92:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d96:	50                   	push   eax
c0016d97:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d9b:	50                   	push   eax
c0016d9c:	e8 13 f9 ff ff       	call   c00166b4 <Vm::outbv(unsigned short, unsigned char)>
c0016da1:	e9 a5 04 00 00       	jmp    c001724b <Vm::faultHandler(regs*)+0x6a3>
c0016da6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016dac:	0f 84 6d 01 00 00    	je     c0016f1f <Vm::faultHandler(regs*)+0x377>
c0016db2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016db8:	0f 84 6f 01 00 00    	je     c0016f2d <Vm::faultHandler(regs*)+0x385>
c0016dbe:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016dc4:	0f 85 a0 04 00 00    	jne    c001726a <Vm::faultHandler(regs*)+0x6c2>
c0016dca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dcd:	e9 76 fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016dd2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dd5:	be 02 00 00 00       	mov    esi,0x2
c0016dda:	e9 69 fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016ddf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016de2:	be 03 00 00 00       	mov    esi,0x3
c0016de7:	e9 5c fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016dec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016def:	be 04 00 00 00       	mov    esi,0x4
c0016df4:	e9 4f fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016df9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dfc:	be 05 00 00 00       	mov    esi,0x5
c0016e01:	e9 42 fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016e06:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e09:	bd 01 00 00 00       	mov    ebp,0x1
c0016e0e:	e9 35 fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016e13:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e16:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e1b:	e9 28 fe ff ff       	jmp    c0016c48 <Vm::faultHandler(regs*)+0xa0>
c0016e20:	83 e5 01             	and    ebp,0x1
c0016e23:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e2a:	74 30                	je     c0016e5c <Vm::faultHandler(regs*)+0x2b4>
c0016e2c:	83 e9 04             	sub    ecx,0x4
c0016e2f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e35:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e3b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e3e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e41:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e47:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e4b:	0f 84 12 04 00 00    	je     c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0016e51:	80 ce 02             	or     dh,0x2
c0016e54:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e57:	e9 07 04 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0016e5c:	83 e9 02             	sub    ecx,0x2
c0016e5f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e65:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e68:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e6c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e72:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e76:	74 05                	je     c0016e7d <Vm::faultHandler(regs*)+0x2d5>
c0016e78:	80 ce 02             	or     dh,0x2
c0016e7b:	eb 03                	jmp    c0016e80 <Vm::faultHandler(regs*)+0x2d8>
c0016e7d:	80 e6 fd             	and    dh,0xfd
c0016e80:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e84:	e9 da 03 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0016e89:	83 e5 01             	and    ebp,0x1
c0016e8c:	74 2a                	je     c0016eb8 <Vm::faultHandler(regs*)+0x310>
c0016e8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e90:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e96:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e9c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ea1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ea7:	c1 e8 09             	shr    eax,0x9
c0016eaa:	83 e0 01             	and    eax,0x1
c0016ead:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016eb0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016eb3:	83 c0 04             	add    eax,0x4
c0016eb6:	eb 24                	jmp    c0016edc <Vm::faultHandler(regs*)+0x334>
c0016eb8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016ebb:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ec1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ec4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016ec7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ecd:	c1 e8 09             	shr    eax,0x9
c0016ed0:	83 e0 01             	and    eax,0x1
c0016ed3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ed6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ed9:	83 c0 02             	add    eax,0x2
c0016edc:	25 ff ff 00 00       	and    eax,0xffff
c0016ee1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ee4:	e9 7a 03 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0016ee9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016eed:	3d ee 00 00 00       	cmp    eax,0xee
c0016ef2:	75 10                	jne    c0016f04 <Vm::faultHandler(regs*)+0x35c>
c0016ef4:	83 ec 0c             	sub    esp,0xc
c0016ef7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016efa:	e8 52 f8 ff ff       	call   c0016751 <Vm::mainloop3(unsigned long)>
c0016eff:	e9 4a 03 00 00       	jmp    c001724e <Vm::faultHandler(regs*)+0x6a6>
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f0f:	51                   	push   ecx
c0016f10:	50                   	push   eax
c0016f11:	53                   	push   ebx
c0016f12:	e8 80 fb ff ff       	call   c0016a97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f17:	83 c4 20             	add    esp,0x20
c0016f1a:	e9 47 03 00 00       	jmp    c0017266 <Vm::faultHandler(regs*)+0x6be>
c0016f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f24:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f28:	e9 36 03 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0016f2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f32:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f36:	e9 28 03 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0016f3b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f40:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f43:	74 2b                	je     c0016f70 <Vm::faultHandler(regs*)+0x3c8>
c0016f45:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f4c:	76 22                	jbe    c0016f70 <Vm::faultHandler(regs*)+0x3c8>
c0016f4e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f52:	50                   	push   eax
c0016f53:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f57:	50                   	push   eax
c0016f58:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f5c:	50                   	push   eax
c0016f5d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f61:	50                   	push   eax
c0016f62:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f66:	50                   	push   eax
c0016f67:	6a 6c                	push   0x6c
c0016f69:	6a 6c                	push   0x6c
c0016f6b:	e9 c0 01 00 00       	jmp    c0017130 <Vm::faultHandler(regs*)+0x588>
c0016f70:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f74:	83 ec 0c             	sub    esp,0xc
c0016f77:	0f b7 f6             	movzx  esi,si
c0016f7a:	50                   	push   eax
c0016f7b:	e8 21 f7 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c0016f80:	83 c4 0c             	add    esp,0xc
c0016f83:	0f b6 c0             	movzx  eax,al
c0016f86:	50                   	push   eax
c0016f87:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f8b:	50                   	push   eax
c0016f8c:	56                   	push   esi
c0016f8d:	e8 d6 fb ff ff       	call   c0016b68 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f98:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f9c:	74 03                	je     c0016fa1 <Vm::faultHandler(regs*)+0x3f9>
c0016f9e:	48                   	dec    eax
c0016f9f:	eb 01                	jmp    c0016fa2 <Vm::faultHandler(regs*)+0x3fa>
c0016fa1:	40                   	inc    eax
c0016fa2:	0f b7 c0             	movzx  eax,ax
c0016fa5:	e9 8e 00 00 00       	jmp    c0017038 <Vm::faultHandler(regs*)+0x490>
c0016faa:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016faf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016fb2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fb5:	74 29                	je     c0016fe0 <Vm::faultHandler(regs*)+0x438>
c0016fb7:	3d ff ff 00 00       	cmp    eax,0xffff
c0016fbc:	76 22                	jbe    c0016fe0 <Vm::faultHandler(regs*)+0x438>
c0016fbe:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fc2:	50                   	push   eax
c0016fc3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fc7:	50                   	push   eax
c0016fc8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fcc:	50                   	push   eax
c0016fcd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fd1:	50                   	push   eax
c0016fd2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fd6:	50                   	push   eax
c0016fd7:	6a 6d                	push   0x6d
c0016fd9:	6a 6d                	push   0x6d
c0016fdb:	e9 50 01 00 00       	jmp    c0017130 <Vm::faultHandler(regs*)+0x588>
c0016fe0:	83 e5 01             	and    ebp,0x1
c0016fe3:	0f b7 c8             	movzx  ecx,ax
c0016fe6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016fe9:	0f b7 f6             	movzx  esi,si
c0016fec:	74 1e                	je     c001700c <Vm::faultHandler(regs*)+0x464>
c0016fee:	ed                   	in     eax,dx
c0016fef:	55                   	push   ebp
c0016ff0:	50                   	push   eax
c0016ff1:	51                   	push   ecx
c0016ff2:	56                   	push   esi
c0016ff3:	e8 9b fb ff ff       	call   c0016b93 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016ff8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ffb:	83 c4 10             	add    esp,0x10
c0016ffe:	8d 50 04             	lea    edx,[eax+0x4]
c0017001:	83 e8 04             	sub    eax,0x4
c0017004:	81 e2 ff ff 00 00    	and    edx,0xffff
c001700a:	eb 20                	jmp    c001702c <Vm::faultHandler(regs*)+0x484>
c001700c:	66 ed                	in     ax,dx
c001700e:	57                   	push   edi
c001700f:	0f b7 c0             	movzx  eax,ax
c0017012:	50                   	push   eax
c0017013:	51                   	push   ecx
c0017014:	56                   	push   esi
c0017015:	e8 63 fb ff ff       	call   c0016b7d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001701a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001701d:	83 c4 10             	add    esp,0x10
c0017020:	8d 50 02             	lea    edx,[eax+0x2]
c0017023:	83 e8 02             	sub    eax,0x2
c0017026:	81 e2 ff ff 00 00    	and    edx,0xffff
c001702c:	25 ff ff 00 00       	and    eax,0xffff
c0017031:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017035:	0f 44 c2             	cmove  eax,edx
c0017038:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001703b:	e9 23 02 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0017040:	8d 46 ff             	lea    eax,[esi-0x1]
c0017043:	0f b6 f0             	movzx  esi,al
c0017046:	83 fe 05             	cmp    esi,0x5
c0017049:	77 23                	ja     c001706e <Vm::faultHandler(regs*)+0x4c6>
c001704b:	ff 24 b5 ac 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb54]
c0017052:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017057:	eb 15                	jmp    c001706e <Vm::faultHandler(regs*)+0x4c6>
c0017059:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001705d:	eb 0f                	jmp    c001706e <Vm::faultHandler(regs*)+0x4c6>
c001705f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017063:	eb 09                	jmp    c001706e <Vm::faultHandler(regs*)+0x4c6>
c0017065:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017069:	eb 03                	jmp    c001706e <Vm::faultHandler(regs*)+0x4c6>
c001706b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001706e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017073:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017076:	74 29                	je     c00170a1 <Vm::faultHandler(regs*)+0x4f9>
c0017078:	3d ff ff 00 00       	cmp    eax,0xffff
c001707d:	76 22                	jbe    c00170a1 <Vm::faultHandler(regs*)+0x4f9>
c001707f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017083:	50                   	push   eax
c0017084:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017088:	50                   	push   eax
c0017089:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001708d:	50                   	push   eax
c001708e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017092:	50                   	push   eax
c0017093:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017097:	50                   	push   eax
c0017098:	6a 6e                	push   0x6e
c001709a:	6a 6e                	push   0x6e
c001709c:	e9 8f 00 00 00       	jmp    c0017130 <Vm::faultHandler(regs*)+0x588>
c00170a1:	52                   	push   edx
c00170a2:	0f b7 c0             	movzx  eax,ax
c00170a5:	52                   	push   edx
c00170a6:	50                   	push   eax
c00170a7:	57                   	push   edi
c00170a8:	e8 87 fa ff ff       	call   c0016b34 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00170ad:	59                   	pop    ecx
c00170ae:	5e                   	pop    esi
c00170af:	0f b6 c0             	movzx  eax,al
c00170b2:	50                   	push   eax
c00170b3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170b7:	50                   	push   eax
c00170b8:	e8 f7 f5 ff ff       	call   c00166b4 <Vm::outbv(unsigned short, unsigned char)>
c00170bd:	83 c4 10             	add    esp,0x10
c00170c0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170c3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170c7:	74 03                	je     c00170cc <Vm::faultHandler(regs*)+0x524>
c00170c9:	48                   	dec    eax
c00170ca:	eb 01                	jmp    c00170cd <Vm::faultHandler(regs*)+0x525>
c00170cc:	40                   	inc    eax
c00170cd:	0f b7 c0             	movzx  eax,ax
c00170d0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00170d3:	e9 8b 01 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c00170d8:	8d 46 ff             	lea    eax,[esi-0x1]
c00170db:	0f b6 f0             	movzx  esi,al
c00170de:	83 fe 05             	cmp    esi,0x5
c00170e1:	77 1e                	ja     c0017101 <Vm::faultHandler(regs*)+0x559>
c00170e3:	ff 24 b5 c4 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb3c]
c00170ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170ee:	eb 11                	jmp    c0017101 <Vm::faultHandler(regs*)+0x559>
c00170f0:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00170f3:	eb 0c                	jmp    c0017101 <Vm::faultHandler(regs*)+0x559>
c00170f5:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00170f8:	eb 07                	jmp    c0017101 <Vm::faultHandler(regs*)+0x559>
c00170fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00170fd:	eb 02                	jmp    c0017101 <Vm::faultHandler(regs*)+0x559>
c00170ff:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017101:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017106:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017109:	74 37                	je     c0017142 <Vm::faultHandler(regs*)+0x59a>
c001710b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017111:	76 2f                	jbe    c0017142 <Vm::faultHandler(regs*)+0x59a>
c0017113:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017117:	50                   	push   eax
c0017118:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001711c:	50                   	push   eax
c001711d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017121:	50                   	push   eax
c0017122:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017126:	50                   	push   eax
c0017127:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001712b:	50                   	push   eax
c001712c:	6a 6f                	push   0x6f
c001712e:	6a 6f                	push   0x6f
c0017130:	68 50 24 02 c0       	push   0xc0022450
c0017135:	e8 d0 37 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001713a:	83 c4 20             	add    esp,0x20
c001713d:	e9 86 01 00 00       	jmp    c00172c8 <Vm::faultHandler(regs*)+0x720>
c0017142:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017145:	0f b7 d7             	movzx  edx,di
c0017148:	0f b7 c6             	movzx  eax,si
c001714b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001714e:	81 e1 00 04 00 00    	and    ecx,0x400
c0017154:	83 e5 01             	and    ebp,0x1
c0017157:	74 1c                	je     c0017175 <Vm::faultHandler(regs*)+0x5cd>
c0017159:	55                   	push   ebp
c001715a:	55                   	push   ebp
c001715b:	50                   	push   eax
c001715c:	52                   	push   edx
c001715d:	e8 f5 f9 ff ff       	call   c0016b57 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017162:	83 c4 10             	add    esp,0x10
c0017165:	89 fa                	mov    edx,edi
c0017167:	ef                   	out    dx,eax
c0017168:	8d 46 04             	lea    eax,[esi+0x4]
c001716b:	83 ee 04             	sub    esi,0x4
c001716e:	25 ff ff 00 00       	and    eax,0xffff
c0017173:	eb 1b                	jmp    c0017190 <Vm::faultHandler(regs*)+0x5e8>
c0017175:	55                   	push   ebp
c0017176:	55                   	push   ebp
c0017177:	50                   	push   eax
c0017178:	52                   	push   edx
c0017179:	e8 c7 f9 ff ff       	call   c0016b45 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	89 fa                	mov    edx,edi
c0017183:	66 ef                	out    dx,ax
c0017185:	8d 46 02             	lea    eax,[esi+0x2]
c0017188:	83 ee 02             	sub    esi,0x2
c001718b:	25 ff ff 00 00       	and    eax,0xffff
c0017190:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017196:	85 c9                	test   ecx,ecx
c0017198:	0f 44 f0             	cmove  esi,eax
c001719b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001719e:	e9 c0 00 00 00       	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c00171a3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171b1:	50                   	push   eax
c00171b2:	e8 ea f4 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c00171b7:	0f b6 c0             	movzx  eax,al
c00171ba:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171bd:	eb 3a                	jmp    c00171f9 <Vm::faultHandler(regs*)+0x651>
c00171bf:	83 e5 01             	and    ebp,0x1
c00171c2:	74 07                	je     c00171cb <Vm::faultHandler(regs*)+0x623>
c00171c4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171c8:	ed                   	in     eax,dx
c00171c9:	eb 14                	jmp    c00171df <Vm::faultHandler(regs*)+0x637>
c00171cb:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00171ce:	66 31 f6             	xor    si,si
c00171d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00171d4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171d8:	66 ed                	in     ax,dx
c00171da:	0f b7 c0             	movzx  eax,ax
c00171dd:	09 f0                	or     eax,esi
c00171df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171e2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171e6:	eb 7e                	jmp    c0017266 <Vm::faultHandler(regs*)+0x6be>
c00171e8:	52                   	push   edx
c00171e9:	52                   	push   edx
c00171ea:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171ee:	50                   	push   eax
c00171ef:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171f3:	50                   	push   eax
c00171f4:	e8 bb f4 ff ff       	call   c00166b4 <Vm::outbv(unsigned short, unsigned char)>
c00171f9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171fd:	eb 4f                	jmp    c001724e <Vm::faultHandler(regs*)+0x6a6>
c00171ff:	83 e5 01             	and    ebp,0x1
c0017202:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017205:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017209:	74 03                	je     c001720e <Vm::faultHandler(regs*)+0x666>
c001720b:	ef                   	out    dx,eax
c001720c:	eb d4                	jmp    c00171e2 <Vm::faultHandler(regs*)+0x63a>
c001720e:	66 ef                	out    dx,ax
c0017210:	eb d0                	jmp    c00171e2 <Vm::faultHandler(regs*)+0x63a>
c0017212:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017216:	83 ec 0c             	sub    esp,0xc
c0017219:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017220:	50                   	push   eax
c0017221:	e8 7b f4 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c0017226:	0f b6 c0             	movzx  eax,al
c0017229:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001722c:	eb 1d                	jmp    c001724b <Vm::faultHandler(regs*)+0x6a3>
c001722e:	83 e5 01             	and    ebp,0x1
c0017231:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017234:	74 03                	je     c0017239 <Vm::faultHandler(regs*)+0x691>
c0017236:	ed                   	in     eax,dx
c0017237:	eb 0d                	jmp    c0017246 <Vm::faultHandler(regs*)+0x69e>
c0017239:	66 ed                	in     ax,dx
c001723b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001723e:	0f b7 c0             	movzx  eax,ax
c0017241:	66 31 d2             	xor    dx,dx
c0017244:	09 d0                	or     eax,edx
c0017246:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017249:	eb 18                	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c001724b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001724e:	83 c4 10             	add    esp,0x10
c0017251:	eb 13                	jmp    c0017266 <Vm::faultHandler(regs*)+0x6be>
c0017253:	83 e5 01             	and    ebp,0x1
c0017256:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017259:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001725c:	74 03                	je     c0017261 <Vm::faultHandler(regs*)+0x6b9>
c001725e:	ef                   	out    dx,eax
c001725f:	eb 02                	jmp    c0017263 <Vm::faultHandler(regs*)+0x6bb>
c0017261:	66 ef                	out    dx,ax
c0017263:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017266:	b0 01                	mov    al,0x1
c0017268:	eb 60                	jmp    c00172ca <Vm::faultHandler(regs*)+0x722>
c001726a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001726e:	50                   	push   eax
c001726f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017273:	50                   	push   eax
c0017274:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017278:	50                   	push   eax
c0017279:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001727d:	50                   	push   eax
c001727e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017282:	50                   	push   eax
c0017283:	52                   	push   edx
c0017284:	52                   	push   edx
c0017285:	68 7d 24 02 c0       	push   0xc002247d
c001728a:	e8 7b 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001728f:	83 c4 20             	add    esp,0x20
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	6a 60                	push   0x60
c0017297:	e8 05 f4 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	0f b6 d0             	movzx  edx,al
c00172a2:	83 fa 1c             	cmp    edx,0x1c
c00172a5:	74 05                	je     c00172ac <Vm::faultHandler(regs*)+0x704>
c00172a7:	83 fa 5a             	cmp    edx,0x5a
c00172aa:	75 e6                	jne    c0017292 <Vm::faultHandler(regs*)+0x6ea>
c00172ac:	0f b6 c0             	movzx  eax,al
c00172af:	83 f8 1c             	cmp    eax,0x1c
c00172b2:	74 05                	je     c00172b9 <Vm::faultHandler(regs*)+0x711>
c00172b4:	83 f8 5a             	cmp    eax,0x5a
c00172b7:	75 0f                	jne    c00172c8 <Vm::faultHandler(regs*)+0x720>
c00172b9:	83 ec 0c             	sub    esp,0xc
c00172bc:	6a 60                	push   0x60
c00172be:	e8 de f3 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c00172c3:	83 c4 10             	add    esp,0x10
c00172c6:	eb e4                	jmp    c00172ac <Vm::faultHandler(regs*)+0x704>
c00172c8:	31 c0                	xor    eax,eax
c00172ca:	83 c4 2c             	add    esp,0x2c
c00172cd:	5b                   	pop    ebx
c00172ce:	5e                   	pop    esi
c00172cf:	5f                   	pop    edi
c00172d0:	5d                   	pop    ebp
c00172d1:	c3                   	ret    

c00172d2 <noCopro(unsigned long)>:
c00172d2:	c3                   	ret    

c00172d3 <nmiHandler(regs*, void*)>:
c00172d3:	83 ec 0c             	sub    esp,0xc
c00172d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172db:	83 ec 0c             	sub    esp,0xc
c00172de:	50                   	push   eax
c00172df:	e8 f2 ff fe ff       	call   c00072d6 <Computer::handleNMI()>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	90                   	nop
c00172e8:	83 c4 0c             	add    esp,0xc
c00172eb:	c3                   	ret    

c00172ec <doubleFault(regs*, void*)>:
c00172ec:	55                   	push   ebp
c00172ed:	89 e5                	mov    ebp,esp
c00172ef:	83 ec 08             	sub    esp,0x8
c00172f2:	83 ec 0c             	sub    esp,0xc
c00172f5:	68 dc 24 02 c0       	push   0xc00224dc
c00172fa:	e8 da 9e ff ff       	call   c00111d9 <KePanic(char const*)>
c00172ff:	83 c4 10             	add    esp,0x10
c0017302:	90                   	nop
c0017303:	c9                   	leave  
c0017304:	c3                   	ret    

c0017305 <displayDebugInfo(regs*)>:
c0017305:	83 ec 1c             	sub    esp,0x1c
c0017308:	0f 20 c0             	mov    eax,cr0
c001730b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001730f:	0f 20 d0             	mov    eax,cr2
c0017312:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017316:	0f 20 d8             	mov    eax,cr3
c0017319:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001731d:	0f 20 e0             	mov    eax,cr4
c0017320:	89 04 24             	mov    DWORD PTR [esp],eax
c0017323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017327:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001732a:	83 ec 08             	sub    esp,0x8
c001732d:	50                   	push   eax
c001732e:	68 f8 24 02 c0       	push   0xc00224f8
c0017333:	e8 d2 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017338:	83 c4 10             	add    esp,0x10
c001733b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001733f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017342:	83 ec 08             	sub    esp,0x8
c0017345:	50                   	push   eax
c0017346:	68 e9 24 02 c0       	push   0xc00224e9
c001734b:	e8 ba 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017350:	83 c4 10             	add    esp,0x10
c0017353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017357:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001735a:	83 ec 08             	sub    esp,0x8
c001735d:	50                   	push   eax
c001735e:	68 f4 24 02 c0       	push   0xc00224f4
c0017363:	e8 a2 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001736f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017372:	83 ec 08             	sub    esp,0x8
c0017375:	50                   	push   eax
c0017376:	68 03 25 02 c0       	push   0xc0022503
c001737b:	e8 8a 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017380:	83 c4 10             	add    esp,0x10
c0017383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017387:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001738a:	83 ec 08             	sub    esp,0x8
c001738d:	50                   	push   eax
c001738e:	68 0e 25 02 c0       	push   0xc002250e
c0017393:	e8 72 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	83 ec 08             	sub    esp,0x8
c001739e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00173a2:	68 19 25 02 c0       	push   0xc0022519
c00173a7:	e8 5e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173ac:	83 c4 10             	add    esp,0x10
c00173af:	83 ec 08             	sub    esp,0x8
c00173b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00173b6:	68 24 25 02 c0       	push   0xc0022524
c00173bb:	e8 4a 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173c0:	83 c4 10             	add    esp,0x10
c00173c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173c7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173ca:	c1 e0 05             	shl    eax,0x5
c00173cd:	8d 90 a0 34 02 c0    	lea    edx,[eax-0x3ffdcb60]
c00173d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173d7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173da:	83 ec 04             	sub    esp,0x4
c00173dd:	52                   	push   edx
c00173de:	50                   	push   eax
c00173df:	68 2f 25 02 c0       	push   0xc002252f
c00173e4:	e8 21 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00173f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173f7:	83 ec 0c             	sub    esp,0xc
c00173fa:	50                   	push   eax
c00173fb:	e8 6f 13 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017400:	83 c4 10             	add    esp,0x10
c0017403:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017408:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001740e:	83 ec 08             	sub    esp,0x8
c0017411:	68 3e 25 02 c0       	push   0xc002253e
c0017416:	50                   	push   eax
c0017417:	e8 90 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001741c:	83 c4 10             	add    esp,0x10
c001741f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017424:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001742a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001742e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017431:	83 ec 08             	sub    esp,0x8
c0017434:	52                   	push   edx
c0017435:	50                   	push   eax
c0017436:	e8 2b 16 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001743b:	83 c4 10             	add    esp,0x10
c001743e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017443:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017449:	83 ec 08             	sub    esp,0x8
c001744c:	68 4c 25 02 c0       	push   0xc002254c
c0017451:	50                   	push   eax
c0017452:	e8 55 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001745f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017465:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001746a:	8b 12                	mov    edx,DWORD PTR [edx]
c001746c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001746f:	83 c2 0c             	add    edx,0xc
c0017472:	83 ec 08             	sub    esp,0x8
c0017475:	52                   	push   edx
c0017476:	50                   	push   eax
c0017477:	e8 30 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001747c:	83 c4 10             	add    esp,0x10
c001747f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017484:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001748a:	83 ec 08             	sub    esp,0x8
c001748d:	68 55 25 02 c0       	push   0xc0022555
c0017492:	50                   	push   eax
c0017493:	e8 14 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017498:	83 c4 10             	add    esp,0x10
c001749b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174a6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174aa:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00174ad:	83 ec 08             	sub    esp,0x8
c00174b0:	52                   	push   edx
c00174b1:	50                   	push   eax
c00174b2:	e8 af 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174b7:	83 c4 10             	add    esp,0x10
c00174ba:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174c5:	83 ec 08             	sub    esp,0x8
c00174c8:	68 5d 25 02 c0       	push   0xc002255d
c00174cd:	50                   	push   eax
c00174ce:	e8 d9 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174e5:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00174e8:	83 ec 08             	sub    esp,0x8
c00174eb:	52                   	push   edx
c00174ec:	50                   	push   eax
c00174ed:	e8 74 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174f2:	83 c4 10             	add    esp,0x10
c00174f5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017500:	83 ec 08             	sub    esp,0x8
c0017503:	68 65 25 02 c0       	push   0xc0022565
c0017508:	50                   	push   eax
c0017509:	e8 9e 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001750e:	83 c4 10             	add    esp,0x10
c0017511:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017516:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001751c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017520:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017523:	83 ec 08             	sub    esp,0x8
c0017526:	52                   	push   edx
c0017527:	50                   	push   eax
c0017528:	e8 39 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017535:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001753b:	83 ec 08             	sub    esp,0x8
c001753e:	68 6d 25 02 c0       	push   0xc002256d
c0017543:	50                   	push   eax
c0017544:	e8 63 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017549:	83 c4 10             	add    esp,0x10
c001754c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017551:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017557:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001755b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001755e:	83 ec 08             	sub    esp,0x8
c0017561:	52                   	push   edx
c0017562:	50                   	push   eax
c0017563:	e8 fe 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017570:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017576:	83 ec 08             	sub    esp,0x8
c0017579:	68 75 25 02 c0       	push   0xc0022575
c001757e:	50                   	push   eax
c001757f:	e8 28 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017584:	83 c4 10             	add    esp,0x10
c0017587:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001758c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017592:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017596:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017599:	83 ec 08             	sub    esp,0x8
c001759c:	52                   	push   edx
c001759d:	50                   	push   eax
c001759e:	e8 c3 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b1:	83 ec 08             	sub    esp,0x8
c00175b4:	68 7d 25 02 c0       	push   0xc002257d
c00175b9:	50                   	push   eax
c00175ba:	e8 ed 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175d1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175d4:	83 ec 08             	sub    esp,0x8
c00175d7:	52                   	push   edx
c00175d8:	50                   	push   eax
c00175d9:	e8 88 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175de:	83 c4 10             	add    esp,0x10
c00175e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ec:	83 ec 08             	sub    esp,0x8
c00175ef:	68 85 25 02 c0       	push   0xc0022585
c00175f4:	50                   	push   eax
c00175f5:	e8 b2 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017602:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017608:	83 ec 08             	sub    esp,0x8
c001760b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001760f:	50                   	push   eax
c0017610:	e8 51 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017623:	83 ec 08             	sub    esp,0x8
c0017626:	68 8e 25 02 c0       	push   0xc002258e
c001762b:	50                   	push   eax
c001762c:	e8 7b 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017639:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001763f:	83 ec 08             	sub    esp,0x8
c0017642:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017646:	50                   	push   eax
c0017647:	e8 1a 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017654:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001765a:	83 ec 08             	sub    esp,0x8
c001765d:	68 96 25 02 c0       	push   0xc0022596
c0017662:	50                   	push   eax
c0017663:	e8 44 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017668:	83 c4 10             	add    esp,0x10
c001766b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017670:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017676:	83 ec 08             	sub    esp,0x8
c0017679:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001767d:	50                   	push   eax
c001767e:	e8 e3 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	fa                   	cli    
c0017687:	f4                   	hlt    
c0017688:	eb fe                	jmp    c0017688 <displayDebugInfo(regs*)+0x383>

c001768a <HalSystemIdle()>:
c001768a:	56                   	push   esi
c001768b:	53                   	push   ebx
c001768c:	83 ec 14             	sub    esp,0x14
c001768f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017694:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001769a:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00176a0:	83 e0 04             	and    eax,0x4
c00176a3:	0f b6 c0             	movzx  eax,al
c00176a6:	85 c0                	test   eax,eax
c00176a8:	0f 95 c0             	setne  al
c00176ab:	0f b6 c0             	movzx  eax,al
c00176ae:	85 c0                	test   eax,eax
c00176b0:	74 4c                	je     c00176fe <HalSystemIdle()+0x74>
c00176b2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176b7:	83 ec 08             	sub    esp,0x8
c00176ba:	68 e1 00 00 00       	push   0xe1
c00176bf:	50                   	push   eax
c00176c0:	e8 1d fa fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00176d0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176d9:	83 e2 02             	and    edx,0x2
c00176dc:	89 d3                	mov    ebx,edx
c00176de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176e2:	83 e2 00             	and    edx,0x0
c00176e5:	89 d6                	mov    esi,edx
c00176e7:	56                   	push   esi
c00176e8:	53                   	push   ebx
c00176e9:	68 e1 00 00 00       	push   0xe1
c00176ee:	50                   	push   eax
c00176ef:	e8 1a fa fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00176f4:	83 c4 10             	add    esp,0x10
c00176f7:	e8 98 8a fe ff       	call   c0000194 <doTPAUSE>
c00176fc:	eb 01                	jmp    c00176ff <HalSystemIdle()+0x75>
c00176fe:	f4                   	hlt    
c00176ff:	90                   	nop
c0017700:	83 c4 14             	add    esp,0x14
c0017703:	5b                   	pop    ebx
c0017704:	5e                   	pop    esi
c0017705:	c3                   	ret    

c0017706 <displayProgramFault(char const*)>:
c0017706:	83 ec 0c             	sub    esp,0xc
c0017709:	83 ec 0c             	sub    esp,0xc
c001770c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017710:	e8 f5 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001771d:	8b 00                	mov    eax,DWORD PTR [eax]
c001771f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017722:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017728:	85 c0                	test   eax,eax
c001772a:	74 21                	je     c001774d <displayProgramFault(char const*)+0x47>
c001772c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017731:	8b 00                	mov    eax,DWORD PTR [eax]
c0017733:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017736:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001773c:	6a 04                	push   0x4
c001773e:	6a 0f                	push   0xf
c0017740:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017744:	50                   	push   eax
c0017745:	e8 d4 13 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001774a:	83 c4 10             	add    esp,0x10
c001774d:	90                   	nop
c001774e:	83 c4 0c             	add    esp,0xc
c0017751:	c3                   	ret    

c0017752 <gpFault(regs*, void*)>:
c0017752:	83 ec 1c             	sub    esp,0x1c
c0017755:	c7 05 74 97 02 c0 a8 6b 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016ba8
c001775f:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017764:	85 c0                	test   eax,eax
c0017766:	74 1e                	je     c0017786 <gpFault(regs*, void*)+0x34>
c0017768:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c001776d:	83 ec 0c             	sub    esp,0xc
c0017770:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017774:	ff d0                	call   eax
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001777d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017782:	85 c0                	test   eax,eax
c0017784:	75 2e                	jne    c00177b4 <gpFault(regs*, void*)+0x62>
c0017786:	83 ec 0c             	sub    esp,0xc
c0017789:	68 9e 25 02 c0       	push   0xc002259e
c001778e:	e8 73 ff ff ff       	call   c0017706 <displayProgramFault(char const*)>
c0017793:	83 c4 10             	add    esp,0x10
c0017796:	83 ec 0c             	sub    esp,0xc
c0017799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001779d:	e8 63 fb ff ff       	call   c0017305 <displayDebugInfo(regs*)>
c00177a2:	83 c4 10             	add    esp,0x10
c00177a5:	83 ec 0c             	sub    esp,0xc
c00177a8:	6a 00                	push   0x0
c00177aa:	e8 99 ed ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	eb 01                	jmp    c00177b5 <gpFault(regs*, void*)+0x63>
c00177b4:	90                   	nop
c00177b5:	83 c4 1c             	add    esp,0x1c
c00177b8:	c3                   	ret    

c00177b9 <pgFault(regs*, void*)>:
c00177b9:	83 ec 1c             	sub    esp,0x1c
c00177bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177c0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177c3:	0f 20 d0             	mov    eax,cr2
c00177c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177ce:	83 ec 04             	sub    esp,0x4
c00177d1:	52                   	push   edx
c00177d2:	50                   	push   eax
c00177d3:	68 7c 26 02 c0       	push   0xc002267c
c00177d8:	e8 2d 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00177e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177ea:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00177f0:	0f 20 d2             	mov    edx,cr2
c00177f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177fb:	83 ec 08             	sub    esp,0x8
c00177fe:	52                   	push   edx
c00177ff:	50                   	push   eax
c0017800:	e8 75 2b ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	0f b6 c0             	movzx  eax,al
c001780b:	85 c0                	test   eax,eax
c001780d:	75 2e                	jne    c001783d <pgFault(regs*, void*)+0x84>
c001780f:	83 ec 0c             	sub    esp,0xc
c0017812:	68 b7 25 02 c0       	push   0xc00225b7
c0017817:	e8 ea fe ff ff       	call   c0017706 <displayProgramFault(char const*)>
c001781c:	83 c4 10             	add    esp,0x10
c001781f:	83 ec 0c             	sub    esp,0xc
c0017822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017826:	e8 da fa ff ff       	call   c0017305 <displayDebugInfo(regs*)>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	83 ec 0c             	sub    esp,0xc
c0017831:	6a 00                	push   0x0
c0017833:	e8 10 ed ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	eb 01                	jmp    c001783e <pgFault(regs*, void*)+0x85>
c001783d:	90                   	nop
c001783e:	83 c4 1c             	add    esp,0x1c
c0017841:	c3                   	ret    

c0017842 <otherISRHandler(regs*, void*)>:
c0017842:	83 ec 0c             	sub    esp,0xc
c0017845:	83 ec 0c             	sub    esp,0xc
c0017848:	68 a4 26 02 c0       	push   0xc00226a4
c001784d:	e8 b4 fe ff ff       	call   c0017706 <displayProgramFault(char const*)>
c0017852:	83 c4 10             	add    esp,0x10
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001785c:	e8 a4 fa ff ff       	call   c0017305 <displayDebugInfo(regs*)>
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	83 ec 0c             	sub    esp,0xc
c0017867:	6a 00                	push   0x0
c0017869:	e8 da ec ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c001786e:	83 c4 10             	add    esp,0x10
c0017871:	90                   	nop
c0017872:	83 c4 0c             	add    esp,0xc
c0017875:	c3                   	ret    

c0017876 <opcodeFault(regs*, void*)>:
c0017876:	55                   	push   ebp
c0017877:	89 e5                	mov    ebp,esp
c0017879:	83 ec 08             	sub    esp,0x8
c001787c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001787f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017882:	83 ec 08             	sub    esp,0x8
c0017885:	50                   	push   eax
c0017886:	68 c2 25 02 c0       	push   0xc00225c2
c001788b:	e8 7a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017898:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001789e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00178a4:	0f b6 c0             	movzx  eax,al
c00178a7:	85 c0                	test   eax,eax
c00178a9:	74 21                	je     c00178cc <opcodeFault(regs*, void*)+0x56>
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	68 cc 26 02 c0       	push   0xc00226cc
c00178b3:	e8 52 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178c1:	8d 50 19             	lea    edx,[eax+0x19]
c00178c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00178ca:	eb 2b                	jmp    c00178f7 <opcodeFault(regs*, void*)+0x81>
c00178cc:	83 ec 0c             	sub    esp,0xc
c00178cf:	68 d0 25 02 c0       	push   0xc00225d0
c00178d4:	e8 2d fe ff ff       	call   c0017706 <displayProgramFault(char const*)>
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	83 ec 0c             	sub    esp,0xc
c00178df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00178e2:	e8 1e fa ff ff       	call   c0017305 <displayDebugInfo(regs*)>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	83 ec 0c             	sub    esp,0xc
c00178ed:	6a 00                	push   0x0
c00178ef:	e8 54 ec ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c00178f4:	83 c4 10             	add    esp,0x10
c00178f7:	c9                   	leave  
c00178f8:	c3                   	ret    

c00178f9 <i386SaveCoprocessor(void*)>:
c00178f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178fd:	83 c0 3f             	add    eax,0x3f
c0017900:	83 e0 c0             	and    eax,0xffffffc0
c0017903:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017907:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c001790d <i386LoadCoprocessor(void*)>:
c001790d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017911:	83 c0 3f             	add    eax,0x3f
c0017914:	83 e0 c0             	and    eax,0xffffffc0
c0017917:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001791b:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017921 <x87EmulHandler(regs*, void*)>:
c0017921:	53                   	push   ebx
c0017922:	83 ec 08             	sub    esp,0x8
c0017925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001792a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001792e:	74 10                	je     c0017940 <x87EmulHandler(regs*, void*)+0x1f>
c0017930:	83 ec 0c             	sub    esp,0xc
c0017933:	68 dd 25 02 c0       	push   0xc00225dd
c0017938:	e8 9c 98 ff ff       	call   c00111d9 <KePanic(char const*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	0f 20 c0             	mov    eax,cr0
c0017943:	a8 08                	test   al,0x8
c0017945:	74 59                	je     c00179a0 <x87EmulHandler(regs*, void*)+0x7f>
c0017947:	0f 06                	clts   
c0017949:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c001794e:	85 c0                	test   eax,eax
c0017950:	74 0e                	je     c0017960 <x87EmulHandler(regs*, void*)+0x3f>
c0017952:	83 ec 0c             	sub    esp,0xc
c0017955:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017958:	e8 9c ff ff ff       	call   c00178f9 <i386SaveCoprocessor(void*)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017966:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001796a:	75 12                	jne    c001797e <x87EmulHandler(regs*, void*)+0x5d>
c001796c:	83 ec 0c             	sub    esp,0xc
c001796f:	68 40 02 00 00       	push   0x240
c0017974:	e8 5a 01 ff ff       	call   c0007ad3 <malloc>
c0017979:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001797c:	eb 10                	jmp    c001798e <x87EmulHandler(regs*, void*)+0x6d>
c001797e:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017983:	83 ec 0c             	sub    esp,0xc
c0017986:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017989:	e8 7f ff ff ff       	call   c001790d <i386LoadCoprocessor(void*)>
c001798e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c001799b:	83 c4 08             	add    esp,0x8
c001799e:	5b                   	pop    ebx
c001799f:	c3                   	ret    
c00179a0:	83 ec 0c             	sub    esp,0xc
c00179a3:	68 f1 25 02 c0       	push   0xc00225f1
c00179a8:	e8 5d 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179ad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179b5:	83 c4 18             	add    esp,0x18
c00179b8:	5b                   	pop    ebx
c00179b9:	e9 8a eb ff ff       	jmp    c0016548 <Thr::terminateFromIRQ(int)>

c00179be <HalInitialiseCoprocessor()>:
c00179be:	83 ec 10             	sub    esp,0x10
c00179c1:	6a 00                	push   0x0
c00179c3:	68 21 79 01 c0       	push   0xc0017921
c00179c8:	6a 07                	push   0x7
c00179ca:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c00179d4:	e8 99 51 ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00179d9:	e8 b2 70 00 00       	call   c001ea90 <avxDetect>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	85 c0                	test   eax,eax
c00179e3:	74 1c                	je     c0017a01 <HalInitialiseCoprocessor()+0x43>
c00179e5:	c7 05 70 97 02 c0 ba ea 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eaba
c00179ef:	c7 05 6c 97 02 c0 cb ea 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eacb
c00179f9:	83 c4 0c             	add    esp,0xc
c00179fc:	e9 db 70 00 00       	jmp    c001eadc <avxInit>
c0017a01:	e8 1a 74 00 00       	call   c001ee20 <absolutelyNoChanceInHell>
c0017a06:	85 c0                	test   eax,eax
c0017a08:	74 1c                	je     c0017a26 <HalInitialiseCoprocessor()+0x68>
c0017a0a:	c7 05 70 97 02 c0 38 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee38
c0017a14:	c7 05 6c 97 02 c0 40 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee40
c0017a1e:	83 c4 0c             	add    esp,0xc
c0017a21:	e9 22 74 00 00       	jmp    c001ee48 <sseInit>
c0017a26:	e8 3b 74 00 00       	call   c001ee66 <x87Detect>
c0017a2b:	85 c0                	test   eax,eax
c0017a2d:	74 1c                	je     c0017a4b <HalInitialiseCoprocessor()+0x8d>
c0017a2f:	c7 05 70 97 02 c0 81 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee81
c0017a39:	c7 05 6c 97 02 c0 88 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee88
c0017a43:	83 c4 0c             	add    esp,0xc
c0017a46:	e9 44 74 00 00       	jmp    c001ee8f <x87Init>
c0017a4b:	c7 05 70 97 02 c0 d2 72 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00172d2
c0017a55:	c7 05 6c 97 02 c0 d2 72 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00172d2
c0017a5f:	0f 20 c0             	mov    eax,cr0
c0017a62:	83 c8 04             	or     eax,0x4
c0017a65:	0f 22 c0             	mov    cr0,eax
c0017a68:	83 c4 0c             	add    esp,0xc
c0017a6b:	c3                   	ret    

c0017a6c <HalPanic(char const*)>:
c0017a6c:	53                   	push   ebx
c0017a6d:	83 ec 10             	sub    esp,0x10
c0017a70:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a74:	fa                   	cli    
c0017a75:	53                   	push   ebx
c0017a76:	68 07 26 02 c0       	push   0xc0022607
c0017a7b:	e8 8a 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a80:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017a85:	83 c4 10             	add    esp,0x10
c0017a88:	85 c0                	test   eax,eax
c0017a8a:	74 09                	je     c0017a95 <HalPanic(char const*)+0x29>
c0017a8c:	83 ec 0c             	sub    esp,0xc
c0017a8f:	53                   	push   ebx
c0017a90:	ff d0                	call   eax
c0017a92:	83 c4 10             	add    esp,0x10
c0017a95:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a9a:	85 c0                	test   eax,eax
c0017a9c:	0f 84 dc 00 00 00    	je     c0017b7e <HalPanic(char const*)+0x112>
c0017aa2:	52                   	push   edx
c0017aa3:	6a 01                	push   0x1
c0017aa5:	6a 0f                	push   0xf
c0017aa7:	50                   	push   eax
c0017aa8:	e8 1d 0b ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017aad:	59                   	pop    ecx
c0017aae:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ab4:	e8 01 0d ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017ab9:	58                   	pop    eax
c0017aba:	5a                   	pop    edx
c0017abb:	68 e4 08 02 c0       	push   0xc00208e4
c0017ac0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ac6:	e8 37 0b ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017acb:	83 c4 0c             	add    esp,0xc
c0017ace:	6a 01                	push   0x1
c0017ad0:	6a 0f                	push   0xf
c0017ad2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ad8:	e8 ed 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017add:	59                   	pop    ecx
c0017ade:	58                   	pop    eax
c0017adf:	68 20 26 02 c0       	push   0xc0022620
c0017ae4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aea:	e8 bd 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aef:	83 c4 0c             	add    esp,0xc
c0017af2:	6a 0f                	push   0xf
c0017af4:	6a 01                	push   0x1
c0017af6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017afc:	e8 c9 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b01:	58                   	pop    eax
c0017b02:	5a                   	pop    edx
c0017b03:	68 29 26 02 c0       	push   0xc0022629
c0017b08:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b0e:	e8 99 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b13:	83 c4 0c             	add    esp,0xc
c0017b16:	6a 01                	push   0x1
c0017b18:	6a 0f                	push   0xf
c0017b1a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b20:	e8 a5 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b25:	59                   	pop    ecx
c0017b26:	58                   	pop    eax
c0017b27:	68 6d 26 02 c0       	push   0xc002266d
c0017b2c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b32:	e8 75 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b37:	58                   	pop    eax
c0017b38:	5a                   	pop    edx
c0017b39:	68 36 26 02 c0       	push   0xc0022636
c0017b3e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b44:	e8 63 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b49:	59                   	pop    ecx
c0017b4a:	58                   	pop    eax
c0017b4b:	68 70 26 02 c0       	push   0xc0022670
c0017b50:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b56:	e8 51 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b5b:	58                   	pop    eax
c0017b5c:	5a                   	pop    edx
c0017b5d:	53                   	push   ebx
c0017b5e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b64:	e8 43 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b69:	59                   	pop    ecx
c0017b6a:	5b                   	pop    ebx
c0017b6b:	68 6d 26 02 c0       	push   0xc002266d
c0017b70:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b76:	e8 31 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	eb fe                	jmp    c0017b7e <HalPanic(char const*)+0x112>

c0017b80 <HalQueryPerformanceCounter()>:
c0017b80:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b85:	31 d2                	xor    edx,edx
c0017b87:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b8d:	31 c0                	xor    eax,eax
c0017b8f:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b96:	74 02                	je     c0017b9a <HalQueryPerformanceCounter()+0x1a>
c0017b98:	0f 31                	rdtsc  
c0017b9a:	c3                   	ret    

c0017b9b <HalInitialise()>:
c0017b9b:	53                   	push   ebx
c0017b9c:	83 ec 08             	sub    esp,0x8
c0017b9f:	e8 05 52 ff ff       	call   c000cda9 <setupINTS()>
c0017ba4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ba9:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017bb0:	75 0f                	jne    c0017bc1 <HalInitialise()+0x26>
c0017bb2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bb8:	83 e2 fe             	and    edx,0xfffffffe
c0017bbb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bc1:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017bc8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bce:	83 e2 fe             	and    edx,0xfffffffe
c0017bd1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bd7:	e8 a0 02 00 00       	call   c0017e7c <picOpen()>
c0017bdc:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017be3:	74 0a                	je     c0017bef <HalInitialise()+0x54>
c0017be5:	e8 e2 01 00 00       	call   c0017dcc <picDisable()>
c0017bea:	e8 0d 68 00 00       	call   c001e3fc <apicOpen()>
c0017bef:	50                   	push   eax
c0017bf0:	bb 0f 00 00 00       	mov    ebx,0xf
c0017bf5:	6a 00                	push   0x0
c0017bf7:	68 42 78 01 c0       	push   0xc0017842
c0017bfc:	6a 00                	push   0x0
c0017bfe:	e8 6f 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c03:	83 c4 0c             	add    esp,0xc
c0017c06:	6a 00                	push   0x0
c0017c08:	68 42 78 01 c0       	push   0xc0017842
c0017c0d:	6a 01                	push   0x1
c0017c0f:	e8 5e 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c14:	83 c4 0c             	add    esp,0xc
c0017c17:	6a 00                	push   0x0
c0017c19:	68 d3 72 01 c0       	push   0xc00172d3
c0017c1e:	6a 02                	push   0x2
c0017c20:	e8 4d 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c25:	83 c4 0c             	add    esp,0xc
c0017c28:	6a 00                	push   0x0
c0017c2a:	68 42 78 01 c0       	push   0xc0017842
c0017c2f:	6a 03                	push   0x3
c0017c31:	e8 3c 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c36:	83 c4 0c             	add    esp,0xc
c0017c39:	6a 00                	push   0x0
c0017c3b:	68 42 78 01 c0       	push   0xc0017842
c0017c40:	6a 04                	push   0x4
c0017c42:	e8 2b 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c47:	83 c4 0c             	add    esp,0xc
c0017c4a:	6a 00                	push   0x0
c0017c4c:	68 42 78 01 c0       	push   0xc0017842
c0017c51:	6a 05                	push   0x5
c0017c53:	e8 1a 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c58:	83 c4 0c             	add    esp,0xc
c0017c5b:	6a 00                	push   0x0
c0017c5d:	68 76 78 01 c0       	push   0xc0017876
c0017c62:	6a 06                	push   0x6
c0017c64:	e8 09 4f ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c69:	83 c4 0c             	add    esp,0xc
c0017c6c:	6a 00                	push   0x0
c0017c6e:	68 ec 72 01 c0       	push   0xc00172ec
c0017c73:	6a 08                	push   0x8
c0017c75:	e8 f8 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c7a:	83 c4 0c             	add    esp,0xc
c0017c7d:	6a 00                	push   0x0
c0017c7f:	68 42 78 01 c0       	push   0xc0017842
c0017c84:	6a 09                	push   0x9
c0017c86:	e8 e7 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c8b:	83 c4 0c             	add    esp,0xc
c0017c8e:	6a 00                	push   0x0
c0017c90:	68 42 78 01 c0       	push   0xc0017842
c0017c95:	6a 0a                	push   0xa
c0017c97:	e8 d6 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c9c:	83 c4 0c             	add    esp,0xc
c0017c9f:	6a 00                	push   0x0
c0017ca1:	68 42 78 01 c0       	push   0xc0017842
c0017ca6:	6a 0b                	push   0xb
c0017ca8:	e8 c5 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cad:	83 c4 0c             	add    esp,0xc
c0017cb0:	6a 00                	push   0x0
c0017cb2:	68 52 77 01 c0       	push   0xc0017752
c0017cb7:	6a 0d                	push   0xd
c0017cb9:	e8 b4 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cbe:	83 c4 0c             	add    esp,0xc
c0017cc1:	6a 00                	push   0x0
c0017cc3:	68 b9 77 01 c0       	push   0xc00177b9
c0017cc8:	6a 0e                	push   0xe
c0017cca:	e8 a3 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ccf:	83 c4 10             	add    esp,0x10
c0017cd2:	50                   	push   eax
c0017cd3:	6a 00                	push   0x0
c0017cd5:	68 42 78 01 c0       	push   0xc0017842
c0017cda:	53                   	push   ebx
c0017cdb:	43                   	inc    ebx
c0017cdc:	e8 91 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ce1:	83 c4 10             	add    esp,0x10
c0017ce4:	83 fb 1e             	cmp    ebx,0x1e
c0017ce7:	75 e9                	jne    c0017cd2 <HalInitialise()+0x137>
c0017ce9:	50                   	push   eax
c0017cea:	6a 00                	push   0x0
c0017cec:	68 d3 24 01 c0       	push   0xc00124d3
c0017cf1:	6a 60                	push   0x60
c0017cf3:	e8 7a 4e ff ff       	call   c000cb72 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cf8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cfd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017d07:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d0e:	e8 c0 fd fe ff       	call   c0007ad3 <malloc>
c0017d13:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d16:	89 c3                	mov    ebx,eax
c0017d18:	e8 37 09 00 00       	call   c0018654 <RTC::RTC()>
c0017d1d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d27:	5a                   	pop    edx
c0017d28:	59                   	pop    ecx
c0017d29:	53                   	push   ebx
c0017d2a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d30:	e8 07 49 ff ff       	call   c000c63c <Device::addChild(Device*)>
c0017d35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d37:	6a 00                	push   0x0
c0017d39:	6a 00                	push   0x0
c0017d3b:	6a 00                	push   0x0
c0017d3d:	53                   	push   ebx
c0017d3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d41:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d46:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d4c:	83 c4 28             	add    esp,0x28
c0017d4f:	5b                   	pop    ebx
c0017d50:	c3                   	ret    

c0017d51 <HalMakeBeep(int)>:
c0017d51:	53                   	push   ebx
c0017d52:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d56:	85 db                	test   ebx,ebx
c0017d58:	75 07                	jne    c0017d61 <HalMakeBeep(int)+0x10>
c0017d5a:	e4 61                	in     al,0x61
c0017d5c:	83 e0 fc             	and    eax,0xfffffffc
c0017d5f:	eb 26                	jmp    c0017d87 <HalMakeBeep(int)+0x36>
c0017d61:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017d66:	99                   	cdq    
c0017d67:	f7 fb                	idiv   ebx
c0017d69:	89 c1                	mov    ecx,eax
c0017d6b:	b0 b6                	mov    al,0xb6
c0017d6d:	e6 43                	out    0x43,al
c0017d6f:	88 c8                	mov    al,cl
c0017d71:	e6 42                	out    0x42,al
c0017d73:	89 c8                	mov    eax,ecx
c0017d75:	c1 e8 08             	shr    eax,0x8
c0017d78:	e6 42                	out    0x42,al
c0017d7a:	e4 61                	in     al,0x61
c0017d7c:	89 c2                	mov    edx,eax
c0017d7e:	83 ca 03             	or     edx,0x3
c0017d81:	38 d0                	cmp    al,dl
c0017d83:	74 04                	je     c0017d89 <HalMakeBeep(int)+0x38>
c0017d85:	88 d0                	mov    al,dl
c0017d87:	e6 61                	out    0x61,al
c0017d89:	5b                   	pop    ebx
c0017d8a:	c3                   	ret    

c0017d8b <HalGetRand()>:
c0017d8b:	31 c0                	xor    eax,eax
c0017d8d:	c3                   	ret    

c0017d8e <HalEndOfInterrupt(int)>:
c0017d8e:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d95:	74 23                	je     c0017dba <HalEndOfInterrupt(int)+0x2c>
c0017d97:	83 ec 14             	sub    esp,0x14
c0017d9a:	6a 1b                	push   0x1b
c0017d9c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017da2:	e8 3b f3 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017da7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017dac:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017db6:	83 c4 1c             	add    esp,0x1c
c0017db9:	c3                   	ret    
c0017dba:	e9 41 02 00 00       	jmp    c0018000 <picEOI(int)>

c0017dbf <HalRestart()>:
c0017dbf:	c3                   	ret    

c0017dc0 <HalShutdown()>:
c0017dc0:	c3                   	ret    

c0017dc1 <HalSleep()>:
c0017dc1:	c3                   	ret    
c0017dc2:	66 90                	xchg   ax,ax

c0017dc4 <picIoWait()>:
c0017dc4:	eb 00                	jmp    c0017dc6 <picIoWait()+0x2>
c0017dc6:	eb 00                	jmp    c0017dc8 <picIoWait()+0x4>
c0017dc8:	90                   	nop
c0017dc9:	c3                   	ret    
c0017dca:	66 90                	xchg   ax,ax

c0017dcc <picDisable()>:
c0017dcc:	83 ec 10             	sub    esp,0x10
c0017dcf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017dd6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017ddb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ddf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017de4:	ee                   	out    dx,al
c0017de5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017dec:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017df1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017df5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017dfa:	ee                   	out    dx,al
c0017dfb:	90                   	nop
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	c3                   	ret    

c0017e00 <picGetIRQReg(int)>:
c0017e00:	83 ec 10             	sub    esp,0x10
c0017e03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e07:	0f b6 c0             	movzx  eax,al
c0017e0a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e11:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e15:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e19:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e1e:	ee                   	out    dx,al
c0017e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e23:	0f b6 c0             	movzx  eax,al
c0017e26:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e2d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e31:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e35:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e3a:	ee                   	out    dx,al
c0017e3b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e42:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e47:	89 c2                	mov    edx,eax
c0017e49:	ec                   	in     al,dx
c0017e4a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e4e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e52:	0f b6 c0             	movzx  eax,al
c0017e55:	c1 e0 08             	shl    eax,0x8
c0017e58:	89 c1                	mov    ecx,eax
c0017e5a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017e61:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017e66:	89 c2                	mov    edx,eax
c0017e68:	ec                   	in     al,dx
c0017e69:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e6d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e71:	0f b6 c0             	movzx  eax,al
c0017e74:	09 c8                	or     eax,ecx
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	c3                   	ret    
c0017e7a:	66 90                	xchg   ax,ax

c0017e7c <picOpen()>:
c0017e7c:	83 ec 50             	sub    esp,0x50
c0017e7f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e86:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e8b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e93:	ee                   	out    dx,al
c0017e94:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e9b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017ea0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017ea4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ea8:	ee                   	out    dx,al
c0017ea9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017eb1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017eb9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017ec0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ec4:	89 c2                	mov    edx,eax
c0017ec6:	ec                   	in     al,dx
c0017ec7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017ecb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017ecf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017ed3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017eda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ede:	89 c2                	mov    edx,eax
c0017ee0:	ec                   	in     al,dx
c0017ee1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017ee5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ee9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017eed:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ef4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017ef9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017efd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f01:	ee                   	out    dx,al
c0017f02:	e8 bd fe ff ff       	call   c0017dc4 <picIoWait()>
c0017f07:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f0e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f13:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f1b:	ee                   	out    dx,al
c0017f1c:	e8 a3 fe ff ff       	call   c0017dc4 <picIoWait()>
c0017f21:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f25:	0f b6 c0             	movzx  eax,al
c0017f28:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f2f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f33:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3b:	ee                   	out    dx,al
c0017f3c:	e8 83 fe ff ff       	call   c0017dc4 <picIoWait()>
c0017f41:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f45:	0f b6 c0             	movzx  eax,al
c0017f48:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f4f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f53:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f5b:	ee                   	out    dx,al
c0017f5c:	e8 63 fe ff ff       	call   c0017dc4 <picIoWait()>
c0017f61:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f68:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f6d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f75:	ee                   	out    dx,al
c0017f76:	e8 49 fe ff ff       	call   c0017dc4 <picIoWait()>
c0017f7b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f82:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f87:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f8f:	ee                   	out    dx,al
c0017f90:	e8 2f fe ff ff       	call   c0017dc4 <picIoWait()>
c0017f95:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f9c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017fa1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017fa5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017fa9:	ee                   	out    dx,al
c0017faa:	e8 15 fe ff ff       	call   c0017dc4 <picIoWait()>
c0017faf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017fb6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017fbb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017fbf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fc3:	ee                   	out    dx,al
c0017fc4:	e8 fb fd ff ff       	call   c0017dc4 <picIoWait()>
c0017fc9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017fce:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017fd5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017fd9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017fdd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fe1:	ee                   	out    dx,al
c0017fe2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017fe7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017fee:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017ff2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017ff6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017ffa:	ee                   	out    dx,al
c0017ffb:	90                   	nop
c0017ffc:	83 c4 50             	add    esp,0x50
c0017fff:	c3                   	ret    

c0018000 <picEOI(int)>:
c0018000:	83 ec 10             	sub    esp,0x10
c0018003:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018008:	75 1e                	jne    c0018028 <picEOI(int)+0x28>
c001800a:	6a 0b                	push   0xb
c001800c:	e8 ef fd ff ff       	call   c0017e00 <picGetIRQReg(int)>
c0018011:	83 c4 04             	add    esp,0x4
c0018014:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018019:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001801e:	25 80 00 00 00       	and    eax,0x80
c0018023:	74 73                	je     c0018098 <picEOI(int)+0x98>
c0018025:	8d 76 00             	lea    esi,[esi+0x0]
c0018028:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001802d:	75 31                	jne    c0018060 <picEOI(int)+0x60>
c001802f:	6a 0b                	push   0xb
c0018031:	e8 ca fd ff ff       	call   c0017e00 <picGetIRQReg(int)>
c0018036:	83 c4 04             	add    esp,0x4
c0018039:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001803e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018042:	98                   	cwde   
c0018043:	85 c0                	test   eax,eax
c0018045:	78 19                	js     c0018060 <picEOI(int)+0x60>
c0018047:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001804e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018053:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018057:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001805c:	ee                   	out    dx,al
c001805d:	eb 3d                	jmp    c001809c <picEOI(int)+0x9c>
c001805f:	90                   	nop
c0018060:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018065:	7e 19                	jle    c0018080 <picEOI(int)+0x80>
c0018067:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001806e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018073:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018077:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001807c:	ee                   	out    dx,al
c001807d:	8d 76 00             	lea    esi,[esi+0x0]
c0018080:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018087:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001808c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018090:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018095:	ee                   	out    dx,al
c0018096:	eb 04                	jmp    c001809c <picEOI(int)+0x9c>
c0018098:	90                   	nop
c0018099:	8d 76 00             	lea    esi,[esi+0x0]
c001809c:	83 c4 10             	add    esp,0x10
c001809f:	c3                   	ret    

c00180a0 <RTC::open(int, int, void*)>:
c00180a0:	31 c0                	xor    eax,eax
c00180a2:	c3                   	ret    
c00180a3:	90                   	nop

c00180a4 <RTC::close(int, int, void*)>:
c00180a4:	31 c0                	xor    eax,eax
c00180a6:	c3                   	ret    
c00180a7:	90                   	nop

c00180a8 <RTC::timeInSecondsUTC()>:
c00180a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180ac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00180b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00180b8:	c3                   	ret    
c00180b9:	90                   	nop

c00180ba <RTC::timeInDatetimeUTC()>:
c00180ba:	53                   	push   ebx
c00180bb:	83 ec 14             	sub    esp,0x14
c00180be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00180c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00180c8:	50                   	push   eax
c00180c9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00180cc:	83 c4 0c             	add    esp,0xc
c00180cf:	52                   	push   edx
c00180d0:	50                   	push   eax
c00180d1:	53                   	push   ebx
c00180d2:	e8 d9 42 ff ff       	call   c000c3b0 <secondsToDatetime(unsigned long long)>
c00180d7:	89 d8                	mov    eax,ebx
c00180d9:	83 c4 14             	add    esp,0x14
c00180dc:	5b                   	pop    ebx
c00180dd:	c2 04 00             	ret    0x4

c00180e0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00180e0:	56                   	push   esi
c00180e1:	53                   	push   ebx
c00180e2:	83 ec 14             	sub    esp,0x14
c00180e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180eb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00180ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180f2:	52                   	push   edx
c00180f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180fb:	50                   	push   eax
c00180fc:	e8 af 42 ff ff       	call   c000c3b0 <secondsToDatetime(unsigned long long)>
c0018101:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018109:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001810d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018111:	89 f0                	mov    eax,esi
c0018113:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018117:	83 c4 20             	add    esp,0x20
c001811a:	5b                   	pop    ebx
c001811b:	5e                   	pop    esi
c001811c:	ff e0                	jmp    eax

c001811e <RTC::~RTC()>:
c001811e:	83 ec 0c             	sub    esp,0xc
c0018121:	ba 0c 27 02 c0       	mov    edx,0xc002270c
c0018126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812a:	89 10                	mov    DWORD PTR [eax],edx
c001812c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018130:	83 ec 0c             	sub    esp,0xc
c0018133:	50                   	push   eax
c0018134:	e8 03 40 ff ff       	call   c000c13c <Clock::~Clock()>
c0018139:	83 c4 10             	add    esp,0x10
c001813c:	90                   	nop
c001813d:	83 c4 0c             	add    esp,0xc
c0018140:	c3                   	ret    
c0018141:	90                   	nop

c0018142 <RTC::~RTC()>:
c0018142:	83 ec 0c             	sub    esp,0xc
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001814c:	e8 cd ff ff ff       	call   c001811e <RTC::~RTC()>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	83 ec 08             	sub    esp,0x8
c0018157:	68 60 01 00 00       	push   0x160
c001815c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018160:	e8 a7 26 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018165:	83 c4 10             	add    esp,0x10
c0018168:	83 c4 0c             	add    esp,0xc
c001816b:	c3                   	ret    

c001816c <RTC::get_update_in_progress_flag()>:
c001816c:	83 ec 14             	sub    esp,0x14
c001816f:	6a 0a                	push   0xa
c0018171:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018177:	e8 1e f0 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001817c:	83 c4 1c             	add    esp,0x1c
c001817f:	0f b6 c0             	movzx  eax,al
c0018182:	c1 e8 07             	shr    eax,0x7
c0018185:	c3                   	ret    

c0018186 <RTC::completeRTCRefresh()>:
c0018186:	55                   	push   ebp
c0018187:	57                   	push   edi
c0018188:	56                   	push   esi
c0018189:	53                   	push   ebx
c001818a:	83 ec 3c             	sub    esp,0x3c
c001818d:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018193:	83 ec 0c             	sub    esp,0xc
c0018196:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001819a:	e8 cd ff ff ff       	call   c001816c <RTC::get_update_in_progress_flag()>
c001819f:	83 c4 10             	add    esp,0x10
c00181a2:	84 c0                	test   al,al
c00181a4:	74 0e                	je     c00181b4 <RTC::completeRTCRefresh()+0x2e>
c00181a6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181ac:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00181b2:	73 df                	jae    c0018193 <RTC::completeRTCRefresh()+0xd>
c00181b4:	50                   	push   eax
c00181b5:	50                   	push   eax
c00181b6:	6a 00                	push   0x0
c00181b8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181be:	e8 d7 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181c3:	89 c7                	mov    edi,eax
c00181c5:	58                   	pop    eax
c00181c6:	5a                   	pop    edx
c00181c7:	6a 02                	push   0x2
c00181c9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181cf:	e8 c6 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181d4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00181d8:	59                   	pop    ecx
c00181d9:	5b                   	pop    ebx
c00181da:	6a 04                	push   0x4
c00181dc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181e2:	e8 b3 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181e7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00181eb:	5e                   	pop    esi
c00181ec:	5d                   	pop    ebp
c00181ed:	6a 07                	push   0x7
c00181ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181f5:	e8 a0 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181fa:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00181fe:	58                   	pop    eax
c00181ff:	5a                   	pop    edx
c0018200:	6a 08                	push   0x8
c0018202:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018208:	e8 8d ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001820d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018211:	59                   	pop    ecx
c0018212:	5b                   	pop    ebx
c0018213:	6a 09                	push   0x9
c0018215:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001821b:	e8 7a ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018220:	0f b6 c0             	movzx  eax,al
c0018223:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018230:	83 ec 0c             	sub    esp,0xc
c0018233:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018237:	e8 30 ff ff ff       	call   c001816c <RTC::get_update_in_progress_flag()>
c001823c:	83 c4 10             	add    esp,0x10
c001823f:	84 c0                	test   al,al
c0018241:	74 0e                	je     c0018251 <RTC::completeRTCRefresh()+0xcb>
c0018243:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018249:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001824f:	73 df                	jae    c0018230 <RTC::completeRTCRefresh()+0xaa>
c0018251:	51                   	push   ecx
c0018252:	51                   	push   ecx
c0018253:	6a 00                	push   0x0
c0018255:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001825b:	e8 3a ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018260:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018264:	5b                   	pop    ebx
c0018265:	5e                   	pop    esi
c0018266:	6a 02                	push   0x2
c0018268:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001826e:	e8 27 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018273:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018277:	5d                   	pop    ebp
c0018278:	58                   	pop    eax
c0018279:	6a 04                	push   0x4
c001827b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018281:	e8 14 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018286:	88 c3                	mov    bl,al
c0018288:	58                   	pop    eax
c0018289:	5a                   	pop    edx
c001828a:	6a 07                	push   0x7
c001828c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018292:	e8 03 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018297:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001829b:	59                   	pop    ecx
c001829c:	5e                   	pop    esi
c001829d:	6a 08                	push   0x8
c001829f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a5:	e8 f0 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182aa:	5d                   	pop    ebp
c00182ab:	89 c6                	mov    esi,eax
c00182ad:	58                   	pop    eax
c00182ae:	6a 09                	push   0x9
c00182b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182b6:	e8 df ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182bb:	89 f9                	mov    ecx,edi
c00182bd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	0f b6 e8             	movzx  ebp,al
c00182c7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00182cc:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00182d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182d4:	74 27                	je     c00182fd <RTC::completeRTCRefresh()+0x177>
c00182d6:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00182da:	89 f0                	mov    eax,esi
c00182dc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00182e0:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00182e4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00182e8:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00182ec:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00182f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182f4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182f8:	e9 2d ff ff ff       	jmp    c001822a <RTC::completeRTCRefresh()+0xa4>
c00182fd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018302:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018306:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001830a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001830e:	75 c6                	jne    c00182d6 <RTC::completeRTCRefresh()+0x150>
c0018310:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018315:	89 f1                	mov    ecx,esi
c0018317:	0f b6 fb             	movzx  edi,bl
c001831a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001831e:	0f b6 c9             	movzx  ecx,cl
c0018321:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018325:	89 f1                	mov    ecx,esi
c0018327:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001832b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001832f:	0f 94 c2             	sete   dl
c0018332:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018336:	0f 94 c0             	sete   al
c0018339:	21 d0                	and    eax,edx
c001833b:	31 d2                	xor    edx,edx
c001833d:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018341:	0f 94 c2             	sete   dl
c0018344:	85 c2                	test   edx,eax
c0018346:	74 8e                	je     c00182d6 <RTC::completeRTCRefresh()+0x150>
c0018348:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001834c:	75 88                	jne    c00182d6 <RTC::completeRTCRefresh()+0x150>
c001834e:	52                   	push   edx
c001834f:	52                   	push   edx
c0018350:	6a 0b                	push   0xb
c0018352:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018358:	e8 3d ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001835d:	83 c4 10             	add    esp,0x10
c0018360:	a8 04                	test   al,0x4
c0018362:	75 7a                	jne    c00183de <RTC::completeRTCRefresh()+0x258>
c0018364:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018368:	c1 ef 04             	shr    edi,0x4
c001836b:	83 e6 0f             	and    esi,0xf
c001836e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018372:	c1 ed 04             	shr    ebp,0x4
c0018375:	6b ed 0a             	imul   ebp,ebp,0xa
c0018378:	c1 ea 04             	shr    edx,0x4
c001837b:	6b d2 0a             	imul   edx,edx,0xa
c001837e:	83 e1 0f             	and    ecx,0xf
c0018381:	01 d1                	add    ecx,edx
c0018383:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018387:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001838b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001838f:	c1 ea 04             	shr    edx,0x4
c0018392:	6b d2 0a             	imul   edx,edx,0xa
c0018395:	83 e1 0f             	and    ecx,0xf
c0018398:	01 d1                	add    ecx,edx
c001839a:	89 fa                	mov    edx,edi
c001839c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183a0:	83 e2 07             	and    edx,0x7
c00183a3:	89 d9                	mov    ecx,ebx
c00183a5:	6b d2 0a             	imul   edx,edx,0xa
c00183a8:	83 e1 0f             	and    ecx,0xf
c00183ab:	83 e3 80             	and    ebx,0xffffff80
c00183ae:	01 d1                	add    ecx,edx
c00183b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b4:	09 cb                	or     ebx,ecx
c00183b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183ba:	c1 ea 04             	shr    edx,0x4
c00183bd:	6b d2 0a             	imul   edx,edx,0xa
c00183c0:	83 e1 0f             	and    ecx,0xf
c00183c3:	01 d1                	add    ecx,edx
c00183c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183c9:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00183cd:	c1 ea 04             	shr    edx,0x4
c00183d0:	6b d2 0a             	imul   edx,edx,0xa
c00183d3:	01 d6                	add    esi,edx
c00183d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183d9:	83 e2 0f             	and    edx,0xf
c00183dc:	01 d5                	add    ebp,edx
c00183de:	a8 02                	test   al,0x2
c00183e0:	75 15                	jne    c00183f7 <RTC::completeRTCRefresh()+0x271>
c00183e2:	f6 c3 80             	test   bl,0x80
c00183e5:	74 10                	je     c00183f7 <RTC::completeRTCRefresh()+0x271>
c00183e7:	83 e3 7f             	and    ebx,0x7f
c00183ea:	b9 18 00 00 00       	mov    ecx,0x18
c00183ef:	8d 43 0c             	lea    eax,[ebx+0xc]
c00183f2:	99                   	cdq    
c00183f3:	f7 f9                	idiv   ecx
c00183f5:	88 d3                	mov    bl,dl
c00183f7:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00183fd:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018403:	77 06                	ja     c001840b <RTC::completeRTCRefresh()+0x285>
c0018405:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001840b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018410:	31 c9                	xor    ecx,ecx
c0018412:	31 d2                	xor    edx,edx
c0018414:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018418:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001841c:	89 cd                	mov    ebp,ecx
c001841e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018422:	c1 e7 10             	shl    edi,0x10
c0018425:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001842b:	c1 e0 10             	shl    eax,0x10
c001842e:	09 c5                	or     ebp,eax
c0018430:	89 e9                	mov    ecx,ebp
c0018432:	0f b7 c2             	movzx  eax,dx
c0018435:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018439:	09 f8                	or     eax,edi
c001843b:	89 c2                	mov    edx,eax
c001843d:	50                   	push   eax
c001843e:	50                   	push   eax
c001843f:	88 d9                	mov    cl,bl
c0018441:	51                   	push   ecx
c0018442:	52                   	push   edx
c0018443:	e8 e3 3d ff ff       	call   c000c22b <datetimeToSeconds(datetime_t)>
c0018448:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001844c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018452:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018458:	83 c4 4c             	add    esp,0x4c
c001845b:	5b                   	pop    ebx
c001845c:	5e                   	pop    esi
c001845d:	5f                   	pop    edi
c001845e:	5d                   	pop    ebp
c001845f:	c3                   	ret    

c0018460 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018460:	55                   	push   ebp
c0018461:	57                   	push   edi
c0018462:	56                   	push   esi
c0018463:	53                   	push   ebx
c0018464:	83 ec 30             	sub    esp,0x30
c0018467:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001846b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001846f:	6a 00                	push   0x0
c0018471:	6a 00                	push   0x0
c0018473:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018479:	e8 34 ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001847e:	83 c4 0c             	add    esp,0xc
c0018481:	6a 00                	push   0x0
c0018483:	6a 02                	push   0x2
c0018485:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001848b:	e8 22 ee fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018490:	89 f8                	mov    eax,edi
c0018492:	89 f9                	mov    ecx,edi
c0018494:	0f b6 c4             	movzx  eax,ah
c0018497:	31 d2                	xor    edx,edx
c0018499:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001849d:	c1 e9 10             	shr    ecx,0x10
c00184a0:	89 f0                	mov    eax,esi
c00184a2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00184a6:	89 f0                	mov    eax,esi
c00184a8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00184ac:	0f b6 c4             	movzx  eax,ah
c00184af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184b3:	89 f0                	mov    eax,esi
c00184b5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00184b9:	c1 e8 10             	shr    eax,0x10
c00184bc:	b9 64 00 00 00       	mov    ecx,0x64
c00184c1:	f7 f1                	div    ecx
c00184c3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00184c7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00184cb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184cf:	59                   	pop    ecx
c00184d0:	5b                   	pop    ebx
c00184d1:	89 fb                	mov    ebx,edi
c00184d3:	6a 0b                	push   0xb
c00184d5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184db:	e8 ba ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	a8 04                	test   al,0x4
c00184e5:	89 c5                	mov    ebp,eax
c00184e7:	75 6e                	jne    c0018557 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00184e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184ed:	31 d2                	xor    edx,edx
c00184ef:	0f b6 c1             	movzx  eax,cl
c00184f2:	b9 0a 00 00 00       	mov    ecx,0xa
c00184f7:	f7 f1                	div    ecx
c00184f9:	c1 e0 04             	shl    eax,0x4
c00184fc:	09 d0                	or     eax,edx
c00184fe:	31 d2                	xor    edx,edx
c0018500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018504:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018509:	f7 f1                	div    ecx
c001850b:	c1 e0 04             	shl    eax,0x4
c001850e:	09 d0                	or     eax,edx
c0018510:	31 d2                	xor    edx,edx
c0018512:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018516:	0f b6 c3             	movzx  eax,bl
c0018519:	f7 f1                	div    ecx
c001851b:	c1 e0 04             	shl    eax,0x4
c001851e:	09 d0                	or     eax,edx
c0018520:	31 d2                	xor    edx,edx
c0018522:	89 c3                	mov    ebx,eax
c0018524:	89 f0                	mov    eax,esi
c0018526:	0f b6 c0             	movzx  eax,al
c0018529:	f7 f1                	div    ecx
c001852b:	c1 e0 04             	shl    eax,0x4
c001852e:	09 d0                	or     eax,edx
c0018530:	31 d2                	xor    edx,edx
c0018532:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018536:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001853b:	f7 f1                	div    ecx
c001853d:	c1 e0 04             	shl    eax,0x4
c0018540:	09 d0                	or     eax,edx
c0018542:	31 d2                	xor    edx,edx
c0018544:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018548:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001854c:	f7 f1                	div    ecx
c001854e:	c1 e0 04             	shl    eax,0x4
c0018551:	09 d0                	or     eax,edx
c0018553:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018557:	83 e5 02             	and    ebp,0x2
c001855a:	75 1e                	jne    c001857a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001855c:	0f b6 c3             	movzx  eax,bl
c001855f:	83 f8 0b             	cmp    eax,0xb
c0018562:	76 10                	jbe    c0018574 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018564:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018567:	84 d2                	test   dl,dl
c0018569:	88 d3                	mov    bl,dl
c001856b:	75 02                	jne    c001856f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c001856d:	b3 0c                	mov    bl,0xc
c001856f:	83 cb 80             	or     ebx,0xffffff80
c0018572:	eb 06                	jmp    c001857a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018574:	85 c0                	test   eax,eax
c0018576:	75 02                	jne    c001857a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018578:	b3 0c                	mov    bl,0xc
c001857a:	50                   	push   eax
c001857b:	0f b6 db             	movzx  ebx,bl
c001857e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018583:	52                   	push   edx
c0018584:	6a 00                	push   0x0
c0018586:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001858c:	e8 21 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018591:	83 c4 0c             	add    esp,0xc
c0018594:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018599:	50                   	push   eax
c001859a:	6a 02                	push   0x2
c001859c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185a2:	e8 0b ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185a7:	83 c4 0c             	add    esp,0xc
c00185aa:	53                   	push   ebx
c00185ab:	6a 04                	push   0x4
c00185ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185b3:	e8 fa ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185b8:	83 c4 0c             	add    esp,0xc
c00185bb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00185c0:	52                   	push   edx
c00185c1:	6a 07                	push   0x7
c00185c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185c9:	e8 e4 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185ce:	83 c4 0c             	add    esp,0xc
c00185d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00185d6:	50                   	push   eax
c00185d7:	6a 08                	push   0x8
c00185d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185df:	e8 ce ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185e4:	83 c4 0c             	add    esp,0xc
c00185e7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00185ec:	55                   	push   ebp
c00185ed:	6a 09                	push   0x9
c00185ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185f5:	e8 b8 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185fa:	5a                   	pop    edx
c00185fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185ff:	e8 82 fb ff ff       	call   c0018186 <RTC::completeRTCRefresh()>
c0018604:	83 c4 3c             	add    esp,0x3c
c0018607:	b0 01                	mov    al,0x1
c0018609:	5b                   	pop    ebx
c001860a:	5e                   	pop    esi
c001860b:	5f                   	pop    edi
c001860c:	5d                   	pop    ebp
c001860d:	c3                   	ret    

c001860e <rtcIRQHandler(regs*, void*)>:
c001860e:	53                   	push   ebx
c001860f:	83 ec 10             	sub    esp,0x10
c0018612:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018616:	6a 0c                	push   0xc
c0018618:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001861e:	e8 77 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018623:	83 c4 10             	add    esp,0x10
c0018626:	a8 80                	test   al,0x80
c0018628:	74 24                	je     c001864e <rtcIRQHandler(regs*, void*)+0x40>
c001862a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018631:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018638:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001863f:	75 0d                	jne    c001864e <rtcIRQHandler(regs*, void*)+0x40>
c0018641:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018645:	83 c4 08             	add    esp,0x8
c0018648:	5b                   	pop    ebx
c0018649:	e9 38 fb ff ff       	jmp    c0018186 <RTC::completeRTCRefresh()>
c001864e:	83 c4 08             	add    esp,0x8
c0018651:	5b                   	pop    ebx
c0018652:	c3                   	ret    
c0018653:	90                   	nop

c0018654 <RTC::RTC()>:
c0018654:	83 ec 1c             	sub    esp,0x1c
c0018657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001865b:	83 ec 08             	sub    esp,0x8
c001865e:	68 ef 26 02 c0       	push   0xc00226ef
c0018663:	50                   	push   eax
c0018664:	e8 9d 3a ff ff       	call   c000c106 <Clock::Clock(char const*)>
c0018669:	83 c4 10             	add    esp,0x10
c001866c:	ba 0c 27 02 c0       	mov    edx,0xc002270c
c0018671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018675:	89 10                	mov    DWORD PTR [eax],edx
c0018677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001867b:	83 ec 0c             	sub    esp,0xc
c001867e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018682:	6a 01                	push   0x1
c0018684:	68 0e 86 01 c0       	push   0xc001860e
c0018689:	6a 08                	push   0x8
c001868b:	50                   	push   eax
c001868c:	e8 57 3f ff ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018691:	83 c4 20             	add    esp,0x20
c0018694:	89 c2                	mov    edx,eax
c0018696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001869a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00186a0:	fa                   	cli    
c00186a1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186a6:	83 c0 01             	add    eax,0x1
c00186a9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00186ae:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186b3:	83 ec 08             	sub    esp,0x8
c00186b6:	6a 0b                	push   0xb
c00186b8:	50                   	push   eax
c00186b9:	e8 dc ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00186c5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186ca:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00186ce:	83 ca 10             	or     edx,0x10
c00186d1:	0f b6 d2             	movzx  edx,dl
c00186d4:	83 ec 04             	sub    esp,0x4
c00186d7:	52                   	push   edx
c00186d8:	6a 0b                	push   0xb
c00186da:	50                   	push   eax
c00186db:	e8 d2 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186e0:	83 c4 10             	add    esp,0x10
c00186e3:	83 ec 0c             	sub    esp,0xc
c00186e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186ea:	e8 97 fa ff ff       	call   c0018186 <RTC::completeRTCRefresh()>
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00186f7:	83 e8 01             	sub    eax,0x1
c00186fa:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00186ff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018704:	85 c0                	test   eax,eax
c0018706:	75 01                	jne    c0018709 <RTC::RTC()+0xb5>
c0018708:	fb                   	sti    
c0018709:	90                   	nop
c001870a:	83 c4 1c             	add    esp,0x1c
c001870d:	c3                   	ret    
c001870e:	66 90                	xchg   ax,ax

c0018710 <HalConsoleScroll(int, int)>:
c0018710:	83 ec 10             	sub    esp,0x10
c0018713:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001871b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018723:	90                   	nop
c0018724:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018729:	0f 8f e1 00 00 00    	jg     c0018810 <HalConsoleScroll(int, int)+0x100>
c001872f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018737:	90                   	nop
c0018738:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018740:	0f 8f be 00 00 00    	jg     c0018804 <HalConsoleScroll(int, int)+0xf4>
c0018746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001874a:	89 d0                	mov    eax,edx
c001874c:	c1 e0 02             	shl    eax,0x2
c001874f:	01 d0                	add    eax,edx
c0018751:	c1 e0 05             	shl    eax,0x5
c0018754:	89 c2                	mov    edx,eax
c0018756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001875a:	01 d0                	add    eax,edx
c001875c:	89 c2                	mov    edx,eax
c001875e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018762:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018765:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018769:	89 d0                	mov    eax,edx
c001876b:	c1 e0 02             	shl    eax,0x2
c001876e:	01 d0                	add    eax,edx
c0018770:	c1 e0 05             	shl    eax,0x5
c0018773:	89 c2                	mov    edx,eax
c0018775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018779:	01 d0                	add    eax,edx
c001877b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018785:	01 d0                	add    eax,edx
c0018787:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018789:	88 10                	mov    BYTE PTR [eax],dl
c001878b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018790:	75 66                	jne    c00187f8 <HalConsoleScroll(int, int)+0xe8>
c0018792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018796:	83 e0 01             	and    eax,0x1
c0018799:	74 39                	je     c00187d4 <HalConsoleScroll(int, int)+0xc4>
c001879b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001879f:	83 e0 0f             	and    eax,0xf
c00187a2:	88 c2                	mov    dl,al
c00187a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187a8:	c1 e0 04             	shl    eax,0x4
c00187ab:	09 d0                	or     eax,edx
c00187ad:	88 c1                	mov    cl,al
c00187af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187b3:	89 d0                	mov    eax,edx
c00187b5:	c1 e0 02             	shl    eax,0x2
c00187b8:	01 d0                	add    eax,edx
c00187ba:	c1 e0 05             	shl    eax,0x5
c00187bd:	89 c2                	mov    edx,eax
c00187bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187c3:	01 d0                	add    eax,edx
c00187c5:	89 c2                	mov    edx,eax
c00187c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187cb:	01 d0                	add    eax,edx
c00187cd:	88 ca                	mov    dl,cl
c00187cf:	88 10                	mov    BYTE PTR [eax],dl
c00187d1:	eb 25                	jmp    c00187f8 <HalConsoleScroll(int, int)+0xe8>
c00187d3:	90                   	nop
c00187d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187d8:	89 d0                	mov    eax,edx
c00187da:	c1 e0 02             	shl    eax,0x2
c00187dd:	01 d0                	add    eax,edx
c00187df:	c1 e0 05             	shl    eax,0x5
c00187e2:	89 c2                	mov    edx,eax
c00187e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e8:	01 d0                	add    eax,edx
c00187ea:	89 c2                	mov    edx,eax
c00187ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187f0:	01 d0                	add    eax,edx
c00187f2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00187fd:	e9 36 ff ff ff       	jmp    c0018738 <HalConsoleScroll(int, int)+0x28>
c0018802:	66 90                	xchg   ax,ax
c0018804:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018809:	e9 16 ff ff ff       	jmp    c0018724 <HalConsoleScroll(int, int)+0x14>
c001880e:	66 90                	xchg   ax,ax
c0018810:	90                   	nop
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	c3                   	ret    
c0018815:	8d 76 00             	lea    esi,[esi+0x0]

c0018818 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018818:	83 ec 14             	sub    esp,0x14
c001881b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001881f:	88 04 24             	mov    BYTE PTR [esp],al
c0018822:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018825:	0f b6 c0             	movzx  eax,al
c0018828:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001882c:	89 d1                	mov    ecx,edx
c001882e:	83 e1 0f             	and    ecx,0xf
c0018831:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018835:	c1 e2 04             	shl    edx,0x4
c0018838:	0f b6 d2             	movzx  edx,dl
c001883b:	09 ca                	or     edx,ecx
c001883d:	c1 e2 08             	shl    edx,0x8
c0018840:	09 d0                	or     eax,edx
c0018842:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018847:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001884f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018853:	89 d0                	mov    eax,edx
c0018855:	c1 e0 02             	shl    eax,0x2
c0018858:	01 d0                	add    eax,edx
c001885a:	c1 e0 04             	shl    eax,0x4
c001885d:	89 c2                	mov    edx,eax
c001885f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018863:	01 d0                	add    eax,edx
c0018865:	d1 e0                	shl    eax,1
c0018867:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001886b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001886f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018874:	66 89 10             	mov    WORD PTR [eax],dx
c0018877:	90                   	nop
c0018878:	83 c4 14             	add    esp,0x14
c001887b:	c3                   	ret    

c001887c <HalConsoleCursorUpdate(int, int)>:
c001887c:	83 ec 20             	sub    esp,0x20
c001887f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018883:	89 c2                	mov    edx,eax
c0018885:	c1 e2 02             	shl    edx,0x2
c0018888:	01 d0                	add    eax,edx
c001888a:	c1 e0 04             	shl    eax,0x4
c001888d:	89 c2                	mov    edx,eax
c001888f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018893:	01 d0                	add    eax,edx
c0018895:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001889a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00188a1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00188a6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188ae:	ee                   	out    dx,al
c00188af:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00188b4:	0f b6 c0             	movzx  eax,al
c00188b7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00188be:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00188c2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00188c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188ca:	ee                   	out    dx,al
c00188cb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00188d2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00188d7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00188db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188df:	ee                   	out    dx,al
c00188e0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00188e5:	c1 e8 08             	shr    eax,0x8
c00188e8:	0f b6 c0             	movzx  eax,al
c00188eb:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00188f2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00188f6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00188fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188fe:	ee                   	out    dx,al
c00188ff:	90                   	nop
c0018900:	83 c4 20             	add    esp,0x20
c0018903:	c3                   	ret    

c0018904 <FAT::getName()>:
c0018904:	b8 40 27 02 c0       	mov    eax,0xc0022740
c0018909:	c3                   	ret    
c001890a:	66 90                	xchg   ax,ax

c001890c <FAT::tell(void*, unsigned long long*)>:
c001890c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018911:	75 09                	jne    c001891c <FAT::tell(void*, unsigned long long*)+0x10>
c0018913:	b8 04 00 00 00       	mov    eax,0x4
c0018918:	c3                   	ret    
c0018919:	8d 76 00             	lea    esi,[esi+0x0]
c001891c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018921:	75 09                	jne    c001892c <FAT::tell(void*, unsigned long long*)+0x20>
c0018923:	b8 04 00 00 00       	mov    eax,0x4
c0018928:	c3                   	ret    
c0018929:	8d 76 00             	lea    esi,[esi+0x0]
c001892c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018930:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018933:	ba 00 00 00 00       	mov    edx,0x0
c0018938:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001893c:	89 01                	mov    DWORD PTR [ecx],eax
c001893e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018941:	b8 00 00 00 00       	mov    eax,0x0
c0018946:	c3                   	ret    
c0018947:	90                   	nop

c0018948 <FAT::stat(void*, unsigned long long*)>:
c0018948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001894d:	75 09                	jne    c0018958 <FAT::stat(void*, unsigned long long*)+0x10>
c001894f:	b8 04 00 00 00       	mov    eax,0x4
c0018954:	c3                   	ret    
c0018955:	8d 76 00             	lea    esi,[esi+0x0]
c0018958:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001895d:	75 09                	jne    c0018968 <FAT::stat(void*, unsigned long long*)+0x20>
c001895f:	b8 04 00 00 00       	mov    eax,0x4
c0018964:	c3                   	ret    
c0018965:	8d 76 00             	lea    esi,[esi+0x0]
c0018968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001896c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001896f:	ba 00 00 00 00       	mov    edx,0x0
c0018974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018978:	89 01                	mov    DWORD PTR [ecx],eax
c001897a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001897d:	b8 00 00 00 00       	mov    eax,0x0
c0018982:	c3                   	ret    
c0018983:	90                   	nop

c0018984 <FAT::~FAT()>:
c0018984:	83 ec 0c             	sub    esp,0xc
c0018987:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c001898c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018990:	89 10                	mov    DWORD PTR [eax],edx
c0018992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018996:	83 ec 0c             	sub    esp,0xc
c0018999:	50                   	push   eax
c001899a:	e8 2d 2b ff ff       	call   c000b4cc <Filesystem::~Filesystem()>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	90                   	nop
c00189a3:	83 c4 0c             	add    esp,0xc
c00189a6:	c3                   	ret    
c00189a7:	90                   	nop

c00189a8 <FAT::~FAT()>:
c00189a8:	83 ec 0c             	sub    esp,0xc
c00189ab:	83 ec 0c             	sub    esp,0xc
c00189ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189b2:	e8 cd ff ff ff       	call   c0018984 <FAT::~FAT()>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	83 ec 08             	sub    esp,0x8
c00189bd:	6a 08                	push   0x8
c00189bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189c3:	e8 44 1e ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00189c8:	83 c4 10             	add    esp,0x10
c00189cb:	83 c4 0c             	add    esp,0xc
c00189ce:	c3                   	ret    
c00189cf:	90                   	nop

c00189d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00189d0:	83 ec 1c             	sub    esp,0x1c
c00189d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00189da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00189df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189e3:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00189ea:	83 f8 ff             	cmp    eax,0xffffffff
c00189ed:	75 35                	jne    c0018a24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00189ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189f3:	88 c2                	mov    dl,al
c00189f5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00189fa:	01 d0                	add    eax,edx
c00189fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a00:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018a06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a0a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018a11:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a1a:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018a21:	eb 19                	jmp    c0018a3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a23:	90                   	nop
c0018a24:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a28:	88 c2                	mov    dl,al
c0018a2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a2e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a35:	01 d0                	add    eax,edx
c0018a37:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a3b:	90                   	nop
c0018a3c:	83 ec 04             	sub    esp,0x4
c0018a3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a47:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a4b:	50                   	push   eax
c0018a4c:	e8 a2 c5 fe ff       	call   c0004ff3 <f_getlabel>
c0018a51:	83 c4 10             	add    esp,0x10
c0018a54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a5d:	75 09                	jne    c0018a68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018a5f:	b8 00 00 00 00       	mov    eax,0x0
c0018a64:	eb 0a                	jmp    c0018a70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018a66:	66 90                	xchg   ax,ax
c0018a68:	b8 01 00 00 00       	mov    eax,0x1
c0018a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a70:	83 c4 1c             	add    esp,0x1c
c0018a73:	c3                   	ret    

c0018a74 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a74:	53                   	push   ebx
c0018a75:	83 ec 58             	sub    esp,0x58
c0018a78:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a80:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a84:	b9 00 00 00 00       	mov    ecx,0x0
c0018a89:	b8 3c 00 00 00       	mov    eax,0x3c
c0018a8e:	83 e0 f8             	and    eax,0xfffffff8
c0018a91:	89 c3                	mov    ebx,eax
c0018a93:	b8 00 00 00 00       	mov    eax,0x0
c0018a98:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018a9c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018aa0:	83 c0 08             	add    eax,0x8
c0018aa3:	39 d8                	cmp    eax,ebx
c0018aa5:	72 f1                	jb     c0018a98 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018aa7:	01 c2                	add    edx,eax
c0018aa9:	89 0a                	mov    DWORD PTR [edx],ecx
c0018aab:	83 c2 04             	add    edx,0x4
c0018aae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ab2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ab9:	83 f8 ff             	cmp    eax,0xffffffff
c0018abc:	75 36                	jne    c0018af4 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018abe:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ac2:	88 c2                	mov    dl,al
c0018ac4:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ac9:	01 d0                	add    eax,edx
c0018acb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018acf:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ad5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ad9:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ae0:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ae5:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ae9:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018af0:	eb 1a                	jmp    c0018b0c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018af2:	66 90                	xchg   ax,ax
c0018af4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018af8:	88 c2                	mov    dl,al
c0018afa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018afe:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b05:	01 d0                	add    eax,edx
c0018b07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b0b:	90                   	nop
c0018b0c:	83 ec 08             	sub    esp,0x8
c0018b0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018b13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b17:	50                   	push   eax
c0018b18:	e8 53 7d fe ff       	call   c0000870 <strcat>
c0018b1d:	83 c4 10             	add    esp,0x10
c0018b20:	83 ec 0c             	sub    esp,0xc
c0018b23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b27:	50                   	push   eax
c0018b28:	e8 1a c6 fe ff       	call   c0005147 <f_setlabel>
c0018b2d:	83 c4 10             	add    esp,0x10
c0018b30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b39:	75 09                	jne    c0018b44 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018b3b:	b8 00 00 00 00       	mov    eax,0x0
c0018b40:	eb 0a                	jmp    c0018b4c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018b42:	66 90                	xchg   ax,ax
c0018b44:	b8 01 00 00 00       	mov    eax,0x1
c0018b49:	8d 76 00             	lea    esi,[esi+0x0]
c0018b4c:	83 c4 58             	add    esp,0x58
c0018b4f:	5b                   	pop    ebx
c0018b50:	c3                   	ret    
c0018b51:	90                   	nop
c0018b52:	66 90                	xchg   ax,ax

c0018b54 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b54:	83 ec 2c             	sub    esp,0x2c
c0018b57:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b5f:	83 ec 08             	sub    esp,0x8
c0018b62:	68 64 27 02 c0       	push   0xc0022764
c0018b67:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b6b:	e8 10 7c fe ff       	call   c0000780 <strcmp>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	85 c0                	test   eax,eax
c0018b75:	0f 94 c0             	sete   al
c0018b78:	0f b6 c0             	movzx  eax,al
c0018b7b:	85 c0                	test   eax,eax
c0018b7d:	74 0d                	je     c0018b8c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b7f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b87:	e9 c0 00 00 00       	jmp    c0018c4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b8c:	83 ec 08             	sub    esp,0x8
c0018b8f:	68 56 27 02 c0       	push   0xc0022756
c0018b94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b98:	e8 e3 7b fe ff       	call   c0000780 <strcmp>
c0018b9d:	83 c4 10             	add    esp,0x10
c0018ba0:	85 c0                	test   eax,eax
c0018ba2:	0f 94 c0             	sete   al
c0018ba5:	0f b6 c0             	movzx  eax,al
c0018ba8:	85 c0                	test   eax,eax
c0018baa:	74 10                	je     c0018bbc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018bac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bb4:	e9 93 00 00 00       	jmp    c0018c4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bbc:	83 ec 08             	sub    esp,0x8
c0018bbf:	68 5c 27 02 c0       	push   0xc002275c
c0018bc4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bc8:	e8 b3 7b fe ff       	call   c0000780 <strcmp>
c0018bcd:	83 c4 10             	add    esp,0x10
c0018bd0:	85 c0                	test   eax,eax
c0018bd2:	0f 94 c0             	sete   al
c0018bd5:	0f b6 c0             	movzx  eax,al
c0018bd8:	85 c0                	test   eax,eax
c0018bda:	74 0c                	je     c0018be8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018bdc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018be4:	eb 66                	jmp    c0018c4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018be6:	66 90                	xchg   ax,ax
c0018be8:	83 ec 08             	sub    esp,0x8
c0018beb:	68 9c ff 01 c0       	push   0xc001ff9c
c0018bf0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bf4:	e8 87 7b fe ff       	call   c0000780 <strcmp>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	85 c0                	test   eax,eax
c0018bfe:	0f 94 c0             	sete   al
c0018c01:	0f b6 c0             	movzx  eax,al
c0018c04:	85 c0                	test   eax,eax
c0018c06:	74 0c                	je     c0018c14 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018c08:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018c10:	eb 3a                	jmp    c0018c4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c12:	66 90                	xchg   ax,ax
c0018c14:	83 ec 08             	sub    esp,0x8
c0018c17:	68 62 27 02 c0       	push   0xc0022762
c0018c1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c20:	e8 5b 7b fe ff       	call   c0000780 <strcmp>
c0018c25:	83 c4 10             	add    esp,0x10
c0018c28:	85 c0                	test   eax,eax
c0018c2a:	0f 94 c0             	sete   al
c0018c2d:	0f b6 c0             	movzx  eax,al
c0018c30:	85 c0                	test   eax,eax
c0018c32:	74 0c                	je     c0018c40 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c34:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c3c:	eb 0e                	jmp    c0018c4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c3e:	66 90                	xchg   ax,ax
c0018c40:	b8 08 00 00 00       	mov    eax,0x8
c0018c45:	e9 ea 00 00 00       	jmp    c0018d34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c4a:	66 90                	xchg   ax,ax
c0018c4c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c53:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c5c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c63:	83 f8 ff             	cmp    eax,0xffffffff
c0018c66:	75 34                	jne    c0018c9c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c68:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c6c:	88 c2                	mov    dl,al
c0018c6e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c73:	01 d0                	add    eax,edx
c0018c75:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c79:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c83:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c8a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c93:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c9a:	eb 18                	jmp    c0018cb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c9c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018ca0:	88 c2                	mov    dl,al
c0018ca2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ca6:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cad:	01 d0                	add    eax,edx
c0018caf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018cb3:	90                   	nop
c0018cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cb8:	88 04 24             	mov    BYTE PTR [esp],al
c0018cbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018ccb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018cd0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cd8:	83 ec 0c             	sub    esp,0xc
c0018cdb:	68 00 20 00 00       	push   0x2000
c0018ce0:	e8 ee ed fe ff       	call   c0007ad3 <malloc>
c0018ce5:	83 c4 10             	add    esp,0x10
c0018ce8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cec:	68 00 20 00 00       	push   0x2000
c0018cf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cf5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018cf9:	50                   	push   eax
c0018cfa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018cfe:	50                   	push   eax
c0018cff:	e8 40 c7 fe ff       	call   c0005444 <f_mkfs>
c0018d04:	83 c4 10             	add    esp,0x10
c0018d07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018d0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d10:	75 0a                	jne    c0018d1c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018d12:	b8 00 00 00 00       	mov    eax,0x0
c0018d17:	eb 1b                	jmp    c0018d34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d19:	8d 76 00             	lea    esi,[esi+0x0]
c0018d1c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d21:	75 09                	jne    c0018d2c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d23:	b8 09 00 00 00       	mov    eax,0x9
c0018d28:	eb 0a                	jmp    c0018d34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d2a:	66 90                	xchg   ax,ax
c0018d2c:	b8 01 00 00 00       	mov    eax,0x1
c0018d31:	8d 76 00             	lea    esi,[esi+0x0]
c0018d34:	83 c4 2c             	add    esp,0x2c
c0018d37:	c3                   	ret    

c0018d38 <FAT::tryMount(LogicalDisk*, int)>:
c0018d38:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d3e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d43:	83 f8 14             	cmp    eax,0x14
c0018d46:	75 18                	jne    c0018d60 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 68 27 02 c0       	push   0xc0022768
c0018d50:	e8 84 84 ff ff       	call   c00111d9 <KePanic(char const*)>
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	b0 00                	mov    al,0x0
c0018d5a:	e9 ed 01 00 00       	jmp    c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d5f:	90                   	nop
c0018d60:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d6d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d73:	3d 00 02 00 00       	cmp    eax,0x200
c0018d78:	74 0a                	je     c0018d84 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d7a:	b0 00                	mov    al,0x0
c0018d7c:	e9 cb 01 00 00       	jmp    c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d81:	8d 76 00             	lea    esi,[esi+0x0]
c0018d84:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d8c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d93:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d9a:	83 f8 ff             	cmp    eax,0xffffffff
c0018d9d:	74 09                	je     c0018da8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d9f:	b0 01                	mov    al,0x1
c0018da1:	e9 a6 01 00 00       	jmp    c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018da6:	66 90                	xchg   ax,ax
c0018da8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018db2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018dba:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018dc1:	88 c2                	mov    dl,al
c0018dc3:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018dc8:	01 d0                	add    eax,edx
c0018dca:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018dd1:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018dd7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018dde:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018de5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018dea:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018df1:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	68 34 02 00 00       	push   0x234
c0018e00:	e8 ce ec fe ff       	call   c0007ad3 <malloc>
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018e0f:	83 ec 04             	sub    esp,0x4
c0018e12:	6a 00                	push   0x0
c0018e14:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e1b:	50                   	push   eax
c0018e1c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e23:	e8 16 ae fe ff       	call   c0003c3e <f_mount>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e32:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e3a:	74 1c                	je     c0018e58 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e3c:	83 ec 0c             	sub    esp,0xc
c0018e3f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e46:	e8 a8 ec fe ff       	call   c0007af3 <rfree>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	b0 00                	mov    al,0x0
c0018e50:	e9 f7 00 00 00       	jmp    c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]
c0018e58:	83 ec 04             	sub    esp,0x4
c0018e5b:	68 00 01 00 00       	push   0x100
c0018e60:	6a 00                	push   0x0
c0018e62:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e69:	50                   	push   eax
c0018e6a:	e8 81 76 fe ff       	call   c00004f0 <memset>
c0018e6f:	83 c4 10             	add    esp,0x10
c0018e72:	83 ec 08             	sub    esp,0x8
c0018e75:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e7c:	50                   	push   eax
c0018e7d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e84:	50                   	push   eax
c0018e85:	e8 e6 79 fe ff       	call   c0000870 <strcat>
c0018e8a:	83 c4 10             	add    esp,0x10
c0018e8d:	83 ec 08             	sub    esp,0x8
c0018e90:	68 76 27 02 c0       	push   0xc0022776
c0018e95:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e9c:	50                   	push   eax
c0018e9d:	e8 ce 79 fe ff       	call   c0000870 <strcat>
c0018ea2:	83 c4 10             	add    esp,0x10
c0018ea5:	83 ec 04             	sub    esp,0x4
c0018ea8:	6a 01                	push   0x1
c0018eaa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018eb1:	50                   	push   eax
c0018eb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018eb6:	50                   	push   eax
c0018eb7:	e8 e4 ad fe ff       	call   c0003ca0 <f_open>
c0018ebc:	83 c4 10             	add    esp,0x10
c0018ebf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018ec6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018ecd:	85 c0                	test   eax,eax
c0018ecf:	74 0b                	je     c0018edc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ed1:	78 31                	js     c0018f04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ed3:	83 e8 04             	sub    eax,0x4
c0018ed6:	83 f8 01             	cmp    eax,0x1
c0018ed9:	77 29                	ja     c0018f04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018edb:	90                   	nop
c0018edc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018ee4:	83 ec 0c             	sub    esp,0xc
c0018ee7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018eeb:	50                   	push   eax
c0018eec:	e8 5f b5 fe ff       	call   c0004450 <f_close>
c0018ef1:	83 c4 10             	add    esp,0x10
c0018ef4:	90                   	nop
c0018ef5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018efd:	85 c0                	test   eax,eax
c0018eff:	74 43                	je     c0018f44 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018f01:	eb 31                	jmp    c0018f34 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018f03:	90                   	nop
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f0e:	e8 e0 eb fe ff       	call   c0007af3 <rfree>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	83 ec 04             	sub    esp,0x4
c0018f19:	6a 00                	push   0x0
c0018f1b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f22:	50                   	push   eax
c0018f23:	6a 00                	push   0x0
c0018f25:	e8 14 ad fe ff       	call   c0003c3e <f_mount>
c0018f2a:	83 c4 10             	add    esp,0x10
c0018f2d:	b0 00                	mov    al,0x0
c0018f2f:	eb 1b                	jmp    c0018f4c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f31:	8d 76 00             	lea    esi,[esi+0x0]
c0018f34:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f39:	83 c0 01             	add    eax,0x1
c0018f3c:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018f41:	8d 76 00             	lea    esi,[esi+0x0]
c0018f44:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f4b:	90                   	nop
c0018f4c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f52:	c3                   	ret    
c0018f53:	90                   	nop

c0018f54 <FAT::allocateSwapfile(char const*, int)>:
c0018f54:	55                   	push   ebp
c0018f55:	57                   	push   edi
c0018f56:	56                   	push   esi
c0018f57:	53                   	push   ebx
c0018f58:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f5e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f69:	83 ec 0c             	sub    esp,0xc
c0018f6c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f73:	e8 5b eb fe ff       	call   c0007ad3 <malloc>
c0018f78:	83 c4 10             	add    esp,0x10
c0018f7b:	89 c7                	mov    edi,eax
c0018f7d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018f82:	83 ec 04             	sub    esp,0x4
c0018f85:	50                   	push   eax
c0018f86:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f8d:	57                   	push   edi
c0018f8e:	e8 9b 27 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f9d:	83 ec 04             	sub    esp,0x4
c0018fa0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018fa4:	50                   	push   eax
c0018fa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fa9:	50                   	push   eax
c0018faa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fb1:	e8 36 2b ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018fc0:	c1 e0 14             	shl    eax,0x14
c0018fc3:	89 c7                	mov    edi,eax
c0018fc5:	89 c5                	mov    ebp,eax
c0018fc7:	c1 fd 1f             	sar    ebp,0x1f
c0018fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fd2:	89 f9                	mov    ecx,edi
c0018fd4:	31 c1                	xor    ecx,eax
c0018fd6:	89 cb                	mov    ebx,ecx
c0018fd8:	89 e9                	mov    ecx,ebp
c0018fda:	31 d1                	xor    ecx,edx
c0018fdc:	89 ce                	mov    esi,ecx
c0018fde:	89 f0                	mov    eax,esi
c0018fe0:	09 d8                	or     eax,ebx
c0018fe2:	0f 84 9c 00 00 00    	je     c0019084 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018fe8:	83 ec 0c             	sub    esp,0xc
c0018feb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018ff2:	e8 c1 29 ff ff       	call   c000b9b8 <File::unlink()>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	83 ec 08             	sub    esp,0x8
c0018ffd:	6a 12                	push   0x12
c0018fff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019006:	e8 df 27 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019015:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001901b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019022:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019029:	c1 e0 14             	shl    eax,0x14
c001902c:	83 ec 04             	sub    esp,0x4
c001902f:	6a 01                	push   0x1
c0019031:	50                   	push   eax
c0019032:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019039:	e8 99 c2 fe ff       	call   c00052d7 <f_expand>
c001903e:	83 c4 10             	add    esp,0x10
c0019041:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019048:	8b 00                	mov    eax,DWORD PTR [eax]
c001904a:	83 c0 10             	add    eax,0x10
c001904d:	8b 00                	mov    eax,DWORD PTR [eax]
c001904f:	83 ec 0c             	sub    esp,0xc
c0019052:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019056:	52                   	push   edx
c0019057:	8d 54 24 30          	lea    edx,[esp+0x30]
c001905b:	52                   	push   edx
c001905c:	6a 00                	push   0x0
c001905e:	68 00 04 00 00       	push   0x400
c0019063:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001906a:	ff d0                	call   eax
c001906c:	83 c4 20             	add    esp,0x20
c001906f:	83 ec 0c             	sub    esp,0xc
c0019072:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019079:	e8 ca 27 ff ff       	call   c000b848 <File::close()>
c001907e:	83 c4 10             	add    esp,0x10
c0019081:	8d 76 00             	lea    esi,[esi+0x0]
c0019084:	83 ec 08             	sub    esp,0x8
c0019087:	6a 01                	push   0x1
c0019089:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019090:	e8 55 27 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001909f:	8b 00                	mov    eax,DWORD PTR [eax]
c00190a1:	83 c0 0c             	add    eax,0xc
c00190a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00190a6:	83 ec 0c             	sub    esp,0xc
c00190a9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00190ad:	52                   	push   edx
c00190ae:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00190b2:	52                   	push   edx
c00190b3:	6a 00                	push   0x0
c00190b5:	6a 04                	push   0x4
c00190b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190be:	ff d0                	call   eax
c00190c0:	83 c4 20             	add    esp,0x20
c00190c3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190d0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00190de:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00190e1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00190e8:	83 ec 0c             	sub    esp,0xc
c00190eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190f2:	e8 51 27 ff ff       	call   c000b848 <File::close()>
c00190f7:	83 c4 10             	add    esp,0x10
c00190fa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019101:	ba 00 00 00 00       	mov    edx,0x0
c0019106:	81 c4 3c 04 00 00    	add    esp,0x43c
c001910c:	5b                   	pop    ebx
c001910d:	5e                   	pop    esi
c001910e:	5f                   	pop    edi
c001910f:	5d                   	pop    ebp
c0019110:	c3                   	ret    
c0019111:	90                   	nop
c0019112:	66 90                	xchg   ax,ax

c0019114 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019114:	57                   	push   edi
c0019115:	56                   	push   esi
c0019116:	53                   	push   ebx
c0019117:	81 ec 50 02 00 00    	sub    esp,0x250
c001911d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019125:	74 0d                	je     c0019134 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019127:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001912f:	75 0f                	jne    c0019140 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019131:	8d 76 00             	lea    esi,[esi+0x0]
c0019134:	b8 04 00 00 00       	mov    eax,0x4
c0019139:	e9 3a 01 00 00       	jmp    c0019278 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001913e:	66 90                	xchg   ax,ax
c0019140:	83 ec 08             	sub    esp,0x8
c0019143:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001914a:	50                   	push   eax
c001914b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019152:	e8 c5 b5 fe ff       	call   c000471c <f_readdir>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019161:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019172:	83 c0 16             	add    eax,0x16
c0019175:	50                   	push   eax
c0019176:	e8 05 74 fe ff       	call   c0000580 <strlen>
c001917b:	83 c4 10             	add    esp,0x10
c001917e:	ba 00 00 00 00       	mov    edx,0x0
c0019183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019187:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001918b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019192:	0f b6 c0             	movzx  eax,al
c0019195:	83 e0 10             	and    eax,0x10
c0019198:	74 0a                	je     c00191a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001919a:	b8 02 00 00 00       	mov    eax,0x2
c001919f:	eb 0b                	jmp    c00191ac <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00191a1:	8d 76 00             	lea    esi,[esi+0x0]
c00191a4:	b8 01 00 00 00       	mov    eax,0x1
c00191a9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191ba:	83 c0 16             	add    eax,0x16
c00191bd:	50                   	push   eax
c00191be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191c2:	83 c0 10             	add    eax,0x10
c00191c5:	50                   	push   eax
c00191c6:	e8 85 74 fe ff       	call   c0000650 <strcpy>
c00191cb:	83 c4 10             	add    esp,0x10
c00191ce:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00191d5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00191dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191e0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00191e7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00191ee:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00191f5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00191fc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019203:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001920a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019211:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019218:	89 c6                	mov    esi,eax
c001921a:	89 d7                	mov    edi,edx
c001921c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001921e:	89 c8                	mov    eax,ecx
c0019220:	89 fa                	mov    edx,edi
c0019222:	89 f3                	mov    ebx,esi
c0019224:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001922b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019232:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019239:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019240:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019246:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001924d:	0f be c0             	movsx  eax,al
c0019250:	85 c0                	test   eax,eax
c0019252:	75 08                	jne    c001925c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019254:	b8 07 00 00 00       	mov    eax,0x7
c0019259:	eb 1d                	jmp    c0019278 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001925b:	90                   	nop
c001925c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019263:	85 c0                	test   eax,eax
c0019265:	75 09                	jne    c0019270 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019267:	b8 00 00 00 00       	mov    eax,0x0
c001926c:	eb 0a                	jmp    c0019278 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001926e:	66 90                	xchg   ax,ax
c0019270:	b8 01 00 00 00       	mov    eax,0x1
c0019275:	8d 76 00             	lea    esi,[esi+0x0]
c0019278:	81 c4 50 02 00 00    	add    esp,0x250
c001927e:	5b                   	pop    ebx
c001927f:	5e                   	pop    esi
c0019280:	5f                   	pop    edi
c0019281:	c3                   	ret    
c0019282:	66 90                	xchg   ax,ax

c0019284 <FAT::read(void*, unsigned long, void*, int*)>:
c0019284:	83 ec 1c             	sub    esp,0x1c
c0019287:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001928c:	74 0a                	je     c0019298 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001928e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019293:	75 0b                	jne    c00192a0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019295:	8d 76 00             	lea    esi,[esi+0x0]
c0019298:	b8 04 00 00 00       	mov    eax,0x4
c001929d:	eb 41                	jmp    c00192e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001929f:	90                   	nop
c00192a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192a4:	50                   	push   eax
c00192a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192b1:	e8 ad ac fe ff       	call   c0003f63 <f_read>
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192c1:	89 c2                	mov    edx,eax
c00192c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192c7:	89 10                	mov    DWORD PTR [eax],edx
c00192c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192cd:	85 c0                	test   eax,eax
c00192cf:	75 07                	jne    c00192d8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00192d1:	b8 00 00 00 00       	mov    eax,0x0
c00192d6:	eb 08                	jmp    c00192e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192d8:	b8 01 00 00 00       	mov    eax,0x1
c00192dd:	8d 76 00             	lea    esi,[esi+0x0]
c00192e0:	83 c4 1c             	add    esp,0x1c
c00192e3:	c3                   	ret    

c00192e4 <FAT::write(void*, unsigned long, void*, int*)>:
c00192e4:	83 ec 1c             	sub    esp,0x1c
c00192e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192ec:	74 0a                	je     c00192f8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00192ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192f3:	75 0b                	jne    c0019300 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00192f5:	8d 76 00             	lea    esi,[esi+0x0]
c00192f8:	b8 04 00 00 00       	mov    eax,0x4
c00192fd:	eb 41                	jmp    c0019340 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192ff:	90                   	nop
c0019300:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019304:	50                   	push   eax
c0019305:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019309:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001930d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019311:	e8 2e ae fe ff       	call   c0004144 <f_write>
c0019316:	83 c4 10             	add    esp,0x10
c0019319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001931d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019321:	89 c2                	mov    edx,eax
c0019323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019327:	89 10                	mov    DWORD PTR [eax],edx
c0019329:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001932d:	85 c0                	test   eax,eax
c001932f:	75 07                	jne    c0019338 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019331:	b8 00 00 00 00       	mov    eax,0x0
c0019336:	eb 08                	jmp    c0019340 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019338:	b8 01 00 00 00       	mov    eax,0x1
c001933d:	8d 76 00             	lea    esi,[esi+0x0]
c0019340:	83 c4 1c             	add    esp,0x1c
c0019343:	c3                   	ret    

c0019344 <FAT::close(void*)>:
c0019344:	83 ec 1c             	sub    esp,0x1c
c0019347:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001934c:	75 0a                	jne    c0019358 <FAT::close(void*)+0x14>
c001934e:	b8 04 00 00 00       	mov    eax,0x4
c0019353:	eb 3f                	jmp    c0019394 <FAT::close(void*)+0x50>
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001935f:	e8 ec b0 fe ff       	call   c0004450 <f_close>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001936b:	83 ec 0c             	sub    esp,0xc
c001936e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019372:	e8 6c e7 fe ff       	call   c0007ae3 <free>
c0019377:	83 c4 10             	add    esp,0x10
c001937a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001937e:	85 c0                	test   eax,eax
c0019380:	75 0a                	jne    c001938c <FAT::close(void*)+0x48>
c0019382:	b8 00 00 00 00       	mov    eax,0x0
c0019387:	eb 0b                	jmp    c0019394 <FAT::close(void*)+0x50>
c0019389:	8d 76 00             	lea    esi,[esi+0x0]
c001938c:	b8 01 00 00 00       	mov    eax,0x1
c0019391:	8d 76 00             	lea    esi,[esi+0x0]
c0019394:	83 c4 1c             	add    esp,0x1c
c0019397:	c3                   	ret    

c0019398 <FAT::closeDir(void*)>:
c0019398:	83 ec 1c             	sub    esp,0x1c
c001939b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193a0:	75 0a                	jne    c00193ac <FAT::closeDir(void*)+0x14>
c00193a2:	b8 04 00 00 00       	mov    eax,0x4
c00193a7:	eb 3f                	jmp    c00193e8 <FAT::closeDir(void*)+0x50>
c00193a9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193b3:	e8 42 b3 fe ff       	call   c00046fa <f_closedir>
c00193b8:	83 c4 10             	add    esp,0x10
c00193bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193bf:	83 ec 0c             	sub    esp,0xc
c00193c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193c6:	e8 18 e7 fe ff       	call   c0007ae3 <free>
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193d2:	85 c0                	test   eax,eax
c00193d4:	75 0a                	jne    c00193e0 <FAT::closeDir(void*)+0x48>
c00193d6:	b8 00 00 00 00       	mov    eax,0x0
c00193db:	eb 0b                	jmp    c00193e8 <FAT::closeDir(void*)+0x50>
c00193dd:	8d 76 00             	lea    esi,[esi+0x0]
c00193e0:	b8 01 00 00 00       	mov    eax,0x1
c00193e5:	8d 76 00             	lea    esi,[esi+0x0]
c00193e8:	83 c4 1c             	add    esp,0x1c
c00193eb:	c3                   	ret    

c00193ec <FAT::truncate(void*, unsigned long long)>:
c00193ec:	83 ec 2c             	sub    esp,0x2c
c00193ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019404:	75 0a                	jne    c0019410 <FAT::truncate(void*, unsigned long long)+0x24>
c0019406:	b8 04 00 00 00       	mov    eax,0x4
c001940b:	eb 47                	jmp    c0019454 <FAT::truncate(void*, unsigned long long)+0x68>
c001940d:	8d 76 00             	lea    esi,[esi+0x0]
c0019410:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019414:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001941b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019427:	83 ec 08             	sub    esp,0x8
c001942a:	50                   	push   eax
c001942b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001942f:	e8 4b b0 fe ff       	call   c000447f <f_lseek>
c0019434:	83 c4 10             	add    esp,0x10
c0019437:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001943b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001943f:	85 c0                	test   eax,eax
c0019441:	75 09                	jne    c001944c <FAT::truncate(void*, unsigned long long)+0x60>
c0019443:	b8 00 00 00 00       	mov    eax,0x0
c0019448:	eb 0a                	jmp    c0019454 <FAT::truncate(void*, unsigned long long)+0x68>
c001944a:	66 90                	xchg   ax,ax
c001944c:	b8 01 00 00 00       	mov    eax,0x1
c0019451:	8d 76 00             	lea    esi,[esi+0x0]
c0019454:	83 c4 2c             	add    esp,0x2c
c0019457:	c3                   	ret    

c0019458 <FAT::seek(void*, unsigned long long)>:
c0019458:	83 ec 2c             	sub    esp,0x2c
c001945b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001945f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019463:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001946b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019470:	75 0a                	jne    c001947c <FAT::seek(void*, unsigned long long)+0x24>
c0019472:	b8 04 00 00 00       	mov    eax,0x4
c0019477:	eb 33                	jmp    c00194ac <FAT::seek(void*, unsigned long long)+0x54>
c0019479:	8d 76 00             	lea    esi,[esi+0x0]
c001947c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019480:	83 ec 08             	sub    esp,0x8
c0019483:	50                   	push   eax
c0019484:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019488:	e8 f2 af fe ff       	call   c000447f <f_lseek>
c001948d:	83 c4 10             	add    esp,0x10
c0019490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019498:	85 c0                	test   eax,eax
c001949a:	75 08                	jne    c00194a4 <FAT::seek(void*, unsigned long long)+0x4c>
c001949c:	b8 00 00 00 00       	mov    eax,0x0
c00194a1:	eb 09                	jmp    c00194ac <FAT::seek(void*, unsigned long long)+0x54>
c00194a3:	90                   	nop
c00194a4:	b8 01 00 00 00       	mov    eax,0x1
c00194a9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ac:	83 c4 2c             	add    esp,0x2c
c00194af:	c3                   	ret    

c00194b0 <fatWrapperReadDisk>:
c00194b0:	53                   	push   ebx
c00194b1:	83 ec 18             	sub    esp,0x18
c00194b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194c1:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00194c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194d0:	ba 00 00 00 00       	mov    edx,0x0
c00194d5:	83 ec 0c             	sub    esp,0xc
c00194d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194dc:	53                   	push   ebx
c00194dd:	52                   	push   edx
c00194de:	50                   	push   eax
c00194df:	51                   	push   ecx
c00194e0:	e8 41 45 ff ff       	call   c000da26 <LogicalDisk::read(unsigned long long, int, void*)>
c00194e5:	83 c4 20             	add    esp,0x20
c00194e8:	83 c4 18             	add    esp,0x18
c00194eb:	5b                   	pop    ebx
c00194ec:	c3                   	ret    
c00194ed:	8d 76 00             	lea    esi,[esi+0x0]

c00194f0 <fatWrapperWriteDisk>:
c00194f0:	53                   	push   ebx
c00194f1:	83 ec 18             	sub    esp,0x18
c00194f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019501:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019508:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001950c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019510:	ba 00 00 00 00       	mov    edx,0x0
c0019515:	83 ec 0c             	sub    esp,0xc
c0019518:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001951c:	53                   	push   ebx
c001951d:	52                   	push   edx
c001951e:	50                   	push   eax
c001951f:	51                   	push   ecx
c0019520:	e8 6d 45 ff ff       	call   c000da92 <LogicalDisk::write(unsigned long long, int, void*)>
c0019525:	83 c4 20             	add    esp,0x20
c0019528:	83 c4 18             	add    esp,0x18
c001952b:	5b                   	pop    ebx
c001952c:	c3                   	ret    
c001952d:	8d 76 00             	lea    esi,[esi+0x0]

c0019530 <fatWrapperIoctl>:
c0019530:	53                   	push   ebx
c0019531:	83 ec 28             	sub    esp,0x28
c0019534:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019538:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001953c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019540:	88 d0                	mov    al,dl
c0019542:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019546:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001954b:	83 f8 02             	cmp    eax,0x2
c001954e:	75 34                	jne    c0019584 <fatWrapperIoctl+0x54>
c0019550:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019554:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019558:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001955d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019564:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001956a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019570:	89 c2                	mov    edx,eax
c0019572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019576:	66 89 10             	mov    WORD PTR [eax],dx
c0019579:	b8 00 00 00 00       	mov    eax,0x0
c001957e:	e9 c5 00 00 00       	jmp    c0019648 <fatWrapperIoctl+0x118>
c0019583:	90                   	nop
c0019584:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019589:	83 f8 01             	cmp    eax,0x1
c001958c:	75 6a                	jne    c00195f8 <fatWrapperIoctl+0xc8>
c001958e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019592:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019596:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001959b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195a8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00195ae:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195b4:	89 c8                	mov    eax,ecx
c00195b6:	89 da                	mov    edx,ebx
c00195b8:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195bc:	c1 e0 0a             	shl    eax,0xa
c00195bf:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195c4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00195cb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00195d1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00195d7:	89 cb                	mov    ebx,ecx
c00195d9:	c1 fb 1f             	sar    ebx,0x1f
c00195dc:	53                   	push   ebx
c00195dd:	51                   	push   ecx
c00195de:	52                   	push   edx
c00195df:	50                   	push   eax
c00195e0:	e8 bb 5b 00 00       	call   c001f1a0 <__udivdi3>
c00195e5:	83 c4 10             	add    esp,0x10
c00195e8:	89 c2                	mov    edx,eax
c00195ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195ee:	89 10                	mov    DWORD PTR [eax],edx
c00195f0:	b8 00 00 00 00       	mov    eax,0x0
c00195f5:	eb 51                	jmp    c0019648 <fatWrapperIoctl+0x118>
c00195f7:	90                   	nop
c00195f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195fd:	85 c0                	test   eax,eax
c00195ff:	75 07                	jne    c0019608 <fatWrapperIoctl+0xd8>
c0019601:	b8 00 00 00 00       	mov    eax,0x0
c0019606:	eb 40                	jmp    c0019648 <fatWrapperIoctl+0x118>
c0019608:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001960d:	83 f8 03             	cmp    eax,0x3
c0019610:	75 1a                	jne    c001962c <fatWrapperIoctl+0xfc>
c0019612:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019616:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001961a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001961e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019624:	b8 00 00 00 00       	mov    eax,0x0
c0019629:	eb 1d                	jmp    c0019648 <fatWrapperIoctl+0x118>
c001962b:	90                   	nop
c001962c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019631:	83 f8 04             	cmp    eax,0x4
c0019634:	75 0a                	jne    c0019640 <fatWrapperIoctl+0x110>
c0019636:	b8 00 00 00 00       	mov    eax,0x0
c001963b:	eb 0b                	jmp    c0019648 <fatWrapperIoctl+0x118>
c001963d:	8d 76 00             	lea    esi,[esi+0x0]
c0019640:	b8 04 00 00 00       	mov    eax,0x4
c0019645:	8d 76 00             	lea    esi,[esi+0x0]
c0019648:	83 c4 28             	add    esp,0x28
c001964b:	5b                   	pop    ebx
c001964c:	c3                   	ret    
c001964d:	90                   	nop
c001964e:	66 90                	xchg   ax,ax

c0019650 <FAT::FAT()>:
c0019650:	83 ec 1c             	sub    esp,0x1c
c0019653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019657:	83 ec 0c             	sub    esp,0xc
c001965a:	50                   	push   eax
c001965b:	e8 48 1e ff ff       	call   c000b4a8 <Filesystem::Filesystem()>
c0019660:	83 c4 10             	add    esp,0x10
c0019663:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c0019668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001966c:	89 10                	mov    DWORD PTR [eax],edx
c001966e:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019678:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019680:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019685:	7f 19                	jg     c00196a0 <FAT::FAT()+0x50>
c0019687:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001968b:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019696:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001969b:	eb e3                	jmp    c0019680 <FAT::FAT()+0x30>
c001969d:	8d 76 00             	lea    esi,[esi+0x0]
c00196a0:	90                   	nop
c00196a1:	83 c4 1c             	add    esp,0x1c
c00196a4:	c3                   	ret    
c00196a5:	90                   	nop
c00196a6:	66 90                	xchg   ax,ax

c00196a8 <FAT::fixFilepath(char*)>:
c00196a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196ac:	8a 00                	mov    al,BYTE PTR [eax]
c00196ae:	0f be c0             	movsx  eax,al
c00196b1:	83 f8 40             	cmp    eax,0x40
c00196b4:	7e 2e                	jle    c00196e4 <FAT::fixFilepath(char*)+0x3c>
c00196b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196ba:	8a 00                	mov    al,BYTE PTR [eax]
c00196bc:	83 e8 41             	sub    eax,0x41
c00196bf:	88 c2                	mov    dl,al
c00196c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196c5:	88 10                	mov    BYTE PTR [eax],dl
c00196c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196cb:	8a 00                	mov    al,BYTE PTR [eax]
c00196cd:	0f be c0             	movsx  eax,al
c00196d0:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00196d7:	83 c0 30             	add    eax,0x30
c00196da:	88 c2                	mov    dl,al
c00196dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e0:	88 10                	mov    BYTE PTR [eax],dl
c00196e2:	66 90                	xchg   ax,ax
c00196e4:	90                   	nop
c00196e5:	c3                   	ret    
c00196e6:	66 90                	xchg   ax,ax

c00196e8 <FAT::open(char const*, void**, FileOpenMode)>:
c00196e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196f6:	74 0c                	je     c0019704 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00196f8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019700:	75 0e                	jne    c0019710 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019702:	66 90                	xchg   ax,ax
c0019704:	b8 04 00 00 00       	mov    eax,0x4
c0019709:	e9 46 01 00 00       	jmp    c0019854 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001970e:	66 90                	xchg   ax,ax
c0019710:	83 ec 08             	sub    esp,0x8
c0019713:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001971a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001971e:	50                   	push   eax
c001971f:	e8 2c 6f fe ff       	call   c0000650 <strcpy>
c0019724:	83 c4 10             	add    esp,0x10
c0019727:	83 ec 08             	sub    esp,0x8
c001972a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001972e:	50                   	push   eax
c001972f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019736:	e8 6d ff ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c001973b:	83 c4 10             	add    esp,0x10
c001973e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019746:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001974d:	83 e0 01             	and    eax,0x1
c0019750:	74 12                	je     c0019764 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019752:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019759:	83 c8 01             	or     eax,0x1
c001975c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019763:	90                   	nop
c0019764:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001976b:	83 e0 04             	and    eax,0x4
c001976e:	74 24                	je     c0019794 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019770:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019777:	83 c8 30             	or     eax,0x30
c001977a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019781:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019788:	83 c8 02             	or     eax,0x2
c001978b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019792:	66 90                	xchg   ax,ax
c0019794:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001979b:	83 e0 02             	and    eax,0x2
c001979e:	74 14                	je     c00197b4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00197a0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197a7:	83 c8 02             	or     eax,0x2
c00197aa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197b1:	8d 76 00             	lea    esi,[esi+0x0]
c00197b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197bb:	83 e0 08             	and    eax,0x8
c00197be:	74 14                	je     c00197d4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00197c0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197c7:	83 c8 04             	or     eax,0x4
c00197ca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197d1:	8d 76 00             	lea    esi,[esi+0x0]
c00197d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197db:	83 e0 10             	and    eax,0x10
c00197de:	74 14                	je     c00197f4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00197e0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197e7:	83 c8 08             	or     eax,0x8
c00197ea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197f1:	8d 76 00             	lea    esi,[esi+0x0]
c00197f4:	83 ec 0c             	sub    esp,0xc
c00197f7:	68 28 02 00 00       	push   0x228
c00197fc:	e8 d2 e2 fe ff       	call   c0007ad3 <malloc>
c0019801:	83 c4 10             	add    esp,0x10
c0019804:	89 c2                	mov    edx,eax
c0019806:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001980d:	89 10                	mov    DWORD PTR [eax],edx
c001980f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019817:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001981e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019820:	83 ec 04             	sub    esp,0x4
c0019823:	52                   	push   edx
c0019824:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019828:	52                   	push   edx
c0019829:	50                   	push   eax
c001982a:	e8 71 a4 fe ff       	call   c0003ca0 <f_open>
c001982f:	83 c4 10             	add    esp,0x10
c0019832:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019839:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019841:	74 09                	je     c001984c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019843:	b8 01 00 00 00       	mov    eax,0x1
c0019848:	eb 0a                	jmp    c0019854 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001984a:	66 90                	xchg   ax,ax
c001984c:	b8 00 00 00 00       	mov    eax,0x0
c0019851:	8d 76 00             	lea    esi,[esi+0x0]
c0019854:	81 c4 1c 01 00 00    	add    esp,0x11c
c001985a:	c3                   	ret    
c001985b:	90                   	nop

c001985c <FAT::openDir(char const*, void**)>:
c001985c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019862:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001986a:	74 0c                	je     c0019878 <FAT::openDir(char const*, void**)+0x1c>
c001986c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019874:	75 0e                	jne    c0019884 <FAT::openDir(char const*, void**)+0x28>
c0019876:	66 90                	xchg   ax,ax
c0019878:	b8 04 00 00 00       	mov    eax,0x4
c001987d:	e9 82 00 00 00       	jmp    c0019904 <FAT::openDir(char const*, void**)+0xa8>
c0019882:	66 90                	xchg   ax,ax
c0019884:	83 ec 08             	sub    esp,0x8
c0019887:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001988e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019892:	50                   	push   eax
c0019893:	e8 b8 6d fe ff       	call   c0000650 <strcpy>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	83 ec 08             	sub    esp,0x8
c001989e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198a2:	50                   	push   eax
c00198a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198aa:	e8 f9 fd ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c00198af:	83 c4 10             	add    esp,0x10
c00198b2:	83 ec 0c             	sub    esp,0xc
c00198b5:	6a 30                	push   0x30
c00198b7:	e8 17 e2 fe ff       	call   c0007ad3 <malloc>
c00198bc:	83 c4 10             	add    esp,0x10
c00198bf:	89 c2                	mov    edx,eax
c00198c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198c8:	89 10                	mov    DWORD PTR [eax],edx
c00198ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00198d3:	83 ec 08             	sub    esp,0x8
c00198d6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198da:	52                   	push   edx
c00198db:	50                   	push   eax
c00198dc:	e8 4e ad fe ff       	call   c000462f <f_opendir>
c00198e1:	83 c4 10             	add    esp,0x10
c00198e4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198eb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198f3:	74 07                	je     c00198fc <FAT::openDir(char const*, void**)+0xa0>
c00198f5:	b8 01 00 00 00       	mov    eax,0x1
c00198fa:	eb 08                	jmp    c0019904 <FAT::openDir(char const*, void**)+0xa8>
c00198fc:	b8 00 00 00 00       	mov    eax,0x0
c0019901:	8d 76 00             	lea    esi,[esi+0x0]
c0019904:	81 c4 1c 01 00 00    	add    esp,0x11c
c001990a:	c3                   	ret    
c001990b:	90                   	nop

c001990c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001990c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019912:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001991a:	75 0c                	jne    c0019928 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001991c:	b8 04 00 00 00       	mov    eax,0x4
c0019921:	e9 d6 00 00 00       	jmp    c00199fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019926:	66 90                	xchg   ax,ax
c0019928:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019930:	75 0a                	jne    c001993c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019932:	b8 04 00 00 00       	mov    eax,0x4
c0019937:	e9 c0 00 00 00       	jmp    c00199fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001993c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019944:	75 0a                	jne    c0019950 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019946:	b8 04 00 00 00       	mov    eax,0x4
c001994b:	e9 ac 00 00 00       	jmp    c00199fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019950:	83 ec 08             	sub    esp,0x8
c0019953:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001995a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019961:	50                   	push   eax
c0019962:	e8 e9 6c fe ff       	call   c0000650 <strcpy>
c0019967:	83 c4 10             	add    esp,0x10
c001996a:	83 ec 08             	sub    esp,0x8
c001996d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019974:	50                   	push   eax
c0019975:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001997c:	e8 27 fd ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	83 ec 08             	sub    esp,0x8
c0019987:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001998b:	50                   	push   eax
c001998c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019993:	50                   	push   eax
c0019994:	e8 15 ae fe ff       	call   c00047ae <f_stat>
c0019999:	83 c4 10             	add    esp,0x10
c001999c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00199a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00199aa:	85 c0                	test   eax,eax
c00199ac:	74 0a                	je     c00199b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00199ae:	83 f8 04             	cmp    eax,0x4
c00199b1:	74 39                	je     c00199ec <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00199b3:	eb 3f                	jmp    c00199f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00199bc:	0f b6 c0             	movzx  eax,al
c00199bf:	83 e0 10             	and    eax,0x10
c00199c2:	0f 95 c2             	setne  dl
c00199c5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00199cc:	88 10                	mov    BYTE PTR [eax],dl
c00199ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199d2:	ba 00 00 00 00       	mov    edx,0x0
c00199d7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00199de:	89 01                	mov    DWORD PTR [ecx],eax
c00199e0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199e3:	b8 00 00 00 00       	mov    eax,0x0
c00199e8:	eb 12                	jmp    c00199fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199ea:	66 90                	xchg   ax,ax
c00199ec:	b8 02 00 00 00       	mov    eax,0x2
c00199f1:	eb 09                	jmp    c00199fc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199f3:	90                   	nop
c00199f4:	b8 01 00 00 00       	mov    eax,0x1
c00199f9:	8d 76 00             	lea    esi,[esi+0x0]
c00199fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a02:	c3                   	ret    
c0019a03:	90                   	nop

c0019a04 <FAT::unlink(char const*)>:
c0019a04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a12:	75 08                	jne    c0019a1c <FAT::unlink(char const*)+0x18>
c0019a14:	b8 04 00 00 00       	mov    eax,0x4
c0019a19:	eb 61                	jmp    c0019a7c <FAT::unlink(char const*)+0x78>
c0019a1b:	90                   	nop
c0019a1c:	83 ec 08             	sub    esp,0x8
c0019a1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a26:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a2a:	50                   	push   eax
c0019a2b:	e8 20 6c fe ff       	call   c0000650 <strcpy>
c0019a30:	83 c4 10             	add    esp,0x10
c0019a33:	83 ec 08             	sub    esp,0x8
c0019a36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a3a:	50                   	push   eax
c0019a3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a42:	e8 61 fc ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019a47:	83 c4 10             	add    esp,0x10
c0019a4a:	83 ec 0c             	sub    esp,0xc
c0019a4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a51:	50                   	push   eax
c0019a52:	e8 c9 af fe ff       	call   c0004a20 <f_unlink>
c0019a57:	83 c4 10             	add    esp,0x10
c0019a5a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a61:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a68:	85 c0                	test   eax,eax
c0019a6a:	75 08                	jne    c0019a74 <FAT::unlink(char const*)+0x70>
c0019a6c:	b8 00 00 00 00       	mov    eax,0x0
c0019a71:	eb 09                	jmp    c0019a7c <FAT::unlink(char const*)+0x78>
c0019a73:	90                   	nop
c0019a74:	b8 01 00 00 00       	mov    eax,0x1
c0019a79:	8d 76 00             	lea    esi,[esi+0x0]
c0019a7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a82:	c3                   	ret    
c0019a83:	90                   	nop

c0019a84 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a84:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a8a:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019a91:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019a98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a9c:	88 d0                	mov    al,dl
c0019a9e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019aa2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019aaa:	75 0c                	jne    c0019ab8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019aac:	b8 04 00 00 00       	mov    eax,0x4
c0019ab1:	e9 7e 01 00 00       	jmp    c0019c34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019ab6:	66 90                	xchg   ax,ax
c0019ab8:	83 ec 08             	sub    esp,0x8
c0019abb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ac2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ac6:	50                   	push   eax
c0019ac7:	e8 84 6b fe ff       	call   c0000650 <strcpy>
c0019acc:	83 c4 10             	add    esp,0x10
c0019acf:	83 ec 08             	sub    esp,0x8
c0019ad2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ad6:	50                   	push   eax
c0019ad7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ade:	e8 c5 fb ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019aee:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019af6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019afb:	83 e0 01             	and    eax,0x1
c0019afe:	74 14                	je     c0019b14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019b00:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b07:	83 c8 01             	or     eax,0x1
c0019b0a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b11:	8d 76 00             	lea    esi,[esi+0x0]
c0019b14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b19:	83 e0 02             	and    eax,0x2
c0019b1c:	74 12                	je     c0019b30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019b1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b25:	83 c8 20             	or     eax,0x20
c0019b28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b2f:	90                   	nop
c0019b30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b35:	83 e0 04             	and    eax,0x4
c0019b38:	74 12                	je     c0019b4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019b3a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b41:	83 c8 04             	or     eax,0x4
c0019b44:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b4b:	90                   	nop
c0019b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b51:	83 e0 08             	and    eax,0x8
c0019b54:	74 12                	je     c0019b68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019b56:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b5d:	83 c8 02             	or     eax,0x2
c0019b60:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b67:	90                   	nop
c0019b68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b6d:	83 e0 01             	and    eax,0x1
c0019b70:	74 12                	je     c0019b84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019b72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b79:	83 c8 01             	or     eax,0x1
c0019b7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b83:	90                   	nop
c0019b84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b89:	83 e0 02             	and    eax,0x2
c0019b8c:	74 12                	je     c0019ba0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019b8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b95:	83 c8 20             	or     eax,0x20
c0019b98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b9f:	90                   	nop
c0019ba0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ba5:	83 e0 04             	and    eax,0x4
c0019ba8:	74 12                	je     c0019bbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019baa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bb1:	83 c8 04             	or     eax,0x4
c0019bb4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bbb:	90                   	nop
c0019bbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bc1:	83 e0 08             	and    eax,0x8
c0019bc4:	74 12                	je     c0019bd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019bc6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bcd:	83 c8 02             	or     eax,0x2
c0019bd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bd7:	90                   	nop
c0019bd8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019bdf:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019be6:	09 d0                	or     eax,edx
c0019be8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bef:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019bf7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019bff:	83 ec 04             	sub    esp,0x4
c0019c02:	52                   	push   edx
c0019c03:	50                   	push   eax
c0019c04:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c08:	50                   	push   eax
c0019c09:	e8 85 b2 fe ff       	call   c0004e93 <f_chmod>
c0019c0e:	83 c4 10             	add    esp,0x10
c0019c11:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c18:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c1f:	85 c0                	test   eax,eax
c0019c21:	75 09                	jne    c0019c2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019c23:	b8 00 00 00 00       	mov    eax,0x0
c0019c28:	eb 0a                	jmp    c0019c34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019c2a:	66 90                	xchg   ax,ax
c0019c2c:	b8 01 00 00 00       	mov    eax,0x1
c0019c31:	8d 76 00             	lea    esi,[esi+0x0]
c0019c34:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c3a:	c3                   	ret    
c0019c3b:	90                   	nop

c0019c3c <FAT::rename(char const*, char const*)>:
c0019c3c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c42:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c4a:	74 0c                	je     c0019c58 <FAT::rename(char const*, char const*)+0x1c>
c0019c4c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c54:	75 0e                	jne    c0019c64 <FAT::rename(char const*, char const*)+0x28>
c0019c56:	66 90                	xchg   ax,ax
c0019c58:	b8 04 00 00 00       	mov    eax,0x4
c0019c5d:	e9 9e 00 00 00       	jmp    c0019d00 <FAT::rename(char const*, char const*)+0xc4>
c0019c62:	66 90                	xchg   ax,ax
c0019c64:	83 ec 08             	sub    esp,0x8
c0019c67:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c6e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c75:	50                   	push   eax
c0019c76:	e8 d5 69 fe ff       	call   c0000650 <strcpy>
c0019c7b:	83 c4 10             	add    esp,0x10
c0019c7e:	83 ec 08             	sub    esp,0x8
c0019c81:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c88:	50                   	push   eax
c0019c89:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c90:	e8 13 fa ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	83 ec 08             	sub    esp,0x8
c0019c9b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019ca2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ca6:	50                   	push   eax
c0019ca7:	e8 a4 69 fe ff       	call   c0000650 <strcpy>
c0019cac:	83 c4 10             	add    esp,0x10
c0019caf:	83 ec 08             	sub    esp,0x8
c0019cb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cb6:	50                   	push   eax
c0019cb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cbe:	e8 e5 f9 ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019cc3:	83 c4 10             	add    esp,0x10
c0019cc6:	83 ec 08             	sub    esp,0x8
c0019cc9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ccd:	50                   	push   eax
c0019cce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cd5:	50                   	push   eax
c0019cd6:	e8 00 b0 fe ff       	call   c0004cdb <f_rename>
c0019cdb:	83 c4 10             	add    esp,0x10
c0019cde:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019ce5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019cec:	85 c0                	test   eax,eax
c0019cee:	75 08                	jne    c0019cf8 <FAT::rename(char const*, char const*)+0xbc>
c0019cf0:	b8 00 00 00 00       	mov    eax,0x0
c0019cf5:	eb 09                	jmp    c0019d00 <FAT::rename(char const*, char const*)+0xc4>
c0019cf7:	90                   	nop
c0019cf8:	b8 01 00 00 00       	mov    eax,0x1
c0019cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019d00:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d06:	c3                   	ret    
c0019d07:	90                   	nop

c0019d08 <FAT::mkdir(char const*)>:
c0019d08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d16:	75 08                	jne    c0019d20 <FAT::mkdir(char const*)+0x18>
c0019d18:	b8 04 00 00 00       	mov    eax,0x4
c0019d1d:	eb 61                	jmp    c0019d80 <FAT::mkdir(char const*)+0x78>
c0019d1f:	90                   	nop
c0019d20:	83 ec 08             	sub    esp,0x8
c0019d23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d2e:	50                   	push   eax
c0019d2f:	e8 1c 69 fe ff       	call   c0000650 <strcpy>
c0019d34:	83 c4 10             	add    esp,0x10
c0019d37:	83 ec 08             	sub    esp,0x8
c0019d3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d3e:	50                   	push   eax
c0019d3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d46:	e8 5d f9 ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019d4b:	83 c4 10             	add    esp,0x10
c0019d4e:	83 ec 0c             	sub    esp,0xc
c0019d51:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d55:	50                   	push   eax
c0019d56:	e8 e5 ad fe ff       	call   c0004b40 <f_mkdir>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d65:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d6c:	85 c0                	test   eax,eax
c0019d6e:	75 08                	jne    c0019d78 <FAT::mkdir(char const*)+0x70>
c0019d70:	b8 00 00 00 00       	mov    eax,0x0
c0019d75:	eb 09                	jmp    c0019d80 <FAT::mkdir(char const*)+0x78>
c0019d77:	90                   	nop
c0019d78:	b8 01 00 00 00       	mov    eax,0x1
c0019d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d80:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d86:	c3                   	ret    
c0019d87:	90                   	nop

c0019d88 <FAT::exists(char const*)>:
c0019d88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d8e:	83 ec 08             	sub    esp,0x8
c0019d91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d98:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d9c:	50                   	push   eax
c0019d9d:	e8 ae 68 fe ff       	call   c0000650 <strcpy>
c0019da2:	83 c4 10             	add    esp,0x10
c0019da5:	83 ec 08             	sub    esp,0x8
c0019da8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019dac:	50                   	push   eax
c0019dad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019db4:	e8 ef f8 ff ff       	call   c00196a8 <FAT::fixFilepath(char*)>
c0019db9:	83 c4 10             	add    esp,0x10
c0019dbc:	83 ec 08             	sub    esp,0x8
c0019dbf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019dc6:	50                   	push   eax
c0019dc7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dcb:	50                   	push   eax
c0019dcc:	e8 dd a9 fe ff       	call   c00047ae <f_stat>
c0019dd1:	83 c4 10             	add    esp,0x10
c0019dd4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ddb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019de2:	85 c0                	test   eax,eax
c0019de4:	75 06                	jne    c0019dec <FAT::exists(char const*)+0x64>
c0019de6:	b0 01                	mov    al,0x1
c0019de8:	eb 06                	jmp    c0019df0 <FAT::exists(char const*)+0x68>
c0019dea:	66 90                	xchg   ax,ax
c0019dec:	b0 00                	mov    al,0x0
c0019dee:	66 90                	xchg   ax,ax
c0019df0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019df6:	c3                   	ret    
c0019df7:	90                   	nop

c0019df8 <isoReadDiscSectorHelper>:
c0019df8:	83 ec 2c             	sub    esp,0x2c
c0019dfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019dff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e03:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019e08:	83 e8 41             	sub    eax,0x41
c0019e0b:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019e12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e16:	ba 00 00 00 00       	mov    edx,0x0
c0019e1b:	83 ec 0c             	sub    esp,0xc
c0019e1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e26:	52                   	push   edx
c0019e27:	50                   	push   eax
c0019e28:	51                   	push   ecx
c0019e29:	e8 f8 3b ff ff       	call   c000da26 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e2e:	83 c4 20             	add    esp,0x20
c0019e31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e35:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e3a:	74 0c                	je     c0019e48 <isoReadDiscSectorHelper+0x50>
c0019e3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e40:	c1 e0 0b             	shl    eax,0xb
c0019e43:	eb 0b                	jmp    c0019e50 <isoReadDiscSectorHelper+0x58>
c0019e45:	8d 76 00             	lea    esi,[esi+0x0]
c0019e48:	b8 00 00 00 00       	mov    eax,0x0
c0019e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e50:	83 c4 2c             	add    esp,0x2c
c0019e53:	c3                   	ret    

c0019e54 <iso_kprintf>:
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	83 ec 08             	sub    esp,0x8
c0019e5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e5e:	68 3a 25 02 c0       	push   0xc002253a
c0019e63:	e8 a2 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e68:	83 c4 10             	add    esp,0x10
c0019e6b:	90                   	nop
c0019e6c:	83 c4 0c             	add    esp,0xc
c0019e6f:	c3                   	ret    

c0019e70 <iso_kprintfd>:
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	83 ec 08             	sub    esp,0x8
c0019e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e7a:	68 7a 0d 02 c0       	push   0xc0020d7a
c0019e7f:	e8 86 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019e84:	83 c4 10             	add    esp,0x10
c0019e87:	90                   	nop
c0019e88:	83 c4 0c             	add    esp,0xc
c0019e8b:	c3                   	ret    

c0019e8c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e8c:	b8 08 00 00 00       	mov    eax,0x8
c0019e91:	c3                   	ret    

c0019e92 <ISO9660::truncate(void*, unsigned long long)>:
c0019e92:	b8 01 00 00 00       	mov    eax,0x1
c0019e97:	c3                   	ret    

c0019e98 <ISO9660::getName()>:
c0019e98:	b8 f0 27 02 c0       	mov    eax,0xc00227f0
c0019e9d:	c3                   	ret    

c0019e9e <ISO9660::closeDir(void*)>:
c0019e9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ea2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ea4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019ea7:	90                   	nop

c0019ea8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ea8:	b8 01 00 00 00       	mov    eax,0x1
c0019ead:	c3                   	ret    

c0019eae <ISO9660::unlink(char const*)>:
c0019eae:	b8 01 00 00 00       	mov    eax,0x1
c0019eb3:	c3                   	ret    

c0019eb4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019eb4:	b8 03 00 00 00       	mov    eax,0x3
c0019eb9:	c3                   	ret    

c0019eba <ISO9660::rename(char const*, char const*)>:
c0019eba:	b8 01 00 00 00       	mov    eax,0x1
c0019ebf:	c3                   	ret    

c0019ec0 <ISO9660::mkdir(char const*)>:
c0019ec0:	b8 01 00 00 00       	mov    eax,0x1
c0019ec5:	c3                   	ret    

c0019ec6 <ISO9660::~ISO9660()>:
c0019ec6:	83 ec 0c             	sub    esp,0xc
c0019ec9:	ba 30 29 02 c0       	mov    edx,0xc0022930
c0019ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ed2:	89 10                	mov    DWORD PTR [eax],edx
c0019ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	50                   	push   eax
c0019edc:	e8 eb 15 ff ff       	call   c000b4cc <Filesystem::~Filesystem()>
c0019ee1:	83 c4 10             	add    esp,0x10
c0019ee4:	90                   	nop
c0019ee5:	83 c4 0c             	add    esp,0xc
c0019ee8:	c3                   	ret    
c0019ee9:	90                   	nop

c0019eea <ISO9660::~ISO9660()>:
c0019eea:	83 ec 0c             	sub    esp,0xc
c0019eed:	83 ec 0c             	sub    esp,0xc
c0019ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef4:	e8 cd ff ff ff       	call   c0019ec6 <ISO9660::~ISO9660()>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	83 ec 08             	sub    esp,0x8
c0019eff:	6a 08                	push   0x8
c0019f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f05:	e8 02 09 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	83 c4 0c             	add    esp,0xc
c0019f10:	c3                   	ret    
c0019f11:	90                   	nop

c0019f12 <ISO9660::exists(char const*)>:
c0019f12:	83 ec 18             	sub    esp,0x18
c0019f15:	68 0b 28 02 c0       	push   0xc002280b
c0019f1a:	e8 ba 72 ff ff       	call   c00111d9 <KePanic(char const*)>
c0019f1f:	31 c0                	xor    eax,eax
c0019f21:	83 c4 1c             	add    esp,0x1c
c0019f24:	c3                   	ret    
c0019f25:	90                   	nop

c0019f26 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f26:	56                   	push   esi
c0019f27:	53                   	push   ebx
c0019f28:	53                   	push   ebx
c0019f29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f31:	85 db                	test   ebx,ebx
c0019f33:	0f 84 ca 00 00 00    	je     c001a003 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f39:	85 f6                	test   esi,esi
c0019f3b:	0f 84 c2 00 00 00    	je     c001a003 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f41:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f46:	b8 03 00 00 00       	mov    eax,0x3
c0019f4b:	0f 85 b7 00 00 00    	jne    c001a008 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f51:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f53:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019f59:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019f60:	74 1b                	je     c0019f7d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f62:	85 c0                	test   eax,eax
c0019f64:	74 10                	je     c0019f76 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f66:	83 ec 0c             	sub    esp,0xc
c0019f69:	68 29 28 02 c0       	push   0xc0022829
c0019f6e:	e8 66 72 ff ff       	call   c00111d9 <KePanic(char const*)>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f78:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019f7d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f80:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019f87:	85 c0                	test   eax,eax
c0019f89:	74 09                	je     c0019f94 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f8b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f92:	74 48                	je     c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	68 39 28 02 c0       	push   0xc0022839
c0019f9c:	e8 69 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019fa1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019fa4:	83 c4 10             	add    esp,0x10
c0019fa7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019fae:	85 c0                	test   eax,eax
c0019fb0:	74 17                	je     c0019fc9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019fb2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019fb9:	83 ec 0c             	sub    esp,0xc
c0019fbc:	68 59 28 02 c0       	push   0xc0022859
c0019fc1:	e8 44 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019fc6:	83 c4 10             	add    esp,0x10
c0019fc9:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019fd0:	83 ec 0c             	sub    esp,0xc
c0019fd3:	50                   	push   eax
c0019fd4:	e8 8e ca fe ff       	call   c0006a67 <init_percd>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	51                   	push   ecx
c0019fdd:	83 c3 03             	add    ebx,0x3
c0019fe0:	51                   	push   ecx
c0019fe1:	6a 00                	push   0x0
c0019fe3:	53                   	push   ebx
c0019fe4:	e8 41 c5 fe ff       	call   c000652a <iso_open>
c0019fe9:	83 c4 10             	add    esp,0x10
c0019fec:	89 c2                	mov    edx,eax
c0019fee:	b8 01 00 00 00       	mov    eax,0x1
c0019ff3:	83 fa ff             	cmp    edx,0xffffffff
c0019ff6:	74 10                	je     c001a008 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019ff8:	83 c2 32             	add    edx,0x32
c0019ffb:	31 c0                	xor    eax,eax
c0019ffd:	01 d2                	add    edx,edx
c0019fff:	89 16                	mov    DWORD PTR [esi],edx
c001a001:	eb 05                	jmp    c001a008 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a003:	b8 04 00 00 00       	mov    eax,0x4
c001a008:	5a                   	pop    edx
c001a009:	5b                   	pop    ebx
c001a00a:	5e                   	pop    esi
c001a00b:	c3                   	ret    

c001a00c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a00c:	53                   	push   ebx
c001a00d:	83 ec 08             	sub    esp,0x8
c001a010:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a014:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a018:	85 c0                	test   eax,eax
c001a01a:	74 2d                	je     c001a049 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a01c:	85 db                	test   ebx,ebx
c001a01e:	74 29                	je     c001a049 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a020:	52                   	push   edx
c001a021:	b9 02 00 00 00       	mov    ecx,0x2
c001a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a02a:	99                   	cdq    
c001a02b:	f7 f9                	idiv   ecx
c001a02d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a031:	83 e8 32             	sub    eax,0x32
c001a034:	50                   	push   eax
c001a035:	e8 98 c5 fe ff       	call   c00065d2 <iso_read>
c001a03a:	83 c4 10             	add    esp,0x10
c001a03d:	89 03                	mov    DWORD PTR [ebx],eax
c001a03f:	09 d0                	or     eax,edx
c001a041:	0f 94 c0             	sete   al
c001a044:	0f b6 c0             	movzx  eax,al
c001a047:	eb 05                	jmp    c001a04e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a049:	b8 04 00 00 00       	mov    eax,0x4
c001a04e:	83 c4 08             	add    esp,0x8
c001a051:	5b                   	pop    ebx
c001a052:	c3                   	ret    
c001a053:	90                   	nop

c001a054 <ISO9660::seek(void*, unsigned long long)>:
c001a054:	57                   	push   edi
c001a055:	b8 04 00 00 00       	mov    eax,0x4
c001a05a:	56                   	push   esi
c001a05b:	51                   	push   ecx
c001a05c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a060:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a064:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a068:	85 d2                	test   edx,edx
c001a06a:	74 26                	je     c001a092 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a06c:	89 d0                	mov    eax,edx
c001a06e:	b9 02 00 00 00       	mov    ecx,0x2
c001a073:	6a 00                	push   0x0
c001a075:	99                   	cdq    
c001a076:	f7 f9                	idiv   ecx
c001a078:	57                   	push   edi
c001a079:	56                   	push   esi
c001a07a:	83 e8 32             	sub    eax,0x32
c001a07d:	50                   	push   eax
c001a07e:	e8 65 c6 fe ff       	call   c00066e8 <iso_seek>
c001a083:	83 c4 10             	add    esp,0x10
c001a086:	31 f0                	xor    eax,esi
c001a088:	31 fa                	xor    edx,edi
c001a08a:	09 d0                	or     eax,edx
c001a08c:	0f 95 c0             	setne  al
c001a08f:	0f b6 c0             	movzx  eax,al
c001a092:	5a                   	pop    edx
c001a093:	5e                   	pop    esi
c001a094:	5f                   	pop    edi
c001a095:	c3                   	ret    

c001a096 <ISO9660::tell(void*, unsigned long long*)>:
c001a096:	53                   	push   ebx
c001a097:	83 ec 08             	sub    esp,0x8
c001a09a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a09e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0a2:	85 c0                	test   eax,eax
c001a0a4:	74 24                	je     c001a0ca <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0a6:	85 db                	test   ebx,ebx
c001a0a8:	74 20                	je     c001a0ca <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0aa:	b9 02 00 00 00       	mov    ecx,0x2
c001a0af:	99                   	cdq    
c001a0b0:	f7 f9                	idiv   ecx
c001a0b2:	83 ec 0c             	sub    esp,0xc
c001a0b5:	83 e8 32             	sub    eax,0x32
c001a0b8:	50                   	push   eax
c001a0b9:	e8 ae c6 fe ff       	call   c000676c <iso_tell>
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	89 03                	mov    DWORD PTR [ebx],eax
c001a0c3:	31 c0                	xor    eax,eax
c001a0c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a0c8:	eb 05                	jmp    c001a0cf <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a0ca:	b8 04 00 00 00       	mov    eax,0x4
c001a0cf:	83 c4 08             	add    esp,0x8
c001a0d2:	5b                   	pop    ebx
c001a0d3:	c3                   	ret    

c001a0d4 <ISO9660::stat(void*, unsigned long long*)>:
c001a0d4:	56                   	push   esi
c001a0d5:	53                   	push   ebx
c001a0d6:	83 ec 10             	sub    esp,0x10
c001a0d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a0e1:	68 7d 28 02 c0       	push   0xc002287d
c001a0e6:	e8 1f 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0eb:	83 c4 10             	add    esp,0x10
c001a0ee:	85 db                	test   ebx,ebx
c001a0f0:	74 2a                	je     c001a11c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0f2:	85 f6                	test   esi,esi
c001a0f4:	74 26                	je     c001a11c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0f6:	89 d8                	mov    eax,ebx
c001a0f8:	b9 02 00 00 00       	mov    ecx,0x2
c001a0fd:	99                   	cdq    
c001a0fe:	83 ec 0c             	sub    esp,0xc
c001a101:	f7 f9                	idiv   ecx
c001a103:	83 e8 32             	sub    eax,0x32
c001a106:	50                   	push   eax
c001a107:	e8 91 c6 fe ff       	call   c000679d <iso_total>
c001a10c:	83 c4 10             	add    esp,0x10
c001a10f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a116:	89 06                	mov    DWORD PTR [esi],eax
c001a118:	31 c0                	xor    eax,eax
c001a11a:	eb 05                	jmp    c001a121 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a11c:	b8 04 00 00 00       	mov    eax,0x4
c001a121:	5a                   	pop    edx
c001a122:	5b                   	pop    ebx
c001a123:	5e                   	pop    esi
c001a124:	c3                   	ret    
c001a125:	90                   	nop

c001a126 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a126:	55                   	push   ebp
c001a127:	57                   	push   edi
c001a128:	56                   	push   esi
c001a129:	53                   	push   ebx
c001a12a:	83 ec 18             	sub    esp,0x18
c001a12d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a131:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a135:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a139:	68 85 28 02 c0       	push   0xc0022885
c001a13e:	e8 c7 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a143:	83 c4 10             	add    esp,0x10
c001a146:	85 ff                	test   edi,edi
c001a148:	0f 94 c0             	sete   al
c001a14b:	85 f6                	test   esi,esi
c001a14d:	0f 94 c2             	sete   dl
c001a150:	09 d0                	or     eax,edx
c001a152:	a8 01                	test   al,0x1
c001a154:	0f 85 dd 00 00 00    	jne    c001a237 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a15a:	85 db                	test   ebx,ebx
c001a15c:	0f 84 d5 00 00 00    	je     c001a237 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a162:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a165:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a16b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a172:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a179:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a17b:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a181:	74 1b                	je     c001a19e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a183:	85 c0                	test   eax,eax
c001a185:	74 10                	je     c001a197 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a187:	83 ec 0c             	sub    esp,0xc
c001a18a:	68 29 28 02 c0       	push   0xc0022829
c001a18f:	e8 45 70 ff ff       	call   c00111d9 <KePanic(char const*)>
c001a194:	83 c4 10             	add    esp,0x10
c001a197:	8a 03                	mov    al,BYTE PTR [ebx]
c001a199:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a19e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1a1:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1a8:	85 c0                	test   eax,eax
c001a1aa:	74 09                	je     c001a1b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a1ac:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a1b3:	74 51                	je     c001a206 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a1b5:	83 ec 0c             	sub    esp,0xc
c001a1b8:	68 8d 28 02 c0       	push   0xc002288d
c001a1bd:	e8 48 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1c5:	83 c4 10             	add    esp,0x10
c001a1c8:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a1d0:	74 21                	je     c001a1f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a1d2:	83 ec 0c             	sub    esp,0xc
c001a1d5:	68 ad 28 02 c0       	push   0xc00228ad
c001a1da:	e8 2b 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1ec:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1f3:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1fa:	83 ec 0c             	sub    esp,0xc
c001a1fd:	50                   	push   eax
c001a1fe:	e8 64 c8 fe ff       	call   c0006a67 <init_percd>
c001a203:	83 c4 10             	add    esp,0x10
c001a206:	52                   	push   edx
c001a207:	83 c3 03             	add    ebx,0x3
c001a20a:	52                   	push   edx
c001a20b:	6a 00                	push   0x0
c001a20d:	53                   	push   ebx
c001a20e:	e8 17 c3 fe ff       	call   c000652a <iso_open>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	83 f8 ff             	cmp    eax,0xffffffff
c001a219:	89 c5                	mov    ebp,eax
c001a21b:	75 21                	jne    c001a23e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a21d:	50                   	push   eax
c001a21e:	50                   	push   eax
c001a21f:	6a 01                	push   0x1
c001a221:	53                   	push   ebx
c001a222:	e8 03 c3 fe ff       	call   c000652a <iso_open>
c001a227:	83 c4 10             	add    esp,0x10
c001a22a:	ba 02 00 00 00       	mov    edx,0x2
c001a22f:	40                   	inc    eax
c001a230:	74 2b                	je     c001a25d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a232:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a235:	eb 24                	jmp    c001a25b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a237:	ba 04 00 00 00       	mov    edx,0x4
c001a23c:	eb 1f                	jmp    c001a25d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a23e:	83 ec 0c             	sub    esp,0xc
c001a241:	50                   	push   eax
c001a242:	e8 56 c5 fe ff       	call   c000679d <iso_total>
c001a247:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a24e:	89 07                	mov    DWORD PTR [edi],eax
c001a250:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a253:	e8 5c c3 fe ff       	call   c00065b4 <iso_close>
c001a258:	83 c4 10             	add    esp,0x10
c001a25b:	31 d2                	xor    edx,edx
c001a25d:	83 c4 0c             	add    esp,0xc
c001a260:	89 d0                	mov    eax,edx
c001a262:	5b                   	pop    ebx
c001a263:	5e                   	pop    esi
c001a264:	5f                   	pop    edi
c001a265:	5d                   	pop    ebp
c001a266:	c3                   	ret    
c001a267:	90                   	nop

c001a268 <ISO9660::close(void*)>:
c001a268:	83 ec 0c             	sub    esp,0xc
c001a26b:	b8 04 00 00 00       	mov    eax,0x4
c001a270:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a274:	85 d2                	test   edx,edx
c001a276:	74 1b                	je     c001a293 <ISO9660::close(void*)+0x2b>
c001a278:	89 d0                	mov    eax,edx
c001a27a:	b9 02 00 00 00       	mov    ecx,0x2
c001a27f:	99                   	cdq    
c001a280:	83 ec 0c             	sub    esp,0xc
c001a283:	f7 f9                	idiv   ecx
c001a285:	83 e8 32             	sub    eax,0x32
c001a288:	50                   	push   eax
c001a289:	e8 26 c3 fe ff       	call   c00065b4 <iso_close>
c001a28e:	83 c4 10             	add    esp,0x10
c001a291:	31 c0                	xor    eax,eax
c001a293:	83 c4 0c             	add    esp,0xc
c001a296:	c3                   	ret    
c001a297:	90                   	nop

c001a298 <ISO9660::openDir(char const*, void**)>:
c001a298:	56                   	push   esi
c001a299:	53                   	push   ebx
c001a29a:	50                   	push   eax
c001a29b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a29f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a2a3:	85 db                	test   ebx,ebx
c001a2a5:	0f 84 bd 00 00 00    	je     c001a368 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2ab:	85 f6                	test   esi,esi
c001a2ad:	0f 84 b5 00 00 00    	je     c001a368 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2b3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a2b5:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a2bb:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2c2:	74 1b                	je     c001a2df <ISO9660::openDir(char const*, void**)+0x47>
c001a2c4:	85 c0                	test   eax,eax
c001a2c6:	74 10                	je     c001a2d8 <ISO9660::openDir(char const*, void**)+0x40>
c001a2c8:	83 ec 0c             	sub    esp,0xc
c001a2cb:	68 29 28 02 c0       	push   0xc0022829
c001a2d0:	e8 04 6f ff ff       	call   c00111d9 <KePanic(char const*)>
c001a2d5:	83 c4 10             	add    esp,0x10
c001a2d8:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2da:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2e2:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2e9:	85 c0                	test   eax,eax
c001a2eb:	74 10                	je     c001a2fd <ISO9660::openDir(char const*, void**)+0x65>
c001a2ed:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2f4:	74 1a                	je     c001a310 <ISO9660::openDir(char const*, void**)+0x78>
c001a2f6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2fd:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a304:	83 ec 0c             	sub    esp,0xc
c001a307:	50                   	push   eax
c001a308:	e8 5a c7 fe ff       	call   c0006a67 <init_percd>
c001a30d:	83 c4 10             	add    esp,0x10
c001a310:	50                   	push   eax
c001a311:	83 c3 03             	add    ebx,0x3
c001a314:	50                   	push   eax
c001a315:	6a 01                	push   0x1
c001a317:	53                   	push   ebx
c001a318:	e8 0d c2 fe ff       	call   c000652a <iso_open>
c001a31d:	83 c4 10             	add    esp,0x10
c001a320:	83 f8 ff             	cmp    eax,0xffffffff
c001a323:	89 c3                	mov    ebx,eax
c001a325:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a32a:	75 1c                	jne    c001a348 <ISO9660::openDir(char const*, void**)+0xb0>
c001a32c:	53                   	push   ebx
c001a32d:	53                   	push   ebx
c001a32e:	68 d1 28 02 c0       	push   0xc00228d1
c001a333:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a339:	e8 6e e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	b8 01 00 00 00       	mov    eax,0x1
c001a346:	eb 25                	jmp    c001a36d <ISO9660::openDir(char const*, void**)+0xd5>
c001a348:	51                   	push   ecx
c001a349:	01 db                	add    ebx,ebx
c001a34b:	51                   	push   ecx
c001a34c:	83 c3 65             	add    ebx,0x65
c001a34f:	68 e4 28 02 c0       	push   0xc00228e4
c001a354:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a35a:	e8 4d e7 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a35f:	83 c4 10             	add    esp,0x10
c001a362:	31 c0                	xor    eax,eax
c001a364:	89 1e                	mov    DWORD PTR [esi],ebx
c001a366:	eb 05                	jmp    c001a36d <ISO9660::openDir(char const*, void**)+0xd5>
c001a368:	b8 04 00 00 00       	mov    eax,0x4
c001a36d:	5a                   	pop    edx
c001a36e:	5b                   	pop    ebx
c001a36f:	5e                   	pop    esi
c001a370:	c3                   	ret    
c001a371:	90                   	nop

c001a372 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a372:	55                   	push   ebp
c001a373:	57                   	push   edi
c001a374:	56                   	push   esi
c001a375:	53                   	push   ebx
c001a376:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a37c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a383:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a38a:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a391:	85 db                	test   ebx,ebx
c001a393:	0f 84 e4 00 00 00    	je     c001a47d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a399:	85 ed                	test   ebp,ebp
c001a39b:	0f 84 dc 00 00 00    	je     c001a47d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a3a1:	83 ec 0c             	sub    esp,0xc
c001a3a4:	68 f7 28 02 c0       	push   0xc00228f7
c001a3a9:	e8 5c 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3ae:	89 d8                	mov    eax,ebx
c001a3b0:	b9 02 00 00 00       	mov    ecx,0x2
c001a3b5:	99                   	cdq    
c001a3b6:	f7 f9                	idiv   ecx
c001a3b8:	83 e8 32             	sub    eax,0x32
c001a3bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3be:	e8 2c c4 fe ff       	call   c00067ef <iso_readdir>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	85 c0                	test   eax,eax
c001a3c8:	89 c3                	mov    ebx,eax
c001a3ca:	75 38                	jne    c001a404 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a3cc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a3d1:	53                   	push   ebx
c001a3d2:	53                   	push   ebx
c001a3d3:	68 02 29 02 c0       	push   0xc0022902
c001a3d8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3de:	e8 c9 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3e3:	83 c4 0c             	add    esp,0xc
c001a3e6:	68 10 01 00 00       	push   0x110
c001a3eb:	6a 00                	push   0x0
c001a3ed:	57                   	push   edi
c001a3ee:	e8 fd 60 fe ff       	call   c00004f0 <memset>
c001a3f3:	83 c4 10             	add    esp,0x10
c001a3f6:	b8 01 00 00 00       	mov    eax,0x1
c001a3fb:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a402:	eb 7e                	jmp    c001a482 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a404:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a40a:	8d 70 08             	lea    esi,[eax+0x8]
c001a40d:	83 ec 0c             	sub    esp,0xc
c001a410:	56                   	push   esi
c001a411:	e8 6a 61 fe ff       	call   c0000580 <strlen>
c001a416:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a41e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a429:	75 0a                	jne    c001a435 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a42b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a42e:	b8 02 00 00 00       	mov    eax,0x2
c001a433:	74 05                	je     c001a43a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a435:	b8 01 00 00 00       	mov    eax,0x1
c001a43a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a43e:	50                   	push   eax
c001a43f:	50                   	push   eax
c001a440:	56                   	push   esi
c001a441:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a445:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a449:	50                   	push   eax
c001a44a:	e8 01 62 fe ff       	call   c0000650 <strcpy>
c001a44f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a456:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a458:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a45f:	5a                   	pop    edx
c001a460:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a465:	59                   	pop    ecx
c001a466:	68 15 29 02 c0       	push   0xc0022915
c001a46b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a471:	e8 36 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a476:	83 c4 10             	add    esp,0x10
c001a479:	31 c0                	xor    eax,eax
c001a47b:	eb 05                	jmp    c001a482 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a47d:	b8 04 00 00 00       	mov    eax,0x4
c001a482:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a488:	5b                   	pop    ebx
c001a489:	5e                   	pop    esi
c001a48a:	5f                   	pop    edi
c001a48b:	5d                   	pop    ebp
c001a48c:	c3                   	ret    

c001a48d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a48d:	57                   	push   edi
c001a48e:	56                   	push   esi
c001a48f:	53                   	push   ebx
c001a490:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a494:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a498:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a49e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4a2:	0f be cb             	movsx  ecx,bl
c001a4a5:	75 0b                	jne    c001a4b2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a4a7:	0f be 05 40 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023740
c001a4ae:	39 c8                	cmp    eax,ecx
c001a4b0:	74 47                	je     c001a4f9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4b2:	83 ec 0c             	sub    esp,0xc
c001a4b5:	31 d2                	xor    edx,edx
c001a4b7:	68 a0 98 02 c0       	push   0xc00298a0
c001a4bc:	6a 01                	push   0x1
c001a4be:	52                   	push   edx
c001a4bf:	56                   	push   esi
c001a4c0:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a4c7:	e8 5a 35 ff ff       	call   c000da26 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4cc:	83 c4 20             	add    esp,0x20
c001a4cf:	85 c0                	test   eax,eax
c001a4d1:	75 0e                	jne    c001a4e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a4d3:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a4d9:	88 1d 40 37 02 c0    	mov    BYTE PTR ds:0xc0023740,bl
c001a4df:	eb 18                	jmp    c001a4f9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4e1:	50                   	push   eax
c001a4e2:	68 00 08 00 00       	push   0x800
c001a4e7:	6a 00                	push   0x0
c001a4e9:	57                   	push   edi
c001a4ea:	e8 01 60 fe ff       	call   c00004f0 <memset>
c001a4ef:	83 c4 10             	add    esp,0x10
c001a4f2:	b8 01 00 00 00       	mov    eax,0x1
c001a4f7:	eb 0e                	jmp    c001a507 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a4f9:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a4fe:	b9 00 08 00 00       	mov    ecx,0x800
c001a503:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a505:	31 c0                	xor    eax,eax
c001a507:	5b                   	pop    ebx
c001a508:	5e                   	pop    esi
c001a509:	5f                   	pop    edi
c001a50a:	c3                   	ret    
c001a50b:	90                   	nop

c001a50c <ISO9660::tryMount(LogicalDisk*, int)>:
c001a50c:	53                   	push   ebx
c001a50d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a513:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a51d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a524:	8d 58 41             	lea    ebx,[eax+0x41]
c001a527:	0f be db             	movsx  ebx,bl
c001a52a:	53                   	push   ebx
c001a52b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a52f:	50                   	push   eax
c001a530:	6a 10                	push   0x10
c001a532:	e8 56 ff ff ff       	call   c001a48d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a537:	83 c4 10             	add    esp,0x10
c001a53a:	31 d2                	xor    edx,edx
c001a53c:	85 c0                	test   eax,eax
c001a53e:	75 33                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a540:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a545:	75 2c                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a547:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a54c:	75 25                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a54e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a553:	75 1e                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a555:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a55a:	75 17                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a55c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a561:	75 10                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a563:	83 ec 0c             	sub    esp,0xc
c001a566:	53                   	push   ebx
c001a567:	e8 fb c4 fe ff       	call   c0006a67 <init_percd>
c001a56c:	83 c4 10             	add    esp,0x10
c001a56f:	40                   	inc    eax
c001a570:	0f 95 c2             	setne  dl
c001a573:	81 c4 08 08 00 00    	add    esp,0x808
c001a579:	88 d0                	mov    al,dl
c001a57b:	5b                   	pop    ebx
c001a57c:	c3                   	ret    
c001a57d:	90                   	nop

c001a57e <ISO9660::ISO9660()>:
c001a57e:	83 ec 0c             	sub    esp,0xc
c001a581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a585:	83 ec 0c             	sub    esp,0xc
c001a588:	50                   	push   eax
c001a589:	e8 1a 0f ff ff       	call   c000b4a8 <Filesystem::Filesystem()>
c001a58e:	83 c4 10             	add    esp,0x10
c001a591:	ba 30 29 02 c0       	mov    edx,0xc0022930
c001a596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a59a:	89 10                	mov    DWORD PTR [eax],edx
c001a59c:	e8 d8 c5 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a5a1:	90                   	nop
c001a5a2:	83 c4 0c             	add    esp,0xc
c001a5a5:	c3                   	ret    

c001a5a6 <SoundCard::beginPlayback()>:
c001a5a6:	c7 44 24 04 94 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022994
c001a5ae:	e9 26 6c ff ff       	jmp    c00111d9 <KePanic(char const*)>
c001a5b3:	90                   	nop

c001a5b4 <SoundCard::stopPlayback()>:
c001a5b4:	c7 44 24 04 94 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022994
c001a5bc:	e9 18 6c ff ff       	jmp    c00111d9 <KePanic(char const*)>
c001a5c1:	90                   	nop

c001a5c2 <SoundCard::SoundCard(char const*)>:
c001a5c2:	83 ec 1c             	sub    esp,0x1c
c001a5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5c9:	83 ec 08             	sub    esp,0x8
c001a5cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5d0:	50                   	push   eax
c001a5d1:	e8 fe 21 ff ff       	call   c000c7d4 <Device::Device(char const*)>
c001a5d6:	83 c4 10             	add    esp,0x10
c001a5d9:	ba e0 29 02 c0       	mov    edx,0xc00229e0
c001a5de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e2:	89 10                	mov    DWORD PTR [eax],edx
c001a5e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f3:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a601:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a60f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a627:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a62f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a634:	7f 1a                	jg     c001a650 <SoundCard::SoundCard(char const*)+0x8e>
c001a636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a63a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a63e:	83 c2 54             	add    edx,0x54
c001a641:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a649:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a64e:	eb df                	jmp    c001a62f <SoundCard::SoundCard(char const*)+0x6d>
c001a650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a654:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a65b:	90                   	nop
c001a65c:	83 c4 1c             	add    esp,0x1c
c001a65f:	c3                   	ret    

c001a660 <SoundCard::~SoundCard()>:
c001a660:	83 ec 0c             	sub    esp,0xc
c001a663:	ba e0 29 02 c0       	mov    edx,0xc00229e0
c001a668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a66c:	89 10                	mov    DWORD PTR [eax],edx
c001a66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a672:	83 ec 0c             	sub    esp,0xc
c001a675:	50                   	push   eax
c001a676:	e8 c3 1e ff ff       	call   c000c53e <Device::~Device()>
c001a67b:	83 c4 10             	add    esp,0x10
c001a67e:	90                   	nop
c001a67f:	83 c4 0c             	add    esp,0xc
c001a682:	c3                   	ret    
c001a683:	90                   	nop

c001a684 <SoundCard::~SoundCard()>:
c001a684:	83 ec 0c             	sub    esp,0xc
c001a687:	83 ec 0c             	sub    esp,0xc
c001a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a68e:	e8 cd ff ff ff       	call   c001a660 <SoundCard::~SoundCard()>
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	83 ec 08             	sub    esp,0x8
c001a699:	68 e8 01 00 00       	push   0x1e8
c001a69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6a2:	e8 65 01 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	83 c4 0c             	add    esp,0xc
c001a6ad:	c3                   	ret    

c001a6ae <SoundCard::configureRates(int, int, int)>:
c001a6ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6b2:	31 c0                	xor    eax,eax
c001a6b4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a6bb:	75 20                	jne    c001a6dd <SoundCard::configureRates(int, int, int)+0x2f>
c001a6bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6c1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a6c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6cb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6d5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a6db:	b0 01                	mov    al,0x1
c001a6dd:	c3                   	ret    

c001a6de <SoundCard::getSamples16(int, short*)>:
c001a6de:	55                   	push   ebp
c001a6df:	57                   	push   edi
c001a6e0:	31 ff                	xor    edi,edi
c001a6e2:	56                   	push   esi
c001a6e3:	53                   	push   ebx
c001a6e4:	31 db                	xor    ebx,ebx
c001a6e6:	83 ec 10             	sub    esp,0x10
c001a6e9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a6ed:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6f1:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6f4:	50                   	push   eax
c001a6f5:	6a 00                	push   0x0
c001a6f7:	55                   	push   ebp
c001a6f8:	e8 f3 5d fe ff       	call   c00004f0 <memset>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a704:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a70b:	85 c0                	test   eax,eax
c001a70d:	74 1a                	je     c001a729 <SoundCard::getSamples16(int, short*)+0x4b>
c001a70f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a713:	75 14                	jne    c001a729 <SoundCard::getSamples16(int, short*)+0x4b>
c001a715:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a719:	55                   	push   ebp
c001a71a:	56                   	push   esi
c001a71b:	50                   	push   eax
c001a71c:	e8 f3 02 00 00       	call   c001aa14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a721:	83 c4 10             	add    esp,0x10
c001a724:	39 c3                	cmp    ebx,eax
c001a726:	0f 4c d8             	cmovl  ebx,eax
c001a729:	47                   	inc    edi
c001a72a:	83 ff 20             	cmp    edi,0x20
c001a72d:	75 d1                	jne    c001a700 <SoundCard::getSamples16(int, short*)+0x22>
c001a72f:	83 c4 0c             	add    esp,0xc
c001a732:	89 d8                	mov    eax,ebx
c001a734:	5b                   	pop    ebx
c001a735:	5e                   	pop    esi
c001a736:	5f                   	pop    edi
c001a737:	5d                   	pop    ebp
c001a738:	c3                   	ret    
c001a739:	90                   	nop

c001a73a <SoundCard::getSamples32(int, int*)>:
c001a73a:	55                   	push   ebp
c001a73b:	57                   	push   edi
c001a73c:	31 ff                	xor    edi,edi
c001a73e:	56                   	push   esi
c001a73f:	31 f6                	xor    esi,esi
c001a741:	53                   	push   ebx
c001a742:	83 ec 10             	sub    esp,0x10
c001a745:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a749:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a74d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a751:	c1 e0 02             	shl    eax,0x2
c001a754:	50                   	push   eax
c001a755:	6a 00                	push   0x0
c001a757:	55                   	push   ebp
c001a758:	e8 93 5d fe ff       	call   c00004f0 <memset>
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a767:	85 c0                	test   eax,eax
c001a769:	74 1a                	je     c001a785 <SoundCard::getSamples32(int, int*)+0x4b>
c001a76b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a76f:	75 14                	jne    c001a785 <SoundCard::getSamples32(int, int*)+0x4b>
c001a771:	53                   	push   ebx
c001a772:	55                   	push   ebp
c001a773:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a777:	50                   	push   eax
c001a778:	e8 67 03 00 00       	call   c001aae4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	39 c6                	cmp    esi,eax
c001a782:	0f 4c f0             	cmovl  esi,eax
c001a785:	47                   	inc    edi
c001a786:	83 ff 20             	cmp    edi,0x20
c001a789:	75 d5                	jne    c001a760 <SoundCard::getSamples32(int, int*)+0x26>
c001a78b:	85 f6                	test   esi,esi
c001a78d:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a794:	75 0f                	jne    c001a7a5 <SoundCard::getSamples32(int, int*)+0x6b>
c001a796:	85 c0                	test   eax,eax
c001a798:	74 1b                	je     c001a7b5 <SoundCard::getSamples32(int, int*)+0x7b>
c001a79a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a79c:	83 ec 0c             	sub    esp,0xc
c001a79f:	53                   	push   ebx
c001a7a0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a7a3:	eb 0d                	jmp    c001a7b2 <SoundCard::getSamples32(int, int*)+0x78>
c001a7a5:	85 c0                	test   eax,eax
c001a7a7:	75 0c                	jne    c001a7b5 <SoundCard::getSamples32(int, int*)+0x7b>
c001a7a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7ab:	83 ec 0c             	sub    esp,0xc
c001a7ae:	53                   	push   ebx
c001a7af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	83 c4 0c             	add    esp,0xc
c001a7b8:	89 f0                	mov    eax,esi
c001a7ba:	5b                   	pop    ebx
c001a7bb:	5e                   	pop    esi
c001a7bc:	5f                   	pop    edi
c001a7bd:	5d                   	pop    ebp
c001a7be:	c3                   	ret    
c001a7bf:	90                   	nop

c001a7c0 <SoundCard::addChannel(SoundPort*)>:
c001a7c0:	83 ec 0c             	sub    esp,0xc
c001a7c3:	31 c0                	xor    eax,eax
c001a7c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7c9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a7d1:	74 1b                	je     c001a7ee <SoundCard::addChannel(SoundPort*)+0x2e>
c001a7d3:	40                   	inc    eax
c001a7d4:	83 f8 20             	cmp    eax,0x20
c001a7d7:	75 f0                	jne    c001a7c9 <SoundCard::addChannel(SoundPort*)+0x9>
c001a7d9:	83 ec 0c             	sub    esp,0xc
c001a7dc:	68 b9 29 02 c0       	push   0xc00229b9
c001a7e1:	e8 f3 69 ff ff       	call   c00111d9 <KePanic(char const*)>
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	83 c8 ff             	or     eax,0xffffffff
c001a7ec:	eb 0b                	jmp    c001a7f9 <SoundCard::addChannel(SoundPort*)+0x39>
c001a7ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7f2:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a7f9:	83 c4 0c             	add    esp,0xc
c001a7fc:	c3                   	ret    
c001a7fd:	90                   	nop

c001a7fe <SoundCard::removeChannel(int)>:
c001a7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a802:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a806:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a811:	c3                   	ret    
c001a812:	66 90                	xchg   ax,ax

c001a814 <SoundPort::SoundPort(int, int, int, int)>:
c001a814:	83 ec 0c             	sub    esp,0xc
c001a817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a826:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a832:	89 10                	mov    DWORD PTR [eax],edx
c001a834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a838:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a83c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a843:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a847:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a84a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a84f:	75 13                	jne    c001a864 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a855:	8b 00                	mov    eax,DWORD PTR [eax]
c001a857:	05 a0 0f 00 00       	add    eax,0xfa0
c001a85c:	d1 e0                	shl    eax,1
c001a85e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a862:	66 90                	xchg   ax,ax
c001a864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a868:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a86c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a873:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a881:	c1 e0 02             	shl    eax,0x2
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	50                   	push   eax
c001a888:	e8 46 d2 fe ff       	call   c0007ad3 <malloc>
c001a88d:	83 c4 10             	add    esp,0x10
c001a890:	89 c2                	mov    edx,eax
c001a892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a896:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a899:	90                   	nop
c001a89a:	83 c4 0c             	add    esp,0xc
c001a89d:	c3                   	ret    
c001a89e:	66 90                	xchg   ax,ax

c001a8a0 <SoundPort::~SoundPort()>:
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8aa:	85 c0                	test   eax,eax
c001a8ac:	74 1e                	je     c001a8cc <SoundPort::~SoundPort()+0x2c>
c001a8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8b5:	83 ec 0c             	sub    esp,0xc
c001a8b8:	50                   	push   eax
c001a8b9:	e8 25 d2 fe ff       	call   c0007ae3 <free>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8cc:	90                   	nop
c001a8cd:	83 c4 0c             	add    esp,0xc
c001a8d0:	c3                   	ret    
c001a8d1:	90                   	nop
c001a8d2:	66 90                	xchg   ax,ax

c001a8d4 <SoundPort::unpause()>:
c001a8d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a8dc:	c3                   	ret    
c001a8dd:	90                   	nop
c001a8de:	66 90                	xchg   ax,ax

c001a8e0 <SoundPort::pause()>:
c001a8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8e8:	c3                   	ret    
c001a8e9:	90                   	nop
c001a8ea:	66 90                	xchg   ax,ax

c001a8ec <SoundPort::getBufferUsed()>:
c001a8ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8f3:	c3                   	ret    

c001a8f4 <SoundPort::getBufferSize()>:
c001a8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8fb:	c3                   	ret    

c001a8fc <SoundPort::buffer16(short*, int)>:
c001a8fc:	55                   	push   ebp
c001a8fd:	57                   	push   edi
c001a8fe:	56                   	push   esi
c001a8ff:	53                   	push   ebx
c001a900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a904:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a908:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a90b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a90e:	74 68                	je     c001a978 <SoundPort::buffer16(short*, int)+0x7c>
c001a910:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a914:	85 c9                	test   ecx,ecx
c001a916:	7e 60                	jle    c001a978 <SoundPort::buffer16(short*, int)+0x7c>
c001a918:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a91c:	8d 70 01             	lea    esi,[eax+0x1]
c001a91f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a922:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a925:	c1 e1 0f             	shl    ecx,0xf
c001a928:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a92b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a92e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a931:	74 4d                	je     c001a980 <SoundPort::buffer16(short*, int)+0x84>
c001a933:	31 f6                	xor    esi,esi
c001a935:	eb 21                	jmp    c001a958 <SoundPort::buffer16(short*, int)+0x5c>
c001a937:	90                   	nop
c001a938:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a93d:	8d 79 01             	lea    edi,[ecx+0x1]
c001a940:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a943:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a946:	c1 e3 0f             	shl    ebx,0xf
c001a949:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a94c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a94f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a952:	74 1c                	je     c001a970 <SoundPort::buffer16(short*, int)+0x74>
c001a954:	89 c6                	mov    esi,eax
c001a956:	66 90                	xchg   ax,ax
c001a958:	8d 46 01             	lea    eax,[esi+0x1]
c001a95b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a95f:	75 d7                	jne    c001a938 <SoundPort::buffer16(short*, int)+0x3c>
c001a961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a965:	8d 76 00             	lea    esi,[esi+0x0]
c001a968:	5b                   	pop    ebx
c001a969:	5e                   	pop    esi
c001a96a:	5f                   	pop    edi
c001a96b:	5d                   	pop    ebp
c001a96c:	c3                   	ret    
c001a96d:	8d 76 00             	lea    esi,[esi+0x0]
c001a970:	5b                   	pop    ebx
c001a971:	8d 46 02             	lea    eax,[esi+0x2]
c001a974:	5e                   	pop    esi
c001a975:	5f                   	pop    edi
c001a976:	5d                   	pop    ebp
c001a977:	c3                   	ret    
c001a978:	5b                   	pop    ebx
c001a979:	31 c0                	xor    eax,eax
c001a97b:	5e                   	pop    esi
c001a97c:	5f                   	pop    edi
c001a97d:	5d                   	pop    ebp
c001a97e:	c3                   	ret    
c001a97f:	90                   	nop
c001a980:	b8 01 00 00 00       	mov    eax,0x1
c001a985:	eb e1                	jmp    c001a968 <SoundPort::buffer16(short*, int)+0x6c>
c001a987:	90                   	nop

c001a988 <SoundPort::buffer32(int*, int)>:
c001a988:	55                   	push   ebp
c001a989:	57                   	push   edi
c001a98a:	56                   	push   esi
c001a98b:	53                   	push   ebx
c001a98c:	83 ec 04             	sub    esp,0x4
c001a98f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a997:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a99b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a99e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9a4:	74 5a                	je     c001aa00 <SoundPort::buffer32(int*, int)+0x78>
c001a9a6:	85 c0                	test   eax,eax
c001a9a8:	7e 56                	jle    c001aa00 <SoundPort::buffer32(int*, int)+0x78>
c001a9aa:	8d 71 01             	lea    esi,[ecx+0x1]
c001a9ad:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a9b0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a9b3:	8b 37                	mov    esi,DWORD PTR [edi]
c001a9b5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a9b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9be:	74 4c                	je     c001aa0c <SoundPort::buffer32(int*, int)+0x84>
c001a9c0:	31 f6                	xor    esi,esi
c001a9c2:	eb 1c                	jmp    c001a9e0 <SoundPort::buffer32(int*, int)+0x58>
c001a9c4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a9c7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a9ca:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a9cd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a9d0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a9d4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9d7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9da:	74 18                	je     c001a9f4 <SoundPort::buffer32(int*, int)+0x6c>
c001a9dc:	89 de                	mov    esi,ebx
c001a9de:	66 90                	xchg   ax,ax
c001a9e0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a9e3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a9e6:	75 dc                	jne    c001a9c4 <SoundPort::buffer32(int*, int)+0x3c>
c001a9e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9eb:	90                   	nop
c001a9ec:	83 c4 04             	add    esp,0x4
c001a9ef:	5b                   	pop    ebx
c001a9f0:	5e                   	pop    esi
c001a9f1:	5f                   	pop    edi
c001a9f2:	5d                   	pop    ebp
c001a9f3:	c3                   	ret    
c001a9f4:	8d 46 02             	lea    eax,[esi+0x2]
c001a9f7:	83 c4 04             	add    esp,0x4
c001a9fa:	5b                   	pop    ebx
c001a9fb:	5e                   	pop    esi
c001a9fc:	5f                   	pop    edi
c001a9fd:	5d                   	pop    ebp
c001a9fe:	c3                   	ret    
c001a9ff:	90                   	nop
c001aa00:	83 c4 04             	add    esp,0x4
c001aa03:	31 c0                	xor    eax,eax
c001aa05:	5b                   	pop    ebx
c001aa06:	5e                   	pop    esi
c001aa07:	5f                   	pop    edi
c001aa08:	5d                   	pop    ebp
c001aa09:	c3                   	ret    
c001aa0a:	66 90                	xchg   ax,ax
c001aa0c:	b8 01 00 00 00       	mov    eax,0x1
c001aa11:	eb d9                	jmp    c001a9ec <SoundPort::buffer32(int*, int)+0x64>
c001aa13:	90                   	nop

c001aa14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aa14:	55                   	push   ebp
c001aa15:	57                   	push   edi
c001aa16:	56                   	push   esi
c001aa17:	53                   	push   ebx
c001aa18:	83 ec 0c             	sub    esp,0xc
c001aa1b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa23:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aa27:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aa2b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aa31:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa33:	74 13                	je     c001aa48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001aa35:	83 ec 0c             	sub    esp,0xc
c001aa38:	68 0c 2a 02 c0       	push   0xc0022a0c
c001aa3d:	e8 97 67 ff ff       	call   c00111d9 <KePanic(char const*)>
c001aa42:	83 c4 10             	add    esp,0x10
c001aa45:	8d 76 00             	lea    esi,[esi+0x0]
c001aa48:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aa4e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa51:	74 11                	je     c001aa64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001aa53:	83 ec 0c             	sub    esp,0xc
c001aa56:	68 4b 2a 02 c0       	push   0xc0022a4b
c001aa5b:	e8 79 67 ff ff       	call   c00111d9 <KePanic(char const*)>
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	90                   	nop
c001aa64:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aa6a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa6d:	74 11                	je     c001aa80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001aa6f:	83 ec 0c             	sub    esp,0xc
c001aa72:	68 4b 2a 02 c0       	push   0xc0022a4b
c001aa77:	e8 5d 67 ff ff       	call   c00111d9 <KePanic(char const*)>
c001aa7c:	83 c4 10             	add    esp,0x10
c001aa7f:	90                   	nop
c001aa80:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aa83:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aa87:	85 f6                	test   esi,esi
c001aa89:	7e 2d                	jle    c001aab8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001aa8b:	31 c0                	xor    eax,eax
c001aa8d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa90:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa93:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aa96:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aa9c:	85 c9                	test   ecx,ecx
c001aa9e:	0f 49 d1             	cmovns edx,ecx
c001aaa1:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001aaa5:	c1 fa 0f             	sar    edx,0xf
c001aaa8:	01 d1                	add    ecx,edx
c001aaaa:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001aaae:	83 c0 01             	add    eax,0x1
c001aab1:	39 f0                	cmp    eax,esi
c001aab3:	75 db                	jne    c001aa90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001aab5:	8d 76 00             	lea    esi,[esi+0x0]
c001aab8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aabb:	83 ec 04             	sub    esp,0x4
c001aabe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aac1:	29 f0                	sub    eax,esi
c001aac3:	c1 e0 02             	shl    eax,0x2
c001aac6:	50                   	push   eax
c001aac7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aaca:	50                   	push   eax
c001aacb:	52                   	push   edx
c001aacc:	e8 ff 58 fe ff       	call   c00003d0 <memmove>
c001aad1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aad4:	29 f0                	sub    eax,esi
c001aad6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aad9:	83 c4 1c             	add    esp,0x1c
c001aadc:	89 f0                	mov    eax,esi
c001aade:	5b                   	pop    ebx
c001aadf:	5e                   	pop    esi
c001aae0:	5f                   	pop    edi
c001aae1:	5d                   	pop    ebp
c001aae2:	c3                   	ret    
c001aae3:	90                   	nop

c001aae4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aae4:	55                   	push   ebp
c001aae5:	57                   	push   edi
c001aae6:	56                   	push   esi
c001aae7:	53                   	push   ebx
c001aae8:	83 ec 0c             	sub    esp,0xc
c001aaeb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aaef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aaf3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aaf7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aafb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ab01:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab03:	74 13                	je     c001ab18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ab05:	83 ec 0c             	sub    esp,0xc
c001ab08:	68 2c 2a 02 c0       	push   0xc0022a2c
c001ab0d:	e8 c7 66 ff ff       	call   c00111d9 <KePanic(char const*)>
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	8d 76 00             	lea    esi,[esi+0x0]
c001ab18:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab1e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab21:	74 11                	je     c001ab34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ab23:	83 ec 0c             	sub    esp,0xc
c001ab26:	68 67 2a 02 c0       	push   0xc0022a67
c001ab2b:	e8 a9 66 ff ff       	call   c00111d9 <KePanic(char const*)>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	90                   	nop
c001ab34:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab3a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab3d:	74 11                	je     c001ab50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ab3f:	83 ec 0c             	sub    esp,0xc
c001ab42:	68 67 2a 02 c0       	push   0xc0022a67
c001ab47:	e8 8d 66 ff ff       	call   c00111d9 <KePanic(char const*)>
c001ab4c:	83 c4 10             	add    esp,0x10
c001ab4f:	90                   	nop
c001ab50:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ab53:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ab57:	85 ff                	test   edi,edi
c001ab59:	7e 21                	jle    c001ab7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ab5b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab62:	31 c0                	xor    eax,eax
c001ab64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab67:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ab6a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab6d:	01 d5                	add    ebp,edx
c001ab6f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ab72:	83 c0 04             	add    eax,0x4
c001ab75:	39 c1                	cmp    ecx,eax
c001ab77:	75 eb                	jne    c001ab64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ab79:	8d 76 00             	lea    esi,[esi+0x0]
c001ab7c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab7f:	83 ec 04             	sub    esp,0x4
c001ab82:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab85:	29 f8                	sub    eax,edi
c001ab87:	c1 e0 02             	shl    eax,0x2
c001ab8a:	50                   	push   eax
c001ab8b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab8e:	50                   	push   eax
c001ab8f:	52                   	push   edx
c001ab90:	e8 3b 58 fe ff       	call   c00003d0 <memmove>
c001ab95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab98:	29 f8                	sub    eax,edi
c001ab9a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab9d:	83 c4 1c             	add    esp,0x1c
c001aba0:	89 f8                	mov    eax,edi
c001aba2:	5b                   	pop    ebx
c001aba3:	5e                   	pop    esi
c001aba4:	5f                   	pop    edi
c001aba5:	5d                   	pop    ebp
c001aba6:	c3                   	ret    
c001aba7:	90                   	nop

c001aba8 <PCI::open(int, int, void*)>:
c001aba8:	83 ec 18             	sub    esp,0x18
c001abab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001abb9:	8b 10                	mov    edx,DWORD PTR [eax]
c001abbb:	50                   	push   eax
c001abbc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001abbf:	31 c0                	xor    eax,eax
c001abc1:	83 c4 1c             	add    esp,0x1c
c001abc4:	c3                   	ret    
c001abc5:	90                   	nop

c001abc6 <PCI::close(int, int, void*)>:
c001abc6:	31 c0                	xor    eax,eax
c001abc8:	c3                   	ret    
c001abc9:	90                   	nop

c001abca <PCI::PCI()>:
c001abca:	83 ec 0c             	sub    esp,0xc
c001abcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd1:	83 ec 08             	sub    esp,0x8
c001abd4:	68 83 2a 02 c0       	push   0xc0022a83
c001abd9:	50                   	push   eax
c001abda:	e8 b9 13 ff ff       	call   c000bf98 <Bus::Bus(char const*)>
c001abdf:	83 c4 10             	add    esp,0x10
c001abe2:	ba 2c 2b 02 c0       	mov    edx,0xc0022b2c
c001abe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abeb:	89 10                	mov    DWORD PTR [eax],edx
c001abed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001abfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abff:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ac04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac0e:	0f b6 d0             	movzx  edx,al
c001ac11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac15:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac26:	0f b6 d0             	movzx  edx,al
c001ac29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac3c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3f:	88 d1                	mov    cl,dl
c001ac41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac45:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac4b:	0f b6 d0             	movzx  edx,al
c001ac4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac52:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac56:	83 c9 c0             	or     ecx,0xffffffc0
c001ac59:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac5d:	90                   	nop
c001ac5e:	83 c4 0c             	add    esp,0xc
c001ac61:	c3                   	ret    

c001ac62 <PCI::readBAR8(unsigned int, int)>:
c001ac62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac6a:	f6 c2 01             	test   dl,0x1
c001ac6d:	74 07                	je     c001ac76 <PCI::readBAR8(unsigned int, int)+0x14>
c001ac6f:	83 e2 fc             	and    edx,0xfffffffc
c001ac72:	01 c2                	add    edx,eax
c001ac74:	ec                   	in     al,dx
c001ac75:	c3                   	ret    
c001ac76:	83 e2 f0             	and    edx,0xfffffff0
c001ac79:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop

c001ac7e <PCI::readBAR16(unsigned int, int)>:
c001ac7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac86:	f6 c2 01             	test   dl,0x1
c001ac89:	74 08                	je     c001ac93 <PCI::readBAR16(unsigned int, int)+0x15>
c001ac8b:	83 e2 fc             	and    edx,0xfffffffc
c001ac8e:	01 c2                	add    edx,eax
c001ac90:	66 ed                	in     ax,dx
c001ac92:	c3                   	ret    
c001ac93:	83 e2 f0             	and    edx,0xfffffff0
c001ac96:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <PCI::readBAR32(unsigned int, int)>:
c001ac9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aca0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aca4:	f6 c2 01             	test   dl,0x1
c001aca7:	74 07                	je     c001acb0 <PCI::readBAR32(unsigned int, int)+0x14>
c001aca9:	83 e2 fc             	and    edx,0xfffffffc
c001acac:	01 c2                	add    edx,eax
c001acae:	ed                   	in     eax,dx
c001acaf:	c3                   	ret    
c001acb0:	83 e2 f0             	and    edx,0xfffffff0
c001acb3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001acb6:	c3                   	ret    
c001acb7:	90                   	nop

c001acb8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001acb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acc4:	f6 c2 01             	test   dl,0x1
c001acc7:	74 07                	je     c001acd0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001acc9:	83 e2 fc             	and    edx,0xfffffffc
c001accc:	01 ca                	add    edx,ecx
c001acce:	ee                   	out    dx,al
c001accf:	c3                   	ret    
c001acd0:	83 e2 f0             	and    edx,0xfffffff0
c001acd3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001acd6:	c3                   	ret    
c001acd7:	90                   	nop

c001acd8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001acd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ace0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ace4:	f6 c2 01             	test   dl,0x1
c001ace7:	74 08                	je     c001acf1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ace9:	83 e2 fc             	and    edx,0xfffffffc
c001acec:	01 ca                	add    edx,ecx
c001acee:	66 ef                	out    dx,ax
c001acf0:	c3                   	ret    
c001acf1:	83 e2 f0             	and    edx,0xfffffff0
c001acf4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001acf8:	c3                   	ret    
c001acf9:	90                   	nop

c001acfa <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001acfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad06:	f6 c2 01             	test   dl,0x1
c001ad09:	74 07                	je     c001ad12 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ad0b:	83 e2 fc             	and    edx,0xfffffffc
c001ad0e:	01 ca                	add    edx,ecx
c001ad10:	ef                   	out    dx,eax
c001ad11:	c3                   	ret    
c001ad12:	83 e2 f0             	and    edx,0xfffffff0
c001ad15:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ad18:	c3                   	ret    
c001ad19:	90                   	nop

c001ad1a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad1a:	55                   	push   ebp
c001ad1b:	57                   	push   edi
c001ad1c:	56                   	push   esi
c001ad1d:	53                   	push   ebx
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad26:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad2a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad2e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad32:	83 fe 07             	cmp    esi,0x7
c001ad35:	76 10                	jbe    c001ad47 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad37:	83 ec 0c             	sub    esp,0xc
c001ad3a:	68 8b 2a 02 c0       	push   0xc0022a8b
c001ad3f:	e8 95 64 ff ff       	call   c00111d9 <KePanic(char const*)>
c001ad44:	83 c4 10             	add    esp,0x10
c001ad47:	0f b6 db             	movzx  ebx,bl
c001ad4a:	83 fb 0f             	cmp    ebx,0xf
c001ad4d:	76 10                	jbe    c001ad5f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad4f:	83 ec 0c             	sub    esp,0xc
c001ad52:	68 bb 2a 02 c0       	push   0xc0022abb
c001ad57:	e8 7d 64 ff ff       	call   c00111d9 <KePanic(char const*)>
c001ad5c:	83 c4 10             	add    esp,0x10
c001ad5f:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad62:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad67:	83 c8 f0             	or     eax,0xfffffff0
c001ad6a:	ee                   	out    dx,al
c001ad6b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad70:	89 e8                	mov    eax,ebp
c001ad72:	ee                   	out    dx,al
c001ad73:	89 f9                	mov    ecx,edi
c001ad75:	89 d8                	mov    eax,ebx
c001ad77:	0f b6 d9             	movzx  ebx,cl
c001ad7a:	83 c4 0c             	add    esp,0xc
c001ad7d:	c1 e0 08             	shl    eax,0x8
c001ad80:	83 e3 fc             	and    ebx,0xfffffffc
c001ad83:	09 d8                	or     eax,ebx
c001ad85:	5b                   	pop    ebx
c001ad86:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad8b:	5e                   	pop    esi
c001ad8c:	5f                   	pop    edi
c001ad8d:	5d                   	pop    ebp
c001ad8e:	c3                   	ret    
c001ad8f:	90                   	nop

c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad90:	57                   	push   edi
c001ad91:	56                   	push   esi
c001ad92:	53                   	push   ebx
c001ad93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad9f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ada3:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ada9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adad:	83 ff 01             	cmp    edi,0x1
c001adb0:	75 3f                	jne    c001adf1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001adb2:	89 de                	mov    esi,ebx
c001adb4:	0f b6 c0             	movzx  eax,al
c001adb7:	c1 e0 10             	shl    eax,0x10
c001adba:	81 e6 fc 00 00 00    	and    esi,0xfc
c001adc0:	0f b6 c9             	movzx  ecx,cl
c001adc3:	09 f0                	or     eax,esi
c001adc5:	c1 e1 08             	shl    ecx,0x8
c001adc8:	0f b6 d2             	movzx  edx,dl
c001adcb:	c1 e2 0b             	shl    edx,0xb
c001adce:	09 c8                	or     eax,ecx
c001add0:	09 d0                	or     eax,edx
c001add2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001add7:	0d 00 00 00 80       	or     eax,0x80000000
c001addc:	ef                   	out    dx,eax
c001addd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ade2:	ed                   	in     eax,dx
c001ade3:	83 e3 02             	and    ebx,0x2
c001ade6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aded:	d3 e8                	shr    eax,cl
c001adef:	eb 44                	jmp    c001ae35 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adf1:	83 ff 02             	cmp    edi,0x2
c001adf4:	75 2d                	jne    c001ae23 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001adf6:	83 ec 0c             	sub    esp,0xc
c001adf9:	0f b6 fb             	movzx  edi,bl
c001adfc:	57                   	push   edi
c001adfd:	0f b6 c9             	movzx  ecx,cl
c001ae00:	51                   	push   ecx
c001ae01:	0f b6 d2             	movzx  edx,dl
c001ae04:	52                   	push   edx
c001ae05:	0f b6 c0             	movzx  eax,al
c001ae08:	50                   	push   eax
c001ae09:	56                   	push   esi
c001ae0a:	e8 0b ff ff ff       	call   c001ad1a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae0f:	89 c2                	mov    edx,eax
c001ae11:	ed                   	in     eax,dx
c001ae12:	83 e3 02             	and    ebx,0x2
c001ae15:	83 c4 20             	add    esp,0x20
c001ae18:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae1f:	d3 e8                	shr    eax,cl
c001ae21:	eb 12                	jmp    c001ae35 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae23:	83 ec 0c             	sub    esp,0xc
c001ae26:	68 eb 2a 02 c0       	push   0xc0022aeb
c001ae2b:	e8 a9 63 ff ff       	call   c00111d9 <KePanic(char const*)>
c001ae30:	83 c4 10             	add    esp,0x10
c001ae33:	31 c0                	xor    eax,eax
c001ae35:	5b                   	pop    ebx
c001ae36:	5e                   	pop    esi
c001ae37:	5f                   	pop    edi
c001ae38:	c3                   	ret    
c001ae39:	90                   	nop

c001ae3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae3a:	83 ec 18             	sub    esp,0x18
c001ae3d:	6a 00                	push   0x0
c001ae3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae44:	50                   	push   eax
c001ae45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae4a:	50                   	push   eax
c001ae4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae50:	50                   	push   eax
c001ae51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae55:	e8 36 ff ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae5a:	83 c4 2c             	add    esp,0x2c
c001ae5d:	c3                   	ret    

c001ae5e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae5e:	83 ec 18             	sub    esp,0x18
c001ae61:	6a 0e                	push   0xe
c001ae63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae68:	50                   	push   eax
c001ae69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae6e:	50                   	push   eax
c001ae6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae74:	50                   	push   eax
c001ae75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae79:	e8 12 ff ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae7e:	83 c4 2c             	add    esp,0x2c
c001ae81:	0f b6 c0             	movzx  eax,al
c001ae84:	c3                   	ret    
c001ae85:	90                   	nop

c001ae86 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae86:	55                   	push   ebp
c001ae87:	57                   	push   edi
c001ae88:	56                   	push   esi
c001ae89:	53                   	push   ebx
c001ae8a:	83 ec 18             	sub    esp,0x18
c001ae8d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae92:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae97:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae9c:	6a 0a                	push   0xa
c001ae9e:	56                   	push   esi
c001ae9f:	55                   	push   ebp
c001aea0:	57                   	push   edi
c001aea1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aea5:	e8 e6 fe ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeaa:	83 c4 14             	add    esp,0x14
c001aead:	6a 0a                	push   0xa
c001aeaf:	56                   	push   esi
c001aeb0:	55                   	push   ebp
c001aeb1:	57                   	push   edi
c001aeb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aeb6:	89 c3                	mov    ebx,eax
c001aeb8:	0f b6 db             	movzx  ebx,bl
c001aebb:	e8 d0 fe ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aec0:	83 c4 2c             	add    esp,0x2c
c001aec3:	25 00 ff 00 00       	and    eax,0xff00
c001aec8:	09 d8                	or     eax,ebx
c001aeca:	5b                   	pop    ebx
c001aecb:	5e                   	pop    esi
c001aecc:	5f                   	pop    edi
c001aecd:	5d                   	pop    ebp
c001aece:	c3                   	ret    
c001aecf:	90                   	nop

c001aed0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001aed0:	83 ec 18             	sub    esp,0x18
c001aed3:	6a 08                	push   0x8
c001aed5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeda:	50                   	push   eax
c001aedb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee0:	50                   	push   eax
c001aee1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee6:	50                   	push   eax
c001aee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeeb:	e8 a0 fe ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef0:	83 c4 2c             	add    esp,0x2c
c001aef3:	0f b6 c4             	movzx  eax,ah
c001aef6:	c3                   	ret    
c001aef7:	90                   	nop

c001aef8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001aef8:	83 ec 18             	sub    esp,0x18
c001aefb:	6a 08                	push   0x8
c001aefd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af02:	50                   	push   eax
c001af03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af08:	50                   	push   eax
c001af09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af0e:	50                   	push   eax
c001af0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af13:	e8 78 fe ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af18:	83 c4 2c             	add    esp,0x2c
c001af1b:	c3                   	ret    

c001af1c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001af1c:	83 ec 18             	sub    esp,0x18
c001af1f:	6a 3c                	push   0x3c
c001af21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af26:	50                   	push   eax
c001af27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af2c:	50                   	push   eax
c001af2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af32:	50                   	push   eax
c001af33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af37:	e8 54 fe ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af3c:	83 c4 2c             	add    esp,0x2c
c001af3f:	c3                   	ret    

c001af40 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af40:	83 ec 18             	sub    esp,0x18
c001af43:	6a 18                	push   0x18
c001af45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af4a:	50                   	push   eax
c001af4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af50:	50                   	push   eax
c001af51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af56:	50                   	push   eax
c001af57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af5b:	e8 30 fe ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af60:	83 c4 2c             	add    esp,0x2c
c001af63:	0f b6 c4             	movzx  eax,ah
c001af66:	c3                   	ret    
c001af67:	90                   	nop

c001af68 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af68:	55                   	push   ebp
c001af69:	57                   	push   edi
c001af6a:	56                   	push   esi
c001af6b:	53                   	push   ebx
c001af6c:	83 ec 28             	sub    esp,0x28
c001af6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af73:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af78:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af7d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af82:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af89:	8d 43 12             	lea    eax,[ebx+0x12]
c001af8c:	83 c3 10             	add    ebx,0x10
c001af8f:	0f b6 c0             	movzx  eax,al
c001af92:	0f b6 db             	movzx  ebx,bl
c001af95:	50                   	push   eax
c001af96:	51                   	push   ecx
c001af97:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af9b:	57                   	push   edi
c001af9c:	55                   	push   ebp
c001af9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afa1:	e8 ea fd ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afa6:	83 c4 14             	add    esp,0x14
c001afa9:	53                   	push   ebx
c001afaa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afae:	51                   	push   ecx
c001afaf:	89 c6                	mov    esi,eax
c001afb1:	57                   	push   edi
c001afb2:	55                   	push   ebp
c001afb3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afb7:	c1 e6 10             	shl    esi,0x10
c001afba:	e8 d1 fd ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afbf:	83 c4 3c             	add    esp,0x3c
c001afc2:	5b                   	pop    ebx
c001afc3:	0f b7 c0             	movzx  eax,ax
c001afc6:	09 f0                	or     eax,esi
c001afc8:	5e                   	pop    esi
c001afc9:	5f                   	pop    edi
c001afca:	5d                   	pop    ebp
c001afcb:	c3                   	ret    

c001afcc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001afcc:	55                   	push   ebp
c001afcd:	57                   	push   edi
c001afce:	56                   	push   esi
c001afcf:	53                   	push   ebx
c001afd0:	83 ec 0c             	sub    esp,0xc
c001afd3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001afd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afdf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001afe3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001afe9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001aff1:	83 f9 01             	cmp    ecx,0x1
c001aff4:	75 5d                	jne    c001b053 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001aff6:	0f b6 c8             	movzx  ecx,al
c001aff9:	89 f0                	mov    eax,esi
c001affb:	25 fc 00 00 00       	and    eax,0xfc
c001b000:	0f b6 d2             	movzx  edx,dl
c001b003:	c1 e1 10             	shl    ecx,0x10
c001b006:	c1 e2 0b             	shl    edx,0xb
c001b009:	09 c1                	or     ecx,eax
c001b00b:	89 f8                	mov    eax,edi
c001b00d:	0f b6 f8             	movzx  edi,al
c001b010:	c1 e7 08             	shl    edi,0x8
c001b013:	09 f9                	or     ecx,edi
c001b015:	09 d1                	or     ecx,edx
c001b017:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b01c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b022:	89 c8                	mov    eax,ecx
c001b024:	ef                   	out    dx,eax
c001b025:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b02a:	ed                   	in     eax,dx
c001b02b:	83 e6 02             	and    esi,0x2
c001b02e:	0f b7 db             	movzx  ebx,bx
c001b031:	74 0a                	je     c001b03d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b033:	c1 e3 10             	shl    ebx,0x10
c001b036:	0f b7 d0             	movzx  edx,ax
c001b039:	09 d3                	or     ebx,edx
c001b03b:	eb 05                	jmp    c001b042 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b03d:	66 31 c0             	xor    ax,ax
c001b040:	09 c3                	or     ebx,eax
c001b042:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b047:	89 c8                	mov    eax,ecx
c001b049:	ef                   	out    dx,eax
c001b04a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b04f:	89 d8                	mov    eax,ebx
c001b051:	eb 41                	jmp    c001b094 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b053:	83 f9 02             	cmp    ecx,0x2
c001b056:	75 45                	jne    c001b09d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b058:	89 f1                	mov    ecx,esi
c001b05a:	83 ec 0c             	sub    esp,0xc
c001b05d:	0f b6 f1             	movzx  esi,cl
c001b060:	89 f9                	mov    ecx,edi
c001b062:	56                   	push   esi
c001b063:	0f b6 f9             	movzx  edi,cl
c001b066:	57                   	push   edi
c001b067:	0f b6 d2             	movzx  edx,dl
c001b06a:	52                   	push   edx
c001b06b:	0f b6 c0             	movzx  eax,al
c001b06e:	50                   	push   eax
c001b06f:	55                   	push   ebp
c001b070:	e8 a5 fc ff ff       	call   c001ad1a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b075:	89 c2                	mov    edx,eax
c001b077:	ed                   	in     eax,dx
c001b078:	83 c4 20             	add    esp,0x20
c001b07b:	f6 c2 02             	test   dl,0x2
c001b07e:	0f b7 db             	movzx  ebx,bx
c001b081:	74 0c                	je     c001b08f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b083:	0f b7 c8             	movzx  ecx,ax
c001b086:	89 d8                	mov    eax,ebx
c001b088:	c1 e0 10             	shl    eax,0x10
c001b08b:	09 c8                	or     eax,ecx
c001b08d:	eb 05                	jmp    c001b094 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b08f:	66 31 c0             	xor    ax,ax
c001b092:	09 d8                	or     eax,ebx
c001b094:	ef                   	out    dx,eax
c001b095:	83 c4 0c             	add    esp,0xc
c001b098:	5b                   	pop    ebx
c001b099:	5e                   	pop    esi
c001b09a:	5f                   	pop    edi
c001b09b:	5d                   	pop    ebp
c001b09c:	c3                   	ret    
c001b09d:	c7 44 24 20 eb 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022aeb
c001b0a5:	83 c4 0c             	add    esp,0xc
c001b0a8:	5b                   	pop    ebx
c001b0a9:	5e                   	pop    esi
c001b0aa:	5f                   	pop    edi
c001b0ab:	5d                   	pop    ebp
c001b0ac:	e9 28 61 ff ff       	jmp    c00111d9 <KePanic(char const*)>
c001b0b1:	90                   	nop

c001b0b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b0b2:	55                   	push   ebp
c001b0b3:	57                   	push   edi
c001b0b4:	56                   	push   esi
c001b0b5:	53                   	push   ebx
c001b0b6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b0bc:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b0c3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b0ca:	0f 85 bd 00 00 00    	jne    c001b18d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b0d0:	83 ec 0c             	sub    esp,0xc
c001b0d3:	68 14 01 00 00       	push   0x114
c001b0d8:	e8 f6 c9 fe ff       	call   c0007ad3 <malloc>
c001b0dd:	83 c4 0c             	add    esp,0xc
c001b0e0:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b0e6:	68 f1 2a 02 c0       	push   0xc0022af1
c001b0eb:	50                   	push   eax
c001b0ec:	89 c3                	mov    ebx,eax
c001b0ee:	e8 3b 06 ff ff       	call   c000b72e <File::File(char const*, Process*)>
c001b0f3:	83 c4 10             	add    esp,0x10
c001b0f6:	85 db                	test   ebx,ebx
c001b0f8:	0f 84 6b 02 00 00    	je     c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b0fe:	57                   	push   edi
c001b0ff:	57                   	push   edi
c001b100:	6a 01                	push   0x1
c001b102:	53                   	push   ebx
c001b103:	e8 e2 06 ff ff       	call   c000b7ea <File::open(FileOpenMode)>
c001b108:	83 c4 10             	add    esp,0x10
c001b10b:	85 c0                	test   eax,eax
c001b10d:	0f 85 56 02 00 00    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b113:	52                   	push   edx
c001b114:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b118:	50                   	push   eax
c001b119:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b11d:	50                   	push   eax
c001b11e:	53                   	push   ebx
c001b11f:	e8 c8 09 ff ff       	call   c000baec <File::stat(unsigned long long*, bool*)>
c001b124:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b128:	40                   	inc    eax
c001b129:	89 04 24             	mov    DWORD PTR [esp],eax
c001b12c:	e8 a2 c9 fe ff       	call   c0007ad3 <malloc>
c001b131:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b135:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b139:	59                   	pop    ecx
c001b13a:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b13f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b141:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b145:	51                   	push   ecx
c001b146:	50                   	push   eax
c001b147:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b14b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b14f:	53                   	push   ebx
c001b150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b153:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b157:	83 c4 20             	add    esp,0x20
c001b15a:	89 c8                	mov    eax,ecx
c001b15c:	99                   	cdq    
c001b15d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b161:	0f 85 02 02 00 00    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b167:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b16b:	0f 85 f8 01 00 00    	jne    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b171:	83 ec 0c             	sub    esp,0xc
c001b174:	53                   	push   ebx
c001b175:	e8 ce 06 ff ff       	call   c000b848 <File::close()>
c001b17a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b17e:	83 c4 10             	add    esp,0x10
c001b181:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b188:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b18d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b195:	31 c9                	xor    ecx,ecx
c001b197:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b19e:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b1a4:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b1ab:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b1b1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b1b6:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b1be:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b1c3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b1cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b1cf:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b1d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b1db:	39 cd                	cmp    ebp,ecx
c001b1dd:	0f 8e 86 01 00 00    	jle    c001b369 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1e3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b1e6:	d4 40                	aam    0x40
c001b1e8:	d5 39                	aad    0x39
c001b1ea:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1ee:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b1f2:	d4 40                	aam    0x40
c001b1f4:	d5 39                	aad    0x39
c001b1f6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1fa:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b1fe:	d4 40                	aam    0x40
c001b200:	d5 39                	aad    0x39
c001b202:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b206:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b20a:	d4 40                	aam    0x40
c001b20c:	d5 39                	aad    0x39
c001b20e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b212:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b216:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b21a:	3c 56                	cmp    al,0x56
c001b21c:	74 47                	je     c001b265 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b21e:	d4 40                	aam    0x40
c001b220:	d5 39                	aad    0x39
c001b222:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b225:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b229:	0f b6 db             	movzx  ebx,bl
c001b22c:	c1 e3 04             	shl    ebx,0x4
c001b22f:	d4 40                	aam    0x40
c001b231:	d5 39                	aad    0x39
c001b233:	83 e8 30             	sub    eax,0x30
c001b236:	0f b6 c0             	movzx  eax,al
c001b239:	09 c3                	or     ebx,eax
c001b23b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b23f:	c1 e3 04             	shl    ebx,0x4
c001b242:	d4 40                	aam    0x40
c001b244:	d5 39                	aad    0x39
c001b246:	83 e8 30             	sub    eax,0x30
c001b249:	0f b6 c0             	movzx  eax,al
c001b24c:	09 c3                	or     ebx,eax
c001b24e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b252:	c1 e3 04             	shl    ebx,0x4
c001b255:	d4 40                	aam    0x40
c001b257:	d5 39                	aad    0x39
c001b259:	83 e8 30             	sub    eax,0x30
c001b25c:	0f b6 c0             	movzx  eax,al
c001b25f:	09 c3                	or     ebx,eax
c001b261:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b265:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b269:	80 fb 58             	cmp    bl,0x58
c001b26c:	74 49                	je     c001b2b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b26e:	88 d8                	mov    al,bl
c001b270:	d4 40                	aam    0x40
c001b272:	d5 39                	aad    0x39
c001b274:	83 e8 30             	sub    eax,0x30
c001b277:	0f b6 f8             	movzx  edi,al
c001b27a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b27e:	c1 e7 04             	shl    edi,0x4
c001b281:	d4 40                	aam    0x40
c001b283:	d5 39                	aad    0x39
c001b285:	83 e8 30             	sub    eax,0x30
c001b288:	0f b6 c0             	movzx  eax,al
c001b28b:	09 c7                	or     edi,eax
c001b28d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b291:	c1 e7 04             	shl    edi,0x4
c001b294:	d4 40                	aam    0x40
c001b296:	d5 39                	aad    0x39
c001b298:	83 e8 30             	sub    eax,0x30
c001b29b:	0f b6 c0             	movzx  eax,al
c001b29e:	09 c7                	or     edi,eax
c001b2a0:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b2a4:	c1 e7 04             	shl    edi,0x4
c001b2a7:	d4 40                	aam    0x40
c001b2a9:	d5 39                	aad    0x39
c001b2ab:	83 e8 30             	sub    eax,0x30
c001b2ae:	0f b6 c0             	movzx  eax,al
c001b2b1:	09 c7                	or     edi,eax
c001b2b3:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b2b7:	8d 41 10             	lea    eax,[ecx+0x10]
c001b2ba:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b2be:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b2c2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b2c6:	83 f9 0a             	cmp    ecx,0xa
c001b2c9:	74 07                	je     c001b2d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b2cb:	47                   	inc    edi
c001b2cc:	39 c5                	cmp    ebp,eax
c001b2ce:	75 16                	jne    c001b2e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b2d0:	89 e8                	mov    eax,ebp
c001b2d2:	83 f9 0a             	cmp    ecx,0xa
c001b2d5:	0f 94 c1             	sete   cl
c001b2d8:	0f b6 c9             	movzx  ecx,cl
c001b2db:	01 c1                	add    ecx,eax
c001b2dd:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b2e2:	75 0f                	jne    c001b2f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b2e4:	eb 1c                	jmp    c001b302 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b2e6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b2e9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b2ed:	40                   	inc    eax
c001b2ee:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b2f1:	eb cb                	jmp    c001b2be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b2f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2f7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b2fc:	0f 85 d9 fe ff ff    	jne    c001b1db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b302:	80 fb 58             	cmp    bl,0x58
c001b305:	74 10                	je     c001b317 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b307:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b30c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b311:	0f 85 c4 fe ff ff    	jne    c001b1db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b317:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b31b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b31f:	83 e8 30             	sub    eax,0x30
c001b322:	c1 e0 04             	shl    eax,0x4
c001b325:	83 eb 30             	sub    ebx,0x30
c001b328:	09 d8                	or     eax,ebx
c001b32a:	0f b6 c0             	movzx  eax,al
c001b32d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b331:	0f 85 a4 fe ff ff    	jne    c001b1db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b33b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b33f:	83 e8 30             	sub    eax,0x30
c001b342:	c1 e0 04             	shl    eax,0x4
c001b345:	83 eb 30             	sub    ebx,0x30
c001b348:	09 d8                	or     eax,ebx
c001b34a:	0f b6 c0             	movzx  eax,al
c001b34d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b351:	0f 85 84 fe ff ff    	jne    c001b1db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b357:	50                   	push   eax
c001b358:	50                   	push   eax
c001b359:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b35d:	50                   	push   eax
c001b35e:	56                   	push   esi
c001b35f:	e8 ec 52 fe ff       	call   c0000650 <strcpy>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	eb 05                	jmp    c001b36e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b369:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b36c:	31 f6                	xor    esi,esi
c001b36e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b374:	89 f0                	mov    eax,esi
c001b376:	5b                   	pop    ebx
c001b377:	5e                   	pop    esi
c001b378:	5f                   	pop    edi
c001b379:	5d                   	pop    ebp
c001b37a:	c3                   	ret    
c001b37b:	90                   	nop

c001b37c <PCI::checkBus(unsigned char)>:
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	31 db                	xor    ebx,ebx
c001b380:	51                   	push   ecx
c001b381:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b386:	52                   	push   edx
c001b387:	53                   	push   ebx
c001b388:	43                   	inc    ebx
c001b389:	56                   	push   esi
c001b38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b38e:	e8 0f 03 00 00       	call   c001b6a2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b393:	83 c4 10             	add    esp,0x10
c001b396:	83 fb 20             	cmp    ebx,0x20
c001b399:	75 eb                	jne    c001b386 <PCI::checkBus(unsigned char)+0xa>
c001b39b:	58                   	pop    eax
c001b39c:	5b                   	pop    ebx
c001b39d:	5e                   	pop    esi
c001b39e:	c3                   	ret    
c001b39f:	90                   	nop

c001b3a0 <PCI::foundDevice(PCIDeviceInfo)>:
c001b3a0:	55                   	push   ebp
c001b3a1:	57                   	push   edi
c001b3a2:	56                   	push   esi
c001b3a3:	53                   	push   ebx
c001b3a4:	83 ec 1c             	sub    esp,0x1c
c001b3a7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b3ac:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b3b0:	3d ff ff 00 00       	cmp    eax,0xffff
c001b3b5:	0f 84 63 01 00 00    	je     c001b51e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b3bb:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b3c0:	66 3d 06 04          	cmp    ax,0x406
c001b3c4:	75 2c                	jne    c001b3f2 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b3c6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b3cb:	50                   	push   eax
c001b3cc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b3d1:	50                   	push   eax
c001b3d2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b3d7:	50                   	push   eax
c001b3d8:	53                   	push   ebx
c001b3d9:	e8 62 fb ff ff       	call   c001af40 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3de:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b3e2:	0f b6 c0             	movzx  eax,al
c001b3e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3e9:	83 c4 2c             	add    esp,0x2c
c001b3ec:	5b                   	pop    ebx
c001b3ed:	5e                   	pop    esi
c001b3ee:	5f                   	pop    edi
c001b3ef:	5d                   	pop    ebp
c001b3f0:	eb 8a                	jmp    c001b37c <PCI::checkBus(unsigned char)>
c001b3f2:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b3f7:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b3fd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b401:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b405:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b409:	85 d2                	test   edx,edx
c001b40b:	74 34                	je     c001b441 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b40d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b410:	85 c9                	test   ecx,ecx
c001b412:	74 29                	je     c001b43d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b414:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b41a:	31 f5                	xor    ebp,esi
c001b41c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b422:	75 19                	jne    c001b43d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b424:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b42a:	75 11                	jne    c001b43d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b42c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b433:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b437:	0f 84 e1 00 00 00    	je     c001b51e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b43d:	8b 12                	mov    edx,DWORD PTR [edx]
c001b43f:	eb c8                	jmp    c001b409 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b441:	3d 01 06 00 00       	cmp    eax,0x601
c001b446:	75 19                	jne    c001b461 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b448:	83 ec 0c             	sub    esp,0xc
c001b44b:	68 64 01 00 00       	push   0x164
c001b450:	e8 7e c6 fe ff       	call   c0007ad3 <malloc>
c001b455:	89 04 24             	mov    DWORD PTR [esp],eax
c001b458:	89 c5                	mov    ebp,eax
c001b45a:	e8 ab 0e 00 00       	call   c001c30a <SATABus::SATABus()>
c001b45f:	eb 1e                	jmp    c001b47f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b461:	3d 01 01 00 00       	cmp    eax,0x101
c001b466:	75 62                	jne    c001b4ca <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b468:	83 ec 0c             	sub    esp,0xc
c001b46b:	68 70 02 00 00       	push   0x270
c001b470:	e8 5e c6 fe ff       	call   c0007ad3 <malloc>
c001b475:	89 04 24             	mov    DWORD PTR [esp],eax
c001b478:	89 c5                	mov    ebp,eax
c001b47a:	e8 f3 02 00 00       	call   c001b772 <IDE::IDE()>
c001b47f:	58                   	pop    eax
c001b480:	5a                   	pop    edx
c001b481:	55                   	push   ebp
c001b482:	53                   	push   ebx
c001b483:	e8 b4 11 ff ff       	call   c000c63c <Device::addChild(Device*)>
c001b488:	83 ec 1c             	sub    esp,0x1c
c001b48b:	b9 09 00 00 00       	mov    ecx,0x9
c001b490:	fc                   	cld    
c001b491:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b495:	89 e7                	mov    edi,esp
c001b497:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b499:	55                   	push   ebp
c001b49a:	e8 e3 10 ff ff       	call   c000c582 <Device::preOpenPCI(PCIDeviceInfo)>
c001b49f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b4a2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b4a6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b4ae:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4b6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b4be:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b4c1:	83 c4 4c             	add    esp,0x4c
c001b4c4:	5b                   	pop    ebx
c001b4c5:	5e                   	pop    esi
c001b4c6:	5f                   	pop    edi
c001b4c7:	5d                   	pop    ebp
c001b4c8:	ff e0                	jmp    eax
c001b4ca:	83 ec 0c             	sub    esp,0xc
c001b4cd:	68 58 01 00 00       	push   0x158
c001b4d2:	e8 fc c5 fe ff       	call   c0007ad3 <malloc>
c001b4d7:	5a                   	pop    edx
c001b4d8:	59                   	pop    ecx
c001b4d9:	68 0a 2b 02 c0       	push   0xc0022b0a
c001b4de:	50                   	push   eax
c001b4df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4e3:	e8 f2 13 ff ff       	call   c000c8da <DriverlessDevice::DriverlessDevice(char const*)>
c001b4e8:	5e                   	pop    esi
c001b4e9:	5f                   	pop    edi
c001b4ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4ee:	50                   	push   eax
c001b4ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b4f3:	53                   	push   ebx
c001b4f4:	e8 43 11 ff ff       	call   c000c63c <Device::addChild(Device*)>
c001b4f9:	83 c4 10             	add    esp,0x10
c001b4fc:	b9 09 00 00 00       	mov    ecx,0x9
c001b501:	fc                   	cld    
c001b502:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b506:	89 fe                	mov    esi,edi
c001b508:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b50a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b50e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b512:	83 c4 1c             	add    esp,0x1c
c001b515:	5b                   	pop    ebx
c001b516:	5e                   	pop    esi
c001b517:	5f                   	pop    edi
c001b518:	5d                   	pop    ebp
c001b519:	e9 64 10 ff ff       	jmp    c000c582 <Device::preOpenPCI(PCIDeviceInfo)>
c001b51e:	83 c4 1c             	add    esp,0x1c
c001b521:	5b                   	pop    ebx
c001b522:	5e                   	pop    esi
c001b523:	5f                   	pop    edi
c001b524:	5d                   	pop    ebp
c001b525:	c3                   	ret    

c001b526 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b526:	55                   	push   ebp
c001b527:	57                   	push   edi
c001b528:	56                   	push   esi
c001b529:	53                   	push   ebx
c001b52a:	83 ec 68             	sub    esp,0x68
c001b52d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b534:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b538:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b53c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b543:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b548:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b54c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b553:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b558:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b55c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b561:	6a 0c                	push   0xc
c001b563:	57                   	push   edi
c001b564:	53                   	push   ebx
c001b565:	56                   	push   esi
c001b566:	55                   	push   ebp
c001b567:	e8 24 f8 ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b56c:	83 c4 20             	add    esp,0x20
c001b56f:	57                   	push   edi
c001b570:	53                   	push   ebx
c001b571:	56                   	push   esi
c001b572:	55                   	push   ebp
c001b573:	e8 0e f9 ff ff       	call   c001ae86 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b578:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b57d:	57                   	push   edi
c001b57e:	53                   	push   ebx
c001b57f:	56                   	push   esi
c001b580:	55                   	push   ebp
c001b581:	e8 96 f9 ff ff       	call   c001af1c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b586:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b58a:	83 c4 14             	add    esp,0x14
c001b58d:	6a 3c                	push   0x3c
c001b58f:	57                   	push   edi
c001b590:	53                   	push   ebx
c001b591:	56                   	push   esi
c001b592:	55                   	push   ebp
c001b593:	e8 f8 f7 ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b598:	0f b6 c4             	movzx  eax,ah
c001b59b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b59f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b5a3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b5a7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b5ac:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b5b2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b5b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5bc:	83 c4 20             	add    esp,0x20
c001b5bf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b5c4:	74 30                	je     c001b5f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5c6:	31 c0                	xor    eax,eax
c001b5c8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b5cc:	7e 28                	jle    c001b5f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5ce:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b5d6:	39 cb                	cmp    ebx,ecx
c001b5d8:	75 19                	jne    c001b5f3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5da:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b5e2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b5e6:	75 0b                	jne    c001b5f3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5e8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b5ef:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b5f3:	40                   	inc    eax
c001b5f4:	eb d2                	jmp    c001b5c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b5f6:	31 d2                	xor    edx,edx
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	57                   	push   edi
c001b5fc:	53                   	push   ebx
c001b5fd:	56                   	push   esi
c001b5fe:	52                   	push   edx
c001b5ff:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b603:	55                   	push   ebp
c001b604:	e8 5f f9 ff ff       	call   c001af68 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b609:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b60d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b611:	42                   	inc    edx
c001b612:	83 c4 20             	add    esp,0x20
c001b615:	83 fa 06             	cmp    edx,0x6
c001b618:	75 de                	jne    c001b5f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b61a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b61e:	83 ec 0c             	sub    esp,0xc
c001b621:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b625:	c1 e2 08             	shl    edx,0x8
c001b628:	0f b6 c4             	movzx  eax,ah
c001b62b:	09 d0                	or     eax,edx
c001b62d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b632:	6a 02                	push   0x2
c001b634:	57                   	push   edi
c001b635:	53                   	push   ebx
c001b636:	56                   	push   esi
c001b637:	55                   	push   ebp
c001b638:	e8 53 f7 ff ff       	call   c001ad90 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b63d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b642:	83 c4 20             	add    esp,0x20
c001b645:	57                   	push   edi
c001b646:	53                   	push   ebx
c001b647:	56                   	push   esi
c001b648:	55                   	push   ebp
c001b649:	e8 82 f8 ff ff       	call   c001aed0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b64e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b652:	57                   	push   edi
c001b653:	53                   	push   ebx
c001b654:	56                   	push   esi
c001b655:	55                   	push   ebp
c001b656:	e8 df f7 ff ff       	call   c001ae3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b65b:	b9 09 00 00 00       	mov    ecx,0x9
c001b660:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b665:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b669:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b66d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b671:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b675:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b679:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b67d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b681:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b685:	83 ec 0c             	sub    esp,0xc
c001b688:	fc                   	cld    
c001b689:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b68d:	89 e7                	mov    edi,esp
c001b68f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b691:	55                   	push   ebp
c001b692:	e8 09 fd ff ff       	call   c001b3a0 <PCI::foundDevice(PCIDeviceInfo)>
c001b697:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b69d:	5b                   	pop    ebx
c001b69e:	5e                   	pop    esi
c001b69f:	5f                   	pop    edi
c001b6a0:	5d                   	pop    ebp
c001b6a1:	c3                   	ret    

c001b6a2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b6a2:	55                   	push   ebp
c001b6a3:	57                   	push   edi
c001b6a4:	56                   	push   esi
c001b6a5:	53                   	push   ebx
c001b6a6:	83 ec 0c             	sub    esp,0xc
c001b6a9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b6ae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6b3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b6b7:	6a 00                	push   0x0
c001b6b9:	56                   	push   esi
c001b6ba:	57                   	push   edi
c001b6bb:	55                   	push   ebp
c001b6bc:	e8 79 f7 ff ff       	call   c001ae3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6c1:	6a 00                	push   0x0
c001b6c3:	56                   	push   esi
c001b6c4:	57                   	push   edi
c001b6c5:	55                   	push   ebp
c001b6c6:	e8 5b fe ff ff       	call   c001b526 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6cb:	83 c4 20             	add    esp,0x20
c001b6ce:	6a 00                	push   0x0
c001b6d0:	56                   	push   esi
c001b6d1:	57                   	push   edi
c001b6d2:	55                   	push   ebp
c001b6d3:	e8 86 f7 ff ff       	call   c001ae5e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6d8:	83 c4 10             	add    esp,0x10
c001b6db:	a8 80                	test   al,0x80
c001b6dd:	74 2d                	je     c001b70c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b6df:	bb 01 00 00 00       	mov    ebx,0x1
c001b6e4:	53                   	push   ebx
c001b6e5:	56                   	push   esi
c001b6e6:	57                   	push   edi
c001b6e7:	55                   	push   ebp
c001b6e8:	e8 4d f7 ff ff       	call   c001ae3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6ed:	83 c4 10             	add    esp,0x10
c001b6f0:	0f b7 c0             	movzx  eax,ax
c001b6f3:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6f8:	74 0c                	je     c001b706 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b6fa:	53                   	push   ebx
c001b6fb:	56                   	push   esi
c001b6fc:	57                   	push   edi
c001b6fd:	55                   	push   ebp
c001b6fe:	e8 23 fe ff ff       	call   c001b526 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b703:	83 c4 10             	add    esp,0x10
c001b706:	43                   	inc    ebx
c001b707:	83 fb 08             	cmp    ebx,0x8
c001b70a:	75 d8                	jne    c001b6e4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b70c:	83 c4 0c             	add    esp,0xc
c001b70f:	5b                   	pop    ebx
c001b710:	5e                   	pop    esi
c001b711:	5f                   	pop    edi
c001b712:	5d                   	pop    ebp
c001b713:	c3                   	ret    

c001b714 <PCI::detect()>:
c001b714:	56                   	push   esi
c001b715:	53                   	push   ebx
c001b716:	53                   	push   ebx
c001b717:	31 db                	xor    ebx,ebx
c001b719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b71d:	6a 00                	push   0x0
c001b71f:	6a 00                	push   0x0
c001b721:	6a 00                	push   0x0
c001b723:	56                   	push   esi
c001b724:	e8 35 f7 ff ff       	call   c001ae5e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b729:	83 c4 10             	add    esp,0x10
c001b72c:	a8 80                	test   al,0x80
c001b72e:	75 21                	jne    c001b751 <PCI::detect()+0x3d>
c001b730:	51                   	push   ecx
c001b731:	51                   	push   ecx
c001b732:	6a 00                	push   0x0
c001b734:	56                   	push   esi
c001b735:	e8 42 fc ff ff       	call   c001b37c <PCI::checkBus(unsigned char)>
c001b73a:	83 c4 10             	add    esp,0x10
c001b73d:	eb 2a                	jmp    c001b769 <PCI::detect()+0x55>
c001b73f:	52                   	push   edx
c001b740:	52                   	push   edx
c001b741:	53                   	push   ebx
c001b742:	43                   	inc    ebx
c001b743:	56                   	push   esi
c001b744:	e8 33 fc ff ff       	call   c001b37c <PCI::checkBus(unsigned char)>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	83 fb 08             	cmp    ebx,0x8
c001b74f:	74 18                	je     c001b769 <PCI::detect()+0x55>
c001b751:	53                   	push   ebx
c001b752:	6a 00                	push   0x0
c001b754:	6a 00                	push   0x0
c001b756:	56                   	push   esi
c001b757:	e8 de f6 ff ff       	call   c001ae3a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b75c:	83 c4 10             	add    esp,0x10
c001b75f:	0f b7 c0             	movzx  eax,ax
c001b762:	3d ff ff 00 00       	cmp    eax,0xffff
c001b767:	74 d6                	je     c001b73f <PCI::detect()+0x2b>
c001b769:	58                   	pop    eax
c001b76a:	5b                   	pop    ebx
c001b76b:	5e                   	pop    esi
c001b76c:	c3                   	ret    
c001b76d:	90                   	nop

c001b76e <IDE::close(int, int, void*)>:
c001b76e:	83 c8 ff             	or     eax,0xffffffff
c001b771:	c3                   	ret    

c001b772 <IDE::IDE()>:
c001b772:	83 ec 0c             	sub    esp,0xc
c001b775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b779:	83 ec 08             	sub    esp,0x8
c001b77c:	68 50 2b 02 c0       	push   0xc0022b50
c001b781:	50                   	push   eax
c001b782:	e8 f9 11 ff ff       	call   c000c980 <HardDiskController::HardDiskController(char const*)>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c001b78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b793:	89 10                	mov    DWORD PTR [eax],edx
c001b795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b799:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b7a0:	90                   	nop
c001b7a1:	83 c4 0c             	add    esp,0xc
c001b7a4:	c3                   	ret    
c001b7a5:	90                   	nop

c001b7a6 <IDE::prepareInterrupt(unsigned char)>:
c001b7a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7af:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b7b7:	c3                   	ret    

c001b7b8 <selectDrive(unsigned char, unsigned char)>:
c001b7b8:	c3                   	ret    
c001b7b9:	90                   	nop

c001b7ba <IDE::getBase(unsigned char)>:
c001b7ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b7bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7c3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b7cb:	c3                   	ret    

c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b7cc:	55                   	push   ebp
c001b7cd:	57                   	push   edi
c001b7ce:	56                   	push   esi
c001b7cf:	53                   	push   ebx
c001b7d0:	83 ec 1c             	sub    esp,0x1c
c001b7d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b7d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b7db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7e3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b7e6:	80 f9 03             	cmp    cl,0x3
c001b7e9:	77 4f                	ja     c001b83a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b7eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ef:	0f b6 f2             	movzx  esi,dl
c001b7f2:	0f b6 db             	movzx  ebx,bl
c001b7f5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b7f8:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b7fd:	80 ca 80             	or     dl,0x80
c001b800:	52                   	push   edx
c001b801:	6a 0c                	push   0xc
c001b803:	56                   	push   esi
c001b804:	57                   	push   edi
c001b805:	e8 c2 ff ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b80a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b80f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b813:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b817:	ee                   	out    dx,al
c001b818:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b81d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b821:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b825:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b82d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b831:	83 c4 2c             	add    esp,0x2c
c001b834:	5b                   	pop    ebx
c001b835:	5e                   	pop    esi
c001b836:	5f                   	pop    edi
c001b837:	5d                   	pop    ebp
c001b838:	eb 92                	jmp    c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b83a:	0f b6 cb             	movzx  ecx,bl
c001b83d:	83 f9 07             	cmp    ecx,0x7
c001b840:	77 12                	ja     c001b854 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b842:	0f b6 d2             	movzx  edx,dl
c001b845:	0f b6 db             	movzx  ebx,bl
c001b848:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b850:	01 da                	add    edx,ebx
c001b852:	eb 2f                	jmp    c001b883 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b854:	83 f9 0d             	cmp    ecx,0xd
c001b857:	77 13                	ja     c001b86c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b859:	0f b6 d2             	movzx  edx,dl
c001b85c:	0f b6 db             	movzx  ebx,bl
c001b85f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b866:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b86a:	eb 17                	jmp    c001b883 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b86c:	83 f9 15             	cmp    ecx,0x15
c001b86f:	77 13                	ja     c001b884 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b871:	0f b6 d2             	movzx  edx,dl
c001b874:	0f b6 db             	movzx  ebx,bl
c001b877:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b87f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b883:	ee                   	out    dx,al
c001b884:	83 c4 1c             	add    esp,0x1c
c001b887:	5b                   	pop    ebx
c001b888:	5e                   	pop    esi
c001b889:	5f                   	pop    edi
c001b88a:	5d                   	pop    ebp
c001b88b:	c3                   	ret    

c001b88c <IDE::read(unsigned char, unsigned char)>:
c001b88c:	57                   	push   edi
c001b88d:	56                   	push   esi
c001b88e:	53                   	push   ebx
c001b88f:	83 ec 10             	sub    esp,0x10
c001b892:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b896:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b89a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b89e:	8d 42 f8             	lea    eax,[edx-0x8]
c001b8a1:	3c 03                	cmp    al,0x3
c001b8a3:	77 48                	ja     c001b8ed <IDE::read(unsigned char, unsigned char)+0x61>
c001b8a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b8a9:	0f b6 f1             	movzx  esi,cl
c001b8ac:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b8af:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b8b4:	0c 80                	or     al,0x80
c001b8b6:	50                   	push   eax
c001b8b7:	6a 0c                	push   0xc
c001b8b9:	56                   	push   esi
c001b8ba:	53                   	push   ebx
c001b8bb:	e8 0c ff ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8c4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b8c9:	0f b6 d2             	movzx  edx,dl
c001b8cc:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b8d0:	ec                   	in     al,dx
c001b8d1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8d5:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b8da:	52                   	push   edx
c001b8db:	6a 0c                	push   0xc
c001b8dd:	56                   	push   esi
c001b8de:	53                   	push   ebx
c001b8df:	e8 e8 fe ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8e4:	83 c4 20             	add    esp,0x20
c001b8e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8eb:	eb 4c                	jmp    c001b939 <IDE::read(unsigned char, unsigned char)+0xad>
c001b8ed:	0f b6 f2             	movzx  esi,dl
c001b8f0:	83 fe 07             	cmp    esi,0x7
c001b8f3:	77 12                	ja     c001b907 <IDE::read(unsigned char, unsigned char)+0x7b>
c001b8f5:	0f b6 c9             	movzx  ecx,cl
c001b8f8:	0f b6 d2             	movzx  edx,dl
c001b8fb:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b903:	01 c2                	add    edx,eax
c001b905:	eb 31                	jmp    c001b938 <IDE::read(unsigned char, unsigned char)+0xac>
c001b907:	83 fe 0d             	cmp    esi,0xd
c001b90a:	77 13                	ja     c001b91f <IDE::read(unsigned char, unsigned char)+0x93>
c001b90c:	0f b6 c9             	movzx  ecx,cl
c001b90f:	0f b6 d2             	movzx  edx,dl
c001b912:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b919:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b91d:	eb 19                	jmp    c001b938 <IDE::read(unsigned char, unsigned char)+0xac>
c001b91f:	31 c0                	xor    eax,eax
c001b921:	83 fe 15             	cmp    esi,0x15
c001b924:	77 13                	ja     c001b939 <IDE::read(unsigned char, unsigned char)+0xad>
c001b926:	0f b6 c9             	movzx  ecx,cl
c001b929:	0f b6 d2             	movzx  edx,dl
c001b92c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b934:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b938:	ec                   	in     al,dx
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	5b                   	pop    ebx
c001b93d:	5e                   	pop    esi
c001b93e:	5f                   	pop    edi
c001b93f:	c3                   	ret    

c001b940 <IDE::waitInterrupt(unsigned char)>:
c001b940:	55                   	push   ebp
c001b941:	57                   	push   edi
c001b942:	56                   	push   esi
c001b943:	53                   	push   ebx
c001b944:	31 db                	xor    ebx,ebx
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b94d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b952:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b95a:	89 e8                	mov    eax,ebp
c001b95c:	84 c0                	test   al,al
c001b95e:	75 30                	jne    c001b990 <IDE::waitInterrupt(unsigned char)+0x50>
c001b960:	50                   	push   eax
c001b961:	6a 0c                	push   0xc
c001b963:	56                   	push   esi
c001b964:	57                   	push   edi
c001b965:	e8 22 ff ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001b96a:	83 c4 10             	add    esp,0x10
c001b96d:	a8 01                	test   al,0x1
c001b96f:	75 27                	jne    c001b998 <IDE::waitInterrupt(unsigned char)+0x58>
c001b971:	f6 c3 04             	test   bl,0x4
c001b974:	75 12                	jne    c001b988 <IDE::waitInterrupt(unsigned char)+0x48>
c001b976:	83 fb 32             	cmp    ebx,0x32
c001b979:	7e 0d                	jle    c001b988 <IDE::waitInterrupt(unsigned char)+0x48>
c001b97b:	83 ec 0c             	sub    esp,0xc
c001b97e:	6a 64                	push   0x64
c001b980:	e8 73 a4 ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	83 fb 3c             	cmp    ebx,0x3c
c001b98b:	74 0b                	je     c001b998 <IDE::waitInterrupt(unsigned char)+0x58>
c001b98d:	43                   	inc    ebx
c001b98e:	eb c2                	jmp    c001b952 <IDE::waitInterrupt(unsigned char)+0x12>
c001b990:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b998:	83 c4 0c             	add    esp,0xc
c001b99b:	89 e8                	mov    eax,ebp
c001b99d:	5b                   	pop    ebx
c001b99e:	5e                   	pop    esi
c001b99f:	5f                   	pop    edi
c001b9a0:	5d                   	pop    ebp
c001b9a1:	c3                   	ret    

c001b9a2 <ideChannel0IRQHandler(regs*, void*)>:
c001b9a2:	83 ec 10             	sub    esp,0x10
c001b9a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b9b0:	6a 07                	push   0x7
c001b9b2:	6a 00                	push   0x0
c001b9b4:	50                   	push   eax
c001b9b5:	e8 d2 fe ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001b9ba:	83 c4 1c             	add    esp,0x1c
c001b9bd:	c3                   	ret    

c001b9be <ideChannel1IRQHandler(regs*, void*)>:
c001b9be:	83 ec 10             	sub    esp,0x10
c001b9c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9cc:	6a 07                	push   0x7
c001b9ce:	6a 01                	push   0x1
c001b9d0:	50                   	push   eax
c001b9d1:	e8 b6 fe ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001b9d6:	83 c4 1c             	add    esp,0x1c
c001b9d9:	c3                   	ret    

c001b9da <IDE::enableIRQs(unsigned char, bool)>:
c001b9da:	57                   	push   edi
c001b9db:	b8 02 00 00 00       	mov    eax,0x2
c001b9e0:	56                   	push   esi
c001b9e1:	53                   	push   ebx
c001b9e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9ef:	74 02                	je     c001b9f3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b9f1:	31 c0                	xor    eax,eax
c001b9f3:	0f b6 db             	movzx  ebx,bl
c001b9f6:	bf 04 00 00 00       	mov    edi,0x4
c001b9fb:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ba02:	50                   	push   eax
c001ba03:	6a 0c                	push   0xc
c001ba05:	53                   	push   ebx
c001ba06:	56                   	push   esi
c001ba07:	e8 c0 fd ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba0c:	83 c4 10             	add    esp,0x10
c001ba0f:	50                   	push   eax
c001ba10:	6a 0c                	push   0xc
c001ba12:	53                   	push   ebx
c001ba13:	56                   	push   esi
c001ba14:	e8 73 fe ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001ba19:	83 c4 10             	add    esp,0x10
c001ba1c:	4f                   	dec    edi
c001ba1d:	75 f0                	jne    c001ba0f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ba1f:	5b                   	pop    ebx
c001ba20:	5e                   	pop    esi
c001ba21:	5f                   	pop    edi
c001ba22:	c3                   	ret    
c001ba23:	90                   	nop

c001ba24 <IDE::open(int, int, void*)>:
c001ba24:	55                   	push   ebp
c001ba25:	57                   	push   edi
c001ba26:	56                   	push   esi
c001ba27:	53                   	push   ebx
c001ba28:	83 ec 1c             	sub    esp,0x1c
c001ba2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba2f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba36:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba3f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba48:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba4f:	0f 85 da 02 00 00    	jne    c001bd2f <IDE::open(int, int, void*)+0x30b>
c001ba55:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ba5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba63:	83 e0 7f             	and    eax,0x7f
c001ba66:	83 f8 05             	cmp    eax,0x5
c001ba69:	74 05                	je     c001ba70 <IDE::open(int, int, void*)+0x4c>
c001ba6b:	83 f8 0f             	cmp    eax,0xf
c001ba6e:	75 32                	jne    c001baa2 <IDE::open(int, int, void*)+0x7e>
c001ba70:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba76:	83 e0 fc             	and    eax,0xfffffffc
c001ba79:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba80:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba86:	83 e0 fc             	and    eax,0xfffffffc
c001ba89:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba90:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba96:	83 e0 fc             	and    eax,0xfffffffc
c001ba99:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001baa0:	eb 14                	jmp    c001bab6 <IDE::open(int, int, void*)+0x92>
c001baa2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001baac:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bab6:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001babd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bac2:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bac9:	89 fa                	mov    edx,edi
c001bacb:	89 f1                	mov    ecx,esi
c001bacd:	c1 e1 10             	shl    ecx,0x10
c001bad0:	89 e8                	mov    eax,ebp
c001bad2:	c1 e0 0b             	shl    eax,0xb
c001bad5:	09 c1                	or     ecx,eax
c001bad7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bade:	c1 e0 08             	shl    eax,0x8
c001bae1:	09 c1                	or     ecx,eax
c001bae3:	89 c8                	mov    eax,ecx
c001bae5:	0d 08 00 00 80       	or     eax,0x80000008
c001baea:	ef                   	out    dx,eax
c001baeb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baf0:	ed                   	in     eax,dx
c001baf1:	c1 e8 10             	shr    eax,0x10
c001baf4:	3d ff ff 00 00       	cmp    eax,0xffff
c001baf9:	0f 84 f9 00 00 00    	je     c001bbf8 <IDE::open(int, int, void*)+0x1d4>
c001baff:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb05:	89 fa                	mov    edx,edi
c001bb07:	89 c8                	mov    eax,ecx
c001bb09:	ef                   	out    dx,eax
c001bb0a:	b0 fe                	mov    al,0xfe
c001bb0c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb11:	ee                   	out    dx,al
c001bb12:	89 c8                	mov    eax,ecx
c001bb14:	89 fa                	mov    edx,edi
c001bb16:	ef                   	out    dx,eax
c001bb17:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb1c:	ed                   	in     eax,dx
c001bb1d:	3c fe                	cmp    al,0xfe
c001bb1f:	0f 85 a4 00 00 00    	jne    c001bbc9 <IDE::open(int, int, void*)+0x1a5>
c001bb25:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bb2b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb32:	74 30                	je     c001bb64 <IDE::open(int, int, void*)+0x140>
c001bb34:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb3a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	40                   	inc    eax
c001bb42:	0f b6 c0             	movzx  eax,al
c001bb45:	50                   	push   eax
c001bb46:	55                   	push   ebp
c001bb47:	56                   	push   esi
c001bb48:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb4e:	51                   	push   ecx
c001bb4f:	e8 84 3a ff ff       	call   c000f5d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb54:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb59:	83 c4 1c             	add    esp,0x1c
c001bb5c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb62:	eb 0a                	jmp    c001bb6e <IDE::open(int, int, void*)+0x14a>
c001bb64:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb6e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb75:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bb7a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb81:	89 ea                	mov    edx,ebp
c001bb83:	c1 e1 10             	shl    ecx,0x10
c001bb86:	c1 e0 08             	shl    eax,0x8
c001bb89:	09 c1                	or     ecx,eax
c001bb8b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb92:	c1 e0 0b             	shl    eax,0xb
c001bb95:	09 c1                	or     ecx,eax
c001bb97:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb9d:	89 c8                	mov    eax,ecx
c001bb9f:	ef                   	out    dx,eax
c001bba0:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bba6:	be fc 0c 00 00       	mov    esi,0xcfc
c001bbab:	89 f2                	mov    edx,esi
c001bbad:	89 f8                	mov    eax,edi
c001bbaf:	ee                   	out    dx,al
c001bbb0:	89 c8                	mov    eax,ecx
c001bbb2:	89 ea                	mov    edx,ebp
c001bbb4:	ef                   	out    dx,eax
c001bbb5:	89 f2                	mov    edx,esi
c001bbb7:	ed                   	in     eax,dx
c001bbb8:	0f b6 c0             	movzx  eax,al
c001bbbb:	39 f8                	cmp    eax,edi
c001bbbd:	74 49                	je     c001bc08 <IDE::open(int, int, void*)+0x1e4>
c001bbbf:	83 ec 0c             	sub    esp,0xc
c001bbc2:	68 68 2b 02 c0       	push   0xc0022b68
c001bbc7:	eb 37                	jmp    c001bc00 <IDE::open(int, int, void*)+0x1dc>
c001bbc9:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bbd2:	75 1a                	jne    c001bbee <IDE::open(int, int, void*)+0x1ca>
c001bbd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bbd9:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bbde:	74 05                	je     c001bbe5 <IDE::open(int, int, void*)+0x1c1>
c001bbe0:	83 c0 80             	add    eax,0xffffff80
c001bbe3:	75 09                	jne    c001bbee <IDE::open(int, int, void*)+0x1ca>
c001bbe5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bbec:	eb 1a                	jmp    c001bc08 <IDE::open(int, int, void*)+0x1e4>
c001bbee:	83 ec 0c             	sub    esp,0xc
c001bbf1:	68 70 2b 02 c0       	push   0xc0022b70
c001bbf6:	eb 08                	jmp    c001bc00 <IDE::open(int, int, void*)+0x1dc>
c001bbf8:	83 ec 0c             	sub    esp,0xc
c001bbfb:	68 a1 2b 02 c0       	push   0xc0022ba1
c001bc00:	e8 d4 55 ff ff       	call   c00111d9 <KePanic(char const*)>
c001bc05:	83 c4 10             	add    esp,0x10
c001bc08:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bc0f:	74 1a                	je     c001bc2b <IDE::open(int, int, void*)+0x207>
c001bc11:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc17:	83 e0 fc             	and    eax,0xfffffffc
c001bc1a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc21:	83 c0 08             	add    eax,0x8
c001bc24:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc31:	89 c2                	mov    edx,eax
c001bc33:	83 e2 0f             	and    edx,0xf
c001bc36:	83 fa 08             	cmp    edx,0x8
c001bc39:	75 0a                	jne    c001bc45 <IDE::open(int, int, void*)+0x221>
c001bc3b:	83 e8 02             	sub    eax,0x2
c001bc3e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc45:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc4b:	89 c2                	mov    edx,eax
c001bc4d:	83 e2 0f             	and    edx,0xf
c001bc50:	83 fa 08             	cmp    edx,0x8
c001bc53:	75 0a                	jne    c001bc5f <IDE::open(int, int, void*)+0x23b>
c001bc55:	83 e8 02             	sub    eax,0x2
c001bc58:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc5f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc66:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc6d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc70:	89 d0                	mov    eax,edx
c001bc72:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc76:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc79:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc7d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc81:	83 e1 3f             	and    ecx,0x3f
c001bc84:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc88:	89 f9                	mov    ecx,edi
c001bc8a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc91:	8d 78 02             	lea    edi,[eax+0x2]
c001bc94:	0f b6 c9             	movzx  ecx,cl
c001bc97:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc9a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc9e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bca2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bca6:	83 e2 3f             	and    edx,0x3f
c001bca9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcad:	89 f9                	mov    ecx,edi
c001bcaf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bcb5:	8d 78 03             	lea    edi,[eax+0x3]
c001bcb8:	0f b6 d1             	movzx  edx,cl
c001bcbb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcbe:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bcc2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcc6:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bcca:	83 e1 3f             	and    ecx,0x3f
c001bccd:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcd1:	89 f9                	mov    ecx,edi
c001bcd3:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bcd9:	8d 78 04             	lea    edi,[eax+0x4]
c001bcdc:	0f b6 c9             	movzx  ecx,cl
c001bcdf:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bce2:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bce6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcea:	89 fa                	mov    edx,edi
c001bcec:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bcf2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bcf6:	83 e2 3f             	and    edx,0x3f
c001bcf9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcfd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd04:	66 85 f6             	test   si,si
c001bd07:	74 65                	je     c001bd6e <IDE::open(int, int, void*)+0x34a>
c001bd09:	89 f9                	mov    ecx,edi
c001bd0b:	83 c0 05             	add    eax,0x5
c001bd0e:	0f b6 d1             	movzx  edx,cl
c001bd11:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd14:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd18:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd1c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd22:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bd26:	83 e0 3f             	and    eax,0x3f
c001bd29:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bd2d:	eb 3f                	jmp    c001bd6e <IDE::open(int, int, void*)+0x34a>
c001bd2f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd36:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bd3c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd43:	05 06 02 00 00       	add    eax,0x206
c001bd48:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd4f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd56:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd5d:	05 06 02 00 00       	add    eax,0x206
c001bd62:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd69:	e9 bd fe ff ff       	jmp    c001bc2b <IDE::open(int, int, void*)+0x207>
c001bd6e:	50                   	push   eax
c001bd6f:	50                   	push   eax
c001bd70:	6a 00                	push   0x0
c001bd72:	53                   	push   ebx
c001bd73:	e8 2e fa ff ff       	call   c001b7a6 <IDE::prepareInterrupt(unsigned char)>
c001bd78:	5a                   	pop    edx
c001bd79:	59                   	pop    ecx
c001bd7a:	6a 01                	push   0x1
c001bd7c:	53                   	push   ebx
c001bd7d:	e8 24 fa ff ff       	call   c001b7a6 <IDE::prepareInterrupt(unsigned char)>
c001bd82:	83 c4 0c             	add    esp,0xc
c001bd85:	6a 00                	push   0x0
c001bd87:	6a 00                	push   0x0
c001bd89:	53                   	push   ebx
c001bd8a:	e8 4b fc ff ff       	call   c001b9da <IDE::enableIRQs(unsigned char, bool)>
c001bd8f:	83 c4 0c             	add    esp,0xc
c001bd92:	6a 00                	push   0x0
c001bd94:	6a 01                	push   0x1
c001bd96:	53                   	push   ebx
c001bd97:	e8 3e fc ff ff       	call   c001b9da <IDE::enableIRQs(unsigned char, bool)>
c001bd9c:	83 c4 10             	add    esp,0x10
c001bd9f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bda6:	74 34                	je     c001bddc <IDE::open(int, int, void*)+0x3b8>
c001bda8:	83 ec 0c             	sub    esp,0xc
c001bdab:	53                   	push   ebx
c001bdac:	6a 01                	push   0x1
c001bdae:	68 a2 b9 01 c0       	push   0xc001b9a2
c001bdb3:	6a 0e                	push   0xe
c001bdb5:	53                   	push   ebx
c001bdb6:	e8 2d 08 ff ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdbb:	83 c4 14             	add    esp,0x14
c001bdbe:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdc4:	53                   	push   ebx
c001bdc5:	6a 01                	push   0x1
c001bdc7:	68 be b9 01 c0       	push   0xc001b9be
c001bdcc:	6a 0f                	push   0xf
c001bdce:	53                   	push   ebx
c001bdcf:	e8 14 08 ff ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdd4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bdda:	eb 38                	jmp    c001be14 <IDE::open(int, int, void*)+0x3f0>
c001bddc:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bde6:	83 ec 0c             	sub    esp,0xc
c001bde9:	53                   	push   ebx
c001bdea:	6a 00                	push   0x0
c001bdec:	68 a2 b9 01 c0       	push   0xc001b9a2
c001bdf1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bdf7:	53                   	push   ebx
c001bdf8:	e8 eb 07 ff ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdfd:	83 c4 14             	add    esp,0x14
c001be00:	53                   	push   ebx
c001be01:	6a 00                	push   0x0
c001be03:	68 be b9 01 c0       	push   0xc001b9be
c001be08:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be0e:	53                   	push   ebx
c001be0f:	e8 d4 07 ff ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be16:	83 c4 20             	add    esp,0x20
c001be19:	83 ec 0c             	sub    esp,0xc
c001be1c:	53                   	push   ebx
c001be1d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be20:	83 c4 0c             	add    esp,0xc
c001be23:	6a 07                	push   0x7
c001be25:	6a 00                	push   0x0
c001be27:	53                   	push   ebx
c001be28:	e8 5f fa ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001be2d:	83 c4 0c             	add    esp,0xc
c001be30:	6a 07                	push   0x7
c001be32:	6a 01                	push   0x1
c001be34:	53                   	push   ebx
c001be35:	e8 52 fa ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001be3a:	83 c4 0c             	add    esp,0xc
c001be3d:	6a 01                	push   0x1
c001be3f:	6a 00                	push   0x0
c001be41:	53                   	push   ebx
c001be42:	e8 93 fb ff ff       	call   c001b9da <IDE::enableIRQs(unsigned char, bool)>
c001be47:	83 c4 0c             	add    esp,0xc
c001be4a:	6a 01                	push   0x1
c001be4c:	6a 01                	push   0x1
c001be4e:	53                   	push   ebx
c001be4f:	e8 86 fb ff ff       	call   c001b9da <IDE::enableIRQs(unsigned char, bool)>
c001be54:	83 c4 2c             	add    esp,0x2c
c001be57:	31 c0                	xor    eax,eax
c001be59:	5b                   	pop    ebx
c001be5a:	5e                   	pop    esi
c001be5b:	5f                   	pop    edi
c001be5c:	5d                   	pop    ebp
c001be5d:	c3                   	ret    

c001be5e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be5e:	55                   	push   ebp
c001be5f:	57                   	push   edi
c001be60:	56                   	push   esi
c001be61:	53                   	push   ebx
c001be62:	83 ec 1c             	sub    esp,0x1c
c001be65:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be71:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be75:	8d 42 f8             	lea    eax,[edx-0x8]
c001be78:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be7c:	3c 03                	cmp    al,0x3
c001be7e:	77 5a                	ja     c001beda <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be84:	0f b6 db             	movzx  ebx,bl
c001be87:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be8b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be8e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be93:	0c 80                	or     al,0x80
c001be95:	50                   	push   eax
c001be96:	6a 0c                	push   0xc
c001be98:	53                   	push   ebx
c001be99:	56                   	push   esi
c001be9a:	e8 2d f9 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bea3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bea8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001beac:	0f b6 d2             	movzx  edx,dl
c001beaf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001beb3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001beb5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001beba:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bebe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bec2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001beca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bece:	83 c4 2c             	add    esp,0x2c
c001bed1:	5b                   	pop    ebx
c001bed2:	5e                   	pop    esi
c001bed3:	5f                   	pop    edi
c001bed4:	5d                   	pop    ebp
c001bed5:	e9 f2 f8 ff ff       	jmp    c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beda:	0f b6 c2             	movzx  eax,dl
c001bedd:	83 f8 07             	cmp    eax,0x7
c001bee0:	77 12                	ja     c001bef4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bee2:	0f b6 db             	movzx  ebx,bl
c001bee5:	0f b6 c2             	movzx  eax,dl
c001bee8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bef0:	01 c2                	add    edx,eax
c001bef2:	eb 2f                	jmp    c001bf23 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bef4:	83 f8 0d             	cmp    eax,0xd
c001bef7:	77 13                	ja     c001bf0c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bef9:	0f b6 db             	movzx  ebx,bl
c001befc:	0f b6 d2             	movzx  edx,dl
c001beff:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bf06:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf0a:	eb 17                	jmp    c001bf23 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf0c:	83 f8 15             	cmp    eax,0x15
c001bf0f:	77 14                	ja     c001bf25 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bf11:	0f b6 db             	movzx  ebx,bl
c001bf14:	0f b6 d2             	movzx  edx,dl
c001bf17:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bf1f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf23:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf25:	83 c4 1c             	add    esp,0x1c
c001bf28:	5b                   	pop    ebx
c001bf29:	5e                   	pop    esi
c001bf2a:	5f                   	pop    edi
c001bf2b:	5d                   	pop    ebp
c001bf2c:	c3                   	ret    
c001bf2d:	90                   	nop

c001bf2e <IDE::detect()>:
c001bf2e:	55                   	push   ebp
c001bf2f:	57                   	push   edi
c001bf30:	56                   	push   esi
c001bf31:	53                   	push   ebx
c001bf32:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf38:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf3f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf46:	0f 85 9e 02 00 00    	jne    c001c1ea <IDE::detect()+0x2bc>
c001bf4c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf53:	31 f6                	xor    esi,esi
c001bf55:	31 ff                	xor    edi,edi
c001bf57:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf5f:	89 f8                	mov    eax,edi
c001bf61:	c1 e0 06             	shl    eax,0x6
c001bf64:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf6c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf70:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf78:	c1 e0 04             	shl    eax,0x4
c001bf7b:	83 c8 a0             	or     eax,0xffffffa0
c001bf7e:	0f b6 c0             	movzx  eax,al
c001bf81:	50                   	push   eax
c001bf82:	6a 06                	push   0x6
c001bf84:	56                   	push   esi
c001bf85:	53                   	push   ebx
c001bf86:	e8 41 f8 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf8b:	83 c4 0c             	add    esp,0xc
c001bf8e:	6a 0c                	push   0xc
c001bf90:	56                   	push   esi
c001bf91:	53                   	push   ebx
c001bf92:	e8 f5 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bf97:	83 c4 0c             	add    esp,0xc
c001bf9a:	6a 0c                	push   0xc
c001bf9c:	56                   	push   esi
c001bf9d:	53                   	push   ebx
c001bf9e:	e8 e9 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bfa3:	83 c4 0c             	add    esp,0xc
c001bfa6:	6a 0c                	push   0xc
c001bfa8:	56                   	push   esi
c001bfa9:	53                   	push   ebx
c001bfaa:	e8 dd f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bfaf:	83 c4 0c             	add    esp,0xc
c001bfb2:	6a 0c                	push   0xc
c001bfb4:	56                   	push   esi
c001bfb5:	53                   	push   ebx
c001bfb6:	e8 d1 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bfbb:	68 ec 00 00 00       	push   0xec
c001bfc0:	6a 07                	push   0x7
c001bfc2:	56                   	push   esi
c001bfc3:	53                   	push   ebx
c001bfc4:	e8 03 f8 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfc9:	83 c4 1c             	add    esp,0x1c
c001bfcc:	6a 0c                	push   0xc
c001bfce:	56                   	push   esi
c001bfcf:	53                   	push   ebx
c001bfd0:	e8 b7 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bfd5:	83 c4 0c             	add    esp,0xc
c001bfd8:	6a 0c                	push   0xc
c001bfda:	56                   	push   esi
c001bfdb:	53                   	push   ebx
c001bfdc:	e8 ab f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bfe1:	83 c4 0c             	add    esp,0xc
c001bfe4:	6a 0c                	push   0xc
c001bfe6:	56                   	push   esi
c001bfe7:	53                   	push   ebx
c001bfe8:	e8 9f f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bfed:	83 c4 0c             	add    esp,0xc
c001bff0:	6a 0c                	push   0xc
c001bff2:	56                   	push   esi
c001bff3:	53                   	push   ebx
c001bff4:	e8 93 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001bff9:	83 c4 0c             	add    esp,0xc
c001bffc:	6a 0c                	push   0xc
c001bffe:	56                   	push   esi
c001bfff:	53                   	push   ebx
c001c000:	e8 87 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c005:	83 c4 10             	add    esp,0x10
c001c008:	84 c0                	test   al,al
c001c00a:	0f 84 61 01 00 00    	je     c001c171 <IDE::detect()+0x243>
c001c010:	31 ed                	xor    ebp,ebp
c001c012:	50                   	push   eax
c001c013:	6a 0c                	push   0xc
c001c015:	56                   	push   esi
c001c016:	53                   	push   ebx
c001c017:	e8 70 f8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	a8 01                	test   al,0x1
c001c021:	0f 85 6b 01 00 00    	jne    c001c192 <IDE::detect()+0x264>
c001c027:	a8 80                	test   al,0x80
c001c029:	75 04                	jne    c001c02f <IDE::detect()+0x101>
c001c02b:	a8 08                	test   al,0x8
c001c02d:	75 23                	jne    c001c052 <IDE::detect()+0x124>
c001c02f:	45                   	inc    ebp
c001c030:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c036:	7e da                	jle    c001c012 <IDE::detect()+0xe4>
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	6a 32                	push   0x32
c001c03d:	e8 b6 9d ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c04b:	75 c5                	jne    c001c012 <IDE::detect()+0xe4>
c001c04d:	e9 40 01 00 00       	jmp    c001c192 <IDE::detect()+0x264>
c001c052:	31 c9                	xor    ecx,ecx
c001c054:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c058:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	68 80 00 00 00       	push   0x80
c001c064:	55                   	push   ebp
c001c065:	6a 00                	push   0x0
c001c067:	56                   	push   esi
c001c068:	53                   	push   ebx
c001c069:	e8 f0 fd ff ff       	call   c001be5e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c06e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c073:	89 f8                	mov    eax,edi
c001c075:	c1 e0 06             	shl    eax,0x6
c001c078:	01 d8                	add    eax,ebx
c001c07a:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c081:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c088:	89 d1                	mov    ecx,edx
c001c08a:	89 f2                	mov    edx,esi
c001c08c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c092:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c096:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c09c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0a0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c0a7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c0af:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0b6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0be:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0c4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c0cb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c0d1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c0d5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0d9:	83 c4 20             	add    esp,0x20
c001c0dc:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c0df:	83 c5 02             	add    ebp,0x2
c001c0e2:	83 c0 02             	add    eax,0x2
c001c0e5:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0eb:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c0ee:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c0f4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c0f8:	75 e2                	jne    c001c0dc <IDE::detect()+0x1ae>
c001c0fa:	89 f8                	mov    eax,edi
c001c0fc:	c1 e0 06             	shl    eax,0x6
c001c0ff:	01 d8                	add    eax,ebx
c001c101:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c108:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c10f:	c1 ea 09             	shr    edx,0x9
c001c112:	83 e2 01             	and    edx,0x1
c001c115:	80 e1 01             	and    cl,0x1
c001c118:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c11e:	75 22                	jne    c001c142 <IDE::detect()+0x214>
c001c120:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c127:	74 47                	je     c001c170 <IDE::detect()+0x242>
c001c129:	83 ec 0c             	sub    esp,0xc
c001c12c:	68 7c 01 00 00       	push   0x17c
c001c131:	e8 9d b9 fe ff       	call   c0007ad3 <malloc>
c001c136:	89 04 24             	mov    DWORD PTR [esp],eax
c001c139:	89 c5                	mov    ebp,eax
c001c13b:	e8 16 05 00 00       	call   c001c656 <ATA::ATA()>
c001c140:	eb 17                	jmp    c001c159 <IDE::detect()+0x22b>
c001c142:	83 ec 0c             	sub    esp,0xc
c001c145:	68 84 01 00 00       	push   0x184
c001c14a:	e8 84 b9 fe ff       	call   c0007ad3 <malloc>
c001c14f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c152:	89 c5                	mov    ebp,eax
c001c154:	e8 6f 0e 00 00       	call   c001cfc8 <ATAPI::ATAPI()>
c001c159:	5a                   	pop    edx
c001c15a:	59                   	pop    ecx
c001c15b:	55                   	push   ebp
c001c15c:	53                   	push   ebx
c001c15d:	e8 da 04 ff ff       	call   c000c63c <Device::addChild(Device*)>
c001c162:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c165:	53                   	push   ebx
c001c166:	57                   	push   edi
c001c167:	6a 00                	push   0x0
c001c169:	55                   	push   ebp
c001c16a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c16d:	83 c4 20             	add    esp,0x20
c001c170:	47                   	inc    edi
c001c171:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c176:	74 0d                	je     c001c185 <IDE::detect()+0x257>
c001c178:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c180:	e9 da fd ff ff       	jmp    c001bf5f <IDE::detect()+0x31>
c001c185:	4e                   	dec    esi
c001c186:	74 62                	je     c001c1ea <IDE::detect()+0x2bc>
c001c188:	be 01 00 00 00       	mov    esi,0x1
c001c18d:	e9 c5 fd ff ff       	jmp    c001bf57 <IDE::detect()+0x29>
c001c192:	50                   	push   eax
c001c193:	6a 04                	push   0x4
c001c195:	56                   	push   esi
c001c196:	53                   	push   ebx
c001c197:	e8 f0 f6 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c19c:	83 c4 0c             	add    esp,0xc
c001c19f:	6a 05                	push   0x5
c001c1a1:	56                   	push   esi
c001c1a2:	53                   	push   ebx
c001c1a3:	89 c5                	mov    ebp,eax
c001c1a5:	e8 e2 f6 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c1aa:	89 e9                	mov    ecx,ebp
c001c1ac:	83 c4 10             	add    esp,0x10
c001c1af:	0f b6 e9             	movzx  ebp,cl
c001c1b2:	83 fd 14             	cmp    ebp,0x14
c001c1b5:	74 2d                	je     c001c1e4 <IDE::detect()+0x2b6>
c001c1b7:	83 fd 69             	cmp    ebp,0x69
c001c1ba:	75 b5                	jne    c001c171 <IDE::detect()+0x243>
c001c1bc:	3c 96                	cmp    al,0x96
c001c1be:	75 b1                	jne    c001c171 <IDE::detect()+0x243>
c001c1c0:	68 a1 00 00 00       	push   0xa1
c001c1c5:	6a 07                	push   0x7
c001c1c7:	56                   	push   esi
c001c1c8:	53                   	push   ebx
c001c1c9:	e8 fe f5 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1ce:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c1d5:	e8 1e 9c ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001c1da:	83 c4 10             	add    esp,0x10
c001c1dd:	b1 01                	mov    cl,0x1
c001c1df:	e9 70 fe ff ff       	jmp    c001c054 <IDE::detect()+0x126>
c001c1e4:	3c eb                	cmp    al,0xeb
c001c1e6:	75 cf                	jne    c001c1b7 <IDE::detect()+0x289>
c001c1e8:	eb d6                	jmp    c001c1c0 <IDE::detect()+0x292>
c001c1ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1f0:	5b                   	pop    ebx
c001c1f1:	5e                   	pop    esi
c001c1f2:	5f                   	pop    edi
c001c1f3:	5d                   	pop    ebp
c001c1f4:	c3                   	ret    
c001c1f5:	90                   	nop

c001c1f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1f6:	55                   	push   ebp
c001c1f7:	57                   	push   edi
c001c1f8:	56                   	push   esi
c001c1f9:	53                   	push   ebx
c001c1fa:	83 ec 1c             	sub    esp,0x1c
c001c1fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c201:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c205:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c20d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c211:	88 c3                	mov    bl,al
c001c213:	25 ff 00 00 00       	and    eax,0xff
c001c218:	0f 84 88 00 00 00    	je     c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c21e:	83 ec 0c             	sub    esp,0xc
c001c221:	89 c7                	mov    edi,eax
c001c223:	68 cb 2b 02 c0       	push   0xc0022bcb
c001c228:	e8 dd e6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c22d:	83 c4 10             	add    esp,0x10
c001c230:	83 ff 01             	cmp    edi,0x1
c001c233:	74 6b                	je     c001c2a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c235:	83 ff 02             	cmp    edi,0x2
c001c238:	75 58                	jne    c001c292 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c23a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c23f:	50                   	push   eax
c001c240:	6a 01                	push   0x1
c001c242:	01 ff                	add    edi,edi
c001c244:	09 fe                	or     esi,edi
c001c246:	89 f0                	mov    eax,esi
c001c248:	0f b6 f0             	movzx  esi,al
c001c24b:	c1 e6 06             	shl    esi,0x6
c001c24e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c256:	50                   	push   eax
c001c257:	55                   	push   ebp
c001c258:	e8 2f f6 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c25d:	83 c4 10             	add    esp,0x10
c001c260:	a8 01                	test   al,0x1
c001c262:	74 02                	je     c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c264:	b3 07                	mov    bl,0x7
c001c266:	a8 02                	test   al,0x2
c001c268:	74 02                	je     c001c26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c26a:	b3 03                	mov    bl,0x3
c001c26c:	a8 04                	test   al,0x4
c001c26e:	74 02                	je     c001c272 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c270:	b3 14                	mov    bl,0x14
c001c272:	a8 08                	test   al,0x8
c001c274:	74 02                	je     c001c278 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c276:	b3 03                	mov    bl,0x3
c001c278:	a8 10                	test   al,0x10
c001c27a:	74 02                	je     c001c27e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c27c:	b3 15                	mov    bl,0x15
c001c27e:	a8 20                	test   al,0x20
c001c280:	74 02                	je     c001c284 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c282:	b3 03                	mov    bl,0x3
c001c284:	a8 40                	test   al,0x40
c001c286:	74 02                	je     c001c28a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c288:	b3 16                	mov    bl,0x16
c001c28a:	a8 80                	test   al,0x80
c001c28c:	74 18                	je     c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c28e:	b3 0d                	mov    bl,0xd
c001c290:	eb 14                	jmp    c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c292:	83 ff 03             	cmp    edi,0x3
c001c295:	74 0d                	je     c001c2a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c297:	83 ff 04             	cmp    edi,0x4
c001c29a:	75 0a                	jne    c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c29c:	b3 08                	mov    bl,0x8
c001c29e:	eb 06                	jmp    c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2a0:	b3 13                	mov    bl,0x13
c001c2a2:	eb 02                	jmp    c001c2a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2a4:	b3 17                	mov    bl,0x17
c001c2a6:	83 c4 1c             	add    esp,0x1c
c001c2a9:	88 d8                	mov    al,bl
c001c2ab:	5b                   	pop    ebx
c001c2ac:	5e                   	pop    esi
c001c2ad:	5f                   	pop    edi
c001c2ae:	5d                   	pop    ebp
c001c2af:	c3                   	ret    

c001c2b0 <IDE::polling(unsigned char, unsigned int)>:
c001c2b0:	57                   	push   edi
c001c2b1:	56                   	push   esi
c001c2b2:	53                   	push   ebx
c001c2b3:	bb 04 00 00 00       	mov    ebx,0x4
c001c2b8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c2bc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c2c1:	52                   	push   edx
c001c2c2:	6a 0c                	push   0xc
c001c2c4:	56                   	push   esi
c001c2c5:	57                   	push   edi
c001c2c6:	e8 c1 f5 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c2cb:	83 c4 10             	add    esp,0x10
c001c2ce:	4b                   	dec    ebx
c001c2cf:	75 f0                	jne    c001c2c1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c2d1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c2d6:	50                   	push   eax
c001c2d7:	6a 0c                	push   0xc
c001c2d9:	56                   	push   esi
c001c2da:	57                   	push   edi
c001c2db:	e8 ac f5 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	a8 01                	test   al,0x1
c001c2e5:	75 17                	jne    c001c2fe <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2e7:	a8 20                	test   al,0x20
c001c2e9:	75 0f                	jne    c001c2fa <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c2eb:	4b                   	dec    ebx
c001c2ec:	74 10                	je     c001c2fe <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2ee:	a8 80                	test   al,0x80
c001c2f0:	75 e4                	jne    c001c2d6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2f2:	a8 08                	test   al,0x8
c001c2f4:	74 e0                	je     c001c2d6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2f6:	31 c0                	xor    eax,eax
c001c2f8:	eb 06                	jmp    c001c300 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2fa:	b0 01                	mov    al,0x1
c001c2fc:	eb 02                	jmp    c001c300 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2fe:	b0 02                	mov    al,0x2
c001c300:	5b                   	pop    ebx
c001c301:	5e                   	pop    esi
c001c302:	5f                   	pop    edi
c001c303:	c3                   	ret    

c001c304 <SATABus::close(int, int, void*)>:
c001c304:	31 c0                	xor    eax,eax
c001c306:	c3                   	ret    
c001c307:	90                   	nop

c001c308 <SATABus::detect()>:
c001c308:	c3                   	ret    
c001c309:	90                   	nop

c001c30a <SATABus::SATABus()>:
c001c30a:	83 ec 0c             	sub    esp,0xc
c001c30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c311:	83 ec 08             	sub    esp,0x8
c001c314:	68 04 2c 02 c0       	push   0xc0022c04
c001c319:	50                   	push   eax
c001c31a:	e8 61 06 ff ff       	call   c000c980 <HardDiskController::HardDiskController(char const*)>
c001c31f:	83 c4 10             	add    esp,0x10
c001c322:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001c327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32b:	89 10                	mov    DWORD PTR [eax],edx
c001c32d:	83 ec 0c             	sub    esp,0xc
c001c330:	6a 50                	push   0x50
c001c332:	e8 7a bb fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	89 c2                	mov    edx,eax
c001c33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c340:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	6a 50                	push   0x50
c001c34b:	e8 a5 d2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c350:	83 c4 10             	add    esp,0x10
c001c353:	89 c2                	mov    edx,eax
c001c355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c359:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c35f:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c364:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c368:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c36e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c372:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	6a 03                	push   0x3
c001c37d:	6a 50                	push   0x50
c001c37f:	51                   	push   ecx
c001c380:	52                   	push   edx
c001c381:	50                   	push   eax
c001c382:	e8 81 db fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c387:	83 c4 20             	add    esp,0x20
c001c38a:	90                   	nop
c001c38b:	83 c4 0c             	add    esp,0xc
c001c38e:	c3                   	ret    
c001c38f:	90                   	nop

c001c390 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c394:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c397:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c39a:	09 c2                	or     edx,eax
c001c39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c3a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c3a8:	31 c0                	xor    eax,eax
c001c3aa:	c1 e9 08             	shr    ecx,0x8
c001c3ad:	83 e1 0f             	and    ecx,0xf
c001c3b0:	39 c8                	cmp    eax,ecx
c001c3b2:	74 0a                	je     c001c3be <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c3b4:	f6 c2 01             	test   dl,0x1
c001c3b7:	74 08                	je     c001c3c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c3b9:	d1 ea                	shr    edx,1
c001c3bb:	40                   	inc    eax
c001c3bc:	eb f2                	jmp    c001c3b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c3be:	83 c8 ff             	or     eax,0xffffffff
c001c3c1:	c3                   	ret    

c001c3c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c3c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3c6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c3c9:	89 c2                	mov    edx,eax
c001c3cb:	c1 ea 08             	shr    edx,0x8
c001c3ce:	83 e2 0f             	and    edx,0xf
c001c3d1:	4a                   	dec    edx
c001c3d2:	75 32                	jne    c001c406 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3d4:	83 e0 0f             	and    eax,0xf
c001c3d7:	83 f8 03             	cmp    eax,0x3
c001c3da:	75 2a                	jne    c001c406 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c3dc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c3df:	b8 02 00 00 00       	mov    eax,0x2
c001c3e4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c3ea:	74 1c                	je     c001c408 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3ec:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c3f2:	b8 04 00 00 00       	mov    eax,0x4
c001c3f7:	74 0f                	je     c001c408 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3f9:	31 c0                	xor    eax,eax
c001c3fb:	83 fa 03             	cmp    edx,0x3
c001c3fe:	0f 94 c0             	sete   al
c001c401:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c405:	c3                   	ret    
c001c406:	31 c0                	xor    eax,eax
c001c408:	c3                   	ret    
c001c409:	90                   	nop

c001c40a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c40e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c411:	0f ba e2 0f          	bt     edx,0xf
c001c415:	72 f7                	jb     c001c40e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c417:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c41a:	83 ca 10             	or     edx,0x10
c001c41d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c420:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c423:	83 ca 01             	or     edx,0x1
c001c426:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c429:	c3                   	ret    

c001c42a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c42a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c42e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c431:	83 e2 fe             	and    edx,0xfffffffe
c001c434:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c437:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c43a:	83 e2 ef             	and    edx,0xffffffef
c001c43d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c440:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c443:	0f ba e2 0e          	bt     edx,0xe
c001c447:	72 f7                	jb     c001c440 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c449:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c44c:	0f ba e2 0f          	bt     edx,0xf
c001c450:	72 ee                	jb     c001c440 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c452:	c3                   	ret    
c001c453:	90                   	nop

c001c454 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c454:	55                   	push   ebp
c001c455:	57                   	push   edi
c001c456:	56                   	push   esi
c001c457:	53                   	push   ebx
c001c458:	83 ec 1c             	sub    esp,0x1c
c001c45b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c45f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c463:	53                   	push   ebx
c001c464:	57                   	push   edi
c001c465:	e8 c0 ff ff ff       	call   c001c42a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c46a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c46e:	83 ec 0c             	sub    esp,0xc
c001c471:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c477:	c1 e5 0a             	shl    ebp,0xa
c001c47a:	01 e8                	add    eax,ebp
c001c47c:	89 03                	mov    DWORD PTR [ebx],eax
c001c47e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c480:	68 00 04 00 00       	push   0x400
c001c485:	6a 00                	push   0x0
c001c487:	50                   	push   eax
c001c488:	e8 63 40 fe ff       	call   c00004f0 <memset>
c001c48d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c493:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c497:	83 c4 1c             	add    esp,0x1c
c001c49a:	01 e8                	add    eax,ebp
c001c49c:	89 03                	mov    DWORD PTR [ebx],eax
c001c49e:	c1 e6 08             	shl    esi,0x8
c001c4a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c4a8:	81 c6 00 80 00 00    	add    esi,0x8000
c001c4ae:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c4b4:	01 f0                	add    eax,esi
c001c4b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4bc:	68 00 01 00 00       	push   0x100
c001c4c1:	6a 00                	push   0x0
c001c4c3:	50                   	push   eax
c001c4c4:	e8 27 40 fe ff       	call   c00004f0 <memset>
c001c4c9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c4cf:	31 d2                	xor    edx,edx
c001c4d1:	01 f0                	add    eax,esi
c001c4d3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4d6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c4dd:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c4e3:	01 ee                	add    esi,ebp
c001c4e5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c4e9:	83 c4 10             	add    esp,0x10
c001c4ec:	c1 e5 0d             	shl    ebp,0xd
c001c4ef:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c4f5:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c4fb:	83 c6 20             	add    esi,0x20
c001c4fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c502:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c508:	01 e8                	add    eax,ebp
c001c50a:	01 d0                	add    eax,edx
c001c50c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c50f:	52                   	push   edx
c001c510:	68 00 01 00 00       	push   0x100
c001c515:	6a 00                	push   0x0
c001c517:	50                   	push   eax
c001c518:	e8 d3 3f fe ff       	call   c00004f0 <memset>
c001c51d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c523:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c52a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	01 e8                	add    eax,ebp
c001c533:	01 d0                	add    eax,edx
c001c535:	81 c2 00 01 00 00    	add    edx,0x100
c001c53b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c53e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c544:	75 af                	jne    c001c4f5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c546:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c54d:	50                   	push   eax
c001c54e:	50                   	push   eax
c001c54f:	53                   	push   ebx
c001c550:	57                   	push   edi
c001c551:	e8 b4 fe ff ff       	call   c001c40a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c556:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c55d:	83 c4 2c             	add    esp,0x2c
c001c560:	5b                   	pop    ebx
c001c561:	5e                   	pop    esi
c001c562:	5f                   	pop    edi
c001c563:	5d                   	pop    ebp
c001c564:	c3                   	ret    
c001c565:	90                   	nop

c001c566 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c566:	55                   	push   ebp
c001c567:	57                   	push   edi
c001c568:	56                   	push   esi
c001c569:	53                   	push   ebx
c001c56a:	31 db                	xor    ebx,ebx
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c573:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c577:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c57a:	f7 c7 01 00 00 00    	test   edi,0x1
c001c580:	74 7a                	je     c001c5fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c582:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c586:	89 d8                	mov    eax,ebx
c001c588:	c1 e0 07             	shl    eax,0x7
c001c58b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c592:	55                   	push   ebp
c001c593:	56                   	push   esi
c001c594:	e8 29 fe ff ff       	call   c001c3c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c599:	5a                   	pop    edx
c001c59a:	59                   	pop    ecx
c001c59b:	83 f8 01             	cmp    eax,0x1
c001c59e:	75 21                	jne    c001c5c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c5a0:	50                   	push   eax
c001c5a1:	53                   	push   ebx
c001c5a2:	55                   	push   ebp
c001c5a3:	56                   	push   esi
c001c5a4:	e8 ab fe ff ff       	call   c001c454 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5a9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c5b0:	e8 1e b5 fe ff       	call   c0007ad3 <malloc>
c001c5b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5b8:	89 c5                	mov    ebp,eax
c001c5ba:	e8 c1 10 00 00       	call   c001d680 <SATA::SATA()>
c001c5bf:	eb 24                	jmp    c001c5e5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c5c1:	83 f8 04             	cmp    eax,0x4
c001c5c4:	75 36                	jne    c001c5fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5c6:	51                   	push   ecx
c001c5c7:	53                   	push   ebx
c001c5c8:	55                   	push   ebp
c001c5c9:	56                   	push   esi
c001c5ca:	e8 85 fe ff ff       	call   c001c454 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5cf:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c5d6:	e8 f8 b4 fe ff       	call   c0007ad3 <malloc>
c001c5db:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5de:	89 c5                	mov    ebp,eax
c001c5e0:	e8 f5 17 00 00       	call   c001ddda <SATAPI::SATAPI()>
c001c5e5:	58                   	pop    eax
c001c5e6:	5a                   	pop    edx
c001c5e7:	55                   	push   ebp
c001c5e8:	56                   	push   esi
c001c5e9:	e8 4e 00 ff ff       	call   c000c63c <Device::addChild(Device*)>
c001c5ee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c5f1:	56                   	push   esi
c001c5f2:	6a 00                	push   0x0
c001c5f4:	53                   	push   ebx
c001c5f5:	55                   	push   ebp
c001c5f6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5f9:	83 c4 20             	add    esp,0x20
c001c5fc:	d1 ef                	shr    edi,1
c001c5fe:	43                   	inc    ebx
c001c5ff:	83 fb 20             	cmp    ebx,0x20
c001c602:	0f 85 72 ff ff ff    	jne    c001c57a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c608:	83 c4 0c             	add    esp,0xc
c001c60b:	5b                   	pop    ebx
c001c60c:	5e                   	pop    esi
c001c60d:	5f                   	pop    edi
c001c60e:	5d                   	pop    ebp
c001c60f:	c3                   	ret    

c001c610 <SATABus::open(int, int, void*)>:
c001c610:	83 ec 14             	sub    esp,0x14
c001c613:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c617:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c61d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c623:	52                   	push   edx
c001c624:	50                   	push   eax
c001c625:	e8 3c ff ff ff       	call   c001c566 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c62a:	31 c0                	xor    eax,eax
c001c62c:	83 c4 1c             	add    esp,0x1c
c001c62f:	c3                   	ret    

c001c630 <ATA::close(int, int, void*)>:
c001c630:	83 ec 0c             	sub    esp,0xc
c001c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c637:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c63d:	85 c0                	test   eax,eax
c001c63f:	74 0c                	je     c001c64d <ATA::close(int, int, void*)+0x1d>
c001c641:	8b 10                	mov    edx,DWORD PTR [eax]
c001c643:	83 ec 0c             	sub    esp,0xc
c001c646:	50                   	push   eax
c001c647:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c64a:	83 c4 10             	add    esp,0x10
c001c64d:	31 c0                	xor    eax,eax
c001c64f:	83 c4 0c             	add    esp,0xc
c001c652:	c3                   	ret    
c001c653:	90                   	nop

c001c654 <ATA::powerSaving(PowerSavingLevel)>:
c001c654:	c3                   	ret    
c001c655:	90                   	nop

c001c656 <ATA::ATA()>:
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65d:	83 ec 04             	sub    esp,0x4
c001c660:	68 00 02 00 00       	push   0x200
c001c665:	68 fd 2c 02 c0       	push   0xc0022cfd
c001c66a:	50                   	push   eax
c001c66b:	e8 9a 03 ff ff       	call   c000ca0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	ba 70 2c 02 c0       	mov    edx,0xc0022c70
c001c678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67c:	89 10                	mov    DWORD PTR [eax],edx
c001c67e:	90                   	nop
c001c67f:	83 c4 0c             	add    esp,0xc
c001c682:	c3                   	ret    
c001c683:	90                   	nop

c001c684 <ATA::flush(bool)>:
c001c684:	53                   	push   ebx
c001c685:	83 ec 08             	sub    esp,0x8
c001c688:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c68d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c691:	83 f8 01             	cmp    eax,0x1
c001c694:	19 c0                	sbb    eax,eax
c001c696:	83 e0 fd             	and    eax,0xfffffffd
c001c699:	05 ea 00 00 00       	add    eax,0xea
c001c69e:	50                   	push   eax
c001c69f:	6a 07                	push   0x7
c001c6a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6a8:	50                   	push   eax
c001c6a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6af:	e8 18 f1 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6b4:	83 c4 0c             	add    esp,0xc
c001c6b7:	6a 00                	push   0x0
c001c6b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6c0:	50                   	push   eax
c001c6c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6c7:	e8 e4 fb ff ff       	call   c001c2b0 <IDE::polling(unsigned char, unsigned int)>
c001c6cc:	83 c4 18             	add    esp,0x18
c001c6cf:	5b                   	pop    ebx
c001c6d0:	c3                   	ret    
c001c6d1:	90                   	nop

c001c6d2 <ATA::readyForCommand()>:
c001c6d2:	56                   	push   esi
c001c6d3:	53                   	push   ebx
c001c6d4:	53                   	push   ebx
c001c6d5:	31 db                	xor    ebx,ebx
c001c6d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6db:	51                   	push   ecx
c001c6dc:	6a 0c                	push   0xc
c001c6de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c6e5:	50                   	push   eax
c001c6e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c6ec:	e8 9b f1 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001c6f1:	83 c4 10             	add    esp,0x10
c001c6f4:	a8 88                	test   al,0x88
c001c6f6:	74 1f                	je     c001c717 <ATA::readyForCommand()+0x45>
c001c6f8:	43                   	inc    ebx
c001c6f9:	83 fb 63             	cmp    ebx,0x63
c001c6fc:	7e dd                	jle    c001c6db <ATA::readyForCommand()+0x9>
c001c6fe:	83 ec 0c             	sub    esp,0xc
c001c701:	6a 0a                	push   0xa
c001c703:	e8 f0 96 ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c711:	75 c8                	jne    c001c6db <ATA::readyForCommand()+0x9>
c001c713:	31 c0                	xor    eax,eax
c001c715:	eb 02                	jmp    c001c719 <ATA::readyForCommand()+0x47>
c001c717:	b0 01                	mov    al,0x1
c001c719:	5a                   	pop    edx
c001c71a:	5b                   	pop    ebx
c001c71b:	5e                   	pop    esi
c001c71c:	c3                   	ret    
c001c71d:	90                   	nop

c001c71e <ATA::access(unsigned long long, int, void*, bool)>:
c001c71e:	55                   	push   ebp
c001c71f:	57                   	push   edi
c001c720:	56                   	push   esi
c001c721:	53                   	push   ebx
c001c722:	83 ec 2c             	sub    esp,0x2c
c001c725:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c729:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c72d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c731:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c735:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c739:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c73d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c741:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c747:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c74b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c751:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c755:	c1 e0 06             	shl    eax,0x6
c001c758:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c760:	74 5b                	je     c001c7bd <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c762:	89 fa                	mov    edx,edi
c001c764:	89 f0                	mov    eax,esi
c001c766:	c1 ea 1c             	shr    edx,0x1c
c001c769:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c76d:	89 d1                	mov    ecx,edx
c001c76f:	09 c1                	or     ecx,eax
c001c771:	74 25                	je     c001c798 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c773:	31 ed                	xor    ebp,ebp
c001c775:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c77c:	89 fa                	mov    edx,edi
c001c77e:	89 f0                	mov    eax,esi
c001c780:	0f ad d0             	shrd   eax,edx,cl
c001c783:	d3 ea                	shr    edx,cl
c001c785:	f6 c1 20             	test   cl,0x20
c001c788:	74 02                	je     c001c78c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c78a:	89 d0                	mov    eax,edx
c001c78c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c790:	45                   	inc    ebp
c001c791:	83 fd 06             	cmp    ebp,0x6
c001c794:	75 df                	jne    c001c775 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c796:	eb 71                	jmp    c001c809 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c798:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c79d:	89 f0                	mov    eax,esi
c001c79f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7a6:	0f ac f8 10          	shrd   eax,edi,0x10
c001c7aa:	bf 01 00 00 00       	mov    edi,0x1
c001c7af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c7b3:	c1 ee 18             	shr    esi,0x18
c001c7b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7bb:	eb 53                	jmp    c001c810 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c7bd:	6a 00                	push   0x0
c001c7bf:	6a 3f                	push   0x3f
c001c7c1:	57                   	push   edi
c001c7c2:	56                   	push   esi
c001c7c3:	e8 d8 2a 00 00       	call   c001f2a0 <__umoddi3>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	40                   	inc    eax
c001c7cc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c7d0:	6a 00                	push   0x0
c001c7d2:	68 f0 03 00 00       	push   0x3f0
c001c7d7:	57                   	push   edi
c001c7d8:	56                   	push   esi
c001c7d9:	e8 c2 29 00 00       	call   c001f1a0 <__udivdi3>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c7e6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7ed:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7f2:	6a 00                	push   0x0
c001c7f4:	6a 3f                	push   0x3f
c001c7f6:	57                   	push   edi
c001c7f7:	31 ff                	xor    edi,edi
c001c7f9:	56                   	push   esi
c001c7fa:	e8 a1 29 00 00       	call   c001f1a0 <__udivdi3>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	83 e0 0f             	and    eax,0xf
c001c805:	89 c6                	mov    esi,eax
c001c807:	eb 07                	jmp    c001c810 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c809:	31 f6                	xor    esi,esi
c001c80b:	bf 02 00 00 00       	mov    edi,0x2
c001c810:	50                   	push   eax
c001c811:	6a 00                	push   0x0
c001c813:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c81a:	50                   	push   eax
c001c81b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c81f:	e8 b6 f1 ff ff       	call   c001b9da <IDE::enableIRQs(unsigned char, bool)>
c001c824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c827:	e8 a6 fe ff ff       	call   c001c6d2 <ATA::readyForCommand()>
c001c82c:	83 c4 10             	add    esp,0x10
c001c82f:	84 c0                	test   al,al
c001c831:	75 0a                	jne    c001c83d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c833:	be 01 00 00 00       	mov    esi,0x1
c001c838:	e9 9b 02 00 00       	jmp    c001cad8 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c83d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c843:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c849:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c850:	c1 e0 04             	shl    eax,0x4
c001c853:	09 c6                	or     esi,eax
c001c855:	f7 c7 03 00 00 00    	test   edi,0x3
c001c85b:	75 05                	jne    c001c862 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c85d:	83 ce a0             	or     esi,0xffffffa0
c001c860:	eb 03                	jmp    c001c865 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c862:	83 ce e0             	or     esi,0xffffffe0
c001c865:	89 f0                	mov    eax,esi
c001c867:	0f b6 f0             	movzx  esi,al
c001c86a:	56                   	push   esi
c001c86b:	6a 06                	push   0x6
c001c86d:	51                   	push   ecx
c001c86e:	52                   	push   edx
c001c86f:	e8 58 ef ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c874:	83 c4 10             	add    esp,0x10
c001c877:	6a 00                	push   0x0
c001c879:	6a 01                	push   0x1
c001c87b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c882:	50                   	push   eax
c001c883:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c889:	e8 3e ef ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c88e:	89 f8                	mov    eax,edi
c001c890:	83 c4 10             	add    esp,0x10
c001c893:	0f b6 f0             	movzx  esi,al
c001c896:	83 fe 02             	cmp    esi,0x2
c001c899:	75 6e                	jne    c001c909 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c89b:	6a 00                	push   0x0
c001c89d:	6a 08                	push   0x8
c001c89f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8a6:	50                   	push   eax
c001c8a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ad:	e8 1a ef ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c8b7:	50                   	push   eax
c001c8b8:	6a 09                	push   0x9
c001c8ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8c1:	50                   	push   eax
c001c8c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8c8:	e8 ff ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8cd:	83 c4 20             	add    esp,0x20
c001c8d0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c8d5:	50                   	push   eax
c001c8d6:	6a 0a                	push   0xa
c001c8d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8df:	50                   	push   eax
c001c8e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8e6:	e8 e1 ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8eb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c8f0:	50                   	push   eax
c001c8f1:	6a 0b                	push   0xb
c001c8f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8fa:	50                   	push   eax
c001c8fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c901:	e8 c6 ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c906:	83 c4 20             	add    esp,0x20
c001c909:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c90e:	50                   	push   eax
c001c90f:	6a 02                	push   0x2
c001c911:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c918:	50                   	push   eax
c001c919:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c91f:	e8 a8 ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c924:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c929:	50                   	push   eax
c001c92a:	6a 03                	push   0x3
c001c92c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c933:	50                   	push   eax
c001c934:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c93a:	e8 8d ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c93f:	83 c4 20             	add    esp,0x20
c001c942:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c947:	50                   	push   eax
c001c948:	6a 04                	push   0x4
c001c94a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c951:	50                   	push   eax
c001c952:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c958:	e8 6f ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c95d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c962:	50                   	push   eax
c001c963:	6a 05                	push   0x5
c001c965:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c96c:	50                   	push   eax
c001c96d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c973:	e8 54 ee ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c978:	83 c4 20             	add    esp,0x20
c001c97b:	83 fe 02             	cmp    esi,0x2
c001c97e:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c983:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c988:	85 c9                	test   ecx,ecx
c001c98a:	74 07                	je     c001c993 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c98c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c991:	75 47                	jne    c001c9da <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001c993:	89 f8                	mov    eax,edi
c001c995:	0f b6 f8             	movzx  edi,al
c001c998:	31 c0                	xor    eax,eax
c001c99a:	83 ff 02             	cmp    edi,0x2
c001c99d:	0f 95 c0             	setne  al
c001c9a0:	89 c6                	mov    esi,eax
c001c9a2:	74 0c                	je     c001c9b0 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001c9a4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c9a9:	b8 30 00 00 00       	mov    eax,0x30
c001c9ae:	75 2f                	jne    c001c9df <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c9b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9b4:	83 f2 01             	xor    edx,0x1
c001c9b7:	85 c9                	test   ecx,ecx
c001c9b9:	74 09                	je     c001c9c4 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001c9bb:	84 d2                	test   dl,dl
c001c9bd:	b8 24 00 00 00       	mov    eax,0x24
c001c9c2:	75 1b                	jne    c001c9df <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c9c4:	85 f6                	test   esi,esi
c001c9c6:	0f 84 67 fe ff ff    	je     c001c833 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c9cc:	84 d2                	test   dl,dl
c001c9ce:	b8 20 00 00 00       	mov    eax,0x20
c001c9d3:	75 0a                	jne    c001c9df <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001c9d5:	e9 59 fe ff ff       	jmp    c001c833 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001c9da:	b8 34 00 00 00       	mov    eax,0x34
c001c9df:	50                   	push   eax
c001c9e0:	6a 07                	push   0x7
c001c9e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e9:	50                   	push   eax
c001c9ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f0:	e8 d7 ed ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001ca01:	85 f6                	test   esi,esi
c001ca03:	0f 84 b5 00 00 00    	je     c001cabe <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001ca09:	50                   	push   eax
c001ca0a:	6a 01                	push   0x1
c001ca0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca13:	50                   	push   eax
c001ca14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca1a:	e8 91 f8 ff ff       	call   c001c2b0 <IDE::polling(unsigned char, unsigned int)>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca28:	0f b6 c0             	movzx  eax,al
c001ca2b:	85 c0                	test   eax,eax
c001ca2d:	74 1f                	je     c001ca4e <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001ca2f:	50                   	push   eax
c001ca30:	89 c6                	mov    esi,eax
c001ca32:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca39:	0f b6 d2             	movzx  edx,dl
c001ca3c:	50                   	push   eax
c001ca3d:	52                   	push   edx
c001ca3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca44:	e8 ad f7 ff ff       	call   c001c1f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca49:	e9 87 00 00 00       	jmp    c001cad5 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001ca4e:	85 ed                	test   ebp,ebp
c001ca50:	74 3b                	je     c001ca8d <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001ca52:	31 ff                	xor    edi,edi
c001ca54:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ca58:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001ca5c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ca61:	50                   	push   eax
c001ca62:	50                   	push   eax
c001ca63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca6a:	50                   	push   eax
c001ca6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca71:	e8 44 ed ff ff       	call   c001b7ba <IDE::getBase(unsigned char)>
c001ca76:	89 c2                	mov    edx,eax
c001ca78:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ca7d:	66 ef                	out    dx,ax
c001ca7f:	47                   	inc    edi
c001ca80:	83 c4 10             	add    esp,0x10
c001ca83:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ca89:	75 c9                	jne    c001ca54 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ca8b:	eb 23                	jmp    c001cab0 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001ca8d:	51                   	push   ecx
c001ca8e:	0f b6 d2             	movzx  edx,dl
c001ca91:	51                   	push   ecx
c001ca92:	52                   	push   edx
c001ca93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca99:	e8 1c ed ff ff       	call   c001b7ba <IDE::getBase(unsigned char)>
c001ca9e:	b9 00 01 00 00       	mov    ecx,0x100
c001caa3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001caa7:	89 c2                	mov    edx,eax
c001caa9:	fc                   	cld    
c001caaa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001caad:	83 c4 10             	add    esp,0x10
c001cab0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cab8:	4e                   	dec    esi
c001cab9:	e9 43 ff ff ff       	jmp    c001ca01 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cabe:	31 f6                	xor    esi,esi
c001cac0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cac5:	74 11                	je     c001cad8 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cac7:	50                   	push   eax
c001cac8:	50                   	push   eax
c001cac9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cace:	50                   	push   eax
c001cacf:	53                   	push   ebx
c001cad0:	e8 af fb ff ff       	call   c001c684 <ATA::flush(bool)>
c001cad5:	83 c4 10             	add    esp,0x10
c001cad8:	83 c4 2c             	add    esp,0x2c
c001cadb:	89 f0                	mov    eax,esi
c001cadd:	5b                   	pop    ebx
c001cade:	5e                   	pop    esi
c001cadf:	5f                   	pop    edi
c001cae0:	5d                   	pop    ebp
c001cae1:	c3                   	ret    

c001cae2 <ATA::detectCHS()>:
c001cae2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cae6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001caec:	c1 e0 06             	shl    eax,0x6
c001caef:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001caf5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001caff:	c7 44 24 04 54 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c54
c001cb07:	e9 cd 46 ff ff       	jmp    c00111d9 <KePanic(char const*)>

c001cb0c <ATA::open(int, int, void*)>:
c001cb0c:	53                   	push   ebx
c001cb0d:	83 ec 08             	sub    esp,0x8
c001cb10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb1c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb22:	c1 e0 06             	shl    eax,0x6
c001cb25:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cb2b:	01 d0                	add    eax,edx
c001cb2d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cb34:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cb3a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cb41:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cb4b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cb52:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cb58:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cb5f:	75 0c                	jne    c001cb6d <ATA::open(int, int, void*)+0x61>
c001cb61:	83 ec 0c             	sub    esp,0xc
c001cb64:	53                   	push   ebx
c001cb65:	e8 78 ff ff ff       	call   c001cae2 <ATA::detectCHS()>
c001cb6a:	83 c4 10             	add    esp,0x10
c001cb6d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb73:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb79:	c1 e0 06             	shl    eax,0x6
c001cb7c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb83:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb8d:	d1 e8                	shr    eax,1
c001cb8f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb95:	6a 04                	push   0x4
c001cb97:	6a 0c                	push   0xc
c001cb99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cba0:	50                   	push   eax
c001cba1:	52                   	push   edx
c001cba2:	e8 25 ec ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cba7:	90                   	nop
c001cba8:	90                   	nop
c001cba9:	6a 00                	push   0x0
c001cbab:	6a 0c                	push   0xc
c001cbad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbb4:	50                   	push   eax
c001cbb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbbb:	e8 0c ec ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbc0:	83 c4 14             	add    esp,0x14
c001cbc3:	53                   	push   ebx
c001cbc4:	e8 a9 fe fe ff       	call   c000ca72 <PhysicalDisk::startCache()>
c001cbc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbcc:	e8 ed 10 ff ff       	call   c000dcbe <createPartitionsForDisk(PhysicalDisk*)>
c001cbd1:	83 c4 18             	add    esp,0x18
c001cbd4:	31 c0                	xor    eax,eax
c001cbd6:	5b                   	pop    ebx
c001cbd7:	c3                   	ret    

c001cbd8 <combineCharAndColour(char, unsigned char)>:
c001cbd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbdd:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cbe3:	c1 e0 08             	shl    eax,0x8
c001cbe6:	09 d0                	or     eax,edx
c001cbe8:	c3                   	ret    

c001cbe9 <combineColours(unsigned char, unsigned char)>:
c001cbe9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbee:	c1 e0 04             	shl    eax,0x4
c001cbf1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cbf5:	c3                   	ret    

c001cbf6 <ATA::read(unsigned long long, int, void*)>:
c001cbf6:	55                   	push   ebp
c001cbf7:	57                   	push   edi
c001cbf8:	56                   	push   esi
c001cbf9:	be 04 00 00 00       	mov    esi,0x4
c001cbfe:	53                   	push   ebx
c001cbff:	83 ec 0c             	sub    esp,0xc
c001cc02:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc0e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cc12:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cc15:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cc1b:	0f 87 a1 01 00 00    	ja     c001cdc2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc21:	85 c9                	test   ecx,ecx
c001cc23:	be 06 00 00 00       	mov    esi,0x6
c001cc28:	0f 84 94 01 00 00    	je     c001cdc2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc2e:	55                   	push   ebp
c001cc2f:	55                   	push   ebp
c001cc30:	6a 00                	push   0x0
c001cc32:	51                   	push   ecx
c001cc33:	53                   	push   ebx
c001cc34:	52                   	push   edx
c001cc35:	50                   	push   eax
c001cc36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc3a:	e8 df fa ff ff       	call   c001c71e <ATA::access(unsigned long long, int, void*, bool)>
c001cc3f:	83 c4 20             	add    esp,0x20
c001cc42:	85 c0                	test   eax,eax
c001cc44:	89 c6                	mov    esi,eax
c001cc46:	0f 85 71 01 00 00    	jne    c001cdbd <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cc4c:	50                   	push   eax
c001cc4d:	bd 10 27 00 00       	mov    ebp,0x2710
c001cc52:	50                   	push   eax
c001cc53:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cc59:	6a 0f                	push   0xf
c001cc5b:	6a 00                	push   0x0
c001cc5d:	89 da                	mov    edx,ebx
c001cc5f:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cc65:	e8 7f ff ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001cc6a:	59                   	pop    ecx
c001cc6b:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc70:	5b                   	pop    ebx
c001cc71:	0f b6 d8             	movzx  ebx,al
c001cc74:	89 d0                	mov    eax,edx
c001cc76:	53                   	push   ebx
c001cc77:	99                   	cdq    
c001cc78:	f7 fd                	idiv   ebp
c001cc7a:	99                   	cdq    
c001cc7b:	f7 f9                	idiv   ecx
c001cc7d:	83 c2 30             	add    edx,0x30
c001cc80:	0f b6 d2             	movzx  edx,dl
c001cc83:	52                   	push   edx
c001cc84:	e8 4f ff ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cc89:	5f                   	pop    edi
c001cc8a:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc8f:	5a                   	pop    edx
c001cc90:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc96:	53                   	push   ebx
c001cc97:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cc9c:	99                   	cdq    
c001cc9d:	f7 ff                	idiv   edi
c001cc9f:	99                   	cdq    
c001cca0:	f7 f9                	idiv   ecx
c001cca2:	8d 42 30             	lea    eax,[edx+0x30]
c001cca5:	0f b6 c0             	movzx  eax,al
c001cca8:	50                   	push   eax
c001cca9:	e8 2a ff ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001ccae:	5f                   	pop    edi
c001ccaf:	bf 64 00 00 00       	mov    edi,0x64
c001ccb4:	5a                   	pop    edx
c001ccb5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ccbb:	53                   	push   ebx
c001ccbc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ccc1:	99                   	cdq    
c001ccc2:	f7 ff                	idiv   edi
c001ccc4:	99                   	cdq    
c001ccc5:	f7 f9                	idiv   ecx
c001ccc7:	8d 42 30             	lea    eax,[edx+0x30]
c001ccca:	0f b6 c0             	movzx  eax,al
c001cccd:	50                   	push   eax
c001ccce:	e8 05 ff ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001ccd3:	5a                   	pop    edx
c001ccd4:	5a                   	pop    edx
c001ccd5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ccdb:	53                   	push   ebx
c001ccdc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cce1:	99                   	cdq    
c001cce2:	f7 f9                	idiv   ecx
c001cce4:	99                   	cdq    
c001cce5:	f7 f9                	idiv   ecx
c001cce7:	8d 42 30             	lea    eax,[edx+0x30]
c001ccea:	0f b6 c0             	movzx  eax,al
c001cced:	50                   	push   eax
c001ccee:	e8 e5 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001ccf3:	5a                   	pop    edx
c001ccf4:	5a                   	pop    edx
c001ccf5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ccfb:	53                   	push   ebx
c001ccfc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd01:	99                   	cdq    
c001cd02:	f7 f9                	idiv   ecx
c001cd04:	83 c2 30             	add    edx,0x30
c001cd07:	0f b6 d2             	movzx  edx,dl
c001cd0a:	52                   	push   edx
c001cd0b:	e8 c8 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cd10:	5a                   	pop    edx
c001cd11:	5a                   	pop    edx
c001cd12:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cd18:	53                   	push   ebx
c001cd19:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd1e:	99                   	cdq    
c001cd1f:	f7 fd                	idiv   ebp
c001cd21:	99                   	cdq    
c001cd22:	f7 f9                	idiv   ecx
c001cd24:	8d 42 30             	lea    eax,[edx+0x30]
c001cd27:	0f b6 c0             	movzx  eax,al
c001cd2a:	50                   	push   eax
c001cd2b:	e8 a8 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cd30:	5d                   	pop    ebp
c001cd31:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd36:	5a                   	pop    edx
c001cd37:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd3d:	53                   	push   ebx
c001cd3e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd43:	99                   	cdq    
c001cd44:	f7 fd                	idiv   ebp
c001cd46:	99                   	cdq    
c001cd47:	f7 f9                	idiv   ecx
c001cd49:	8d 42 30             	lea    eax,[edx+0x30]
c001cd4c:	0f b6 c0             	movzx  eax,al
c001cd4f:	50                   	push   eax
c001cd50:	e8 83 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cd55:	5d                   	pop    ebp
c001cd56:	5a                   	pop    edx
c001cd57:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd5d:	53                   	push   ebx
c001cd5e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd63:	99                   	cdq    
c001cd64:	f7 ff                	idiv   edi
c001cd66:	99                   	cdq    
c001cd67:	f7 f9                	idiv   ecx
c001cd69:	8d 42 30             	lea    eax,[edx+0x30]
c001cd6c:	0f b6 c0             	movzx  eax,al
c001cd6f:	50                   	push   eax
c001cd70:	e8 63 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cd75:	5f                   	pop    edi
c001cd76:	5d                   	pop    ebp
c001cd77:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd7d:	53                   	push   ebx
c001cd7e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd83:	99                   	cdq    
c001cd84:	f7 f9                	idiv   ecx
c001cd86:	99                   	cdq    
c001cd87:	f7 f9                	idiv   ecx
c001cd89:	8d 42 30             	lea    eax,[edx+0x30]
c001cd8c:	0f b6 c0             	movzx  eax,al
c001cd8f:	50                   	push   eax
c001cd90:	e8 43 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cd95:	5a                   	pop    edx
c001cd96:	5f                   	pop    edi
c001cd97:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd9d:	53                   	push   ebx
c001cd9e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cda3:	99                   	cdq    
c001cda4:	f7 f9                	idiv   ecx
c001cda6:	83 c2 30             	add    edx,0x30
c001cda9:	0f b6 d2             	movzx  edx,dl
c001cdac:	52                   	push   edx
c001cdad:	e8 26 fe ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cdb2:	83 c4 10             	add    esp,0x10
c001cdb5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cdbb:	eb 05                	jmp    c001cdc2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cdbd:	be 01 00 00 00       	mov    esi,0x1
c001cdc2:	83 c4 0c             	add    esp,0xc
c001cdc5:	89 f0                	mov    eax,esi
c001cdc7:	5b                   	pop    ebx
c001cdc8:	5e                   	pop    esi
c001cdc9:	5f                   	pop    edi
c001cdca:	5d                   	pop    ebp
c001cdcb:	c3                   	ret    

c001cdcc <ATA::write(unsigned long long, int, void*)>:
c001cdcc:	55                   	push   ebp
c001cdcd:	57                   	push   edi
c001cdce:	56                   	push   esi
c001cdcf:	be 04 00 00 00       	mov    esi,0x4
c001cdd4:	53                   	push   ebx
c001cdd5:	83 ec 0c             	sub    esp,0xc
c001cdd8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cddc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cde0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cde4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cde8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdeb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdf1:	0f 87 9c 01 00 00    	ja     c001cf93 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cdf7:	85 c9                	test   ecx,ecx
c001cdf9:	be 06 00 00 00       	mov    esi,0x6
c001cdfe:	0f 84 8f 01 00 00    	je     c001cf93 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce04:	55                   	push   ebp
c001ce05:	55                   	push   ebp
c001ce06:	6a 01                	push   0x1
c001ce08:	51                   	push   ecx
c001ce09:	53                   	push   ebx
c001ce0a:	52                   	push   edx
c001ce0b:	50                   	push   eax
c001ce0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce10:	e8 09 f9 ff ff       	call   c001c71e <ATA::access(unsigned long long, int, void*, bool)>
c001ce15:	83 c4 20             	add    esp,0x20
c001ce18:	85 c0                	test   eax,eax
c001ce1a:	89 c6                	mov    esi,eax
c001ce1c:	0f 85 6c 01 00 00    	jne    c001cf8e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ce22:	50                   	push   eax
c001ce23:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce28:	50                   	push   eax
c001ce29:	6a 0f                	push   0xf
c001ce2b:	6a 00                	push   0x0
c001ce2d:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ce33:	e8 b1 fd ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001ce38:	5a                   	pop    edx
c001ce39:	59                   	pop    ecx
c001ce3a:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce3f:	0f b6 d8             	movzx  ebx,al
c001ce42:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce47:	53                   	push   ebx
c001ce48:	99                   	cdq    
c001ce49:	f7 fd                	idiv   ebp
c001ce4b:	99                   	cdq    
c001ce4c:	f7 f9                	idiv   ecx
c001ce4e:	8d 42 30             	lea    eax,[edx+0x30]
c001ce51:	0f b6 c0             	movzx  eax,al
c001ce54:	50                   	push   eax
c001ce55:	e8 7e fd ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001ce5a:	5f                   	pop    edi
c001ce5b:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce60:	5a                   	pop    edx
c001ce61:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce67:	53                   	push   ebx
c001ce68:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce6d:	99                   	cdq    
c001ce6e:	f7 ff                	idiv   edi
c001ce70:	99                   	cdq    
c001ce71:	f7 f9                	idiv   ecx
c001ce73:	8d 42 30             	lea    eax,[edx+0x30]
c001ce76:	0f b6 c0             	movzx  eax,al
c001ce79:	50                   	push   eax
c001ce7a:	e8 59 fd ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001ce7f:	5f                   	pop    edi
c001ce80:	bf 64 00 00 00       	mov    edi,0x64
c001ce85:	5a                   	pop    edx
c001ce86:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce8c:	53                   	push   ebx
c001ce8d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce92:	99                   	cdq    
c001ce93:	f7 ff                	idiv   edi
c001ce95:	99                   	cdq    
c001ce96:	f7 f9                	idiv   ecx
c001ce98:	8d 42 30             	lea    eax,[edx+0x30]
c001ce9b:	0f b6 c0             	movzx  eax,al
c001ce9e:	50                   	push   eax
c001ce9f:	e8 34 fd ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cea4:	5a                   	pop    edx
c001cea5:	5a                   	pop    edx
c001cea6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ceac:	53                   	push   ebx
c001cead:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ceb2:	99                   	cdq    
c001ceb3:	f7 f9                	idiv   ecx
c001ceb5:	99                   	cdq    
c001ceb6:	f7 f9                	idiv   ecx
c001ceb8:	8d 42 30             	lea    eax,[edx+0x30]
c001cebb:	0f b6 c0             	movzx  eax,al
c001cebe:	50                   	push   eax
c001cebf:	e8 14 fd ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cec4:	5a                   	pop    edx
c001cec5:	5a                   	pop    edx
c001cec6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cecc:	53                   	push   ebx
c001cecd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ced2:	99                   	cdq    
c001ced3:	f7 f9                	idiv   ecx
c001ced5:	83 c2 30             	add    edx,0x30
c001ced8:	0f b6 d2             	movzx  edx,dl
c001cedb:	52                   	push   edx
c001cedc:	e8 f7 fc ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cee1:	5a                   	pop    edx
c001cee2:	5a                   	pop    edx
c001cee3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cee9:	53                   	push   ebx
c001ceea:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceef:	99                   	cdq    
c001cef0:	f7 fd                	idiv   ebp
c001cef2:	99                   	cdq    
c001cef3:	f7 f9                	idiv   ecx
c001cef5:	8d 42 30             	lea    eax,[edx+0x30]
c001cef8:	0f b6 c0             	movzx  eax,al
c001cefb:	50                   	push   eax
c001cefc:	e8 d7 fc ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cf01:	5d                   	pop    ebp
c001cf02:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf07:	5a                   	pop    edx
c001cf08:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf0e:	53                   	push   ebx
c001cf0f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf14:	99                   	cdq    
c001cf15:	f7 fd                	idiv   ebp
c001cf17:	99                   	cdq    
c001cf18:	f7 f9                	idiv   ecx
c001cf1a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf1d:	0f b6 c0             	movzx  eax,al
c001cf20:	50                   	push   eax
c001cf21:	e8 b2 fc ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cf26:	5d                   	pop    ebp
c001cf27:	5a                   	pop    edx
c001cf28:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf2e:	53                   	push   ebx
c001cf2f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf34:	99                   	cdq    
c001cf35:	f7 ff                	idiv   edi
c001cf37:	99                   	cdq    
c001cf38:	f7 f9                	idiv   ecx
c001cf3a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf3d:	0f b6 c0             	movzx  eax,al
c001cf40:	50                   	push   eax
c001cf41:	e8 92 fc ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cf46:	5f                   	pop    edi
c001cf47:	5d                   	pop    ebp
c001cf48:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf4e:	53                   	push   ebx
c001cf4f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf54:	99                   	cdq    
c001cf55:	f7 f9                	idiv   ecx
c001cf57:	99                   	cdq    
c001cf58:	f7 f9                	idiv   ecx
c001cf5a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf5d:	0f b6 c0             	movzx  eax,al
c001cf60:	50                   	push   eax
c001cf61:	e8 72 fc ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cf66:	5a                   	pop    edx
c001cf67:	5f                   	pop    edi
c001cf68:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf6e:	53                   	push   ebx
c001cf6f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf74:	99                   	cdq    
c001cf75:	f7 f9                	idiv   ecx
c001cf77:	83 c2 30             	add    edx,0x30
c001cf7a:	0f b6 d2             	movzx  edx,dl
c001cf7d:	52                   	push   edx
c001cf7e:	e8 55 fc ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf8c:	eb 05                	jmp    c001cf93 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf8e:	be 01 00 00 00       	mov    esi,0x1
c001cf93:	83 c4 0c             	add    esp,0xc
c001cf96:	89 f0                	mov    eax,esi
c001cf98:	5b                   	pop    ebx
c001cf99:	5e                   	pop    esi
c001cf9a:	5f                   	pop    edi
c001cf9b:	5d                   	pop    ebp
c001cf9c:	c3                   	ret    
c001cf9d:	90                   	nop

c001cf9e <ATAPI::write(unsigned long long, int, void*)>:
c001cf9e:	b8 03 00 00 00       	mov    eax,0x3
c001cfa3:	c3                   	ret    

c001cfa4 <ATAPI::close(int, int, void*)>:
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cfb1:	85 c0                	test   eax,eax
c001cfb3:	74 0c                	je     c001cfc1 <ATAPI::close(int, int, void*)+0x1d>
c001cfb5:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfb7:	83 ec 0c             	sub    esp,0xc
c001cfba:	50                   	push   eax
c001cfbb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cfbe:	83 c4 10             	add    esp,0x10
c001cfc1:	31 c0                	xor    eax,eax
c001cfc3:	83 c4 0c             	add    esp,0xc
c001cfc6:	c3                   	ret    
c001cfc7:	90                   	nop

c001cfc8 <ATAPI::ATAPI()>:
c001cfc8:	83 ec 0c             	sub    esp,0xc
c001cfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcf:	83 ec 04             	sub    esp,0x4
c001cfd2:	68 00 08 00 00       	push   0x800
c001cfd7:	68 9d 2d 02 c0       	push   0xc0022d9d
c001cfdc:	50                   	push   eax
c001cfdd:	e8 28 fa fe ff       	call   c000ca0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cfe2:	83 c4 10             	add    esp,0x10
c001cfe5:	ba b8 2c 02 c0       	mov    edx,0xc0022cb8
c001cfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfee:	89 10                	mov    DWORD PTR [eax],edx
c001cff0:	90                   	nop
c001cff1:	83 c4 0c             	add    esp,0xc
c001cff4:	c3                   	ret    
c001cff5:	90                   	nop

c001cff6 <ATAPI::readyForCommand()>:
c001cff6:	56                   	push   esi
c001cff7:	53                   	push   ebx
c001cff8:	53                   	push   ebx
c001cff9:	31 db                	xor    ebx,ebx
c001cffb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfff:	51                   	push   ecx
c001d000:	6a 0c                	push   0xc
c001d002:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d009:	50                   	push   eax
c001d00a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d010:	e8 77 e8 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001d015:	83 c4 10             	add    esp,0x10
c001d018:	a8 88                	test   al,0x88
c001d01a:	74 25                	je     c001d041 <ATAPI::readyForCommand()+0x4b>
c001d01c:	43                   	inc    ebx
c001d01d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d023:	7e da                	jle    c001cfff <ATAPI::readyForCommand()+0x9>
c001d025:	83 ec 0c             	sub    esp,0xc
c001d028:	68 5e 01 00 00       	push   0x15e
c001d02d:	e8 c6 8d ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001d032:	83 c4 10             	add    esp,0x10
c001d035:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d03b:	75 c2                	jne    c001cfff <ATAPI::readyForCommand()+0x9>
c001d03d:	31 c0                	xor    eax,eax
c001d03f:	eb 02                	jmp    c001d043 <ATAPI::readyForCommand()+0x4d>
c001d041:	b0 01                	mov    al,0x1
c001d043:	5a                   	pop    edx
c001d044:	5b                   	pop    ebx
c001d045:	5e                   	pop    esi
c001d046:	c3                   	ret    
c001d047:	90                   	nop

c001d048 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d048:	55                   	push   ebp
c001d049:	57                   	push   edi
c001d04a:	56                   	push   esi
c001d04b:	53                   	push   ebx
c001d04c:	83 ec 20             	sub    esp,0x20
c001d04f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d053:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d057:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d05b:	6a 01                	push   0x1
c001d05d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d064:	50                   	push   eax
c001d065:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d06b:	e8 6a e9 ff ff       	call   c001b9da <IDE::enableIRQs(unsigned char, bool)>
c001d070:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d077:	59                   	pop    ecx
c001d078:	5e                   	pop    esi
c001d079:	50                   	push   eax
c001d07a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d080:	e8 21 e7 ff ff       	call   c001b7a6 <IDE::prepareInterrupt(unsigned char)>
c001d085:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d088:	e8 69 ff ff ff       	call   c001cff6 <ATAPI::readyForCommand()>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	84 c0                	test   al,al
c001d092:	75 0a                	jne    c001d09e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d094:	bb 01 00 00 00       	mov    ebx,0x1
c001d099:	e9 5f 02 00 00       	jmp    c001d2fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d09e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d0a4:	c1 e0 04             	shl    eax,0x4
c001d0a7:	0f b6 c0             	movzx  eax,al
c001d0aa:	50                   	push   eax
c001d0ab:	6a 06                	push   0x6
c001d0ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b4:	50                   	push   eax
c001d0b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0bb:	e8 0c e7 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c0:	6a 00                	push   0x0
c001d0c2:	6a 01                	push   0x1
c001d0c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0cb:	50                   	push   eax
c001d0cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0d2:	e8 f5 e6 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0d7:	83 c4 20             	add    esp,0x20
c001d0da:	0f b6 c3             	movzx  eax,bl
c001d0dd:	50                   	push   eax
c001d0de:	0f b6 df             	movzx  ebx,bh
c001d0e1:	6a 04                	push   0x4
c001d0e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0ea:	50                   	push   eax
c001d0eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f1:	e8 d6 e6 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0f6:	53                   	push   ebx
c001d0f7:	6a 05                	push   0x5
c001d0f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d100:	50                   	push   eax
c001d101:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d107:	e8 c0 e6 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d10c:	83 c4 20             	add    esp,0x20
c001d10f:	68 a0 00 00 00       	push   0xa0
c001d114:	6a 07                	push   0x7
c001d116:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d11d:	50                   	push   eax
c001d11e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d124:	e8 a3 e6 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d129:	83 c4 0c             	add    esp,0xc
c001d12c:	6a 01                	push   0x1
c001d12e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d135:	50                   	push   eax
c001d136:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d13c:	e8 6f f1 ff ff       	call   c001c2b0 <IDE::polling(unsigned char, unsigned int)>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	0f b6 d8             	movzx  ebx,al
c001d147:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d14d:	85 db                	test   ebx,ebx
c001d14f:	74 20                	je     c001d171 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d151:	53                   	push   ebx
c001d152:	0f b6 c0             	movzx  eax,al
c001d155:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d15c:	52                   	push   edx
c001d15d:	50                   	push   eax
c001d15e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d164:	e8 8d f0 ff ff       	call   c001c1f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	e9 8c 01 00 00       	jmp    c001d2fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d171:	52                   	push   edx
c001d172:	0f b6 c0             	movzx  eax,al
c001d175:	52                   	push   edx
c001d176:	50                   	push   eax
c001d177:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d17d:	e8 38 e6 ff ff       	call   c001b7ba <IDE::getBase(unsigned char)>
c001d182:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d186:	b9 06 00 00 00       	mov    ecx,0x6
c001d18b:	89 c2                	mov    edx,eax
c001d18d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d190:	89 e8                	mov    eax,ebp
c001d192:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	0f b6 c0             	movzx  eax,al
c001d19c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1a0:	85 db                	test   ebx,ebx
c001d1a2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1a8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1af:	0f 84 eb 00 00 00    	je     c001d2a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d1b5:	55                   	push   ebp
c001d1b6:	55                   	push   ebp
c001d1b7:	52                   	push   edx
c001d1b8:	50                   	push   eax
c001d1b9:	e8 82 e7 ff ff       	call   c001b940 <IDE::waitInterrupt(unsigned char)>
c001d1be:	83 c4 10             	add    esp,0x10
c001d1c1:	84 c0                	test   al,al
c001d1c3:	0f 84 cb fe ff ff    	je     c001d094 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d1c9:	56                   	push   esi
c001d1ca:	56                   	push   esi
c001d1cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d2:	50                   	push   eax
c001d1d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1d9:	e8 c8 e5 ff ff       	call   c001b7a6 <IDE::prepareInterrupt(unsigned char)>
c001d1de:	83 c4 0c             	add    esp,0xc
c001d1e1:	6a 04                	push   0x4
c001d1e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ea:	50                   	push   eax
c001d1eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f1:	e8 96 e6 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001d1f6:	83 c4 0c             	add    esp,0xc
c001d1f9:	6a 05                	push   0x5
c001d1fb:	89 c6                	mov    esi,eax
c001d1fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d204:	50                   	push   eax
c001d205:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d20b:	e8 7c e6 ff ff       	call   c001b88c <IDE::read(unsigned char, unsigned char)>
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	0f b6 e8             	movzx  ebp,al
c001d216:	89 f0                	mov    eax,esi
c001d218:	c1 e5 08             	shl    ebp,0x8
c001d21b:	0f b6 f0             	movzx  esi,al
c001d21e:	09 f5                	or     ebp,esi
c001d220:	31 f6                	xor    esi,esi
c001d222:	d1 fd                	sar    ebp,1
c001d224:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d229:	74 5c                	je     c001d287 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d22b:	39 ee                	cmp    esi,ebp
c001d22d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d233:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d23a:	75 0d                	jne    c001d249 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d23c:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d23f:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d243:	4b                   	dec    ebx
c001d244:	e9 57 ff ff ff       	jmp    c001d1a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d249:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d24d:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d251:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d256:	51                   	push   ecx
c001d257:	51                   	push   ecx
c001d258:	52                   	push   edx
c001d259:	50                   	push   eax
c001d25a:	e8 5b e5 ff ff       	call   c001b7ba <IDE::getBase(unsigned char)>
c001d25f:	89 c2                	mov    edx,eax
c001d261:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d266:	66 ef                	out    dx,ax
c001d268:	46                   	inc    esi
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	eb bd                	jmp    c001d22b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d26e:	51                   	push   ecx
c001d26f:	51                   	push   ecx
c001d270:	52                   	push   edx
c001d271:	50                   	push   eax
c001d272:	e8 43 e5 ff ff       	call   c001b7ba <IDE::getBase(unsigned char)>
c001d277:	89 c2                	mov    edx,eax
c001d279:	66 ed                	in     ax,dx
c001d27b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d27f:	83 c4 10             	add    esp,0x10
c001d282:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d286:	46                   	inc    esi
c001d287:	39 ee                	cmp    esi,ebp
c001d289:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d28f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d296:	75 d6                	jne    c001d26e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d298:	01 f6                	add    esi,esi
c001d29a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d29e:	eb a3                	jmp    c001d243 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d2a0:	51                   	push   ecx
c001d2a1:	51                   	push   ecx
c001d2a2:	52                   	push   edx
c001d2a3:	50                   	push   eax
c001d2a4:	e8 97 e6 ff ff       	call   c001b940 <IDE::waitInterrupt(unsigned char)>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	84 c0                	test   al,al
c001d2ae:	0f 84 e0 fd ff ff    	je     c001d094 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d2b4:	52                   	push   edx
c001d2b5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d2ba:	52                   	push   edx
c001d2bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2c2:	50                   	push   eax
c001d2c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2c9:	e8 d8 e4 ff ff       	call   c001b7a6 <IDE::prepareInterrupt(unsigned char)>
c001d2ce:	83 c4 10             	add    esp,0x10
c001d2d1:	50                   	push   eax
c001d2d2:	50                   	push   eax
c001d2d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2da:	50                   	push   eax
c001d2db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2e1:	e8 d4 e4 ff ff       	call   c001b7ba <IDE::getBase(unsigned char)>
c001d2e6:	8d 50 07             	lea    edx,[eax+0x7]
c001d2e9:	ec                   	in     al,dx
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	a8 88                	test   al,0x88
c001d2ef:	74 0a                	je     c001d2fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d2f1:	4b                   	dec    ebx
c001d2f2:	75 dd                	jne    c001d2d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d2f4:	bb 02 00 00 00       	mov    ebx,0x2
c001d2f9:	eb 02                	jmp    c001d2fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d2fb:	31 db                	xor    ebx,ebx
c001d2fd:	83 c4 1c             	add    esp,0x1c
c001d300:	89 d8                	mov    eax,ebx
c001d302:	5b                   	pop    ebx
c001d303:	5e                   	pop    esi
c001d304:	5f                   	pop    edi
c001d305:	5d                   	pop    ebp
c001d306:	c3                   	ret    
c001d307:	90                   	nop

c001d308 <ATAPI::diskRemoved()>:
c001d308:	53                   	push   ebx
c001d309:	83 ec 14             	sub    esp,0x14
c001d30c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d310:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d317:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d31d:	e8 8a 06 ff ff       	call   c000d9ac <LogicalDisk::unmount()>
c001d322:	58                   	pop    eax
c001d323:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d329:	e8 62 10 ff ff       	call   c000e390 <VCache::writeWriteBuffer()>
c001d32e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d334:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d338:	83 c4 18             	add    esp,0x18
c001d33b:	5b                   	pop    ebx
c001d33c:	e9 3f 10 ff ff       	jmp    c000e380 <VCache::invalidateReadBuffer()>
c001d341:	90                   	nop

c001d342 <ATAPI::eject()>:
c001d342:	57                   	push   edi
c001d343:	b9 03 00 00 00       	mov    ecx,0x3
c001d348:	53                   	push   ebx
c001d349:	83 ec 14             	sub    esp,0x14
c001d34c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d350:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d354:	fc                   	cld    
c001d355:	31 c0                	xor    eax,eax
c001d357:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d359:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d35e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d363:	50                   	push   eax
c001d364:	50                   	push   eax
c001d365:	6a 00                	push   0x0
c001d367:	6a 00                	push   0x0
c001d369:	6a 00                	push   0x0
c001d36b:	6a 02                	push   0x2
c001d36d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d371:	50                   	push   eax
c001d372:	53                   	push   ebx
c001d373:	e8 d0 fc ff ff       	call   c001d048 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d378:	83 c4 14             	add    esp,0x14
c001d37b:	53                   	push   ebx
c001d37c:	e8 87 ff ff ff       	call   c001d308 <ATAPI::diskRemoved()>
c001d381:	83 c4 24             	add    esp,0x24
c001d384:	31 c0                	xor    eax,eax
c001d386:	5b                   	pop    ebx
c001d387:	5f                   	pop    edi
c001d388:	c3                   	ret    
c001d389:	90                   	nop

c001d38a <ATAPI::diskInserted()>:
c001d38a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d38e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d395:	c3                   	ret    

c001d396 <ATAPI::detectMedia()>:
c001d396:	56                   	push   esi
c001d397:	53                   	push   ebx
c001d398:	83 ec 28             	sub    esp,0x28
c001d39b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d39f:	6a 0c                	push   0xc
c001d3a1:	6a 00                	push   0x0
c001d3a3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d3a7:	56                   	push   esi
c001d3a8:	e8 43 31 fe ff       	call   c00004f0 <memset>
c001d3ad:	58                   	pop    eax
c001d3ae:	5a                   	pop    edx
c001d3af:	6a 00                	push   0x0
c001d3b1:	6a 00                	push   0x0
c001d3b3:	6a 00                	push   0x0
c001d3b5:	6a 00                	push   0x0
c001d3b7:	56                   	push   esi
c001d3b8:	53                   	push   ebx
c001d3b9:	e8 8a fc ff ff       	call   c001d048 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3be:	83 c4 1c             	add    esp,0x1c
c001d3c1:	6a 0c                	push   0xc
c001d3c3:	6a 00                	push   0x0
c001d3c5:	56                   	push   esi
c001d3c6:	e8 25 31 fe ff       	call   c00004f0 <memset>
c001d3cb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d3d0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d3d5:	59                   	pop    ecx
c001d3d6:	58                   	pop    eax
c001d3d7:	6a 01                	push   0x1
c001d3d9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d3dd:	50                   	push   eax
c001d3de:	6a 00                	push   0x0
c001d3e0:	6a 12                	push   0x12
c001d3e2:	56                   	push   esi
c001d3e3:	53                   	push   ebx
c001d3e4:	e8 5f fc ff ff       	call   c001d048 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3e9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d3ed:	83 c4 20             	add    esp,0x20
c001d3f0:	83 e0 7f             	and    eax,0x7f
c001d3f3:	83 f8 70             	cmp    eax,0x70
c001d3f6:	74 15                	je     c001d40d <ATAPI::detectMedia()+0x77>
c001d3f8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3ff:	75 0c                	jne    c001d40d <ATAPI::detectMedia()+0x77>
c001d401:	83 ec 0c             	sub    esp,0xc
c001d404:	53                   	push   ebx
c001d405:	e8 80 ff ff ff       	call   c001d38a <ATAPI::diskInserted()>
c001d40a:	83 c4 10             	add    esp,0x10
c001d40d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d411:	83 e0 0f             	and    eax,0xf
c001d414:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d419:	0f b6 c0             	movzx  eax,al
c001d41c:	75 19                	jne    c001d437 <ATAPI::detectMedia()+0xa1>
c001d41e:	83 f8 02             	cmp    eax,0x2
c001d421:	75 14                	jne    c001d437 <ATAPI::detectMedia()+0xa1>
c001d423:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d42a:	74 24                	je     c001d450 <ATAPI::detectMedia()+0xba>
c001d42c:	83 ec 0c             	sub    esp,0xc
c001d42f:	53                   	push   ebx
c001d430:	e8 d3 fe ff ff       	call   c001d308 <ATAPI::diskRemoved()>
c001d435:	eb 16                	jmp    c001d44d <ATAPI::detectMedia()+0xb7>
c001d437:	85 c0                	test   eax,eax
c001d439:	75 15                	jne    c001d450 <ATAPI::detectMedia()+0xba>
c001d43b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d442:	75 0c                	jne    c001d450 <ATAPI::detectMedia()+0xba>
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	53                   	push   ebx
c001d448:	e8 3d ff ff ff       	call   c001d38a <ATAPI::diskInserted()>
c001d44d:	83 c4 10             	add    esp,0x10
c001d450:	83 c4 24             	add    esp,0x24
c001d453:	5b                   	pop    ebx
c001d454:	5e                   	pop    esi
c001d455:	c3                   	ret    

c001d456 <ATAPI::open(int, int, void*)>:
c001d456:	56                   	push   esi
c001d457:	53                   	push   ebx
c001d458:	50                   	push   eax
c001d459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d45d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d461:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d465:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d46b:	c1 e0 06             	shl    eax,0x6
c001d46e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d474:	01 d0                	add    eax,edx
c001d476:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d47d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d483:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d48a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d494:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d49b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d4a1:	6a 04                	push   0x4
c001d4a3:	6a 0c                	push   0xc
c001d4a5:	51                   	push   ecx
c001d4a6:	52                   	push   edx
c001d4a7:	e8 20 e3 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4ac:	90                   	nop
c001d4ad:	90                   	nop
c001d4ae:	6a 00                	push   0x0
c001d4b0:	6a 0c                	push   0xc
c001d4b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4b9:	50                   	push   eax
c001d4ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4c0:	e8 07 e3 ff ff       	call   c001b7cc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4c5:	83 c4 14             	add    esp,0x14
c001d4c8:	68 78 01 00 00       	push   0x178
c001d4cd:	e8 01 a6 fe ff       	call   c0007ad3 <malloc>
c001d4d2:	83 c4 0c             	add    esp,0xc
c001d4d5:	6a 00                	push   0x0
c001d4d7:	68 ff ff ff 7f       	push   0x7fffffff
c001d4dc:	6a 00                	push   0x0
c001d4de:	6a 00                	push   0x0
c001d4e0:	53                   	push   ebx
c001d4e1:	68 4f 2e 02 c0       	push   0xc0022e4f
c001d4e6:	89 c6                	mov    esi,eax
c001d4e8:	50                   	push   eax
c001d4e9:	e8 fc 02 ff ff       	call   c000d7ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4ee:	83 c4 14             	add    esp,0x14
c001d4f1:	56                   	push   esi
c001d4f2:	e8 b3 03 ff ff       	call   c000d8aa <LogicalDisk::assignDriveLetter()>
c001d4f7:	5a                   	pop    edx
c001d4f8:	59                   	pop    ecx
c001d4f9:	0f be c0             	movsx  eax,al
c001d4fc:	50                   	push   eax
c001d4fd:	68 a0 2c 02 c0       	push   0xc0022ca0
c001d502:	e8 03 d4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d507:	58                   	pop    eax
c001d508:	5a                   	pop    edx
c001d509:	56                   	push   esi
c001d50a:	53                   	push   ebx
c001d50b:	e8 2c f1 fe ff       	call   c000c63c <Device::addChild(Device*)>
c001d510:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d519:	e8 54 f5 fe ff       	call   c000ca72 <PhysicalDisk::startCache()>
c001d51e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d525:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d528:	e8 69 fe ff ff       	call   c001d396 <ATAPI::detectMedia()>
c001d52d:	83 c4 14             	add    esp,0x14
c001d530:	31 c0                	xor    eax,eax
c001d532:	5b                   	pop    ebx
c001d533:	5e                   	pop    esi
c001d534:	c3                   	ret    
c001d535:	90                   	nop

c001d536 <ATAPI::read(unsigned long long, int, void*)>:
c001d536:	55                   	push   ebp
c001d537:	57                   	push   edi
c001d538:	56                   	push   esi
c001d539:	53                   	push   ebx
c001d53a:	83 ec 1c             	sub    esp,0x1c
c001d53d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d541:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d545:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d549:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d550:	74 3c                	je     c001d58e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d552:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d556:	b9 03 00 00 00       	mov    ecx,0x3
c001d55b:	fc                   	cld    
c001d55c:	31 c0                	xor    eax,eax
c001d55e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d560:	89 e8                	mov    eax,ebp
c001d562:	0f ce                	bswap  esi
c001d564:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d568:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d56d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d571:	50                   	push   eax
c001d572:	50                   	push   eax
c001d573:	55                   	push   ebp
c001d574:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d578:	c1 e5 0b             	shl    ebp,0xb
c001d57b:	6a 00                	push   0x0
c001d57d:	55                   	push   ebp
c001d57e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d582:	50                   	push   eax
c001d583:	53                   	push   ebx
c001d584:	e8 bf fa ff ff       	call   c001d048 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d589:	83 c4 20             	add    esp,0x20
c001d58c:	eb 1a                	jmp    c001d5a8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d58e:	83 ec 0c             	sub    esp,0xc
c001d591:	53                   	push   ebx
c001d592:	e8 ff fd ff ff       	call   c001d396 <ATAPI::detectMedia()>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5a1:	75 af                	jne    c001d552 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d5a3:	b8 02 00 00 00       	mov    eax,0x2
c001d5a8:	83 c4 1c             	add    esp,0x1c
c001d5ab:	5b                   	pop    ebx
c001d5ac:	5e                   	pop    esi
c001d5ad:	5f                   	pop    edi
c001d5ae:	5d                   	pop    ebp
c001d5af:	c3                   	ret    

c001d5b0 <SATA::close(int, int, void*)>:
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5bd:	85 c0                	test   eax,eax
c001d5bf:	74 0c                	je     c001d5cd <SATA::close(int, int, void*)+0x1d>
c001d5c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5c3:	83 ec 0c             	sub    esp,0xc
c001d5c6:	50                   	push   eax
c001d5c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5ca:	83 c4 10             	add    esp,0x10
c001d5cd:	31 c0                	xor    eax,eax
c001d5cf:	83 c4 0c             	add    esp,0xc
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <SATA::powerSaving(PowerSavingLevel)>:
c001d5d4:	c3                   	ret    
c001d5d5:	90                   	nop

c001d5d6 <SATA::open(int, int, void*)>:
c001d5d6:	56                   	push   esi
c001d5d7:	53                   	push   ebx
c001d5d8:	50                   	push   eax
c001d5d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5e1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5eb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5f5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5ff:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d609:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d610:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d616:	e8 c7 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d61b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d621:	89 c6                	mov    esi,eax
c001d623:	e8 ba a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d628:	81 c6 00 10 00 00    	add    esi,0x1000
c001d62e:	39 c6                	cmp    esi,eax
c001d630:	74 10                	je     c001d642 <SATA::open(int, int, void*)+0x6c>
c001d632:	83 ec 0c             	sub    esp,0xc
c001d635:	68 e8 2c 02 c0       	push   0xc0022ce8
c001d63a:	e8 9a 3b ff ff       	call   c00111d9 <KePanic(char const*)>
c001d63f:	83 c4 10             	add    esp,0x10
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	6a 02                	push   0x2
c001d647:	e8 a9 bf fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d64c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d652:	6a 03                	push   0x3
c001d654:	50                   	push   eax
c001d655:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d65b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d661:	e8 98 c6 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d666:	83 c4 14             	add    esp,0x14
c001d669:	53                   	push   ebx
c001d66a:	e8 03 f4 fe ff       	call   c000ca72 <PhysicalDisk::startCache()>
c001d66f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d672:	e8 47 06 ff ff       	call   c000dcbe <createPartitionsForDisk(PhysicalDisk*)>
c001d677:	83 c4 14             	add    esp,0x14
c001d67a:	31 c0                	xor    eax,eax
c001d67c:	5b                   	pop    ebx
c001d67d:	5e                   	pop    esi
c001d67e:	c3                   	ret    
c001d67f:	90                   	nop

c001d680 <SATA::SATA()>:
c001d680:	83 ec 0c             	sub    esp,0xc
c001d683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d687:	83 ec 04             	sub    esp,0x4
c001d68a:	68 00 02 00 00       	push   0x200
c001d68f:	68 fc 2c 02 c0       	push   0xc0022cfc
c001d694:	50                   	push   eax
c001d695:	e8 70 f3 fe ff       	call   c000ca0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001d6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a6:	89 10                	mov    DWORD PTR [eax],edx
c001d6a8:	90                   	nop
c001d6a9:	83 c4 0c             	add    esp,0xc
c001d6ac:	c3                   	ret    
c001d6ad:	90                   	nop

c001d6ae <SATA::access(unsigned long long, int, void*, bool)>:
c001d6ae:	55                   	push   ebp
c001d6af:	57                   	push   edi
c001d6b0:	56                   	push   esi
c001d6b1:	53                   	push   ebx
c001d6b2:	83 ec 2c             	sub    esp,0x2c
c001d6b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d6b9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6ce:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6d6:	7e 10                	jle    c001d6e8 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	68 0c 2d 02 c0       	push   0xc0022d0c
c001d6e0:	e8 f4 3a ff ff       	call   c00111d9 <KePanic(char const*)>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d6ee:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d6f4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d6fa:	89 e8                	mov    eax,ebp
c001d6fc:	c1 e0 07             	shl    eax,0x7
c001d6ff:	01 d0                	add    eax,edx
c001d701:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d70b:	8d 45 02             	lea    eax,[ebp+0x2]
c001d70e:	51                   	push   ecx
c001d70f:	c1 e0 07             	shl    eax,0x7
c001d712:	51                   	push   ecx
c001d713:	01 d0                	add    eax,edx
c001d715:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d719:	50                   	push   eax
c001d71a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d720:	e8 6b ec ff ff       	call   c001c390 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d731:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d735:	0f 84 5b 01 00 00    	je     c001d896 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d73b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d73f:	c1 e0 09             	shl    eax,0x9
c001d742:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d747:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d74b:	74 0e                	je     c001d75b <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d74d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d753:	89 c1                	mov    ecx,eax
c001d755:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d75b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d75f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d765:	8d 45 02             	lea    eax,[ebp+0x2]
c001d768:	c1 e0 07             	shl    eax,0x7
c001d76b:	01 d0                	add    eax,edx
c001d76d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d76f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d775:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d77b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d77f:	c1 e1 05             	shl    ecx,0x5
c001d782:	01 c8                	add    eax,ecx
c001d784:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d788:	83 e1 01             	and    ecx,0x1
c001d78b:	89 ce                	mov    esi,ecx
c001d78d:	8a 08                	mov    cl,BYTE PTR [eax]
c001d78f:	c1 e6 06             	shl    esi,0x6
c001d792:	83 e1 bf             	and    ecx,0xffffffbf
c001d795:	09 f1                	or     ecx,esi
c001d797:	88 08                	mov    BYTE PTR [eax],cl
c001d799:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d79b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d7a1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d7a7:	89 08                	mov    DWORD PTR [eax],ecx
c001d7a9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d7af:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d7b5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d7bb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d7be:	50                   	push   eax
c001d7bf:	68 90 00 00 00       	push   0x90
c001d7c4:	6a 00                	push   0x0
c001d7c6:	56                   	push   esi
c001d7c7:	e8 24 2d fe ff       	call   c00004f0 <memset>
c001d7cc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7d2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d7d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7dc:	83 c4 10             	add    esp,0x10
c001d7df:	48                   	dec    eax
c001d7e0:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7e5:	89 c1                	mov    ecx,eax
c001d7e7:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d7ed:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d7f2:	09 c8                	or     eax,ecx
c001d7f4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d7fa:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d800:	83 c8 80             	or     eax,0xffffff80
c001d803:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d809:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d80c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d810:	25 00 7f 00 00       	and    eax,0x7f00
c001d815:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d81a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d81f:	66 89 06             	mov    WORD PTR [esi],ax
c001d822:	b0 35                	mov    al,0x35
c001d824:	75 02                	jne    c001d828 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d826:	b0 25                	mov    al,0x25
c001d828:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d82b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d82f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d833:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d83b:	c1 e8 10             	shr    eax,0x10
c001d83e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d841:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d845:	c1 e8 18             	shr    eax,0x18
c001d848:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d84b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d84f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d852:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d856:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d859:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d85d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d861:	89 ee                	mov    esi,ebp
c001d863:	31 c0                	xor    eax,eax
c001d865:	c1 e6 07             	shl    esi,0x7
c001d868:	01 d6                	add    esi,edx
c001d86a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d870:	80 e1 88             	and    cl,0x88
c001d873:	74 0a                	je     c001d87f <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d875:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d87a:	74 0a                	je     c001d886 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d87c:	40                   	inc    eax
c001d87d:	eb eb                	jmp    c001d86a <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d87f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d884:	75 17                	jne    c001d89d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d886:	83 ec 0c             	sub    esp,0xc
c001d889:	68 45 2d 02 c0       	push   0xc0022d45
c001d88e:	e8 77 d0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d893:	83 c4 10             	add    esp,0x10
c001d896:	b8 01 00 00 00       	mov    eax,0x1
c001d89b:	eb 5b                	jmp    c001d8f8 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d89d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d8a1:	c1 e5 07             	shl    ebp,0x7
c001d8a4:	b8 01 00 00 00       	mov    eax,0x1
c001d8a9:	01 ea                	add    edx,ebp
c001d8ab:	d3 e0                	shl    eax,cl
c001d8ad:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d8b3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d8b9:	85 c8                	test   eax,ecx
c001d8bb:	74 16                	je     c001d8d3 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d8bd:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d8c3:	0f ba e1 1e          	bt     ecx,0x1e
c001d8c7:	73 ea                	jae    c001d8b3 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d8c9:	83 ec 0c             	sub    esp,0xc
c001d8cc:	68 53 2d 02 c0       	push   0xc0022d53
c001d8d1:	eb bb                	jmp    c001d88e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d8d3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d8d9:	0f ba e0 1e          	bt     eax,0x1e
c001d8dd:	72 b7                	jb     c001d896 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8df:	31 c0                	xor    eax,eax
c001d8e1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d8e6:	75 10                	jne    c001d8f8 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d8e8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d8ee:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d8f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8f8:	83 c4 2c             	add    esp,0x2c
c001d8fb:	5b                   	pop    ebx
c001d8fc:	5e                   	pop    esi
c001d8fd:	5f                   	pop    edi
c001d8fe:	5d                   	pop    ebp
c001d8ff:	c3                   	ret    

c001d900 <SATA::read(unsigned long long, int, void*)>:
c001d900:	55                   	push   ebp
c001d901:	57                   	push   edi
c001d902:	56                   	push   esi
c001d903:	be 04 00 00 00       	mov    esi,0x4
c001d908:	53                   	push   ebx
c001d909:	83 ec 0c             	sub    esp,0xc
c001d90c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d910:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d914:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d918:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d91c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d91f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d925:	0f 87 1a 02 00 00    	ja     c001db45 <SATA::read(unsigned long long, int, void*)+0x245>
c001d92b:	85 c9                	test   ecx,ecx
c001d92d:	be 06 00 00 00       	mov    esi,0x6
c001d932:	0f 84 0d 02 00 00    	je     c001db45 <SATA::read(unsigned long long, int, void*)+0x245>
c001d938:	56                   	push   esi
c001d939:	56                   	push   esi
c001d93a:	6a 00                	push   0x0
c001d93c:	51                   	push   ecx
c001d93d:	53                   	push   ebx
c001d93e:	52                   	push   edx
c001d93f:	50                   	push   eax
c001d940:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d944:	e8 65 fd ff ff       	call   c001d6ae <SATA::access(unsigned long long, int, void*, bool)>
c001d949:	83 c4 20             	add    esp,0x20
c001d94c:	85 c0                	test   eax,eax
c001d94e:	89 c6                	mov    esi,eax
c001d950:	0f 85 ea 01 00 00    	jne    c001db40 <SATA::read(unsigned long long, int, void*)+0x240>
c001d956:	50                   	push   eax
c001d957:	50                   	push   eax
c001d958:	6a 0f                	push   0xf
c001d95a:	6a 00                	push   0x0
c001d95c:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d962:	bb 0a 00 00 00       	mov    ebx,0xa
c001d967:	e8 7d f2 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001d96c:	5a                   	pop    edx
c001d96d:	59                   	pop    ecx
c001d96e:	b9 10 27 00 00       	mov    ecx,0x2710
c001d973:	0f b6 c0             	movzx  eax,al
c001d976:	50                   	push   eax
c001d977:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d97c:	99                   	cdq    
c001d97d:	f7 f9                	idiv   ecx
c001d97f:	99                   	cdq    
c001d980:	f7 fb                	idiv   ebx
c001d982:	8d 42 30             	lea    eax,[edx+0x30]
c001d985:	0f b6 c0             	movzx  eax,al
c001d988:	50                   	push   eax
c001d989:	e8 4a f2 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001d98e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d994:	5f                   	pop    edi
c001d995:	5d                   	pop    ebp
c001d996:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d99b:	6a 0f                	push   0xf
c001d99d:	6a 00                	push   0x0
c001d99f:	e8 45 f2 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001d9a4:	5a                   	pop    edx
c001d9a5:	59                   	pop    ecx
c001d9a6:	0f b6 c0             	movzx  eax,al
c001d9a9:	50                   	push   eax
c001d9aa:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9af:	99                   	cdq    
c001d9b0:	f7 fd                	idiv   ebp
c001d9b2:	99                   	cdq    
c001d9b3:	f7 fb                	idiv   ebx
c001d9b5:	8d 42 30             	lea    eax,[edx+0x30]
c001d9b8:	0f b6 c0             	movzx  eax,al
c001d9bb:	50                   	push   eax
c001d9bc:	e8 17 f2 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001d9c1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d9c7:	5f                   	pop    edi
c001d9c8:	bf 64 00 00 00       	mov    edi,0x64
c001d9cd:	58                   	pop    eax
c001d9ce:	6a 0f                	push   0xf
c001d9d0:	6a 00                	push   0x0
c001d9d2:	e8 12 f2 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001d9d7:	5a                   	pop    edx
c001d9d8:	59                   	pop    ecx
c001d9d9:	0f b6 c0             	movzx  eax,al
c001d9dc:	50                   	push   eax
c001d9dd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9e2:	99                   	cdq    
c001d9e3:	f7 ff                	idiv   edi
c001d9e5:	99                   	cdq    
c001d9e6:	f7 fb                	idiv   ebx
c001d9e8:	8d 42 30             	lea    eax,[edx+0x30]
c001d9eb:	0f b6 c0             	movzx  eax,al
c001d9ee:	50                   	push   eax
c001d9ef:	e8 e4 f1 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001d9f4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d9fa:	58                   	pop    eax
c001d9fb:	5a                   	pop    edx
c001d9fc:	6a 0f                	push   0xf
c001d9fe:	6a 00                	push   0x0
c001da00:	e8 e4 f1 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001da05:	59                   	pop    ecx
c001da06:	5a                   	pop    edx
c001da07:	0f b6 c0             	movzx  eax,al
c001da0a:	50                   	push   eax
c001da0b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da10:	99                   	cdq    
c001da11:	f7 fb                	idiv   ebx
c001da13:	99                   	cdq    
c001da14:	f7 fb                	idiv   ebx
c001da16:	8d 42 30             	lea    eax,[edx+0x30]
c001da19:	0f b6 c0             	movzx  eax,al
c001da1c:	50                   	push   eax
c001da1d:	e8 b6 f1 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001da22:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001da28:	59                   	pop    ecx
c001da29:	58                   	pop    eax
c001da2a:	6a 0f                	push   0xf
c001da2c:	6a 00                	push   0x0
c001da2e:	e8 b6 f1 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001da33:	5a                   	pop    edx
c001da34:	59                   	pop    ecx
c001da35:	0f b6 c0             	movzx  eax,al
c001da38:	50                   	push   eax
c001da39:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da3e:	99                   	cdq    
c001da3f:	f7 fb                	idiv   ebx
c001da41:	83 c2 30             	add    edx,0x30
c001da44:	0f b6 d2             	movzx  edx,dl
c001da47:	52                   	push   edx
c001da48:	e8 8b f1 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001da4d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001da53:	58                   	pop    eax
c001da54:	5a                   	pop    edx
c001da55:	6a 0f                	push   0xf
c001da57:	6a 00                	push   0x0
c001da59:	e8 8b f1 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001da5e:	59                   	pop    ecx
c001da5f:	b9 10 27 00 00       	mov    ecx,0x2710
c001da64:	5a                   	pop    edx
c001da65:	0f b6 c0             	movzx  eax,al
c001da68:	50                   	push   eax
c001da69:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da6e:	99                   	cdq    
c001da6f:	f7 f9                	idiv   ecx
c001da71:	99                   	cdq    
c001da72:	f7 fb                	idiv   ebx
c001da74:	8d 42 30             	lea    eax,[edx+0x30]
c001da77:	0f b6 c0             	movzx  eax,al
c001da7a:	50                   	push   eax
c001da7b:	e8 58 f1 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001da80:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da86:	59                   	pop    ecx
c001da87:	58                   	pop    eax
c001da88:	6a 0f                	push   0xf
c001da8a:	6a 00                	push   0x0
c001da8c:	e8 58 f1 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001da91:	5a                   	pop    edx
c001da92:	59                   	pop    ecx
c001da93:	0f b6 c0             	movzx  eax,al
c001da96:	50                   	push   eax
c001da97:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da9c:	99                   	cdq    
c001da9d:	f7 fd                	idiv   ebp
c001da9f:	99                   	cdq    
c001daa0:	f7 fb                	idiv   ebx
c001daa2:	8d 42 30             	lea    eax,[edx+0x30]
c001daa5:	0f b6 c0             	movzx  eax,al
c001daa8:	50                   	push   eax
c001daa9:	e8 2a f1 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001daae:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dab4:	5d                   	pop    ebp
c001dab5:	58                   	pop    eax
c001dab6:	6a 0f                	push   0xf
c001dab8:	6a 00                	push   0x0
c001daba:	e8 2a f1 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dabf:	5a                   	pop    edx
c001dac0:	59                   	pop    ecx
c001dac1:	0f b6 c0             	movzx  eax,al
c001dac4:	50                   	push   eax
c001dac5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001daca:	99                   	cdq    
c001dacb:	f7 ff                	idiv   edi
c001dacd:	99                   	cdq    
c001dace:	f7 fb                	idiv   ebx
c001dad0:	8d 42 30             	lea    eax,[edx+0x30]
c001dad3:	0f b6 c0             	movzx  eax,al
c001dad6:	50                   	push   eax
c001dad7:	e8 fc f0 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dadc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dae2:	5f                   	pop    edi
c001dae3:	5d                   	pop    ebp
c001dae4:	6a 0f                	push   0xf
c001dae6:	6a 00                	push   0x0
c001dae8:	e8 fc f0 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001daed:	5a                   	pop    edx
c001daee:	59                   	pop    ecx
c001daef:	0f b6 c0             	movzx  eax,al
c001daf2:	50                   	push   eax
c001daf3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001daf8:	99                   	cdq    
c001daf9:	f7 fb                	idiv   ebx
c001dafb:	99                   	cdq    
c001dafc:	f7 fb                	idiv   ebx
c001dafe:	8d 42 30             	lea    eax,[edx+0x30]
c001db01:	0f b6 c0             	movzx  eax,al
c001db04:	50                   	push   eax
c001db05:	e8 ce f0 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001db0a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001db10:	5f                   	pop    edi
c001db11:	5d                   	pop    ebp
c001db12:	6a 0f                	push   0xf
c001db14:	6a 00                	push   0x0
c001db16:	e8 ce f0 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001db1b:	5a                   	pop    edx
c001db1c:	59                   	pop    ecx
c001db1d:	0f b6 c0             	movzx  eax,al
c001db20:	50                   	push   eax
c001db21:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db26:	99                   	cdq    
c001db27:	f7 fb                	idiv   ebx
c001db29:	83 c2 30             	add    edx,0x30
c001db2c:	0f b6 d2             	movzx  edx,dl
c001db2f:	52                   	push   edx
c001db30:	e8 a3 f0 ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001db35:	83 c4 10             	add    esp,0x10
c001db38:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001db3e:	eb 05                	jmp    c001db45 <SATA::read(unsigned long long, int, void*)+0x245>
c001db40:	be 01 00 00 00       	mov    esi,0x1
c001db45:	83 c4 0c             	add    esp,0xc
c001db48:	89 f0                	mov    eax,esi
c001db4a:	5b                   	pop    ebx
c001db4b:	5e                   	pop    esi
c001db4c:	5f                   	pop    edi
c001db4d:	5d                   	pop    ebp
c001db4e:	c3                   	ret    
c001db4f:	90                   	nop

c001db50 <SATA::write(unsigned long long, int, void*)>:
c001db50:	55                   	push   ebp
c001db51:	57                   	push   edi
c001db52:	56                   	push   esi
c001db53:	53                   	push   ebx
c001db54:	83 ec 0c             	sub    esp,0xc
c001db57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db5b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db5f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db67:	8d 70 ff             	lea    esi,[eax-0x1]
c001db6a:	b8 04 00 00 00       	mov    eax,0x4
c001db6f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db75:	0f 87 2c 02 00 00    	ja     c001dda7 <SATA::write(unsigned long long, int, void*)+0x257>
c001db7b:	85 db                	test   ebx,ebx
c001db7d:	b8 06 00 00 00       	mov    eax,0x6
c001db82:	0f 84 1f 02 00 00    	je     c001dda7 <SATA::write(unsigned long long, int, void*)+0x257>
c001db88:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db8c:	c1 e6 09             	shl    esi,0x9
c001db8f:	01 de                	add    esi,ebx
c001db91:	50                   	push   eax
c001db92:	89 d7                	mov    edi,edx
c001db94:	50                   	push   eax
c001db95:	83 c7 01             	add    edi,0x1
c001db98:	6a 01                	push   0x1
c001db9a:	89 cd                	mov    ebp,ecx
c001db9c:	53                   	push   ebx
c001db9d:	83 d5 00             	adc    ebp,0x0
c001dba0:	6a 01                	push   0x1
c001dba2:	81 c3 00 02 00 00    	add    ebx,0x200
c001dba8:	51                   	push   ecx
c001dba9:	52                   	push   edx
c001dbaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbae:	e8 fb fa ff ff       	call   c001d6ae <SATA::access(unsigned long long, int, void*, bool)>
c001dbb3:	83 c4 20             	add    esp,0x20
c001dbb6:	39 f3                	cmp    ebx,esi
c001dbb8:	89 fa                	mov    edx,edi
c001dbba:	89 e9                	mov    ecx,ebp
c001dbbc:	75 d3                	jne    c001db91 <SATA::write(unsigned long long, int, void*)+0x41>
c001dbbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dbc2:	bd 10 27 00 00       	mov    ebp,0x2710
c001dbc7:	bb 0a 00 00 00       	mov    ebx,0xa
c001dbcc:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dbd2:	50                   	push   eax
c001dbd3:	50                   	push   eax
c001dbd4:	6a 0f                	push   0xf
c001dbd6:	6a 00                	push   0x0
c001dbd8:	e8 0c f0 ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dbdd:	5a                   	pop    edx
c001dbde:	59                   	pop    ecx
c001dbdf:	0f b6 c0             	movzx  eax,al
c001dbe2:	50                   	push   eax
c001dbe3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbe8:	99                   	cdq    
c001dbe9:	f7 fd                	idiv   ebp
c001dbeb:	99                   	cdq    
c001dbec:	f7 fb                	idiv   ebx
c001dbee:	8d 42 30             	lea    eax,[edx+0x30]
c001dbf1:	0f b6 c0             	movzx  eax,al
c001dbf4:	50                   	push   eax
c001dbf5:	e8 de ef ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dbfa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc00:	5e                   	pop    esi
c001dc01:	5f                   	pop    edi
c001dc02:	bf e8 03 00 00       	mov    edi,0x3e8
c001dc07:	6a 0f                	push   0xf
c001dc09:	6a 00                	push   0x0
c001dc0b:	e8 d9 ef ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dc10:	5a                   	pop    edx
c001dc11:	59                   	pop    ecx
c001dc12:	0f b6 c0             	movzx  eax,al
c001dc15:	50                   	push   eax
c001dc16:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc1b:	99                   	cdq    
c001dc1c:	f7 ff                	idiv   edi
c001dc1e:	99                   	cdq    
c001dc1f:	f7 fb                	idiv   ebx
c001dc21:	8d 42 30             	lea    eax,[edx+0x30]
c001dc24:	0f b6 c0             	movzx  eax,al
c001dc27:	50                   	push   eax
c001dc28:	e8 ab ef ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dc2d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc33:	5e                   	pop    esi
c001dc34:	be 64 00 00 00       	mov    esi,0x64
c001dc39:	58                   	pop    eax
c001dc3a:	6a 0f                	push   0xf
c001dc3c:	6a 00                	push   0x0
c001dc3e:	e8 a6 ef ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dc43:	5a                   	pop    edx
c001dc44:	59                   	pop    ecx
c001dc45:	0f b6 c0             	movzx  eax,al
c001dc48:	50                   	push   eax
c001dc49:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc4e:	99                   	cdq    
c001dc4f:	f7 fe                	idiv   esi
c001dc51:	99                   	cdq    
c001dc52:	f7 fb                	idiv   ebx
c001dc54:	8d 42 30             	lea    eax,[edx+0x30]
c001dc57:	0f b6 c0             	movzx  eax,al
c001dc5a:	50                   	push   eax
c001dc5b:	e8 78 ef ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dc60:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc66:	58                   	pop    eax
c001dc67:	5a                   	pop    edx
c001dc68:	6a 0f                	push   0xf
c001dc6a:	6a 00                	push   0x0
c001dc6c:	e8 78 ef ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dc71:	59                   	pop    ecx
c001dc72:	5a                   	pop    edx
c001dc73:	0f b6 c0             	movzx  eax,al
c001dc76:	50                   	push   eax
c001dc77:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc7c:	99                   	cdq    
c001dc7d:	f7 fb                	idiv   ebx
c001dc7f:	99                   	cdq    
c001dc80:	f7 fb                	idiv   ebx
c001dc82:	8d 42 30             	lea    eax,[edx+0x30]
c001dc85:	0f b6 c0             	movzx  eax,al
c001dc88:	50                   	push   eax
c001dc89:	e8 4a ef ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dc8e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc94:	59                   	pop    ecx
c001dc95:	58                   	pop    eax
c001dc96:	6a 0f                	push   0xf
c001dc98:	6a 00                	push   0x0
c001dc9a:	e8 4a ef ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dc9f:	5a                   	pop    edx
c001dca0:	59                   	pop    ecx
c001dca1:	0f b6 c0             	movzx  eax,al
c001dca4:	50                   	push   eax
c001dca5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcaa:	99                   	cdq    
c001dcab:	f7 fb                	idiv   ebx
c001dcad:	83 c2 30             	add    edx,0x30
c001dcb0:	0f b6 d2             	movzx  edx,dl
c001dcb3:	52                   	push   edx
c001dcb4:	e8 1f ef ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dcb9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dcbf:	58                   	pop    eax
c001dcc0:	5a                   	pop    edx
c001dcc1:	6a 0f                	push   0xf
c001dcc3:	6a 00                	push   0x0
c001dcc5:	e8 1f ef ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dcca:	59                   	pop    ecx
c001dccb:	5a                   	pop    edx
c001dccc:	0f b6 c0             	movzx  eax,al
c001dccf:	50                   	push   eax
c001dcd0:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcd5:	99                   	cdq    
c001dcd6:	f7 fd                	idiv   ebp
c001dcd8:	99                   	cdq    
c001dcd9:	f7 fb                	idiv   ebx
c001dcdb:	8d 42 30             	lea    eax,[edx+0x30]
c001dcde:	0f b6 c0             	movzx  eax,al
c001dce1:	50                   	push   eax
c001dce2:	e8 f1 ee ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dce7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dced:	59                   	pop    ecx
c001dcee:	5d                   	pop    ebp
c001dcef:	6a 0f                	push   0xf
c001dcf1:	6a 00                	push   0x0
c001dcf3:	e8 f1 ee ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dcf8:	5a                   	pop    edx
c001dcf9:	59                   	pop    ecx
c001dcfa:	0f b6 c0             	movzx  eax,al
c001dcfd:	50                   	push   eax
c001dcfe:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd03:	99                   	cdq    
c001dd04:	f7 ff                	idiv   edi
c001dd06:	99                   	cdq    
c001dd07:	f7 fb                	idiv   ebx
c001dd09:	8d 42 30             	lea    eax,[edx+0x30]
c001dd0c:	0f b6 c0             	movzx  eax,al
c001dd0f:	50                   	push   eax
c001dd10:	e8 c3 ee ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dd15:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd1b:	5f                   	pop    edi
c001dd1c:	5d                   	pop    ebp
c001dd1d:	6a 0f                	push   0xf
c001dd1f:	6a 00                	push   0x0
c001dd21:	e8 c3 ee ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dd26:	5a                   	pop    edx
c001dd27:	59                   	pop    ecx
c001dd28:	0f b6 c0             	movzx  eax,al
c001dd2b:	50                   	push   eax
c001dd2c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd31:	99                   	cdq    
c001dd32:	f7 fe                	idiv   esi
c001dd34:	99                   	cdq    
c001dd35:	f7 fb                	idiv   ebx
c001dd37:	8d 42 30             	lea    eax,[edx+0x30]
c001dd3a:	0f b6 c0             	movzx  eax,al
c001dd3d:	50                   	push   eax
c001dd3e:	e8 95 ee ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dd43:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd49:	5e                   	pop    esi
c001dd4a:	5f                   	pop    edi
c001dd4b:	6a 0f                	push   0xf
c001dd4d:	6a 00                	push   0x0
c001dd4f:	e8 95 ee ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dd54:	5d                   	pop    ebp
c001dd55:	5a                   	pop    edx
c001dd56:	0f b6 c0             	movzx  eax,al
c001dd59:	50                   	push   eax
c001dd5a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd5f:	99                   	cdq    
c001dd60:	f7 fb                	idiv   ebx
c001dd62:	99                   	cdq    
c001dd63:	f7 fb                	idiv   ebx
c001dd65:	8d 42 30             	lea    eax,[edx+0x30]
c001dd68:	0f b6 c0             	movzx  eax,al
c001dd6b:	50                   	push   eax
c001dd6c:	e8 67 ee ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dd71:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd77:	59                   	pop    ecx
c001dd78:	5e                   	pop    esi
c001dd79:	6a 0f                	push   0xf
c001dd7b:	6a 00                	push   0x0
c001dd7d:	e8 67 ee ff ff       	call   c001cbe9 <combineColours(unsigned char, unsigned char)>
c001dd82:	5f                   	pop    edi
c001dd83:	5d                   	pop    ebp
c001dd84:	0f b6 c0             	movzx  eax,al
c001dd87:	50                   	push   eax
c001dd88:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd8d:	99                   	cdq    
c001dd8e:	f7 fb                	idiv   ebx
c001dd90:	83 c2 30             	add    edx,0x30
c001dd93:	0f b6 d2             	movzx  edx,dl
c001dd96:	52                   	push   edx
c001dd97:	e8 3c ee ff ff       	call   c001cbd8 <combineCharAndColour(char, unsigned char)>
c001dd9c:	83 c4 10             	add    esp,0x10
c001dd9f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dda5:	31 c0                	xor    eax,eax
c001dda7:	83 c4 0c             	add    esp,0xc
c001ddaa:	5b                   	pop    ebx
c001ddab:	5e                   	pop    esi
c001ddac:	5f                   	pop    edi
c001ddad:	5d                   	pop    ebp
c001ddae:	c3                   	ret    
c001ddaf:	90                   	nop

c001ddb0 <SATAPI::write(unsigned long long, int, void*)>:
c001ddb0:	b8 03 00 00 00       	mov    eax,0x3
c001ddb5:	c3                   	ret    

c001ddb6 <SATAPI::close(int, int, void*)>:
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ddc3:	85 c0                	test   eax,eax
c001ddc5:	74 0c                	je     c001ddd3 <SATAPI::close(int, int, void*)+0x1d>
c001ddc7:	8b 10                	mov    edx,DWORD PTR [eax]
c001ddc9:	83 ec 0c             	sub    esp,0xc
c001ddcc:	50                   	push   eax
c001ddcd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ddd0:	83 c4 10             	add    esp,0x10
c001ddd3:	31 c0                	xor    eax,eax
c001ddd5:	83 c4 0c             	add    esp,0xc
c001ddd8:	c3                   	ret    
c001ddd9:	90                   	nop

c001ddda <SATAPI::SATAPI()>:
c001ddda:	83 ec 0c             	sub    esp,0xc
c001dddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde1:	83 ec 04             	sub    esp,0x4
c001dde4:	68 00 08 00 00       	push   0x800
c001dde9:	68 9c 2d 02 c0       	push   0xc0022d9c
c001ddee:	50                   	push   eax
c001ddef:	e8 16 ec fe ff       	call   c000ca0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ddf4:	83 c4 10             	add    esp,0x10
c001ddf7:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001ddfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de00:	89 10                	mov    DWORD PTR [eax],edx
c001de02:	90                   	nop
c001de03:	83 c4 0c             	add    esp,0xc
c001de06:	c3                   	ret    
c001de07:	90                   	nop

c001de08 <SATAPI::diskRemoved()>:
c001de08:	c3                   	ret    
c001de09:	90                   	nop

c001de0a <SATAPI::diskInserted()>:
c001de0a:	83 ec 18             	sub    esp,0x18
c001de0d:	68 a8 2d 02 c0       	push   0xc0022da8
c001de12:	e8 f3 ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de1b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001de22:	83 c4 1c             	add    esp,0x1c
c001de25:	c3                   	ret    

c001de26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001de26:	55                   	push   ebp
c001de27:	57                   	push   edi
c001de28:	56                   	push   esi
c001de29:	53                   	push   ebx
c001de2a:	83 ec 34             	sub    esp,0x34
c001de2d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de31:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001de35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de39:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de41:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001de47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de51:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de5b:	83 c0 02             	add    eax,0x2
c001de5e:	c1 e0 07             	shl    eax,0x7
c001de61:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de6d:	c1 e0 07             	shl    eax,0x7
c001de70:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de78:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de86:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de8c:	e8 ff e4 ff ff       	call   c001c390 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	89 c2                	mov    edx,eax
c001de96:	b8 01 00 00 00       	mov    eax,0x1
c001de9b:	83 fa ff             	cmp    edx,0xffffffff
c001de9e:	0f 84 5f 02 00 00    	je     c001e103 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dea4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deac:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001deb2:	8b 00                	mov    eax,DWORD PTR [eax]
c001deb4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001deba:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dec0:	89 d1                	mov    ecx,edx
c001dec2:	c1 e1 05             	shl    ecx,0x5
c001dec5:	01 c8                	add    eax,ecx
c001dec7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dec9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001decf:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ded5:	89 08                	mov    DWORD PTR [eax],ecx
c001ded7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dedd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001dee3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001dee9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001deec:	50                   	push   eax
c001deed:	68 90 00 00 00       	push   0x90
c001def2:	6a 00                	push   0x0
c001def4:	53                   	push   ebx
c001def5:	e8 f6 25 fe ff       	call   c00004f0 <memset>
c001defa:	8d 7b 40             	lea    edi,[ebx+0x40]
c001defd:	b9 0c 00 00 00       	mov    ecx,0xc
c001df02:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001df06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df08:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001df0e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001df12:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001df16:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001df1c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df20:	48                   	dec    eax
c001df21:	25 ff ff 3f 00       	and    eax,0x3fffff
c001df26:	89 c1                	mov    ecx,eax
c001df28:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001df2e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001df33:	09 c8                	or     eax,ecx
c001df35:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001df3b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001df41:	83 c8 80             	or     eax,0xffffff80
c001df44:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001df4a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001df4d:	25 00 7f 00 00       	and    eax,0x7f00
c001df52:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df57:	66 89 03             	mov    WORD PTR [ebx],ax
c001df5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001df62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df66:	c1 e8 10             	shr    eax,0x10
c001df69:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df70:	c1 e8 18             	shr    eax,0x18
c001df73:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001df76:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df7a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df81:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df84:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df88:	83 c4 10             	add    esp,0x10
c001df8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df8f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001df97:	31 c0                	xor    eax,eax
c001df99:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001df9f:	80 e1 88             	and    cl,0x88
c001dfa2:	74 0a                	je     c001dfae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001dfa4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dfa9:	74 0a                	je     c001dfb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001dfab:	40                   	inc    eax
c001dfac:	eb eb                	jmp    c001df99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001dfae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dfb3:	75 43                	jne    c001dff8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001dfb5:	83 ec 0c             	sub    esp,0xc
c001dfb8:	68 c0 2d 02 c0       	push   0xc0022dc0
c001dfbd:	e8 48 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dfc2:	58                   	pop    eax
c001dfc3:	5a                   	pop    edx
c001dfc4:	68 d5 2d 02 c0       	push   0xc0022dd5
c001dfc9:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001dfcf:	e8 d8 aa fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001dfd4:	59                   	pop    ecx
c001dfd5:	5b                   	pop    ebx
c001dfd6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfda:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfe0:	e8 45 e4 ff ff       	call   c001c42a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dfe5:	5e                   	pop    esi
c001dfe6:	5f                   	pop    edi
c001dfe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfeb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dff1:	e8 14 e4 ff ff       	call   c001c40a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001dff6:	eb 48                	jmp    c001e040 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001dff8:	b8 01 00 00 00       	mov    eax,0x1
c001dffd:	88 d1                	mov    cl,dl
c001dfff:	d3 e0                	shl    eax,cl
c001e001:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e006:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e00c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e010:	89 c7                	mov    edi,eax
c001e012:	c1 e3 07             	shl    ebx,0x7
c001e015:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e019:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e01f:	85 c7                	test   edi,eax
c001e021:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e027:	0f 84 a3 00 00 00    	je     c001e0d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e02d:	0f ba e0 1e          	bt     eax,0x1e
c001e031:	73 1a                	jae    c001e04d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e033:	83 ec 0c             	sub    esp,0xc
c001e036:	68 e7 2d 02 c0       	push   0xc0022de7
c001e03b:	e8 ca c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e040:	83 c4 10             	add    esp,0x10
c001e043:	b8 01 00 00 00       	mov    eax,0x1
c001e048:	e9 b6 00 00 00       	jmp    c001e103 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e04d:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e053:	83 f8 0d             	cmp    eax,0xd
c001e056:	77 0a                	ja     c001e062 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e058:	83 ec 0c             	sub    esp,0xc
c001e05b:	68 c8 00 00 00       	push   0xc8
c001e060:	eb 28                	jmp    c001e08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e062:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e068:	83 f8 0d             	cmp    eax,0xd
c001e06b:	77 0a                	ja     c001e077 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e06d:	83 ec 0c             	sub    esp,0xc
c001e070:	68 58 02 00 00       	push   0x258
c001e075:	eb 13                	jmp    c001e08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e077:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e07d:	83 f8 06             	cmp    eax,0x6
c001e080:	77 10                	ja     c001e092 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e082:	83 ec 0c             	sub    esp,0xc
c001e085:	68 dc 05 00 00       	push   0x5dc
c001e08a:	e8 69 7d ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001e08f:	83 c4 10             	add    esp,0x10
c001e092:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e096:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e099:	75 06                	jne    c001e0a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e09b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e09f:	74 15                	je     c001e0b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e0a1:	83 fe 06             	cmp    esi,0x6
c001e0a4:	77 10                	ja     c001e0b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e0a6:	83 ec 0c             	sub    esp,0xc
c001e0a9:	68 c4 09 00 00       	push   0x9c4
c001e0ae:	e8 45 7d ff ff       	call   c0015df8 <milliTenthSleep(unsigned int)>
c001e0b3:	83 c4 10             	add    esp,0x10
c001e0b6:	46                   	inc    esi
c001e0b7:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e0bd:	0f 85 56 ff ff ff    	jne    c001e019 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e0c3:	83 ec 0c             	sub    esp,0xc
c001e0c6:	68 fa 2d 02 c0       	push   0xc0022dfa
c001e0cb:	e9 6b ff ff ff       	jmp    c001e03b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e0d0:	0f ba e0 1e          	bt     eax,0x1e
c001e0d4:	73 0d                	jae    c001e0e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	68 0e 2e 02 c0       	push   0xc0022e0e
c001e0de:	e9 58 ff ff ff       	jmp    c001e03b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e0e3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e0e8:	74 17                	je     c001e101 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e0ea:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e0ef:	74 10                	je     c001e101 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e0f1:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e0f7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e0fb:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e0ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e101:	31 c0                	xor    eax,eax
c001e103:	83 c4 2c             	add    esp,0x2c
c001e106:	5b                   	pop    ebx
c001e107:	5e                   	pop    esi
c001e108:	5f                   	pop    edi
c001e109:	5d                   	pop    ebp
c001e10a:	c3                   	ret    
c001e10b:	90                   	nop

c001e10c <SATAPI::eject()>:
c001e10c:	57                   	push   edi
c001e10d:	b9 03 00 00 00       	mov    ecx,0x3
c001e112:	83 ec 18             	sub    esp,0x18
c001e115:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e119:	fc                   	cld    
c001e11a:	31 c0                	xor    eax,eax
c001e11c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e11e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e123:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e128:	50                   	push   eax
c001e129:	6a 00                	push   0x0
c001e12b:	6a 00                	push   0x0
c001e12d:	6a 00                	push   0x0
c001e12f:	6a 00                	push   0x0
c001e131:	6a 02                	push   0x2
c001e133:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e137:	50                   	push   eax
c001e138:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e13c:	e8 e5 fc ff ff       	call   c001de26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e141:	83 c4 38             	add    esp,0x38
c001e144:	31 c0                	xor    eax,eax
c001e146:	5f                   	pop    edi
c001e147:	c3                   	ret    

c001e148 <SATAPI::detectMedia()>:
c001e148:	53                   	push   ebx
c001e149:	83 ec 14             	sub    esp,0x14
c001e14c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e150:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e156:	e8 35 02 ff ff       	call   c000e390 <VCache::writeWriteBuffer()>
c001e15b:	59                   	pop    ecx
c001e15c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e162:	e8 19 02 ff ff       	call   c000e380 <VCache::invalidateReadBuffer()>
c001e167:	c7 04 24 23 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e23
c001e16e:	e8 97 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e173:	83 c4 10             	add    esp,0x10
c001e176:	31 c0                	xor    eax,eax
c001e178:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e17f:	85 d2                	test   edx,edx
c001e181:	74 0f                	je     c001e192 <SATAPI::detectMedia()+0x4a>
c001e183:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e189:	75 07                	jne    c001e192 <SATAPI::detectMedia()+0x4a>
c001e18b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e192:	40                   	inc    eax
c001e193:	83 f8 1a             	cmp    eax,0x1a
c001e196:	75 e0                	jne    c001e178 <SATAPI::detectMedia()+0x30>
c001e198:	83 c4 08             	add    esp,0x8
c001e19b:	5b                   	pop    ebx
c001e19c:	c3                   	ret    
c001e19d:	90                   	nop

c001e19e <SATAPI::open(int, int, void*)>:
c001e19e:	56                   	push   esi
c001e19f:	53                   	push   ebx
c001e1a0:	51                   	push   ecx
c001e1a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e1a9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e1b3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e1b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1bd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e1c7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1d1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1d8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e1de:	e8 ff 9b fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e1e3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e1e9:	89 c6                	mov    esi,eax
c001e1eb:	e8 f2 9b fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e1f0:	81 c6 00 10 00 00    	add    esi,0x1000
c001e1f6:	39 c6                	cmp    esi,eax
c001e1f8:	74 10                	je     c001e20a <SATAPI::open(int, int, void*)+0x6c>
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	68 38 2e 02 c0       	push   0xc0022e38
c001e202:	e8 d2 2f ff ff       	call   c00111d9 <KePanic(char const*)>
c001e207:	83 c4 10             	add    esp,0x10
c001e20a:	83 ec 0c             	sub    esp,0xc
c001e20d:	6a 02                	push   0x2
c001e20f:	e8 e1 b3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e214:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e21a:	6a 03                	push   0x3
c001e21c:	50                   	push   eax
c001e21d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e223:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e229:	e8 d0 ba fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e22e:	83 c4 14             	add    esp,0x14
c001e231:	68 78 01 00 00       	push   0x178
c001e236:	e8 98 98 fe ff       	call   c0007ad3 <malloc>
c001e23b:	83 c4 0c             	add    esp,0xc
c001e23e:	6a 00                	push   0x0
c001e240:	68 ff ff ff 7f       	push   0x7fffffff
c001e245:	6a 00                	push   0x0
c001e247:	6a 00                	push   0x0
c001e249:	53                   	push   ebx
c001e24a:	68 4e 2e 02 c0       	push   0xc0022e4e
c001e24f:	89 c6                	mov    esi,eax
c001e251:	50                   	push   eax
c001e252:	e8 93 f5 fe ff       	call   c000d7ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e257:	83 c4 14             	add    esp,0x14
c001e25a:	56                   	push   esi
c001e25b:	e8 4a f6 fe ff       	call   c000d8aa <LogicalDisk::assignDriveLetter()>
c001e260:	5a                   	pop    edx
c001e261:	59                   	pop    ecx
c001e262:	0f be c0             	movsx  eax,al
c001e265:	50                   	push   eax
c001e266:	68 a0 2c 02 c0       	push   0xc0022ca0
c001e26b:	e8 9a c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e270:	58                   	pop    eax
c001e271:	5a                   	pop    edx
c001e272:	56                   	push   esi
c001e273:	53                   	push   ebx
c001e274:	e8 c3 e3 fe ff       	call   c000c63c <Device::addChild(Device*)>
c001e279:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e27f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e282:	e8 eb e7 fe ff       	call   c000ca72 <PhysicalDisk::startCache()>
c001e287:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e28e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e291:	e8 b2 fe ff ff       	call   c001e148 <SATAPI::detectMedia()>
c001e296:	83 c4 14             	add    esp,0x14
c001e299:	31 c0                	xor    eax,eax
c001e29b:	5b                   	pop    ebx
c001e29c:	5e                   	pop    esi
c001e29d:	c3                   	ret    

c001e29e <SATAPI::read(unsigned long long, int, void*)>:
c001e29e:	55                   	push   ebp
c001e29f:	57                   	push   edi
c001e2a0:	56                   	push   esi
c001e2a1:	53                   	push   ebx
c001e2a2:	83 ec 3c             	sub    esp,0x3c
c001e2a5:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e2a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e2ad:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e2b1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e2b5:	83 fd 04             	cmp    ebp,0x4
c001e2b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e2bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e2c0:	7e 10                	jle    c001e2d2 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e2c2:	83 ec 0c             	sub    esp,0xc
c001e2c5:	68 5c 2e 02 c0       	push   0xc0022e5c
c001e2ca:	e8 0a 2f ff ff       	call   c00111d9 <KePanic(char const*)>
c001e2cf:	83 c4 10             	add    esp,0x10
c001e2d2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e2d8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e2de:	51                   	push   ecx
c001e2df:	50                   	push   eax
c001e2e0:	83 c0 02             	add    eax,0x2
c001e2e3:	c1 e0 07             	shl    eax,0x7
c001e2e6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e2ec:	50                   	push   eax
c001e2ed:	52                   	push   edx
c001e2ee:	e8 61 e1 ff ff       	call   c001c454 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e2f3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e2f7:	b9 03 00 00 00       	mov    ecx,0x3
c001e2fc:	fc                   	cld    
c001e2fd:	31 c0                	xor    eax,eax
c001e2ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e301:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e306:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e30b:	83 c4 0c             	add    esp,0xc
c001e30e:	6a 00                	push   0x0
c001e310:	6a 00                	push   0x0
c001e312:	6a 00                	push   0x0
c001e314:	6a 00                	push   0x0
c001e316:	6a 02                	push   0x2
c001e318:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e31c:	50                   	push   eax
c001e31d:	53                   	push   ebx
c001e31e:	e8 03 fb ff ff       	call   c001de26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e323:	83 c4 20             	add    esp,0x20
c001e326:	85 c0                	test   eax,eax
c001e328:	89 c6                	mov    esi,eax
c001e32a:	75 46                	jne    c001e372 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e32c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e330:	b9 03 00 00 00       	mov    ecx,0x3
c001e335:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e33b:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e340:	0f c8                	bswap  eax
c001e342:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e346:	89 e8                	mov    eax,ebp
c001e348:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e34c:	50                   	push   eax
c001e34d:	55                   	push   ebp
c001e34e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e352:	c1 e5 0b             	shl    ebp,0xb
c001e355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e35d:	55                   	push   ebp
c001e35e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e362:	50                   	push   eax
c001e363:	53                   	push   ebx
c001e364:	e8 bd fa ff ff       	call   c001de26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e369:	83 c4 20             	add    esp,0x20
c001e36c:	85 c0                	test   eax,eax
c001e36e:	89 c6                	mov    esi,eax
c001e370:	74 0c                	je     c001e37e <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e372:	83 ec 0c             	sub    esp,0xc
c001e375:	53                   	push   ebx
c001e376:	e8 cd fd ff ff       	call   c001e148 <SATAPI::detectMedia()>
c001e37b:	83 c4 10             	add    esp,0x10
c001e37e:	83 c4 3c             	add    esp,0x3c
c001e381:	89 f0                	mov    eax,esi
c001e383:	5b                   	pop    ebx
c001e384:	5e                   	pop    esi
c001e385:	5f                   	pop    edi
c001e386:	5d                   	pop    ebp
c001e387:	c3                   	ret    

c001e388 <IOAPIC::close(int, int, void*)>:
c001e388:	b8 00 00 00 00       	mov    eax,0x0
c001e38d:	c3                   	ret    

c001e38e <apicGetBase()>:
c001e38e:	55                   	push   ebp
c001e38f:	89 e5                	mov    ebp,esp
c001e391:	83 ec 18             	sub    esp,0x18
c001e394:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e399:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e39f:	83 e0 08             	and    eax,0x8
c001e3a2:	0f b6 c0             	movzx  eax,al
c001e3a5:	85 c0                	test   eax,eax
c001e3a7:	75 07                	jne    c001e3b0 <apicGetBase()+0x22>
c001e3a9:	b8 00 00 00 00       	mov    eax,0x0
c001e3ae:	eb 21                	jmp    c001e3d1 <apicGetBase()+0x43>
c001e3b0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3b5:	83 ec 08             	sub    esp,0x8
c001e3b8:	6a 1b                	push   0x1b
c001e3ba:	50                   	push   eax
c001e3bb:	e8 22 8d fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e3c0:	83 c4 10             	add    esp,0x10
c001e3c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3cc:	25 00 00 ff ff       	and    eax,0xffff0000
c001e3d1:	c9                   	leave  
c001e3d2:	c3                   	ret    
c001e3d3:	90                   	nop

c001e3d4 <IOAPIC::IOAPIC()>:
c001e3d4:	83 ec 0c             	sub    esp,0xc
c001e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3db:	83 ec 08             	sub    esp,0x8
c001e3de:	68 c0 2e 02 c0       	push   0xc0022ec0
c001e3e3:	50                   	push   eax
c001e3e4:	e8 eb e3 fe ff       	call   c000c7d4 <Device::Device(char const*)>
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001e3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f5:	89 10                	mov    DWORD PTR [eax],edx
c001e3f7:	90                   	nop
c001e3f8:	83 c4 0c             	add    esp,0xc
c001e3fb:	c3                   	ret    

c001e3fc <apicOpen()>:
c001e3fc:	55                   	push   ebp
c001e3fd:	89 e5                	mov    ebp,esp
c001e3ff:	53                   	push   ebx
c001e400:	83 ec 34             	sub    esp,0x34
c001e403:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e408:	83 f0 01             	xor    eax,0x1
c001e40b:	0f b6 c0             	movzx  eax,al
c001e40e:	85 c0                	test   eax,eax
c001e410:	0f 84 a3 00 00 00    	je     c001e4b9 <apicOpen()+0xbd>
c001e416:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e41a:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e41f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e423:	0f b6 c0             	movzx  eax,al
c001e426:	39 c2                	cmp    edx,eax
c001e428:	0f 83 84 00 00 00    	jae    c001e4b2 <apicOpen()+0xb6>
c001e42e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e435:	83 ec 0c             	sub    esp,0xc
c001e438:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e43b:	e8 93 96 fe ff       	call   c0007ad3 <malloc>
c001e440:	83 c4 10             	add    esp,0x10
c001e443:	89 c3                	mov    ebx,eax
c001e445:	83 ec 0c             	sub    esp,0xc
c001e448:	53                   	push   ebx
c001e449:	e8 86 ff ff ff       	call   c001e3d4 <IOAPIC::IOAPIC()>
c001e44e:	83 c4 10             	add    esp,0x10
c001e451:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e454:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e458:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e45b:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e462:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e467:	83 c0 01             	add    eax,0x1
c001e46a:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e46f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e474:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e47a:	83 ec 08             	sub    esp,0x8
c001e47d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e480:	50                   	push   eax
c001e481:	e8 b6 e1 fe ff       	call   c000c63c <Device::addChild(Device*)>
c001e486:	83 c4 10             	add    esp,0x10
c001e489:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e48c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e48e:	83 c0 08             	add    eax,0x8
c001e491:	8b 00                	mov    eax,DWORD PTR [eax]
c001e493:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e497:	6a 00                	push   0x0
c001e499:	6a 00                	push   0x0
c001e49b:	52                   	push   edx
c001e49c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e49f:	ff d0                	call   eax
c001e4a1:	83 c4 10             	add    esp,0x10
c001e4a4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e4a7:	83 c0 01             	add    eax,0x1
c001e4aa:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e4ad:	e9 68 ff ff ff       	jmp    c001e41a <apicOpen()+0x1e>
c001e4b2:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e4b9:	e8 d0 fe ff ff       	call   c001e38e <apicGetBase()>
c001e4be:	05 f0 00 00 00       	add    eax,0xf0
c001e4c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4cb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e4ce:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e4d5:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e4dc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4df:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e4e2:	89 10                	mov    DWORD PTR [eax],edx
c001e4e4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4eb:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e4f0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e4f3:	7d 7c                	jge    c001e571 <apicOpen()+0x175>
c001e4f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4f8:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e4ff:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e502:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e505:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e50c:	c1 e8 08             	shr    eax,0x8
c001e50f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e516:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e51d:	c1 e8 18             	shr    eax,0x18
c001e520:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e523:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e527:	3d ff 00 00 00       	cmp    eax,0xff
c001e52c:	75 3a                	jne    c001e568 <apicOpen()+0x16c>
c001e52e:	e8 5b fe ff ff       	call   c001e38e <apicGetBase()>
c001e533:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e537:	83 fa 01             	cmp    edx,0x1
c001e53a:	75 07                	jne    c001e543 <apicOpen()+0x147>
c001e53c:	ba 60 03 00 00       	mov    edx,0x360
c001e541:	eb 05                	jmp    c001e548 <apicOpen()+0x14c>
c001e543:	ba 50 03 00 00       	mov    edx,0x350
c001e548:	01 d0                	add    eax,edx
c001e54a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e54d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e550:	8b 00                	mov    eax,DWORD PTR [eax]
c001e552:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e555:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e55c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e560:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e563:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e566:	89 10                	mov    DWORD PTR [eax],edx
c001e568:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e56c:	e9 7a ff ff ff       	jmp    c001e4eb <apicOpen()+0xef>
c001e571:	90                   	nop
c001e572:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e575:	c9                   	leave  
c001e576:	c3                   	ret    
c001e577:	90                   	nop

c001e578 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e578:	55                   	push   ebp
c001e579:	89 e5                	mov    ebp,esp
c001e57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e57e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e584:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e587:	72 1d                	jb     c001e5a6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e58c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e595:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e59b:	01 d0                	add    eax,edx
c001e59d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5a0:	73 04                	jae    c001e5a6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5a2:	b0 01                	mov    al,0x1
c001e5a4:	eb 02                	jmp    c001e5a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5a6:	b0 00                	mov    al,0x0
c001e5a8:	5d                   	pop    ebp
c001e5a9:	c3                   	ret    

c001e5aa <IOAPIC::read(int)>:
c001e5aa:	55                   	push   ebp
c001e5ab:	89 e5                	mov    ebp,esp
c001e5ad:	83 ec 10             	sub    esp,0x10
c001e5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5bf:	0f b6 d0             	movzx  edx,al
c001e5c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5c5:	89 10                	mov    DWORD PTR [eax],edx
c001e5c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5ca:	83 c0 10             	add    eax,0x10
c001e5cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5cf:	c9                   	leave  
c001e5d0:	c3                   	ret    
c001e5d1:	90                   	nop

c001e5d2 <IOAPIC::open(int, int, void*)>:
c001e5d2:	55                   	push   ebp
c001e5d3:	89 e5                	mov    ebp,esp
c001e5d5:	57                   	push   edi
c001e5d6:	56                   	push   esi
c001e5d7:	53                   	push   ebx
c001e5d8:	83 ec 04             	sub    esp,0x4
c001e5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5e1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e5f0:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e5f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e603:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e609:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e613:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e625:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e62b:	0f b6 f0             	movzx  esi,al
c001e62e:	89 d0                	mov    eax,edx
c001e630:	ba 00 00 00 00       	mov    edx,0x0
c001e635:	89 c7                	mov    edi,eax
c001e637:	83 e7 ff             	and    edi,0xffffffff
c001e63a:	89 f9                	mov    ecx,edi
c001e63c:	0f b6 da             	movzx  ebx,dl
c001e63f:	89 c8                	mov    eax,ecx
c001e641:	89 da                	mov    edx,ebx
c001e643:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e646:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e649:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e64d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e651:	83 e0 00             	and    eax,0x0
c001e654:	09 d0                	or     eax,edx
c001e656:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e65a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e65d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e663:	8d 50 01             	lea    edx,[eax+0x1]
c001e666:	88 d1                	mov    cl,dl
c001e668:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e66b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e671:	0f b6 d0             	movzx  edx,al
c001e674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e677:	83 c2 08             	add    edx,0x8
c001e67a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e67e:	0f b6 c9             	movzx  ecx,cl
c001e681:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e687:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e68b:	6a 01                	push   0x1
c001e68d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e690:	e8 15 ff ff ff       	call   c001e5aa <IOAPIC::read(int)>
c001e695:	83 c4 08             	add    esp,0x8
c001e698:	c1 f8 10             	sar    eax,0x10
c001e69b:	0f b6 c0             	movzx  eax,al
c001e69e:	8d 50 01             	lea    edx,[eax+0x1]
c001e6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6a4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6aa:	b8 00 00 00 00       	mov    eax,0x0
c001e6af:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6b2:	5b                   	pop    ebx
c001e6b3:	5e                   	pop    esi
c001e6b4:	5f                   	pop    edi
c001e6b5:	5d                   	pop    ebp
c001e6b6:	c3                   	ret    
c001e6b7:	90                   	nop

c001e6b8 <IOAPIC::write(int, int)>:
c001e6b8:	55                   	push   ebp
c001e6b9:	89 e5                	mov    ebp,esp
c001e6bb:	83 ec 10             	sub    esp,0x10
c001e6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6cd:	0f b6 d0             	movzx  edx,al
c001e6d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6d3:	89 10                	mov    DWORD PTR [eax],edx
c001e6d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6d8:	8d 50 10             	lea    edx,[eax+0x10]
c001e6db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6de:	89 02                	mov    DWORD PTR [edx],eax
c001e6e0:	90                   	nop
c001e6e1:	c9                   	leave  
c001e6e2:	c3                   	ret    
c001e6e3:	90                   	nop

c001e6e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e6e4:	55                   	push   ebp
c001e6e5:	89 e5                	mov    ebp,esp
c001e6e7:	53                   	push   ebx
c001e6e8:	83 ec 2c             	sub    esp,0x2c
c001e6eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6ee:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e6f1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e6f4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e6f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e700:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e703:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e706:	88 d8                	mov    al,bl
c001e708:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e70b:	88 c8                	mov    al,cl
c001e70d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e710:	88 d0                	mov    al,dl
c001e712:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e715:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e719:	83 c0 08             	add    eax,0x8
c001e71c:	d1 e0                	shl    eax,1
c001e71e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e721:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e725:	83 c0 08             	add    eax,0x8
c001e728:	d1 e0                	shl    eax,1
c001e72a:	83 c0 01             	add    eax,0x1
c001e72d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e730:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e733:	50                   	push   eax
c001e734:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e737:	e8 6e fe ff ff       	call   c001e5aa <IOAPIC::read(int)>
c001e73c:	83 c4 08             	add    esp,0x8
c001e73f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e742:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e749:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e74c:	c1 e0 18             	shl    eax,0x18
c001e74f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e752:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e755:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e758:	52                   	push   edx
c001e759:	50                   	push   eax
c001e75a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e75d:	e8 56 ff ff ff       	call   c001e6b8 <IOAPIC::write(int, int)>
c001e762:	83 c4 0c             	add    esp,0xc
c001e765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e768:	50                   	push   eax
c001e769:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76c:	e8 39 fe ff ff       	call   c001e5aa <IOAPIC::read(int)>
c001e771:	83 c4 08             	add    esp,0x8
c001e774:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e777:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e77e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e785:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e78c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e790:	85 c0                	test   eax,eax
c001e792:	74 09                	je     c001e79d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e794:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e79b:	eb 07                	jmp    c001e7a4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e79d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e7a4:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e7a8:	85 c0                	test   eax,eax
c001e7aa:	74 09                	je     c001e7b5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e7ac:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e7b3:	eb 07                	jmp    c001e7bc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e7b5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e7bc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e7c3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e7c7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e7ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e7cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7d0:	52                   	push   edx
c001e7d1:	50                   	push   eax
c001e7d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7d5:	e8 de fe ff ff       	call   c001e6b8 <IOAPIC::write(int, int)>
c001e7da:	83 c4 0c             	add    esp,0xc
c001e7dd:	90                   	nop
c001e7de:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7e1:	c9                   	leave  
c001e7e2:	c3                   	ret    
c001e7e3:	90                   	nop

c001e7e4 <APICTimer::close(int, int, void*)>:
c001e7e4:	b8 00 00 00 00       	mov    eax,0x0
c001e7e9:	c3                   	ret    
c001e7ea:	66 90                	xchg   ax,ax

c001e7ec <apicTimerHandler(regs*, void*)>:
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7f5:	b8 10 27 00 00       	mov    eax,0x2710
c001e7fa:	ba 00 00 00 00       	mov    edx,0x0
c001e7ff:	f7 f1                	div    ecx
c001e801:	83 ec 0c             	sub    esp,0xc
c001e804:	50                   	push   eax
c001e805:	e8 9e f8 fe ff       	call   c000e0a8 <timerHandler(unsigned int)>
c001e80a:	83 c4 10             	add    esp,0x10
c001e80d:	90                   	nop
c001e80e:	83 c4 0c             	add    esp,0xc
c001e811:	c3                   	ret    
c001e812:	66 90                	xchg   ax,ax

c001e814 <APICTimer::open(int, int, void*)>:
c001e814:	83 ec 0c             	sub    esp,0xc
c001e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e81d:	83 c0 24             	add    eax,0x24
c001e820:	8b 00                	mov    eax,DWORD PTR [eax]
c001e822:	83 ec 08             	sub    esp,0x8
c001e825:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e82d:	ff d0                	call   eax
c001e82f:	83 c4 10             	add    esp,0x10
c001e832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e836:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e83a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e844:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e848:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e84e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e852:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e858:	83 ec 0c             	sub    esp,0xc
c001e85b:	51                   	push   ecx
c001e85c:	6a 01                	push   0x1
c001e85e:	68 ec e7 01 c0       	push   0xc001e7ec
c001e863:	52                   	push   edx
c001e864:	50                   	push   eax
c001e865:	e8 7e dd fe ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e86a:	83 c4 20             	add    esp,0x20
c001e86d:	89 c2                	mov    edx,eax
c001e86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e873:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e879:	b8 00 00 00 00       	mov    eax,0x0
c001e87e:	83 c4 0c             	add    esp,0xc
c001e881:	c3                   	ret    
c001e882:	66 90                	xchg   ax,ax

c001e884 <APICTimer::write(int)>:
c001e884:	83 ec 0c             	sub    esp,0xc
c001e887:	83 ec 0c             	sub    esp,0xc
c001e88a:	68 f4 2e 02 c0       	push   0xc0022ef4
c001e88f:	e8 45 29 ff ff       	call   c00111d9 <KePanic(char const*)>
c001e894:	83 c4 10             	add    esp,0x10
c001e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e89f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8a5:	90                   	nop
c001e8a6:	83 c4 0c             	add    esp,0xc
c001e8a9:	c3                   	ret    
c001e8aa:	66 90                	xchg   ax,ax

c001e8ac <APICTimer::APICTimer()>:
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b3:	83 ec 08             	sub    esp,0x8
c001e8b6:	68 04 2f 02 c0       	push   0xc0022f04
c001e8bb:	50                   	push   eax
c001e8bc:	e8 1b f7 fe ff       	call   c000dfdc <Timer::Timer(char const*)>
c001e8c1:	83 c4 10             	add    esp,0x10
c001e8c4:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c001e8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cd:	89 10                	mov    DWORD PTR [eax],edx
c001e8cf:	90                   	nop
c001e8d0:	83 c4 0c             	add    esp,0xc
c001e8d3:	c3                   	ret    

c001e8d4 <PIT::write(int)>:
c001e8d4:	83 ec 10             	sub    esp,0x10
c001e8d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8e9:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e8ee:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e8f3:	89 c2                	mov    edx,eax
c001e8f5:	c1 fa 1f             	sar    edx,0x1f
c001e8f8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e8fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e900:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e907:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e90c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e910:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e915:	ee                   	out    dx,al
c001e916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e91a:	0f b6 c0             	movzx  eax,al
c001e91d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e924:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e928:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e92c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e931:	ee                   	out    dx,al
c001e932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e936:	c1 f8 08             	sar    eax,0x8
c001e939:	0f b6 c0             	movzx  eax,al
c001e93c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e943:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e947:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e94b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e950:	ee                   	out    dx,al
c001e951:	90                   	nop
c001e952:	83 c4 10             	add    esp,0x10
c001e955:	c3                   	ret    
c001e956:	66 90                	xchg   ax,ax

c001e958 <pitHandler(regs*, void*)>:
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e961:	b8 10 27 00 00       	mov    eax,0x2710
c001e966:	89 c2                	mov    edx,eax
c001e968:	c1 fa 1f             	sar    edx,0x1f
c001e96b:	f7 f9                	idiv   ecx
c001e96d:	83 ec 0c             	sub    esp,0xc
c001e970:	50                   	push   eax
c001e971:	e8 32 f7 fe ff       	call   c000e0a8 <timerHandler(unsigned int)>
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	90                   	nop
c001e97a:	83 c4 0c             	add    esp,0xc
c001e97d:	c3                   	ret    
c001e97e:	66 90                	xchg   ax,ax

c001e980 <PIT::open(int, int, void*)>:
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e987:	8b 00                	mov    eax,DWORD PTR [eax]
c001e989:	83 c0 24             	add    eax,0x24
c001e98c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e98e:	83 ec 08             	sub    esp,0x8
c001e991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e999:	ff d0                	call   eax
c001e99b:	83 c4 10             	add    esp,0x10
c001e99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a2:	83 ec 0c             	sub    esp,0xc
c001e9a5:	6a 00                	push   0x0
c001e9a7:	6a 01                	push   0x1
c001e9a9:	68 58 e9 01 c0       	push   0xc001e958
c001e9ae:	6a 00                	push   0x0
c001e9b0:	50                   	push   eax
c001e9b1:	e8 32 dc fe ff       	call   c000c5e8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9b6:	83 c4 20             	add    esp,0x20
c001e9b9:	89 c2                	mov    edx,eax
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9c5:	b8 00 00 00 00       	mov    eax,0x0
c001e9ca:	83 c4 0c             	add    esp,0xc
c001e9cd:	c3                   	ret    
c001e9ce:	66 90                	xchg   ax,ax

c001e9d0 <PIT::close(int, int, void*)>:
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e5:	6a 01                	push   0x1
c001e9e7:	68 58 e9 01 c0       	push   0xc001e958
c001e9ec:	6a 00                	push   0x0
c001e9ee:	50                   	push   eax
c001e9ef:	e8 2a dc fe ff       	call   c000c61e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e9f4:	83 c4 10             	add    esp,0x10
c001e9f7:	b8 00 00 00 00       	mov    eax,0x0
c001e9fc:	83 c4 0c             	add    esp,0xc
c001e9ff:	c3                   	ret    

c001ea00 <PIT::PIT()>:
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea07:	83 ec 08             	sub    esp,0x8
c001ea0a:	68 40 2f 02 c0       	push   0xc0022f40
c001ea0f:	50                   	push   eax
c001ea10:	e8 c7 f5 fe ff       	call   c000dfdc <Timer::Timer(char const*)>
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	ba 68 2f 02 c0       	mov    edx,0xc0022f68
c001ea1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea21:	89 10                	mov    DWORD PTR [eax],edx
c001ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea2d:	0f b6 d0             	movzx  edx,al
c001ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea34:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea45:	0f b6 d0             	movzx  edx,al
c001ea48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea55:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea5b:	8d 50 01             	lea    edx,[eax+0x1]
c001ea5e:	88 d1                	mov    cl,dl
c001ea60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea64:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea6a:	0f b6 d0             	movzx  edx,al
c001ea6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea71:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea75:	83 e1 3f             	and    ecx,0x3f
c001ea78:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea7c:	90                   	nop
c001ea7d:	83 c4 0c             	add    esp,0xc
c001ea80:	c3                   	ret    
c001ea81:	66 90                	xchg   ax,ax
c001ea83:	66 90                	xchg   ax,ax
c001ea85:	66 90                	xchg   ax,ax
c001ea87:	66 90                	xchg   ax,ax
c001ea89:	66 90                	xchg   ax,ax
c001ea8b:	66 90                	xchg   ax,ax
c001ea8d:	66 90                	xchg   ax,ax
c001ea8f:	90                   	nop

c001ea90 <avxDetect>:
c001ea90:	b8 01 00 00 00       	mov    eax,0x1
c001ea95:	0f a2                	cpuid  
c001ea97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea9d:	74 15                	je     c001eab4 <avxDetect.noAVX>
c001ea9f:	b8 01 00 00 00       	mov    eax,0x1
c001eaa4:	0f a2                	cpuid  
c001eaa6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eaac:	74 06                	je     c001eab4 <avxDetect.noAVX>
c001eaae:	b8 01 00 00 00       	mov    eax,0x1
c001eab3:	c3                   	ret    

c001eab4 <avxDetect.noAVX>:
c001eab4:	b8 00 00 00 00       	mov    eax,0x0
c001eab9:	c3                   	ret    

c001eaba <avxSave>:
c001eaba:	53                   	push   ebx
c001eabb:	52                   	push   edx
c001eabc:	31 c0                	xor    eax,eax
c001eabe:	48                   	dec    eax
c001eabf:	89 c2                	mov    edx,eax
c001eac1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eac5:	0f ae 23             	xsave  [ebx]
c001eac8:	5a                   	pop    edx
c001eac9:	5b                   	pop    ebx
c001eaca:	c3                   	ret    

c001eacb <avxLoad>:
c001eacb:	53                   	push   ebx
c001eacc:	52                   	push   edx
c001eacd:	31 c0                	xor    eax,eax
c001eacf:	48                   	dec    eax
c001ead0:	89 c2                	mov    edx,eax
c001ead2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ead6:	0f ae 2b             	xrstor [ebx]
c001ead9:	5a                   	pop    edx
c001eada:	5b                   	pop    ebx
c001eadb:	c3                   	ret    

c001eadc <avxInit>:
c001eadc:	e8 67 03 00 00       	call   c001ee48 <sseInit>
c001eae1:	50                   	push   eax
c001eae2:	51                   	push   ecx
c001eae3:	0f 20 e0             	mov    eax,cr4
c001eae6:	0d 00 00 04 00       	or     eax,0x40000
c001eaeb:	0f 22 e0             	mov    cr4,eax
c001eaee:	31 c9                	xor    ecx,ecx
c001eaf0:	0f 01 d0             	xgetbv 
c001eaf3:	0d 07 00 00 00       	or     eax,0x7
c001eaf8:	0f 01 d1             	xsetbv 
c001eafb:	59                   	pop    ecx
c001eafc:	58                   	pop    eax
c001eafd:	c3                   	ret    

c001eafe <avxClose>:
c001eafe:	c3                   	ret    

c001eaff <wouldSheSayYes>:
c001eaff:	c3                   	ret    
c001eb00:	49                   	dec    ecx
c001eb01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eb05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eb09:	75 20                	jne    c001eb2b <isr0+0xb>
c001eb0b:	4e                   	dec    esi
c001eb0c:	79 61                	jns    c001eb6f <isr7+0x3>
c001eb0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eb13:	66 90                	xchg   ax,ax
c001eb15:	66 90                	xchg   ax,ax
c001eb17:	66 90                	xchg   ax,ax
c001eb19:	66 90                	xchg   ax,ax
c001eb1b:	66 90                	xchg   ax,ax
c001eb1d:	66 90                	xchg   ax,ax
c001eb1f:	90                   	nop

c001eb20 <isr0>:
c001eb20:	fa                   	cli    
c001eb21:	68 00 00 00 00       	push   0x0
c001eb26:	68 00 00 00 00       	push   0x0
c001eb2b:	e9 56 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb30 <isr1>:
c001eb30:	fa                   	cli    
c001eb31:	6a 00                	push   0x0
c001eb33:	6a 01                	push   0x1
c001eb35:	e9 4c 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb3a <isr2>:
c001eb3a:	fa                   	cli    
c001eb3b:	6a 00                	push   0x0
c001eb3d:	6a 02                	push   0x2
c001eb3f:	e9 42 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb44 <isr3>:
c001eb44:	fa                   	cli    
c001eb45:	6a 00                	push   0x0
c001eb47:	6a 03                	push   0x3
c001eb49:	e9 38 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb4e <isr4>:
c001eb4e:	fa                   	cli    
c001eb4f:	6a 00                	push   0x0
c001eb51:	6a 04                	push   0x4
c001eb53:	e9 2e 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb58 <isr5>:
c001eb58:	fa                   	cli    
c001eb59:	6a 00                	push   0x0
c001eb5b:	6a 05                	push   0x5
c001eb5d:	e9 24 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb62 <isr6>:
c001eb62:	fa                   	cli    
c001eb63:	6a 00                	push   0x0
c001eb65:	6a 06                	push   0x6
c001eb67:	e9 1a 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb6c <isr7>:
c001eb6c:	fa                   	cli    
c001eb6d:	6a 00                	push   0x0
c001eb6f:	6a 07                	push   0x7
c001eb71:	e9 10 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb76 <isr8>:
c001eb76:	fa                   	cli    
c001eb77:	6a 08                	push   0x8
c001eb79:	e9 08 01 00 00       	jmp    c001ec86 <int_common_stub>

c001eb7e <isr9>:
c001eb7e:	fa                   	cli    
c001eb7f:	6a 00                	push   0x0
c001eb81:	6a 09                	push   0x9
c001eb83:	e9 fe 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eb88 <isr10>:
c001eb88:	fa                   	cli    
c001eb89:	6a 0a                	push   0xa
c001eb8b:	e9 f6 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eb90 <isr11>:
c001eb90:	fa                   	cli    
c001eb91:	6a 0b                	push   0xb
c001eb93:	e9 ee 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eb98 <isr12>:
c001eb98:	fa                   	cli    
c001eb99:	6a 0c                	push   0xc
c001eb9b:	e9 e6 00 00 00       	jmp    c001ec86 <int_common_stub>

c001eba0 <isr13>:
c001eba0:	fa                   	cli    
c001eba1:	6a 0d                	push   0xd
c001eba3:	53                   	push   ebx
c001eba4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eba8:	81 fb 76 ed 01 c0    	cmp    ebx,0xc001ed76
c001ebae:	5b                   	pop    ebx
c001ebaf:	0f 84 c3 01 00 00    	je     c001ed78 <finishSignal2>
c001ebb5:	e9 cc 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebba <isr14>:
c001ebba:	fa                   	cli    
c001ebbb:	6a 0e                	push   0xe
c001ebbd:	e9 c4 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebc2 <isr15>:
c001ebc2:	fa                   	cli    
c001ebc3:	6a 00                	push   0x0
c001ebc5:	6a 0f                	push   0xf
c001ebc7:	e9 ba 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebcc <isr16>:
c001ebcc:	fa                   	cli    
c001ebcd:	6a 00                	push   0x0
c001ebcf:	6a 10                	push   0x10
c001ebd1:	e9 b0 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebd6 <isr17>:
c001ebd6:	fa                   	cli    
c001ebd7:	6a 00                	push   0x0
c001ebd9:	6a 11                	push   0x11
c001ebdb:	e9 a6 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebe0 <isr18>:
c001ebe0:	fa                   	cli    
c001ebe1:	6a 00                	push   0x0
c001ebe3:	6a 12                	push   0x12
c001ebe5:	e9 9c 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebea <irq3>:
c001ebea:	fa                   	cli    
c001ebeb:	6a 00                	push   0x0
c001ebed:	6a 23                	push   0x23
c001ebef:	e9 92 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebf4 <irq4>:
c001ebf4:	fa                   	cli    
c001ebf5:	6a 00                	push   0x0
c001ebf7:	6a 24                	push   0x24
c001ebf9:	e9 88 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ebfe <irq5>:
c001ebfe:	fa                   	cli    
c001ebff:	6a 00                	push   0x0
c001ec01:	6a 25                	push   0x25
c001ec03:	e9 7e 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec08 <irq6>:
c001ec08:	fa                   	cli    
c001ec09:	6a 00                	push   0x0
c001ec0b:	6a 26                	push   0x26
c001ec0d:	e9 74 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec12 <irq7>:
c001ec12:	fa                   	cli    
c001ec13:	6a 00                	push   0x0
c001ec15:	6a 27                	push   0x27
c001ec17:	e9 6a 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec1c <irq8>:
c001ec1c:	fa                   	cli    
c001ec1d:	6a 00                	push   0x0
c001ec1f:	6a 28                	push   0x28
c001ec21:	e9 60 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec26 <irq9>:
c001ec26:	fa                   	cli    
c001ec27:	6a 00                	push   0x0
c001ec29:	6a 29                	push   0x29
c001ec2b:	e9 56 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec30 <irq10>:
c001ec30:	fa                   	cli    
c001ec31:	6a 00                	push   0x0
c001ec33:	6a 2a                	push   0x2a
c001ec35:	e9 4c 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec3a <irq11>:
c001ec3a:	fa                   	cli    
c001ec3b:	6a 00                	push   0x0
c001ec3d:	6a 2b                	push   0x2b
c001ec3f:	e9 42 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec44 <irq12>:
c001ec44:	fa                   	cli    
c001ec45:	6a 00                	push   0x0
c001ec47:	6a 2c                	push   0x2c
c001ec49:	e9 38 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec4e <irq13>:
c001ec4e:	fa                   	cli    
c001ec4f:	6a 00                	push   0x0
c001ec51:	6a 2d                	push   0x2d
c001ec53:	e9 2e 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec58 <irq14>:
c001ec58:	fa                   	cli    
c001ec59:	6a 00                	push   0x0
c001ec5b:	6a 2e                	push   0x2e
c001ec5d:	e9 24 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec62 <irq15>:
c001ec62:	fa                   	cli    
c001ec63:	6a 00                	push   0x0
c001ec65:	6a 2f                	push   0x2f
c001ec67:	e9 1a 00 00 00       	jmp    c001ec86 <int_common_stub>

c001ec6c <irq1>:
c001ec6c:	fa                   	cli    
c001ec6d:	6a 00                	push   0x0
c001ec6f:	6a 21                	push   0x21
c001ec71:	eb 13                	jmp    c001ec86 <int_common_stub>

c001ec73 <irq2>:
c001ec73:	fa                   	cli    
c001ec74:	6a 00                	push   0x0
c001ec76:	6a 22                	push   0x22
c001ec78:	eb 0c                	jmp    c001ec86 <int_common_stub>

c001ec7a <isr96>:
c001ec7a:	6a 00                	push   0x0
c001ec7c:	6a 60                	push   0x60
c001ec7e:	fb                   	sti    
c001ec7f:	eb 37                	jmp    c001ecb8 <syscall_common_stub>

c001ec81 <irq0>:
c001ec81:	fa                   	cli    
c001ec82:	6a 00                	push   0x0
c001ec84:	6a 20                	push   0x20

c001ec86 <int_common_stub>:
c001ec86:	60                   	pusha  
c001ec87:	1e                   	push   ds
c001ec88:	06                   	push   es
c001ec89:	0f a0                	push   fs
c001ec8b:	0f a8                	push   gs
c001ec8d:	66 b8 10 00          	mov    ax,0x10
c001ec91:	66 8e d8             	mov    ds,ax
c001ec94:	66 8e c0             	mov    es,ax
c001ec97:	66 8e e0             	mov    fs,ax
c001ec9a:	66 8e e8             	mov    gs,ax
c001ec9d:	54                   	push   esp
c001ec9e:	fc                   	cld    
c001ec9f:	e8 44 de fe ff       	call   c000cae8 <int_handler>
c001eca4:	81 c4 04 00 00 00    	add    esp,0x4
c001ecaa:	0f a9                	pop    gs
c001ecac:	0f a1                	pop    fs
c001ecae:	07                   	pop    es
c001ecaf:	1f                   	pop    ds
c001ecb0:	61                   	popa   
c001ecb1:	81 c4 08 00 00 00    	add    esp,0x8
c001ecb7:	cf                   	iret   

c001ecb8 <syscall_common_stub>:
c001ecb8:	60                   	pusha  
c001ecb9:	1e                   	push   ds
c001ecba:	06                   	push   es
c001ecbb:	0f a0                	push   fs
c001ecbd:	0f a8                	push   gs
c001ecbf:	66 b8 10 00          	mov    ax,0x10
c001ecc3:	66 8e d8             	mov    ds,ax
c001ecc6:	66 8e c0             	mov    es,ax
c001ecc9:	66 8e e0             	mov    fs,ax
c001eccc:	66 8e e8             	mov    gs,ax
c001eccf:	54                   	push   esp
c001ecd0:	fc                   	cld    
c001ecd1:	e8 12 de fe ff       	call   c000cae8 <int_handler>
c001ecd6:	81 c4 04 00 00 00    	add    esp,0x4
c001ecdc:	0f a9                	pop    gs
c001ecde:	0f a1                	pop    fs
c001ece0:	07                   	pop    es
c001ece1:	1f                   	pop    ds
c001ece2:	e8 04 2b ff ff       	call   c00117eb <KiCheckSignalZ>
c001ece7:	3d 00 00 00 00       	cmp    eax,0x0
c001ecec:	0f 84 c0 00 00 00    	je     c001edb2 <skipSignals>
c001ecf2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ecf7:	61                   	popa   
c001ecf8:	53                   	push   ebx
c001ecf9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ecff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ed02:	5b                   	pop    ebx
c001ed03:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ed08:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ed0b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ed0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed11:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ed14:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ed17:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ed1a:	81 c4 08 00 00 00    	add    esp,0x8
c001ed20:	5e                   	pop    esi
c001ed21:	5b                   	pop    ebx
c001ed22:	59                   	pop    ecx
c001ed23:	5a                   	pop    edx
c001ed24:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ed27:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ed2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ed2d:	52                   	push   edx
c001ed2e:	51                   	push   ecx
c001ed2f:	53                   	push   ebx
c001ed30:	56                   	push   esi
c001ed31:	81 ec 08 00 00 00    	sub    esp,0x8
c001ed37:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ed3a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ed3d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ed40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed46:	60                   	pusha  
c001ed47:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ed4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ed50:	89 e3                	mov    ebx,esp
c001ed52:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ed55:	52                   	push   edx
c001ed56:	68 76 ed 01 c0       	push   0xc001ed76
c001ed5b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ed5e:	89 dc                	mov    esp,ebx
c001ed60:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed63:	68 23 00 00 00       	push   0x23
c001ed68:	51                   	push   ecx
c001ed69:	68 02 02 00 00       	push   0x202
c001ed6e:	68 1b 00 00 00       	push   0x1b
c001ed73:	ff 36                	push   DWORD PTR [esi]
c001ed75:	cf                   	iret   

c001ed76 <finishSignal>:
c001ed76:	cd 0f                	int    0xf

c001ed78 <finishSignal2>:
c001ed78:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed7e:	e8 e5 2a ff ff       	call   c0011868 <KiFinishSignalZ>
c001ed83:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed89:	68 23 00 00 00       	push   0x23
c001ed8e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed91:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed94:	68 1b 00 00 00       	push   0x1b
c001ed99:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eda2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eda5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eda8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001edab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001edae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001edb1:	cf                   	iret   

c001edb2 <skipSignals>:
c001edb2:	61                   	popa   
c001edb3:	81 c4 08 00 00 00    	add    esp,0x8
c001edb9:	cf                   	iret   
c001edba:	90                   	nop
c001edbb:	90                   	nop

c001edbc <irq16>:
c001edbc:	fa                   	cli    
c001edbd:	6a 00                	push   0x0
c001edbf:	6a 30                	push   0x30
c001edc1:	e9 c0 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edc6 <irq17>:
c001edc6:	fa                   	cli    
c001edc7:	6a 00                	push   0x0
c001edc9:	6a 31                	push   0x31
c001edcb:	e9 b6 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edd0 <irq18>:
c001edd0:	fa                   	cli    
c001edd1:	6a 00                	push   0x0
c001edd3:	6a 32                	push   0x32
c001edd5:	e9 ac fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edda <irq19>:
c001edda:	fa                   	cli    
c001eddb:	6a 00                	push   0x0
c001eddd:	6a 33                	push   0x33
c001eddf:	e9 a2 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001ede4 <irq20>:
c001ede4:	fa                   	cli    
c001ede5:	6a 00                	push   0x0
c001ede7:	6a 34                	push   0x34
c001ede9:	e9 98 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edee <irq21>:
c001edee:	fa                   	cli    
c001edef:	6a 00                	push   0x0
c001edf1:	6a 35                	push   0x35
c001edf3:	e9 8e fe ff ff       	jmp    c001ec86 <int_common_stub>

c001edf8 <irq22>:
c001edf8:	fa                   	cli    
c001edf9:	6a 00                	push   0x0
c001edfb:	6a 36                	push   0x36
c001edfd:	e9 84 fe ff ff       	jmp    c001ec86 <int_common_stub>

c001ee02 <irq23>:
c001ee02:	fa                   	cli    
c001ee03:	6a 00                	push   0x0
c001ee05:	6a 37                	push   0x37
c001ee07:	e9 7a fe ff ff       	jmp    c001ec86 <int_common_stub>
c001ee0c:	66 90                	xchg   ax,ax
c001ee0e:	66 90                	xchg   ax,ax

c001ee10 <i386GetRDRAND>:
c001ee10:	b9 64 00 00 00       	mov    ecx,0x64

c001ee15 <retry>:
c001ee15:	0f c7 f0             	rdrand eax
c001ee18:	72 05                	jb     c001ee1f <retry.done>
c001ee1a:	e2 f9                	loop   c001ee15 <retry>

c001ee1c <retry.fail>:
c001ee1c:	31 c0                	xor    eax,eax
c001ee1e:	c3                   	ret    

c001ee1f <retry.done>:
c001ee1f:	c3                   	ret    

c001ee20 <absolutelyNoChanceInHell>:
c001ee20:	b8 01 00 00 00       	mov    eax,0x1
c001ee25:	0f a2                	cpuid  
c001ee27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee2d:	74 06                	je     c001ee35 <sseDetect.noSSE>
c001ee2f:	b8 01 00 00 00       	mov    eax,0x1
c001ee34:	c3                   	ret    

c001ee35 <sseDetect.noSSE>:
c001ee35:	31 c0                	xor    eax,eax
c001ee37:	c3                   	ret    

c001ee38 <sseSave>:
c001ee38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee3c:	0f ae 00             	fxsave [eax]
c001ee3f:	c3                   	ret    

c001ee40 <sseLoad>:
c001ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee44:	0f ae 08             	fxrstor [eax]
c001ee47:	c3                   	ret    

c001ee48 <sseInit>:
c001ee48:	e8 42 00 00 00       	call   c001ee8f <x87Init>
c001ee4d:	0f 20 e0             	mov    eax,cr4
c001ee50:	66 0d 00 06          	or     ax,0x600
c001ee54:	0f 22 e0             	mov    cr4,eax
c001ee57:	c3                   	ret    

c001ee58 <sseClose>:
c001ee58:	c3                   	ret    
c001ee59:	66 90                	xchg   ax,ax
c001ee5b:	66 90                	xchg   ax,ax
c001ee5d:	66 90                	xchg   ax,ax
c001ee5f:	90                   	nop

c001ee60 <value_37F>:
c001ee60:	7f 03                	jg     c001ee65 <value_37A+0x1>

c001ee62 <value_37E>:
c001ee62:	7e 03                	jle    c001ee67 <x87Detect+0x1>

c001ee64 <value_37A>:
c001ee64:	7a 03                	jp     c001ee69 <x87Detect+0x3>

c001ee66 <x87Detect>:
c001ee66:	b8 01 00 00 00       	mov    eax,0x1
c001ee6b:	0f a2                	cpuid  
c001ee6d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee73:	74 06                	je     c001ee7b <x87Detect.nox87>
c001ee75:	b8 01 00 00 00       	mov    eax,0x1
c001ee7a:	c3                   	ret    

c001ee7b <x87Detect.nox87>:
c001ee7b:	b8 00 00 00 00       	mov    eax,0x0
c001ee80:	c3                   	ret    

c001ee81 <x87Save>:
c001ee81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee85:	dd 30                	fnsave [eax]
c001ee87:	c3                   	ret    

c001ee88 <x87Load>:
c001ee88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee8c:	dd 20                	frstor [eax]
c001ee8e:	c3                   	ret    

c001ee8f <x87Init>:
c001ee8f:	0f 20 c0             	mov    eax,cr0
c001ee92:	66 25 fb ff          	and    ax,0xfffb
c001ee96:	66 0d 22 00          	or     ax,0x22
c001ee9a:	0f 22 c0             	mov    cr0,eax
c001ee9d:	db e3                	fninit 
c001ee9f:	0f 06                	clts   
c001eea1:	d9 2d 64 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee64
c001eea7:	c3                   	ret    

c001eea8 <x87Close>:
c001eea8:	c3                   	ret    
c001eea9:	66 90                	xchg   ax,ax
c001eeab:	90                   	nop

c001eeac <__do_global_ctors_aux>:
c001eeac:	a1 60 fe 01 c0       	mov    eax,ds:0xc001fe60
c001eeb1:	83 f8 ff             	cmp    eax,0xffffffff
c001eeb4:	74 1a                	je     c001eed0 <__do_global_ctors_aux+0x24>
c001eeb6:	55                   	push   ebp
c001eeb7:	89 e5                	mov    ebp,esp
c001eeb9:	53                   	push   ebx
c001eeba:	52                   	push   edx
c001eebb:	bb 60 fe 01 c0       	mov    ebx,0xc001fe60
c001eec0:	ff d0                	call   eax
c001eec2:	83 eb 04             	sub    ebx,0x4
c001eec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eec7:	83 f8 ff             	cmp    eax,0xffffffff
c001eeca:	75 f4                	jne    c001eec0 <__do_global_ctors_aux+0x14>
c001eecc:	58                   	pop    eax
c001eecd:	5b                   	pop    ebx
c001eece:	5d                   	pop    ebp
c001eecf:	c3                   	ret    
c001eed0:	c3                   	ret    
c001eed1:	66 90                	xchg   ax,ax
c001eed3:	90                   	nop

c001eed4 <__divdi3>:
c001eed4:	55                   	push   ebp
c001eed5:	57                   	push   edi
c001eed6:	56                   	push   esi
c001eed7:	53                   	push   ebx
c001eed8:	83 ec 1c             	sub    esp,0x1c
c001eedb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eedf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eee3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eee6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eeea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eef2:	85 db                	test   ebx,ebx
c001eef4:	0f 88 8e 00 00 00    	js     c001ef88 <__divdi3+0xb4>
c001eefa:	89 dd                	mov    ebp,ebx
c001eefc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef04:	89 d3                	mov    ebx,edx
c001ef06:	85 d2                	test   edx,edx
c001ef08:	79 0d                	jns    c001ef17 <__divdi3+0x43>
c001ef0a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef0e:	f7 d8                	neg    eax
c001ef10:	83 d2 00             	adc    edx,0x0
c001ef13:	f7 da                	neg    edx
c001ef15:	89 d3                	mov    ebx,edx
c001ef17:	89 c7                	mov    edi,eax
c001ef19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef1c:	85 db                	test   ebx,ebx
c001ef1e:	75 48                	jne    c001ef68 <__divdi3+0x94>
c001ef20:	39 ef                	cmp    edi,ebp
c001ef22:	76 24                	jbe    c001ef48 <__divdi3+0x74>
c001ef24:	89 ea                	mov    edx,ebp
c001ef26:	f7 f7                	div    edi
c001ef28:	89 c1                	mov    ecx,eax
c001ef2a:	31 f6                	xor    esi,esi
c001ef2c:	89 c8                	mov    eax,ecx
c001ef2e:	89 f2                	mov    edx,esi
c001ef30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef34:	85 c9                	test   ecx,ecx
c001ef36:	74 07                	je     c001ef3f <__divdi3+0x6b>
c001ef38:	f7 d8                	neg    eax
c001ef3a:	83 d2 00             	adc    edx,0x0
c001ef3d:	f7 da                	neg    edx
c001ef3f:	83 c4 1c             	add    esp,0x1c
c001ef42:	5b                   	pop    ebx
c001ef43:	5e                   	pop    esi
c001ef44:	5f                   	pop    edi
c001ef45:	5d                   	pop    ebp
c001ef46:	c3                   	ret    
c001ef47:	90                   	nop
c001ef48:	85 ff                	test   edi,edi
c001ef4a:	75 0b                	jne    c001ef57 <__divdi3+0x83>
c001ef4c:	b8 01 00 00 00       	mov    eax,0x1
c001ef51:	31 d2                	xor    edx,edx
c001ef53:	f7 f3                	div    ebx
c001ef55:	89 c7                	mov    edi,eax
c001ef57:	31 d2                	xor    edx,edx
c001ef59:	89 e8                	mov    eax,ebp
c001ef5b:	f7 f7                	div    edi
c001ef5d:	89 c6                	mov    esi,eax
c001ef5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef62:	f7 f7                	div    edi
c001ef64:	89 c1                	mov    ecx,eax
c001ef66:	eb c4                	jmp    c001ef2c <__divdi3+0x58>
c001ef68:	39 eb                	cmp    ebx,ebp
c001ef6a:	77 3c                	ja     c001efa8 <__divdi3+0xd4>
c001ef6c:	0f bd f3             	bsr    esi,ebx
c001ef6f:	83 f6 1f             	xor    esi,0x1f
c001ef72:	75 40                	jne    c001efb4 <__divdi3+0xe0>
c001ef74:	39 eb                	cmp    ebx,ebp
c001ef76:	72 09                	jb     c001ef81 <__divdi3+0xad>
c001ef78:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef7b:	0f 87 97 00 00 00    	ja     c001f018 <__divdi3+0x144>
c001ef81:	b9 01 00 00 00       	mov    ecx,0x1
c001ef86:	eb a4                	jmp    c001ef2c <__divdi3+0x58>
c001ef88:	f7 d9                	neg    ecx
c001ef8a:	83 d3 00             	adc    ebx,0x0
c001ef8d:	f7 db                	neg    ebx
c001ef8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef96:	89 dd                	mov    ebp,ebx
c001ef98:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001efa0:	e9 5f ff ff ff       	jmp    c001ef04 <__divdi3+0x30>
c001efa5:	8d 76 00             	lea    esi,[esi+0x0]
c001efa8:	31 f6                	xor    esi,esi
c001efaa:	31 c9                	xor    ecx,ecx
c001efac:	e9 7b ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001efb1:	8d 76 00             	lea    esi,[esi+0x0]
c001efb4:	b8 20 00 00 00       	mov    eax,0x20
c001efb9:	29 f0                	sub    eax,esi
c001efbb:	89 f1                	mov    ecx,esi
c001efbd:	d3 e3                	shl    ebx,cl
c001efbf:	89 fa                	mov    edx,edi
c001efc1:	88 c1                	mov    cl,al
c001efc3:	d3 ea                	shr    edx,cl
c001efc5:	09 da                	or     edx,ebx
c001efc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efcb:	89 f1                	mov    ecx,esi
c001efcd:	d3 e7                	shl    edi,cl
c001efcf:	89 eb                	mov    ebx,ebp
c001efd1:	88 c1                	mov    cl,al
c001efd3:	d3 eb                	shr    ebx,cl
c001efd5:	89 f1                	mov    ecx,esi
c001efd7:	d3 e5                	shl    ebp,cl
c001efd9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efdc:	88 c1                	mov    cl,al
c001efde:	d3 ea                	shr    edx,cl
c001efe0:	09 d5                	or     ebp,edx
c001efe2:	89 e8                	mov    eax,ebp
c001efe4:	89 da                	mov    edx,ebx
c001efe6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001efea:	89 d3                	mov    ebx,edx
c001efec:	89 c5                	mov    ebp,eax
c001efee:	f7 e7                	mul    edi
c001eff0:	39 d3                	cmp    ebx,edx
c001eff2:	72 18                	jb     c001f00c <__divdi3+0x138>
c001eff4:	74 0a                	je     c001f000 <__divdi3+0x12c>
c001eff6:	89 e9                	mov    ecx,ebp
c001eff8:	31 f6                	xor    esi,esi
c001effa:	e9 2d ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001efff:	90                   	nop
c001f000:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f003:	89 f1                	mov    ecx,esi
c001f005:	d3 e7                	shl    edi,cl
c001f007:	39 c7                	cmp    edi,eax
c001f009:	73 eb                	jae    c001eff6 <__divdi3+0x122>
c001f00b:	90                   	nop
c001f00c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f00f:	31 f6                	xor    esi,esi
c001f011:	e9 16 ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001f016:	66 90                	xchg   ax,ax
c001f018:	31 c9                	xor    ecx,ecx
c001f01a:	e9 0d ff ff ff       	jmp    c001ef2c <__divdi3+0x58>
c001f01f:	90                   	nop

c001f020 <__moddi3>:
c001f020:	55                   	push   ebp
c001f021:	57                   	push   edi
c001f022:	56                   	push   esi
c001f023:	53                   	push   ebx
c001f024:	83 ec 2c             	sub    esp,0x2c
c001f027:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f02b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f02f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f033:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f037:	85 db                	test   ebx,ebx
c001f039:	0f 88 85 00 00 00    	js     c001f0c4 <__moddi3+0xa4>
c001f03f:	89 de                	mov    esi,ebx
c001f041:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f049:	89 d7                	mov    edi,edx
c001f04b:	85 d2                	test   edx,edx
c001f04d:	79 09                	jns    c001f058 <__moddi3+0x38>
c001f04f:	f7 d8                	neg    eax
c001f051:	83 d2 00             	adc    edx,0x0
c001f054:	f7 da                	neg    edx
c001f056:	89 d7                	mov    edi,edx
c001f058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f05c:	89 cd                	mov    ebp,ecx
c001f05e:	85 ff                	test   edi,edi
c001f060:	75 52                	jne    c001f0b4 <__moddi3+0x94>
c001f062:	89 c3                	mov    ebx,eax
c001f064:	39 f0                	cmp    eax,esi
c001f066:	76 24                	jbe    c001f08c <__moddi3+0x6c>
c001f068:	89 c8                	mov    eax,ecx
c001f06a:	89 f2                	mov    edx,esi
c001f06c:	f7 f3                	div    ebx
c001f06e:	89 d6                	mov    esi,edx
c001f070:	89 f0                	mov    eax,esi
c001f072:	31 d2                	xor    edx,edx
c001f074:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f078:	85 c9                	test   ecx,ecx
c001f07a:	74 07                	je     c001f083 <__moddi3+0x63>
c001f07c:	f7 d8                	neg    eax
c001f07e:	83 d2 00             	adc    edx,0x0
c001f081:	f7 da                	neg    edx
c001f083:	83 c4 2c             	add    esp,0x2c
c001f086:	5b                   	pop    ebx
c001f087:	5e                   	pop    esi
c001f088:	5f                   	pop    edi
c001f089:	5d                   	pop    ebp
c001f08a:	c3                   	ret    
c001f08b:	90                   	nop
c001f08c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f090:	85 db                	test   ebx,ebx
c001f092:	75 0d                	jne    c001f0a1 <__moddi3+0x81>
c001f094:	b8 01 00 00 00       	mov    eax,0x1
c001f099:	31 d2                	xor    edx,edx
c001f09b:	f7 f7                	div    edi
c001f09d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0a1:	89 f0                	mov    eax,esi
c001f0a3:	31 d2                	xor    edx,edx
c001f0a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0a9:	f7 f7                	div    edi
c001f0ab:	89 e8                	mov    eax,ebp
c001f0ad:	f7 f7                	div    edi
c001f0af:	89 d6                	mov    esi,edx
c001f0b1:	eb bd                	jmp    c001f070 <__moddi3+0x50>
c001f0b3:	90                   	nop
c001f0b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0b8:	39 f7                	cmp    edi,esi
c001f0ba:	76 20                	jbe    c001f0dc <__moddi3+0xbc>
c001f0bc:	89 c8                	mov    eax,ecx
c001f0be:	89 f2                	mov    edx,esi
c001f0c0:	eb b2                	jmp    c001f074 <__moddi3+0x54>
c001f0c2:	66 90                	xchg   ax,ax
c001f0c4:	f7 d9                	neg    ecx
c001f0c6:	83 d3 00             	adc    ebx,0x0
c001f0c9:	f7 db                	neg    ebx
c001f0cb:	89 de                	mov    esi,ebx
c001f0cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0d5:	e9 6f ff ff ff       	jmp    c001f049 <__moddi3+0x29>
c001f0da:	66 90                	xchg   ax,ax
c001f0dc:	0f bd c7             	bsr    eax,edi
c001f0df:	83 f0 1f             	xor    eax,0x1f
c001f0e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0e6:	75 24                	jne    c001f10c <__moddi3+0xec>
c001f0e8:	39 f7                	cmp    edi,esi
c001f0ea:	72 06                	jb     c001f0f2 <__moddi3+0xd2>
c001f0ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f0f0:	77 0c                	ja     c001f0fe <__moddi3+0xde>
c001f0f2:	89 e9                	mov    ecx,ebp
c001f0f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f0f8:	19 fe                	sbb    esi,edi
c001f0fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f102:	89 f2                	mov    edx,esi
c001f104:	e9 6b ff ff ff       	jmp    c001f074 <__moddi3+0x54>
c001f109:	8d 76 00             	lea    esi,[esi+0x0]
c001f10c:	b8 20 00 00 00       	mov    eax,0x20
c001f111:	89 c2                	mov    edx,eax
c001f113:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f117:	29 da                	sub    edx,ebx
c001f119:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f11d:	88 d9                	mov    cl,bl
c001f11f:	d3 e7                	shl    edi,cl
c001f121:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f125:	88 d1                	mov    cl,dl
c001f127:	d3 e8                	shr    eax,cl
c001f129:	09 c7                	or     edi,eax
c001f12b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f12f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f133:	89 d8                	mov    eax,ebx
c001f135:	88 d9                	mov    cl,bl
c001f137:	d3 e7                	shl    edi,cl
c001f139:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f13d:	89 f3                	mov    ebx,esi
c001f13f:	88 d1                	mov    cl,dl
c001f141:	d3 eb                	shr    ebx,cl
c001f143:	89 c7                	mov    edi,eax
c001f145:	88 c1                	mov    cl,al
c001f147:	d3 e6                	shl    esi,cl
c001f149:	89 e8                	mov    eax,ebp
c001f14b:	88 d1                	mov    cl,dl
c001f14d:	d3 e8                	shr    eax,cl
c001f14f:	09 f0                	or     eax,esi
c001f151:	89 f9                	mov    ecx,edi
c001f153:	d3 e5                	shl    ebp,cl
c001f155:	89 da                	mov    edx,ebx
c001f157:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f15b:	89 d3                	mov    ebx,edx
c001f15d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f161:	89 c6                	mov    esi,eax
c001f163:	89 d1                	mov    ecx,edx
c001f165:	39 d3                	cmp    ebx,edx
c001f167:	72 27                	jb     c001f190 <__moddi3+0x170>
c001f169:	74 21                	je     c001f18c <__moddi3+0x16c>
c001f16b:	29 f5                	sub    ebp,esi
c001f16d:	19 cb                	sbb    ebx,ecx
c001f16f:	89 de                	mov    esi,ebx
c001f171:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f175:	d3 e6                	shl    esi,cl
c001f177:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f17b:	89 f9                	mov    ecx,edi
c001f17d:	d3 ed                	shr    ebp,cl
c001f17f:	09 ee                	or     esi,ebp
c001f181:	89 f0                	mov    eax,esi
c001f183:	d3 eb                	shr    ebx,cl
c001f185:	89 da                	mov    edx,ebx
c001f187:	e9 e8 fe ff ff       	jmp    c001f074 <__moddi3+0x54>
c001f18c:	39 c5                	cmp    ebp,eax
c001f18e:	73 db                	jae    c001f16b <__moddi3+0x14b>
c001f190:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f194:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f198:	89 d1                	mov    ecx,edx
c001f19a:	89 c6                	mov    esi,eax
c001f19c:	eb cd                	jmp    c001f16b <__moddi3+0x14b>
c001f19e:	66 90                	xchg   ax,ax

c001f1a0 <__udivdi3>:
c001f1a0:	55                   	push   ebp
c001f1a1:	57                   	push   edi
c001f1a2:	56                   	push   esi
c001f1a3:	53                   	push   ebx
c001f1a4:	83 ec 1c             	sub    esp,0x1c
c001f1a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f1ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f1af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f1b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1b7:	85 d2                	test   edx,edx
c001f1b9:	75 41                	jne    c001f1fc <__udivdi3+0x5c>
c001f1bb:	39 f7                	cmp    edi,esi
c001f1bd:	76 15                	jbe    c001f1d4 <__udivdi3+0x34>
c001f1bf:	89 e8                	mov    eax,ebp
c001f1c1:	89 f2                	mov    edx,esi
c001f1c3:	f7 f7                	div    edi
c001f1c5:	31 db                	xor    ebx,ebx
c001f1c7:	89 da                	mov    edx,ebx
c001f1c9:	83 c4 1c             	add    esp,0x1c
c001f1cc:	5b                   	pop    ebx
c001f1cd:	5e                   	pop    esi
c001f1ce:	5f                   	pop    edi
c001f1cf:	5d                   	pop    ebp
c001f1d0:	c3                   	ret    
c001f1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1d4:	89 f9                	mov    ecx,edi
c001f1d6:	85 ff                	test   edi,edi
c001f1d8:	75 0b                	jne    c001f1e5 <__udivdi3+0x45>
c001f1da:	b8 01 00 00 00       	mov    eax,0x1
c001f1df:	31 d2                	xor    edx,edx
c001f1e1:	f7 f7                	div    edi
c001f1e3:	89 c1                	mov    ecx,eax
c001f1e5:	31 d2                	xor    edx,edx
c001f1e7:	89 f0                	mov    eax,esi
c001f1e9:	f7 f1                	div    ecx
c001f1eb:	89 c3                	mov    ebx,eax
c001f1ed:	89 e8                	mov    eax,ebp
c001f1ef:	f7 f1                	div    ecx
c001f1f1:	89 da                	mov    edx,ebx
c001f1f3:	83 c4 1c             	add    esp,0x1c
c001f1f6:	5b                   	pop    ebx
c001f1f7:	5e                   	pop    esi
c001f1f8:	5f                   	pop    edi
c001f1f9:	5d                   	pop    ebp
c001f1fa:	c3                   	ret    
c001f1fb:	90                   	nop
c001f1fc:	39 f2                	cmp    edx,esi
c001f1fe:	77 1c                	ja     c001f21c <__udivdi3+0x7c>
c001f200:	0f bd da             	bsr    ebx,edx
c001f203:	83 f3 1f             	xor    ebx,0x1f
c001f206:	75 24                	jne    c001f22c <__udivdi3+0x8c>
c001f208:	39 f2                	cmp    edx,esi
c001f20a:	72 08                	jb     c001f214 <__udivdi3+0x74>
c001f20c:	39 ef                	cmp    edi,ebp
c001f20e:	0f 87 84 00 00 00    	ja     c001f298 <__udivdi3+0xf8>
c001f214:	b8 01 00 00 00       	mov    eax,0x1
c001f219:	eb ac                	jmp    c001f1c7 <__udivdi3+0x27>
c001f21b:	90                   	nop
c001f21c:	31 db                	xor    ebx,ebx
c001f21e:	31 c0                	xor    eax,eax
c001f220:	89 da                	mov    edx,ebx
c001f222:	83 c4 1c             	add    esp,0x1c
c001f225:	5b                   	pop    ebx
c001f226:	5e                   	pop    esi
c001f227:	5f                   	pop    edi
c001f228:	5d                   	pop    ebp
c001f229:	c3                   	ret    
c001f22a:	66 90                	xchg   ax,ax
c001f22c:	b8 20 00 00 00       	mov    eax,0x20
c001f231:	29 d8                	sub    eax,ebx
c001f233:	88 d9                	mov    cl,bl
c001f235:	d3 e2                	shl    edx,cl
c001f237:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f23b:	89 fa                	mov    edx,edi
c001f23d:	88 c1                	mov    cl,al
c001f23f:	d3 ea                	shr    edx,cl
c001f241:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f245:	09 d1                	or     ecx,edx
c001f247:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f24b:	88 d9                	mov    cl,bl
c001f24d:	d3 e7                	shl    edi,cl
c001f24f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f253:	89 f7                	mov    edi,esi
c001f255:	88 c1                	mov    cl,al
c001f257:	d3 ef                	shr    edi,cl
c001f259:	88 d9                	mov    cl,bl
c001f25b:	d3 e6                	shl    esi,cl
c001f25d:	89 ea                	mov    edx,ebp
c001f25f:	88 c1                	mov    cl,al
c001f261:	d3 ea                	shr    edx,cl
c001f263:	09 d6                	or     esi,edx
c001f265:	89 f0                	mov    eax,esi
c001f267:	89 fa                	mov    edx,edi
c001f269:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f26d:	89 d7                	mov    edi,edx
c001f26f:	89 c6                	mov    esi,eax
c001f271:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f275:	39 d7                	cmp    edi,edx
c001f277:	72 13                	jb     c001f28c <__udivdi3+0xec>
c001f279:	74 09                	je     c001f284 <__udivdi3+0xe4>
c001f27b:	89 f0                	mov    eax,esi
c001f27d:	31 db                	xor    ebx,ebx
c001f27f:	e9 43 ff ff ff       	jmp    c001f1c7 <__udivdi3+0x27>
c001f284:	88 d9                	mov    cl,bl
c001f286:	d3 e5                	shl    ebp,cl
c001f288:	39 c5                	cmp    ebp,eax
c001f28a:	73 ef                	jae    c001f27b <__udivdi3+0xdb>
c001f28c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f28f:	31 db                	xor    ebx,ebx
c001f291:	e9 31 ff ff ff       	jmp    c001f1c7 <__udivdi3+0x27>
c001f296:	66 90                	xchg   ax,ax
c001f298:	31 c0                	xor    eax,eax
c001f29a:	e9 28 ff ff ff       	jmp    c001f1c7 <__udivdi3+0x27>
c001f29f:	90                   	nop

c001f2a0 <__umoddi3>:
c001f2a0:	55                   	push   ebp
c001f2a1:	57                   	push   edi
c001f2a2:	56                   	push   esi
c001f2a3:	53                   	push   ebx
c001f2a4:	83 ec 1c             	sub    esp,0x1c
c001f2a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f2ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f2af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2b7:	89 da                	mov    edx,ebx
c001f2b9:	85 c0                	test   eax,eax
c001f2bb:	75 37                	jne    c001f2f4 <__umoddi3+0x54>
c001f2bd:	39 df                	cmp    edi,ebx
c001f2bf:	76 13                	jbe    c001f2d4 <__umoddi3+0x34>
c001f2c1:	89 f0                	mov    eax,esi
c001f2c3:	f7 f7                	div    edi
c001f2c5:	89 d0                	mov    eax,edx
c001f2c7:	31 d2                	xor    edx,edx
c001f2c9:	83 c4 1c             	add    esp,0x1c
c001f2cc:	5b                   	pop    ebx
c001f2cd:	5e                   	pop    esi
c001f2ce:	5f                   	pop    edi
c001f2cf:	5d                   	pop    ebp
c001f2d0:	c3                   	ret    
c001f2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2d4:	89 fd                	mov    ebp,edi
c001f2d6:	85 ff                	test   edi,edi
c001f2d8:	75 0b                	jne    c001f2e5 <__umoddi3+0x45>
c001f2da:	b8 01 00 00 00       	mov    eax,0x1
c001f2df:	31 d2                	xor    edx,edx
c001f2e1:	f7 f7                	div    edi
c001f2e3:	89 c5                	mov    ebp,eax
c001f2e5:	89 d8                	mov    eax,ebx
c001f2e7:	31 d2                	xor    edx,edx
c001f2e9:	f7 f5                	div    ebp
c001f2eb:	89 f0                	mov    eax,esi
c001f2ed:	f7 f5                	div    ebp
c001f2ef:	89 d0                	mov    eax,edx
c001f2f1:	eb d4                	jmp    c001f2c7 <__umoddi3+0x27>
c001f2f3:	90                   	nop
c001f2f4:	89 f1                	mov    ecx,esi
c001f2f6:	39 d8                	cmp    eax,ebx
c001f2f8:	76 0a                	jbe    c001f304 <__umoddi3+0x64>
c001f2fa:	89 f0                	mov    eax,esi
c001f2fc:	83 c4 1c             	add    esp,0x1c
c001f2ff:	5b                   	pop    ebx
c001f300:	5e                   	pop    esi
c001f301:	5f                   	pop    edi
c001f302:	5d                   	pop    ebp
c001f303:	c3                   	ret    
c001f304:	0f bd e8             	bsr    ebp,eax
c001f307:	83 f5 1f             	xor    ebp,0x1f
c001f30a:	75 1c                	jne    c001f328 <__umoddi3+0x88>
c001f30c:	39 d8                	cmp    eax,ebx
c001f30e:	72 04                	jb     c001f314 <__umoddi3+0x74>
c001f310:	39 f7                	cmp    edi,esi
c001f312:	77 08                	ja     c001f31c <__umoddi3+0x7c>
c001f314:	89 da                	mov    edx,ebx
c001f316:	29 fe                	sub    esi,edi
c001f318:	19 c2                	sbb    edx,eax
c001f31a:	89 f1                	mov    ecx,esi
c001f31c:	89 c8                	mov    eax,ecx
c001f31e:	83 c4 1c             	add    esp,0x1c
c001f321:	5b                   	pop    ebx
c001f322:	5e                   	pop    esi
c001f323:	5f                   	pop    edi
c001f324:	5d                   	pop    ebp
c001f325:	c3                   	ret    
c001f326:	66 90                	xchg   ax,ax
c001f328:	ba 20 00 00 00       	mov    edx,0x20
c001f32d:	29 ea                	sub    edx,ebp
c001f32f:	89 e9                	mov    ecx,ebp
c001f331:	d3 e0                	shl    eax,cl
c001f333:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f337:	89 f8                	mov    eax,edi
c001f339:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f33d:	88 d1                	mov    cl,dl
c001f33f:	d3 e8                	shr    eax,cl
c001f341:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f345:	09 c1                	or     ecx,eax
c001f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f34b:	89 e9                	mov    ecx,ebp
c001f34d:	d3 e7                	shl    edi,cl
c001f34f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f353:	89 d8                	mov    eax,ebx
c001f355:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f359:	88 d1                	mov    cl,dl
c001f35b:	d3 e8                	shr    eax,cl
c001f35d:	89 c7                	mov    edi,eax
c001f35f:	89 e9                	mov    ecx,ebp
c001f361:	d3 e3                	shl    ebx,cl
c001f363:	89 f0                	mov    eax,esi
c001f365:	88 d1                	mov    cl,dl
c001f367:	d3 e8                	shr    eax,cl
c001f369:	09 d8                	or     eax,ebx
c001f36b:	89 e9                	mov    ecx,ebp
c001f36d:	d3 e6                	shl    esi,cl
c001f36f:	89 f3                	mov    ebx,esi
c001f371:	89 fa                	mov    edx,edi
c001f373:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f377:	89 d1                	mov    ecx,edx
c001f379:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f37d:	89 c6                	mov    esi,eax
c001f37f:	89 d7                	mov    edi,edx
c001f381:	39 d1                	cmp    ecx,edx
c001f383:	72 27                	jb     c001f3ac <__umoddi3+0x10c>
c001f385:	74 21                	je     c001f3a8 <__umoddi3+0x108>
c001f387:	89 ca                	mov    edx,ecx
c001f389:	29 f3                	sub    ebx,esi
c001f38b:	19 fa                	sbb    edx,edi
c001f38d:	89 d0                	mov    eax,edx
c001f38f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f393:	d3 e0                	shl    eax,cl
c001f395:	89 e9                	mov    ecx,ebp
c001f397:	d3 eb                	shr    ebx,cl
c001f399:	09 d8                	or     eax,ebx
c001f39b:	d3 ea                	shr    edx,cl
c001f39d:	83 c4 1c             	add    esp,0x1c
c001f3a0:	5b                   	pop    ebx
c001f3a1:	5e                   	pop    esi
c001f3a2:	5f                   	pop    edi
c001f3a3:	5d                   	pop    ebp
c001f3a4:	c3                   	ret    
c001f3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3a8:	39 c3                	cmp    ebx,eax
c001f3aa:	73 db                	jae    c001f387 <__umoddi3+0xe7>
c001f3ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f3b4:	89 d7                	mov    edi,edx
c001f3b6:	89 c6                	mov    esi,eax
c001f3b8:	eb cd                	jmp    c001f387 <__umoddi3+0xe7>

Disassembly of section .init:

c001f3ba <_init>:
c001f3ba:	55                   	push   ebp
c001f3bb:	89 e5                	mov    ebp,esp
c001f3bd:	e8 32 0d fe ff       	call   c00000f4 <frame_dummy>
c001f3c2:	e8 e5 fa ff ff       	call   c001eeac <__do_global_ctors_aux>
c001f3c7:	5d                   	pop    ebp
c001f3c8:	c3                   	ret    

Disassembly of section .fini:

c001f3c9 <_fini>:
c001f3c9:	55                   	push   ebp
c001f3ca:	89 e5                	mov    ebp,esp
c001f3cc:	e8 b3 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f3d1:	5d                   	pop    ebp
c001f3d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3d4 <Computer::~Computer()>:
c001f3d4:	83 ec 0c             	sub    esp,0xc
c001f3d7:	ba f4 06 02 c0       	mov    edx,0xc00206f4
c001f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e0:	89 10                	mov    DWORD PTR [eax],edx
c001f3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	50                   	push   eax
c001f3ea:	e8 4f d1 fe ff       	call   c000c53e <Device::~Device()>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	90                   	nop
c001f3f3:	83 c4 0c             	add    esp,0xc
c001f3f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f3f8 <Computer::~Computer()>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	83 ec 0c             	sub    esp,0xc
c001f3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f402:	e8 cd ff ff ff       	call   c001f3d4 <Computer::~Computer()>
c001f407:	83 c4 10             	add    esp,0x10
c001f40a:	83 ec 08             	sub    esp,0x8
c001f40d:	68 70 01 00 00       	push   0x170
c001f412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f416:	e8 f1 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	83 c4 0c             	add    esp,0xc
c001f421:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f422 <idleCommon()>:
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	fa                   	cli    
c001f426:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f42c:	e8 ab 66 ff ff       	call   c0015adc <schedule()>
c001f431:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f436:	48                   	dec    eax
c001f437:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f43c:	75 01                	jne    c001f43f <idleCommon()+0x1d>
c001f43e:	fb                   	sti    
c001f43f:	83 c4 0c             	add    esp,0xc
c001f442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f444 <LinkedList<UnixFile>::~LinkedList()>:
c001f444:	90                   	nop
c001f445:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f446 <LinkedList<UnixFile>::LinkedList()>:
c001f446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f44a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f45b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f47b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f47f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f486:	90                   	nop
c001f487:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f488 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f488:	83 ec 0c             	sub    esp,0xc
c001f48b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f490:	75 10                	jne    c001f4a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	68 08 09 02 c0       	push   0xc0020908
c001f49a:	e8 3a 1d ff ff       	call   c00111d9 <KePanic(char const*)>
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4a8:	85 c0                	test   eax,eax
c001f4aa:	74 34                	je     c001f4e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4b3:	85 c0                	test   eax,eax
c001f4b5:	74 29                	je     c001f4e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4de:	eb 65                	jmp    c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4e6:	85 c0                	test   eax,eax
c001f4e8:	75 4b                	jne    c001f535 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4f1:	85 c0                	test   eax,eax
c001f4f3:	75 40                	jne    c001f535 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4fd:	89 10                	mov    DWORD PTR [eax],edx
c001f4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f507:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f511:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f51c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f51f:	85 c0                	test   eax,eax
c001f521:	74 22                	je     c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f523:	83 ec 0c             	sub    esp,0xc
c001f526:	68 2a 09 02 c0       	push   0xc002092a
c001f52b:	e8 a9 1c ff ff       	call   c00111d9 <KePanic(char const*)>
c001f530:	83 c4 10             	add    esp,0x10
c001f533:	eb 10                	jmp    c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f535:	83 ec 0c             	sub    esp,0xc
c001f538:	68 34 09 02 c0       	push   0xc0020934
c001f53d:	e8 97 1c ff ff       	call   c00111d9 <KePanic(char const*)>
c001f542:	83 c4 10             	add    esp,0x10
c001f545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f549:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f54c:	8d 50 01             	lea    edx,[eax+0x1]
c001f54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f553:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f556:	90                   	nop
c001f557:	83 c4 0c             	add    esp,0xc
c001f55a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f55c <LinkedList<UnixFile>::getFirstElement()>:
c001f55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f560:	8b 00                	mov    eax,DWORD PTR [eax]
c001f562:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f564 <LinkedList<UnixFile>::removeFirst()>:
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f56d:	85 c0                	test   eax,eax
c001f56f:	75 12                	jne    c001f583 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f571:	83 ec 0c             	sub    esp,0xc
c001f574:	68 40 09 02 c0       	push   0xc0020940
c001f579:	e8 5b 1c ff ff       	call   c00111d9 <KePanic(char const*)>
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	eb 7e                	jmp    c001f601 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f587:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f58a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58d:	85 c0                	test   eax,eax
c001f58f:	74 10                	je     c001f5a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f591:	83 ec 0c             	sub    esp,0xc
c001f594:	68 8b 09 02 c0       	push   0xc002098b
c001f599:	e8 3b 1c ff ff       	call   c00111d9 <KePanic(char const*)>
c001f59e:	83 c4 10             	add    esp,0x10
c001f5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5aa:	85 c0                	test   eax,eax
c001f5ac:	75 33                	jne    c001f5e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ca:	83 f8 01             	cmp    eax,0x1
c001f5cd:	74 21                	je     c001f5f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5cf:	83 ec 0c             	sub    esp,0xc
c001f5d2:	68 64 09 02 c0       	push   0xc0020964
c001f5d7:	e8 fd 1b ff ff       	call   c00111d9 <KePanic(char const*)>
c001f5dc:	83 c4 10             	add    esp,0x10
c001f5df:	eb 0f                	jmp    c001f5f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ee:	89 10                	mov    DWORD PTR [eax],edx
c001f5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f601:	83 c4 0c             	add    esp,0xc
c001f604:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f606 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f60a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f60d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f60e <DriverlessDevice::~DriverlessDevice()>:
c001f60e:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c001f613:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f617:	89 10                	mov    DWORD PTR [eax],edx
c001f619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f61d:	50                   	push   eax
c001f61e:	e8 1b cf fe ff       	call   c000c53e <Device::~Device()>
c001f623:	83 c4 04             	add    esp,0x4
c001f626:	90                   	nop
c001f627:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f628 <DriverlessDevice::~DriverlessDevice()>:
c001f628:	83 ec 0c             	sub    esp,0xc
c001f62b:	83 ec 0c             	sub    esp,0xc
c001f62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f632:	e8 d7 ff ff ff       	call   c001f60e <DriverlessDevice::~DriverlessDevice()>
c001f637:	83 c4 10             	add    esp,0x10
c001f63a:	83 ec 08             	sub    esp,0x8
c001f63d:	68 58 01 00 00       	push   0x158
c001f642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f646:	e8 c1 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f64b:	83 c4 10             	add    esp,0x10
c001f64e:	83 c4 0c             	add    esp,0xc
c001f651:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f652 <LinkedList<Device>::addElement(Device*)>:
c001f652:	83 ec 0c             	sub    esp,0xc
c001f655:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f65a:	75 10                	jne    c001f66c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	68 08 09 02 c0       	push   0xc0020908
c001f664:	e8 70 1b ff ff       	call   c00111d9 <KePanic(char const*)>
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f670:	8b 00                	mov    eax,DWORD PTR [eax]
c001f672:	85 c0                	test   eax,eax
c001f674:	74 3a                	je     c001f6b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f67d:	85 c0                	test   eax,eax
c001f67f:	74 2f                	je     c001f6b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f685:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f68c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f69a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6ae:	eb 68                	jmp    c001f718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b6:	85 c0                	test   eax,eax
c001f6b8:	75 4e                	jne    c001f708 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c1:	85 c0                	test   eax,eax
c001f6c3:	75 43                	jne    c001f708 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6cd:	89 10                	mov    DWORD PTR [eax],edx
c001f6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6f2:	85 c0                	test   eax,eax
c001f6f4:	74 22                	je     c001f718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6f6:	83 ec 0c             	sub    esp,0xc
c001f6f9:	68 2a 09 02 c0       	push   0xc002092a
c001f6fe:	e8 d6 1a ff ff       	call   c00111d9 <KePanic(char const*)>
c001f703:	83 c4 10             	add    esp,0x10
c001f706:	eb 10                	jmp    c001f718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f708:	83 ec 0c             	sub    esp,0xc
c001f70b:	68 34 09 02 c0       	push   0xc0020934
c001f710:	e8 c4 1a ff ff       	call   c00111d9 <KePanic(char const*)>
c001f715:	83 c4 10             	add    esp,0x10
c001f718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f71f:	8d 50 01             	lea    edx,[eax+0x1]
c001f722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f726:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f729:	90                   	nop
c001f72a:	83 c4 0c             	add    esp,0xc
c001f72d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f72e <LinkedList<Device>::LinkedList()>:
c001f72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f732:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f747:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f767:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f76e:	90                   	nop
c001f76f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f774:	8b 00                	mov    eax,DWORD PTR [eax]
c001f776:	85 c0                	test   eax,eax
c001f778:	75 0e                	jne    c001f788 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f77a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f781:	85 c0                	test   eax,eax
c001f783:	75 03                	jne    c001f788 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f785:	b0 01                	mov    al,0x1
c001f787:	c3                   	ret    
c001f788:	b0 00                	mov    al,0x0
c001f78a:	90                   	nop
c001f78b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f790:	8b 00                	mov    eax,DWORD PTR [eax]
c001f792:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f79d:	85 c0                	test   eax,eax
c001f79f:	75 17                	jne    c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f7a1:	83 ec 0c             	sub    esp,0xc
c001f7a4:	68 40 09 02 c0       	push   0xc0020940
c001f7a9:	e8 2b 1a ff ff       	call   c00111d9 <KePanic(char const*)>
c001f7ae:	83 c4 10             	add    esp,0x10
c001f7b1:	e9 96 00 00 00       	jmp    c001f84c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f7b6:	66 90                	xchg   ax,ax
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7c2:	85 c0                	test   eax,eax
c001f7c4:	0f 95 c0             	setne  al
c001f7c7:	0f b6 c0             	movzx  eax,al
c001f7ca:	85 c0                	test   eax,eax
c001f7cc:	74 12                	je     c001f7e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f7ce:	83 ec 0c             	sub    esp,0xc
c001f7d1:	68 8b 09 02 c0       	push   0xc002098b
c001f7d6:	e8 fe 19 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f7db:	83 c4 10             	add    esp,0x10
c001f7de:	66 90                	xchg   ax,ax
c001f7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7e9:	85 c0                	test   eax,eax
c001f7eb:	0f 94 c0             	sete   al
c001f7ee:	0f b6 c0             	movzx  eax,al
c001f7f1:	85 c0                	test   eax,eax
c001f7f3:	74 33                	je     c001f828 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f811:	83 f8 01             	cmp    eax,0x1
c001f814:	74 22                	je     c001f838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f816:	83 ec 0c             	sub    esp,0xc
c001f819:	68 64 09 02 c0       	push   0xc0020964
c001f81e:	e8 b6 19 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f823:	83 c4 10             	add    esp,0x10
c001f826:	eb 10                	jmp    c001f838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f82e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f835:	89 10                	mov    DWORD PTR [eax],edx
c001f837:	90                   	nop
c001f838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f846:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f849:	8d 76 00             	lea    esi,[esi+0x0]
c001f84c:	83 c4 0c             	add    esp,0xc
c001f84f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f850 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f850:	83 ec 0c             	sub    esp,0xc
c001f853:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f858:	75 12                	jne    c001f86c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	68 08 09 02 c0       	push   0xc0020908
c001f862:	e8 72 19 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f867:	83 c4 10             	add    esp,0x10
c001f86a:	66 90                	xchg   ax,ax
c001f86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f870:	8b 00                	mov    eax,DWORD PTR [eax]
c001f872:	85 c0                	test   eax,eax
c001f874:	74 36                	je     c001f8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f87d:	85 c0                	test   eax,eax
c001f87f:	74 2b                	je     c001f8ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f885:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f888:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f88c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f893:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f897:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8a8:	eb 6a                	jmp    c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8aa:	66 90                	xchg   ax,ax
c001f8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b2:	85 c0                	test   eax,eax
c001f8b4:	75 4e                	jne    c001f904 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8bd:	85 c0                	test   eax,eax
c001f8bf:	75 43                	jne    c001f904 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8c9:	89 10                	mov    DWORD PTR [eax],edx
c001f8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8eb:	85 c0                	test   eax,eax
c001f8ed:	74 25                	je     c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	68 2a 09 02 c0       	push   0xc002092a
c001f8f7:	e8 dd 18 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	eb 13                	jmp    c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f901:	8d 76 00             	lea    esi,[esi+0x0]
c001f904:	83 ec 0c             	sub    esp,0xc
c001f907:	68 34 09 02 c0       	push   0xc0020934
c001f90c:	e8 c8 18 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f911:	83 c4 10             	add    esp,0x10
c001f914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f918:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91b:	8d 50 01             	lea    edx,[eax+0x1]
c001f91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f922:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f925:	90                   	nop
c001f926:	83 c4 0c             	add    esp,0xc
c001f929:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f92c <ACPI::~ACPI()>:
c001f92c:	83 ec 0c             	sub    esp,0xc
c001f92f:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c001f934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f938:	89 10                	mov    DWORD PTR [eax],edx
c001f93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93e:	83 ec 0c             	sub    esp,0xc
c001f941:	50                   	push   eax
c001f942:	e8 f7 cb fe ff       	call   c000c53e <Device::~Device()>
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	90                   	nop
c001f94b:	83 c4 0c             	add    esp,0xc
c001f94e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f950 <ACPI::~ACPI()>:
c001f950:	83 ec 0c             	sub    esp,0xc
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f95a:	e8 cd ff ff ff       	call   c001f92c <ACPI::~ACPI()>
c001f95f:	83 c4 10             	add    esp,0x10
c001f962:	83 ec 08             	sub    esp,0x8
c001f965:	68 64 12 00 00       	push   0x1264
c001f96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f96e:	e8 99 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f973:	83 c4 10             	add    esp,0x10
c001f976:	83 c4 0c             	add    esp,0xc
c001f979:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f97c <LinkedList<Device>::~LinkedList()>:
c001f97c:	90                   	nop
c001f97d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f980 <LinkedList<Device>::isEmpty()>:
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	8b 00                	mov    eax,DWORD PTR [eax]
c001f986:	85 c0                	test   eax,eax
c001f988:	75 0e                	jne    c001f998 <LinkedList<Device>::isEmpty()+0x18>
c001f98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f991:	85 c0                	test   eax,eax
c001f993:	75 03                	jne    c001f998 <LinkedList<Device>::isEmpty()+0x18>
c001f995:	b0 01                	mov    al,0x1
c001f997:	c3                   	ret    
c001f998:	b0 00                	mov    al,0x0
c001f99a:	90                   	nop
c001f99b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f99c <LinkedList<Device>::getFirstElement()>:
c001f99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f9a4 <LinkedList<Device>::removeFirst()>:
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9ad:	85 c0                	test   eax,eax
c001f9af:	75 17                	jne    c001f9c8 <LinkedList<Device>::removeFirst()+0x24>
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	68 40 09 02 c0       	push   0xc0020940
c001f9b9:	e8 1b 18 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f9be:	83 c4 10             	add    esp,0x10
c001f9c1:	e9 92 00 00 00       	jmp    c001fa58 <LinkedList<Device>::removeFirst()+0xb4>
c001f9c6:	66 90                	xchg   ax,ax
c001f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9cf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9d5:	85 c0                	test   eax,eax
c001f9d7:	74 13                	je     c001f9ec <LinkedList<Device>::removeFirst()+0x48>
c001f9d9:	83 ec 0c             	sub    esp,0xc
c001f9dc:	68 8b 09 02 c0       	push   0xc002098b
c001f9e1:	e8 f3 17 ff ff       	call   c00111d9 <KePanic(char const*)>
c001f9e6:	83 c4 10             	add    esp,0x10
c001f9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9f2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9f8:	85 c0                	test   eax,eax
c001f9fa:	75 34                	jne    c001fa30 <LinkedList<Device>::removeFirst()+0x8c>
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa18:	83 f8 01             	cmp    eax,0x1
c001fa1b:	74 27                	je     c001fa44 <LinkedList<Device>::removeFirst()+0xa0>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	68 64 09 02 c0       	push   0xc0020964
c001fa25:	e8 af 17 ff ff       	call   c00111d9 <KePanic(char const*)>
c001fa2a:	83 c4 10             	add    esp,0x10
c001fa2d:	eb 15                	jmp    c001fa44 <LinkedList<Device>::removeFirst()+0xa0>
c001fa2f:	90                   	nop
c001fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa36:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa40:	89 10                	mov    DWORD PTR [eax],edx
c001fa42:	66 90                	xchg   ax,ax
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa4b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	8d 76 00             	lea    esi,[esi+0x0]
c001fa58:	83 c4 0c             	add    esp,0xc
c001fa5b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa5c <CPU::~CPU()>:
c001fa5c:	83 ec 0c             	sub    esp,0xc
c001fa5f:	ba 4c 1c 02 c0       	mov    edx,0xc0021c4c
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	89 10                	mov    DWORD PTR [eax],edx
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	50                   	push   eax
c001fa72:	e8 c7 ca fe ff       	call   c000c53e <Device::~Device()>
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	90                   	nop
c001fa7b:	83 c4 0c             	add    esp,0xc
c001fa7e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa80 <CPU::~CPU()>:
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa8a:	e8 cd ff ff ff       	call   c001fa5c <CPU::~CPU()>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	83 ec 08             	sub    esp,0x8
c001fa95:	68 94 11 00 00       	push   0x1194
c001fa9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa9e:	e8 69 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001faa3:	83 c4 10             	add    esp,0x10
c001faa6:	83 c4 0c             	add    esp,0xc
c001faa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001faac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001faac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fab0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fab3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fab4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fab4:	90                   	nop
c001fab5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fab8 <ThreadControlBlock::ThreadControlBlock()>:
c001fab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001faef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001faf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001faff:	90                   	nop
c001fb00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb44:	90                   	nop
c001fb45:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb46 <PCI::~PCI()>:
c001fb46:	83 ec 0c             	sub    esp,0xc
c001fb49:	ba 2c 2b 02 c0       	mov    edx,0xc0022b2c
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	89 10                	mov    DWORD PTR [eax],edx
c001fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	50                   	push   eax
c001fb5c:	e8 6f c4 fe ff       	call   c000bfd0 <Bus::~Bus()>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	90                   	nop
c001fb65:	83 c4 0c             	add    esp,0xc
c001fb68:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb6a <PCI::~PCI()>:
c001fb6a:	83 ec 0c             	sub    esp,0xc
c001fb6d:	83 ec 0c             	sub    esp,0xc
c001fb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb74:	e8 cd ff ff ff       	call   c001fb46 <PCI::~PCI()>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	83 ec 08             	sub    esp,0x8
c001fb7f:	68 5c 01 00 00       	push   0x15c
c001fb84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb88:	e8 7f ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	83 c4 0c             	add    esp,0xc
c001fb93:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb94 <IDE::~IDE()>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c001fb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba0:	89 10                	mov    DWORD PTR [eax],edx
c001fba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba6:	83 ec 0c             	sub    esp,0xc
c001fba9:	50                   	push   eax
c001fbaa:	e8 09 ce fe ff       	call   c000c9b8 <HardDiskController::~HardDiskController()>
c001fbaf:	83 c4 10             	add    esp,0x10
c001fbb2:	90                   	nop
c001fbb3:	83 c4 0c             	add    esp,0xc
c001fbb6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fbb8 <IDE::~IDE()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc2:	e8 cd ff ff ff       	call   c001fb94 <IDE::~IDE()>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	83 ec 08             	sub    esp,0x8
c001fbcd:	68 70 02 00 00       	push   0x270
c001fbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd6:	e8 31 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	83 c4 0c             	add    esp,0xc
c001fbe1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fbe2 <SATABus::~SATABus()>:
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	89 10                	mov    DWORD PTR [eax],edx
c001fbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	50                   	push   eax
c001fbf8:	e8 bb cd fe ff       	call   c000c9b8 <HardDiskController::~HardDiskController()>
c001fbfd:	83 c4 10             	add    esp,0x10
c001fc00:	90                   	nop
c001fc01:	83 c4 0c             	add    esp,0xc
c001fc04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fc06 <SATABus::~SATABus()>:
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	83 ec 0c             	sub    esp,0xc
c001fc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc10:	e8 cd ff ff ff       	call   c001fbe2 <SATABus::~SATABus()>
c001fc15:	83 c4 10             	add    esp,0x10
c001fc18:	83 ec 08             	sub    esp,0x8
c001fc1b:	68 64 01 00 00       	push   0x164
c001fc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc24:	e8 e3 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	83 c4 0c             	add    esp,0xc
c001fc2f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc30 <ATA::~ATA()>:
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	ba 70 2c 02 c0       	mov    edx,0xc0022c70
c001fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3c:	89 10                	mov    DWORD PTR [eax],edx
c001fc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc42:	83 ec 0c             	sub    esp,0xc
c001fc45:	50                   	push   eax
c001fc46:	e8 4f ce fe ff       	call   c000ca9a <PhysicalDisk::~PhysicalDisk()>
c001fc4b:	83 c4 10             	add    esp,0x10
c001fc4e:	90                   	nop
c001fc4f:	83 c4 0c             	add    esp,0xc
c001fc52:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc54 <ATA::~ATA()>:
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	83 ec 0c             	sub    esp,0xc
c001fc5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc5e:	e8 cd ff ff ff       	call   c001fc30 <ATA::~ATA()>
c001fc63:	83 c4 10             	add    esp,0x10
c001fc66:	83 ec 08             	sub    esp,0x8
c001fc69:	68 7c 01 00 00       	push   0x17c
c001fc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc72:	e8 95 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc77:	83 c4 10             	add    esp,0x10
c001fc7a:	83 c4 0c             	add    esp,0xc
c001fc7d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc7e <ATAPI::~ATAPI()>:
c001fc7e:	83 ec 0c             	sub    esp,0xc
c001fc81:	ba b8 2c 02 c0       	mov    edx,0xc0022cb8
c001fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8a:	89 10                	mov    DWORD PTR [eax],edx
c001fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc90:	83 ec 0c             	sub    esp,0xc
c001fc93:	50                   	push   eax
c001fc94:	e8 01 ce fe ff       	call   c000ca9a <PhysicalDisk::~PhysicalDisk()>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	90                   	nop
c001fc9d:	83 c4 0c             	add    esp,0xc
c001fca0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fca2 <ATAPI::~ATAPI()>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 ec 0c             	sub    esp,0xc
c001fca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcac:	e8 cd ff ff ff       	call   c001fc7e <ATAPI::~ATAPI()>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	83 ec 08             	sub    esp,0x8
c001fcb7:	68 84 01 00 00       	push   0x184
c001fcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc0:	e8 47 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	83 c4 0c             	add    esp,0xc
c001fccb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fccc <SATA::~SATA()>:
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001fcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd8:	89 10                	mov    DWORD PTR [eax],edx
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	83 ec 0c             	sub    esp,0xc
c001fce1:	50                   	push   eax
c001fce2:	e8 b3 cd fe ff       	call   c000ca9a <PhysicalDisk::~PhysicalDisk()>
c001fce7:	83 c4 10             	add    esp,0x10
c001fcea:	90                   	nop
c001fceb:	83 c4 0c             	add    esp,0xc
c001fcee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fcf0 <SATA::~SATA()>:
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	83 ec 0c             	sub    esp,0xc
c001fcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfa:	e8 cd ff ff ff       	call   c001fccc <SATA::~SATA()>
c001fcff:	83 c4 10             	add    esp,0x10
c001fd02:	83 ec 08             	sub    esp,0x8
c001fd05:	68 7c 01 00 00       	push   0x17c
c001fd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0e:	e8 f9 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	83 c4 0c             	add    esp,0xc
c001fd19:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fd1a <SATAPI::~SATAPI()>:
c001fd1a:	83 ec 0c             	sub    esp,0xc
c001fd1d:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	89 10                	mov    DWORD PTR [eax],edx
c001fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2c:	83 ec 0c             	sub    esp,0xc
c001fd2f:	50                   	push   eax
c001fd30:	e8 65 cd fe ff       	call   c000ca9a <PhysicalDisk::~PhysicalDisk()>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	90                   	nop
c001fd39:	83 c4 0c             	add    esp,0xc
c001fd3c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fd3e <SATAPI::~SATAPI()>:
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	83 ec 0c             	sub    esp,0xc
c001fd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd48:	e8 cd ff ff ff       	call   c001fd1a <SATAPI::~SATAPI()>
c001fd4d:	83 c4 10             	add    esp,0x10
c001fd50:	83 ec 08             	sub    esp,0x8
c001fd53:	68 84 01 00 00       	push   0x184
c001fd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5c:	e8 ab aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd61:	83 c4 10             	add    esp,0x10
c001fd64:	83 c4 0c             	add    esp,0xc
c001fd67:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd68 <IOAPIC::~IOAPIC()>:
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	89 10                	mov    DWORD PTR [eax],edx
c001fd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7a:	83 ec 0c             	sub    esp,0xc
c001fd7d:	50                   	push   eax
c001fd7e:	e8 bb c7 fe ff       	call   c000c53e <Device::~Device()>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	90                   	nop
c001fd87:	83 c4 0c             	add    esp,0xc
c001fd8a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd8c <IOAPIC::~IOAPIC()>:
c001fd8c:	83 ec 0c             	sub    esp,0xc
c001fd8f:	83 ec 0c             	sub    esp,0xc
c001fd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd96:	e8 cd ff ff ff       	call   c001fd68 <IOAPIC::~IOAPIC()>
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	83 ec 08             	sub    esp,0x8
c001fda1:	68 68 01 00 00       	push   0x168
c001fda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdaa:	e8 5d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	83 c4 0c             	add    esp,0xc
c001fdb5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fdb8 <APICTimer::~APICTimer()>:
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	89 10                	mov    DWORD PTR [eax],edx
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	50                   	push   eax
c001fdce:	e8 41 e2 fe ff       	call   c000e014 <Timer::~Timer()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	90                   	nop
c001fdd7:	83 c4 0c             	add    esp,0xc
c001fdda:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fddc <APICTimer::~APICTimer()>:
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde6:	e8 cd ff ff ff       	call   c001fdb8 <APICTimer::~APICTimer()>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	83 ec 08             	sub    esp,0x8
c001fdf1:	68 60 01 00 00       	push   0x160
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 0d aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 c4 0c             	add    esp,0xc
c001fe05:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fe08 <PIT::~PIT()>:
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	ba 68 2f 02 c0       	mov    edx,0xc0022f68
c001fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe14:	89 10                	mov    DWORD PTR [eax],edx
c001fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	50                   	push   eax
c001fe1e:	e8 f1 e1 fe ff       	call   c000e014 <Timer::~Timer()>
c001fe23:	83 c4 10             	add    esp,0x10
c001fe26:	90                   	nop
c001fe27:	83 c4 0c             	add    esp,0xc
c001fe2a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fe2c <PIT::~PIT()>:
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe36:	e8 cd ff ff ff       	call   c001fe08 <PIT::~PIT()>
c001fe3b:	83 c4 10             	add    esp,0x10
c001fe3e:	83 ec 08             	sub    esp,0x8
c001fe41:	68 5c 01 00 00       	push   0x15c
c001fe46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe4a:	e8 bd a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	83 c4 0c             	add    esp,0xc
c001fe55:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 7d 1d 02 c0       	mov    esi,0xc0021d7d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 99 1d 02 c0       	mov    esi,0xc0021d99
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
