
void Computer::start()
{
	lockScheduler();
	schedule();
	unlockScheduler();
	asm({0x73,0x74,0x69,});

	setBootMessage({0x53,0x74,0x61,0x72,0x74,0x69,0x6e,0x67,0x20,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x73,});

	Process* idleProcess = new Process(true, {0x49,0x64,0x6c,0x65,0x20,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,}, kernelProcess);
	idleProcess->createThread(idleFunction, nullptr, 255);

	cleanerThread = kernelProcess->createThread(cleanerTaskFunction, nullptr, 122);

	setBootMessage({0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x20,0x75,0x70,0x20,0x74,0x68,0x65,0x20,0x63,0x6c,0x6f,0x63,0x6b,});

	clock = setupClock();
	addChild(clock);
	clock->open(0, 0, nullptr);

	kprintf({0x52,0x54,0x43,0x4c,0x20,0x3d,0x20,0x30,0x78,0x25,0x58,0x20,0x28,0x25,0x64,0x29,0x5c,0x6e,}, (uint32_t) clock->timeInSecondsUTC(), sizeof(time_t));
	//kprintf({0x52,0x54,0x43,0x48,0x20,0x3d,0x20,0x30,0x78,0x25,0x58,0x5c,0x6e,}, (uint32_t) (clock->timeInSecondsUTC() >> 32));

	schedulingOn = true;

	setBootMessage({0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x20,0x75,0x70,0x20,0x74,0x68,0x65,0x20,0x66,0x69,0x6c,0x65,0x73,0x79,0x73,0x74,0x65,0x6d,});

	initVFS();
	setupSystemCalls();

	setBootMessage({0x4c,0x6f,0x61,0x64,0x69,0x6e,0x67,0x20,0x64,0x72,0x69,0x76,0x65,0x72,0x73,});
	root->open(0, 0, nullptr);

	setBootMessage({0x4c,0x6f,0x61,0x64,0x69,0x6e,0x67,0x20,0x73,0x79,0x6d,0x62,0x6f,0x6c,0x20,0x74,0x61,0x62,0x6c,0x65,});
	loadKernelSymbolTable({0x43,0x3a,0x2f,0x42,0x61,0x6e,0x61,0x6e,0x61,0x2f,0x53,0x79,0x73,0x74,0x65,0x6d,0x2f,0x4b,0x45,0x52,0x4e,0x45,0x4c,0x33,0x32,0x2e,0x45,0x58,0x45,});

	setBootMessage({0x43,0x72,0x65,0x61,0x74,0x69,0x6e,0x67,0x20,0x73,0x77,0x61,0x70,0x20,0x66,0x69,0x6c,0x65,});
	VirtMem::setupPageSwapping(1);

	setBootMessage({0x4c,0x6f,0x61,0x64,0x69,0x6e,0x67,0x20,0x64,0x72,0x69,0x76,0x65,0x72,0x73,});
	executeDLL(loadDLL({0x43,0x3a,0x2f,0x42,0x61,0x6e,0x61,0x6e,0x61,0x2f,0x44,0x72,0x69,0x76,0x65,0x72,0x73,0x2f,0x70,0x73,0x32,0x2e,0x73,0x79,0x73,}), computer);
	loadDriversForAll();

	//for each cpu
		//start it
		//cpu[i]->open(i, 0, nullptr);

	executeDLL(loadDLL({0x43,0x3a,0x2f,0x42,0x61,0x6e,0x61,0x6e,0x61,0x2f,0x53,0x79,0x73,0x74,0x65,0x6d,0x2f,0x73,0x79,0x73,0x74,0x65,0x6d,0x2e,0x64,0x6c,0x6c,}), computer);

	VgaText::hiddenOut = false;
	debugTerminal.showCursor(true);
	preemptionOn = true;

	Process* usertask = new Process({0x43,0x3a,0x2f,0x42,0x61,0x6e,0x61,0x6e,0x61,0x2f,0x53,0x79,0x73,0x74,0x65,0x6d,0x2f,0x63,0x6f,0x6d,0x6d,0x61,0x6e,0x64,0x2e,0x65,0x78,0x65,});
	setActiveTerminal(usertask->terminal);
	usertask->createUserThread();

	while (1) {
		blockTask(TaskState::Paused);
	}
}