void begin(void* a);
void start(void* a)
{
	begin(a);
}
char _STRDEA8_0MAI[] = ".";
char _STR887_1MAI[] = "..";
char _STR3C98_2MAI[] = "/";
char _STRC878_3MAI[] = "Couldn't open base path.\n";
char _STR9C8_4MAI[] = ".";
char _STR1596_5MAI[] = "..";
char _STRC6F3_6MAI[] = "/";
char _STR2B3E_7MAI[] = "/";
char _STRB7A5_8MAI[] = "%s -> %s\n";
char _STR760_9MAI[] = "COULD NOT CREATE";
char _STR3284_AMAI[] = "rb";
char _STR6CCC_BMAI[] = "COULD NOT COPY";
char _STR58A6_CMAI[] = "COULD NOT COPY";
char _STRC370_DMAI[] = "NO MEMORY";
char _STR2FFD_EMAI[] = "Couldn't open base path.\n";
char _STRB8B4_FMAI[] = ".";
char _STRFBDA_10MAI[] = "..";
char _STR5B3D_11MAI[] = "/";
char _STR582F_12MAI[] = "C:/Banana/System/Backup/";
char _STRD61E_13MAI[] = "0123456789ABCDEF";
char _STR31D3_14MAI[] = "backup: %s -> %s\n";
char _STR8384_15MAI[] = "C:/Users/";
char _STR6824_16MAI[] = "/Desktop";
char _STRB262_17MAI[] = "C:/Users/";
char _STRE8E9_18MAI[] = "/Documents";
char _STR5935_19MAI[] = "C:/Users/";
char _STR588C_1AMAI[] = "/Downloads";
char _STR95E0_1BMAI[] = "C:/Users/";
char _STRC76E_1CMAI[] = "/Photos";
char _STRF1E7_1DMAI[] = "C:/Users/";
char _STR6F40_1EMAI[] = "/Trash Bin";
char _STRF5E4_1FMAI[] = "C:/Users/";
char _STRB270_20MAI[] = "/Music";
char _STRE6AA_21MAI[] = "C:/Users/";
char _STRADCC_22MAI[] = "/Movies";
char _STR18D_23MAI[] = "C:/Banana/Registry/User/";
char _STR42B_24MAI[] = "C:/Banana/Registry/DefaultUser";
char _STRD193_25MAI[] = "Setting up the system for the first time";
char _STRF544_26MAI[] = "C:/Banana/Registry/System";
char _STR3628_27MAI[] = "C:/Banana/Registry/User";
char _STR7214_28MAI[] = "C:/Banana/Registry/System";
char _STR41C0_29MAI[] = "C:/Banana/Registry/User";
char _STRF2A8_2AMAI[] = "C:/Banana/Registry/DefaultSystem";
char _STRFB72_2BMAI[] = "C:/Banana/Registry/System";
char _STRE93A_2CMAI[] = "Alex";
char _STR40BA_2DMAI[] = "Loading extensions...";
char _STR8C9D_2EMAI[] = "C:/Banana/System/setupisd.one";
char _STR7041_2FMAI[] = "SYSINIT FAILURE";
char _STRB119_30MAI[] = "THIS IS THE FIRST RUN!!!\n";
char _STR4EC2_31MAI[] = "shell";
char _STR1B1C_32MAI[] = "playJingle";
char _STR667E_33MAI[] = "Backing up core files...";
char _STRBEF2_34MAI[] = "C:/Banana/Drivers/";
char _STR37A4_35MAI[] = "C:/Banana/System/";
char _STR7BBE_36MAI[] = "C:/Banana/Registry/";
char _STR5AB8_37MAI[] = "Alex";
char _STRF882_38MAI[] = "C:/Banana/System/command.exe";
char _STR9652_39MAI[] = "call";
char _STR9BFA_3AMAI[] = "C:/Banana/System/init.bat";
char _STRBE07_3BMAI[] = "C:/Banana/System/command.exe";
char _STR8B4E_3CMAI[] = "C:/Banana/System/command.exe";
char _STRDD6E_3DMAI[] = "shell";
char _STRE2F5_3EMAI[] = "autogui";
char _STR858A_3FMAI[] = "AUTO GUI.\n";

#include <stdint.h>


#include "main.hpp"

#include "core/main.hpp"
#include "core/computer.hpp"
#include "thr/elf.hpp"
#include "core/terminal.hpp"
#include "core/physmgr.hpp"
#include "reg/registry.hpp"
#include "thr/prcssthr.hpp"
#include "hal/buzzer.hpp"
#include "fs/vfs.hpp"

//MAIN SCRIPT


#define ACPI_SIZE size_t

int
memcmp(
    void* VBuffer1,
    void* VBuffer2,
    ACPI_SIZE               Count)
{
    char* Buffer1 = (char*) VBuffer1;
    char* Buffer2 = (char*) VBuffer2;


    for (; Count-- && (*Buffer1 == *Buffer2); Buffer1++, Buffer2++) {
    }

    return ((Count == ACPI_SIZE_MAX) ? 0 : ((unsigned char) *Buffer1 -
            (unsigned char) *Buffer2));
}

void*
memmove(
    void* Dest,
    const void* Src,
    ACPI_SIZE               Count)
{
    char* New = (char*) Dest;
    char* Old = (char*) Src;


    if (Old > New) {
        while (Count) {
            *New = *Old;
            New++;
            Old++;
            Count--;
        }
    } else if (Old < New) {
        New = New + Count - 1;
        Old = Old + Count - 1;
        while (Count) {
            *New = *Old;
            New--;
            Old--;
            Count--;
        }
    }

    return (Dest);
}


#include <stdint.h>
#include <stddef.h>


void*
memset(
    void* Dest,
    int                     Value,
    ACPI_SIZE               Count)
{
    char* New = (char*) Dest;


    while (Count) {
        *New = (char) Value;
        New++;
        Count--;
    }

    return (Dest);
}


ACPI_SIZE
strlen(
    const char* String)
{
    UINT32                  Length = 0;


    while (*String) {
        Length++;
        String++;
    }

    return (Length);
}


char*
strpbrk(
    const char* String,
    const char* Delimiters)
{
    const char* Delimiter;


    for (; *String != '\0'; ++String) {
        for (Delimiter = Delimiters; *Delimiter != '\0'; Delimiter++) {
            if (*String == *Delimiter) {
                return (ACPI_CAST_PTR(char, String));
            }
        }
    }

    return (NULL);
}

char* SavedPtr;
char*
strtok(
    char* String,
    const char* Delimiters)
{
    char* Begin = String;


    if (Begin == NULL) {
        if (SavedPtr == NULL) {
            return (NULL);
        }
        Begin = SavedPtr;
    }

    SavedPtr = strpbrk(Begin, Delimiters);
    while (SavedPtr == Begin) {
        *Begin++ = '\0';
        SavedPtr = strpbrk(Begin, Delimiters);
    }

    if (SavedPtr) {
        *SavedPtr++ = '\0';
        return (Begin);
    } else {
        return (NULL);
    }
}

char*
strcpy(
    char* DstString,
    const char* SrcString)
{
    char* String = DstString;

    while (*SrcString) {
        *String = *SrcString;

        String++;
        SrcString++;
    }

    *String = 0;
    return (DstString);
}

char*
strncpy(
    char* DstString,
    const char* SrcString,
    ACPI_SIZE               Count)
{
    char* String = DstString;


    for (String = DstString;
         Count && (Count--, (*String++ = *SrcString++)); ) {
        ;
    }

    while (Count--) {
        *String = 0;
        String++;
    }

    return (DstString);
}

int
strcmp(
    const char* String1,
    const char* String2)
{


    for (; (*String1 == *String2); String2++) {
        if (!*String1++) {
            return (0);
        }
    }

    return ((unsigned char) *String1 - (unsigned char) *String2);
}

char*
strchr(
    const char* String,
    int                     ch)
{


    for (; (*String); String++) {
        if ((*String) == (char) ch) {
            return ((char*) String);
        }
    }

    return (NULL);
}

int
strncmp(
    const char* String1,
    const char* String2,
    ACPI_SIZE               Count)
{


    for (; Count-- && (*String1 == *String2); String2++) {
        if (!*String1++) {
            return (0);
        }
    }

    return ((Count == ACPI_SIZE_MAX) ? 0 : ((unsigned char) *String1 -
            (unsigned char) *String2));
}

char*
strcat(
    char* DstString,
    const char* SrcString)
{
    char* String;

    for (String = DstString; *String++; ) {
        ;
    }

    for (--String; (*String++ = *SrcString++); ) {
        ;
    }

    return (DstString);
}

char*
strncat(
    char* DstString,
    const char* SrcString,
    ACPI_SIZE               Count)
{
    char* String;


    if (Count) {
        for (String = DstString; *String++; ) {
            ;
        }

        for (--String; (*String++ = *SrcString++) && --Count; ) {
            ;
        }

        if (!Count) {
            *String = 0;
        }
    }

    return (DstString);
}


char*
strstr(
    char* String1,
    char* String2)
{
    ACPI_SIZE               Length;


    Length = strlen(String2);
    if (!Length) {
        return (String1);
    }

    while (strlen(String1) >= Length) {
        if (memcmp(String1, String2, Length) == 0) {
            return (String1);
        }
        String1++;
    }

    return (NULL);
}


void rmtree(char* basePath)
{
	char path[300];
	memset(path, 0, 300);

	struct dirent _dp;
	struct dirent* dp = &_dp;

	int br;
	Directory* dir = new Directory(basePath, currentTaskTCB->processRelatedTo);
	FileStatus openstatus = dir->open();
	
	if (openstatus != FileStatus::Success) {
		delete dir;
		return;
	}

	while (1) {
		FileStatus st = dir->read(sizeof(struct dirent), dp, &br);
		if (st != FileStatus::Success) {
			break;
		}

		if (strcmp(dp->d_name, _STRDEA8_0MAI) != 0 && strcmp(dp->d_name, _STR887_1MAI) != 0) {
			if (dp->d_type & DT_DIR) {
				rmtree(path);
			} else {
				strcpy(path, basePath);
				strcat(path, _STR3C98_2MAI);
				strcat(path, dp->d_name);

				File* f = new File(path, currentTaskTCB->processRelatedTo);
				f->unlink();
				delete f;
			}
		}
	}

	dir->close();
	dir->unlink();
	delete dir;
}

int mkdir(const char* path, int permissions)
{
    Directory* d = new Directory(path, kernelProcess);
    d->create();
    delete d;

    return 0;
}


void copytree(char* basePath, char* newPath)
{
    char* path = (char*) malloc(400);
    char* npath = (char*) malloc(400);
    memset(path, 0, 400);
    memset(npath, 0, 400);

    struct dirent _dp;
    struct dirent* dp = &_dp;

    int br;
    Directory* dir = new Directory(basePath, currentTaskTCB->processRelatedTo);
    FileStatus openstatus = dir->open();
    if (openstatus != FileStatus::Success) {
        kprintf(_STRC878_3MAI);
        delete dir;
        return;
    }

    while (1) {
        FileStatus st = dir->read(sizeof(struct dirent), dp, &br);
        if (st != FileStatus::Success) {
            break;
        }

        if (strcmp(dp->d_name, _STRDEA8_0MAI) != 0 && strcmp(dp->d_name, _STR887_1MAI) != 0) {
            strcpy(path, basePath);
            strcat(path, _STR3C98_2MAI);
            strcat(path, dp->d_name);

            strcpy(npath, newPath);
            strcat(npath, _STR3C98_2MAI);
            strcat(npath, dp->d_name);

            kprintf(_STRB7A5_8MAI, path, npath);

            if (dp->d_type & DT_DIR) {
                int mres = mkdir(npath, 0700);
                if (mres != 0) {
                    panic(_STR760_9MAI);
                } else {
                    copytree(path, npath);
                }

            } else {
                File* f = new File(path, currentTaskTCB->processRelatedTo); //fopen(path, _STR3284_AMAI);
                f->open(FILE_OPEN_READ);
                if (!f) {
                    panic(_STR6CCC_BMAI);
                    continue;
                }

                if (f) {
                    File* dest = new File(npath, currentTaskTCB->processRelatedTo);
                    f->open(FILE_OPEN_WRITE_NORMAL);
                    if (!dest) {
                        panic(_STR6CCC_BMAI);
                        f->close();
                        continue;
                    }

                    char* m = (char*) malloc(4096);
                    if (!m) {
                        panic(_STRC370_DMAI);
                        free(path);
                        free(npath);
                        return;
                    }
                    while (1) {
                        //read(uint64_t bytes, void* where, int* bytesRead)

                        int red;
                        int red2;
                        FileStatus st = f->read(4096, m, &red);
                        if (st != FileStatus::Success) {
                            break;
                        }
                        f->write(red, m, &red2);
                        if (red != 4096) {
                            break;
                        }
                    }
                    free(m);

                    f->close();
                    dest->close();
                    delete f;
                    delete dest;
                }
            }
        }
    }

    free(path);
    free(npath);

    dir->close();
    delete dir;
}

void backupTree(char* basePath, uint16_t hash)
{
	char* path = (char*) malloc(400);
    memset(path, 0, 400);

    struct dirent _dp;
    struct dirent* dp = &_dp;
	
    int br;
    Directory* dir = new Directory(basePath, currentTaskTCB->processRelatedTo);
    FileStatus openstatus = dir->open();
    if (openstatus != FileStatus::Success) {
        kprintf(_STRC878_3MAI);
        delete dir;
        return;
    }

	while (1) {
        FileStatus st = dir->read(sizeof(struct dirent), dp, &br);
		if (st != FileStatus::Success) {
			break;
		}

		if (strcmp(dp->d_name, _STRDEA8_0MAI) != 0 && strcmp(dp->d_name, _STR887_1MAI) != 0) {
			strcpy(path, basePath);
			strcat(path, _STR3C98_2MAI);
			strcat(path, dp->d_name);

			if (dp->d_type & DT_DIR) {

                uint16_t newHash = 0xADBC;

                for (int i = 0; dp->d_name[i]; ++i) {
                    newHash ^= dp->d_name[i];
                    newHash = (newHash << 3) | (newHash >> 13);
                    newHash -= 1777;
                }

				backupTree(path, newHash);

            } else {

                char bkupPath[256];
                char s[2];
                s[1] = 0;

                strcpy(bkupPath, _STR582F_12MAI);

                s[0] = basePath[10];
                strcat(bkupPath, s);

                char ss[9];
                memset(ss, 0, 9);
                strncpy(ss, dp->d_name, 8);
                for (int i = 0; i < 8; ++i) {
                    if (ss[i] >= 'a' && ss[i] <= 'z') ss[i] -= 32;
                    if (ss[i] == ' ') ss[i] = 'Z';
                }
                strcat(bkupPath, ss);

                s[0] = 'A' + strlen(dp->d_name);
                strcat(bkupPath, s);

                char aa[17] = _STRD61E_13MAI;
                s[0] = aa[(hash >> 0) & 0xF];
                strcat(bkupPath, s);
                s[0] = aa[(hash >> 4) & 0xF];
                strcat(bkupPath, s);
                s[0] = aa[(hash >> 8) & 0xF];
                strcat(bkupPath, s);
                s[0] = aa[(hash >> 12) & 0xF];
                strcat(bkupPath, s);

                kprintf(_STR31D3_14MAI, path, bkupPath);

            }
		}
	}

	free(path);

	dir->close();
    delete dir;
}

void createUser(const char* name)
{
    char path[256];
    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    mkdir(path, 0700);
    
    strcat(path, _STR6824_16MAI);
    mkdir(path, 0700);

    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    strcat(path, _STRE8E9_18MAI);
    mkdir(path, 0700);

    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    strcat(path, _STR588C_1AMAI);
    mkdir(path, 0700);

    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    strcat(path, _STRC76E_1CMAI);
    mkdir(path, 0700);

    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    strcat(path, _STR6F40_1EMAI);
    mkdir(path, 0700);

    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    strcat(path, _STRB270_20MAI);
    mkdir(path, 0700);

    strcpy(path, _STR8384_15MAI);
    strcat(path, name);
    strcat(path, _STRADCC_22MAI);
    mkdir(path, 0700);

    strcpy(path, _STR18D_23MAI);
    strcat(path, name);
    mkdir(path, 0700);

    copytree(_STR42B_24MAI, path);
}

void firstRun()
{
	computer->setBootMessage(_STRD193_25MAI);

	rmtree(_STRF544_26MAI);
	rmtree(_STR3628_27MAI);
	mkdir(_STRF544_26MAI, 0700);
	mkdir(_STR3628_27MAI, 0700);
	copytree(_STRF2A8_2AMAI, _STRF544_26MAI);

    createUser(_STRE93A_2CMAI);
}

void loadExtensions()
{
    Krnl::setBootMessage(_STR40BA_2DMAI);
}

void playJingle(void* context)
{
    unlockScheduler();

    systemBuzzer->beep(131, 400);
    systemBuzzer->beep(175, 400);
    systemBuzzer->beep(247, 400);
    systemBuzzer->beep(330, 400);
    systemBuzzer->beep(440, 400);
    systemBuzzer->beep(587, 400);
    systemBuzzer->beep(784, 400);
    systemBuzzer->beep(698, 400);
    systemBuzzer->beep(659, 800);
    systemBuzzer->stop();

    terminateTask(0);
}

void begin(void* a)
{
    bool firstTime = false;

    File* f = new File(_STR8C9D_2EMAI, kernelProcess);
    if (!f) {
        panic(_STR7041_2FMAI);
    }
    FileStatus fs = f->open(FileOpenMode::Read);

    if (fs == FileStatus::Success) {
        f->close();
    } else {
        firstTime = true; 
    }
    delete f;

    if (firstTime) {
        kprintf(_STRB119_30MAI);
        //firstRun();

    } else {
        if (Reg::readBoolWithDefault(_STR4EC2_31MAI, _STR1B1C_32MAI, true)) {
            //kernelProcess->createThread(playJingle);
        }        

        loadExtensions();
    }

    if (firstTime) {
        Krnl::setBootMessage(_STR667E_33MAI);
        backupTree(_STRBEF2_34MAI, 0xDDDD);
        backupTree(_STR37A4_35MAI, 0xEEEE);
        backupTree(_STR7BBE_36MAI, 0xFFFF);
    }

    VgaText::hiddenOut = false;
    Krnl::preemptionOn = true;

    Process* usertask;
    
    if (firstTime) {
        //createUser(_STRE93A_2CMAI);
        char* argv[] = { _STRF882_38MAI, _STR9652_39MAI, _STR9BFA_3AMAI, 0 };
        usertask = new Process(_STRF882_38MAI, nullptr, argv);
    } else {
        usertask = new Process(_STRF882_38MAI);
    }
    setActiveTerminal(usertask->terminal);

    usertask->createUserThread();

    if (!firstTime) {
        int autogui = Reg::readIntWithDefault((char*) _STR4EC2_31MAI, (char*) _STRE2F5_3EMAI, 0);

        extern void startGUIVESA(void* a);
        if (autogui) {
            kprintf(_STR858A_3FMAI);
            startGUIVESA(nullptr);
        }
    }
    

    int wstatus;
    waitTask(usertask->pid, &wstatus, 0);

    computer->close(0, 0, nullptr);
}