
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 10 40 00 10       	push   0x10004010	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 12 40 00 10       	push   0x10004012	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 15 40 00 10       	push   0x10004015	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 17 40 00 10       	push   0x10004017	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 10 40 00 10       	push   0x10004010	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 12 40 00 10       	push   0x10004012	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 15 40 00 10       	push   0x10004015	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 15 40 00 10       	push   0x10004015	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 31 40 00 10       	push   0x10004031	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 3b 40 00 10       	push   0x1000403b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 4c 40 00 10       	push   0x1000404c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 4c 40 00 10       	push   0x1000404c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 5b 40 00 10       	push   0x1000405b	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 17 40 00 10       	push   0x10004017	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 10 40 00 10       	push   0x10004010	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 12 40 00 10       	push   0x10004012	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 15 40 00 10       	push   0x10004015	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 65 40 00 10       	push   0x10004065	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 6c 40 00 10       	push   0x1000406c	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 10 40 00 10       	push   0x10004010	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 85 40 00 10       	mov    ebx,0x10004085	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 4c 40 00 10       	push   0x1000404c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 4c 40 00 10       	push   0x1000404c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 96 40 00 10       	push   0x10004096	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 a0 40 00 10       	push   0x100040a0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 96 40 00 10       	push   0x10004096	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 a9 40 00 10       	push   0x100040a9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 96 40 00 10       	push   0x10004096	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 b4 40 00 10       	push   0x100040b4	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 96 40 00 10       	push   0x10004096	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 bf 40 00 10       	push   0x100040bf	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 96 40 00 10       	push   0x10004096	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 c7 40 00 10       	push   0x100040c7	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 96 40 00 10       	push   0x10004096	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 d2 40 00 10       	push   0x100040d2	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 96 40 00 10       	push   0x10004096	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 d9 40 00 10       	push   0x100040d9	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 e1 40 00 10       	push   0x100040e1	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 fc 40 00 10       	push   0x100040fc	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 1b 41 00 10       	push   0x1000411b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001567:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000156b:	7f 41                	jg     100015ae <drawBootScreen()+0x102>
1000156d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000156e: R_386_32	term
10001572:	83 ec 04             	sub    esp,0x4
10001575:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001578:	6a 00                	push   0x0
1000157a:	50                   	push   eax
1000157b:	e8 fc ff ff ff       	call   1000157c <drawBootScreen()+0xd0>	1000157c: R_386_PC32	VgaText::setCursor(int, int)
10001580:	83 c4 10             	add    esp,0x10
10001583:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000158a:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000158e:	7f 19                	jg     100015a9 <drawBootScreen()+0xfd>
10001590:	a1 00 00 00 00       	mov    eax,ds:0x0	10001591: R_386_32	term
10001595:	6a 00                	push   0x0
10001597:	6a 00                	push   0x0
10001599:	6a 20                	push   0x20
1000159b:	50                   	push   eax
1000159c:	e8 fc ff ff ff       	call   1000159d <drawBootScreen()+0xf1>	1000159d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015a1:	83 c4 10             	add    esp,0x10
100015a4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015a7:	eb e1                	jmp    1000158a <drawBootScreen()+0xde>
100015a9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ac:	eb b9                	jmp    10001567 <drawBootScreen()+0xbb>
100015ae:	a1 00 00 00 00       	mov    eax,ds:0x0	100015af: R_386_32	term
100015b3:	83 ec 04             	sub    esp,0x4
100015b6:	6a 01                	push   0x1
100015b8:	6a 01                	push   0x1
100015ba:	50                   	push   eax
100015bb:	e8 fc ff ff ff       	call   100015bc <drawBootScreen()+0x110>	100015bc: R_386_PC32	VgaText::setCursor(int, int)
100015c0:	83 c4 10             	add    esp,0x10
100015c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100015c4: R_386_32	term
100015c8:	6a 00                	push   0x0
100015ca:	6a 0f                	push   0xf
100015cc:	68 1c 41 00 10       	push   0x1000411c	100015cd: R_386_32	.text
100015d1:	50                   	push   eax
100015d2:	e8 fc ff ff ff       	call   100015d3 <drawBootScreen()+0x127>	100015d3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015d7:	83 c4 10             	add    esp,0x10
100015da:	a1 00 00 00 00       	mov    eax,ds:0x0	100015db: R_386_32	term
100015df:	6a 00                	push   0x0
100015e1:	6a 0e                	push   0xe
100015e3:	68 9f 41 00 10       	push   0x1000419f	100015e4: R_386_32	.text
100015e8:	50                   	push   eax
100015e9:	e8 fc ff ff ff       	call   100015ea <drawBootScreen()+0x13e>	100015ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015ee:	83 c4 10             	add    esp,0x10
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	83 ec 08             	sub    esp,0x8
100015f9:	6a 0f                	push   0xf
100015fb:	50                   	push   eax
100015fc:	e8 fc ff ff ff       	call   100015fd <drawBootScreen()+0x151>	100015fd: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001601:	83 c4 10             	add    esp,0x10
10001604:	a1 00 00 00 00       	mov    eax,ds:0x0	10001605: R_386_32	term
10001609:	83 ec 08             	sub    esp,0x8
1000160c:	6a 00                	push   0x0
1000160e:	50                   	push   eax
1000160f:	e8 fc ff ff ff       	call   10001610 <drawBootScreen()+0x164>	10001610: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001614:	83 c4 10             	add    esp,0x10
10001617:	90                   	nop
10001618:	c9                   	leave  
10001619:	c3                   	ret    

1000161a <drawBasicWindowX(int, int, int, int, char const*, bool)>:
1000161a:	55                   	push   ebp
1000161b:	89 e5                	mov    ebp,esp
1000161d:	53                   	push   ebx
1000161e:	83 ec 34             	sub    esp,0x34
10001621:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001624:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001627:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000162a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001634:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001637:	7d 6c                	jge    100016a5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001639:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163a: R_386_32	term
1000163e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001641:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001644:	01 ca                	add    edx,ecx
10001646:	83 ec 04             	sub    esp,0x4
10001649:	52                   	push   edx
1000164a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000164d:	50                   	push   eax
1000164e:	e8 fc ff ff ff       	call   1000164f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000164f: R_386_PC32	VgaText::setCursor(int, int)
10001653:	83 c4 10             	add    esp,0x10
10001656:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000165d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001660:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001663:	7d 3b                	jge    100016a0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001665:	a1 00 00 00 00       	mov    eax,ds:0x0	10001666: R_386_32	term
1000166a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000166e:	74 07                	je     10001677 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
10001670:	b9 07 00 00 00       	mov    ecx,0x7
10001675:	eb 05                	jmp    1000167c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001677:	b9 0f 00 00 00       	mov    ecx,0xf
1000167c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
10001680:	74 07                	je     10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
10001682:	ba 07 00 00 00       	mov    edx,0x7
10001687:	eb 05                	jmp    1000168e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001689:	ba 0f 00 00 00       	mov    edx,0xf
1000168e:	51                   	push   ecx
1000168f:	52                   	push   edx
10001690:	6a 20                	push   0x20
10001692:	50                   	push   eax
10001693:	e8 fc ff ff ff       	call   10001694 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	10001694: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001698:	83 c4 10             	add    esp,0x10
1000169b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000169e:	eb bd                	jmp    1000165d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016a3:	eb 8c                	jmp    10001631 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100016a6: R_386_32	term
100016aa:	83 ec 04             	sub    esp,0x4
100016ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016b3:	50                   	push   eax
100016b4:	e8 fc ff ff ff       	call   100016b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016b5: R_386_PC32	VgaText::setCursor(int, int)
100016b9:	83 c4 10             	add    esp,0x10
100016bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016c6:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016c9:	7d 19                	jge    100016e4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100016cc: R_386_32	term
100016d0:	6a 01                	push   0x1
100016d2:	6a 01                	push   0x1
100016d4:	6a 20                	push   0x20
100016d6:	50                   	push   eax
100016d7:	e8 fc ff ff ff       	call   100016d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016d8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016dc:	83 c4 10             	add    esp,0x10
100016df:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016e2:	eb df                	jmp    100016c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100016e5: R_386_32	term
100016e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016ec:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016ef:	01 d1                	add    ecx,edx
100016f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016f4:	42                   	inc    edx
100016f5:	83 ec 04             	sub    esp,0x4
100016f8:	51                   	push   ecx
100016f9:	52                   	push   edx
100016fa:	50                   	push   eax
100016fb:	e8 fc ff ff ff       	call   100016fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	100016fc: R_386_PC32	VgaText::setCursor(int, int)
10001700:	83 c4 10             	add    esp,0x10
10001703:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
1000170a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000170d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001710:	7d 19                	jge    1000172b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
10001712:	a1 00 00 00 00       	mov    eax,ds:0x0	10001713: R_386_32	term
10001717:	6a 03                	push   0x3
10001719:	6a 03                	push   0x3
1000171b:	6a 20                	push   0x20
1000171d:	50                   	push   eax
1000171e:	e8 fc ff ff ff       	call   1000171f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000171f: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001723:	83 c4 10             	add    esp,0x10
10001726:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001729:	eb df                	jmp    1000170a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
1000172b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000172e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001731:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001734:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001737:	01 d0                	add    eax,edx
10001739:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
1000173c:	0f 8d 89 00 00 00    	jge    100017cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
10001742:	a1 00 00 00 00       	mov    eax,ds:0x0	10001743: R_386_32	term
10001747:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000174a:	8d 4a 01             	lea    ecx,[edx+0x1]
1000174d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10001750:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001753:	01 da                	add    edx,ebx
10001755:	83 ec 04             	sub    esp,0x4
10001758:	51                   	push   ecx
10001759:	52                   	push   edx
1000175a:	50                   	push   eax
1000175b:	e8 fc ff ff ff       	call   1000175c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	1000175c: R_386_PC32	VgaText::setCursor(int, int)
10001760:	83 c4 10             	add    esp,0x10
10001763:	a1 00 00 00 00       	mov    eax,ds:0x0	10001764: R_386_32	term
10001768:	6a 03                	push   0x3
1000176a:	6a 03                	push   0x3
1000176c:	6a 20                	push   0x20
1000176e:	50                   	push   eax
1000176f:	e8 fc ff ff ff       	call   10001770 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	10001770: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001774:	83 c4 10             	add    esp,0x10
10001777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000177a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000177d:	01 d0                	add    eax,edx
1000177f:	48                   	dec    eax
10001780:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001783:	74 3e                	je     100017c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001785:	a1 00 00 00 00       	mov    eax,ds:0x0	10001786: R_386_32	term
1000178a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000178d:	42                   	inc    edx
1000178e:	83 ec 04             	sub    esp,0x4
10001791:	52                   	push   edx
10001792:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001795:	50                   	push   eax
10001796:	e8 fc ff ff ff       	call   10001797 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	10001797: R_386_PC32	VgaText::setCursor(int, int)
1000179b:	83 c4 10             	add    esp,0x10
1000179e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000179f: R_386_32	term
100017a3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017a7:	74 07                	je     100017b0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017a9:	ba 07 00 00 00       	mov    edx,0x7
100017ae:	eb 05                	jmp    100017b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017b0:	ba 0f 00 00 00       	mov    edx,0xf
100017b5:	52                   	push   edx
100017b6:	6a 00                	push   0x0
100017b8:	6a dd                	push   0xffffffdd
100017ba:	50                   	push   eax
100017bb:	e8 fc ff ff ff       	call   100017bc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017bc: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017c0:	83 c4 10             	add    esp,0x10
100017c3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017c6:	e9 66 ff ff ff       	jmp    10001731 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017cb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017ce:	83 ec 0c             	sub    esp,0xc
100017d1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017d4:	e8 fc ff ff ff       	call   100017d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017d5: R_386_PC32	strlen
100017d9:	83 c4 10             	add    esp,0x10
100017dc:	29 c3                	sub    ebx,eax
100017de:	89 d8                	mov    eax,ebx
100017e0:	d1 e8                	shr    eax,1
100017e2:	48                   	dec    eax
100017e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100017e7: R_386_32	term
100017eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017ee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017f1:	01 ca                	add    edx,ecx
100017f3:	83 ec 04             	sub    esp,0x4
100017f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017f9:	52                   	push   edx
100017fa:	50                   	push   eax
100017fb:	e8 fc ff ff ff       	call   100017fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	100017fc: R_386_PC32	VgaText::setCursor(int, int)
10001800:	83 c4 10             	add    esp,0x10
10001803:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000180a:	83 ec 0c             	sub    esp,0xc
1000180d:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001810:	e8 fc ff ff ff       	call   10001811 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	10001811: R_386_PC32	strlen
10001815:	83 c4 10             	add    esp,0x10
10001818:	89 c2                	mov    edx,eax
1000181a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000181d:	39 c2                	cmp    edx,eax
1000181f:	76 25                	jbe    10001846 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
10001821:	a1 00 00 00 00       	mov    eax,ds:0x0	10001822: R_386_32	term
10001826:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001829:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000182c:	01 ca                	add    edx,ecx
1000182e:	8a 12                	mov    dl,BYTE PTR [edx]
10001830:	0f be d2             	movsx  edx,dl
10001833:	6a 01                	push   0x1
10001835:	6a 0f                	push   0xf
10001837:	52                   	push   edx
10001838:	50                   	push   eax
10001839:	e8 fc ff ff ff       	call   1000183a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	1000183a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000183e:	83 c4 10             	add    esp,0x10
10001841:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001844:	eb c4                	jmp    1000180a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001846:	90                   	nop
10001847:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000184a:	c9                   	leave  
1000184b:	c3                   	ret    

1000184c <drawBasicWindow(int, int, int, int, char const*)>:
1000184c:	55                   	push   ebp
1000184d:	89 e5                	mov    ebp,esp
1000184f:	83 ec 08             	sub    esp,0x8
10001852:	83 ec 08             	sub    esp,0x8
10001855:	6a 00                	push   0x0
10001857:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000185a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000185d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10001860:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001866:	e8 fc ff ff ff       	call   10001867 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001867: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
1000186b:	83 c4 20             	add    esp,0x20
1000186e:	90                   	nop
1000186f:	c9                   	leave  
10001870:	c3                   	ret    

10001871 <bootInstallKeybrd(KeyboardToken, bool*)>:
10001871:	55                   	push   ebp
10001872:	89 e5                	mov    ebp,esp
10001874:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001877:	05 04 01 00 00       	add    eax,0x104
1000187c:	8a 00                	mov    al,BYTE PTR [eax]
1000187e:	84 c0                	test   al,al
10001880:	74 12                	je     10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
10001882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001885:	66 83 f8 09          	cmp    ax,0x9
10001889:	75 09                	jne    10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
1000188b:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000188d: R_386_32	installKey
10001892:	eb 36                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
10001894:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
10001897:	84 c0                	test   al,al
10001899:	75 2e                	jne    100018c9 <bootInstallKeybrd(KeyboardToken, bool*)+0x58>
1000189b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000189e:	66 3d 0d 02          	cmp    ax,0x20d
100018a2:	75 09                	jne    100018ad <bootInstallKeybrd(KeyboardToken, bool*)+0x3c>
100018a4:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018a6: R_386_32	installKey
100018ab:	eb 1d                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b0:	66 3d 0e 02          	cmp    ax,0x20e
100018b4:	75 09                	jne    100018bf <bootInstallKeybrd(KeyboardToken, bool*)+0x4e>
100018b6:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018b8: R_386_32	installKey
100018bd:	eb 0b                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c2:	a2 00 00 00 00       	mov    ds:0x0,al	100018c3: R_386_32	installKey
100018c7:	eb 01                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018c9:	90                   	nop
100018ca:	5d                   	pop    ebp
100018cb:	c3                   	ret    

100018cc <bootInstallTasks(int)>:
100018cc:	55                   	push   ebp
100018cd:	89 e5                	mov    ebp,esp
100018cf:	83 ec 08             	sub    esp,0x8
100018d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100018d3: R_386_32	term
100018d7:	83 ec 04             	sub    esp,0x4
100018da:	6a 08                	push   0x8
100018dc:	6a 18                	push   0x18
100018de:	50                   	push   eax
100018df:	e8 fc ff ff ff       	call   100018e0 <bootInstallTasks(int)+0x14>	100018e0: R_386_PC32	VgaText::setCursor(int, int)
100018e4:	83 c4 10             	add    esp,0x10
100018e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100018e8: R_386_32	term
100018ec:	83 ec 08             	sub    esp,0x8
100018ef:	68 c0 41 00 10       	push   0x100041c0	100018f0: R_386_32	.text
100018f4:	50                   	push   eax
100018f5:	e8 fc ff ff ff       	call   100018f6 <bootInstallTasks(int)+0x2a>	100018f6: R_386_PC32	VgaText::puts(char const*)
100018fa:	83 c4 10             	add    esp,0x10
100018fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100018fe: R_386_32	term
10001902:	83 ec 04             	sub    esp,0x4
10001905:	6a 0a                	push   0xa
10001907:	6a 1a                	push   0x1a
10001909:	50                   	push   eax
1000190a:	e8 fc ff ff ff       	call   1000190b <bootInstallTasks(int)+0x3f>	1000190b: R_386_PC32	VgaText::setCursor(int, int)
1000190f:	83 c4 10             	add    esp,0x10
10001912:	a1 00 00 00 00       	mov    eax,ds:0x0	10001913: R_386_32	term
10001917:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000191b:	75 07                	jne    10001924 <bootInstallTasks(int)+0x58>
1000191d:	ba e8 41 00 10       	mov    edx,0x100041e8	1000191e: R_386_32	.text
10001922:	eb 05                	jmp    10001929 <bootInstallTasks(int)+0x5d>
10001924:	ba eb 41 00 10       	mov    edx,0x100041eb	10001925: R_386_32	.text
10001929:	83 ec 08             	sub    esp,0x8
1000192c:	52                   	push   edx
1000192d:	50                   	push   eax
1000192e:	e8 fc ff ff ff       	call   1000192f <bootInstallTasks(int)+0x63>	1000192f: R_386_PC32	VgaText::puts(char const*)
10001933:	83 c4 10             	add    esp,0x10
10001936:	a1 00 00 00 00       	mov    eax,ds:0x0	10001937: R_386_32	term
1000193b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000193f:	78 07                	js     10001948 <bootInstallTasks(int)+0x7c>
10001941:	ba 00 00 00 00       	mov    edx,0x0
10001946:	eb 05                	jmp    1000194d <bootInstallTasks(int)+0x81>
10001948:	ba 07 00 00 00       	mov    edx,0x7
1000194d:	6a 0f                	push   0xf
1000194f:	52                   	push   edx
10001950:	68 ee 41 00 10       	push   0x100041ee	10001951: R_386_32	.text
10001955:	50                   	push   eax
10001956:	e8 fc ff ff ff       	call   10001957 <bootInstallTasks(int)+0x8b>	10001957: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000195b:	83 c4 10             	add    esp,0x10
1000195e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000195f: R_386_32	term
10001963:	83 ec 04             	sub    esp,0x4
10001966:	6a 0b                	push   0xb
10001968:	6a 1a                	push   0x1a
1000196a:	50                   	push   eax
1000196b:	e8 fc ff ff ff       	call   1000196c <bootInstallTasks(int)+0xa0>	1000196c: R_386_PC32	VgaText::setCursor(int, int)
10001970:	83 c4 10             	add    esp,0x10
10001973:	a1 00 00 00 00       	mov    eax,ds:0x0	10001974: R_386_32	term
10001978:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
1000197c:	75 07                	jne    10001985 <bootInstallTasks(int)+0xb9>
1000197e:	ba e8 41 00 10       	mov    edx,0x100041e8	1000197f: R_386_32	.text
10001983:	eb 05                	jmp    1000198a <bootInstallTasks(int)+0xbe>
10001985:	ba eb 41 00 10       	mov    edx,0x100041eb	10001986: R_386_32	.text
1000198a:	83 ec 08             	sub    esp,0x8
1000198d:	52                   	push   edx
1000198e:	50                   	push   eax
1000198f:	e8 fc ff ff ff       	call   10001990 <bootInstallTasks(int)+0xc4>	10001990: R_386_PC32	VgaText::puts(char const*)
10001994:	83 c4 10             	add    esp,0x10
10001997:	a1 00 00 00 00       	mov    eax,ds:0x0	10001998: R_386_32	term
1000199c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019a0:	7e 07                	jle    100019a9 <bootInstallTasks(int)+0xdd>
100019a2:	ba 00 00 00 00       	mov    edx,0x0
100019a7:	eb 05                	jmp    100019ae <bootInstallTasks(int)+0xe2>
100019a9:	ba 07 00 00 00       	mov    edx,0x7
100019ae:	6a 0f                	push   0xf
100019b0:	52                   	push   edx
100019b1:	68 06 42 00 10       	push   0x10004206	100019b2: R_386_32	.text
100019b6:	50                   	push   eax
100019b7:	e8 fc ff ff ff       	call   100019b8 <bootInstallTasks(int)+0xec>	100019b8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019bc:	83 c4 10             	add    esp,0x10
100019bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100019c0: R_386_32	term
100019c4:	83 ec 04             	sub    esp,0x4
100019c7:	6a 0c                	push   0xc
100019c9:	6a 1a                	push   0x1a
100019cb:	50                   	push   eax
100019cc:	e8 fc ff ff ff       	call   100019cd <bootInstallTasks(int)+0x101>	100019cd: R_386_PC32	VgaText::setCursor(int, int)
100019d1:	83 c4 10             	add    esp,0x10
100019d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019d5: R_386_32	term
100019d9:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100019dd:	75 07                	jne    100019e6 <bootInstallTasks(int)+0x11a>
100019df:	ba e8 41 00 10       	mov    edx,0x100041e8	100019e0: R_386_32	.text
100019e4:	eb 05                	jmp    100019eb <bootInstallTasks(int)+0x11f>
100019e6:	ba eb 41 00 10       	mov    edx,0x100041eb	100019e7: R_386_32	.text
100019eb:	83 ec 08             	sub    esp,0x8
100019ee:	52                   	push   edx
100019ef:	50                   	push   eax
100019f0:	e8 fc ff ff ff       	call   100019f1 <bootInstallTasks(int)+0x125>	100019f1: R_386_PC32	VgaText::puts(char const*)
100019f5:	83 c4 10             	add    esp,0x10
100019f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100019f9: R_386_32	term
100019fd:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a01:	7e 07                	jle    10001a0a <bootInstallTasks(int)+0x13e>
10001a03:	ba 00 00 00 00       	mov    edx,0x0
10001a08:	eb 05                	jmp    10001a0f <bootInstallTasks(int)+0x143>
10001a0a:	ba 07 00 00 00       	mov    edx,0x7
10001a0f:	6a 0f                	push   0xf
10001a11:	52                   	push   edx
10001a12:	68 1c 42 00 10       	push   0x1000421c	10001a13: R_386_32	.text
10001a17:	50                   	push   eax
10001a18:	e8 fc ff ff ff       	call   10001a19 <bootInstallTasks(int)+0x14d>	10001a19: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a1d:	83 c4 10             	add    esp,0x10
10001a20:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a21: R_386_32	term
10001a25:	83 ec 04             	sub    esp,0x4
10001a28:	6a 0d                	push   0xd
10001a2a:	6a 1a                	push   0x1a
10001a2c:	50                   	push   eax
10001a2d:	e8 fc ff ff ff       	call   10001a2e <bootInstallTasks(int)+0x162>	10001a2e: R_386_PC32	VgaText::setCursor(int, int)
10001a32:	83 c4 10             	add    esp,0x10
10001a35:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a36: R_386_32	term
10001a3a:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001a3e:	75 07                	jne    10001a47 <bootInstallTasks(int)+0x17b>
10001a40:	ba e8 41 00 10       	mov    edx,0x100041e8	10001a41: R_386_32	.text
10001a45:	eb 05                	jmp    10001a4c <bootInstallTasks(int)+0x180>
10001a47:	ba eb 41 00 10       	mov    edx,0x100041eb	10001a48: R_386_32	.text
10001a4c:	83 ec 08             	sub    esp,0x8
10001a4f:	52                   	push   edx
10001a50:	50                   	push   eax
10001a51:	e8 fc ff ff ff       	call   10001a52 <bootInstallTasks(int)+0x186>	10001a52: R_386_PC32	VgaText::puts(char const*)
10001a56:	83 c4 10             	add    esp,0x10
10001a59:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a5a: R_386_32	term
10001a5e:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a62:	7e 07                	jle    10001a6b <bootInstallTasks(int)+0x19f>
10001a64:	ba 00 00 00 00       	mov    edx,0x0
10001a69:	eb 05                	jmp    10001a70 <bootInstallTasks(int)+0x1a4>
10001a6b:	ba 07 00 00 00       	mov    edx,0x7
10001a70:	6a 0f                	push   0xf
10001a72:	52                   	push   edx
10001a73:	68 32 42 00 10       	push   0x10004232	10001a74: R_386_32	.text
10001a78:	50                   	push   eax
10001a79:	e8 fc ff ff ff       	call   10001a7a <bootInstallTasks(int)+0x1ae>	10001a7a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a7e:	83 c4 10             	add    esp,0x10
10001a81:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a82: R_386_32	term
10001a86:	83 ec 04             	sub    esp,0x4
10001a89:	6a 0e                	push   0xe
10001a8b:	6a 1a                	push   0x1a
10001a8d:	50                   	push   eax
10001a8e:	e8 fc ff ff ff       	call   10001a8f <bootInstallTasks(int)+0x1c3>	10001a8f: R_386_PC32	VgaText::setCursor(int, int)
10001a93:	83 c4 10             	add    esp,0x10
10001a96:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a97: R_386_32	term
10001a9b:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001a9f:	75 07                	jne    10001aa8 <bootInstallTasks(int)+0x1dc>
10001aa1:	ba e8 41 00 10       	mov    edx,0x100041e8	10001aa2: R_386_32	.text
10001aa6:	eb 05                	jmp    10001aad <bootInstallTasks(int)+0x1e1>
10001aa8:	ba eb 41 00 10       	mov    edx,0x100041eb	10001aa9: R_386_32	.text
10001aad:	83 ec 08             	sub    esp,0x8
10001ab0:	52                   	push   edx
10001ab1:	50                   	push   eax
10001ab2:	e8 fc ff ff ff       	call   10001ab3 <bootInstallTasks(int)+0x1e7>	10001ab3: R_386_PC32	VgaText::puts(char const*)
10001ab7:	83 c4 10             	add    esp,0x10
10001aba:	a1 00 00 00 00       	mov    eax,ds:0x0	10001abb: R_386_32	term
10001abf:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001ac3:	7e 07                	jle    10001acc <bootInstallTasks(int)+0x200>
10001ac5:	ba 00 00 00 00       	mov    edx,0x0
10001aca:	eb 05                	jmp    10001ad1 <bootInstallTasks(int)+0x205>
10001acc:	ba 07 00 00 00       	mov    edx,0x7
10001ad1:	6a 0f                	push   0xf
10001ad3:	52                   	push   edx
10001ad4:	68 46 42 00 10       	push   0x10004246	10001ad5: R_386_32	.text
10001ad9:	50                   	push   eax
10001ada:	e8 fc ff ff ff       	call   10001adb <bootInstallTasks(int)+0x20f>	10001adb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001adf:	83 c4 10             	add    esp,0x10
10001ae2:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ae3: R_386_32	term
10001ae7:	83 ec 04             	sub    esp,0x4
10001aea:	6a 0f                	push   0xf
10001aec:	6a 1a                	push   0x1a
10001aee:	50                   	push   eax
10001aef:	e8 fc ff ff ff       	call   10001af0 <bootInstallTasks(int)+0x224>	10001af0: R_386_PC32	VgaText::setCursor(int, int)
10001af4:	83 c4 10             	add    esp,0x10
10001af7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af8: R_386_32	term
10001afc:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b00:	75 07                	jne    10001b09 <bootInstallTasks(int)+0x23d>
10001b02:	ba e8 41 00 10       	mov    edx,0x100041e8	10001b03: R_386_32	.text
10001b07:	eb 05                	jmp    10001b0e <bootInstallTasks(int)+0x242>
10001b09:	ba eb 41 00 10       	mov    edx,0x100041eb	10001b0a: R_386_32	.text
10001b0e:	83 ec 08             	sub    esp,0x8
10001b11:	52                   	push   edx
10001b12:	50                   	push   eax
10001b13:	e8 fc ff ff ff       	call   10001b14 <bootInstallTasks(int)+0x248>	10001b14: R_386_PC32	VgaText::puts(char const*)
10001b18:	83 c4 10             	add    esp,0x10
10001b1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b1c: R_386_32	term
10001b20:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b24:	7e 07                	jle    10001b2d <bootInstallTasks(int)+0x261>
10001b26:	ba 00 00 00 00       	mov    edx,0x0
10001b2b:	eb 05                	jmp    10001b32 <bootInstallTasks(int)+0x266>
10001b2d:	ba 07 00 00 00       	mov    edx,0x7
10001b32:	6a 0f                	push   0xf
10001b34:	52                   	push   edx
10001b35:	68 5e 42 00 10       	push   0x1000425e	10001b36: R_386_32	.text
10001b3a:	50                   	push   eax
10001b3b:	e8 fc ff ff ff       	call   10001b3c <bootInstallTasks(int)+0x270>	10001b3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b40:	83 c4 10             	add    esp,0x10
10001b43:	90                   	nop
10001b44:	c9                   	leave  
10001b45:	c3                   	ret    

10001b46 <ror(unsigned long long, int, int)>:
10001b46:	55                   	push   ebp
10001b47:	89 e5                	mov    ebp,esp
10001b49:	56                   	push   esi
10001b4a:	53                   	push   ebx
10001b4b:	83 ec 20             	sub    esp,0x20
10001b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b51:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b57:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001b5d:	ba 01 00 00 00       	mov    edx,0x1
10001b62:	88 c1                	mov    cl,al
10001b64:	d3 e2                	shl    edx,cl
10001b66:	89 d0                	mov    eax,edx
10001b68:	48                   	dec    eax
10001b69:	99                   	cdq    
10001b6a:	89 c1                	mov    ecx,eax
10001b6c:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001b6f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001b72:	89 d0                	mov    eax,edx
10001b74:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001b77:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001b7a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001b7d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001b80:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001b83:	0f ad d0             	shrd   eax,edx,cl
10001b86:	d3 ea                	shr    edx,cl
10001b88:	f6 c1 20             	test   cl,0x20
10001b8b:	74 04                	je     10001b91 <ror(unsigned long long, int, int)+0x4b>
10001b8d:	89 d0                	mov    eax,edx
10001b8f:	31 d2                	xor    edx,edx
10001b91:	89 c3                	mov    ebx,eax
10001b93:	89 d6                	mov    esi,edx
10001b95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001b98:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001b9b:	89 c1                	mov    ecx,eax
10001b9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ba0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ba3:	0f a5 c2             	shld   edx,eax,cl
10001ba6:	d3 e0                	shl    eax,cl
10001ba8:	f6 c1 20             	test   cl,0x20
10001bab:	74 04                	je     10001bb1 <ror(unsigned long long, int, int)+0x6b>
10001bad:	89 c2                	mov    edx,eax
10001baf:	31 c0                	xor    eax,eax
10001bb1:	89 d1                	mov    ecx,edx
10001bb3:	89 c2                	mov    edx,eax
10001bb5:	89 d8                	mov    eax,ebx
10001bb7:	09 d0                	or     eax,edx
10001bb9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001bbc:	89 f0                	mov    eax,esi
10001bbe:	09 c8                	or     eax,ecx
10001bc0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001bc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001bc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001bc9:	83 c4 20             	add    esp,0x20
10001bcc:	5b                   	pop    ebx
10001bcd:	5e                   	pop    esi
10001bce:	5d                   	pop    ebp
10001bcf:	c3                   	ret    

10001bd0 <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001bd0:	55                   	push   ebp
10001bd1:	89 e5                	mov    ebp,esp
10001bd3:	56                   	push   esi
10001bd4:	53                   	push   ebx
10001bd5:	83 ec 40             	sub    esp,0x40
10001bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001be1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001be7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001bea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001bed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001bf0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001bf3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bf6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001bf9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bfc:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001bff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c05:	0f ad d0             	shrd   eax,edx,cl
10001c08:	d3 ea                	shr    edx,cl
10001c0a:	f6 c1 20             	test   cl,0x20
10001c0d:	74 04                	je     10001c13 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c0f:	89 d0                	mov    eax,edx
10001c11:	31 d2                	xor    edx,edx
10001c13:	89 c3                	mov    ebx,eax
10001c15:	89 d6                	mov    esi,edx
10001c17:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c20:	0f ad d0             	shrd   eax,edx,cl
10001c23:	d3 ea                	shr    edx,cl
10001c25:	f6 c1 20             	test   cl,0x20
10001c28:	74 04                	je     10001c2e <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c2a:	89 d0                	mov    eax,edx
10001c2c:	31 d2                	xor    edx,edx
10001c2e:	89 d1                	mov    ecx,edx
10001c30:	89 c2                	mov    edx,eax
10001c32:	89 d8                	mov    eax,ebx
10001c34:	31 d0                	xor    eax,edx
10001c36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001c39:	89 f0                	mov    eax,esi
10001c3b:	31 c8                	xor    eax,ecx
10001c3d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c40:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001c43:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001c46:	89 c6                	mov    esi,eax
10001c48:	83 e6 01             	and    esi,0x1
10001c4b:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001c4e:	89 d0                	mov    eax,edx
10001c50:	83 e0 00             	and    eax,0x0
10001c53:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001c56:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001c59:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001c5c:	89 c3                	mov    ebx,eax
10001c5e:	80 f7 00             	xor    bh,0x0
10001c61:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001c64:	89 d0                	mov    eax,edx
10001c66:	80 f4 00             	xor    ah,0x0
10001c69:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001c6c:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001c6f:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001c72:	89 c8                	mov    eax,ecx
10001c74:	09 d0                	or     eax,edx
10001c76:	85 c0                	test   eax,eax
10001c78:	74 62                	je     10001cdc <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001c7a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c7d:	b8 01 00 00 00       	mov    eax,0x1
10001c82:	ba 00 00 00 00       	mov    edx,0x0
10001c87:	0f a5 c2             	shld   edx,eax,cl
10001c8a:	d3 e0                	shl    eax,cl
10001c8c:	f6 c1 20             	test   cl,0x20
10001c8f:	74 04                	je     10001c95 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001c91:	89 c2                	mov    edx,eax
10001c93:	31 c0                	xor    eax,eax
10001c95:	89 c3                	mov    ebx,eax
10001c97:	89 d6                	mov    esi,edx
10001c99:	89 d8                	mov    eax,ebx
10001c9b:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001c9e:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001ca1:	89 f0                	mov    eax,esi
10001ca3:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001ca6:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001ca9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001cac:	b8 01 00 00 00       	mov    eax,0x1
10001cb1:	ba 00 00 00 00       	mov    edx,0x0
10001cb6:	0f a5 c2             	shld   edx,eax,cl
10001cb9:	d3 e0                	shl    eax,cl
10001cbb:	f6 c1 20             	test   cl,0x20
10001cbe:	74 04                	je     10001cc4 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001cc0:	89 c2                	mov    edx,eax
10001cc2:	31 c0                	xor    eax,eax
10001cc4:	89 c1                	mov    ecx,eax
10001cc6:	89 d3                	mov    ebx,edx
10001cc8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001ccb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001cce:	89 c6                	mov    esi,eax
10001cd0:	31 ce                	xor    esi,ecx
10001cd2:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001cd5:	31 d3                	xor    ebx,edx
10001cd7:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001cda:	eb 0c                	jmp    10001ce8 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001cdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001cdf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ce2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001ce5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001ceb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001cee:	83 c4 40             	add    esp,0x40
10001cf1:	5b                   	pop    ebx
10001cf2:	5e                   	pop    esi
10001cf3:	5d                   	pop    ebp
10001cf4:	c3                   	ret    

10001cf5 <getChecksum(unsigned int)>:
10001cf5:	55                   	push   ebp
10001cf6:	89 e5                	mov    ebp,esp
10001cf8:	56                   	push   esi
10001cf9:	53                   	push   ebx
10001cfa:	83 ec 20             	sub    esp,0x20
10001cfd:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d03:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d09:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d12:	c1 e8 10             	shr    eax,0x10
10001d15:	89 c1                	mov    ecx,eax
10001d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d1a:	89 c2                	mov    edx,eax
10001d1c:	89 d0                	mov    eax,edx
10001d1e:	c1 e0 06             	shl    eax,0x6
10001d21:	29 d0                	sub    eax,edx
10001d23:	c1 e0 04             	shl    eax,0x4
10001d26:	01 d0                	add    eax,edx
10001d28:	31 c8                	xor    eax,ecx
10001d2a:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d2e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001d32:	0f 84 b1 00 00 00    	je     10001de9 <getChecksum(unsigned int)+0xf4>
10001d38:	b8 f4 02 00 00       	mov    eax,0x2f4
10001d3d:	ba 00 00 00 00       	mov    edx,0x0
10001d42:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d45:	89 c3                	mov    ebx,eax
10001d47:	be 00 00 00 00       	mov    esi,0x0
10001d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d4f:	ba 00 00 00 00       	mov    edx,0x0
10001d54:	6a 1d                	push   0x1d
10001d56:	6a 05                	push   0x5
10001d58:	52                   	push   edx
10001d59:	50                   	push   eax
10001d5a:	e8 fc ff ff ff       	call   10001d5b <getChecksum(unsigned int)+0x66>	10001d5b: R_386_PC32	ror(unsigned long long, int, int)
10001d5f:	83 c4 10             	add    esp,0x10
10001d62:	05 52 3f 04 00       	add    eax,0x43f52
10001d67:	83 d2 00             	adc    edx,0x0
10001d6a:	89 d9                	mov    ecx,ebx
10001d6c:	31 c1                	xor    ecx,eax
10001d6e:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001d71:	31 d6                	xor    esi,edx
10001d73:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001d76:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001d79:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001d7d:	66 0f af c2          	imul   ax,dx
10001d81:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001d85:	b8 ea 00 00 00       	mov    eax,0xea
10001d8a:	ba 00 00 00 00       	mov    edx,0x0
10001d8f:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d92:	89 c3                	mov    ebx,eax
10001d94:	be 00 00 00 00       	mov    esi,0x0
10001d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d9c:	ba 00 00 00 00       	mov    edx,0x0
10001da1:	6a 1f                	push   0x1f
10001da3:	6a 03                	push   0x3
10001da5:	52                   	push   edx
10001da6:	50                   	push   eax
10001da7:	e8 fc ff ff ff       	call   10001da8 <getChecksum(unsigned int)+0xb3>	10001da8: R_386_PC32	ror(unsigned long long, int, int)
10001dac:	83 c4 10             	add    esp,0x10
10001daf:	05 05 db 09 00       	add    eax,0x9db05
10001db4:	83 d2 00             	adc    edx,0x0
10001db7:	89 d9                	mov    ecx,ebx
10001db9:	31 c1                	xor    ecx,eax
10001dbb:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001dbe:	31 d6                	xor    esi,edx
10001dc0:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001dc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001dc6:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001dca:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001dce:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001dd1:	25 d2 04 00 00       	and    eax,0x4d2
10001dd6:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddd:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001de1:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001de4:	e9 45 ff ff ff       	jmp    10001d2e <getChecksum(unsigned int)+0x39>
10001de9:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001ded:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001df0:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001df4:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001df7:	0f b7 c0             	movzx  eax,ax
10001dfa:	25 ff 7f 00 00       	and    eax,0x7fff
10001dff:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e02:	5b                   	pop    ebx
10001e03:	5e                   	pop    esi
10001e04:	5d                   	pop    ebp
10001e05:	c3                   	ret    

10001e06 <checkKey(char*)>:
10001e06:	55                   	push   ebp
10001e07:	89 e5                	mov    ebp,esp
10001e09:	57                   	push   edi
10001e0a:	56                   	push   esi
10001e0b:	53                   	push   ebx
10001e0c:	83 ec 4c             	sub    esp,0x4c
10001e0f:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10001e16:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001e1d:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10001e24:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001e2b:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10001e2f:	7f 54                	jg     10001e85 <checkKey(char*)+0x7f>
10001e31:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001e34:	05 00 00 00 00       	add    eax,0x0	10001e35: R_386_32	lookupA
10001e39:	8a 10                	mov    dl,BYTE PTR [eax]
10001e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e3e:	8a 00                	mov    al,BYTE PTR [eax]
10001e40:	38 c2                	cmp    dl,al
10001e42:	75 06                	jne    10001e4a <checkKey(char*)+0x44>
10001e44:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001e47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001e4a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001e4d:	05 00 00 00 00       	add    eax,0x0	10001e4e: R_386_32	lookupB
10001e52:	8a 10                	mov    dl,BYTE PTR [eax]
10001e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e57:	40                   	inc    eax
10001e58:	8a 00                	mov    al,BYTE PTR [eax]
10001e5a:	38 c2                	cmp    dl,al
10001e5c:	75 06                	jne    10001e64 <checkKey(char*)+0x5e>
10001e5e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001e61:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e64:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001e67:	05 00 00 00 00       	add    eax,0x0	10001e68: R_386_32	lookupC
10001e6c:	8a 10                	mov    dl,BYTE PTR [eax]
10001e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e71:	83 c0 0f             	add    eax,0xf
10001e74:	8a 00                	mov    al,BYTE PTR [eax]
10001e76:	38 c2                	cmp    dl,al
10001e78:	75 06                	jne    10001e80 <checkKey(char*)+0x7a>
10001e7a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001e7d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001e80:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001e83:	eb a6                	jmp    10001e2b <checkKey(char*)+0x25>
10001e85:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
10001e89:	74 0c                	je     10001e97 <checkKey(char*)+0x91>
10001e8b:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10001e8f:	74 06                	je     10001e97 <checkKey(char*)+0x91>
10001e91:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10001e95:	75 07                	jne    10001e9e <checkKey(char*)+0x98>
10001e97:	b0 00                	mov    al,0x0
10001e99:	e9 2f 02 00 00       	jmp    100020cd <checkKey(char*)+0x2c7>
10001e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ea1:	83 c0 03             	add    eax,0x3
10001ea4:	8a 00                	mov    al,BYTE PTR [eax]
10001ea6:	0f be c0             	movsx  eax,al
10001ea9:	8d 50 d0             	lea    edx,[eax-0x30]
10001eac:	89 d0                	mov    eax,edx
10001eae:	c1 e0 02             	shl    eax,0x2
10001eb1:	01 d0                	add    eax,edx
10001eb3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001eba:	01 d0                	add    eax,edx
10001ebc:	c1 e0 02             	shl    eax,0x2
10001ebf:	89 c6                	mov    esi,eax
10001ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ec4:	83 c0 04             	add    eax,0x4
10001ec7:	8a 00                	mov    al,BYTE PTR [eax]
10001ec9:	0f be c0             	movsx  eax,al
10001ecc:	8d 50 d0             	lea    edx,[eax-0x30]
10001ecf:	89 d0                	mov    eax,edx
10001ed1:	c1 e0 02             	shl    eax,0x2
10001ed4:	01 d0                	add    eax,edx
10001ed6:	01 c0                	add    eax,eax
10001ed8:	8d 14 06             	lea    edx,[esi+eax*1]
10001edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ede:	83 c0 05             	add    eax,0x5
10001ee1:	8a 00                	mov    al,BYTE PTR [eax]
10001ee3:	0f be c0             	movsx  eax,al
10001ee6:	83 e8 30             	sub    eax,0x30
10001ee9:	01 d0                	add    eax,edx
10001eeb:	99                   	cdq    
10001eec:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001eef:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef5:	83 c0 07             	add    eax,0x7
10001ef8:	8a 00                	mov    al,BYTE PTR [eax]
10001efa:	0f be c0             	movsx  eax,al
10001efd:	8d 50 d0             	lea    edx,[eax-0x30]
10001f00:	89 d0                	mov    eax,edx
10001f02:	c1 e0 02             	shl    eax,0x2
10001f05:	01 d0                	add    eax,edx
10001f07:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001f0e:	01 d0                	add    eax,edx
10001f10:	c1 e0 02             	shl    eax,0x2
10001f13:	89 c6                	mov    esi,eax
10001f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f18:	83 c0 08             	add    eax,0x8
10001f1b:	8a 00                	mov    al,BYTE PTR [eax]
10001f1d:	0f be c0             	movsx  eax,al
10001f20:	8d 50 d0             	lea    edx,[eax-0x30]
10001f23:	89 d0                	mov    eax,edx
10001f25:	c1 e0 02             	shl    eax,0x2
10001f28:	01 d0                	add    eax,edx
10001f2a:	01 c0                	add    eax,eax
10001f2c:	8d 14 06             	lea    edx,[esi+eax*1]
10001f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f32:	83 c0 09             	add    eax,0x9
10001f35:	8a 00                	mov    al,BYTE PTR [eax]
10001f37:	0f be c0             	movsx  eax,al
10001f3a:	83 e8 30             	sub    eax,0x30
10001f3d:	01 d0                	add    eax,edx
10001f3f:	99                   	cdq    
10001f40:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001f43:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
10001f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f49:	83 c0 0b             	add    eax,0xb
10001f4c:	8a 00                	mov    al,BYTE PTR [eax]
10001f4e:	0f be c0             	movsx  eax,al
10001f51:	8d 50 d0             	lea    edx,[eax-0x30]
10001f54:	89 d0                	mov    eax,edx
10001f56:	c1 e0 02             	shl    eax,0x2
10001f59:	01 d0                	add    eax,edx
10001f5b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001f62:	01 d0                	add    eax,edx
10001f64:	c1 e0 02             	shl    eax,0x2
10001f67:	89 c6                	mov    esi,eax
10001f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f6c:	83 c0 0c             	add    eax,0xc
10001f6f:	8a 00                	mov    al,BYTE PTR [eax]
10001f71:	0f be c0             	movsx  eax,al
10001f74:	8d 50 d0             	lea    edx,[eax-0x30]
10001f77:	89 d0                	mov    eax,edx
10001f79:	c1 e0 02             	shl    eax,0x2
10001f7c:	01 d0                	add    eax,edx
10001f7e:	01 c0                	add    eax,eax
10001f80:	8d 14 06             	lea    edx,[esi+eax*1]
10001f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f86:	83 c0 0d             	add    eax,0xd
10001f89:	8a 00                	mov    al,BYTE PTR [eax]
10001f8b:	0f be c0             	movsx  eax,al
10001f8e:	83 e8 30             	sub    eax,0x30
10001f91:	01 d0                	add    eax,edx
10001f93:	99                   	cdq    
10001f94:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10001f97:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10001f9a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001f9d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001fa0:	0f a4 c2 0a          	shld   edx,eax,0xa
10001fa4:	c1 e0 0a             	shl    eax,0xa
10001fa7:	89 c6                	mov    esi,eax
10001fa9:	89 d7                	mov    edi,edx
10001fab:	89 f0                	mov    eax,esi
10001fad:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10001fb0:	89 c1                	mov    ecx,eax
10001fb2:	89 f8                	mov    eax,edi
10001fb4:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10001fb7:	89 c3                	mov    ebx,eax
10001fb9:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10001fbc:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10001fbf:	0f a4 c2 14          	shld   edx,eax,0x14
10001fc3:	c1 e0 14             	shl    eax,0x14
10001fc6:	89 ce                	mov    esi,ecx
10001fc8:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10001fcb:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10001fce:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
10001fd1:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001fd4:	89 d8                	mov    eax,ebx
10001fd6:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10001fd9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fdc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001fdf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001fe2:	0f a4 c2 0c          	shld   edx,eax,0xc
10001fe6:	c1 e0 0c             	shl    eax,0xc
10001fe9:	89 c3                	mov    ebx,eax
10001feb:	89 d6                	mov    esi,edx
10001fed:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10001ff0:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001ff3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001ff6:	c1 e0 04             	shl    eax,0x4
10001ff9:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10001ffc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001fff:	c1 e2 08             	shl    edx,0x8
10002002:	09 d0                	or     eax,edx
10002004:	99                   	cdq    
10002005:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002008:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
1000200b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002012:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002019:	7f 7f                	jg     1000209a <checkKey(char*)+0x294>
1000201b:	6a 2a                	push   0x2a
1000201d:	6a 13                	push   0x13
1000201f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002022:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002025:	e8 fc ff ff ff       	call   10002026 <checkKey(char*)+0x220>	10002026: R_386_PC32	ror(unsigned long long, int, int)
1000202a:	83 c4 10             	add    esp,0x10
1000202d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002030:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002033:	6a 00                	push   0x0
10002035:	6a 08                	push   0x8
10002037:	6a 00                	push   0x0
10002039:	6a 03                	push   0x3
1000203b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000203e:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002041:	e8 fc ff ff ff       	call   10002042 <checkKey(char*)+0x23c>	10002042: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002046:	83 c4 18             	add    esp,0x18
10002049:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000204c:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000204f:	6a 00                	push   0x0
10002051:	6a 0c                	push   0xc
10002053:	6a 00                	push   0x0
10002055:	6a 0d                	push   0xd
10002057:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000205a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000205d:	e8 fc ff ff ff       	call   1000205e <checkKey(char*)+0x258>	1000205e: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002062:	83 c4 18             	add    esp,0x18
10002065:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002068:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000206b:	6a 00                	push   0x0
1000206d:	6a 16                	push   0x16
1000206f:	6a 00                	push   0x0
10002071:	6a 25                	push   0x25
10002073:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002076:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002079:	e8 fc ff ff ff       	call   1000207a <checkKey(char*)+0x274>	1000207a: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000207e:	83 c4 18             	add    esp,0x18
10002081:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002084:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002087:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
1000208e:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
10002092:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002095:	e9 78 ff ff ff       	jmp    10002012 <checkKey(char*)+0x20c>
1000209a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000209d:	25 ff 7f 00 00       	and    eax,0x7fff
100020a2:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100020a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100020a8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100020ab:	0f ac d0 0f          	shrd   eax,edx,0xf
100020af:	c1 ea 0f             	shr    edx,0xf
100020b2:	89 c3                	mov    ebx,eax
100020b4:	89 d6                	mov    esi,edx
100020b6:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100020b9:	83 ec 04             	sub    esp,0x4
100020bc:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100020bf:	e8 fc ff ff ff       	call   100020c0 <checkKey(char*)+0x2ba>	100020c0: R_386_PC32	getChecksum(unsigned int)
100020c4:	83 c4 08             	add    esp,0x8
100020c7:	39 45 b4             	cmp    DWORD PTR [ebp-0x4c],eax
100020ca:	0f 94 c0             	sete   al
100020cd:	8d 65 f4             	lea    esp,[ebp-0xc]
100020d0:	5b                   	pop    ebx
100020d1:	5e                   	pop    esi
100020d2:	5f                   	pop    edi
100020d3:	5d                   	pop    ebp
100020d4:	c3                   	ret    

100020d5 <checkExtendedKey(char*)>:
100020d5:	55                   	push   ebp
100020d6:	89 e5                	mov    ebp,esp
100020d8:	83 ec 20             	sub    esp,0x20
100020db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020de:	8a 00                	mov    al,BYTE PTR [eax]
100020e0:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100020e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020e6:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
100020e9:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100020f2:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
100020f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020f8:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
100020fb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100020fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002101:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002104:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000210a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000210d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002110:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002117:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000211a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000211d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002120:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002123:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002129:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000212c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000212f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002136:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002139:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000213c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000213f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002142:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
1000214b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
1000214e:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002155:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
10002158:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000215b:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000215e:	3c 2f                	cmp    al,0x2f
10002160:	7e 07                	jle    10002169 <checkExtendedKey(char*)+0x94>
10002162:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002165:	3c 39                	cmp    al,0x39
10002167:	7e 07                	jle    10002170 <checkExtendedKey(char*)+0x9b>
10002169:	b0 00                	mov    al,0x0
1000216b:	e9 a3 00 00 00       	jmp    10002213 <checkExtendedKey(char*)+0x13e>
10002170:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002173:	3c 2f                	cmp    al,0x2f
10002175:	7e 07                	jle    1000217e <checkExtendedKey(char*)+0xa9>
10002177:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000217a:	3c 39                	cmp    al,0x39
1000217c:	7e 07                	jle    10002185 <checkExtendedKey(char*)+0xb0>
1000217e:	b0 00                	mov    al,0x0
10002180:	e9 8e 00 00 00       	jmp    10002213 <checkExtendedKey(char*)+0x13e>
10002185:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002188:	3c 2f                	cmp    al,0x2f
1000218a:	7e 07                	jle    10002193 <checkExtendedKey(char*)+0xbe>
1000218c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
1000218f:	3c 39                	cmp    al,0x39
10002191:	7e 04                	jle    10002197 <checkExtendedKey(char*)+0xc2>
10002193:	b0 00                	mov    al,0x0
10002195:	eb 7c                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
10002197:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000219a:	3c 2f                	cmp    al,0x2f
1000219c:	7e 07                	jle    100021a5 <checkExtendedKey(char*)+0xd0>
1000219e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100021a1:	3c 39                	cmp    al,0x39
100021a3:	7e 04                	jle    100021a9 <checkExtendedKey(char*)+0xd4>
100021a5:	b0 00                	mov    al,0x0
100021a7:	eb 6a                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
100021a9:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100021ac:	3c 2f                	cmp    al,0x2f
100021ae:	7e 07                	jle    100021b7 <checkExtendedKey(char*)+0xe2>
100021b0:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100021b3:	3c 39                	cmp    al,0x39
100021b5:	7e 04                	jle    100021bb <checkExtendedKey(char*)+0xe6>
100021b7:	b0 00                	mov    al,0x0
100021b9:	eb 58                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
100021bb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100021be:	3c 2f                	cmp    al,0x2f
100021c0:	7e 07                	jle    100021c9 <checkExtendedKey(char*)+0xf4>
100021c2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100021c5:	3c 39                	cmp    al,0x39
100021c7:	7e 04                	jle    100021cd <checkExtendedKey(char*)+0xf8>
100021c9:	b0 00                	mov    al,0x0
100021cb:	eb 46                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
100021cd:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100021d0:	3c 2f                	cmp    al,0x2f
100021d2:	7e 07                	jle    100021db <checkExtendedKey(char*)+0x106>
100021d4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100021d7:	3c 39                	cmp    al,0x39
100021d9:	7e 04                	jle    100021df <checkExtendedKey(char*)+0x10a>
100021db:	b0 00                	mov    al,0x0
100021dd:	eb 34                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
100021df:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100021e2:	3c 2f                	cmp    al,0x2f
100021e4:	7e 07                	jle    100021ed <checkExtendedKey(char*)+0x118>
100021e6:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100021e9:	3c 39                	cmp    al,0x39
100021eb:	7e 04                	jle    100021f1 <checkExtendedKey(char*)+0x11c>
100021ed:	b0 00                	mov    al,0x0
100021ef:	eb 22                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
100021f1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100021f4:	3c 2f                	cmp    al,0x2f
100021f6:	7e 07                	jle    100021ff <checkExtendedKey(char*)+0x12a>
100021f8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100021fb:	3c 39                	cmp    al,0x39
100021fd:	7e 04                	jle    10002203 <checkExtendedKey(char*)+0x12e>
100021ff:	b0 00                	mov    al,0x0
10002201:	eb 10                	jmp    10002213 <checkExtendedKey(char*)+0x13e>
10002203:	83 ec 04             	sub    esp,0x4
10002206:	8d 45 ec             	lea    eax,[ebp-0x14]
10002209:	50                   	push   eax
1000220a:	e8 fc ff ff ff       	call   1000220b <checkExtendedKey(char*)+0x136>	1000220b: R_386_PC32	checkKey(char*)
1000220f:	83 c4 08             	add    esp,0x8
10002212:	90                   	nop
10002213:	c9                   	leave  
10002214:	c3                   	ret    

10002215 <firstRun()>:
10002215:	55                   	push   ebp
10002216:	89 e5                	mov    ebp,esp
10002218:	57                   	push   edi
10002219:	53                   	push   ebx
1000221a:	81 ec 10 01 00 00    	sub    esp,0x110
10002220:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002222: R_386_32	guiKeyboardHandler
	10002226: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
1000222a:	83 ec 0c             	sub    esp,0xc
1000222d:	68 70 42 00 10       	push   0x10004270	1000222e: R_386_32	.text
10002232:	e8 fc ff ff ff       	call   10002233 <firstRun()+0x1e>	10002233: R_386_PC32	KeSetBootMessage(char const*)
10002237:	83 c4 10             	add    esp,0x10
1000223a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000223c: R_386_32	VgaText::hiddenOut
10002241:	a1 00 00 00 00       	mov    eax,ds:0x0	10002242: R_386_32	activeTerminal
10002246:	83 ec 08             	sub    esp,0x8
10002249:	68 99 42 00 10       	push   0x10004299	1000224a: R_386_32	.text
1000224e:	50                   	push   eax
1000224f:	e8 fc ff ff ff       	call   10002250 <firstRun()+0x3b>	10002250: R_386_PC32	VgaText::puts(char const*)
10002254:	83 c4 10             	add    esp,0x10
10002257:	a1 00 00 00 00       	mov    eax,ds:0x0	10002258: R_386_32	kernelProcess
1000225c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002262:	83 ec 08             	sub    esp,0x8
10002265:	68 99 42 00 10       	push   0x10004299	10002266: R_386_32	.text
1000226a:	50                   	push   eax
1000226b:	e8 fc ff ff ff       	call   1000226c <firstRun()+0x57>	1000226c: R_386_PC32	VgaText::puts(char const*)
10002270:	83 c4 10             	add    esp,0x10
10002273:	83 ec 0c             	sub    esp,0xc
10002276:	68 84 01 00 00       	push   0x184
1000227b:	e8 fc ff ff ff       	call   1000227c <firstRun()+0x67>	1000227c: R_386_PC32	operator new(unsigned long)
10002280:	83 c4 10             	add    esp,0x10
10002283:	89 c3                	mov    ebx,eax
10002285:	83 ec 08             	sub    esp,0x8
10002288:	68 a0 42 00 10       	push   0x100042a0	10002289: R_386_32	.text
1000228d:	53                   	push   ebx
1000228e:	e8 fc ff ff ff       	call   1000228f <firstRun()+0x7a>	1000228f: R_386_PC32	VgaText::VgaText(char const*)
10002293:	83 c4 10             	add    esp,0x10
10002296:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002298: R_386_32	term
1000229c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000229d: R_386_32	term
100022a1:	83 ec 0c             	sub    esp,0xc
100022a4:	50                   	push   eax
100022a5:	e8 fc ff ff ff       	call   100022a6 <firstRun()+0x91>	100022a6: R_386_PC32	setActiveTerminal(VgaText*)
100022aa:	83 c4 10             	add    esp,0x10
100022ad:	e8 fc ff ff ff       	call   100022ae <firstRun()+0x99>	100022ae: R_386_PC32	drawBootScreen()
100022b2:	c7 45 90 41 6c 65 78 	mov    DWORD PTR [ebp-0x70],0x78656c41
100022b9:	c7 45 94 00 00 00 00 	mov    DWORD PTR [ebp-0x6c],0x0
100022c0:	8d 55 98             	lea    edx,[ebp-0x68]
100022c3:	b9 0a 00 00 00       	mov    ecx,0xa
100022c8:	b8 00 00 00 00       	mov    eax,0x0
100022cd:	89 d7                	mov    edi,edx
100022cf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100022d1:	c7 85 60 ff ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0xa0],0x0
100022db:	8d 95 64 ff ff ff    	lea    edx,[ebp-0x9c]
100022e1:	b9 0b 00 00 00       	mov    ecx,0xb
100022e6:	b8 00 00 00 00       	mov    eax,0x0
100022eb:	89 d7                	mov    edi,edx
100022ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100022ef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100022f6:	83 ec 0c             	sub    esp,0xc
100022f9:	68 a5 42 00 10       	push   0x100042a5	100022fa: R_386_32	.text
100022fe:	6a 0c                	push   0xc
10002300:	6a 32                	push   0x32
10002302:	6a 03                	push   0x3
10002304:	6a 16                	push   0x16
10002306:	e8 fc ff ff ff       	call   10002307 <firstRun()+0xf2>	10002307: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000230b:	83 c4 20             	add    esp,0x20
1000230e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000230f: R_386_32	term
10002313:	83 ec 04             	sub    esp,0x4
10002316:	6a 06                	push   0x6
10002318:	6a 18                	push   0x18
1000231a:	50                   	push   eax
1000231b:	e8 fc ff ff ff       	call   1000231c <firstRun()+0x107>	1000231c: R_386_PC32	VgaText::setCursor(int, int)
10002320:	83 c4 10             	add    esp,0x10
10002323:	a1 00 00 00 00       	mov    eax,ds:0x0	10002324: R_386_32	term
10002328:	83 ec 08             	sub    esp,0x8
1000232b:	68 b4 42 00 10       	push   0x100042b4	1000232c: R_386_32	.text
10002330:	50                   	push   eax
10002331:	e8 fc ff ff ff       	call   10002332 <firstRun()+0x11d>	10002332: R_386_PC32	VgaText::puts(char const*)
10002336:	83 c4 10             	add    esp,0x10
10002339:	a1 00 00 00 00       	mov    eax,ds:0x0	1000233a: R_386_32	term
1000233e:	83 ec 04             	sub    esp,0x4
10002341:	6a 07                	push   0x7
10002343:	6a 18                	push   0x18
10002345:	50                   	push   eax
10002346:	e8 fc ff ff ff       	call   10002347 <firstRun()+0x132>	10002347: R_386_PC32	VgaText::setCursor(int, int)
1000234b:	83 c4 10             	add    esp,0x10
1000234e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000234f: R_386_32	term
10002353:	83 ec 08             	sub    esp,0x8
10002356:	68 e3 42 00 10       	push   0x100042e3	10002357: R_386_32	.text
1000235b:	50                   	push   eax
1000235c:	e8 fc ff ff ff       	call   1000235d <firstRun()+0x148>	1000235d: R_386_PC32	VgaText::puts(char const*)
10002361:	83 c4 10             	add    esp,0x10
10002364:	a1 00 00 00 00       	mov    eax,ds:0x0	10002365: R_386_32	term
10002369:	83 ec 04             	sub    esp,0x4
1000236c:	6a 09                	push   0x9
1000236e:	6a 18                	push   0x18
10002370:	50                   	push   eax
10002371:	e8 fc ff ff ff       	call   10002372 <firstRun()+0x15d>	10002372: R_386_PC32	VgaText::setCursor(int, int)
10002376:	83 c4 10             	add    esp,0x10
10002379:	a1 00 00 00 00       	mov    eax,ds:0x0	1000237a: R_386_32	term
1000237e:	83 ec 08             	sub    esp,0x8
10002381:	68 f3 42 00 10       	push   0x100042f3	10002382: R_386_32	.text
10002386:	50                   	push   eax
10002387:	e8 fc ff ff ff       	call   10002388 <firstRun()+0x173>	10002388: R_386_PC32	VgaText::puts(char const*)
1000238c:	83 c4 10             	add    esp,0x10
1000238f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002390: R_386_32	term
10002394:	83 ec 04             	sub    esp,0x4
10002397:	6a 0b                	push   0xb
10002399:	6a 18                	push   0x18
1000239b:	50                   	push   eax
1000239c:	e8 fc ff ff ff       	call   1000239d <firstRun()+0x188>	1000239d: R_386_PC32	VgaText::setCursor(int, int)
100023a1:	83 c4 10             	add    esp,0x10
100023a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100023a5: R_386_32	term
100023a9:	83 ec 08             	sub    esp,0x8
100023ac:	68 f8 42 00 10       	push   0x100042f8	100023ad: R_386_32	.text
100023b1:	50                   	push   eax
100023b2:	e8 fc ff ff ff       	call   100023b3 <firstRun()+0x19e>	100023b3: R_386_PC32	VgaText::puts(char const*)
100023b7:	83 c4 10             	add    esp,0x10
100023ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100023bb: R_386_32	term
100023bf:	83 ec 04             	sub    esp,0x4
100023c2:	6a 09                	push   0x9
100023c4:	6a 21                	push   0x21
100023c6:	50                   	push   eax
100023c7:	e8 fc ff ff ff       	call   100023c8 <firstRun()+0x1b3>	100023c8: R_386_PC32	VgaText::setCursor(int, int)
100023cc:	83 c4 10             	add    esp,0x10
100023cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100023d0: R_386_32	term
100023d4:	6a 07                	push   0x7
100023d6:	6a 00                	push   0x0
100023d8:	68 00 43 00 10       	push   0x10004300	100023d9: R_386_32	.text
100023dd:	50                   	push   eax
100023de:	e8 fc ff ff ff       	call   100023df <firstRun()+0x1ca>	100023df: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100023e3:	83 c4 10             	add    esp,0x10
100023e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100023e7: R_386_32	term
100023eb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100023ef:	75 07                	jne    100023f8 <firstRun()+0x1e3>
100023f1:	ba 1a 43 00 10       	mov    edx,0x1000431a	100023f2: R_386_32	.text
100023f6:	eb 05                	jmp    100023fd <firstRun()+0x1e8>
100023f8:	ba 1e 43 00 10       	mov    edx,0x1000431e	100023f9: R_386_32	.text
100023fd:	6a 0f                	push   0xf
100023ff:	6a 00                	push   0x0
10002401:	52                   	push   edx
10002402:	50                   	push   eax
10002403:	e8 fc ff ff ff       	call   10002404 <firstRun()+0x1ef>	10002404: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002408:	83 c4 10             	add    esp,0x10
1000240b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000240c: R_386_32	term
10002410:	83 ec 08             	sub    esp,0x8
10002413:	6a 21                	push   0x21
10002415:	50                   	push   eax
10002416:	e8 fc ff ff ff       	call   10002417 <firstRun()+0x202>	10002417: R_386_PC32	VgaText::setCursorX(int)
1000241b:	83 c4 10             	add    esp,0x10
1000241e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000241f: R_386_32	term
10002423:	6a 07                	push   0x7
10002425:	6a 00                	push   0x0
10002427:	8d 55 90             	lea    edx,[ebp-0x70]
1000242a:	52                   	push   edx
1000242b:	50                   	push   eax
1000242c:	e8 fc ff ff ff       	call   1000242d <firstRun()+0x218>	1000242d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002431:	83 c4 10             	add    esp,0x10
10002434:	a1 00 00 00 00       	mov    eax,ds:0x0	10002435: R_386_32	term
10002439:	83 ec 04             	sub    esp,0x4
1000243c:	6a 0b                	push   0xb
1000243e:	6a 21                	push   0x21
10002440:	50                   	push   eax
10002441:	e8 fc ff ff ff       	call   10002442 <firstRun()+0x22d>	10002442: R_386_PC32	VgaText::setCursor(int, int)
10002446:	83 c4 10             	add    esp,0x10
10002449:	a1 00 00 00 00       	mov    eax,ds:0x0	1000244a: R_386_32	term
1000244e:	6a 07                	push   0x7
10002450:	6a 00                	push   0x0
10002452:	68 00 43 00 10       	push   0x10004300	10002453: R_386_32	.text
10002457:	50                   	push   eax
10002458:	e8 fc ff ff ff       	call   10002459 <firstRun()+0x244>	10002459: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000245d:	83 c4 10             	add    esp,0x10
10002460:	a1 00 00 00 00       	mov    eax,ds:0x0	10002461: R_386_32	term
10002465:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002469:	75 07                	jne    10002472 <firstRun()+0x25d>
1000246b:	ba 1a 43 00 10       	mov    edx,0x1000431a	1000246c: R_386_32	.text
10002470:	eb 05                	jmp    10002477 <firstRun()+0x262>
10002472:	ba 1e 43 00 10       	mov    edx,0x1000431e	10002473: R_386_32	.text
10002477:	6a 0f                	push   0xf
10002479:	6a 00                	push   0x0
1000247b:	52                   	push   edx
1000247c:	50                   	push   eax
1000247d:	e8 fc ff ff ff       	call   1000247e <firstRun()+0x269>	1000247e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002482:	83 c4 10             	add    esp,0x10
10002485:	a1 00 00 00 00       	mov    eax,ds:0x0	10002486: R_386_32	term
1000248a:	83 ec 08             	sub    esp,0x8
1000248d:	6a 21                	push   0x21
1000248f:	50                   	push   eax
10002490:	e8 fc ff ff ff       	call   10002491 <firstRun()+0x27c>	10002491: R_386_PC32	VgaText::setCursorX(int)
10002495:	83 c4 10             	add    esp,0x10
10002498:	a1 00 00 00 00       	mov    eax,ds:0x0	10002499: R_386_32	term
1000249d:	6a 07                	push   0x7
1000249f:	6a 00                	push   0x0
100024a1:	8d 95 60 ff ff ff    	lea    edx,[ebp-0xa0]
100024a7:	52                   	push   edx
100024a8:	50                   	push   eax
100024a9:	e8 fc ff ff ff       	call   100024aa <firstRun()+0x295>	100024aa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100024ae:	83 c4 10             	add    esp,0x10
100024b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100024b2: R_386_32	term
100024b6:	83 ec 04             	sub    esp,0x4
100024b9:	6a 0d                	push   0xd
100024bb:	6a 18                	push   0x18
100024bd:	50                   	push   eax
100024be:	e8 fc ff ff ff       	call   100024bf <firstRun()+0x2aa>	100024bf: R_386_PC32	VgaText::setCursor(int, int)
100024c3:	83 c4 10             	add    esp,0x10
100024c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100024c7: R_386_32	term
100024cb:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100024cf:	75 07                	jne    100024d8 <firstRun()+0x2c3>
100024d1:	ba 22 43 00 10       	mov    edx,0x10004322	100024d2: R_386_32	.text
100024d6:	eb 05                	jmp    100024dd <firstRun()+0x2c8>
100024d8:	ba 2e 43 00 10       	mov    edx,0x1000432e	100024d9: R_386_32	.text
100024dd:	6a 0f                	push   0xf
100024df:	6a 08                	push   0x8
100024e1:	52                   	push   edx
100024e2:	50                   	push   eax
100024e3:	e8 fc ff ff ff       	call   100024e4 <firstRun()+0x2cf>	100024e4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100024e8:	83 c4 10             	add    esp,0x10
100024eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100024ec: R_386_32	term
100024f0:	83 ec 04             	sub    esp,0x4
100024f3:	6a 0e                	push   0xe
100024f5:	6a 18                	push   0x18
100024f7:	50                   	push   eax
100024f8:	e8 fc ff ff ff       	call   100024f9 <firstRun()+0x2e4>	100024f9: R_386_PC32	VgaText::setCursor(int, int)
100024fd:	83 c4 10             	add    esp,0x10
10002500:	a1 00 00 00 00       	mov    eax,ds:0x0	10002501: R_386_32	term
10002505:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002509:	75 07                	jne    10002512 <firstRun()+0x2fd>
1000250b:	ba 3a 43 00 10       	mov    edx,0x1000433a	1000250c: R_386_32	.text
10002510:	eb 05                	jmp    10002517 <firstRun()+0x302>
10002512:	ba 2e 43 00 10       	mov    edx,0x1000432e	10002513: R_386_32	.text
10002517:	6a 0f                	push   0xf
10002519:	6a 08                	push   0x8
1000251b:	52                   	push   edx
1000251c:	50                   	push   eax
1000251d:	e8 fc ff ff ff       	call   1000251e <firstRun()+0x309>	1000251e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002522:	83 c4 10             	add    esp,0x10
10002525:	a1 00 00 00 00       	mov    eax,ds:0x0	10002526: R_386_32	term
1000252a:	83 ec 04             	sub    esp,0x4
1000252d:	6a 0d                	push   0xd
1000252f:	6a 32                	push   0x32
10002531:	50                   	push   eax
10002532:	e8 fc ff ff ff       	call   10002533 <firstRun()+0x31e>	10002533: R_386_PC32	VgaText::setCursor(int, int)
10002537:	83 c4 10             	add    esp,0x10
1000253a:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000253e:	74 19                	je     10002559 <firstRun()+0x344>
10002540:	a1 00 00 00 00       	mov    eax,ds:0x0	10002541: R_386_32	term
10002545:	6a 08                	push   0x8
10002547:	6a 0f                	push   0xf
10002549:	68 44 43 00 10       	push   0x10004344	1000254a: R_386_32	.text
1000254e:	50                   	push   eax
1000254f:	e8 fc ff ff ff       	call   10002550 <firstRun()+0x33b>	10002550: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002554:	83 c4 10             	add    esp,0x10
10002557:	eb 17                	jmp    10002570 <firstRun()+0x35b>
10002559:	a1 00 00 00 00       	mov    eax,ds:0x0	1000255a: R_386_32	term
1000255e:	6a 01                	push   0x1
10002560:	6a 0f                	push   0xf
10002562:	68 44 43 00 10       	push   0x10004344	10002563: R_386_32	.text
10002567:	50                   	push   eax
10002568:	e8 fc ff ff ff       	call   10002569 <firstRun()+0x354>	10002569: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000256d:	83 c4 10             	add    esp,0x10
10002570:	a1 00 00 00 00       	mov    eax,ds:0x0	10002571: R_386_32	term
10002575:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002579:	75 07                	jne    10002582 <firstRun()+0x36d>
1000257b:	ba 1a 43 00 10       	mov    edx,0x1000431a	1000257c: R_386_32	.text
10002580:	eb 05                	jmp    10002587 <firstRun()+0x372>
10002582:	ba 1e 43 00 10       	mov    edx,0x1000431e	10002583: R_386_32	.text
10002587:	6a 0f                	push   0xf
10002589:	6a 00                	push   0x0
1000258b:	52                   	push   edx
1000258c:	50                   	push   eax
1000258d:	e8 fc ff ff ff       	call   1000258e <firstRun()+0x379>	1000258e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002592:	83 c4 10             	add    esp,0x10
10002595:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002599:	75 27                	jne    100025c2 <firstRun()+0x3ad>
1000259b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000259d: R_386_32	term
100025a1:	83 ec 0c             	sub    esp,0xc
100025a4:	8d 45 90             	lea    eax,[ebp-0x70]
100025a7:	50                   	push   eax
100025a8:	e8 fc ff ff ff       	call   100025a9 <firstRun()+0x394>	100025a9: R_386_PC32	strlen
100025ad:	83 c4 10             	add    esp,0x10
100025b0:	83 c0 21             	add    eax,0x21
100025b3:	83 ec 04             	sub    esp,0x4
100025b6:	6a 09                	push   0x9
100025b8:	50                   	push   eax
100025b9:	53                   	push   ebx
100025ba:	e8 fc ff ff ff       	call   100025bb <firstRun()+0x3a6>	100025bb: R_386_PC32	VgaText::setCursor(int, int)
100025bf:	83 c4 10             	add    esp,0x10
100025c2:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
100025c6:	75 2a                	jne    100025f2 <firstRun()+0x3dd>
100025c8:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100025ca: R_386_32	term
100025ce:	83 ec 0c             	sub    esp,0xc
100025d1:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
100025d7:	50                   	push   eax
100025d8:	e8 fc ff ff ff       	call   100025d9 <firstRun()+0x3c4>	100025d9: R_386_PC32	strlen
100025dd:	83 c4 10             	add    esp,0x10
100025e0:	83 c0 21             	add    eax,0x21
100025e3:	83 ec 04             	sub    esp,0x4
100025e6:	6a 0b                	push   0xb
100025e8:	50                   	push   eax
100025e9:	53                   	push   ebx
100025ea:	e8 fc ff ff ff       	call   100025eb <firstRun()+0x3d6>	100025eb: R_386_PC32	VgaText::setCursor(int, int)
100025ef:	83 c4 10             	add    esp,0x10
100025f2:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100025f6:	75 15                	jne    1000260d <firstRun()+0x3f8>
100025f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100025f9: R_386_32	term
100025fd:	83 ec 04             	sub    esp,0x4
10002600:	6a 02                	push   0x2
10002602:	6a 00                	push   0x0
10002604:	50                   	push   eax
10002605:	e8 fc ff ff ff       	call   10002606 <firstRun()+0x3f1>	10002606: R_386_PC32	VgaText::setCursor(int, int)
1000260a:	83 c4 10             	add    esp,0x10
1000260d:	a0 00 00 00 00       	mov    al,ds:0x0	1000260e: R_386_32	installKey
10002612:	84 c0                	test   al,al
10002614:	0f 94 c0             	sete   al
10002617:	84 c0                	test   al,al
10002619:	74 02                	je     1000261d <firstRun()+0x408>
1000261b:	eb f0                	jmp    1000260d <firstRun()+0x3f8>
1000261d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000261e: R_386_32	term
10002622:	05 82 00 00 00       	add    eax,0x82
10002627:	83 ec 04             	sub    esp,0x4
1000262a:	6a 10                	push   0x10
1000262c:	6a 00                	push   0x0
1000262e:	50                   	push   eax
1000262f:	e8 fc ff ff ff       	call   10002630 <firstRun()+0x41b>	10002630: R_386_PC32	memset
10002634:	83 c4 10             	add    esp,0x10
10002637:	a1 00 00 00 00       	mov    eax,ds:0x0	10002638: R_386_32	term
1000263c:	05 02 01 00 00       	add    eax,0x102
10002641:	83 ec 04             	sub    esp,0x4
10002644:	6a 10                	push   0x10
10002646:	6a 00                	push   0x0
10002648:	50                   	push   eax
10002649:	e8 fc ff ff ff       	call   1000264a <firstRun()+0x435>	1000264a: R_386_PC32	memset
1000264e:	83 c4 10             	add    esp,0x10
10002651:	a0 00 00 00 00       	mov    al,ds:0x0	10002652: R_386_32	installKey
10002656:	3c 09                	cmp    al,0x9
10002658:	74 09                	je     10002663 <firstRun()+0x44e>
1000265a:	a0 00 00 00 00       	mov    al,ds:0x0	1000265b: R_386_32	installKey
1000265f:	3c 0a                	cmp    al,0xa
10002661:	75 04                	jne    10002667 <firstRun()+0x452>
10002663:	b0 01                	mov    al,0x1
10002665:	eb 02                	jmp    10002669 <firstRun()+0x454>
10002667:	b0 00                	mov    al,0x0
10002669:	84 c0                	test   al,al
1000266b:	0f 84 1d 04 00 00    	je     10002a8e <firstRun()+0x879>
10002671:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002675:	75 0d                	jne    10002684 <firstRun()+0x46f>
10002677:	a0 00 00 00 00       	mov    al,ds:0x0	10002678: R_386_32	installKey
1000267c:	3c 0a                	cmp    al,0xa
1000267e:	75 04                	jne    10002684 <firstRun()+0x46f>
10002680:	b0 01                	mov    al,0x1
10002682:	eb 02                	jmp    10002686 <firstRun()+0x471>
10002684:	b0 00                	mov    al,0x0
10002686:	84 c0                	test   al,al
10002688:	0f 84 db 03 00 00    	je     10002a69 <firstRun()+0x854>
1000268e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002690: R_386_32	installKey
10002695:	90                   	nop
10002696:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002698: R_386_32	installKey
1000269d:	83 ec 0c             	sub    esp,0xc
100026a0:	68 a0 0f 00 00       	push   0xfa0
100026a5:	e8 fc ff ff ff       	call   100026a6 <firstRun()+0x491>	100026a6: R_386_PC32	milliTenthSleep(unsigned int)
100026aa:	83 c4 10             	add    esp,0x10
100026ad:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100026af: R_386_32	installKey
100026b4:	e8 fc ff ff ff       	call   100026b5 <firstRun()+0x4a0>	100026b5: R_386_PC32	drawBootScreen()
100026b9:	83 ec 0c             	sub    esp,0xc
100026bc:	68 4d 43 00 10       	push   0x1000434d	100026bd: R_386_32	.text
100026c1:	6a 0d                	push   0xd
100026c3:	6a 32                	push   0x32
100026c5:	6a 02                	push   0x2
100026c7:	6a 16                	push   0x16
100026c9:	e8 fc ff ff ff       	call   100026ca <firstRun()+0x4b5>	100026ca: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100026ce:	83 c4 20             	add    esp,0x20
100026d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100026d2: R_386_32	Krnl::computer
100026d6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100026dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100026dd: R_386_32	Krnl::computer
100026e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100026e7:	8b 00                	mov    eax,DWORD PTR [eax]
100026e9:	83 c0 28             	add    eax,0x28
100026ec:	8b 00                	mov    eax,DWORD PTR [eax]
100026ee:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
100026f4:	83 ec 08             	sub    esp,0x8
100026f7:	51                   	push   ecx
100026f8:	52                   	push   edx
100026f9:	ff d0                	call   eax
100026fb:	83 c4 0c             	add    esp,0xc
100026fe:	83 ec 08             	sub    esp,0x8
10002701:	68 5b 43 00 10       	push   0x1000435b	10002702: R_386_32	.text
10002706:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
1000270c:	50                   	push   eax
1000270d:	e8 fc ff ff ff       	call   1000270e <firstRun()+0x4f9>	1000270e: R_386_PC32	strcpy
10002712:	83 c4 10             	add    esp,0x10
10002715:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [ebp-0xa8]
1000271b:	0f b6 d0             	movzx  edx,al
1000271e:	89 d0                	mov    eax,edx
10002720:	c1 e0 02             	shl    eax,0x2
10002723:	01 d0                	add    eax,edx
10002725:	c1 e0 03             	shl    eax,0x3
10002728:	01 d0                	add    eax,edx
1000272a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002731:	01 d0                	add    eax,edx
10002733:	66 c1 e8 08          	shr    ax,0x8
10002737:	c0 e8 03             	shr    al,0x3
1000273a:	83 c0 30             	add    eax,0x30
1000273d:	88 85 18 ff ff ff    	mov    BYTE PTR [ebp-0xe8],al
10002743:	8a 8d 58 ff ff ff    	mov    cl,BYTE PTR [ebp-0xa8]
10002749:	0f b6 d1             	movzx  edx,cl
1000274c:	89 d0                	mov    eax,edx
1000274e:	c1 e0 02             	shl    eax,0x2
10002751:	01 d0                	add    eax,edx
10002753:	c1 e0 03             	shl    eax,0x3
10002756:	01 d0                	add    eax,edx
10002758:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000275f:	01 d0                	add    eax,edx
10002761:	66 c1 e8 08          	shr    ax,0x8
10002765:	88 c2                	mov    dl,al
10002767:	c0 ea 03             	shr    dl,0x3
1000276a:	88 d0                	mov    al,dl
1000276c:	c1 e0 02             	shl    eax,0x2
1000276f:	01 d0                	add    eax,edx
10002771:	d1 e0                	shl    eax,1
10002773:	29 c1                	sub    ecx,eax
10002775:	88 ca                	mov    dl,cl
10002777:	8d 42 30             	lea    eax,[edx+0x30]
1000277a:	88 85 19 ff ff ff    	mov    BYTE PTR [ebp-0xe7],al
10002780:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [ebp-0xa7]
10002786:	0f b6 c8             	movzx  ecx,al
10002789:	b8 67 66 66 66       	mov    eax,0x66666667
1000278e:	f7 e9                	imul   ecx
10002790:	c1 fa 02             	sar    edx,0x2
10002793:	89 c8                	mov    eax,ecx
10002795:	c1 f8 1f             	sar    eax,0x1f
10002798:	29 c2                	sub    edx,eax
1000279a:	89 d0                	mov    eax,edx
1000279c:	83 c0 30             	add    eax,0x30
1000279f:	88 85 1b ff ff ff    	mov    BYTE PTR [ebp-0xe5],al
100027a5:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [ebp-0xa7]
100027ab:	0f b6 c8             	movzx  ecx,al
100027ae:	b8 67 66 66 66       	mov    eax,0x66666667
100027b3:	f7 e9                	imul   ecx
100027b5:	c1 fa 02             	sar    edx,0x2
100027b8:	89 c8                	mov    eax,ecx
100027ba:	c1 f8 1f             	sar    eax,0x1f
100027bd:	29 c2                	sub    edx,eax
100027bf:	89 d0                	mov    eax,edx
100027c1:	c1 e0 02             	shl    eax,0x2
100027c4:	01 d0                	add    eax,edx
100027c6:	01 c0                	add    eax,eax
100027c8:	29 c1                	sub    ecx,eax
100027ca:	89 ca                	mov    edx,ecx
100027cc:	88 d0                	mov    al,dl
100027ce:	83 c0 30             	add    eax,0x30
100027d1:	88 85 1c ff ff ff    	mov    BYTE PTR [ebp-0xe4],al
100027d7:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
100027de:	0f b7 c8             	movzx  ecx,ax
100027e1:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100027e6:	f7 e9                	imul   ecx
100027e8:	c1 fa 06             	sar    edx,0x6
100027eb:	89 c8                	mov    eax,ecx
100027ed:	c1 f8 1f             	sar    eax,0x1f
100027f0:	29 c2                	sub    edx,eax
100027f2:	89 d0                	mov    eax,edx
100027f4:	b9 0a 00 00 00       	mov    ecx,0xa
100027f9:	99                   	cdq    
100027fa:	f7 f9                	idiv   ecx
100027fc:	89 d0                	mov    eax,edx
100027fe:	83 c0 30             	add    eax,0x30
10002801:	88 85 1e ff ff ff    	mov    BYTE PTR [ebp-0xe2],al
10002807:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
1000280e:	0f b7 c8             	movzx  ecx,ax
10002811:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002816:	f7 e9                	imul   ecx
10002818:	c1 fa 05             	sar    edx,0x5
1000281b:	89 c8                	mov    eax,ecx
1000281d:	c1 f8 1f             	sar    eax,0x1f
10002820:	29 c2                	sub    edx,eax
10002822:	89 d0                	mov    eax,edx
10002824:	b9 0a 00 00 00       	mov    ecx,0xa
10002829:	99                   	cdq    
1000282a:	f7 f9                	idiv   ecx
1000282c:	89 d0                	mov    eax,edx
1000282e:	83 c0 30             	add    eax,0x30
10002831:	88 85 1f ff ff ff    	mov    BYTE PTR [ebp-0xe1],al
10002837:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
1000283e:	0f b7 c8             	movzx  ecx,ax
10002841:	b8 67 66 66 66       	mov    eax,0x66666667
10002846:	f7 e9                	imul   ecx
10002848:	c1 fa 02             	sar    edx,0x2
1000284b:	89 c8                	mov    eax,ecx
1000284d:	c1 f8 1f             	sar    eax,0x1f
10002850:	89 d1                	mov    ecx,edx
10002852:	29 c1                	sub    ecx,eax
10002854:	b8 67 66 66 66       	mov    eax,0x66666667
10002859:	f7 e9                	imul   ecx
1000285b:	c1 fa 02             	sar    edx,0x2
1000285e:	89 c8                	mov    eax,ecx
10002860:	c1 f8 1f             	sar    eax,0x1f
10002863:	29 c2                	sub    edx,eax
10002865:	89 d0                	mov    eax,edx
10002867:	c1 e0 02             	shl    eax,0x2
1000286a:	01 d0                	add    eax,edx
1000286c:	01 c0                	add    eax,eax
1000286e:	29 c1                	sub    ecx,eax
10002870:	89 ca                	mov    edx,ecx
10002872:	88 d0                	mov    al,dl
10002874:	83 c0 30             	add    eax,0x30
10002877:	88 85 20 ff ff ff    	mov    BYTE PTR [ebp-0xe0],al
1000287d:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
10002884:	0f b7 c0             	movzx  eax,ax
10002887:	b9 0a 00 00 00       	mov    ecx,0xa
1000288c:	99                   	cdq    
1000288d:	f7 f9                	idiv   ecx
1000288f:	89 d0                	mov    eax,edx
10002891:	83 c0 30             	add    eax,0x30
10002894:	88 85 21 ff ff ff    	mov    BYTE PTR [ebp-0xdf],al
1000289a:	8a 85 5c ff ff ff    	mov    al,BYTE PTR [ebp-0xa4]
100028a0:	0f b6 d0             	movzx  edx,al
100028a3:	89 d0                	mov    eax,edx
100028a5:	c1 e0 02             	shl    eax,0x2
100028a8:	01 d0                	add    eax,edx
100028aa:	c1 e0 03             	shl    eax,0x3
100028ad:	01 d0                	add    eax,edx
100028af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100028b6:	01 d0                	add    eax,edx
100028b8:	66 c1 e8 08          	shr    ax,0x8
100028bc:	c0 e8 03             	shr    al,0x3
100028bf:	83 c0 30             	add    eax,0x30
100028c2:	88 85 23 ff ff ff    	mov    BYTE PTR [ebp-0xdd],al
100028c8:	8a 8d 5c ff ff ff    	mov    cl,BYTE PTR [ebp-0xa4]
100028ce:	0f b6 d1             	movzx  edx,cl
100028d1:	89 d0                	mov    eax,edx
100028d3:	c1 e0 02             	shl    eax,0x2
100028d6:	01 d0                	add    eax,edx
100028d8:	c1 e0 03             	shl    eax,0x3
100028db:	01 d0                	add    eax,edx
100028dd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100028e4:	01 d0                	add    eax,edx
100028e6:	66 c1 e8 08          	shr    ax,0x8
100028ea:	88 c2                	mov    dl,al
100028ec:	c0 ea 03             	shr    dl,0x3
100028ef:	88 d0                	mov    al,dl
100028f1:	c1 e0 02             	shl    eax,0x2
100028f4:	01 d0                	add    eax,edx
100028f6:	d1 e0                	shl    eax,1
100028f8:	29 c1                	sub    ecx,eax
100028fa:	88 ca                	mov    dl,cl
100028fc:	8d 42 30             	lea    eax,[edx+0x30]
100028ff:	88 85 24 ff ff ff    	mov    BYTE PTR [ebp-0xdc],al
10002905:	8a 85 5d ff ff ff    	mov    al,BYTE PTR [ebp-0xa3]
1000290b:	0f b6 d0             	movzx  edx,al
1000290e:	89 d0                	mov    eax,edx
10002910:	c1 e0 02             	shl    eax,0x2
10002913:	01 d0                	add    eax,edx
10002915:	c1 e0 03             	shl    eax,0x3
10002918:	01 d0                	add    eax,edx
1000291a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002921:	01 d0                	add    eax,edx
10002923:	66 c1 e8 08          	shr    ax,0x8
10002927:	c0 e8 03             	shr    al,0x3
1000292a:	83 c0 30             	add    eax,0x30
1000292d:	88 85 26 ff ff ff    	mov    BYTE PTR [ebp-0xda],al
10002933:	8a 8d 5d ff ff ff    	mov    cl,BYTE PTR [ebp-0xa3]
10002939:	0f b6 d1             	movzx  edx,cl
1000293c:	89 d0                	mov    eax,edx
1000293e:	c1 e0 02             	shl    eax,0x2
10002941:	01 d0                	add    eax,edx
10002943:	c1 e0 03             	shl    eax,0x3
10002946:	01 d0                	add    eax,edx
10002948:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000294f:	01 d0                	add    eax,edx
10002951:	66 c1 e8 08          	shr    ax,0x8
10002955:	88 c2                	mov    dl,al
10002957:	c0 ea 03             	shr    dl,0x3
1000295a:	88 d0                	mov    al,dl
1000295c:	c1 e0 02             	shl    eax,0x2
1000295f:	01 d0                	add    eax,edx
10002961:	d1 e0                	shl    eax,1
10002963:	29 c1                	sub    ecx,eax
10002965:	88 ca                	mov    dl,cl
10002967:	8d 42 30             	lea    eax,[edx+0x30]
1000296a:	88 85 27 ff ff ff    	mov    BYTE PTR [ebp-0xd9],al
10002970:	8a 85 5e ff ff ff    	mov    al,BYTE PTR [ebp-0xa2]
10002976:	0f b6 d0             	movzx  edx,al
10002979:	89 d0                	mov    eax,edx
1000297b:	c1 e0 02             	shl    eax,0x2
1000297e:	01 d0                	add    eax,edx
10002980:	c1 e0 03             	shl    eax,0x3
10002983:	01 d0                	add    eax,edx
10002985:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000298c:	01 d0                	add    eax,edx
1000298e:	66 c1 e8 08          	shr    ax,0x8
10002992:	c0 e8 03             	shr    al,0x3
10002995:	83 c0 30             	add    eax,0x30
10002998:	88 85 29 ff ff ff    	mov    BYTE PTR [ebp-0xd7],al
1000299e:	8a 8d 5e ff ff ff    	mov    cl,BYTE PTR [ebp-0xa2]
100029a4:	0f b6 d1             	movzx  edx,cl
100029a7:	89 d0                	mov    eax,edx
100029a9:	c1 e0 02             	shl    eax,0x2
100029ac:	01 d0                	add    eax,edx
100029ae:	c1 e0 03             	shl    eax,0x3
100029b1:	01 d0                	add    eax,edx
100029b3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100029ba:	01 d0                	add    eax,edx
100029bc:	66 c1 e8 08          	shr    ax,0x8
100029c0:	88 c2                	mov    dl,al
100029c2:	c0 ea 03             	shr    dl,0x3
100029c5:	88 d0                	mov    al,dl
100029c7:	c1 e0 02             	shl    eax,0x2
100029ca:	01 d0                	add    eax,edx
100029cc:	d1 e0                	shl    eax,1
100029ce:	29 c1                	sub    ecx,eax
100029d0:	88 ca                	mov    dl,cl
100029d2:	8d 42 30             	lea    eax,[edx+0x30]
100029d5:	88 85 2a ff ff ff    	mov    BYTE PTR [ebp-0xd6],al
100029db:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100029e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100029e3: R_386_32	term
100029e7:	83 ec 04             	sub    esp,0x4
100029ea:	6a 05                	push   0x5
100029ec:	6a 18                	push   0x18
100029ee:	50                   	push   eax
100029ef:	e8 fc ff ff ff       	call   100029f0 <firstRun()+0x7db>	100029f0: R_386_PC32	VgaText::setCursor(int, int)
100029f4:	83 c4 10             	add    esp,0x10
100029f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f8: R_386_32	term
100029fc:	83 ec 08             	sub    esp,0x8
100029ff:	68 70 43 00 10       	push   0x10004370	10002a00: R_386_32	.text
10002a04:	50                   	push   eax
10002a05:	e8 fc ff ff ff       	call   10002a06 <firstRun()+0x7f1>	10002a06: R_386_PC32	VgaText::puts(char const*)
10002a0a:	83 c4 10             	add    esp,0x10
10002a0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a0e: R_386_32	term
10002a12:	83 ec 04             	sub    esp,0x4
10002a15:	6a 06                	push   0x6
10002a17:	6a 18                	push   0x18
10002a19:	50                   	push   eax
10002a1a:	e8 fc ff ff ff       	call   10002a1b <firstRun()+0x806>	10002a1b: R_386_PC32	VgaText::setCursor(int, int)
10002a1f:	83 c4 10             	add    esp,0x10
10002a22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a23: R_386_32	term
10002a27:	83 ec 08             	sub    esp,0x8
10002a2a:	68 98 43 00 10       	push   0x10004398	10002a2b: R_386_32	.text
10002a2f:	50                   	push   eax
10002a30:	e8 fc ff ff ff       	call   10002a31 <firstRun()+0x81c>	10002a31: R_386_PC32	VgaText::puts(char const*)
10002a35:	83 c4 10             	add    esp,0x10
10002a38:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a39: R_386_32	term
10002a3d:	83 ec 04             	sub    esp,0x4
10002a40:	6a 09                	push   0x9
10002a42:	6a 1a                	push   0x1a
10002a44:	50                   	push   eax
10002a45:	e8 fc ff ff ff       	call   10002a46 <firstRun()+0x831>	10002a46: R_386_PC32	VgaText::setCursor(int, int)
10002a4a:	83 c4 10             	add    esp,0x10
10002a4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a4e: R_386_32	term
10002a52:	6a 0f                	push   0xf
10002a54:	6a 07                	push   0x7
10002a56:	68 ae 43 00 10       	push   0x100043ae	10002a57: R_386_32	.text
10002a5b:	50                   	push   eax
10002a5c:	e8 fc ff ff ff       	call   10002a5d <firstRun()+0x848>	10002a5d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002a61:	83 c4 10             	add    esp,0x10
10002a64:	e9 79 01 00 00       	jmp    10002be2 <firstRun()+0x9cd>
10002a69:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002a6c:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10002a70:	75 07                	jne    10002a79 <firstRun()+0x864>
10002a72:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002a79:	83 ec 0c             	sub    esp,0xc
10002a7c:	68 2c 01 00 00       	push   0x12c
10002a81:	e8 fc ff ff ff       	call   10002a82 <firstRun()+0x86d>	10002a82: R_386_PC32	milliTenthSleep(unsigned int)
10002a86:	83 c4 10             	add    esp,0x10
10002a89:	e9 48 01 00 00       	jmp    10002bd6 <firstRun()+0x9c1>
10002a8e:	a0 00 00 00 00       	mov    al,ds:0x0	10002a8f: R_386_32	installKey
10002a93:	3c 1f                	cmp    al,0x1f
10002a95:	7e 0d                	jle    10002aa4 <firstRun()+0x88f>
10002a97:	a0 00 00 00 00       	mov    al,ds:0x0	10002a98: R_386_32	installKey
10002a9c:	3c 7f                	cmp    al,0x7f
10002a9e:	74 04                	je     10002aa4 <firstRun()+0x88f>
10002aa0:	b0 01                	mov    al,0x1
10002aa2:	eb 02                	jmp    10002aa6 <firstRun()+0x891>
10002aa4:	b0 00                	mov    al,0x0
10002aa6:	84 c0                	test   al,al
10002aa8:	0f 84 85 00 00 00    	je     10002b33 <firstRun()+0x91e>
10002aae:	a0 00 00 00 00       	mov    al,ds:0x0	10002aaf: R_386_32	installKey
10002ab3:	88 85 04 ff ff ff    	mov    BYTE PTR [ebp-0xfc],al
10002ab9:	c6 85 05 ff ff ff 00 	mov    BYTE PTR [ebp-0xfb],0x0
10002ac0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002ac4:	75 2a                	jne    10002af0 <firstRun()+0x8db>
10002ac6:	83 ec 0c             	sub    esp,0xc
10002ac9:	8d 45 90             	lea    eax,[ebp-0x70]
10002acc:	50                   	push   eax
10002acd:	e8 fc ff ff ff       	call   10002ace <firstRun()+0x8b9>	10002ace: R_386_PC32	strlen
10002ad2:	83 c4 10             	add    esp,0x10
10002ad5:	83 f8 17             	cmp    eax,0x17
10002ad8:	77 16                	ja     10002af0 <firstRun()+0x8db>
10002ada:	83 ec 08             	sub    esp,0x8
10002add:	8d 85 04 ff ff ff    	lea    eax,[ebp-0xfc]
10002ae3:	50                   	push   eax
10002ae4:	8d 45 90             	lea    eax,[ebp-0x70]
10002ae7:	50                   	push   eax
10002ae8:	e8 fc ff ff ff       	call   10002ae9 <firstRun()+0x8d4>	10002ae9: R_386_PC32	strcat
10002aed:	83 c4 10             	add    esp,0x10
10002af0:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002af4:	0f 85 dc 00 00 00    	jne    10002bd6 <firstRun()+0x9c1>
10002afa:	83 ec 0c             	sub    esp,0xc
10002afd:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002b03:	50                   	push   eax
10002b04:	e8 fc ff ff ff       	call   10002b05 <firstRun()+0x8f0>	10002b05: R_386_PC32	strlen
10002b09:	83 c4 10             	add    esp,0x10
10002b0c:	83 f8 17             	cmp    eax,0x17
10002b0f:	0f 87 c1 00 00 00    	ja     10002bd6 <firstRun()+0x9c1>
10002b15:	83 ec 08             	sub    esp,0x8
10002b18:	8d 85 04 ff ff ff    	lea    eax,[ebp-0xfc]
10002b1e:	50                   	push   eax
10002b1f:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002b25:	50                   	push   eax
10002b26:	e8 fc ff ff ff       	call   10002b27 <firstRun()+0x912>	10002b27: R_386_PC32	strcat
10002b2b:	83 c4 10             	add    esp,0x10
10002b2e:	e9 a3 00 00 00       	jmp    10002bd6 <firstRun()+0x9c1>
10002b33:	a0 00 00 00 00       	mov    al,ds:0x0	10002b34: R_386_32	installKey
10002b38:	3c 08                	cmp    al,0x8
10002b3a:	0f 94 c0             	sete   al
10002b3d:	84 c0                	test   al,al
10002b3f:	74 67                	je     10002ba8 <firstRun()+0x993>
10002b41:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002b45:	75 28                	jne    10002b6f <firstRun()+0x95a>
10002b47:	83 ec 0c             	sub    esp,0xc
10002b4a:	8d 45 90             	lea    eax,[ebp-0x70]
10002b4d:	50                   	push   eax
10002b4e:	e8 fc ff ff ff       	call   10002b4f <firstRun()+0x93a>	10002b4f: R_386_PC32	strlen
10002b53:	83 c4 10             	add    esp,0x10
10002b56:	85 c0                	test   eax,eax
10002b58:	74 15                	je     10002b6f <firstRun()+0x95a>
10002b5a:	83 ec 0c             	sub    esp,0xc
10002b5d:	8d 45 90             	lea    eax,[ebp-0x70]
10002b60:	50                   	push   eax
10002b61:	e8 fc ff ff ff       	call   10002b62 <firstRun()+0x94d>	10002b62: R_386_PC32	strlen
10002b66:	83 c4 10             	add    esp,0x10
10002b69:	48                   	dec    eax
10002b6a:	c6 44 05 90 00       	mov    BYTE PTR [ebp+eax*1-0x70],0x0
10002b6f:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002b73:	75 61                	jne    10002bd6 <firstRun()+0x9c1>
10002b75:	83 ec 0c             	sub    esp,0xc
10002b78:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002b7e:	50                   	push   eax
10002b7f:	e8 fc ff ff ff       	call   10002b80 <firstRun()+0x96b>	10002b80: R_386_PC32	strlen
10002b84:	83 c4 10             	add    esp,0x10
10002b87:	85 c0                	test   eax,eax
10002b89:	74 4b                	je     10002bd6 <firstRun()+0x9c1>
10002b8b:	83 ec 0c             	sub    esp,0xc
10002b8e:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002b94:	50                   	push   eax
10002b95:	e8 fc ff ff ff       	call   10002b96 <firstRun()+0x981>	10002b96: R_386_PC32	strlen
10002b9a:	83 c4 10             	add    esp,0x10
10002b9d:	48                   	dec    eax
10002b9e:	c6 84 05 60 ff ff ff 00 	mov    BYTE PTR [ebp+eax*1-0xa0],0x0
10002ba6:	eb 2e                	jmp    10002bd6 <firstRun()+0x9c1>
10002ba8:	a0 00 00 00 00       	mov    al,ds:0x0	10002ba9: R_386_32	installKey
10002bad:	3c 7f                	cmp    al,0x7f
10002baf:	0f 94 c0             	sete   al
10002bb2:	84 c0                	test   al,al
10002bb4:	74 20                	je     10002bd6 <firstRun()+0x9c1>
10002bb6:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
10002bb9:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
10002bbd:	75 07                	jne    10002bc6 <firstRun()+0x9b1>
10002bbf:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10002bc6:	83 ec 0c             	sub    esp,0xc
10002bc9:	68 2c 01 00 00       	push   0x12c
10002bce:	e8 fc ff ff ff       	call   10002bcf <firstRun()+0x9ba>	10002bcf: R_386_PC32	milliTenthSleep(unsigned int)
10002bd3:	83 c4 10             	add    esp,0x10
10002bd6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002bd8: R_386_32	installKey
10002bdd:	e9 d8 f7 ff ff       	jmp    100023ba <firstRun()+0x1a5>
10002be2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be3: R_386_32	term
10002be7:	83 ec 04             	sub    esp,0x4
10002bea:	6a 08                	push   0x8
10002bec:	6a 1a                	push   0x1a
10002bee:	50                   	push   eax
10002bef:	e8 fc ff ff ff       	call   10002bf0 <firstRun()+0x9db>	10002bf0: R_386_PC32	VgaText::setCursor(int, int)
10002bf4:	83 c4 10             	add    esp,0x10
10002bf7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bf8: R_386_32	term
10002bfc:	83 ec 08             	sub    esp,0x8
10002bff:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
10002c05:	52                   	push   edx
10002c06:	50                   	push   eax
10002c07:	e8 fc ff ff ff       	call   10002c08 <firstRun()+0x9f3>	10002c08: R_386_PC32	VgaText::puts(char const*)
10002c0c:	83 c4 10             	add    esp,0x10
10002c0f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c10: R_386_32	term
10002c14:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002c17:	83 c2 1a             	add    edx,0x1a
10002c1a:	83 ec 04             	sub    esp,0x4
10002c1d:	6a 08                	push   0x8
10002c1f:	52                   	push   edx
10002c20:	50                   	push   eax
10002c21:	e8 fc ff ff ff       	call   10002c22 <firstRun()+0xa0d>	10002c22: R_386_PC32	VgaText::setCursor(int, int)
10002c26:	83 c4 10             	add    esp,0x10
10002c29:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2a: R_386_32	term
10002c2e:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10002c34:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002c37:	01 ca                	add    edx,ecx
10002c39:	8a 12                	mov    dl,BYTE PTR [edx]
10002c3b:	0f be d2             	movsx  edx,dl
10002c3e:	6a 00                	push   0x0
10002c40:	6a 0f                	push   0xf
10002c42:	52                   	push   edx
10002c43:	50                   	push   eax
10002c44:	e8 fc ff ff ff       	call   10002c45 <firstRun()+0xa30>	10002c45: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10002c49:	83 c4 10             	add    esp,0x10
10002c4c:	8a 85 23 ff ff ff    	mov    al,BYTE PTR [ebp-0xdd]
10002c52:	0f be c0             	movsx  eax,al
10002c55:	8d 50 d0             	lea    edx,[eax-0x30]
10002c58:	89 d0                	mov    eax,edx
10002c5a:	c1 e0 02             	shl    eax,0x2
10002c5d:	01 d0                	add    eax,edx
10002c5f:	01 c0                	add    eax,eax
10002c61:	89 c2                	mov    edx,eax
10002c63:	8a 85 24 ff ff ff    	mov    al,BYTE PTR [ebp-0xdc]
10002c69:	0f be c0             	movsx  eax,al
10002c6c:	83 e8 30             	sub    eax,0x30
10002c6f:	01 d0                	add    eax,edx
10002c71:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002c74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002c77:	b9 0c 00 00 00       	mov    ecx,0xc
10002c7c:	99                   	cdq    
10002c7d:	f7 f9                	idiv   ecx
10002c7f:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10002c82:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10002c86:	75 07                	jne    10002c8f <firstRun()+0xa7a>
10002c88:	c7 45 ec 0c 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc
10002c8f:	8a 85 26 ff ff ff    	mov    al,BYTE PTR [ebp-0xda]
10002c95:	0f be c0             	movsx  eax,al
10002c98:	8d 50 d0             	lea    edx,[eax-0x30]
10002c9b:	89 d0                	mov    eax,edx
10002c9d:	c1 e0 02             	shl    eax,0x2
10002ca0:	01 d0                	add    eax,edx
10002ca2:	01 c0                	add    eax,eax
10002ca4:	89 c2                	mov    edx,eax
10002ca6:	8a 85 27 ff ff ff    	mov    al,BYTE PTR [ebp-0xd9]
10002cac:	0f be c0             	movsx  eax,al
10002caf:	83 e8 30             	sub    eax,0x30
10002cb2:	01 d0                	add    eax,edx
10002cb4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002cb7:	83 ec 04             	sub    esp,0x4
10002cba:	6a 10                	push   0x10
10002cbc:	6a 00                	push   0x0
10002cbe:	8d 85 f4 fe ff ff    	lea    eax,[ebp-0x10c]
10002cc4:	50                   	push   eax
10002cc5:	e8 fc ff ff ff       	call   10002cc6 <firstRun()+0xab1>	10002cc6: R_386_PC32	memset
10002cca:	83 c4 10             	add    esp,0x10
10002ccd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002cd4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002cd7:	8d 50 01             	lea    edx,[eax+0x1]
10002cda:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002cdd:	c6 84 05 f4 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x10c],0x28
10002ce5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10002ce8:	b8 67 66 66 66       	mov    eax,0x66666667
10002ced:	f7 e9                	imul   ecx
10002cef:	c1 fa 02             	sar    edx,0x2
10002cf2:	89 c8                	mov    eax,ecx
10002cf4:	c1 f8 1f             	sar    eax,0x1f
10002cf7:	29 c2                	sub    edx,eax
10002cf9:	89 d0                	mov    eax,edx
10002cfb:	8d 48 30             	lea    ecx,[eax+0x30]
10002cfe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002d01:	8d 50 01             	lea    edx,[eax+0x1]
10002d04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002d07:	88 ca                	mov    dl,cl
10002d09:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10002d10:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10002d13:	b8 67 66 66 66       	mov    eax,0x66666667
10002d18:	f7 e9                	imul   ecx
10002d1a:	c1 fa 02             	sar    edx,0x2
10002d1d:	89 c8                	mov    eax,ecx
10002d1f:	c1 f8 1f             	sar    eax,0x1f
10002d22:	29 c2                	sub    edx,eax
10002d24:	89 d0                	mov    eax,edx
10002d26:	c1 e0 02             	shl    eax,0x2
10002d29:	01 d0                	add    eax,edx
10002d2b:	01 c0                	add    eax,eax
10002d2d:	29 c1                	sub    ecx,eax
10002d2f:	89 ca                	mov    edx,ecx
10002d31:	88 d0                	mov    al,dl
10002d33:	8d 48 30             	lea    ecx,[eax+0x30]
10002d36:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002d39:	8d 50 01             	lea    edx,[eax+0x1]
10002d3c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002d3f:	88 ca                	mov    dl,cl
10002d41:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10002d48:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002d4b:	8d 50 01             	lea    edx,[eax+0x1]
10002d4e:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002d51:	c6 84 05 f4 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x10c],0x3a
10002d59:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10002d5c:	b8 67 66 66 66       	mov    eax,0x66666667
10002d61:	f7 e9                	imul   ecx
10002d63:	c1 fa 02             	sar    edx,0x2
10002d66:	89 c8                	mov    eax,ecx
10002d68:	c1 f8 1f             	sar    eax,0x1f
10002d6b:	29 c2                	sub    edx,eax
10002d6d:	89 d0                	mov    eax,edx
10002d6f:	8d 48 30             	lea    ecx,[eax+0x30]
10002d72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002d75:	8d 50 01             	lea    edx,[eax+0x1]
10002d78:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002d7b:	88 ca                	mov    dl,cl
10002d7d:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10002d84:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10002d87:	b8 67 66 66 66       	mov    eax,0x66666667
10002d8c:	f7 e9                	imul   ecx
10002d8e:	c1 fa 02             	sar    edx,0x2
10002d91:	89 c8                	mov    eax,ecx
10002d93:	c1 f8 1f             	sar    eax,0x1f
10002d96:	29 c2                	sub    edx,eax
10002d98:	89 d0                	mov    eax,edx
10002d9a:	c1 e0 02             	shl    eax,0x2
10002d9d:	01 d0                	add    eax,edx
10002d9f:	01 c0                	add    eax,eax
10002da1:	29 c1                	sub    ecx,eax
10002da3:	89 ca                	mov    edx,ecx
10002da5:	88 d0                	mov    al,dl
10002da7:	8d 48 30             	lea    ecx,[eax+0x30]
10002daa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002dad:	8d 50 01             	lea    edx,[eax+0x1]
10002db0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002db3:	88 ca                	mov    dl,cl
10002db5:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10002dbc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002dbf:	8d 50 01             	lea    edx,[eax+0x1]
10002dc2:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002dc5:	c6 84 05 f4 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x10c],0x20
10002dcd:	83 7d e8 0b          	cmp    DWORD PTR [ebp-0x18],0xb
10002dd1:	7e 04                	jle    10002dd7 <firstRun()+0xbc2>
10002dd3:	b2 50                	mov    dl,0x50
10002dd5:	eb 02                	jmp    10002dd9 <firstRun()+0xbc4>
10002dd7:	b2 41                	mov    dl,0x41
10002dd9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ddc:	8d 48 01             	lea    ecx,[eax+0x1]
10002ddf:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10002de2:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10002de9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002dec:	8d 50 01             	lea    edx,[eax+0x1]
10002def:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002df2:	c6 84 05 f4 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x10c],0x4d
10002dfa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002dfd:	8d 50 01             	lea    edx,[eax+0x1]
10002e00:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10002e03:	c6 84 05 f4 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x10c],0x29
10002e0b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002e0d: R_386_32	term
10002e11:	83 ec 0c             	sub    esp,0xc
10002e14:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
10002e1a:	50                   	push   eax
10002e1b:	e8 fc ff ff ff       	call   10002e1c <firstRun()+0xc07>	10002e1c: R_386_PC32	strlen
10002e20:	83 c4 10             	add    esp,0x10
10002e23:	83 c0 1e             	add    eax,0x1e
10002e26:	83 ec 04             	sub    esp,0x4
10002e29:	6a 08                	push   0x8
10002e2b:	50                   	push   eax
10002e2c:	53                   	push   ebx
10002e2d:	e8 fc ff ff ff       	call   10002e2e <firstRun()+0xc19>	10002e2e: R_386_PC32	VgaText::setCursor(int, int)
10002e32:	83 c4 10             	add    esp,0x10
10002e35:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e36: R_386_32	term
10002e3a:	83 ec 08             	sub    esp,0x8
10002e3d:	8d 95 f4 fe ff ff    	lea    edx,[ebp-0x10c]
10002e43:	52                   	push   edx
10002e44:	50                   	push   eax
10002e45:	e8 fc ff ff ff       	call   10002e46 <firstRun()+0xc31>	10002e46: R_386_PC32	VgaText::puts(char const*)
10002e4a:	83 c4 10             	add    esp,0x10
10002e4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e4e: R_386_32	term
10002e52:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002e55:	83 c2 1a             	add    edx,0x1a
10002e58:	83 ec 04             	sub    esp,0x4
10002e5b:	6a 08                	push   0x8
10002e5d:	52                   	push   edx
10002e5e:	50                   	push   eax
10002e5f:	e8 fc ff ff ff       	call   10002e60 <firstRun()+0xc4b>	10002e60: R_386_PC32	VgaText::setCursor(int, int)
10002e64:	83 c4 10             	add    esp,0x10
10002e67:	a0 00 00 00 00       	mov    al,ds:0x0	10002e68: R_386_32	installKey
10002e6c:	84 c0                	test   al,al
10002e6e:	0f 94 c0             	sete   al
10002e71:	84 c0                	test   al,al
10002e73:	74 02                	je     10002e77 <firstRun()+0xc62>
10002e75:	eb f0                	jmp    10002e67 <firstRun()+0xc52>
10002e77:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e78: R_386_32	term
10002e7c:	05 82 00 00 00       	add    eax,0x82
10002e81:	83 ec 04             	sub    esp,0x4
10002e84:	6a 10                	push   0x10
10002e86:	6a 00                	push   0x0
10002e88:	50                   	push   eax
10002e89:	e8 fc ff ff ff       	call   10002e8a <firstRun()+0xc75>	10002e8a: R_386_PC32	memset
10002e8e:	83 c4 10             	add    esp,0x10
10002e91:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e92: R_386_32	term
10002e96:	05 02 01 00 00       	add    eax,0x102
10002e9b:	83 ec 04             	sub    esp,0x4
10002e9e:	6a 10                	push   0x10
10002ea0:	6a 00                	push   0x0
10002ea2:	50                   	push   eax
10002ea3:	e8 fc ff ff ff       	call   10002ea4 <firstRun()+0xc8f>	10002ea4: R_386_PC32	memset
10002ea8:	83 c4 10             	add    esp,0x10
10002eab:	a0 00 00 00 00       	mov    al,ds:0x0	10002eac: R_386_32	installKey
10002eb0:	3c 03                	cmp    al,0x3
10002eb2:	74 09                	je     10002ebd <firstRun()+0xca8>
10002eb4:	a0 00 00 00 00       	mov    al,ds:0x0	10002eb5: R_386_32	installKey
10002eb9:	3c 08                	cmp    al,0x8
10002ebb:	75 04                	jne    10002ec1 <firstRun()+0xcac>
10002ebd:	b0 01                	mov    al,0x1
10002ebf:	eb 02                	jmp    10002ec3 <firstRun()+0xcae>
10002ec1:	b0 00                	mov    al,0x0
10002ec3:	84 c0                	test   al,al
10002ec5:	74 58                	je     10002f1f <firstRun()+0xd0a>
10002ec7:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
10002eca:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
10002ece:	75 16                	jne    10002ee6 <firstRun()+0xcd1>
10002ed0:	83 ec 0c             	sub    esp,0xc
10002ed3:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
10002ed9:	50                   	push   eax
10002eda:	e8 fc ff ff ff       	call   10002edb <firstRun()+0xcc6>	10002edb: R_386_PC32	strlen
10002edf:	83 c4 10             	add    esp,0x10
10002ee2:	48                   	dec    eax
10002ee3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002ee6:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
10002eec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002eef:	01 d0                	add    eax,edx
10002ef1:	8a 00                	mov    al,BYTE PTR [eax]
10002ef3:	3c 20                	cmp    al,0x20
10002ef5:	74 d0                	je     10002ec7 <firstRun()+0xcb2>
10002ef7:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
10002efd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002f00:	01 d0                	add    eax,edx
10002f02:	8a 00                	mov    al,BYTE PTR [eax]
10002f04:	3c 2f                	cmp    al,0x2f
10002f06:	74 bf                	je     10002ec7 <firstRun()+0xcb2>
10002f08:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
10002f0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002f11:	01 d0                	add    eax,edx
10002f13:	8a 00                	mov    al,BYTE PTR [eax]
10002f15:	3c 3a                	cmp    al,0x3a
10002f17:	0f 85 4a 04 00 00    	jne    10003367 <firstRun()+0x1152>
10002f1d:	eb a8                	jmp    10002ec7 <firstRun()+0xcb2>
10002f1f:	a0 00 00 00 00       	mov    al,ds:0x0	10002f20: R_386_32	installKey
10002f24:	3c 2f                	cmp    al,0x2f
10002f26:	7e 09                	jle    10002f31 <firstRun()+0xd1c>
10002f28:	a0 00 00 00 00       	mov    al,ds:0x0	10002f29: R_386_32	installKey
10002f2d:	3c 39                	cmp    al,0x39
10002f2f:	7e 12                	jle    10002f43 <firstRun()+0xd2e>
10002f31:	a0 00 00 00 00       	mov    al,ds:0x0	10002f32: R_386_32	installKey
10002f36:	3c 20                	cmp    al,0x20
10002f38:	74 09                	je     10002f43 <firstRun()+0xd2e>
10002f3a:	a0 00 00 00 00       	mov    al,ds:0x0	10002f3b: R_386_32	installKey
10002f3f:	3c 04                	cmp    al,0x4
10002f41:	75 04                	jne    10002f47 <firstRun()+0xd32>
10002f43:	b0 01                	mov    al,0x1
10002f45:	eb 02                	jmp    10002f49 <firstRun()+0xd34>
10002f47:	b0 00                	mov    al,0x0
10002f49:	84 c0                	test   al,al
10002f4b:	0f 84 cf 01 00 00    	je     10003120 <firstRun()+0xf0b>
10002f51:	a0 00 00 00 00       	mov    al,ds:0x0	10002f52: R_386_32	installKey
10002f56:	3c 2f                	cmp    al,0x2f
10002f58:	7e 0d                	jle    10002f67 <firstRun()+0xd52>
10002f5a:	a0 00 00 00 00       	mov    al,ds:0x0	10002f5b: R_386_32	installKey
10002f5f:	3c 39                	cmp    al,0x39
10002f61:	7f 04                	jg     10002f67 <firstRun()+0xd52>
10002f63:	b0 01                	mov    al,0x1
10002f65:	eb 02                	jmp    10002f69 <firstRun()+0xd54>
10002f67:	b0 00                	mov    al,0x0
10002f69:	84 c0                	test   al,al
10002f6b:	0f 84 51 01 00 00    	je     100030c2 <firstRun()+0xead>
10002f71:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10002f75:	75 0d                	jne    10002f84 <firstRun()+0xd6f>
10002f77:	a0 00 00 00 00       	mov    al,ds:0x0	10002f78: R_386_32	installKey
10002f7c:	3c 33                	cmp    al,0x33
10002f7e:	7e 04                	jle    10002f84 <firstRun()+0xd6f>
10002f80:	b0 01                	mov    al,0x1
10002f82:	eb 02                	jmp    10002f86 <firstRun()+0xd71>
10002f84:	b0 00                	mov    al,0x0
10002f86:	84 c0                	test   al,al
10002f88:	74 28                	je     10002fb2 <firstRun()+0xd9d>
10002f8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002f8d:	8d 50 01             	lea    edx,[eax+0x1]
10002f90:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10002f93:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
10002f9b:	a0 00 00 00 00       	mov    al,ds:0x0	10002f9c: R_386_32	installKey
10002fa0:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10002fa6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002fa9:	01 ca                	add    edx,ecx
10002fab:	88 02                	mov    BYTE PTR [edx],al
10002fad:	e9 10 01 00 00       	jmp    100030c2 <firstRun()+0xead>
10002fb2:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10002fb6:	75 0d                	jne    10002fc5 <firstRun()+0xdb0>
10002fb8:	a0 00 00 00 00       	mov    al,ds:0x0	10002fb9: R_386_32	installKey
10002fbd:	3c 31                	cmp    al,0x31
10002fbf:	7e 04                	jle    10002fc5 <firstRun()+0xdb0>
10002fc1:	b0 01                	mov    al,0x1
10002fc3:	eb 02                	jmp    10002fc7 <firstRun()+0xdb2>
10002fc5:	b0 00                	mov    al,0x0
10002fc7:	84 c0                	test   al,al
10002fc9:	74 28                	je     10002ff3 <firstRun()+0xdde>
10002fcb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002fce:	8d 50 01             	lea    edx,[eax+0x1]
10002fd1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10002fd4:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
10002fdc:	a0 00 00 00 00       	mov    al,ds:0x0	10002fdd: R_386_32	installKey
10002fe1:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10002fe7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002fea:	01 ca                	add    edx,ecx
10002fec:	88 02                	mov    BYTE PTR [edx],al
10002fee:	e9 cf 00 00 00       	jmp    100030c2 <firstRun()+0xead>
10002ff3:	83 7d f0 0b          	cmp    DWORD PTR [ebp-0x10],0xb
10002ff7:	75 0d                	jne    10003006 <firstRun()+0xdf1>
10002ff9:	a0 00 00 00 00       	mov    al,ds:0x0	10002ffa: R_386_32	installKey
10002ffe:	3c 32                	cmp    al,0x32
10003000:	7e 04                	jle    10003006 <firstRun()+0xdf1>
10003002:	b0 01                	mov    al,0x1
10003004:	eb 02                	jmp    10003008 <firstRun()+0xdf3>
10003006:	b0 00                	mov    al,0x0
10003008:	84 c0                	test   al,al
1000300a:	74 28                	je     10003034 <firstRun()+0xe1f>
1000300c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000300f:	8d 50 01             	lea    edx,[eax+0x1]
10003012:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10003015:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
1000301d:	a0 00 00 00 00       	mov    al,ds:0x0	1000301e: R_386_32	installKey
10003022:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10003028:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000302b:	01 ca                	add    edx,ecx
1000302d:	88 02                	mov    BYTE PTR [edx],al
1000302f:	e9 8e 00 00 00       	jmp    100030c2 <firstRun()+0xead>
10003034:	83 7d f0 0e          	cmp    DWORD PTR [ebp-0x10],0xe
10003038:	75 0d                	jne    10003047 <firstRun()+0xe32>
1000303a:	a0 00 00 00 00       	mov    al,ds:0x0	1000303b: R_386_32	installKey
1000303f:	3c 35                	cmp    al,0x35
10003041:	7e 04                	jle    10003047 <firstRun()+0xe32>
10003043:	b0 01                	mov    al,0x1
10003045:	eb 02                	jmp    10003049 <firstRun()+0xe34>
10003047:	b0 00                	mov    al,0x0
10003049:	84 c0                	test   al,al
1000304b:	74 25                	je     10003072 <firstRun()+0xe5d>
1000304d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003050:	8d 50 01             	lea    edx,[eax+0x1]
10003053:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10003056:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
1000305e:	a0 00 00 00 00       	mov    al,ds:0x0	1000305f: R_386_32	installKey
10003063:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10003069:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000306c:	01 ca                	add    edx,ecx
1000306e:	88 02                	mov    BYTE PTR [edx],al
10003070:	eb 50                	jmp    100030c2 <firstRun()+0xead>
10003072:	83 7d f0 11          	cmp    DWORD PTR [ebp-0x10],0x11
10003076:	75 0d                	jne    10003085 <firstRun()+0xe70>
10003078:	a0 00 00 00 00       	mov    al,ds:0x0	10003079: R_386_32	installKey
1000307d:	3c 35                	cmp    al,0x35
1000307f:	7e 04                	jle    10003085 <firstRun()+0xe70>
10003081:	b0 01                	mov    al,0x1
10003083:	eb 02                	jmp    10003087 <firstRun()+0xe72>
10003085:	b0 00                	mov    al,0x0
10003087:	84 c0                	test   al,al
10003089:	74 25                	je     100030b0 <firstRun()+0xe9b>
1000308b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000308e:	8d 50 01             	lea    edx,[eax+0x1]
10003091:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10003094:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
1000309c:	a0 00 00 00 00       	mov    al,ds:0x0	1000309d: R_386_32	installKey
100030a1:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
100030a7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100030aa:	01 ca                	add    edx,ecx
100030ac:	88 02                	mov    BYTE PTR [edx],al
100030ae:	eb 12                	jmp    100030c2 <firstRun()+0xead>
100030b0:	a0 00 00 00 00       	mov    al,ds:0x0	100030b1: R_386_32	installKey
100030b5:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
100030bb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100030be:	01 ca                	add    edx,ecx
100030c0:	88 02                	mov    BYTE PTR [edx],al
100030c2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100030c5:	83 ec 0c             	sub    esp,0xc
100030c8:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
100030ce:	50                   	push   eax
100030cf:	e8 fc ff ff ff       	call   100030d0 <firstRun()+0xebb>	100030d0: R_386_PC32	strlen
100030d4:	83 c4 10             	add    esp,0x10
100030d7:	89 c2                	mov    edx,eax
100030d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100030dc:	39 c2                	cmp    edx,eax
100030de:	77 07                	ja     100030e7 <firstRun()+0xed2>
100030e0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100030e7:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
100030ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100030f0:	01 d0                	add    eax,edx
100030f2:	8a 00                	mov    al,BYTE PTR [eax]
100030f4:	3c 20                	cmp    al,0x20
100030f6:	74 ca                	je     100030c2 <firstRun()+0xead>
100030f8:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
100030fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003101:	01 d0                	add    eax,edx
10003103:	8a 00                	mov    al,BYTE PTR [eax]
10003105:	3c 2f                	cmp    al,0x2f
10003107:	74 b9                	je     100030c2 <firstRun()+0xead>
10003109:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
1000310f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003112:	01 d0                	add    eax,edx
10003114:	8a 00                	mov    al,BYTE PTR [eax]
10003116:	3c 3a                	cmp    al,0x3a
10003118:	0f 85 49 02 00 00    	jne    10003367 <firstRun()+0x1152>
1000311e:	eb a2                	jmp    100030c2 <firstRun()+0xead>
10003120:	a0 00 00 00 00       	mov    al,ds:0x0	10003121: R_386_32	installKey
10003125:	3c 0a                	cmp    al,0xa
10003127:	0f 94 c0             	sete   al
1000312a:	84 c0                	test   al,al
1000312c:	0f 84 35 02 00 00    	je     10003367 <firstRun()+0x1152>
10003132:	8a 85 18 ff ff ff    	mov    al,BYTE PTR [ebp-0xe8]
10003138:	0f be c0             	movsx  eax,al
1000313b:	8d 50 d0             	lea    edx,[eax-0x30]
1000313e:	89 d0                	mov    eax,edx
10003140:	c1 e0 02             	shl    eax,0x2
10003143:	01 d0                	add    eax,edx
10003145:	01 c0                	add    eax,eax
10003147:	89 c2                	mov    edx,eax
10003149:	8a 85 19 ff ff ff    	mov    al,BYTE PTR [ebp-0xe7]
1000314f:	0f be c0             	movsx  eax,al
10003152:	83 e8 30             	sub    eax,0x30
10003155:	01 d0                	add    eax,edx
10003157:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000315a:	8a 85 1b ff ff ff    	mov    al,BYTE PTR [ebp-0xe5]
10003160:	0f be c0             	movsx  eax,al
10003163:	8d 50 d0             	lea    edx,[eax-0x30]
10003166:	89 d0                	mov    eax,edx
10003168:	c1 e0 02             	shl    eax,0x2
1000316b:	01 d0                	add    eax,edx
1000316d:	01 c0                	add    eax,eax
1000316f:	89 c2                	mov    edx,eax
10003171:	8a 85 1c ff ff ff    	mov    al,BYTE PTR [ebp-0xe4]
10003177:	0f be c0             	movsx  eax,al
1000317a:	83 e8 30             	sub    eax,0x30
1000317d:	01 d0                	add    eax,edx
1000317f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10003182:	8a 85 1e ff ff ff    	mov    al,BYTE PTR [ebp-0xe2]
10003188:	0f be c0             	movsx  eax,al
1000318b:	8d 50 d0             	lea    edx,[eax-0x30]
1000318e:	89 d0                	mov    eax,edx
10003190:	c1 e0 02             	shl    eax,0x2
10003193:	01 d0                	add    eax,edx
10003195:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000319c:	01 d0                	add    eax,edx
1000319e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100031a5:	01 d0                	add    eax,edx
100031a7:	c1 e0 03             	shl    eax,0x3
100031aa:	89 c1                	mov    ecx,eax
100031ac:	8a 85 1f ff ff ff    	mov    al,BYTE PTR [ebp-0xe1]
100031b2:	0f be c0             	movsx  eax,al
100031b5:	8d 50 d0             	lea    edx,[eax-0x30]
100031b8:	89 d0                	mov    eax,edx
100031ba:	c1 e0 02             	shl    eax,0x2
100031bd:	01 d0                	add    eax,edx
100031bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100031c6:	01 d0                	add    eax,edx
100031c8:	c1 e0 02             	shl    eax,0x2
100031cb:	01 c1                	add    ecx,eax
100031cd:	8a 85 20 ff ff ff    	mov    al,BYTE PTR [ebp-0xe0]
100031d3:	0f be c0             	movsx  eax,al
100031d6:	8d 50 d0             	lea    edx,[eax-0x30]
100031d9:	89 d0                	mov    eax,edx
100031db:	c1 e0 02             	shl    eax,0x2
100031de:	01 d0                	add    eax,edx
100031e0:	01 c0                	add    eax,eax
100031e2:	8d 14 01             	lea    edx,[ecx+eax*1]
100031e5:	8a 85 21 ff ff ff    	mov    al,BYTE PTR [ebp-0xdf]
100031eb:	0f be c0             	movsx  eax,al
100031ee:	83 e8 30             	sub    eax,0x30
100031f1:	01 d0                	add    eax,edx
100031f3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100031f6:	8a 85 23 ff ff ff    	mov    al,BYTE PTR [ebp-0xdd]
100031fc:	0f be c0             	movsx  eax,al
100031ff:	8d 50 d0             	lea    edx,[eax-0x30]
10003202:	89 d0                	mov    eax,edx
10003204:	c1 e0 02             	shl    eax,0x2
10003207:	01 d0                	add    eax,edx
10003209:	01 c0                	add    eax,eax
1000320b:	89 c2                	mov    edx,eax
1000320d:	8a 85 24 ff ff ff    	mov    al,BYTE PTR [ebp-0xdc]
10003213:	0f be c0             	movsx  eax,al
10003216:	83 e8 30             	sub    eax,0x30
10003219:	01 d0                	add    eax,edx
1000321b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
1000321e:	8a 85 26 ff ff ff    	mov    al,BYTE PTR [ebp-0xda]
10003224:	0f be c0             	movsx  eax,al
10003227:	8d 50 d0             	lea    edx,[eax-0x30]
1000322a:	89 d0                	mov    eax,edx
1000322c:	c1 e0 02             	shl    eax,0x2
1000322f:	01 d0                	add    eax,edx
10003231:	01 c0                	add    eax,eax
10003233:	89 c2                	mov    edx,eax
10003235:	8a 85 27 ff ff ff    	mov    al,BYTE PTR [ebp-0xd9]
1000323b:	0f be c0             	movsx  eax,al
1000323e:	83 e8 30             	sub    eax,0x30
10003241:	01 d0                	add    eax,edx
10003243:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10003246:	8a 85 29 ff ff ff    	mov    al,BYTE PTR [ebp-0xd7]
1000324c:	0f be c0             	movsx  eax,al
1000324f:	8d 50 d0             	lea    edx,[eax-0x30]
10003252:	89 d0                	mov    eax,edx
10003254:	c1 e0 02             	shl    eax,0x2
10003257:	01 d0                	add    eax,edx
10003259:	01 c0                	add    eax,eax
1000325b:	89 c2                	mov    edx,eax
1000325d:	8a 85 2a ff ff ff    	mov    al,BYTE PTR [ebp-0xd6]
10003263:	0f be c0             	movsx  eax,al
10003266:	83 e8 30             	sub    eax,0x30
10003269:	01 d0                	add    eax,edx
1000326b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000326e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003271:	83 e0 03             	and    eax,0x3
10003274:	85 c0                	test   eax,eax
10003276:	75 1f                	jne    10003297 <firstRun()+0x1082>
10003278:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000327b:	b9 19 00 00 00       	mov    ecx,0x19
10003280:	99                   	cdq    
10003281:	f7 f9                	idiv   ecx
10003283:	89 d0                	mov    eax,edx
10003285:	85 c0                	test   eax,eax
10003287:	75 0a                	jne    10003293 <firstRun()+0x107e>
10003289:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000328c:	83 e0 0f             	and    eax,0xf
1000328f:	85 c0                	test   eax,eax
10003291:	75 04                	jne    10003297 <firstRun()+0x1082>
10003293:	b0 01                	mov    al,0x1
10003295:	eb 02                	jmp    10003299 <firstRun()+0x1084>
10003297:	b0 00                	mov    al,0x0
10003299:	88 45 c7             	mov    BYTE PTR [ebp-0x39],al
1000329c:	83 7d dc 1f          	cmp    DWORD PTR [ebp-0x24],0x1f
100032a0:	7e 0c                	jle    100032ae <firstRun()+0x1099>
100032a2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100032a9:	e9 b9 00 00 00       	jmp    10003367 <firstRun()+0x1152>
100032ae:	83 7d dc 1e          	cmp    DWORD PTR [ebp-0x24],0x1e
100032b2:	7e 2a                	jle    100032de <firstRun()+0x10c9>
100032b4:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
100032b8:	74 18                	je     100032d2 <firstRun()+0x10bd>
100032ba:	83 7d d8 04          	cmp    DWORD PTR [ebp-0x28],0x4
100032be:	74 12                	je     100032d2 <firstRun()+0x10bd>
100032c0:	83 7d d8 06          	cmp    DWORD PTR [ebp-0x28],0x6
100032c4:	74 0c                	je     100032d2 <firstRun()+0x10bd>
100032c6:	83 7d d8 09          	cmp    DWORD PTR [ebp-0x28],0x9
100032ca:	74 06                	je     100032d2 <firstRun()+0x10bd>
100032cc:	83 7d d8 0b          	cmp    DWORD PTR [ebp-0x28],0xb
100032d0:	75 0c                	jne    100032de <firstRun()+0x10c9>
100032d2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100032d9:	e9 89 00 00 00       	jmp    10003367 <firstRun()+0x1152>
100032de:	83 7d dc 1d          	cmp    DWORD PTR [ebp-0x24],0x1d
100032e2:	75 19                	jne    100032fd <firstRun()+0x10e8>
100032e4:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
100032e8:	75 13                	jne    100032fd <firstRun()+0x10e8>
100032ea:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
100032ed:	83 f0 01             	xor    eax,0x1
100032f0:	84 c0                	test   al,al
100032f2:	74 09                	je     100032fd <firstRun()+0x10e8>
100032f4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100032fb:	eb 6a                	jmp    10003367 <firstRun()+0x1152>
100032fd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10003301:	75 09                	jne    1000330c <firstRun()+0x10f7>
10003303:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000330a:	eb 5b                	jmp    10003367 <firstRun()+0x1152>
1000330c:	83 7d d8 0c          	cmp    DWORD PTR [ebp-0x28],0xc
10003310:	7f 06                	jg     10003318 <firstRun()+0x1103>
10003312:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003316:	75 09                	jne    10003321 <firstRun()+0x110c>
10003318:	c7 45 f0 03 00 00 00 	mov    DWORD PTR [ebp-0x10],0x3
1000331f:	eb 46                	jmp    10003367 <firstRun()+0x1152>
10003321:	81 7d d4 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x2c],0xbb7
10003328:	7f 09                	jg     10003333 <firstRun()+0x111e>
1000332a:	81 7d d4 b1 07 00 00 	cmp    DWORD PTR [ebp-0x2c],0x7b1
10003331:	7f 09                	jg     1000333c <firstRun()+0x1127>
10003333:	c7 45 f0 06 00 00 00 	mov    DWORD PTR [ebp-0x10],0x6
1000333a:	eb 2b                	jmp    10003367 <firstRun()+0x1152>
1000333c:	83 7d d0 17          	cmp    DWORD PTR [ebp-0x30],0x17
10003340:	7e 09                	jle    1000334b <firstRun()+0x1136>
10003342:	c7 45 f0 0b 00 00 00 	mov    DWORD PTR [ebp-0x10],0xb
10003349:	eb 1c                	jmp    10003367 <firstRun()+0x1152>
1000334b:	83 7d cc 3b          	cmp    DWORD PTR [ebp-0x34],0x3b
1000334f:	7e 09                	jle    1000335a <firstRun()+0x1145>
10003351:	c7 45 f0 0e 00 00 00 	mov    DWORD PTR [ebp-0x10],0xe
10003358:	eb 0d                	jmp    10003367 <firstRun()+0x1152>
1000335a:	83 7d c8 3b          	cmp    DWORD PTR [ebp-0x38],0x3b
1000335e:	7e 23                	jle    10003383 <firstRun()+0x116e>
10003360:	c7 45 f0 11 00 00 00 	mov    DWORD PTR [ebp-0x10],0x11
10003367:	83 ec 0c             	sub    esp,0xc
1000336a:	68 4c 04 00 00       	push   0x44c
1000336f:	e8 fc ff ff ff       	call   10003370 <firstRun()+0x115b>	10003370: R_386_PC32	milliTenthSleep(unsigned int)
10003374:	83 c4 10             	add    esp,0x10
10003377:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003379: R_386_32	installKey
1000337e:	e9 5f f8 ff ff       	jmp    10002be2 <firstRun()+0x9cd>
10003383:	90                   	nop
10003384:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003386: R_386_32	installKey
1000338b:	83 ec 0c             	sub    esp,0xc
1000338e:	68 84 03 00 00       	push   0x384
10003393:	e8 fc ff ff ff       	call   10003394 <firstRun()+0x117f>	10003394: R_386_PC32	milliTenthSleep(unsigned int)
10003398:	83 c4 10             	add    esp,0x10
1000339b:	e8 fc ff ff ff       	call   1000339c <firstRun()+0x1187>	1000339c: R_386_PC32	drawBootScreen()
100033a0:	83 ec 0c             	sub    esp,0xc
100033a3:	68 18 2e 00 00       	push   0x2e18
100033a8:	e8 fc ff ff ff       	call   100033a9 <firstRun()+0x1194>	100033a9: R_386_PC32	milliTenthSleep(unsigned int)
100033ad:	83 c4 10             	add    esp,0x10
100033b0:	83 ec 08             	sub    esp,0x8
100033b3:	68 c2 43 00 10       	push   0x100043c2	100033b4: R_386_32	.text
100033b8:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
100033be:	50                   	push   eax
100033bf:	e8 fc ff ff ff       	call   100033c0 <firstRun()+0x11ab>	100033c0: R_386_PC32	strcpy
100033c4:	83 c4 10             	add    esp,0x10
100033c7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100033ce:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033d0: R_386_32	installKey
100033d5:	e8 fc ff ff ff       	call   100033d6 <firstRun()+0x11c1>	100033d6: R_386_PC32	drawBootScreen()
100033da:	83 ec 0c             	sub    esp,0xc
100033dd:	68 d3 43 00 10       	push   0x100043d3	100033de: R_386_32	.text
100033e2:	6a 0e                	push   0xe
100033e4:	6a 32                	push   0x32
100033e6:	6a 02                	push   0x2
100033e8:	6a 16                	push   0x16
100033ea:	e8 fc ff ff ff       	call   100033eb <firstRun()+0x11d6>	100033eb: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100033ef:	83 c4 20             	add    esp,0x20
100033f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100033f3: R_386_32	term
100033f7:	83 ec 04             	sub    esp,0x4
100033fa:	6a 05                	push   0x5
100033fc:	6a 18                	push   0x18
100033fe:	50                   	push   eax
100033ff:	e8 fc ff ff ff       	call   10003400 <firstRun()+0x11eb>	10003400: R_386_PC32	VgaText::setCursor(int, int)
10003404:	83 c4 10             	add    esp,0x10
10003407:	a1 00 00 00 00       	mov    eax,ds:0x0	10003408: R_386_32	term
1000340c:	83 ec 08             	sub    esp,0x8
1000340f:	68 e0 43 00 10       	push   0x100043e0	10003410: R_386_32	.text
10003414:	50                   	push   eax
10003415:	e8 fc ff ff ff       	call   10003416 <firstRun()+0x1201>	10003416: R_386_PC32	VgaText::puts(char const*)
1000341a:	83 c4 10             	add    esp,0x10
1000341d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000341e: R_386_32	term
10003422:	83 ec 04             	sub    esp,0x4
10003425:	6a 06                	push   0x6
10003427:	6a 18                	push   0x18
10003429:	50                   	push   eax
1000342a:	e8 fc ff ff ff       	call   1000342b <firstRun()+0x1216>	1000342b: R_386_PC32	VgaText::setCursor(int, int)
1000342f:	83 c4 10             	add    esp,0x10
10003432:	a1 00 00 00 00       	mov    eax,ds:0x0	10003433: R_386_32	term
10003437:	83 ec 08             	sub    esp,0x8
1000343a:	68 98 43 00 10       	push   0x10004398	1000343b: R_386_32	.text
1000343f:	50                   	push   eax
10003440:	e8 fc ff ff ff       	call   10003441 <firstRun()+0x122c>	10003441: R_386_PC32	VgaText::puts(char const*)
10003445:	83 c4 10             	add    esp,0x10
10003448:	c6 85 16 ff ff ff 00 	mov    BYTE PTR [ebp-0xea],0x0
1000344f:	c6 85 17 ff ff ff 00 	mov    BYTE PTR [ebp-0xe9],0x0
10003456:	a1 00 00 00 00       	mov    eax,ds:0x0	10003457: R_386_32	term
1000345b:	83 ec 04             	sub    esp,0x4
1000345e:	6a 08                	push   0x8
10003460:	6a 1c                	push   0x1c
10003462:	50                   	push   eax
10003463:	e8 fc ff ff ff       	call   10003464 <firstRun()+0x124f>	10003464: R_386_PC32	VgaText::setCursor(int, int)
10003468:	83 c4 10             	add    esp,0x10
1000346b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000346c: R_386_32	term
10003470:	83 ec 08             	sub    esp,0x8
10003473:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003479:	52                   	push   edx
1000347a:	50                   	push   eax
1000347b:	e8 fc ff ff ff       	call   1000347c <firstRun()+0x1267>	1000347c: R_386_PC32	VgaText::puts(char const*)
10003480:	83 c4 10             	add    esp,0x10
10003483:	a1 00 00 00 00       	mov    eax,ds:0x0	10003484: R_386_32	term
10003488:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000348b:	83 c2 1c             	add    edx,0x1c
1000348e:	83 ec 04             	sub    esp,0x4
10003491:	6a 08                	push   0x8
10003493:	52                   	push   edx
10003494:	50                   	push   eax
10003495:	e8 fc ff ff ff       	call   10003496 <firstRun()+0x1281>	10003496: R_386_PC32	VgaText::setCursor(int, int)
1000349a:	83 c4 10             	add    esp,0x10
1000349d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000349e: R_386_32	term
100034a2:	8d 8d 06 ff ff ff    	lea    ecx,[ebp-0xfa]
100034a8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100034ab:	01 ca                	add    edx,ecx
100034ad:	8a 12                	mov    dl,BYTE PTR [edx]
100034af:	0f be d2             	movsx  edx,dl
100034b2:	6a 00                	push   0x0
100034b4:	6a 0f                	push   0xf
100034b6:	52                   	push   edx
100034b7:	50                   	push   eax
100034b8:	e8 fc ff ff ff       	call   100034b9 <firstRun()+0x12a4>	100034b9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100034bd:	83 c4 10             	add    esp,0x10
100034c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100034c1: R_386_32	term
100034c5:	83 ec 04             	sub    esp,0x4
100034c8:	6a 08                	push   0x8
100034ca:	6a 2c                	push   0x2c
100034cc:	50                   	push   eax
100034cd:	e8 fc ff ff ff       	call   100034ce <firstRun()+0x12b9>	100034ce: R_386_PC32	VgaText::setCursor(int, int)
100034d2:	83 c4 10             	add    esp,0x10
100034d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100034d6: R_386_32	term
100034da:	6a 0f                	push   0xf
100034dc:	6a 0f                	push   0xf
100034de:	6a 20                	push   0x20
100034e0:	50                   	push   eax
100034e1:	e8 fc ff ff ff       	call   100034e2 <firstRun()+0x12cd>	100034e2: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100034e6:	83 c4 10             	add    esp,0x10
100034e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100034ea: R_386_32	term
100034ee:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100034f1:	83 c2 1c             	add    edx,0x1c
100034f4:	83 ec 04             	sub    esp,0x4
100034f7:	6a 08                	push   0x8
100034f9:	52                   	push   edx
100034fa:	50                   	push   eax
100034fb:	e8 fc ff ff ff       	call   100034fc <firstRun()+0x12e7>	100034fc: R_386_PC32	VgaText::setCursor(int, int)
10003500:	83 c4 10             	add    esp,0x10
10003503:	a0 00 00 00 00       	mov    al,ds:0x0	10003504: R_386_32	installKey
10003508:	84 c0                	test   al,al
1000350a:	0f 94 c0             	sete   al
1000350d:	84 c0                	test   al,al
1000350f:	74 02                	je     10003513 <firstRun()+0x12fe>
10003511:	eb f0                	jmp    10003503 <firstRun()+0x12ee>
10003513:	a1 00 00 00 00       	mov    eax,ds:0x0	10003514: R_386_32	term
10003518:	05 82 00 00 00       	add    eax,0x82
1000351d:	83 ec 04             	sub    esp,0x4
10003520:	6a 10                	push   0x10
10003522:	6a 00                	push   0x0
10003524:	50                   	push   eax
10003525:	e8 fc ff ff ff       	call   10003526 <firstRun()+0x1311>	10003526: R_386_PC32	memset
1000352a:	83 c4 10             	add    esp,0x10
1000352d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000352e: R_386_32	term
10003532:	05 02 01 00 00       	add    eax,0x102
10003537:	83 ec 04             	sub    esp,0x4
1000353a:	6a 10                	push   0x10
1000353c:	6a 00                	push   0x0
1000353e:	50                   	push   eax
1000353f:	e8 fc ff ff ff       	call   10003540 <firstRun()+0x132b>	10003540: R_386_PC32	memset
10003544:	83 c4 10             	add    esp,0x10
10003547:	a0 00 00 00 00       	mov    al,ds:0x0	10003548: R_386_32	installKey
1000354c:	3c 03                	cmp    al,0x3
1000354e:	74 09                	je     10003559 <firstRun()+0x1344>
10003550:	a0 00 00 00 00       	mov    al,ds:0x0	10003551: R_386_32	installKey
10003555:	3c 08                	cmp    al,0x8
10003557:	75 04                	jne    1000355d <firstRun()+0x1348>
10003559:	b0 01                	mov    al,0x1
1000355b:	eb 02                	jmp    1000355f <firstRun()+0x134a>
1000355d:	b0 00                	mov    al,0x0
1000355f:	84 c0                	test   al,al
10003561:	74 36                	je     10003599 <firstRun()+0x1384>
10003563:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
10003566:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
1000356a:	75 16                	jne    10003582 <firstRun()+0x136d>
1000356c:	83 ec 0c             	sub    esp,0xc
1000356f:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
10003575:	50                   	push   eax
10003576:	e8 fc ff ff ff       	call   10003577 <firstRun()+0x1362>	10003577: R_386_PC32	strlen
1000357b:	83 c4 10             	add    esp,0x10
1000357e:	48                   	dec    eax
1000357f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10003582:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003588:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000358b:	01 d0                	add    eax,edx
1000358d:	8a 00                	mov    al,BYTE PTR [eax]
1000358f:	3c 2d                	cmp    al,0x2d
10003591:	0f 85 40 03 00 00    	jne    100038d7 <firstRun()+0x16c2>
10003597:	eb ca                	jmp    10003563 <firstRun()+0x134e>
10003599:	a0 00 00 00 00       	mov    al,ds:0x0	1000359a: R_386_32	installKey
1000359e:	3c 2f                	cmp    al,0x2f
100035a0:	7e 09                	jle    100035ab <firstRun()+0x1396>
100035a2:	a0 00 00 00 00       	mov    al,ds:0x0	100035a3: R_386_32	installKey
100035a7:	3c 39                	cmp    al,0x39
100035a9:	7e 36                	jle    100035e1 <firstRun()+0x13cc>
100035ab:	a0 00 00 00 00       	mov    al,ds:0x0	100035ac: R_386_32	installKey
100035b0:	3c 40                	cmp    al,0x40
100035b2:	7e 09                	jle    100035bd <firstRun()+0x13a8>
100035b4:	a0 00 00 00 00       	mov    al,ds:0x0	100035b5: R_386_32	installKey
100035b9:	3c 5a                	cmp    al,0x5a
100035bb:	7e 24                	jle    100035e1 <firstRun()+0x13cc>
100035bd:	a0 00 00 00 00       	mov    al,ds:0x0	100035be: R_386_32	installKey
100035c2:	3c 60                	cmp    al,0x60
100035c4:	7e 09                	jle    100035cf <firstRun()+0x13ba>
100035c6:	a0 00 00 00 00       	mov    al,ds:0x0	100035c7: R_386_32	installKey
100035cb:	3c 7a                	cmp    al,0x7a
100035cd:	7e 12                	jle    100035e1 <firstRun()+0x13cc>
100035cf:	a0 00 00 00 00       	mov    al,ds:0x0	100035d0: R_386_32	installKey
100035d4:	3c 20                	cmp    al,0x20
100035d6:	74 09                	je     100035e1 <firstRun()+0x13cc>
100035d8:	a0 00 00 00 00       	mov    al,ds:0x0	100035d9: R_386_32	installKey
100035dd:	3c 04                	cmp    al,0x4
100035df:	75 04                	jne    100035e5 <firstRun()+0x13d0>
100035e1:	b0 01                	mov    al,0x1
100035e3:	eb 02                	jmp    100035e7 <firstRun()+0x13d2>
100035e5:	b0 00                	mov    al,0x0
100035e7:	84 c0                	test   al,al
100035e9:	0f 84 aa 00 00 00    	je     10003699 <firstRun()+0x1484>
100035ef:	a0 00 00 00 00       	mov    al,ds:0x0	100035f0: R_386_32	installKey
100035f4:	3c 2f                	cmp    al,0x2f
100035f6:	7e 09                	jle    10003601 <firstRun()+0x13ec>
100035f8:	a0 00 00 00 00       	mov    al,ds:0x0	100035f9: R_386_32	installKey
100035fd:	3c 39                	cmp    al,0x39
100035ff:	7e 24                	jle    10003625 <firstRun()+0x1410>
10003601:	a0 00 00 00 00       	mov    al,ds:0x0	10003602: R_386_32	installKey
10003606:	3c 40                	cmp    al,0x40
10003608:	7e 09                	jle    10003613 <firstRun()+0x13fe>
1000360a:	a0 00 00 00 00       	mov    al,ds:0x0	1000360b: R_386_32	installKey
1000360f:	3c 5a                	cmp    al,0x5a
10003611:	7e 12                	jle    10003625 <firstRun()+0x1410>
10003613:	a0 00 00 00 00       	mov    al,ds:0x0	10003614: R_386_32	installKey
10003618:	3c 60                	cmp    al,0x60
1000361a:	7e 0d                	jle    10003629 <firstRun()+0x1414>
1000361c:	a0 00 00 00 00       	mov    al,ds:0x0	1000361d: R_386_32	installKey
10003621:	3c 7a                	cmp    al,0x7a
10003623:	7f 04                	jg     10003629 <firstRun()+0x1414>
10003625:	b0 01                	mov    al,0x1
10003627:	eb 02                	jmp    1000362b <firstRun()+0x1416>
10003629:	b0 00                	mov    al,0x0
1000362b:	84 c0                	test   al,al
1000362d:	74 2e                	je     1000365d <firstRun()+0x1448>
1000362f:	a0 00 00 00 00       	mov    al,ds:0x0	10003630: R_386_32	installKey
10003634:	3c 60                	cmp    al,0x60
10003636:	7e 13                	jle    1000364b <firstRun()+0x1436>
10003638:	a0 00 00 00 00       	mov    al,ds:0x0	10003639: R_386_32	installKey
1000363d:	3c 7a                	cmp    al,0x7a
1000363f:	7f 0a                	jg     1000364b <firstRun()+0x1436>
10003641:	a0 00 00 00 00       	mov    al,ds:0x0	10003642: R_386_32	installKey
10003646:	83 e8 20             	sub    eax,0x20
10003649:	eb 05                	jmp    10003650 <firstRun()+0x143b>
1000364b:	a0 00 00 00 00       	mov    al,ds:0x0	1000364c: R_386_32	installKey
10003650:	8d 8d 06 ff ff ff    	lea    ecx,[ebp-0xfa]
10003656:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003659:	01 ca                	add    edx,ecx
1000365b:	88 02                	mov    BYTE PTR [edx],al
1000365d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10003660:	83 ec 0c             	sub    esp,0xc
10003663:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
10003669:	50                   	push   eax
1000366a:	e8 fc ff ff ff       	call   1000366b <firstRun()+0x1456>	1000366b: R_386_PC32	strlen
1000366f:	83 c4 10             	add    esp,0x10
10003672:	89 c2                	mov    edx,eax
10003674:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003677:	39 c2                	cmp    edx,eax
10003679:	77 07                	ja     10003682 <firstRun()+0x146d>
1000367b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10003682:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003688:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000368b:	01 d0                	add    eax,edx
1000368d:	8a 00                	mov    al,BYTE PTR [eax]
1000368f:	3c 2d                	cmp    al,0x2d
10003691:	0f 85 40 02 00 00    	jne    100038d7 <firstRun()+0x16c2>
10003697:	eb c4                	jmp    1000365d <firstRun()+0x1448>
10003699:	a0 00 00 00 00       	mov    al,ds:0x0	1000369a: R_386_32	installKey
1000369e:	3c 0a                	cmp    al,0xa
100036a0:	0f 94 c0             	sete   al
100036a3:	84 c0                	test   al,al
100036a5:	0f 84 2c 02 00 00    	je     100038d7 <firstRun()+0x16c2>
100036ab:	83 ec 0c             	sub    esp,0xc
100036ae:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
100036b4:	50                   	push   eax
100036b5:	e8 fc ff ff ff       	call   100036b6 <firstRun()+0x14a1>	100036b6: R_386_PC32	checkExtendedKey(char*)
100036ba:	83 c4 10             	add    esp,0x10
100036bd:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
100036c0:	80 7d c6 00          	cmp    BYTE PTR [ebp-0x3a],0x0
100036c4:	74 38                	je     100036fe <firstRun()+0x14e9>
100036c6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100036c8: R_386_32	installKey
100036cd:	83 ec 0c             	sub    esp,0xc
100036d0:	68 84 03 00 00       	push   0x384
100036d5:	e8 fc ff ff ff       	call   100036d6 <firstRun()+0x14c1>	100036d6: R_386_PC32	milliTenthSleep(unsigned int)
100036da:	83 c4 10             	add    esp,0x10
100036dd:	e8 fc ff ff ff       	call   100036de <firstRun()+0x14c9>	100036de: R_386_PC32	drawBootScreen()
100036e2:	83 ec 0c             	sub    esp,0xc
100036e5:	68 c0 12 00 00       	push   0x12c0
100036ea:	e8 fc ff ff ff       	call   100036eb <firstRun()+0x14d6>	100036eb: R_386_PC32	milliTenthSleep(unsigned int)
100036ef:	83 c4 10             	add    esp,0x10
100036f2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100036f4: R_386_32	installKey
100036f9:	e9 e5 01 00 00       	jmp    100038e3 <firstRun()+0x16ce>
100036fe:	83 ec 0c             	sub    esp,0xc
10003701:	68 f0 0a 00 00       	push   0xaf0
10003706:	e8 fc ff ff ff       	call   10003707 <firstRun()+0x14f2>	10003707: R_386_PC32	milliTenthSleep(unsigned int)
1000370b:	83 c4 10             	add    esp,0x10
1000370e:	e8 fc ff ff ff       	call   1000370f <firstRun()+0x14fa>	1000370f: R_386_PC32	drawBootScreen()
10003713:	83 ec 08             	sub    esp,0x8
10003716:	6a 01                	push   0x1
10003718:	68 d3 43 00 10       	push   0x100043d3	10003719: R_386_32	.text
1000371d:	6a 0e                	push   0xe
1000371f:	6a 32                	push   0x32
10003721:	6a 02                	push   0x2
10003723:	6a 16                	push   0x16
10003725:	e8 fc ff ff ff       	call   10003726 <firstRun()+0x1511>	10003726: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
1000372a:	83 c4 20             	add    esp,0x20
1000372d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000372e: R_386_32	term
10003732:	83 ec 04             	sub    esp,0x4
10003735:	6a 05                	push   0x5
10003737:	6a 18                	push   0x18
10003739:	50                   	push   eax
1000373a:	e8 fc ff ff ff       	call   1000373b <firstRun()+0x1526>	1000373b: R_386_PC32	VgaText::setCursor(int, int)
1000373f:	83 c4 10             	add    esp,0x10
10003742:	a1 00 00 00 00       	mov    eax,ds:0x0	10003743: R_386_32	term
10003747:	6a 07                	push   0x7
10003749:	6a 00                	push   0x0
1000374b:	68 e0 43 00 10       	push   0x100043e0	1000374c: R_386_32	.text
10003750:	50                   	push   eax
10003751:	e8 fc ff ff ff       	call   10003752 <firstRun()+0x153d>	10003752: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003756:	83 c4 10             	add    esp,0x10
10003759:	a1 00 00 00 00       	mov    eax,ds:0x0	1000375a: R_386_32	term
1000375e:	83 ec 04             	sub    esp,0x4
10003761:	6a 06                	push   0x6
10003763:	6a 18                	push   0x18
10003765:	50                   	push   eax
10003766:	e8 fc ff ff ff       	call   10003767 <firstRun()+0x1552>	10003767: R_386_PC32	VgaText::setCursor(int, int)
1000376b:	83 c4 10             	add    esp,0x10
1000376e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000376f: R_386_32	term
10003773:	6a 07                	push   0x7
10003775:	6a 00                	push   0x0
10003777:	68 98 43 00 10       	push   0x10004398	10003778: R_386_32	.text
1000377c:	50                   	push   eax
1000377d:	e8 fc ff ff ff       	call   1000377e <firstRun()+0x1569>	1000377e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003782:	83 c4 10             	add    esp,0x10
10003785:	a1 00 00 00 00       	mov    eax,ds:0x0	10003786: R_386_32	term
1000378a:	83 ec 04             	sub    esp,0x4
1000378d:	6a 08                	push   0x8
1000378f:	6a 1c                	push   0x1c
10003791:	50                   	push   eax
10003792:	e8 fc ff ff ff       	call   10003793 <firstRun()+0x157e>	10003793: R_386_PC32	VgaText::setCursor(int, int)
10003797:	83 c4 10             	add    esp,0x10
1000379a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000379b: R_386_32	term
1000379f:	6a 07                	push   0x7
100037a1:	6a 00                	push   0x0
100037a3:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
100037a9:	52                   	push   edx
100037aa:	50                   	push   eax
100037ab:	e8 fc ff ff ff       	call   100037ac <firstRun()+0x1597>	100037ac: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037b0:	83 c4 10             	add    esp,0x10
100037b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100037b4: R_386_32	term
100037b8:	83 ec 04             	sub    esp,0x4
100037bb:	6a 08                	push   0x8
100037bd:	6a 2c                	push   0x2c
100037bf:	50                   	push   eax
100037c0:	e8 fc ff ff ff       	call   100037c1 <firstRun()+0x15ac>	100037c1: R_386_PC32	VgaText::setCursor(int, int)
100037c5:	83 c4 10             	add    esp,0x10
100037c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100037c9: R_386_32	term
100037cd:	6a 07                	push   0x7
100037cf:	6a 07                	push   0x7
100037d1:	6a 20                	push   0x20
100037d3:	50                   	push   eax
100037d4:	e8 fc ff ff ff       	call   100037d5 <firstRun()+0x15c0>	100037d5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100037d9:	83 c4 10             	add    esp,0x10
100037dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100037dd: R_386_32	term
100037e1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100037e4:	83 c2 1c             	add    edx,0x1c
100037e7:	83 ec 04             	sub    esp,0x4
100037ea:	6a 08                	push   0x8
100037ec:	52                   	push   edx
100037ed:	50                   	push   eax
100037ee:	e8 fc ff ff ff       	call   100037ef <firstRun()+0x15da>	100037ef: R_386_PC32	VgaText::setCursor(int, int)
100037f3:	83 c4 10             	add    esp,0x10
100037f6:	83 ec 0c             	sub    esp,0xc
100037f9:	68 05 44 00 10       	push   0x10004405	100037fa: R_386_32	.text
100037fe:	6a 0b                	push   0xb
10003800:	6a 2b                	push   0x2b
10003802:	6a 0a                	push   0xa
10003804:	6a 22                	push   0x22
10003806:	e8 fc ff ff ff       	call   10003807 <firstRun()+0x15f2>	10003807: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000380b:	83 c4 20             	add    esp,0x20
1000380e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000380f: R_386_32	term
10003813:	83 ec 04             	sub    esp,0x4
10003816:	6a 0d                	push   0xd
10003818:	6a 24                	push   0x24
1000381a:	50                   	push   eax
1000381b:	e8 fc ff ff ff       	call   1000381c <firstRun()+0x1607>	1000381c: R_386_PC32	VgaText::setCursor(int, int)
10003820:	83 c4 10             	add    esp,0x10
10003823:	a1 00 00 00 00       	mov    eax,ds:0x0	10003824: R_386_32	term
10003828:	83 ec 08             	sub    esp,0x8
1000382b:	68 1c 44 00 10       	push   0x1000441c	1000382c: R_386_32	.text
10003830:	50                   	push   eax
10003831:	e8 fc ff ff ff       	call   10003832 <firstRun()+0x161d>	10003832: R_386_PC32	VgaText::puts(char const*)
10003836:	83 c4 10             	add    esp,0x10
10003839:	a1 00 00 00 00       	mov    eax,ds:0x0	1000383a: R_386_32	term
1000383e:	83 ec 04             	sub    esp,0x4
10003841:	6a 0f                	push   0xf
10003843:	6a 24                	push   0x24
10003845:	50                   	push   eax
10003846:	e8 fc ff ff ff       	call   10003847 <firstRun()+0x1632>	10003847: R_386_PC32	VgaText::setCursor(int, int)
1000384b:	83 c4 10             	add    esp,0x10
1000384e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000384f: R_386_32	term
10003853:	83 ec 08             	sub    esp,0x8
10003856:	68 44 44 00 10       	push   0x10004444	10003857: R_386_32	.text
1000385b:	50                   	push   eax
1000385c:	e8 fc ff ff ff       	call   1000385d <firstRun()+0x1648>	1000385d: R_386_PC32	VgaText::puts(char const*)
10003861:	83 c4 10             	add    esp,0x10
10003864:	a1 00 00 00 00       	mov    eax,ds:0x0	10003865: R_386_32	term
10003869:	83 ec 04             	sub    esp,0x4
1000386c:	6a 10                	push   0x10
1000386e:	6a 24                	push   0x24
10003870:	50                   	push   eax
10003871:	e8 fc ff ff ff       	call   10003872 <firstRun()+0x165d>	10003872: R_386_PC32	VgaText::setCursor(int, int)
10003876:	83 c4 10             	add    esp,0x10
10003879:	a1 00 00 00 00       	mov    eax,ds:0x0	1000387a: R_386_32	term
1000387e:	83 ec 08             	sub    esp,0x8
10003881:	68 68 44 00 10       	push   0x10004468	10003882: R_386_32	.text
10003886:	50                   	push   eax
10003887:	e8 fc ff ff ff       	call   10003888 <firstRun()+0x1673>	10003888: R_386_PC32	VgaText::puts(char const*)
1000388c:	83 c4 10             	add    esp,0x10
1000388f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003891: R_386_32	installKey
10003896:	83 ec 0c             	sub    esp,0xc
10003899:	68 94 11 00 00       	push   0x1194
1000389e:	e8 fc ff ff ff       	call   1000389f <firstRun()+0x168a>	1000389f: R_386_PC32	milliTenthSleep(unsigned int)
100038a3:	83 c4 10             	add    esp,0x10
100038a6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100038a8: R_386_32	installKey
100038ad:	a0 00 00 00 00       	mov    al,ds:0x0	100038ae: R_386_32	installKey
100038b2:	84 c0                	test   al,al
100038b4:	0f 94 c0             	sete   al
100038b7:	84 c0                	test   al,al
100038b9:	74 02                	je     100038bd <firstRun()+0x16a8>
100038bb:	eb f0                	jmp    100038ad <firstRun()+0x1698>
100038bd:	e8 fc ff ff ff       	call   100038be <firstRun()+0x16a9>	100038be: R_386_PC32	drawBootScreen()
100038c2:	83 ec 0c             	sub    esp,0xc
100038c5:	68 9c 18 00 00       	push   0x189c
100038ca:	e8 fc ff ff ff       	call   100038cb <firstRun()+0x16b6>	100038cb: R_386_PC32	milliTenthSleep(unsigned int)
100038cf:	83 c4 10             	add    esp,0x10
100038d2:	e9 f7 fa ff ff       	jmp    100033ce <firstRun()+0x11b9>
100038d7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100038d9: R_386_32	installKey
100038de:	e9 65 fb ff ff       	jmp    10003448 <firstRun()+0x1233>
100038e3:	e8 fc ff ff ff       	call   100038e4 <firstRun()+0x16cf>	100038e4: R_386_PC32	drawBootScreen()
100038e8:	83 ec 0c             	sub    esp,0xc
100038eb:	68 89 44 00 10       	push   0x10004489	100038ec: R_386_32	.text
100038f0:	6a 0d                	push   0xd
100038f2:	6a 32                	push   0x32
100038f4:	6a 05                	push   0x5
100038f6:	6a 16                	push   0x16
100038f8:	e8 fc ff ff ff       	call   100038f9 <firstRun()+0x16e4>	100038f9: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100038fd:	83 c4 20             	add    esp,0x20
10003900:	83 ec 0c             	sub    esp,0xc
10003903:	6a 00                	push   0x0
10003905:	e8 fc ff ff ff       	call   10003906 <firstRun()+0x16f1>	10003906: R_386_PC32	bootInstallTasks(int)
1000390a:	83 c4 10             	add    esp,0x10
1000390d:	83 ec 04             	sub    esp,0x4
10003910:	6a 0c                	push   0xc
10003912:	68 a1 44 00 10       	push   0x100044a1	10003913: R_386_32	.text
10003917:	68 b2 44 00 10       	push   0x100044b2	10003918: R_386_32	.text
1000391c:	e8 fc ff ff ff       	call   1000391d <firstRun()+0x1708>	1000391d: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10003921:	83 c4 10             	add    esp,0x10
10003924:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10003927:	83 ec 0c             	sub    esp,0xc
1000392a:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000392d:	e8 fc ff ff ff       	call   1000392e <firstRun()+0x1719>	1000392e: R_386_PC32	Virt::setupPageSwapping(int)
10003932:	83 c4 10             	add    esp,0x10
10003935:	83 ec 0c             	sub    esp,0xc
10003938:	6a 01                	push   0x1
1000393a:	e8 fc ff ff ff       	call   1000393b <firstRun()+0x1726>	1000393b: R_386_PC32	bootInstallTasks(int)
1000393f:	83 c4 10             	add    esp,0x10
10003942:	83 ec 0c             	sub    esp,0xc
10003945:	68 b9 44 00 10       	push   0x100044b9	10003946: R_386_32	.text
1000394a:	e8 fc ff ff ff       	call   1000394b <firstRun()+0x1736>	1000394b: R_386_PC32	rmtree(char*)
1000394f:	83 c4 10             	add    esp,0x10
10003952:	83 ec 0c             	sub    esp,0xc
10003955:	68 d3 44 00 10       	push   0x100044d3	10003956: R_386_32	.text
1000395a:	e8 fc ff ff ff       	call   1000395b <firstRun()+0x1746>	1000395b: R_386_PC32	rmtree(char*)
1000395f:	83 c4 10             	add    esp,0x10
10003962:	83 ec 08             	sub    esp,0x8
10003965:	68 c0 01 00 00       	push   0x1c0
1000396a:	68 b9 44 00 10       	push   0x100044b9	1000396b: R_386_32	.text
1000396f:	e8 fc ff ff ff       	call   10003970 <firstRun()+0x175b>	10003970: R_386_PC32	mkdir(char const*, int)
10003974:	83 c4 10             	add    esp,0x10
10003977:	83 ec 08             	sub    esp,0x8
1000397a:	68 c0 01 00 00       	push   0x1c0
1000397f:	68 d3 44 00 10       	push   0x100044d3	10003980: R_386_32	.text
10003984:	e8 fc ff ff ff       	call   10003985 <firstRun()+0x1770>	10003985: R_386_PC32	mkdir(char const*, int)
10003989:	83 c4 10             	add    esp,0x10
1000398c:	83 ec 08             	sub    esp,0x8
1000398f:	68 b9 44 00 10       	push   0x100044b9	10003990: R_386_32	.text
10003994:	68 ec 44 00 10       	push   0x100044ec	10003995: R_386_32	.text
10003999:	e8 fc ff ff ff       	call   1000399a <firstRun()+0x1785>	1000399a: R_386_PC32	copytree(char*, char*)
1000399e:	83 c4 10             	add    esp,0x10
100039a1:	83 ec 0c             	sub    esp,0xc
100039a4:	6a 02                	push   0x2
100039a6:	e8 fc ff ff ff       	call   100039a7 <firstRun()+0x1792>	100039a7: R_386_PC32	bootInstallTasks(int)
100039ab:	83 c4 10             	add    esp,0x10
100039ae:	83 ec 0c             	sub    esp,0xc
100039b1:	8d 45 90             	lea    eax,[ebp-0x70]
100039b4:	50                   	push   eax
100039b5:	e8 fc ff ff ff       	call   100039b6 <firstRun()+0x17a1>	100039b6: R_386_PC32	createUser(char const*)
100039ba:	83 c4 10             	add    esp,0x10
100039bd:	83 ec 0c             	sub    esp,0xc
100039c0:	6a 03                	push   0x3
100039c2:	e8 fc ff ff ff       	call   100039c3 <firstRun()+0x17ae>	100039c3: R_386_PC32	bootInstallTasks(int)
100039c7:	83 c4 10             	add    esp,0x10
100039ca:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100039cc: R_386_32	VgaText::hiddenOut
100039d1:	90                   	nop
100039d2:	8d 65 f8             	lea    esp,[ebp-0x8]
100039d5:	5b                   	pop    ebx
100039d6:	5f                   	pop    edi
100039d7:	5d                   	pop    ebp
100039d8:	c3                   	ret    

100039d9 <loadExtensions()>:
100039d9:	55                   	push   ebp
100039da:	89 e5                	mov    ebp,esp
100039dc:	83 ec 08             	sub    esp,0x8
100039df:	83 ec 0c             	sub    esp,0xc
100039e2:	68 0d 45 00 10       	push   0x1000450d	100039e3: R_386_32	.text
100039e7:	e8 fc ff ff ff       	call   100039e8 <loadExtensions()+0xf>	100039e8: R_386_PC32	KeSetBootMessage(char const*)
100039ec:	83 c4 10             	add    esp,0x10
100039ef:	90                   	nop
100039f0:	c9                   	leave  
100039f1:	c3                   	ret    

100039f2 <begin(void*)>:
100039f2:	55                   	push   ebp
100039f3:	89 e5                	mov    ebp,esp
100039f5:	57                   	push   edi
100039f6:	56                   	push   esi
100039f7:	53                   	push   ebx
100039f8:	83 ec 4c             	sub    esp,0x4c
100039fb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100039ff:	83 ec 0c             	sub    esp,0xc
10003a02:	68 14 01 00 00       	push   0x114
10003a07:	e8 fc ff ff ff       	call   10003a08 <begin(void*)+0x16>	10003a08: R_386_PC32	operator new(unsigned long)
10003a0c:	83 c4 10             	add    esp,0x10
10003a0f:	89 c3                	mov    ebx,eax
10003a11:	a1 00 00 00 00       	mov    eax,ds:0x0	10003a12: R_386_32	kernelProcess
10003a16:	83 ec 04             	sub    esp,0x4
10003a19:	50                   	push   eax
10003a1a:	68 23 45 00 10       	push   0x10004523	10003a1b: R_386_32	.text
10003a1f:	53                   	push   ebx
10003a20:	e8 fc ff ff ff       	call   10003a21 <begin(void*)+0x2f>	10003a21: R_386_PC32	File::File(char const*, Process*)
10003a25:	83 c4 10             	add    esp,0x10
10003a28:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10003a2b:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003a2f:	75 10                	jne    10003a41 <begin(void*)+0x4f>
10003a31:	83 ec 0c             	sub    esp,0xc
10003a34:	68 41 45 00 10       	push   0x10004541	10003a35: R_386_32	.text
10003a39:	e8 fc ff ff ff       	call   10003a3a <begin(void*)+0x48>	10003a3a: R_386_PC32	KePanic(char const*)
10003a3e:	83 c4 10             	add    esp,0x10
10003a41:	83 ec 08             	sub    esp,0x8
10003a44:	6a 01                	push   0x1
10003a46:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003a49:	e8 fc ff ff ff       	call   10003a4a <begin(void*)+0x58>	10003a4a: R_386_PC32	File::open(FileOpenMode)
10003a4e:	83 c4 10             	add    esp,0x10
10003a51:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10003a54:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10003a58:	75 10                	jne    10003a6a <begin(void*)+0x78>
10003a5a:	83 ec 0c             	sub    esp,0xc
10003a5d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003a60:	e8 fc ff ff ff       	call   10003a61 <begin(void*)+0x6f>	10003a61: R_386_PC32	File::close()
10003a65:	83 c4 10             	add    esp,0x10
10003a68:	eb 04                	jmp    10003a6e <begin(void*)+0x7c>
10003a6a:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10003a6e:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003a72:	74 15                	je     10003a89 <begin(void*)+0x97>
10003a74:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10003a77:	8b 00                	mov    eax,DWORD PTR [eax]
10003a79:	83 c0 08             	add    eax,0x8
10003a7c:	8b 00                	mov    eax,DWORD PTR [eax]
10003a7e:	83 ec 0c             	sub    esp,0xc
10003a81:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003a84:	ff d0                	call   eax
10003a86:	83 c4 10             	add    esp,0x10
10003a89:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003a8b: R_386_32	KeIsPreemptionOn
10003a90:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003a94:	0f 84 54 01 00 00    	je     10003bee <begin(void*)+0x1fc>
10003a9a:	83 ec 0c             	sub    esp,0xc
10003a9d:	68 51 45 00 10       	push   0x10004551	10003a9e: R_386_32	.text
10003aa2:	e8 fc ff ff ff       	call   10003aa3 <begin(void*)+0xb1>	10003aa3: R_386_PC32	CmOpen(char const*)
10003aa7:	83 c4 10             	add    esp,0x10
10003aaa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10003aad:	83 ec 04             	sub    esp,0x4
10003ab0:	68 6d 45 00 10       	push   0x1000456d	10003ab1: R_386_32	.text
10003ab5:	6a 00                	push   0x0
10003ab7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003aba:	e8 fc ff ff ff       	call   10003abb <begin(void*)+0xc9>	10003abb: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10003abf:	83 c4 10             	add    esp,0x10
10003ac2:	83 ec 08             	sub    esp,0x8
10003ac5:	68 6d 45 00 10       	push   0x1000456d	10003ac6: R_386_32	.text
10003aca:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003acd:	e8 fc ff ff ff       	call   10003ace <begin(void*)+0xdc>	10003ace: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003ad2:	83 c4 10             	add    esp,0x10
10003ad5:	83 ec 08             	sub    esp,0x8
10003ad8:	50                   	push   eax
10003ad9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003adc:	e8 fc ff ff ff       	call   10003add <begin(void*)+0xeb>	10003add: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10003ae1:	83 c4 10             	add    esp,0x10
10003ae4:	83 ec 04             	sub    esp,0x4
10003ae7:	68 76 45 00 10       	push   0x10004576	10003ae8: R_386_32	.text
10003aec:	50                   	push   eax
10003aed:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003af0:	e8 fc ff ff ff       	call   10003af1 <begin(void*)+0xff>	10003af1: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10003af5:	83 c4 10             	add    esp,0x10
10003af8:	83 ec 08             	sub    esp,0x8
10003afb:	68 86 45 00 10       	push   0x10004586	10003afc: R_386_32	.text
10003b00:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b03:	e8 fc ff ff ff       	call   10003b04 <begin(void*)+0x112>	10003b04: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003b08:	83 c4 10             	add    esp,0x10
10003b0b:	83 ec 08             	sub    esp,0x8
10003b0e:	50                   	push   eax
10003b0f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b12:	e8 fc ff ff ff       	call   10003b13 <begin(void*)+0x121>	10003b13: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10003b17:	83 c4 10             	add    esp,0x10
10003b1a:	83 ec 04             	sub    esp,0x4
10003b1d:	68 9f 45 00 10       	push   0x1000459f	10003b1e: R_386_32	.text
10003b22:	50                   	push   eax
10003b23:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b26:	e8 fc ff ff ff       	call   10003b27 <begin(void*)+0x135>	10003b27: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10003b2b:	83 c4 10             	add    esp,0x10
10003b2e:	83 ec 08             	sub    esp,0x8
10003b31:	68 a4 45 00 10       	push   0x100045a4	10003b32: R_386_32	.text
10003b36:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b39:	e8 fc ff ff ff       	call   10003b3a <begin(void*)+0x148>	10003b3a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003b3e:	83 c4 10             	add    esp,0x10
10003b41:	83 ec 04             	sub    esp,0x4
10003b44:	68 c2 45 00 10       	push   0x100045c2	10003b45: R_386_32	.text
10003b49:	50                   	push   eax
10003b4a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b4d:	e8 fc ff ff ff       	call   10003b4e <begin(void*)+0x15c>	10003b4e: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10003b52:	83 c4 10             	add    esp,0x10
10003b55:	83 ec 08             	sub    esp,0x8
10003b58:	68 6d 45 00 10       	push   0x1000456d	10003b59: R_386_32	.text
10003b5d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b60:	e8 fc ff ff ff       	call   10003b61 <begin(void*)+0x16f>	10003b61: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003b65:	83 c4 10             	add    esp,0x10
10003b68:	83 ec 08             	sub    esp,0x8
10003b6b:	50                   	push   eax
10003b6c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b6f:	e8 fc ff ff ff       	call   10003b70 <begin(void*)+0x17e>	10003b70: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10003b74:	83 c4 10             	add    esp,0x10
10003b77:	83 ec 08             	sub    esp,0x8
10003b7a:	6a 6a                	push   0x6a
10003b7c:	6a 00                	push   0x0
10003b7e:	6a 01                	push   0x1
10003b80:	68 cf 45 00 10       	push   0x100045cf	10003b81: R_386_32	.text
10003b85:	50                   	push   eax
10003b86:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003b89:	e8 fc ff ff ff       	call   10003b8a <begin(void*)+0x198>	10003b8a: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10003b8e:	83 c4 20             	add    esp,0x20
10003b91:	83 ec 08             	sub    esp,0x8
10003b94:	6a 6d                	push   0x6d
10003b96:	68 fe ca 00 00       	push   0xcafe
10003b9b:	68 ef be ad de       	push   0xdeadbeef
10003ba0:	68 d7 45 00 10       	push   0x100045d7	10003ba1: R_386_32	.text
10003ba5:	6a 01                	push   0x1
10003ba7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003baa:	e8 fc ff ff ff       	call   10003bab <begin(void*)+0x1b9>	10003bab: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10003baf:	83 c4 20             	add    esp,0x20
10003bb2:	83 ec 08             	sub    esp,0x8
10003bb5:	68 a4 45 00 10       	push   0x100045a4	10003bb6: R_386_32	.text
10003bba:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003bbd:	e8 fc ff ff ff       	call   10003bbe <begin(void*)+0x1cc>	10003bbe: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003bc2:	83 c4 10             	add    esp,0x10
10003bc5:	83 ec 04             	sub    esp,0x4
10003bc8:	68 e4 45 00 10       	push   0x100045e4	10003bc9: R_386_32	.text
10003bcd:	50                   	push   eax
10003bce:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003bd1:	e8 fc ff ff ff       	call   10003bd2 <begin(void*)+0x1e0>	10003bd2: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10003bd6:	83 c4 10             	add    esp,0x10
10003bd9:	83 ec 0c             	sub    esp,0xc
10003bdc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003bdf:	e8 fc ff ff ff       	call   10003be0 <begin(void*)+0x1ee>	10003be0: R_386_PC32	CmClose(Reghive_Tag*)
10003be4:	83 c4 10             	add    esp,0x10
10003be7:	e8 fc ff ff ff       	call   10003be8 <begin(void*)+0x1f6>	10003be8: R_386_PC32	firstRun()
10003bec:	eb 05                	jmp    10003bf3 <begin(void*)+0x201>
10003bee:	e8 fc ff ff ff       	call   10003bef <begin(void*)+0x1fd>	10003bef: R_386_PC32	loadExtensions()
10003bf3:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003bf7:	0f 84 f8 02 00 00    	je     10003ef5 <begin(void*)+0x503>
10003bfd:	8d 45 b0             	lea    eax,[ebp-0x50]
10003c00:	bb 9c 47 00 10       	mov    ebx,0x1000479c	10003c01: R_386_32	.text
10003c05:	ba 04 00 00 00       	mov    edx,0x4
10003c0a:	89 c7                	mov    edi,eax
10003c0c:	89 de                	mov    esi,ebx
10003c0e:	89 d1                	mov    ecx,edx
10003c10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003c12:	83 ec 0c             	sub    esp,0xc
10003c15:	68 24 07 00 00       	push   0x724
10003c1a:	e8 fc ff ff ff       	call   10003c1b <begin(void*)+0x229>	10003c1b: R_386_PC32	operator new(unsigned long)
10003c1f:	83 c4 10             	add    esp,0x10
10003c22:	89 c3                	mov    ebx,eax
10003c24:	8d 45 b0             	lea    eax,[ebp-0x50]
10003c27:	50                   	push   eax
10003c28:	6a 00                	push   0x0
10003c2a:	68 66 46 00 10       	push   0x10004666	10003c2b: R_386_32	.text
10003c2f:	53                   	push   ebx
10003c30:	e8 fc ff ff ff       	call   10003c31 <begin(void*)+0x23f>	10003c31: R_386_PC32	Process::Process(char const*, Process*, char**)
10003c35:	83 c4 10             	add    esp,0x10
10003c38:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10003c3b:	83 ec 0c             	sub    esp,0xc
10003c3e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003c41:	e8 fc ff ff ff       	call   10003c42 <begin(void*)+0x250>	10003c42: R_386_PC32	Process::createUserThread()
10003c46:	83 c4 10             	add    esp,0x10
10003c49:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003c4b: R_386_32	VgaText::hiddenOut
10003c50:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c51: R_386_32	term
10003c55:	83 ec 0c             	sub    esp,0xc
10003c58:	50                   	push   eax
10003c59:	e8 fc ff ff ff       	call   10003c5a <begin(void*)+0x268>	10003c5a: R_386_PC32	setActiveTerminal(VgaText*)
10003c5e:	83 c4 10             	add    esp,0x10
10003c61:	e8 fc ff ff ff       	call   10003c62 <begin(void*)+0x270>	10003c62: R_386_PC32	drawBootScreen()
10003c66:	83 ec 0c             	sub    esp,0xc
10003c69:	68 89 44 00 10       	push   0x10004489	10003c6a: R_386_32	.text
10003c6e:	6a 0d                	push   0xd
10003c70:	6a 32                	push   0x32
10003c72:	6a 05                	push   0x5
10003c74:	6a 16                	push   0x16
10003c76:	e8 fc ff ff ff       	call   10003c77 <begin(void*)+0x285>	10003c77: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003c7b:	83 c4 20             	add    esp,0x20
10003c7e:	83 ec 0c             	sub    esp,0xc
10003c81:	6a 03                	push   0x3
10003c83:	e8 fc ff ff ff       	call   10003c84 <begin(void*)+0x292>	10003c84: R_386_PC32	bootInstallTasks(int)
10003c88:	83 c4 10             	add    esp,0x10
10003c8b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003c8d: R_386_32	VgaText::hiddenOut
10003c92:	83 ec 0c             	sub    esp,0xc
10003c95:	68 14 01 00 00       	push   0x114
10003c9a:	e8 fc ff ff ff       	call   10003c9b <begin(void*)+0x2a9>	10003c9b: R_386_PC32	operator new(unsigned long)
10003c9f:	83 c4 10             	add    esp,0x10
10003ca2:	89 c3                	mov    ebx,eax
10003ca4:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ca5: R_386_32	kernelProcess
10003ca9:	83 ec 04             	sub    esp,0x4
10003cac:	50                   	push   eax
10003cad:	68 83 46 00 10       	push   0x10004683	10003cae: R_386_32	.text
10003cb2:	53                   	push   ebx
10003cb3:	e8 fc ff ff ff       	call   10003cb4 <begin(void*)+0x2c2>	10003cb4: R_386_PC32	File::File(char const*, Process*)
10003cb8:	83 c4 10             	add    esp,0x10
10003cbb:	89 5d c8             	mov    DWORD PTR [ebp-0x38],ebx
10003cbe:	83 ec 08             	sub    esp,0x8
10003cc1:	6a 01                	push   0x1
10003cc3:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10003cc6:	e8 fc ff ff ff       	call   10003cc7 <begin(void*)+0x2d5>	10003cc7: R_386_PC32	File::open(FileOpenMode)
10003ccb:	83 c4 10             	add    esp,0x10
10003cce:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10003cd1:	83 7d c4 00          	cmp    DWORD PTR [ebp-0x3c],0x0
10003cd5:	75 39                	jne    10003d10 <begin(void*)+0x31e>
10003cd7:	83 ec 0c             	sub    esp,0xc
10003cda:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10003cdd:	e8 fc ff ff ff       	call   10003cde <begin(void*)+0x2ec>	10003cde: R_386_PC32	File::close()
10003ce2:	83 c4 10             	add    esp,0x10
10003ce5:	83 ec 0c             	sub    esp,0xc
10003ce8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10003ceb:	e8 fc ff ff ff       	call   10003cec <begin(void*)+0x2fa>	10003cec: R_386_PC32	File::unlink()
10003cf0:	83 c4 10             	add    esp,0x10
10003cf3:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10003cf7:	74 44                	je     10003d3d <begin(void*)+0x34b>
10003cf9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10003cfc:	8b 00                	mov    eax,DWORD PTR [eax]
10003cfe:	83 c0 08             	add    eax,0x8
10003d01:	8b 00                	mov    eax,DWORD PTR [eax]
10003d03:	83 ec 0c             	sub    esp,0xc
10003d06:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10003d09:	ff d0                	call   eax
10003d0b:	83 c4 10             	add    esp,0x10
10003d0e:	eb 2d                	jmp    10003d3d <begin(void*)+0x34b>
10003d10:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10003d14:	74 15                	je     10003d2b <begin(void*)+0x339>
10003d16:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10003d19:	8b 00                	mov    eax,DWORD PTR [eax]
10003d1b:	83 c0 08             	add    eax,0x8
10003d1e:	8b 00                	mov    eax,DWORD PTR [eax]
10003d20:	83 ec 0c             	sub    esp,0xc
10003d23:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10003d26:	ff d0                	call   eax
10003d28:	83 c4 10             	add    esp,0x10
10003d2b:	83 ec 0c             	sub    esp,0xc
10003d2e:	6a 01                	push   0x1
10003d30:	e8 fc ff ff ff       	call   10003d31 <begin(void*)+0x33f>	10003d31: R_386_PC32	sleep(unsigned int)
10003d35:	83 c4 10             	add    esp,0x10
10003d38:	e9 55 ff ff ff       	jmp    10003c92 <begin(void*)+0x2a0>
10003d3d:	90                   	nop
10003d3e:	83 ec 0c             	sub    esp,0xc
10003d41:	6a 02                	push   0x2
10003d43:	e8 fc ff ff ff       	call   10003d44 <begin(void*)+0x352>	10003d44: R_386_PC32	sleep(unsigned int)
10003d48:	83 c4 10             	add    esp,0x10
10003d4b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003d4d: R_386_32	VgaText::hiddenOut
10003d52:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d53: R_386_32	term
10003d57:	83 ec 0c             	sub    esp,0xc
10003d5a:	50                   	push   eax
10003d5b:	e8 fc ff ff ff       	call   10003d5c <begin(void*)+0x36a>	10003d5c: R_386_PC32	setActiveTerminal(VgaText*)
10003d60:	83 c4 10             	add    esp,0x10
10003d63:	e8 fc ff ff ff       	call   10003d64 <begin(void*)+0x372>	10003d64: R_386_PC32	drawBootScreen()
10003d68:	83 ec 0c             	sub    esp,0xc
10003d6b:	68 89 44 00 10       	push   0x10004489	10003d6c: R_386_32	.text
10003d70:	6a 0d                	push   0xd
10003d72:	6a 32                	push   0x32
10003d74:	6a 05                	push   0x5
10003d76:	6a 16                	push   0x16
10003d78:	e8 fc ff ff ff       	call   10003d79 <begin(void*)+0x387>	10003d79: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003d7d:	83 c4 20             	add    esp,0x20
10003d80:	83 ec 0c             	sub    esp,0xc
10003d83:	6a 04                	push   0x4
10003d85:	e8 fc ff ff ff       	call   10003d86 <begin(void*)+0x394>	10003d86: R_386_PC32	bootInstallTasks(int)
10003d8a:	83 c4 10             	add    esp,0x10
10003d8d:	83 ec 08             	sub    esp,0x8
10003d90:	68 dd dd 00 00       	push   0xdddd
10003d95:	68 8d 46 00 10       	push   0x1000468d	10003d96: R_386_32	.text
10003d9a:	e8 fc ff ff ff       	call   10003d9b <begin(void*)+0x3a9>	10003d9b: R_386_PC32	backupTree(char*, unsigned short)
10003d9f:	83 c4 10             	add    esp,0x10
10003da2:	83 ec 08             	sub    esp,0x8
10003da5:	68 ee ee 00 00       	push   0xeeee
10003daa:	68 a0 46 00 10       	push   0x100046a0	10003dab: R_386_32	.text
10003daf:	e8 fc ff ff ff       	call   10003db0 <begin(void*)+0x3be>	10003db0: R_386_PC32	backupTree(char*, unsigned short)
10003db4:	83 c4 10             	add    esp,0x10
10003db7:	83 ec 08             	sub    esp,0x8
10003dba:	68 ff ff 00 00       	push   0xffff
10003dbf:	68 b2 46 00 10       	push   0x100046b2	10003dc0: R_386_32	.text
10003dc4:	e8 fc ff ff ff       	call   10003dc5 <begin(void*)+0x3d3>	10003dc5: R_386_PC32	backupTree(char*, unsigned short)
10003dc9:	83 c4 10             	add    esp,0x10
10003dcc:	83 ec 0c             	sub    esp,0xc
10003dcf:	6a 05                	push   0x5
10003dd1:	e8 fc ff ff ff       	call   10003dd2 <begin(void*)+0x3e0>	10003dd2: R_386_PC32	bootInstallTasks(int)
10003dd6:	83 c4 10             	add    esp,0x10
10003dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dda: R_386_32	term
10003dde:	83 ec 0c             	sub    esp,0xc
10003de1:	50                   	push   eax
10003de2:	e8 fc ff ff ff       	call   10003de3 <begin(void*)+0x3f1>	10003de3: R_386_PC32	setActiveTerminal(VgaText*)
10003de7:	83 c4 10             	add    esp,0x10
10003dea:	e8 fc ff ff ff       	call   10003deb <begin(void*)+0x3f9>	10003deb: R_386_PC32	drawBootScreen()
10003def:	83 ec 0c             	sub    esp,0xc
10003df2:	68 89 44 00 10       	push   0x10004489	10003df3: R_386_32	.text
10003df7:	6a 0d                	push   0xd
10003df9:	6a 32                	push   0x32
10003dfb:	6a 05                	push   0x5
10003dfd:	6a 16                	push   0x16
10003dff:	e8 fc ff ff ff       	call   10003e00 <begin(void*)+0x40e>	10003e00: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003e04:	83 c4 20             	add    esp,0x20
10003e07:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e08: R_386_32	term
10003e0c:	83 ec 04             	sub    esp,0x4
10003e0f:	6a 08                	push   0x8
10003e11:	6a 18                	push   0x18
10003e13:	50                   	push   eax
10003e14:	e8 fc ff ff ff       	call   10003e15 <begin(void*)+0x423>	10003e15: R_386_PC32	VgaText::setCursor(int, int)
10003e19:	83 c4 10             	add    esp,0x10
10003e1c:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e1d: R_386_32	term
10003e21:	83 ec 08             	sub    esp,0x8
10003e24:	68 c8 46 00 10       	push   0x100046c8	10003e25: R_386_32	.text
10003e29:	50                   	push   eax
10003e2a:	e8 fc ff ff ff       	call   10003e2b <begin(void*)+0x439>	10003e2b: R_386_PC32	VgaText::puts(char const*)
10003e2f:	83 c4 10             	add    esp,0x10
10003e32:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e33: R_386_32	term
10003e37:	83 ec 04             	sub    esp,0x4
10003e3a:	6a 0a                	push   0xa
10003e3c:	6a 18                	push   0x18
10003e3e:	50                   	push   eax
10003e3f:	e8 fc ff ff ff       	call   10003e40 <begin(void*)+0x44e>	10003e40: R_386_PC32	VgaText::setCursor(int, int)
10003e44:	83 c4 10             	add    esp,0x10
10003e47:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e48: R_386_32	term
10003e4c:	83 ec 08             	sub    esp,0x8
10003e4f:	68 f0 46 00 10       	push   0x100046f0	10003e50: R_386_32	.text
10003e54:	50                   	push   eax
10003e55:	e8 fc ff ff ff       	call   10003e56 <begin(void*)+0x464>	10003e56: R_386_PC32	VgaText::puts(char const*)
10003e5a:	83 c4 10             	add    esp,0x10
10003e5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e5e: R_386_32	term
10003e62:	83 ec 04             	sub    esp,0x4
10003e65:	6a 0b                	push   0xb
10003e67:	6a 18                	push   0x18
10003e69:	50                   	push   eax
10003e6a:	e8 fc ff ff ff       	call   10003e6b <begin(void*)+0x479>	10003e6b: R_386_PC32	VgaText::setCursor(int, int)
10003e6f:	83 c4 10             	add    esp,0x10
10003e72:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e73: R_386_32	term
10003e77:	83 ec 08             	sub    esp,0x8
10003e7a:	68 1c 47 00 10       	push   0x1000471c	10003e7b: R_386_32	.text
10003e7f:	50                   	push   eax
10003e80:	e8 fc ff ff ff       	call   10003e81 <begin(void*)+0x48f>	10003e81: R_386_PC32	VgaText::puts(char const*)
10003e85:	83 c4 10             	add    esp,0x10
10003e88:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e8a: R_386_32	installKey
10003e8f:	a0 00 00 00 00       	mov    al,ds:0x0	10003e90: R_386_32	installKey
10003e94:	84 c0                	test   al,al
10003e96:	0f 94 c0             	sete   al
10003e99:	84 c0                	test   al,al
10003e9b:	74 02                	je     10003e9f <begin(void*)+0x4ad>
10003e9d:	eb f0                	jmp    10003e8f <begin(void*)+0x49d>
10003e9f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ea1: R_386_32	installKey
10003ea6:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ea7: R_386_32	term
10003eab:	83 ec 04             	sub    esp,0x4
10003eae:	6a 0c                	push   0xc
10003eb0:	6a 18                	push   0x18
10003eb2:	50                   	push   eax
10003eb3:	e8 fc ff ff ff       	call   10003eb4 <begin(void*)+0x4c2>	10003eb4: R_386_PC32	VgaText::setCursor(int, int)
10003eb8:	83 c4 10             	add    esp,0x10
10003ebb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003ebd: R_386_32	Krnl::computer
10003ec1:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ec2: R_386_32	Krnl::computer
10003ec6:	8b 00                	mov    eax,DWORD PTR [eax]
10003ec8:	83 c0 0c             	add    eax,0xc
10003ecb:	8b 00                	mov    eax,DWORD PTR [eax]
10003ecd:	6a 00                	push   0x0
10003ecf:	6a 00                	push   0x0
10003ed1:	6a 01                	push   0x1
10003ed3:	52                   	push   edx
10003ed4:	ff d0                	call   eax
10003ed6:	83 c4 10             	add    esp,0x10
10003ed9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003eda: R_386_32	term
10003ede:	6a 0f                	push   0xf
10003ee0:	6a 0c                	push   0xc
10003ee2:	68 30 47 00 10       	push   0x10004730	10003ee3: R_386_32	.text
10003ee7:	50                   	push   eax
10003ee8:	e8 fc ff ff ff       	call   10003ee9 <begin(void*)+0x4f7>	10003ee9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003eed:	83 c4 10             	add    esp,0x10
10003ef0:	e9 e0 00 00 00       	jmp    10003fd5 <begin(void*)+0x5e3>
10003ef5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ef7: R_386_32	VgaText::hiddenOut
10003efc:	83 ec 0c             	sub    esp,0xc
10003eff:	68 24 07 00 00       	push   0x724
10003f04:	e8 fc ff ff ff       	call   10003f05 <begin(void*)+0x513>	10003f05: R_386_PC32	operator new(unsigned long)
10003f09:	83 c4 10             	add    esp,0x10
10003f0c:	89 c3                	mov    ebx,eax
10003f0e:	6a 00                	push   0x0
10003f10:	6a 00                	push   0x0
10003f12:	68 66 46 00 10       	push   0x10004666	10003f13: R_386_32	.text
10003f17:	53                   	push   ebx
10003f18:	e8 fc ff ff ff       	call   10003f19 <begin(void*)+0x527>	10003f19: R_386_PC32	Process::Process(char const*, Process*, char**)
10003f1d:	83 c4 10             	add    esp,0x10
10003f20:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10003f23:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10003f26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10003f2c:	83 ec 0c             	sub    esp,0xc
10003f2f:	50                   	push   eax
10003f30:	e8 fc ff ff ff       	call   10003f31 <begin(void*)+0x53f>	10003f31: R_386_PC32	setActiveTerminal(VgaText*)
10003f35:	83 c4 10             	add    esp,0x10
10003f38:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003f3f:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
10003f43:	7f 2e                	jg     10003f73 <begin(void*)+0x581>
10003f45:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003f4c:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
10003f50:	7f 1c                	jg     10003f6e <begin(void*)+0x57c>
10003f52:	83 ec 0c             	sub    esp,0xc
10003f55:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10003f58:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003f5b:	6a 00                	push   0x0
10003f5d:	6a 07                	push   0x7
10003f5f:	6a 20                	push   0x20
10003f61:	e8 fc ff ff ff       	call   10003f62 <begin(void*)+0x570>	10003f62: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10003f66:	83 c4 20             	add    esp,0x20
10003f69:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10003f6c:	eb de                	jmp    10003f4c <begin(void*)+0x55a>
10003f6e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003f71:	eb cc                	jmp    10003f3f <begin(void*)+0x54d>
10003f73:	83 ec 0c             	sub    esp,0xc
10003f76:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003f79:	e8 fc ff ff ff       	call   10003f7a <begin(void*)+0x588>	10003f7a: R_386_PC32	Process::createUserThread()
10003f7e:	83 c4 10             	add    esp,0x10
10003f81:	83 ec 04             	sub    esp,0x4
10003f84:	6a 00                	push   0x0
10003f86:	68 56 47 00 10       	push   0x10004756	10003f87: R_386_32	.text
10003f8b:	68 5e 47 00 10       	push   0x1000475e	10003f8c: R_386_32	.text
10003f90:	e8 fc ff ff ff       	call   10003f91 <begin(void*)+0x59f>	10003f91: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10003f95:	83 c4 10             	add    esp,0x10
10003f98:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10003f9b:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10003f9f:	74 1d                	je     10003fbe <begin(void*)+0x5cc>
10003fa1:	83 ec 0c             	sub    esp,0xc
10003fa4:	68 64 47 00 10       	push   0x10004764	10003fa5: R_386_32	.text
10003fa9:	e8 fc ff ff ff       	call   10003faa <begin(void*)+0x5b8>	10003faa: R_386_PC32	Dbg::kprintf(char const*, ...)
10003fae:	83 c4 10             	add    esp,0x10
10003fb1:	83 ec 0c             	sub    esp,0xc
10003fb4:	6a 00                	push   0x0
10003fb6:	e8 fc ff ff ff       	call   10003fb7 <begin(void*)+0x5c5>	10003fb7: R_386_PC32	startGUIVESA(void*)
10003fbb:	83 c4 10             	add    esp,0x10
10003fbe:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10003fc1:	8b 00                	mov    eax,DWORD PTR [eax]
10003fc3:	83 ec 04             	sub    esp,0x4
10003fc6:	6a 00                	push   0x0
10003fc8:	8d 55 ac             	lea    edx,[ebp-0x54]
10003fcb:	52                   	push   edx
10003fcc:	50                   	push   eax
10003fcd:	e8 fc ff ff ff       	call   10003fce <begin(void*)+0x5dc>	10003fce: R_386_PC32	waitTask(int, int*, int)
10003fd2:	83 c4 10             	add    esp,0x10
10003fd5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003fd7: R_386_32	Krnl::computer
10003fdb:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fdc: R_386_32	Krnl::computer
10003fe0:	8b 00                	mov    eax,DWORD PTR [eax]
10003fe2:	83 c0 0c             	add    eax,0xc
10003fe5:	8b 00                	mov    eax,DWORD PTR [eax]
10003fe7:	6a 00                	push   0x0
10003fe9:	6a 00                	push   0x0
10003feb:	6a 00                	push   0x0
10003fed:	52                   	push   edx
10003fee:	ff d0                	call   eax
10003ff0:	83 c4 10             	add    esp,0x10
10003ff3:	83 ec 0c             	sub    esp,0xc
10003ff6:	68 6f 47 00 10       	push   0x1000476f	10003ff7: R_386_32	.text
10003ffb:	e8 fc ff ff ff       	call   10003ffc <begin(void*)+0x60a>	10003ffc: R_386_PC32	KePanic(char const*)
10004000:	83 c4 10             	add    esp,0x10
10004003:	eb fe                	jmp    10004003 <begin(void*)+0x611>
10004005:	66 90                	xchg   ax,ax
10004007:	90                   	nop

10004008 <TERMINAL_KEYBUFFER_IN_SIZE>:
10004008:	80 00 00 00                                         ....

1000400c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000400c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000401c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000402c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000403c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000404c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000405c:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000406c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000407c:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000408c:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000409c:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
100040ac:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
100040bc:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
100040cc:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
100040dc:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
100040ec:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
100040fc:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000410c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000411c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000412c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000413c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000414c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000415c:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000416c:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000417c:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000418c:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000419c:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
100041ac:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
100041bc:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
100041cc:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
100041dc:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
100041ec:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
100041fc:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000420c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000421c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000422c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000423c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000424c:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000425c:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000426c:	68 65 73 00 53 65 74 74 69 6e 67 20 75 70 20 74     hes.Setting up t
1000427c:	68 65 20 73 79 73 74 65 6d 20 66 6f 72 20 74 68     he system for th
1000428c:	65 20 66 69 72 73 74 20 74 69 6d 65 00 0a 0a 0a     e first time....
1000429c:	0a 0a 0a 00 54 65 73 74 00 42 61 6e 61 6e 61 20     ....Test.Banana 
100042ac:	53 65 74 75 70 00 00 00 50 6c 65 61 73 65 20 65     Setup...Please e
100042bc:	6e 74 65 72 20 79 6f 75 72 20 64 65 74 61 69 6c     nter your detail
100042cc:	73 2e 20 50 72 65 73 73 20 54 41 42 20 74 6f 20     s. Press TAB to 
100042dc:	73 77 69 74 63 68 00 62 65 74 77 65 65 6e 20 66     switch.between f
100042ec:	69 65 6c 64 73 2e 00 4e 61 6d 65 00 43 6f 6d 70     ields..Name.Comp
100042fc:	61 6e 79 00 20 20 20 20 20 20 20 20 20 20 20 20     any.            
1000430c:	20 20 20 20 20 20 20 20 20 20 20 20 20 00 20 20                  .  
1000431c:	11 00 20 20 20 00 50 72 65 73 73 20 45 4e 54 45     ..   .Press ENTE
1000432c:	52 00 20 20 20 20 20 20 20 20 20 20 20 00 74 6f     R.           .to
1000433c:	20 73 75 62 6d 69 74 00 20 20 20 4f 4b 20 20 20      submit.   OK   
1000434c:	00 44 61 74 65 20 61 6e 64 20 54 69 6d 65 00 31     .Date and Time.1
1000435c:	34 2f 30 35 2f 32 30 32 31 20 31 38 3a 35 35 3a     4/05/2021 18:55:
1000436c:	30 30 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     00..Please enter
1000437c:	20 74 68 65 20 63 75 72 72 65 6e 74 20 64 61 74      the current dat
1000438c:	65 20 61 6e 64 20 74 69 6d 65 2c 00 61 6e 64 20     e and time,.and 
1000439c:	74 68 65 6e 20 70 72 65 73 73 20 45 4e 54 45 52     then press ENTER
100043ac:	2e 00 44 44 2f 4d 4d 2f 59 59 59 59 20 48 48 3a     ..DD/MM/YYYY HH:
100043bc:	4d 4d 3a 53 53 00 57 57 2d 37 38 33 38 38 2d 34     MM:SS.WW-78388-4
100043cc:	35 35 35 35 2d 4e 00 50 72 6f 64 75 63 74 20 4b     5555-N.Product K
100043dc:	65 79 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     ey..Please enter
100043ec:	20 79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65      your product ke
100043fc:	79 20 62 65 6c 6f 77 2c 00 49 6e 76 61 6c 69 64     y below,.Invalid
1000440c:	20 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00 00      Product Key....
1000441c:	54 68 65 20 65 6e 74 65 72 65 64 20 70 72 6f 64     The entered prod
1000442c:	75 63 74 20 6b 65 79 20 77 61 73 20 69 6e 76 61     uct key was inva
1000443c:	6c 69 64 2e 00 00 00 00 50 72 65 73 73 20 61 6e     lid.....Press an
1000444c:	79 20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75     y key to continu
1000445c:	65 20 61 6e 64 20 74 68 65 6e 00 00 65 6e 74 65     e and then..ente
1000446c:	72 20 74 68 65 20 70 72 6f 64 75 63 74 20 6b 65     r the product ke
1000447c:	79 20 63 6f 72 72 65 63 74 6c 79 2e 00 46 69 6e     y correctly..Fin
1000448c:	61 6c 69 73 69 6e 67 20 49 6e 73 74 61 6c 6c 61     alising Installa
1000449c:	74 69 6f 6e 00 40 6d 65 6d 6f 72 79 3a 73 77 61     tion.@memory:swa
100044ac:	70 66 69 6c 65 00 73 79 73 74 65 6d 00 43 3a 2f     pfile.system.C:/
100044bc:	42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f     Banana/Registry/
100044cc:	53 79 73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61     System.C:/Banana
100044dc:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 00 00     /Registry/User..
100044ec:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
100044fc:	72 79 2f 44 65 66 61 75 6c 74 53 79 73 74 65 6d     ry/DefaultSystem
1000450c:	00 4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69     .Loading extensi
1000451c:	6f 6e 73 2e 2e 2e 00 43 3a 2f 42 61 6e 61 6e 61     ons....C:/Banana
1000452c:	2f 53 79 73 74 65 6d 2f 73 65 74 75 70 69 73 64     /System/setupisd
1000453c:	2e 6f 6e 65 00 53 59 53 49 4e 49 54 20 46 41 49     .one.SYSINIT FAI
1000454c:	4c 55 52 45 00 43 3a 2f 42 61 6e 61 6e 61 2f 53     LURE.C:/Banana/S
1000455c:	79 73 74 65 6d 2f 53 59 53 54 45 4d 2e 52 45 47     ystem/SYSTEM.REG
1000456c:	00 43 4c 49 50 44 52 41 57 00 42 41 43 4b 47 52     .CLIPDRAW.BACKGR
1000457c:	4f 55 4e 44 49 4d 41 47 45 00 43 4c 49 50 44 52     OUNDIMAGE.CLIPDR
1000458c:	41 57 2f 42 41 43 4b 47 52 4f 55 4e 44 49 4d 41     AW/BACKGROUNDIMA
1000459c:	47 45 00 4d 4f 44 45 00 43 4c 49 50 44 52 41 57     GE.MODE.CLIPDRAW
100045ac:	2f 42 41 43 4b 47 52 4f 55 4e 44 49 4d 41 47 45     /BACKGROUNDIMAGE
100045bc:	2f 4d 4f 44 45 00 73 6f 6c 69 64 20 63 6f 6c 6f     /MODE.solid colo
100045cc:	75 72 00 41 55 54 4f 47 55 49 00 53 45 52 49 41     ur.AUTOGUI.SERIA
100045dc:	4c 4e 55 4d 42 45 52 00 74 68 65 20 62 61 63 6b     LNUMBER.the back
100045ec:	67 72 6f 75 6e 64 20 73 68 6f 75 6c 64 20 62 65     ground should be
100045fc:	20 69 6e 20 74 68 65 20 6d 6f 64 65 20 77 68 65      in the mode whe
1000460c:	72 65 20 69 74 20 69 73 20 61 6e 20 69 6d 61 67     re it is an imag
1000461c:	65 20 74 69 6c 65 64 20 69 6e 20 61 20 39 78 39     e tiled in a 9x9
1000462c:	20 61 72 72 61 6e 67 65 6d 65 6e 74 2c 20 62 75      arrangement, bu
1000463c:	74 20 73 74 72 65 74 63 68 65 64 20 73 6f 20 39     t stretched so 9
1000464c:	78 39 20 6f 76 65 72 73 20 74 68 65 20 77 68 6f     x9 overs the who
1000465c:	6c 65 20 73 63 72 65 65 6e 00 43 3a 2f 42 61 6e     le screen.C:/Ban
1000466c:	61 6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d 61     ana/System/comma
1000467c:	6e 64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55 47     nd.exe.C:/DE.BUG
1000468c:	00 43 3a 2f 42 61 6e 61 6e 61 2f 44 72 69 76 65     .C:/Banana/Drive
1000469c:	72 73 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     rs/.C:/Banana/Sy
100046ac:	73 74 65 6d 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f     stem/.C:/Banana/
100046bc:	52 65 67 69 73 74 72 79 2f 00 00 00 54 68 65 20     Registry/...The 
100046cc:	69 6e 73 74 61 6c 6c 61 74 69 6f 6e 20 68 61 73     installation has
100046dc:	20 62 65 65 6e 20 63 6f 6d 70 6c 65 74 65 64 2e      been completed.
100046ec:	0a 00 00 00 50 6c 65 61 73 65 20 70 72 65 73 73     ....Please press
100046fc:	20 45 4e 54 45 52 20 74 6f 20 72 65 73 74 61 72      ENTER to restar
1000470c:	74 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72 00     t your computer.
1000471c:	61 6e 64 20 73 74 61 72 74 20 42 61 6e 61 6e 61     and start Banana
1000472c:	2e 00 00 00 50 4c 45 41 53 45 20 4d 41 4e 55 41     ....PLEASE MANUA
1000473c:	4c 4c 59 20 52 45 53 54 41 52 54 20 59 4f 55 52     LLY RESTART YOUR
1000474c:	20 43 4f 4d 50 55 54 45 52 00 61 75 74 6f 67 75      COMPUTER.autogu
1000475c:	69 00 73 68 65 6c 6c 00 41 55 54 4f 20 47 55 49     i.shell.AUTO GUI
1000476c:	2e 0a 00 54 55 52 4e 20 4f 46 46 20 50 43 00 63     ...TURN OFF PC.c
1000477c:	61 6c 6c 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     all.C:/Banana/Sy
1000478c:	73 74 65 6d 2f 69 6e 69 74 2e 62 61 74 00 00 00     stem/init.bat...
1000479c:	66 46 00 10 7b 47 00 10 80 47 00 10 00 00 00 00     fF..{G...G......	1000479c: R_386_32	.text
	100047a0: R_386_32	.text
	100047a4: R_386_32	.text
